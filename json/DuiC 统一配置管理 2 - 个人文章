{"title": "DuiC 统一配置管理 2 - 个人文章 ", "index": "javascript,python,node.js,web,java", "content": "为什么设计 DuiC\n在工作中我们时常要根据不同环境配置不同的参数，让项目的灵活性、可用性变得更高，那灵活的配置就变得必不可少，虽然目前已经存在很多配置管理解决方案，但是管理方式局限性大，适应范围窄。\nDuiC 在设计初就考虑到配置的应用范围，将配置获取方式设计为 RESTful API 的方式，可支持任何服务器端，客户端以及 WEB 轻松获取配置。其次 DuiC 管理配置统一采用 YAML 的方式，并提供 WEB 编辑器及语法高亮，语法校验等功能，降低配置修改的错误率。\nDuiC 源码： https://github.com/zhudyos/duic\n\n已实现的功能\n\n检查配置状态\n通过 key 获取某个配置\n通过 name/profile 获取整体配置\n多个 profile 配置深度合并\n配置权限管理\n分布式配置管理\n容器部署\n\nSwagger 文档： https://app.swaggerhub.com/ap...Docker 镜像： https://hub.docker.com/r/zhud...\n\nJava Client API\nDuiC 提供 Java 客户端 API 帮助你快速获取配置，支持 Android/Java/JavaWeb/Spring 获取配置同时支持热加载配置。\nduic-java-client：https://github.com/zhudyos/du...\n\nJava/Android 使用\n使用 API 提供的 ConfigUtils 工具包获取配置。创建 Config 实例并将设置为 ConfigUtils 的默认配置，使用。\nConfig config = new Config.Builder()\n        .baseUri(\"https://duic.zhudy.io/api/v1\")\n        .name(\"hello\")\n        .profile(\"world\")\n        // .configToken(\"...\")\n        // .reloadPlot(new ReloadPlot(10, TimeUnit.SECONDS)) // 重载\n        // .failFast(true) // 快速失败\n        // .listener() // 配置加载监听\n        .build();\nConfigUtils.setDefaultConfig(config);\nJava Web 使用\n使用 API 提供的 ConfigUtils 工具包获取配置。在 web.xml 中配置监听器\n<!-- 默认配置路径 classpath:duic.properties -->\n<context-param>\n  <param-name>duicConfigLocation</param-name>\n  <param-value>classpath:duic.properties</param-value>\n</context-param>\n\n<listener>\n  <listener-class>io.zhudy.duic.config.web.DuicConfigContextListener</listener-class>\n</listener>\n在 duic.properties 文件中增加配置管理中心信息\nduic.base.uri=https://duic.zhudy.io/api/v1\nduic.name=hello\nduic.profile=world\nduic.config.token=\nduic.reload.period=10\nduic.reload.unit=SECONDS\nduic.fail.fast=false\n# 多个 DuicListener 采用英文逗号(,)分隔\nduic.listeners=xx.MyDuicListener\n在 Spring 中使用\n\n使用 API 提供的 ConfigUtils 工具包获取配置\n使用 @Value 的方式注入配置（推荐）\n\n以上2种方式都支持热加载，推荐使用 @Value 的方式注入配置，这种方式对于你的代码没有任何的浸入性，支持 spring3.2 以上的版本使用。\n\n\n使用注解的方式初始化\n@Bean\npublic static DuicConfigBeanFactoryPostProcessor duicConfigBeanFactoryPostProcessor() {\n  DuicConfigBeanFactoryPostProcessor processor = new DuicConfigBeanFactoryPostProcessor();\n  processor.setBaseUri(\"https://duic.zhudy.io/api/v1\");\n  processor.setName(\"hello\");\n  processor.setProfile(\"world\");\n  return processor;\n}\n\n\n使用 XML 的方式初始化\n<bean id=\"duicConfigBeanFactoryPostProcessor\" class=\"io.zhudy.duic.config.spring.duicConfigBeanFactoryPostProcessor\">\n  <property name=\"baseUri\" value=\"https://duic.zhudy.io/api/v1\"/>\n  <property name=\"name\" value=\"hello\"/>\n  <property name=\"profile\" value=\"world\"/>\n</bean>\n\n\n注入配置\n@Component\npublic class Example {\n\n  @Value(\"${k1.string}\")\n  private String k1;\n}\nSpring Boot 支持\nDuiC 也提供了 duic-spring-cloud-config-client 来支持 spring-boot，使用 DuiC 管理配置可以完全替代 spring-cloud-config。\nduic-spring-cloud-config-client：https://github.com/zhudyos/du...\n\n该工具包支持 @ConfigurationProperties 及 @Value 注入配置，同时也支持热加载。注意如果你使用 @ConfigurationProperties 注入配置并且想要热加载配置需要配合使用 @RefreshScope 注解。\n关于更多 @RefreshScope 的资料请查看 spring-cloud 官方文档：https://cloud.spring.io/sprin...\n使用示例在 bootstrap.yml 文件中增加如下配置\nspring:\n  application:\n    name: samples (1)\n\nduic:\n  spring:\n    cloud:\n      config:\n        watch:\n          enabled: true (2)\n          initial_delay: 10000 (3)\n          fixed_delay: 10000 (4)\n        uri: https://duic.zhudy.io/api/v1 (5)\n        profile: first,second (6)\n        # token: [TOKEN] (7)\nduic docker-compose\nhttps://github.com/zhudyos/du...\n关于 DuiC 更加详细的描述，可以查看仓库中在 readme。\n在线演示平台：https://duic.zhudy.io/index.htmle-mail: kevinz@weghst.compassword: 123456\n大家可以使用在线演示平台，尝试使用其提供的 API 及 SDK。友情提醒：服务器配置较差，访问速度可能不是很快，请体谅。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}