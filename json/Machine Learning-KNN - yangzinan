{"title": "Machine Learning-KNN - yangzinan ", "index": "python", "content": "一、定义\nurl:https://en.wikipedia.org/wiki...\nIn pattern recognition, the k-nearest neighbors algorithm (k-NN) is a non-parametric method used for classification and regression.[1] In both cases, the input consists of the k closest training examples in the feature space. The output depends on whether k-NN is used for classification or regression:In k-NN classification, the output is a class membership. An object is classified by a majority vote of its neighbors, with the object being assigned to the class most common among its k nearest neighbors (k is a positive integer, typically small). If k = 1, then the object is simply assigned to the class of that single nearest neighbor.\nIn k-NN regression, the output is the property value for the object. This value is the average of the values of its k nearest neighbors.\n\n二、个人理解\n其实简单理解就是：通过计算新加入点与附近K个点的距离，然后寻找到距离最近的K个点，进行占比统计，找到k个点中数量占比最高的target，那么新加入的样本，它的target就是频数最高的target\n三、实践\n语言：python3\n欧拉距离：\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat Mar 17 11:17:18 2018\n\n@author: yangzinan\n\"\"\"\n\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom math import sqrt\n\nfrom collections import Counter \n\n\n# 样本\nx= [\n              [3.393533211,2.331273381],\n              [3.110073483,1.781539638],\n              [1.343808831,3.368360954],\n              [3.582294042,4.679179110],\n              [2.280362439,2.866990263],\n              [7.423436942,4.696522875],\n              [5.745051997,3.533989803],\n              [9.172168622,2.511101045],\n              [7.792783481,3.424088941],\n              [7.939820817,0.791637231]\n            ]\n\ny= [0,0,0,0,0,1,1,1,1,1]\n\n\nx_train = np.array(x)\ny_train = np.array(y)\n              \n\n# 绘图\nplt.scatter(x_train[y_train==0,0],x_train[y_train==0,1],color=\"red\")\nplt.scatter(x_train[y_train==1,0],x_train[y_train==1,1],color=\"green\")\n\n\n\nx_point = np.array([8.093607318,3.365731514])\n\n\nplt.scatter(x_point[0],x_point[1],color=\"blue\")\nplt.show()\n\n\n#计算距离 欧拉距离\n\ndistances = []\n\nfor d in x_train:\n    # 求出和x相差的距离\n    d_sum = sqrt(np.sum(((d-x)**2)))\n    distances.append(d_sum)\n\nprint(distances)\n\n#求出最近的点\n#按照从小到大的顺序，得到下标\nnearest = np.argsort(distances)\n\n#指定应该求出的个数\nk = 3\ntopK_y = []\n\n#求出前K个target\nfor i in nearest[:k]:\n    topK_y.append(y_train[i])\n\n\n#得到频数最高的target，那么新加入点target 就是频数最高的\npredict_y = Counter(topK_y).most_common(1)[0][0]\n\nprint(predict_y)\n\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}