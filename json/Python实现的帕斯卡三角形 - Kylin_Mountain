{"title": "Python实现的帕斯卡三角形 - Kylin_Mountain ", "index": "python", "content": "带有缓存的迭代器\n\n# 帕斯卡三角形\n\nmCache = {}\ndef pascalWithDict(n,k):\n  if n==k or k==0 or n==1:\n    return 1\n  if k==1:\n    return n\n  if mCache.has_key((n,k)):\n    return mCache[(n,k)]\n  else:\n    mCache[n,k] = pascalWithDict(n-1,k-1)+pascalWithDict(n-1,k)\n    return mCache[n,k]\n\n## 获得每行pascal列表\ndef generatePascal(depth):\n  lines = []\n  for row in range(depth):\n    line = []\n    for col in range(row+1):\n      line.append(pascal(row, col))\n    lines.append(line)\n  return lines\n\nif __name__ == \"__main__\":\n  high = int(raw_input(\"pls enter the height of pascal:\"))\n  lines = generatePascal(high)\n  for i in range(high):\n    print lines[i] \n\n\n\n结果如下：\n\npls enter the height of pascal:6\n[1]\n[1, 1]\n[1, 2, 1]\n[1, 3, 3, 1]\n[1, 4, 6, 4, 1]\n[1, 5, 10, 10, 5, 1]\n\n\n使用装饰器的迭代器\n\nfrom functools import wraps\n\ndef memo(func):\n  cache={}\n  @wraps(func)\n  def wrap(*args):\n    if args not in cache:\n      cache[args]=func(*args)\n    return cache[args]\n  return wrap\n\n@memo\ndef pascal(n,k):\n  if n==k or k==0 or n==1:\n    return 1\n  if k==1:\n    return n\n  return pascal(n-1,k-1)+pascal(n-1,k)\n\n\n\n跳舞的数字[Just for fun]\n\nif __name__ == \"__main__\":\n  #depth = int(raw_input(\"pls enter the depth of pascal:\"))\n  for depth in range(100):\n    lines = generatePascal(depth)\n    for i in range(depth):\n      print lines[i] \n\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}