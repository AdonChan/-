{"title": "python学习笔记-使用@property、setter、deleter - helloword ", "index": "python", "content": "在python中，我们需要对外暴露一个成员变量的时候，我们往往需要对外部输入的值进行判断，以确保是符合我们的期望的。\nclass Student(object):\n    age = 20\n    \nstudent = Student()\nprint student.age\nstudent.age = \"hello\"\n上述这种写法虽然可以取到age属性，但是同时也可以对age设置任意值。所以并不合理。\n那怎么解决了，我们可以把age变成私有的成员变量。然后写一个getter用于供外部取得age值；一个setter函数用于供外部设置age值，并对age值进行一定的判断。例如：\nclass Student(object):\n    def __init__(self):\n        self._age = None\n\n    def age_getter(self):\n        return self._age\n\n    def age_setter(self, age):\n        if isinstance(age, str) and age.isdigit():\n            age = int(age)\n        else:\n            raise ValueError(\"age is illegal\")\n        if isinstance(age,int):\n            self._age = age\n那么我就需要student.age_getter()取得age，student.age_setter()设置age值。但是这样实现了功能，但是的确使得调用变得比较麻烦。有什么地方可以改进吗？\n这个时候我们可以在getter和setter后面定义一个成员变量age。例如\nage = property(age_getter, age_setter)\n这样我们就可以把age当成一个Student的属性来调用和赋值了。例如：\nstudent.age = \"20\"\nprint student.age\n你觉得python只能这么写getter和setter了，那就图样图森破了。python还有逆天的装饰器来实现getter、setter、和deleter。例如：\nclass Student(object):\n    def __init__(self):\n        self._age = None\n\n    @property\n    def age(self):\n        return self._age\n\n    @age.setter\n    def age(self, age):\n        if isinstance(age, int):\n            self._age = age\n            return\n        if isinstance(age, str) and age.isdigit():\n            age = int(age)\n            self._age = age\n        else:\n            raise ValueError(\"age is illegal\")\n\n    @age.deleter\n    def age(self):\n        del self._age\n\n\nstudent = Student()\nstudent.age = 20\nprint student.age\n\ndel student.age\n\n上面的例子中用@property、x.setter x.deleter实现了属性的读取、赋值、和删除。当然您也可以只是实现其中的一个或者几个。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "4"}