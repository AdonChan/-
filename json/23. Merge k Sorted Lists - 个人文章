{"title": "23. Merge k Sorted Lists - 个人文章 ", "index": "leetcode,python", "content": "题目\nMerge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.合并k排序链表并返回一个排序列表。分析和描述它的复杂性。\n直接对k个链表合并，找到k个链表头最小的，将值追加到放在新创建的链表中，并把头移到下一个节点，直到所有的链表头none\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        head = None\n        walk_list = [lists[i] for i in range(len(lists))]\n        pre = None\n        while len(filter(lambda x: x is not None, walk_list)):\n            for i in range(len(walk_list)):\n                if walk_list[i] is not None:\n                    min_val = walk_list[i].val\n                    min_index = i\n                    break\n            for i in range(len(walk_list)):\n                if walk_list[i] and walk_list[i].val < min_val:\n                    min_val = walk_list[i].val\n                    min_index = i\n            l = ListNode(min_val)\n            walk_list[min_index] = walk_list[min_index].next\n            if head is None:\n                head = l\n                pre = head\n            else:\n                pre.next = l\n                pre = l\n        return head\n运行后发现超时\n尝试两两合并两个链表，知道最终合并成一个\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n\n        if not lists:\n            return None\n        i = 0\n        j = len(lists) - 1\n        r_list = lists\n        while i < j:\n            l = []\n            while i < j:\n                node = self.mergetwolists(r_list[i], r_list[j])\n                l.append(node)\n                i += 1\n                j -= 1\n            if i == j:\n                l.append(r_list[i])\n            r_list = l\n            i = 0\n            j = len(r_list) - 1\n        return r_list[0]\n\n    def mergetwolists(self, l1, l2):\n        if l1 == None:\n            return l2\n        if l2 == None:\n            return l1\n        l1_head = l1\n        l2_head = l2\n        head = None\n        pre = None\n        while l1_head and l2_head:\n            if l1_head.val < l2_head.val:\n                l = ListNode(l1_head.val)\n                l1_head = l1_head.next\n            else:\n                l = ListNode(l2_head.val)\n                l2_head = l2_head.next\n\n            if pre == None:\n                pre = l\n                head = l\n            else:\n                pre.next = l\n                pre = l\n\n            if l1_head is None:\n                pre.next = l2_head\n            if l2_head is None:\n                pre.next = l1_head\n        return head\n\n运行通过\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}