{"title": "opencv python 直方图均衡化 - 个人文章 ", "index": "opencv-python,opencv,python", "content": "Histograms - 2: Histogram Equalization \n直方图均衡化是图像处理领域中利用图像直方图对对比度进行调整的方法.通过这种方法，亮度可以更好地在直方图上分布.这样就可以用于增强局部的对比度而不影响整体的对比度，直方图均衡化通过有效地扩展常用的亮度来实现这种功能.\n\nOpenCV中的直方图均衡\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('img.jpg',0)\n\nequ = cv2.equalizeHist(img)\nres = np.hstack((img,equ)) #stacking images side-by-side\ncv2.imshow('show',res)\n\ncv2.waitKey()\n\nCLAHE（对比度有限自适应直方图均衡）\n确实，直方图均衡后背景对比度有所改善.但比较两个图像,由于亮度过高，我们丢失了大部分信息,这是因为它的直方图并不局限于特定区域.\n为了解决这个问题，使用自适应直方图均衡.图像被划分为几个小块，称为“tiles”(在OpenCV中默认值是8x8).然后每一个方块都是像平常一样的直方图,因此，直方图会限制在一个小区域(除非有噪声)。如果噪音在那里，它就会被放大.为了避免这种情况，会应用对比限制.如果任何直方图bin超出指定的对比度限制（默认情况下是40），在应用直方图均衡之前，这些像素被裁剪并均匀地分布到其他bin.均衡后，删除边界中的工件，采用双线性插值.\n代码：\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('img.jpg',0)\n\n# create a CLAHE object (Arguments are optional).\nclahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))\ncl1 = clahe.apply(img)\n\n\ncv2.imshow('show',cl1)\n\ncv2.waitKey()\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}