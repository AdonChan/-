{"title": "Python基础——数据类型 - 人生苦短，我用Python ", "index": "python", "content": "本文讲解Python常用7种数据类型:int, float, str, list, set, dict. 通过剖析源码弄清楚每一种数据类型所有的内置函数，理解每一个函数的参数、返回值、使用场景是什么。\n一、整型 int\nPython3.6源码解析\nclass int(object):\n    \"\"\"\n    int(x=0) -> integer\n    int(x, base=10) -> integer\n    \n    Convert a number or string to an integer, or return 0 if no arguments\n    are given.  If x is a number, return x.__int__().  For floating point\n    numbers, this truncates towards zero.\n    \n    If x is not a number or if base is given, then x must be a string,\n    bytes, or bytearray instance representing an integer literal in the\n    given base.  The literal can be preceded by '+' or '-' and be surrounded\n    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\n    Base 0 means to interpret the base from the string as an integer literal.\n    >>> int('0b100', base=0)\n    4\n    \"\"\"\n    def bit_length(self): # real signature unknown; restored from __doc__\n        \"\"\"\n        int.bit_length() -> int\n        \n        Number of bits necessary to represent self in binary.\n        >>> bin(37)\n        '0b100101'\n        >>> (37).bit_length()\n        6\n        \"\"\"\n        return 0\n\n    def conjugate(self, *args, **kwargs): # real signature unknown\n        \"\"\" Returns self, the complex conjugate of any int. \"\"\"\n        pass\n\n    @classmethod # known case\n    def from_bytes(cls, bytes, byteorder, *args, **kwargs): # real signature unknown; NOTE: unreliably restored from __doc__ \n        \"\"\"\n        int.from_bytes(bytes, byteorder, *, signed=False) -> int\n        \n        Return the integer represented by the given array of bytes.\n        \n        The bytes argument must be a bytes-like object (e.g. bytes or bytearray).\n        \n        The byteorder argument determines the byte order used to represent the\n        integer.  If byteorder is 'big', the most significant byte is at the\n        beginning of the byte array.  If byteorder is 'little', the most\n        significant byte is at the end of the byte array.  To request the native\n        byte order of the host system, use `sys.byteorder' as the byte order value.\n        \n        The signed keyword-only argument indicates whether two's complement is\n        used to represent the integer.\n        \"\"\"\n        pass\n\n    def to_bytes(self, length, byteorder, *args, **kwargs): # real signature unknown; NOTE: unreliably restored from __doc__ \n        \"\"\"\n        int.to_bytes(length, byteorder, *, signed=False) -> bytes\n        \n        Return an array of bytes representing an integer.\n        \n        The integer is represented using length bytes.  An OverflowError is\n        raised if the integer is not representable with the given number of\n        bytes.\n        \n        The byteorder argument determines the byte order used to represent the\n        integer.  If byteorder is 'big', the most significant byte is at the\n        beginning of the byte array.  If byteorder is 'little', the most\n        significant byte is at the end of the byte array.  To request the native\n        byte order of the host system, use `sys.byteorder' as the byte order value.\n        \n        The signed keyword-only argument determines whether two's complement is\n        used to represent the integer.  If signed is False and a negative integer\n        is given, an OverflowError is raised.\n        \"\"\"\n        pass\n\nbit_length: 返回二进制数据所占的bit位数\nconjugate: 获取复数的共轭复数\ndenominator:\n\nfrom_bytes: 将bytes解析为整数\nimag:获取复数的虚部\nnumerator:\nreal: 获取复数的实部\n\nto_bytes: 将一个大整数转换为一个字节字符串\n\n二、浮点型 float\nPython3.6源码解析\nclass float(object):\n    \"\"\"\n    float(x) -> floating point number\n    \n    Convert a string or number to a floating point number, if possible.\n    \"\"\"\n    def as_integer_ratio(self): # real signature unknown; restored from __doc__\n        \"\"\"\n        float.as_integer_ratio() -> (int, int)\n        \n        Return a pair of integers, whose ratio is exactly equal to the original\n        float and with a positive denominator.\n        Raise OverflowError on infinities and a ValueError on NaNs.\n        \n        >>> (10.0).as_integer_ratio()\n        (10, 1)\n        >>> (0.0).as_integer_ratio()\n        (0, 1)\n        >>> (-.25).as_integer_ratio()\n        (-1, 4)\n        \"\"\"\n        pass\n\n    def conjugate(self, *args, **kwargs): # real signature unknown\n        \"\"\" Return self, the complex conjugate of any float. \"\"\"\n        pass\n\n    @staticmethod # known case\n    def fromhex(string): # real signature unknown; restored from __doc__\n        \"\"\"\n        float.fromhex(string) -> float\n        \n        Create a floating-point number from a hexadecimal string.\n        >>> float.fromhex('0x1.ffffp10')\n        2047.984375\n        >>> float.fromhex('-0x1p-1074')\n        -5e-324\n        \"\"\"\n        return 0.0\n\n    def hex(self): # real signature unknown; restored from __doc__\n        \"\"\"\n        float.hex() -> string\n        \n        Return a hexadecimal representation of a floating-point number.\n        >>> (-0.1).hex()\n        '-0x1.999999999999ap-4'\n        >>> 3.14159.hex()\n        '0x1.921f9f01b866ep+1'\n        \"\"\"\n        return \"\"\n\n    def is_integer(self, *args, **kwargs): # real signature unknown\n        \"\"\" Return True if the float is an integer. \"\"\"\n        pass\n\n\nas_integer_ratio:\nconjugate:\nfromhex:\nhex:\nimag:\nis_integer:\nreal:\n\n三、字符串 str\nPython3.6源码解析\nclass str(object):\n    \"\"\"\n    str(object='') -> str\n    str(bytes_or_buffer[, encoding[, errors]]) -> str\n    \n    Create a new string object from the given object. If encoding or\n    errors is specified, then the object must expose a data buffer\n    that will be decoded using the given encoding and error handler.\n    Otherwise, returns the result of object.__str__() (if defined)\n    or repr(object).\n    encoding defaults to sys.getdefaultencoding().\n    errors defaults to 'strict'.\n    \"\"\"\n    def capitalize(self): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.capitalize() -> str\n        \n        Return a capitalized version of S, i.e. make the first character\n        have upper case and the rest lower case.\n        \"\"\"\n        return \"\"\n\n    def casefold(self): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.casefold() -> str\n        \n        Return a version of S suitable for caseless comparisons.\n        \"\"\"\n        return \"\"\n\n    def center(self, width, fillchar=None): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.center(width[, fillchar]) -> str\n        \n        Return S centered in a string of length width. Padding is\n        done using the specified fill character (default is a space)\n        \"\"\"\n        return \"\"\n\n    def count(self, sub, start=None, end=None): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.count(sub[, start[, end]]) -> int\n        \n        Return the number of non-overlapping occurrences of substring sub in\n        string S[start:end].  Optional arguments start and end are\n        interpreted as in slice notation.\n        \"\"\"\n        return 0\n\n    def encode(self, encoding='utf-8', errors='strict'): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.encode(encoding='utf-8', errors='strict') -> bytes\n        \n        Encode S using the codec registered for encoding. Default encoding\n        is 'utf-8'. errors may be given to set a different error\n        handling scheme. Default is 'strict' meaning that encoding errors raise\n        a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and\n        'xmlcharrefreplace' as well as any other name registered with\n        codecs.register_error that can handle UnicodeEncodeErrors.\n        \"\"\"\n        return b\"\"\n\n    def endswith(self, suffix, start=None, end=None): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.endswith(suffix[, start[, end]]) -> bool\n        \n        Return True if S ends with the specified suffix, False otherwise.\n        With optional start, test S beginning at that position.\n        With optional end, stop comparing S at that position.\n        suffix can also be a tuple of strings to try.\n        \"\"\"\n        return False\n\n    def expandtabs(self, tabsize=8): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.expandtabs(tabsize=8) -> str\n        \n        Return a copy of S where all tab characters are expanded using spaces.\n        If tabsize is not given, a tab size of 8 characters is assumed.\n        \"\"\"\n        return \"\"\n\n    def find(self, sub, start=None, end=None): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.find(sub[, start[, end]]) -> int\n        \n        Return the lowest index in S where substring sub is found,\n        such that sub is contained within S[start:end].  Optional\n        arguments start and end are interpreted as in slice notation.\n        \n        Return -1 on failure.\n        \"\"\"\n        return 0\n\n    def format(self, *args, **kwargs): # known special case of str.format\n        \"\"\"\n        S.format(*args, **kwargs) -> str\n        \n        Return a formatted version of S, using substitutions from args and kwargs.\n        The substitutions are identified by braces ('{' and '}').\n        \"\"\"\n        pass\n\n    def format_map(self, mapping): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.format_map(mapping) -> str\n        \n        Return a formatted version of S, using substitutions from mapping.\n        The substitutions are identified by braces ('{' and '}').\n        \"\"\"\n        return \"\"\n\n    def index(self, sub, start=None, end=None): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.index(sub[, start[, end]]) -> int\n        \n        Return the lowest index in S where substring sub is found, \n        such that sub is contained within S[start:end].  Optional\n        arguments start and end are interpreted as in slice notation.\n        \n        Raises ValueError when the substring is not found.\n        \"\"\"\n        return 0\n\n    def isalnum(self): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.isalnum() -> bool\n        \n        Return True if all characters in S are alphanumeric\n        and there is at least one character in S, False otherwise.\n        \"\"\"\n        return False\n\n    def isalpha(self): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.isalpha() -> bool\n        \n        Return True if all characters in S are alphabetic\n        and there is at least one character in S, False otherwise.\n        \"\"\"\n        return False\n\n    def isdecimal(self): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.isdecimal() -> bool\n        \n        Return True if there are only decimal characters in S,\n        False otherwise.\n        \"\"\"\n        return False\n\n    def isdigit(self): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.isdigit() -> bool\n        \n        Return True if all characters in S are digits\n        and there is at least one character in S, False otherwise.\n        \"\"\"\n        return False\n\n    def isidentifier(self): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.isidentifier() -> bool\n        \n        Return True if S is a valid identifier according\n        to the language definition.\n        \n        Use keyword.iskeyword() to test for reserved identifiers\n        such as \"def\" and \"class\".\n        \"\"\"\n        return False\n\n    def islower(self): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.islower() -> bool\n        \n        Return True if all cased characters in S are lowercase and there is\n        at least one cased character in S, False otherwise.\n        \"\"\"\n        return False\n\n    def isnumeric(self): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.isnumeric() -> bool\n        \n        Return True if there are only numeric characters in S,\n        False otherwise.\n        \"\"\"\n        return False\n\n    def isprintable(self): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.isprintable() -> bool\n        \n        Return True if all characters in S are considered\n        printable in repr() or S is empty, False otherwise.\n        \"\"\"\n        return False\n\n    def isspace(self): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.isspace() -> bool\n        \n        Return True if all characters in S are whitespace\n        and there is at least one character in S, False otherwise.\n        \"\"\"\n        return False\n\n    def istitle(self): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.istitle() -> bool\n        \n        Return True if S is a titlecased string and there is at least one\n        character in S, i.e. upper- and titlecase characters may only\n        follow uncased characters and lowercase characters only cased ones.\n        Return False otherwise.\n        \"\"\"\n        return False\n\n    def isupper(self): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.isupper() -> bool\n        \n        Return True if all cased characters in S are uppercase and there is\n        at least one cased character in S, False otherwise.\n        \"\"\"\n        return False\n\n    def join(self, iterable): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.join(iterable) -> str\n        \n        Return a string which is the concatenation of the strings in the\n        iterable.  The separator between elements is S.\n        \"\"\"\n        return \"\"\n\n    def ljust(self, width, fillchar=None): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.ljust(width[, fillchar]) -> str\n        \n        Return S left-justified in a Unicode string of length width. Padding is\n        done using the specified fill character (default is a space).\n        \"\"\"\n        return \"\"\n\n    def lower(self): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.lower() -> str\n        \n        Return a copy of the string S converted to lowercase.\n        \"\"\"\n        return \"\"\n\n    def lstrip(self, chars=None): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.lstrip([chars]) -> str\n        \n        Return a copy of the string S with leading whitespace removed.\n        If chars is given and not None, remove characters in chars instead.\n        \"\"\"\n        return \"\"\n\n    def maketrans(self, *args, **kwargs): # real signature unknown\n        \"\"\"\n        Return a translation table usable for str.translate().\n        \n        If there is only one argument, it must be a dictionary mapping Unicode\n        ordinals (integers) or characters to Unicode ordinals, strings or None.\n        Character keys will be then converted to ordinals.\n        If there are two arguments, they must be strings of equal length, and\n        in the resulting dictionary, each character in x will be mapped to the\n        character at the same position in y. If there is a third argument, it\n        must be a string, whose characters will be mapped to None in the result.\n        \"\"\"\n        pass\n\n    def partition(self, sep): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.partition(sep) -> (head, sep, tail)\n        \n        Search for the separator sep in S, and return the part before it,\n        the separator itself, and the part after it.  If the separator is not\n        found, return S and two empty strings.\n        \"\"\"\n        pass\n\n    def replace(self, old, new, count=None): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.replace(old, new[, count]) -> str\n        \n        Return a copy of S with all occurrences of substring\n        old replaced by new.  If the optional argument count is\n        given, only the first count occurrences are replaced.\n        \"\"\"\n        return \"\"\n\n    def rfind(self, sub, start=None, end=None): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.rfind(sub[, start[, end]]) -> int\n        \n        Return the highest index in S where substring sub is found,\n        such that sub is contained within S[start:end].  Optional\n        arguments start and end are interpreted as in slice notation.\n        \n        Return -1 on failure.\n        \"\"\"\n        return 0\n\n    def rindex(self, sub, start=None, end=None): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.rindex(sub[, start[, end]]) -> int\n        \n        Return the highest index in S where substring sub is found,\n        such that sub is contained within S[start:end].  Optional\n        arguments start and end are interpreted as in slice notation.\n        \n        Raises ValueError when the substring is not found.\n        \"\"\"\n        return 0\n\n    def rjust(self, width, fillchar=None): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.rjust(width[, fillchar]) -> str\n        \n        Return S right-justified in a string of length width. Padding is\n        done using the specified fill character (default is a space).\n        \"\"\"\n        return \"\"\n\n    def rpartition(self, sep): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.rpartition(sep) -> (head, sep, tail)\n        \n        Search for the separator sep in S, starting at the end of S, and return\n        the part before it, the separator itself, and the part after it.  If the\n        separator is not found, return two empty strings and S.\n        \"\"\"\n        pass\n\n    def rsplit(self, sep=None, maxsplit=-1): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.rsplit(sep=None, maxsplit=-1) -> list of strings\n        \n        Return a list of the words in S, using sep as the\n        delimiter string, starting at the end of the string and\n        working to the front.  If maxsplit is given, at most maxsplit\n        splits are done. If sep is not specified, any whitespace string\n        is a separator.\n        \"\"\"\n        return []\n\n    def rstrip(self, chars=None): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.rstrip([chars]) -> str\n        \n        Return a copy of the string S with trailing whitespace removed.\n        If chars is given and not None, remove characters in chars instead.\n        \"\"\"\n        return \"\"\n\n    def split(self, sep=None, maxsplit=-1): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.split(sep=None, maxsplit=-1) -> list of strings\n        \n        Return a list of the words in S, using sep as the\n        delimiter string.  If maxsplit is given, at most maxsplit\n        splits are done. If sep is not specified or is None, any\n        whitespace string is a separator and empty strings are\n        removed from the result.\n        \"\"\"\n        return []\n\n    def splitlines(self, keepends=None): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.splitlines([keepends]) -> list of strings\n        \n        Return a list of the lines in S, breaking at line boundaries.\n        Line breaks are not included in the resulting list unless keepends\n        is given and true.\n        \"\"\"\n        return []\n\n    def startswith(self, prefix, start=None, end=None): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.startswith(prefix[, start[, end]]) -> bool\n        \n        Return True if S starts with the specified prefix, False otherwise.\n        With optional start, test S beginning at that position.\n        With optional end, stop comparing S at that position.\n        prefix can also be a tuple of strings to try.\n        \"\"\"\n        return False\n\n    def strip(self, chars=None): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.strip([chars]) -> str\n        \n        Return a copy of the string S with leading and trailing\n        whitespace removed.\n        If chars is given and not None, remove characters in chars instead.\n        \"\"\"\n        return \"\"\n\n    def swapcase(self): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.swapcase() -> str\n        \n        Return a copy of S with uppercase characters converted to lowercase\n        and vice versa.\n        \"\"\"\n        return \"\"\n\n    def title(self): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.title() -> str\n        \n        Return a titlecased version of S, i.e. words start with title case\n        characters, all remaining cased characters have lower case.\n        \"\"\"\n        return \"\"\n\n    def translate(self, table): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.translate(table) -> str\n        \n        Return a copy of the string S in which each character has been mapped\n        through the given translation table. The table must implement\n        lookup/indexing via __getitem__, for instance a dictionary or list,\n        mapping Unicode ordinals to Unicode ordinals, strings, or None. If\n        this operation raises LookupError, the character is left untouched.\n        Characters mapped to None are deleted.\n        \"\"\"\n        return \"\"\n\n    def upper(self): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.upper() -> str\n        \n        Return a copy of S converted to uppercase.\n        \"\"\"\n        return \"\"\n\n    def zfill(self, width): # real signature unknown; restored from __doc__\n        \"\"\"\n        S.zfill(width) -> str\n        \n        Pad a numeric string S with zeros on the left, to fill a field\n        of the specified width. The string S is never truncated.\n        \"\"\"\n        return \"\"\n\ncapitalize:\ncasefold:\ncenter:\ncount:\nencode:\nendswith:\nexpandtabs:\nfind:\nformat:\nformat_map:\nindex:\nisalnum:\nisalpha:\nisdecimal:\nisdigit:\nisidentifier:\nislower:\nisnumeric:\nisprintable:\nisspace:\nistitle:\nisupper:\njoin:\nljust:\nlower:\nlstrip:\nmaketrans:\npartition:\nreplace:\nrfind:\nrindex:\nrjust:\nrpartition:\nrsplit:\nrstrip:\nsplit:\nsplitlines:\nstartswith:\nstrip:\nswapcase:\ntitle:\ntranslate:\nupper:\nzfill:\n\n四、列表 list\nPython3.6源码解析:\nclass list(object):\n    \"\"\"\n    list() -> new empty list\n    list(iterable) -> new list initialized from iterable's items\n    \"\"\"\n    def append(self, p_object): # real signature unknown; restored from __doc__\n        \"\"\" L.append(object) -> None -- append object to end \"\"\"\n        pass\n\n    def clear(self): # real signature unknown; restored from __doc__\n        \"\"\" L.clear() -> None -- remove all items from L \"\"\"\n        pass\n\n    def copy(self): # real signature unknown; restored from __doc__\n        \"\"\" L.copy() -> list -- a shallow copy of L \"\"\"\n        return []\n\n    def count(self, value): # real signature unknown; restored from __doc__\n        \"\"\" L.count(value) -> integer -- return number of occurrences of value \"\"\"\n        return 0\n\n    def extend(self, iterable): # real signature unknown; restored from __doc__\n        \"\"\" L.extend(iterable) -> None -- extend list by appending elements from the iterable \"\"\"\n        pass\n\n    def index(self, value, start=None, stop=None): # real signature unknown; restored from __doc__\n        \"\"\"\n        L.index(value, [start, [stop]]) -> integer -- return first index of value.\n        Raises ValueError if the value is not present.\n        \"\"\"\n        return 0\n\n    def insert(self, index, p_object): # real signature unknown; restored from __doc__\n        \"\"\" L.insert(index, object) -- insert object before index \"\"\"\n        pass\n\n    def pop(self, index=None): # real signature unknown; restored from __doc__\n        \"\"\"\n        L.pop([index]) -> item -- remove and return item at index (default last).\n        Raises IndexError if list is empty or index is out of range.\n        \"\"\"\n        pass\n\n    def remove(self, value): # real signature unknown; restored from __doc__\n        \"\"\"\n        L.remove(value) -> None -- remove first occurrence of value.\n        Raises ValueError if the value is not present.\n        \"\"\"\n        pass\n\n    def reverse(self): # real signature unknown; restored from __doc__\n        \"\"\" L.reverse() -- reverse *IN PLACE* \"\"\"\n        pass\n\n    def sort(self, key=None, reverse=False): # real signature unknown; restored from __doc__\n        \"\"\" L.sort(key=None, reverse=False) -> None -- stable sort *IN PLACE* \"\"\"\n        pass\n列表的内置函数包括\n\nappend:\nclear:\ncopy:\ncount:\nextend:\nindex:\ninsert:\npop:\nremove:\nreverse:\nsort:\n\n五、元组 tuple\nclass tuple(object):\n    \"\"\"\n    tuple() -> empty tuple\n    tuple(iterable) -> tuple initialized from iterable's items\n    \n    If the argument is a tuple, the return value is the same object.\n    \"\"\"\n    def count(self, value): # real signature unknown; restored from __doc__\n        \"\"\" T.count(value) -> integer -- return number of occurrences of value \"\"\"\n        return 0\n\n    def index(self, value, start=None, stop=None): # real signature unknown; restored from __doc__\n        \"\"\"\n        T.index(value, [start, [stop]]) -> integer -- return first index of value.\n        Raises ValueError if the value is not present.\n        \"\"\"\n        return 0\n\n\ncount:\nindex:\n\n六、字典 dict\nPython3.6源码解析\nclass dict(object):\n    \"\"\"\n    dict() -> new empty dictionary\n    dict(mapping) -> new dictionary initialized from a mapping object's\n        (key, value) pairs\n    dict(iterable) -> new dictionary initialized as if via:\n        d = {}\n        for k, v in iterable:\n            d[k] = v\n    dict(**kwargs) -> new dictionary initialized with the name=value pairs\n        in the keyword argument list.  For example:  dict(one=1, two=2)\n    \"\"\"\n    def clear(self): # real signature unknown; restored from __doc__\n        \"\"\" D.clear() -> None.  Remove all items from D. \"\"\"\n        pass\n\n    def copy(self): # real signature unknown; restored from __doc__\n        \"\"\" D.copy() -> a shallow copy of D \"\"\"\n        pass\n\n    @staticmethod # known case\n    def fromkeys(*args, **kwargs): # real signature unknown\n        \"\"\" Returns a new dict with keys from iterable and values equal to value. \"\"\"\n        pass\n\n    def get(self, k, d=None): # real signature unknown; restored from __doc__\n        \"\"\" D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None. \"\"\"\n        pass\n\n    def items(self): # real signature unknown; restored from __doc__\n        \"\"\" D.items() -> a set-like object providing a view on D's items \"\"\"\n        pass\n\n    def keys(self): # real signature unknown; restored from __doc__\n        \"\"\" D.keys() -> a set-like object providing a view on D's keys \"\"\"\n        pass\n\n    def pop(self, k, d=None): # real signature unknown; restored from __doc__\n        \"\"\"\n        D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\n        If key is not found, d is returned if given, otherwise KeyError is raised\n        \"\"\"\n        pass\n\n    def popitem(self): # real signature unknown; restored from __doc__\n        \"\"\"\n        D.popitem() -> (k, v), remove and return some (key, value) pair as a\n        2-tuple; but raise KeyError if D is empty.\n        \"\"\"\n        pass\n\n    def setdefault(self, k, d=None): # real signature unknown; restored from __doc__\n        \"\"\" D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D \"\"\"\n        pass\n\n    def update(self, E=None, **F): # known special case of dict.update\n        \"\"\"\n        D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.\n        If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]\n        If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v\n        In either case, this is followed by: for k in F:  D[k] = F[k]\n        \"\"\"\n        pass\n\n    def values(self): # real signature unknown; restored from __doc__\n        \"\"\" D.values() -> an object providing a view on D's values \"\"\"\n        pass\n\nclear:\ncopy:\nfromkeys:\nget:\nitems:\nkeys:\npop:\npopitem:\nsetdefault:\nupdate:\nvalues:\n\n七、集合 set\nPython3.6源码解析\nclass set(object):\n    \"\"\"\n    set() -> new empty set object\n    set(iterable) -> new set object\n    \n    Build an unordered collection of unique elements.\n    \"\"\"\n    def add(self, *args, **kwargs): # real signature unknown\n        \"\"\"\n        Add an element to a set.\n        \n        This has no effect if the element is already present.\n        \"\"\"\n        pass\n\n    def clear(self, *args, **kwargs): # real signature unknown\n        \"\"\" Remove all elements from this set. \"\"\"\n        pass\n\n    def copy(self, *args, **kwargs): # real signature unknown\n        \"\"\" Return a shallow copy of a set. \"\"\"\n        pass\n\n    def difference(self, *args, **kwargs): # real signature unknown\n        \"\"\"\n        Return the difference of two or more sets as a new set.\n        \n        (i.e. all elements that are in this set but not the others.)\n        \"\"\"\n        pass\n\n    def difference_update(self, *args, **kwargs): # real signature unknown\n        \"\"\" Remove all elements of another set from this set. \"\"\"\n        pass\n\n    def discard(self, *args, **kwargs): # real signature unknown\n        \"\"\"\n        Remove an element from a set if it is a member.\n        \n        If the element is not a member, do nothing.\n        \"\"\"\n        pass\n\n    def intersection(self, *args, **kwargs): # real signature unknown\n        \"\"\"\n        Return the intersection of two sets as a new set.\n        \n        (i.e. all elements that are in both sets.)\n        \"\"\"\n        pass\n\n    def intersection_update(self, *args, **kwargs): # real signature unknown\n        \"\"\" Update a set with the intersection of itself and another. \"\"\"\n        pass\n\n    def isdisjoint(self, *args, **kwargs): # real signature unknown\n        \"\"\" Return True if two sets have a null intersection. \"\"\"\n        pass\n\n    def issubset(self, *args, **kwargs): # real signature unknown\n        \"\"\" Report whether another set contains this set. \"\"\"\n        pass\n\n    def issuperset(self, *args, **kwargs): # real signature unknown\n        \"\"\" Report whether this set contains another set. \"\"\"\n        pass\n\n    def pop(self, *args, **kwargs): # real signature unknown\n        \"\"\"\n        Remove and return an arbitrary set element.\n        Raises KeyError if the set is empty.\n        \"\"\"\n        pass\n\n    def remove(self, *args, **kwargs): # real signature unknown\n        \"\"\"\n        Remove an element from a set; it must be a member.\n        \n        If the element is not a member, raise a KeyError.\n        \"\"\"\n        pass\n\n    def symmetric_difference(self, *args, **kwargs): # real signature unknown\n        \"\"\"\n        Return the symmetric difference of two sets as a new set.\n        \n        (i.e. all elements that are in exactly one of the sets.)\n        \"\"\"\n        pass\n\n    def symmetric_difference_update(self, *args, **kwargs): # real signature unknown\n        \"\"\" Update a set with the symmetric difference of itself and another. \"\"\"\n        pass\n\n    def union(self, *args, **kwargs): # real signature unknown\n        \"\"\"\n        Return the union of sets as a new set.\n        \n        (i.e. all elements that are in either set.)\n        \"\"\"\n        pass\n\n    def update(self, *args, **kwargs): # real signature unknown\n        \"\"\" Update a set with the union of itself and others. \"\"\"\n        pass\n\nadd:\nclear:\ncopy:\ndifference:\ndifference_update:\ndiscard:\nintersection:\nintersection_update:\nisdisjoint:\nissubset:\nissuperset:\npop:\nremove:\nsymmetric_difference:\nsymmetric_difference_update:\nunion:\nupdate:\n\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "1"}