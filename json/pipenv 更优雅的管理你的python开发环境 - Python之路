{"title": "pipenv 更优雅的管理你的python开发环境 - Python之路 ", "index": "python,pip", "content": "本文最早发布与个人博客：http://www.pylixm.cc\n最近常看到pipenv这个管理工具，今天有时间查了下，是 Kennethreitz 大神的作品，看了下github的仓库，是2017年1月份创建的，仅仅一年的时间变获得了7k+的收藏，最新一次的提交时间为2天前，可见该仓库活跃程度。自己之前写过一篇文章《使用 pyenv + virtualenv 打造多版本python开发环境》,遗留个问题，一直没有找到合理的同时管理python和python依赖包的工具，试用了下    pipenv，可以说完美的解决了python版本及包的管理问题。并且pipebv 还是Python.org正式推荐的python包管理工具。原文如下：\nPipenv — the officially recommended Python packaging tool from Python.org, free (as in freedom).\n那么接下来，分享下我的试用过程，供大家参考：\n准备工作\n试用环境及相关文档\n环境\n\npipenv 9.0.1\npython3.6\npython2.7\n\n文档\n\ngithub仓库地址：pipenv\n\npipenv 官方文档\n\npipenv 基本概念理解\n\n之前我们使用pip + virtualenv 来管理python依赖包，使用 --python=参数来区分python版本（不再使用pyenv,减少包依赖）。而pipenv的思路简单理解便是把pip和virutalenv 2个工具统一起来，使用 pipenv 来代替。\n\npipenv 使用 Pipfile 来代替 requirement.txt 文件记录python包。\n增加了Pipfile.lock 文件来锁定python软件的包名及版本，以及其依赖关系的列表。\n它参考了其他语言的包管理工具（bundler, composer, npm, cargo, yarn, etc.），旨在将最好的包管理工具带入python世界。\n\npipenv 功能试用\npipenv 安装\n普通安装\npipenv 可使用 pip 直接安装。\npip install pipenv \n作者推荐在python3下边安装，会提高与virtualenv的兼容性。\nThe use of Python 3 is highly preferred over Python 2, when installing Pipenv. Compatibility with three virtualenvs is greatly improved when using Python 3 as the installation target.\n\n—Kenneth Reitz\n用户模式安装\n为防止和系统python库产生影响，可使用此种方案安装。\npip install --user pipenv\npip 默认安装包路径为/usr/local/lib/python2.7/site-packages。此模式下，pip安装包保存路径为用户库路径,一般为/Users/pylixm/Library/Python/3.6/lib/python/site-packages, 可使用命令python3 -m site --user-site 具体查看。如果在安装后你的shell中pipenv不可用，你需要把用户库的二进制目录/Users/pylixm/Library/Python/3.6/bin添加到你的PATH中。\npipenv 使用\n初始化虚拟环境\n执行pipenv install，创建虚拟环境，如下：\n~/laboratory/pip_test_project ⌚ 20:42:10\n$ pipenv install\nCreating a virtualenv for this project…\n⠋New python executable in /Users/pylixm/.local/share/virtualenvs/pip_test_project-MXA0TC90/bin/python2.7\nAlso creating executable in /Users/pylixm/.local/share/virtualenvs/pip_test_project-MXA0TC90/bin/python\nInstalling setuptools, pip, wheel...done.\n\nVirtualenv location: /Users/pylixm/.local/share/virtualenvs/pip_test_project-MXA0TC90\nCreating a Pipfile for this project…\nPipfile.lock not found, creating…\nLocking [dev-packages] dependencies…\nLocking [packages] dependencies…\nUpdated Pipfile.lock (c23e27)!\nInstalling dependencies from Pipfile.lock (c23e27)…\n  ?   ▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉ 0/0 — 00:00:00\nTo activate this project's virtualenv, run the following:\n $ pipenv shell\n从打印信息可见，它在目录用户目录.local下创建了个和项目同名的虚拟环境(可通过配置环境变量来自定义虚拟环境目录，export WORKON_HOME=~/.venvs)，python使用的是默认的python2.7 。可通过参数--two 和--three 来泛指python版本，也可通过--python 3.5 来明确知道python版本，但是这些参数的前提是你系统上有此python版本，否则会报如下错误：\n$ pipenv --python 3.5\nWarning: Python 3.5 was not found on your system…\nYou can specify specific versions of Python with:\n  $ pipenv --python path/to/python\n\n有点像 virtualenv 的 --python参数。\n初始化好虚拟环境后，会在项目目录下生成2个文件Pipfile和Pipfile.lock。为pipenv包的配置文件，代替原来的 requirement.txt。项目提交时，可将Pipfile 文件和Pipfile.lock文件受控提交,待其他开发克隆下载，根据此Pipfile 运行命令pipenv install [--dev]生成自己的虚拟环境。\nPipfile.lock 文件是通过hash算法将包的名称和版本，及依赖关系生成哈希值，可以保证包的完整性。\n安装python模块\n正常安装\n安装 requests 模块：\n$ pipenv install requests\nInstalling requests…\nCollecting requests\n  Using cached requests-2.18.4-py2.py3-none-any.whl\nCollecting certifi>=2017.4.17 (from requests)\n  Using cached certifi-2017.11.5-py2.py3-none-any.whl\nCollecting idna<2.7,>=2.5 (from requests)\n  Using cached idna-2.6-py2.py3-none-any.whl\nCollecting urllib3<1.23,>=1.21.1 (from requests)\n  Using cached urllib3-1.22-py2.py3-none-any.whl\nCollecting chardet<3.1.0,>=3.0.2 (from requests)\n  Using cached chardet-3.0.4-py2.py3-none-any.whl\nInstalling collected packages: certifi, idna, urllib3, chardet, requests\nSuccessfully installed certifi-2017.11.5 chardet-3.0.4 idna-2.6 requests-2.18.4 urllib3-1.22\n\nAdding requests to Pipfile's [packages]…\n  PS: You have excellent taste! ✨ ? ✨\nLocking [dev-packages] dependencies…\nLocking [packages] dependencies…\nUpdated Pipfile.lock (2f8679)! \n可通过命令pipenv graph 查看已安装模块，同时可查看他们直接的相互依赖情况。\n$ pipenv graph\nrequests==2.18.4\n  - certifi [required: >=2017.4.17, installed: 2017.11.5]\n  - chardet [required: <3.1.0,>=3.0.2, installed: 3.0.4]\n  - idna [required: >=2.5,<2.7, installed: 2.6]\n  - urllib3 [required: >=1.21.1,<1.23, installed: 1.22]\n只安装开发环境\n可通过以下命令，仅安装在开发环境,\npipenv install --dev requests --three\n区别反映在Pipfile 上为:\n[[source]]\n\nurl = \"https://pypi.python.org/simple\"\nverify_ssl = true\nname = \"pypi\"\n\n[dev-packages]\n\n\n[packages]\n\nrequests = \"*\"\nflask = \"==0.10\"\n\n[requires]\npython_version = \"3.6\"\n\n安装包记录是在[dev-packages] 部分，还是[packages] 部分。在安装时，指定--dev参数，则只安装[dev-packages]下的包,若安装时不定指定--dev参数，只会安装[packages] 包下面的模块。\n[requires] 下的python在构建新的虚拟环境时，若没有会自动下载安装。\n通过 requirements.txt 安装\npipenv install -r requirements.txt\n这样我们可以重用之前的requirement.txt 文件来构建我们新的开发环境，可以把我们的项目顺利的迁到pipenv。\n可通过以下命令生成requirements 文件：\npipenv lock -r [--dev] > requirements.txt\n运行虚拟环境\n可使用以下命令来运行项目：\npipenv run python xxx.py\n或者启动虚拟环境的shell环境：\n~/laboratory/pip_test_project\n$ pipenv shell --anyway\nSpawning environment shell (/bin/zsh). Use 'exit' to leave.\nsource /Users/pylixm/.local/share/virtualenvs/pip_test_project-MXA0TC90/bin/activate\n\n~/laboratory/pip_test_project \n$ source /Users/pylixm/.local/share/virtualenvs/pip_test_project-MXA0TC90/bin/activate\n(pip_test_project-MXA0TC90)\n~/laboratory/pip_test_project\n$ exit\n\n~/laboratory/pip_test_project\n$ pipenv shell\nShell for UNKNOWN_VIRTUAL_ENVIRONMENT already activated.\nNo action taken to avoid nested environments.\n\n直接运行pipenv shell 并不会出现shell命令行，是应为没有配置环境变量。还需要进一步研究，貌似需要配置环境变了，一直没找到。\npipenv 提供了.env 文件，放在项目目录下，提供项目所需的环境变量，运行pipenv shell 时，会自动加载。\n删除虚拟环境及包\n删除包:\npipenv uninstall reuqests\n删除虚拟环境：\npipenv --rm \n总结\n\n\npipenv 完美的解决了python的包和版本的管理。\n并对包之间的依赖关系也管理起来，方便了开发者构建自己的开发运行环境。\n\n时间有限，以上列举的仅为部分功能，更多的强大功能详见官方文档。\n参考\nhttps://docs.pipenv.org/\n\n                ", "mainLikeNum": ["9 "], "mainBookmarkNum": "22"}