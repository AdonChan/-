{"title": "Python装饰器vs装饰器模式 - mugbya ", "index": "装饰器,python", "content": "漫谈\n如果作为一个Python入门，不了解Python装饰器也没什么，但是如果作为一个中级Python开发人员，如果再不对python装饰器熟稔于心的话，那么可能并没有量变积累到质变。\n我以前也看过很多讲python 装饰器的文章，但是都是看了就忘。一方面是没有做太多的练习，二是对它的领会不是很深。\n希望引以为戒！！！\n郑传\n装饰模式\n如果你了解Java，你肯定听过 装饰器模式。在面向对象中，装饰模式指：动态地给一个对象添加一些额外的职责。就增加一些功能来说，装饰模式比生成子类更为灵活。\n在设计模式学习----装饰器模式，我摘取了下面一段使用装饰器模式的代码\npublic class DecoratorPattern {  \n  \n    /** \n     * @param args the command line arguments \n*/  \n    public static void main(String[] args) {  \n        // TODO code application logic here  \n        Basket basket = new Original();  \n        //一个装饰的过程  \n        Basket myBasket =new AppleDecorator(new BananaDecorator(new OrangeDecorator(basket)));   \n        myBasket.show();  \n    }  \n}\n等会注意下 Basket myBasket =new AppleDecorator(new BananaDecorator(new OrangeDecorator(basket))) 这段的写法\n在Python官方文档PythonDecorators 是这么介绍装饰器的\nWhat is a DecoratorA decorator is the name used for a software design pattern. Decorators dynamically alter the functionality of a function, method, or class without having to directly use subclasses or change the source code of the function being decorated.\n\n翻一下： 就是装饰器是一种软件设计模式，被用来动态修改函数、方法，或者类功能却不是通过子类，或者修改原代码实现。\n跟之前是一个意思！！！\nPython Decorator\n而Python的装饰器与之不同，官方这么说：\nThe \"decorators\" we talk about with concern to Python are not exactly the same thing as the DecoratorPattern described above. A Python decorator is a specific change to the Python syntax that allows us to more conveniently alter functions and methods (and possibly classes in a future version). This supports more readable applications of the DecoratorPattern but also other uses as well.Support for the decorator syntax was proposed for Python in PEP 318, and will be implemented in Python 2.4.\n\n翻译下：Python的 decorators 与 DecoratorPattern并不完全相同。 Python的decorator是一种特殊：在语法上实现允许我们更灵活地更改方法，或者函数。\n例子：\n@classmethod\ndef foo (arg1, arg2):\n    ....\n记住这个特殊的语法，后面我们会展示这个强大的语法糖\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}