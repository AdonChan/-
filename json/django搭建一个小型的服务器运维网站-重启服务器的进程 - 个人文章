{"title": "django搭建一个小型的服务器运维网站-重启服务器的进程 - 个人文章 ", "index": "javascript,python,html,django", "content": "目录\n\n\n项目介绍和源码；\n\n拿来即用的bootstrap模板；\n\n服务器SSH服务配置与python中paramiko的使用；\n\n用户登陆与session;\n\n最简单的实践之修改服务器时间；\n\n查看和修改服务器配置与数据库的路由；\n\n基于websocket的实时日志实现；\n\n查看服务器中的日志与前端的datatable的利用；\n重启服务器的进程。\n\n前言\n  相当于前面的文章而言，这篇文章就比较简短了。关于服务器中进程需要经常批量的重启，一般会在服务器中写个shell脚本去统一执行，网页的功能仅仅是用paramiko函数调用服务器中的shell脚本就好，然后把失败和成功的重启记录在前端记录下来。页面如图1所示。\n\n功能实现\n页面显示\n页面html函数\n  页面仅仅由一个执行重启操作的模块和记录重启次数的模块构成。当然A在重启时，B进入网站是不能执行重启的，html代码中的{{taskor}}变量中记录的就是后台重启时当下操作人，具体的实现在操作互斥中会说说。\n{% extends \"./base.html\" %}\n\n{% block css %}{% endblock %}\n{% block title %}{{ title }}{% endblock %}\n{% block log %}{{ title }}{% endblock %}\n{% block username %}{{ username }}{% endblock %}\n\n{% block mainbody %}\n<section class=\"wrapper site-min-height\">\n    <div class=\"fakeloader\"></div>\n    <h3><i class=\"fa fa-angle-right\"></i> 服务器重启 <i class=\"fa fa-refresh\"></i></h3>\n    <div class=\"row mt\">\n        <div class=\"col-lg-12\">\n            <div class=\"form-panel\">\n                <h4 class=\"mb\"> 服务器重启</h4>\n                {% if taskor != '' %}\n                <div class=\"col-sm-12\">\n                    <div class=\"alert alert-danger\"  id=\"loading-tips\"><b>稍等~</b> 【{{taskor}}】正在重启进程...</div>\n                </div>\n                <div><br><br><br><br></div>\n                {% else %}\n                <div class=\"col-sm-12\">\n                    <div class=\"alert alert-danger\" id=\"pre-tips\"><b>注意!</b> 此操作将会导致进程重启。</div>\n                    <div class=\"alert alert-danger\" style=\"display:none;\" id=\"loading-tips\"><b>稍等~</b> 进程正在重启...</div>\n                    <div class=\"progress progress-striped active\" style=\"display:none;\" id=\"loading\">\n                        <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"100\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 100%\"></div>\n                    </div>\n                </div>\n                <div><br><br><br><br></div>\n                <div class=\"col-sm-12\" style=\"text-align: right\">\n                    <button type=\"button\" id=\"restart\" class=\"btn btn-theme04\">重启服务器</button>\n                </div>\n                <div><br><br><br></div>\n                {% endif %}\n            </div>\n        </div>\n    </div>\n    <div class=\"row mt\">\n        <div class=\"col-lg-12\">\n            <div class=\"form-panel\">\n                <h4 class=\"mb\"> 重启服务器的记录</h4>\n                <table class=\"table table-hover\">\n                    <thead>\n                    <tr>\n                        <th style=\"width:10%;\">重启时间</th>\n                        <th style=\"width:10%;\">重启人</th>\n                        <th style=\"width:10%;\">重启是否成功</th>\n                    </tr>\n                    </thead>\n                    <tbody id=\"tab\">\n                    {% for item in reboot %}\n                    <tr>\n                        <td>{{ item.reboottime }}</td>\n                        <td>{{ item.rebooter }}</td>\n                        <td>{{ item.rebootresult }}</td>\n                    </tr>\n                    {% endfor %}\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n</section>\n{% endblock %}\n页面javascript函数\n  页面用到的javascript函数也仅仅是对图1中唯一一个按钮批量重启进程作用(函数中的swal只是一个模态框插件，每当点击按钮时唤起，如图2，关于它的引用文章用户登陆与session提到过)，函数通过ajax请求到后端处理。\n\n{% block scripts %}\n<script>\n$(document).ready(function(){\n    $(\"#restart\").click(function(){\n    swal({\n        title: '您确定要重启吗?',\n        type: 'warning',\n        confirmButtonColor: '#DD6B55',\n        confirmButtonText:\"是的，我要重启！\",  \n        cancelButtonText:\"让我再考虑一下…\",\n        showLoaderOnConfirm: true, //加载按钮是否可见  \n        showCancelButton: true,\n        preConfirm: function() {  \n            return new Promise(function(resolve) {  \n                setTimeout(function(){\n                    $(\"#restart\").hide();\n                    $(\"#pre-tips\").hide();\n                    $(\"#loading-tips\").show();\n                    $(\"#loading\").show();\n                    resolve();  \n                }, 3000);  \n            });  \n        },  \n        allowOutsideClick: false, //弹框外是否可点\n        }).then(function(res){\n        if (res){\n        $.ajax({\n            url:\"restartserver\",\n            type:'GET',\n            success: function(arg){\n                ret = eval(arg);\n                if(ret.status){\n                    swal({  \n                        type: 'success',  \n                        title: '重启完成！',  \n                        confirmButtonText: '确定',  \n                        confirmButtonColor: '#4cd964'  \n                        }).then(function(){\n                            window.location.reload();\n                            });  \n                }else{\n                    swal({  \n                        type: 'error',  \n                        title: '重启失败！',  \n                        confirmButtonText: '确定',  \n                        confirmButtonColor: '#4cd964'  \n                        }).then(function(){\n                            window.location.reload();\n                        });  \n                }\n            }});\n        }})\n    });\n});\n</script>\n{% endblock %}\n创建model函数\n  这里会创建两个model函数，一个在最简单的实践之修改服务器时间中提到过的taskinbackground，它可以将正在进行的事件记录在数据库中，另外一个是记录重启操作的表rebootserver。\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\nfrom django.db import models\n\n\nclass taskinbackground(models.Model):\n    taskname = models.CharField(max_length=50)\n    taskor = models.CharField(max_length=100)\n\n    class Meta:\n        db_table = 'task'\n        app_label = \"server\"\n        \n     \nclass rebootserver(models.Model):\n    rebooter = models.CharField(max_length=100)\n    reboottime = models.CharField(max_length=200, default=\"\")\n    rebootresult = models.CharField(max_length=200, default=\"\")\n\n    class Meta:\n        db_table = 'reboot'\n        app_label = \"server\"\n增加url和view函数\n  server/urls.py中添加reboot和restartserver，前者用来渲染页面的，后者是用来实现重启的功能。\nfrom django.conf.urls import url\nimport views\n\nurlpatterns = [\n    url(r'^reboot', views.rebootserver),\n    url(r'^restartserver', views.restartserver),\n]\n  server/views.py中添加渲染页面的函数rebootserver，和重启的功能函数restartserver。\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.contrib.auth import logout\nfrom django.shortcuts import render_to_response\nfrom django.http import JsonResponse\nfrom django.contrib.auth.decorators import login_required\nimport json\nimport time\n\n# 服务器的名字\nhtmltitle = '服务器工具'\n\n\n# 渲染页面\n@login_required(login_url='/loginpage')\ndef rebootserver(request):\n    from server import models\n    username = request.session.get('username')\n    # 取出数据库后10条重启的数据\n    reboot = models.rebootserver.objects.all()[::-1][0:10]\n    taskor = ''\n    try:\n        # 后台是否有其他人在重启\n        taskor = models.taskinbackground.objects.get(taskname='reboot').taskor\n    except Exception as e:\n        print e\n    pagedict = {'reboot': reboot, 'title': htmltitle, 'taskor': taskor, 'username': username}\n    return render_to_response(\"servermaterial/reboot.html\", pagedict)\n    \n    \n# 重启进程\ndef restartserver(request):\n    if request.method == 'GET':\n        ret = {'status': False}\n        from WebTool.functions import rebootserver\n        from server import models\n        username = request.session.get('username')\n        models.taskinbackground.objects.filter(taskname='reboot').delete()\n        # 将重启进程的任务写进数据库\n        models.taskinbackground.objects.create(taskname='reboot', taskor=username)\n        res = rebootserver()\n        local_time = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())\n        if res == 'Successful Rebooted!':\n            ret['status'] = True\n            # 重启成功记录写入rebootserver中\n            models.rebootserver.objects.create(rebooter=username, reboottime=local_time, rebootresult='重启成功')\n            # 从taskinbackground中删除后台正在执行的重启任务\n            models.taskinbackground.objects.filter(taskname='reboot').delete()\n            return JsonResponse(ret)\n        elif res == 'Unsuccessful Rebooted!':\n            # 重启失败记录写入rebootserver中\n            models.rebootserver.objects.create(rebooter=username, reboottime=local_time, rebootresult='重启失败')\n            # 从taskinbackground中删除后台正在执行的重启任务\n            models.taskinbackground.objects.filter(taskname='reboot').delete()\n            ret['status'] = False\n            return JsonResponse(ret)\n        else:\n            models.rebootserver.objects.create(rebooter=username, reboottime=local_time, rebootresult='重启失败')\n            models.taskinbackground.objects.filter(taskname='reboot').delete()\n            ret['status'] = False\n            return JsonResponse(ret)\n  看到这里，我们的重启进程的paramiko函数rebootserver写在functions(WebTool/WebTool/functions.py)中，由于自己的Linux没有环境，当时只好写了一个shell脚本模拟进程重启。具体内容请移步至文章服务器SSH服务配置与python中paramiko的使用。\n操作互斥\n  文章最简单的实践之修改服务器时间提到过，当A修改时间时，其他人没法修改时间，这里用的方法也是同理，将重启进程看成一个后台任务，任务执行时写在model中的taskinbackground中，其他人打开页面时，页面渲染函数会在数据库中查一查有没有对应名字的任务taskor = models.taskinbackground.objects.get(taskname='reboot').taskor如果有就不提供重启的功能，其效果如图3所示。\n\n{% if taskor != '' %}\n<div class=\"col-sm-12\">\n    <div class=\"alert alert-danger\"  id=\"loading-tips\"><b>稍等~</b> 【{{taskor}}】正在重启进程...</div>\n</div>\n<div><br><br><br><br></div>\n{% else %}\n<div class=\"col-sm-12\">\n    <div class=\"alert alert-danger\" id=\"pre-tips\"><b>注意!</b> 此操作将会导致进程重启。</div>\n    <div class=\"alert alert-danger\" style=\"display:none;\" id=\"loading-tips\"><b>稍等~</b> 进程正在重启...</div>\n    <div class=\"progress progress-striped active\" style=\"display:none;\" id=\"loading\">\n    <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"100\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 100%\"></div>\n    </div>\n    </div>\n    <div><br><br><br><br></div>\n    <div class=\"col-sm-12\" style=\"text-align: right\">\n        <button type=\"button\" id=\"restart\" class=\"btn btn-theme04\">重启服务器</button>\n    </div>\n    <div><br><br><br></div>\n{% endif %}\n  这个互斥的逻辑可以用下面的逻辑图图4描述。通俗点说，其实就相当于用数据库做了一个互斥量，一次只准一个线程执行任务。\n\n结语\n  这篇文章简单的说了下怎么去用网站调用后台去批量执行进程重启，然后用数据库的表做一个简单的互斥量，防止多个用户同时操作。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "3"}