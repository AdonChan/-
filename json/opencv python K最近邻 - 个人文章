{"title": "opencv python K最近邻 - 个人文章 ", "index": "opencv-python,opencv,python", "content": "Understanding k-Nearest Neighbour \n我们将Red系列标记为Class-0（由0表示），将Blue 系列标记为Class-1（由1表示）。 我们创建了25个系列或25个训练数据，并将它们标记为0级或1级.在Matplotlib的帮助下绘制它,红色系列显示为红色三角形，蓝色系列显示为蓝色方块.\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\n\n# Feature set containing (x,y) values of 25 known/training data\ntrainData = np.random.randint(0,100,(25,2)).astype(np.float32)\n\n# Labels each one either Red or Blue with numbers 0 and 1\nresponses = np.random.randint(0,2,(25,1)).astype(np.float32)\n\n# Take Red families and plot them\nred = trainData[responses.ravel()==0]\nplt.scatter(red[:,0],red[:,1],80,'r','^')\n\n# Take Blue families and plot them\nblue = trainData[responses.ravel()==1]\nplt.scatter(blue[:,0],blue[:,1],80,'b','s')\n\nplt.show()\n\n接下来初始化kNN算法并传递trainData和响应以训练kNN（它构造搜索树）.然后我们将对一个new-comer，并在OpenCV的kNN帮助下将它归类为一个系列.KNN之前，我们需要了解一下我们的测试数据（new-comer),数据应该是一个浮点数组，其大小为numberoftestdata×numberoffeatures.然后找到new-comer的最近的邻居并分类.\nnewcomer = np.random.randint(0,100,(1,2)).astype(np.float32)\nplt.scatter(newcomer[:,0],newcomer[:,1],80,'g','o')\n\nknn = cv2.ml.KNearest_create()\nknn.train(trainData, cv2.ml.ROW_SAMPLE, responses)\nret, results, neighbours ,dist = knn.findNearest(newcomer, 3)\n\nprint( \"result:  {}\\n\".format(results) )\nprint( \"neighbours:  {}\\n\".format(neighbours) )\nprint( \"distance:  {}\\n\".format(dist) )\n\nplt.show()\n\n输出：\nresult:  [[1.]]\n\nneighbours:  [[1. 1. 0.]]\n\ndistance:  [[ 29. 149. 160.]]\n上面返回的是：\n\nnewcomer的标签，如果最近邻算法，k=1\nk-Nearest Neighbors的标签\n从newcomer到每个最近邻居的相应距离\n\n如果newcomer有大量数据，则可以将其作为数组传递,相应的结果也作为矩阵获得.\nnewcomers = np.random.randint(0,100,(10,2)).astype(np.float32)\n\n\nplt.scatter(newcomers[:,0],newcomers[:,1],80,'g','o')\n\nknn = cv2.ml.KNearest_create()\nknn.train(trainData, cv2.ml.ROW_SAMPLE, responses)\nret, results, neighbours ,dist = knn.findNearest(newcomers, 3)\n\nprint( \"result:  {}\\n\".format(results) )\nprint( \"neighbours:  {}\\n\".format(neighbours) )\nprint( \"distance:  {}\\n\".format(dist) )\n\nplt.show()\n输出：\nresult:  [[1.]\n [0.]\n [1.]\n [0.]\n [0.]\n [0.]\n [0.]\n [0.]\n [0.]\n [0.]]\n\nneighbours:  [[0. 1. 1.]\n [0. 0. 0.]\n [1. 1. 1.]\n [0. 1. 0.]\n [1. 0. 0.]\n [0. 1. 0.]\n [0. 0. 0.]\n [0. 1. 0.]\n [0. 0. 0.]\n [0. 0. 1.]]\n\ndistance:  [[ 229.  392.  397.]\n [   4.   10.  233.]\n [  73.  146.  185.]\n [ 130.  145. 1681.]\n [  61.  100.  125.]\n [   8.   29.  169.]\n [  41.   41.  306.]\n [  85.  505.  733.]\n [ 242.  244.  409.]\n [  61.  260.  493.]]\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}