{"title": "Python linecache模块 - Python提高班 ", "index": "python", "content": "linecache\n\n今天分享一个python的小模块: linecache, 可以用它方便地获取某一文件某一行的内容。而且它也被 traceback 模块用来获取相关源码信息来展示。用法很简单:\n>>> import linecache\n>>> linecache.getline('/etc/passwd', 4)\n'sys:x:3:3:sys:/dev:/bin/sh\\n'\n\nlinecache.getline 第一参数是文件名，第二个参数是行编号。如果文件名不能直接找到的话，会从 sys.path 里找。\n如果请求的行数超过文件行数，函数不会报错，而是返回''空字符串。如果文件不存在，函数也不会报错，也返回''空字符串。\nlinecache 会尝试用缓存一些信息来优化对文件的读取。它还提供了两个方法来处理缓存相关。\nlinecache.clearcache()   # 清除不再需要的linecache.getcache()获取的内容\n\nlinecache.checkcache([filename])  # 检查文件在硬盘上是否有更新，如果有更新缓存。\n                                  # 如果没有提供文件名参数，则检查linecache缓存里所有的条目\n\n其它\n\n当文件很大而只要读取其中一行时，如果采用linecache成为程序的瓶颈，也可以采用如下方法来获得速度上一些提升:\ndef get_line(thefilepath, desired_line_number):\n    if desired_line_number < 1: return ''\n    for current_line_number, line in enumerate(open(thefilepath, 'rU')):\n        if current_line_number == desired_line_number -1:\n            return line\n    return ''\n\nps: 打开文件的方式'rU'是以一种windows,mac,unix三个平台同一的方式打开，都读取成 n, 参照这里。\n参考资料\n\n\nhttps://docs.python.org/2/lib...\n《Python Cookbook》Chapter2.4\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "4"}