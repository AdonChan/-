{"title": "Python学习--最完整的基础知识大全 - 个人文章 ", "index": "python", "content": "Python学习--最完整的基础知识大全\n关于python的基础知识学习，网上有很多资料，今天我就把我收藏的整理一下分享给大家！\n\n菜鸟教程python2\n菜鸟教程python3\nPython2.7 入门指南\nPython3.6 入门指南\n廖雪峰Python教程\nPython100例\nPython中文开发者社区门户\nW3CPython基础教程\n\n下面是我基础学习时的一点记录：\npython3 循环语句\n1. while\nn=10\nsum = 0\ncounter = 1\nwhile counter < n:\n    sum = sum + counter\n    counter += 1\nprint(\"1到%d之和为：%d\" %(n, sum))\n\n#while 循环使用 else 语句\ncount = 0\nwhile count < 5:\n   print (count, \" 小于 5\")\n   count = count + 1\nelse:\n   print (count, \" 大于或等于 5\")\n\n2.  for\n#可以使range以指定数字开始并指定不同的增量(甚至可以是负数，有时这也叫做'步长')\nfor i in range(0, 10, 3):\n    print(i)\n\nfor i in range(-10, -100, -30):\n    print(i)\n\na_list = ['google', 'baidu', 'ie', 'firefox', '360']\nfor i in range(len(a_list)):\n    print(i, a_list[i])\n#使用range创建列表\nb_list = list(range(8))\nprint(b_list)\n\n3. break和continue\n#使用break终止循环\nfor letter in 'helloworld':\n    if letter == 'r':\n        break\n    print(\"当前字母为：\", letter)\n#使用continue跳过循环\nfor letter in 'helloworld':\n    if letter == 'l':\n        continue\n    print(\"当前字母为：\", letter)\n4. pass语句\n#说明：pass就是一条空语句。在代码段中或定义函数的时候，如果没有内容，或者先不做任何处理，直接跳过，就可以使用pass。\nfor letter in 'helloworld':\n    if letter == 'l':\n        pass\n        print(\"执行pass块\")\n    print(\"当前字母为：\", letter)\n5. 使用enumerate函数进行遍历\nc_list = [12, 34, 56, 78, 90]\nfor i, j in enumerate(c_list):\n    print(i, j)\n\n6. 小练习\n循环练习\nfor i in range(1, 6):\n    for j in range(1, i+1):\n        print('*',end='')\n    print('\\r')\n\n9*9乘法表\nfor i in range(1, 10):\n    for j in range(1, i+1):\n        print(\"%d * %d = %d\" %(j, i, i*j), end='\\t')\n    print('\\r')\n\n冒泡排序\ndef paixu(d_list):\n    for i in range(0, len(d_list)):\n        for j in range(i+1, len(d_list)):\n            if d_list[i] >= d_list[j]:\n                tmp = d_list[i]\n                d_list[i] = d_list[j]\n                d_list[j] = tmp\n    print(d_list)\nli = [32, 23, 65, 32, 76, 79, 56, 89, 12]\npaixu(li)\nPython3 迭代器与生成器\n迭代器\n迭代器是一个可以记住遍历的位置的对象。\n迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。\n迭代器有两个基本的方法：iter() 和 next()。\nimport sys\n\nit = iter(c_list)\nprint(c_list)\nprint(next(it))\nfor x in it:\n    print(x, end=' ')\n\nit1 = iter(c_list)\nwhile True:\n    try:\n        print(next(it1))\n    except StopIteration:\n        sys.exit()\n生成器\n在 Python 中，使用了 yield 的函数被称为生成器（generator）。调用一个生成器函数，返回的是一个迭代器对象。在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值, 并在下一次执行 next() 方法时从当前位置继续运行。\n生成器函数\ndef fibonacci(n):\n    a = 0;\n    b = 1;\n    counter = 0;\n    while True:\n        if (counter > n):\n            return\n        yield a\n        a, b = b, a + b\n        counter += 1\n#生成器函数返回一个迭代器\nfibo = fibonacci(10)\n\nwhile True:\n    try:\n        print(next(fibo), end=' ')\n    except:\n        sys.exit()\n\n函数\n函数传入不定长参数\n#加了星号（*）的变量名会存放所有未命名的变量参数。如果在函数调用时没有指定参数，它就是一个空元组。我们也可以不向函数传递未命名的变量。\ndef printinfo(arg1, *vartuple):\n    \"打印任何传入的参数\"\n    print(\"输出：\")\n    print(arg1)\n    for var in vartuple:\n        print(var)\n    return\n\nprintinfo(10)\nprintinfo(10, 20, 30)\n\n匿名函数\npython 使用 lambda 来创建匿名函数。所谓匿名，意即不再使用 def 语句这样标准的形式定义一个函数。\n\nlambda 只是一个表达式，函数体比 def 简单很多。\nlambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。\nlambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。\n\n虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。\nsum = lambda arg1, arg2: arg1 + arg2\nprint(sum(10,20))\n变量的作用域\nPython中变量的作用域一共有4种，分别是：\n\nL （Local） 局部作用域\nE （Enclosing） 闭包函数外的函数中\nG （Global） 全局作用域\nB （Built-in） 内建作用域\n\n以 L –> E –> G –>B 的规则查找，即：在局部找不到，便会去局部外的局部找（例如闭包），再找不到就会去全局找，再者去内建中找。\nB = int(2.9)  # 内建作用域\n\nG = 0  # 全局作用域\ndef outer():\n    E = 1  # 闭包函数外的函数中\n    def inner():\n        L = 2  # 局部作用域\n\n一个完整的demo\nimport pickle\nimport os\n\ndatafile = 'C:\\\\Users\\\\root\\\\Desktop\\\\PyDemo\\\\person.data'\nline = '#########################################'\nmessage = '''\n#######################################\n*Welcome bookmark:                    *\n*    press 1 to show list             *\n*    press 2 to add pepole            *\n*    press 3 to edit pepole           *\n*    press 4 to delete pepole         *\n*    press 5 to search pepole         *\n*    press 6 to show menu             *\n*    press 0 to quit                  *\n#######################################\n'''\n#打印菜单栏\nprint(message)\n\n#创建一个人类，有姓名和电话号两个属性\nclass Person(object):\n    def __init__(self, name, number):\n        self.name = name\n        self.number = number\n\n#获取数据\ndef get_data(filename = datafile):\n    if os.path.exists(filename) and os.path.getsize(filename):\n        with open(filename, 'rb') as f:\n            return pickle.load(f)\n    return None\n\n#写入数据\ndef set_data(name, number, filename = datafile):\n    personList = {} if get_data() == None else get_data()\n    with open(filename, 'wb') as f:\n        personList[name] = Person(name, number)\n        pickle.dump(personList, f)\n\n#保存字典格式的数据到文件\ndef save_data(dictPerson, filename = datafile):\n    with open(filename, 'wb') as f:\n        pickle.dump(dictPerson, f)\n\n#显示所有联系人信息\ndef show_all():\n    personList = get_data()\n    if personList:\n        for v in personList.values():\n            print(v.name, v.number)\n        print(line)\n    else:\n        print('空空如也,请添加联系人！')\n        print(line)\n\n#添加联系人\ndef add_person(name, number):\n    set_data(name, number)\n    print('添加联系人成功！')\n    print(line)\n\n#更新联系人\ndef edit_person(name, number):\n    personList = get_data()\n    if personList:\n        if name in personList.keys():\n            personList[name] = Person(name, number)\n            save_data(personList)\n            print('更改联系人信息成功！')\n        else:\n            print('查无此人', name, ',请重试！')\n        print(line)\n\n#删除联系人\ndef del_person(neme):\n    personList = get_data()\n    if personList:\n        if name in personList:\n            del personList[name]\n            save_data(personList)\n            print('删除联系人成功！')\n        else:\n            print(name, '不存在！')\n    print(line)\n\n#查询联系人\ndef find_person(name):\n    personList = get_data()\n    if personList:\n        if name in personList.keys():\n            print(personList.get(name).name, personList.get(name).number)\n        else:\n            print('查无此人！', name)\n    print(line)\n\nwhile True:\n    num = input('>>>')\n\n    if num == '1':\n        print('查看所有联系人:')\n        show_all()\n    elif num == '2':\n        print('添加联系人:')\n        name = input('请输入联系人姓名 >>')\n        number = input('输入联系人电话号 >>')\n        add_person(name, number)\n        show_all()\n    elif num == '3':\n        print('更新联系人:')\n        name = input('请输入联系人姓名 >>')\n        number = input('输入联系人电话号 >>')\n        edit_person(name, number)\n        show_all()\n    elif num == '4':\n        print('删除联系人:')\n        name = input('请输入联系人姓名 >>')\n        del_person(name)\n        show_all()\n    elif num == '5':\n        print('查找联系人:')\n        name = input('请输入联系人姓名 >>')\n        find_person(name)\n    elif num == '6':\n        print(message)\n    elif num == '0':\n        break\n    else:\n        print('输入错误，请重试！')\n\n我的个人微信订阅号：【每天学编程】 欢迎你的加入！\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "3"}