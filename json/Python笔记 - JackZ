{"title": "Python笔记 - JackZ ", "index": "python", "content": "精简，快速，并持续完善。\n输入与输出\n>>> print('Name: %s, score: %d' % ('Jack', 89))\nName: Jack, score: 89\n\n>>> print('Hello', 'world!')   #逗号连接\nHello world!\n\na = raw_input(\"a:\")   #捕获原始输入，返回字符串\nb = input(\"b:\")       #数字或表达式，不支持输入字符串，返回数字类型的数值\n\n数据类型\n空（None）\n表示该值是一个空对象，空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。\n\n布尔类型（Boolean）\n一个布尔值只有True、False两种值，可以用and、or和not运算\npython 中的and从左到右计算表达式，若所有值均为真，则返回最后一个值，若存在假，返回第一个假值。or也是从左到有计算表达式，返回第一个为真的值。\n>>>'a'and'b'\n'b'\n>>>''and'b'\n''\n>>>'a'or'b'\n'a'\n>>>'' or 'b'\n'b'\n\n\n整型(Int)\n在Python内部对整数的处理分为普通整数和长整数，普通整数长度为机器位长，通常都是32位，超过这个范围的整数就自动当长整数处理，而长整数的范围几乎完全没限制Python可以处理任意大小的整数，当然包括负整数，在程序中的表示方法和数学上的写法一模一样，例如：1，100，-8080，0，等等。\n\n浮点型(Float)\n在运算中，整数与浮点数运算的结果是浮点数。整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。\n\n字符串(String)\nPython字符串即可以用单引号也可以用双引号括起来，甚至还可以用三引号括起来字符串是以''或\"\"括起来的任意文本，比如'abc'，\"xyz\"等等。\n>>>'I\\'m \\\"OK\\\"!'    #转义字符 \\    \nI'm \"OK\"!\n>>> print '\\\\\\t\\\\'\n\\       \\\n>>> print r'\\\\\\t\\\\'    #用r''表示''内部的字符串默认不转义  \n\\\\\\t\\\\\n如果字符串内部有很多换行，用\\n写在一行里不好阅读，为了简化，Python允许用'''...'''的格式表示多行内容，可以自己试试：\n>>> print '''line1\n... line2\n... line3'''\nline1\nline2\nline3\n上面是在交互式命令行内输入，如果写成程序，就是：\nprint '''line1\nline2\nline3'''\n\n列表(List)\n用符号[]表示列表，中间的元素可以是任何类型，用逗号分隔。list类似C语言中的数组，用于顺序存储结构\n>>> classmates = ['Michael', 'Bob', 'Tracy']\n>>> classmates\n['Michael', 'Bob', 'Tracy']\n\n>>> classmates[0]\n'Michael'\n\n>>> classmates.append('Adam')              #可以往list中追加元素到末尾\n>>> classmates\n['Michael', 'Bob', 'Tracy', 'Adam']\n\n>>> classmates.insert(1, 'Jack')           #把元素插入到指定的位置，比如索引号为1的位置\n>>> classmates\n['Michael', 'Jack', 'Bob', 'Tracy', 'Adam']\n\n元组(Tuple)\n元组是和列表相似的数据结构，但它一旦初始化就不能更改，速度比list快，同时tuple不提供动态内存管理的功能，需理解一下规则：tuple可以用下标返回一个元素或子tuple\n表示只含有一个元素的tuple的方法是：(d,)后面有个逗号，用来和单独的变量相区分\n>>> t = (1,)\n>>> t\n(1,)\n\n集合(Set)\n集合是无序的，不重复的元素集，类似数学中的集合，可进行逻辑运算和算术运算\n>>> s = set([1, 1, 2, 2, 3, 3])\n>>> s\n{1, 2, 3}\n字典(Dict)\n字典是一种无序存储结构，包括关键字（key）和关键字对应的值（value）。字典的格式为：dictionary = {key:value}。关键字为不可变类型，如字符串、整数、只包含不可变对象的元组，列表等不可作为关键字。如果列表中存在关键字对，可以用dict()直接构造字典\n>>> d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}\n>>> d['Michael']\n95\n如果key不存在，dict就会报错：\n>>> d['Thomas']\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nKeyError: 'Thomas'\n要避免key不存在的错误，有两种办法，一是通过in判断key是否存在：\n>>> 'Thomas' in d\nFalse\n二是通过dict提供的get方法，如果key不存在，可以返回None，或者自己指定的value：\n>>> d.get('Thomas')\n>>> d.get('Thomas', -1)\n-1\n要删除一个key，用pop(key)方法，对应的value也会从dict中删除：\n>>> d.pop('Bob')\n75\n>>> d\n{'Michael': 95, 'Tracy': 85}\n\n类型转换\n常用转换\n    int(x)                 #将x转换为一个整数 \n    float(x )              #将x转换到一个浮点数 \n    str(x)                 #将对象x转换为字符串 \n    tuple(s)               #将序列s转换为一个元组 \n    list(s)                #将序列s转换为一个列表 \n    repr(x)                #将对象x转换为表达式字符串 \n    eval(str)              #用来计算在字符串中的有效Python表达式,并返回一个对象 \n    chr(x)                 #将一个整数转换为一个字符 \n    unichr(x)              #将一个整数转换为Unicode字符 \n    ord(x)                 #将一个字符转换为它的整数值 \n    hex(x)                 #将一个整数转换为一个十六进制字符串 \n    oct(x)                 #将一个整数转换为一个八进制字符串\n    complex(real [,imag])  #创建一个复数\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}