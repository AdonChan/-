{"title": "聚类分析——Kmeans - 个人文章 ", "index": "python,数据分析", "content": "导入数据\ncus_general = customer[['wm_poi_id','city_type','pre_book','aor_type','is_selfpick_poi','is_selfpick_trade_poi']]\ncus_ord = customer[['wm_poi_id','month_original_price','month_order_cnt','service_fee_30day','abnor_rate_30day']]\ncus = customer[['wm_poi_id','comment_1star','comment_5star','pic_comment_cnt']]\ncus = customer[['wm_poi_id','waybill_received_ratio','waybill_delivered_ratio','waybill_ontime_ratio','waybill_normal_arrived_delivery_total_interval_avg','waybill_normal_poi_push_interval_avg','waybill_normal_receive_interval_avg','waybill_normal_fetch_interval_avg','waybill_normal_delivery_interval_avg','waybill_delivery_ontime_ratio','loss_amt']]\ncus_all = customer[['wm_poi_id','c5','ol_time','primary_first_tag_id','city_level',\n                    'month_original_price','month_order_cnt','service_fee_30day','abnor_cnt_30day',\n                    'comment_1star','comment_5star','pic_comment_cnt',\n                    'area_30day','waybill_grab_5mins_ratio','waybill_delivered_ratio','waybill_normal_arrived_delivery_total_interval_avg','waybill_normal_receive_interval_avg',\n                    'call.call_cnt','call.call_cnt_ord','call.call_cnt_poi','call.call_cnt_oth']]\n\n预处理\nfrom sklearn import preprocessing\ncus = pd.DataFrame(preprocessing.scale(cus_general.iloc[:,1:6]))\ncus = pd.DataFrame(preprocessing.scale(cus_ord.iloc[:,1:5]))\ncus = pd.DataFrame(preprocessing.scale(cus_all.iloc[:,1:21]))\ncus.columns = ['city_type','pre_book','aor_type','is_selfpick_poi','is_selfpick_trade_poi']\ncus.columns = ['month_original_price','month_order_cnt','service_fee_30day','abnor_rate_30day']\ncus.columns = ['comment_1star','comment_5star','pic_comment_cnt']\ncus.columns = ['waybill_push_ratio','waybill_delivered_ratio','waybill_ontime_ratio','waybill_normal_arrived_delivery_total_interval_avg','waybill_normal_poi_push_interval_avg','waybill_normal_receive_interval_avg','waybill_normal_fetch_interval_avg','waybill_normal_delivery_interval_avg','waybill_delivery_ontime_ratio','loss_amt']\ncus.columns = ['c5','ol_time','primary_first_tag_id','city_level',\n               'month_original_price','month_order_cnt','service_fee_30day','abnor_cnt_30day',\n               'comment_1star','comment_5star','pic_comment_cnt',\n               'area_30day','waybill_grab_5mins_ratio','waybill_delivered_ratio','waybill_normal_arrived_delivery_total_interval_avg','waybill_normal_receive_interval_avg',\n               'call.call_cnt','call.call_cnt_ord','call.call_cnt_poi','call.call_cnt_oth']\n\n计算K值从1到10对应的平均畸变程度：用scipy求解距离\nfrom sklearn.cluster import KMeans\nfrom scipy.spatial.distance import cdist\nK=range(1,15)\nmeandistortions=[]\nfor k in K:\n    kmeans=KMeans(n_clusters=k)\n    kmeans.fit(cus)\n    meandistortions.append(sum(np.min(cdist(cus,kmeans.cluster_centers_,'euclidean'),axis=1)))\nplt.plot(K,meandistortions,'bx-')\nplt.xlabel('k')\nplt.ylabel(u'平均畸变程度')\nplt.title(u'用肘部法则来确定最佳的K值')\n\nKmean建模\nfrom sklearn.cluster import KMeans\nclf = KMeans(n_clusters=12)\nclf.fit(cus)\npd.Series(pd.Series(clf.labels_).value_counts())\n\ncentres = pd.DataFrame(clf.cluster_centers_)\ncentres.columns = cus_all.iloc[:,1:21].columns\ncentres.plot(kind='bar', subplots=True, figsize=(6,15))\nclf.inertia_\n\ncus_general = pd.concat([cus_general, pd.DataFrame(clf.fit_predict(cus))], axis=0)\ncus_general = cus_general.rename(columns={0:'general'})\ncus_ord = pd.concat([cus_ord, pd.DataFrame(clf.fit_predict(cus))], axis=0)\ncus_ord = cus_ord.rename(columns={0:'order'})\ncus_all = pd.concat([cus_all, pd.DataFrame(clf.fit_predict(cus))], axis=0)\ncus_all = cus_all.rename(columns={0:'cluster'})\n\ncentres = cus_all.groupby(['cluster']).mean()\n\ncus_all.to_csv('cluster.csv')\n\nresult = cus_all[cus_all['cluster']==2]\n\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "1"}