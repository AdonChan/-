{"title": "【Python3】Python函数 - 知识分享 ", "index": "python,python3.x", "content": "1. 函数对象\n函数是第一类对象，即函数可以当做数据传递\n\n可以被引用\n可以当做参数传递\n返回值可以是函数\n可以当做容器类型的元素\n\ndef foo():\n    print('from foo')\n\ndef index():\n    print('from index')\n\ndic = {\n    'foo':foo,\n    'index':index,\n}\n\nwhile True:\n    choice = input(\">>>>>\").strip()\n    if choice in dic:\n        dic[choice]()\n2. 函数的嵌套\n2.1 函数的嵌套的调用\ndef max(x,y):\n    return x if x > y else y\n\ndef max4(a,b,c,d):\n    res1 = max(a,b)\n    res2 = max(res1,c)\n    res3 = max(res2,d)\n    return res3\nprint(max4(234,456,123,789))\n2.2 函数的嵌套定义\ndef f1():\n    def f2():\n        def f3():\n            print(\"from f3\")\n        f3()\n    f2()\nf1()\n# 返回值 from f3 ，即 f3的值\n3. 名称空间\n名称空间：存放名字的地方名称空间分为三种\n3.1 内置名称空间\n随着python解释器的启动而产生\na = [1,2,3,4,5]\nprint(max(a))\n3.2 全局名称空间\n文件的执行会产生全局名称空间，指的是文件级别定义的名字都会放入改空间\nx = 1\ndef fun():\n    x = 2\n    print(x)\nfun()   \nprint(x)\n3.3 局部名称空间\n调用函数时会产生局部名称空间，只在函数调用时临时绑定，调用结束解绑定\nx = 10000\ndef func():\n    x = 1\n    def f1():\n        print(x)\n        def f2():\n            print(x)\n        f2()\n    f1()\nfunc()\n4. 作用域\n作用域即范围（作用域关系是在函数定义阶段就已经固定的，与函数的调用位置无关）查看作用域：globals(),locals()\n4. 闭包函数\ndef f1():\n    x = 1\n    y = 2\n    def f2():\n        print(x,y)\n    return f2\n\nf = f1()\nprint(f.__closure__[0])\nprint(f.__closure__[0].cell_contents)\n5. 装饰器\n6. 迭代器\n7. 生成器\ndef foo():\n    print('一')\n    yield  1\n    print('二')\n    yield 2\n    print('三')\n    yield 3\n    print('四')\n\ng = foo()\n# for i in g:\n#     print(i)\n\nprint(next(g))\nprint(next(g))\nprint(next(g))\nprint(next(g))\n8. 内置函数\n\n\n-\n-\nBuilt-in Functions\n-\n-\n\n\n\nabs()\ndict()\nhelp()\nmin()\nstator()\n\n\nall()\ndir()\nhex()\nnext()\nslice()\n\n\nany()\ndivmod()\nid()\nobject()\nsorted()\n\n\nascii()\nenumerate()\ninput()\noct()\nstaticmethod()\n\n\nbin()\nenav()\nint()\nopen()\nstr()\n\n\nbool()\nexec()\nisinstance()\nord()\nsun()\n\n\nbytearray()\nfilter()\nissubclass()\npow()\nsuper()\n\n\nbytes()\nfloat()\niter()\nprint()\ntuple()\n\n\ncallable()\nformat()\nlen()\nproperty()\ntype()\n\n\nchr()\nfrozenset()\nlist()\nrange()\nvars()\n\n\nclassmethod()\ngetattr()\nlocals()\nrepr()\nzip()\n\n\ncompile()\nglobals()\nmap()\nreversed()\n__import__()\n\n\ncomplex()\nhasattr()\nmax()\nround()\n-\n\n\ndelattr()\nhash()\nmemoryview()\nset()\n-\n\n\n\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "5"}