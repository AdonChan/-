{"title": "python3+flask+mysql实现登录注册 - 个人文章 ", "index": "chrome,visual-studio-code,mysql,flask,python", "content": "简述\n最近开始学习python，就做了一个简单的web服务。这个服务中用了Flask框架，这个能够快速地搭建web服务器，详细过程请看链接描述。创建的文件目录如下\n\n前台页面\n在前台页面中只需创建基本的表单内容，method使用get，登录和注册的action分别为/login、/registuser,代码如下所示：\n<!--登录模块--!>\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <title></title>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <link href=\"css/style.css\" rel=\"stylesheet\">\n    </head>\n    <body>\n        <form method=\"get\" action='/login'>\n            <label>用户名：<input type=\"text\" name=\"user\" value=\"\"></label><br>\n            <label>密码：<input type=\"password\" name=\"password\" value=\"\"></label><br>\n            <input type=\"submit\" value=\"登录\">\n        </form>\n    </body>\n</html>\n\n<!--注册模块--!>\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <title></title>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <link href=\"css/style.css\" rel=\"stylesheet\">\n    </head>\n    <body>\n        <form method=\"get\" action='/registuser'>\n            <label>用户名：<input type=\"text\" name=\"user\" value=\"\"></label>\n            <label>密码：<input type=\"password\" name=\"password\" value=\"\"></label>\n            <input type=\"submit\" value=\"注册\">\n        </form>\n    </body>\n</html>\n导入模块\npython使用Flask需要导入Flask模块，如果没有这个模块就参见前面的链接去安装。使用mysql需要导入pymysql模块，这个具体是什么，请参见链接描述。总之，python需要用到特定的模块的时候，需要去导入模块，本例具体导入的内容如下所示：\n#导入数据库模块\nimport pymysql\n#导入Flask框架，这个框架可以快捷地实现了一个WSGI应用 \nfrom flask import Flask\n#默认情况下，flask在程序文件夹中的templates子文件夹中寻找模块\nfrom flask import render_template\n#导入前台请求的request模块\nfrom flask import request   \nimport traceback  \n#传递根目录\napp = Flask(__name__)\n路由访问静态文件\n在Flask创建服务器后，照着前面图片的文件目录，通过下面的路由就能通过服务器访问静态的html文件，代码如下所示：\n#默认路径访问登录页面\n@app.route('/')\ndef login():\n    return render_template('login.html')\n\n#默认路径访问注册页面\n@app.route('/regist')\ndef regist():\n    return render_template('regist.html')\n此时在浏览器中通过localhost:5000（Flask默认端口为5000）就能访问login.html文件，localhost:5000/regist就能访问regist.html。\n处理前台请求及对数据库进行操作\n跟所有的web服务思路一样，获取前台的请求，根据不同的请求路由执行不同的函数内容。这里以注册为例，当表单填写完后，点击注册按钮，数据向后台请求，请求路由为/registuser。python根据相对应的路由执行函数，这里函数处理的内容是把前台的用户名和密码插入到数据库中（前提是已经在数据库中创建好了user表）。插入成功就跳转到登录页面，插入失败就返回注册失败的内容。登录的逻辑内容也类似，就不再细述，具体代码如下：\n#获取注册请求及处理\n@app.route('/registuser')\ndef getRigistRequest():\n#把用户名和密码注册到数据库中\n\n    #连接数据库,此前在数据库中创建数据库TESTDB\n    db = pymysql.connect(\"localhost\",\"root\",\"123456\",\"TESTDB\" )\n    # 使用cursor()方法获取操作游标 \n    cursor = db.cursor()\n    # SQL 插入语句\n    sql = \"INSERT INTO user(user, password) VALUES (\"+request.args.get('user')+\", \"+request.args.get('password')+\")\"\n    try:\n        # 执行sql语句\n        cursor.execute(sql)\n        # 提交到数据库执行\n        db.commit()\n         #注册成功之后跳转到登录页面\n        return render_template('login.html') \n    except:\n        #抛出错误信息\n        traceback.print_exc()\n        # 如果发生错误则回滚\n        db.rollback()\n        return '注册失败'\n    # 关闭数据库连接\n    db.close()\n#获取登录参数及处理\n@app.route('/login')\ndef getLoginRequest():\n#查询用户名及密码是否匹配及存在\n    #连接数据库,此前在数据库中创建数据库TESTDB\n    db = pymysql.connect(\"localhost\",\"root\",\"123456\",\"TESTDB\" )\n    # 使用cursor()方法获取操作游标 \n    cursor = db.cursor()\n    # SQL 查询语句\n    sql = \"select * from user where user=\"+request.args.get('user')+\" and password=\"+request.args.get('password')+\"\"\n    try:\n        # 执行sql语句\n        cursor.execute(sql)\n        results = cursor.fetchall()\n        print(len(results))\n        if len(results)==1:\n            return '登录成功'\n        else:\n            return '用户名或密码不正确'\n        # 提交到数据库执行\n        db.commit()\n    except:\n        # 如果发生错误则回滚\n        traceback.print_exc()\n        db.rollback()\n    # 关闭数据库连接\n    db.close()\n    \n\n#使用__name__ == '__main__'是 Python 的惯用法，确保直接执行此脚本时才\n#启动服务器，若其他程序调用该脚本可能父级程序会启动不同的服务器\nif __name__ == '__main__':\n    app.run(debug=True)\n此例仅仅是为完成python作为web服务器的流程，很多检验控制就没细细去做。github地址为链接描述\n\n                ", "mainLikeNum": ["3 "], "mainBookmarkNum": "3"}