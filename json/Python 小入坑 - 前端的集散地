{"title": "Python 小入坑 - 前端的集散地 ", "index": "python", "content": "python入坑学习的是python3\n一些信息\n官网 https://www.python.org/官方文档 https://docs.python.org/3/github https://github.com/python特点 简单，易学，开发快速分类 解释型语言，面向对象，动态数据类型的高级语言，其开源遵守GPL协议。支持多种编程范式， 面向对象，函数，过程，命令式。拥有动态类型系统和垃圾回收功能。创始人 Guido van Rossum 属于高阶动态类型编程语言注：不打算深入学习，基础语法过完，并了解几个框架，一个web框架完成。~\n其中c为低级语言，c++为中级语言，python为高级语言GPL协议 属于GNU项目的一个分类，由FSF协会撰写。 维基百科  https://en.wikipedia.org/wiki...  使用的GCC都属于GNU项目里的\n关于 Guido van Rossum 推特 https://twitter.com/gvanrossum github https://github.com/gvanrossum  其个人主页 https://gvanrossum.github.io/...目前在Dropbox, Inc.\n\n安装\n从官网上下载python，安装，打开powershell输入\nPS C:\\Users\\mingm\\Desktop> python -V\nPython 3.7.0\n由于使用的是3.7版本，所以查看官方的3.7版本的文档 https://docs.python.org/3.7/\nhello world\n其文件后缀名为py编写py文件\nprint(\"hello world\");\n编译\nPS C:\\Users\\mingm\\Desktop\\py> python .\\hello.py\nhello world\nPS C:\\Users\\mingm\\Desktop\\py>\n完成输出hello world\n基础语法\n注释\n注释以#开头\n行与缩进\n用行与缩进代表代码块\n多行语句\n通常用一行写完一条语句，如果语句很长使用反斜杠表示\n同一行显示多条语句\n使用分号表示同一行的多条语句\nprint输出\nprint输出默认是换行的\n导入包\nimport 和 form ... import举例\nimport sys    # 导入sys模块\nfor i in sys.argv:\n    print (i)\nprint(\"\\n python 的路径为\", sys.path)\n关于sys模块https://docs.python.org/3.7/l...\n一个用于与解释权进行交互的模块\nfrom sys import argv,path # 从sys模块导入两个函数 即argv函数，以及path函数\n\nprint(\"path:\" + path);    # 输出函数\n\n命令行参数\n使用-h参数，查看命令行的参数\nPS C:\\Users\\mingm\\Desktop\\py> python -h\n基本数据类型\n和js一样，属于动态类型的，和Java，c的最大的区别在于属于动态类型的使用type()函数，查找当前的数据类型以及一个isinstance()函数，和type()函数的区别在于会认为子类是一种父类的类型\n字符串\nstr = 'hello world';\n\nprint(str);\nprint(str[0:-2])\nPS C:\\Users\\mingm\\Desktop\\py> python .\\hello.py\nhello world\nhello wor\nPS C:\\Users\\mingm\\Desktop\\py>\n列表\n类似于数组\nlist = ['abcd', 786, 2.23, 'hello world', 70.2];\ntinyList = [123, 'hello world'];\n\nprint(list);    \nprint(list[0]);\nprint(list[1:3]);\nPS C:\\Users\\mingm\\Desktop\\py> python .\\hello.py\n['abcd', 786, 2.23, 'hello world', 70.2]\nabcd\n[786, 2.23]\nPS C:\\Users\\mingm\\Desktop\\py>\n元组\n类似于matlab的元组，不可改变\ntuple = ('abcd', 786, 2.23, 'hello world', 70.2);\ntinytuple = (123, 'hello world');\n\nprint(tuple);\nprint(tuple[0]);\nprint(tuple + tinytuple);\nPS C:\\Users\\mingm\\Desktop\\py> python .\\hello.py\n('abcd', 786, 2.23, 'hello world', 70.2)\nabcd\n('abcd', 786, 2.23, 'hello world', 70.2, 123, 'hello world')\nPS C:\\Users\\mingm\\Desktop\\py>\nset 集合\n数学中的集合概念\nstudent = {'tom', 'Jim', 'Mary', 'Tom'};\nprint(student);\nPS C:\\Users\\mingm\\Desktop\\py> python .\\hello.py\n{'Jim', 'Tom', 'tom', 'Mary'}\nPS C:\\Users\\mingm\\Desktop\\py>\n字典 即 键值对\ndict = {};\ndict['one'] = \"1\";\nprint(dict['one']);\nPS C:\\Users\\mingm\\Desktop\\py> python .\\hello.py\n1\nPS C:\\Users\\mingm\\Desktop\\py>\n选择 循环\n选择\nvar1 = 100;\nif var1:\n    print (\"true\");\n\nvar2 = 0;\nif var2:\n    print (\"true\");\nprint(\"bey!\");\nPS C:\\Users\\mingm\\Desktop\\py> python .\\hello.py\ntrue\nbey!\nPS C:\\Users\\mingm\\Desktop\\py>\ntips: elif 为else if\n循环\nn = 100;\n\nsum = 0;\ncounter = 1;\nwhile counter <= n:\n    sum += counter;\n    counter += 1;\nprint(\"和为%d \" % sum);\n\nPS C:\\Users\\mingm\\Desktop\\py> python .\\hello.py\n和为5050\nPS C:\\Users\\mingm\\Desktop\\py>\nwhile else 语句\ncount = 0;\nwhile count < 5:\n    print(count, \"小于 5\");\n    count += 1;\nelse:\n    print (count, \"值大于或等于 5\");\nPS C:\\Users\\mingm\\Desktop\\py> python .\\hello.py\n0 小于 5\n1 小于 5\n2 小于 5\n3 小于 5\n4 小于 5\n5 值大于或等于 5\nPS C:\\Users\\mingm\\Desktop\\py>\nfor 语句\nPS C:\\Users\\mingm\\Desktop\\py> python .\\hello.py\nC\nC++\nPerl\nPS C:\\Users\\mingm\\Desktop\\py>\nlanguages = [\"C\", \"C++\", \"Perl\"];\nfor x in languages:\n    print (x)\n    \nrange()函数\nfor i in range(5):\n    print(i)\nPS C:\\Users\\mingm\\Desktop\\py> python .\\hello.py\n0\n1\n2\n3\n4\nPS C:\\Users\\mingm\\Desktop\\py>\n>>> list(range(5));\n[0, 1, 2, 3, 4]\n>>>\npass语句\npass语句为空语句，\nps 用google提供的Puppeteer + koa + mongodb即可完成爬数据到数据库中，并且是无敌滴，管你加密与否，只要能给我显示出来，统统可以爬到手，一切的加密统统实效。！ 算了自动化运维还需要py，╮(╯▽╰)╭\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}