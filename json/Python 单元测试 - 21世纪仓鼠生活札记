{"title": "Python 单元测试 - 21世纪仓鼠生活札记 ", "index": "python,单元测试", "content": "Python Unittest\nUnit test\npython 有个模块叫做 unittes，是Junit的Python实现，一个常用的单元测试框架。\n文件结构\n我一般是把UnitTest目录和src目录平行放置。下面是Python官方文档给出的例子：\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n\n    def test_upper(self):\n        self.assertEqual('foo'.upper(), 'FOO')\n\n    def test_isupper(self):\n        self.assertTrue('FOO'.isupper())\n        self.assertFalse('Foo'.isupper())\n\n    def test_split(self):\n        s = 'hello world'\n        self.assertEqual(s.split(), ['hello', 'world'])\n        # check that s.split fails when the separator is not a string\n        with self.assertRaises(TypeError):\n            s.split(2)\n            \n如果要运行unittest，只需要加上\nif __name__ == '__main__':\n    unittest.main()\n然后直接运行该脚本。\n每个test case的名字都由test开头，个人习惯在test和下划线之间加上test case的序号。\n\ntest01_condition1(self)\ntest02_condition1(self)\n...\n\n测试环境的搭建与还原\n\nsetUp() --- 用于测试环境的构建， 所有test case开始前执行\ntearDown() --- 测试环境的还原， 所有test case结束后执行\n\n跳过某test case\n如果想跳过某test case暂不执行，可以在该method前加一个decorator\n@unittest.skip(\"demonstrating skipping\")\ndef test12_condition12(self):\n    self.assertEqual(1, 2)\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}