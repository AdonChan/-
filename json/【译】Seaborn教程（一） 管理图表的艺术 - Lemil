{"title": "【译】Seaborn教程（一） 管理图表的艺术 - Lemil ", "index": "seaborn,python", "content": "原文： http://web.stanford.edu/~mwaskom/software/seaborn/tutorial/aesthetics.html\n管理图表的艺术\n第一小部分有人翻译过了，链接：https://segmentfault.com/a/1190000002789457\n用axes_style()和set_style()管理图表样式\nSeaborn有五个预设好的主题：darkgrid, whitegrid, dark, white,和ticks。它们各自适用于不同的应用和个人喜好。缺省的主题是darkgrid。如上文提到的，网格让图表的布局成为了查找大量信息的表格，并且白线灰底让网络不会影响代表数据的线的显示。尽管whitegrid主题非常简洁，但是它更适用于数据元素较大的布局。\nsns.set_style(\"whitegrid\")\ndata = np.random.normal(size=(20, 6)) + np.arange(6) / 2\nsns.boxplot(data=data);\n\n\n对于大多数布局,(尤其是当你主要想要利用图表来提供给人对于数据模式的印象),网格便不那么重要了.\nsns.set_style(\"dark\")\nsinplot()\n\n\nsns.set_style(\"white\")\nsinplot()\n\n有时你可能想在布局上添加一些额外的结构,比如说将轴线分割成线段的ticks:\nsns.set_style(\"ticks\")\nsinplot()\n\n\n用despine()移除轴线\n样式white和ticks都可以通过去除上方和右方不必要的轴线来得到改善. 而这些是不可能在matplotlib里设置参数做到的,但是你可以调用seaborn的函数despine()来去除轴线:\nsinplot()\nsns.despine()\n\n\n有些布局也可以通过调整轴线距数据的偏移来改善,这也能在despine()里完成.当ticks不能覆盖轴线的整个范围时,trim参数可以限制显示的轴线的范围.\nf, ax = plt.subplots()\nsns.violinplot(data)\nsns.despine(offset=10, trim=True);\n\n\n你也可能通过设置另外的参数来控制移除哪条轴线:\nsns.set_style(\"whitegrid\")\nsns.boxplot(data=data, palette=\"deep\")\nsns.despine(left=True)\n\n\n临时设置图表样式\n尽管来回切换样式是很简单的,但是你也可以在with语句里用axes_style()函数来临时设置控制布局的参数.这也允许你用不同的风格来制作图表:\nwith sns.axes_style(\"darkgrid\"):\n    plt.subplot(211)\n    sinplot()\nplt.subplot(212)\nsinplot(-1)\n\n\n重载seaborn样式的元素\n如果你想要自定义seaborn的样式,你可以用词典(dictionary)将一系列控制参数赋值给axes_style()函数和set_style()函数的rc参数里. 注意你只能通过这种方式重载样式定义的部分.(但是,更高级的set()函数可以处理包含任意matplotlib参数的词典)\n如果你想要知道都包含了哪些参数,你可以调用没有参数的函数,它会返回当前设置:\nsns.axes_style()    \n\n{'axes.axisbelow': True,\n 'axes.edgecolor': '.8',\n 'axes.facecolor': 'white',\n 'axes.grid': True,\n 'axes.labelcolor': '.15',\n 'axes.linewidth': 1.0,\n 'figure.facecolor': 'white',\n 'font.family': [u'sans-serif'],\n 'font.sans-serif': [u'Arial',\n  u'Liberation Sans',\n  u'Bitstream Vera Sans',\n  u'sans-serif'],\n 'grid.color': '.8',\n 'grid.linestyle': u'-',\n 'image.cmap': u'Greys',\n 'legend.frameon': False,\n 'legend.numpoints': 1,\n 'legend.scatterpoints': 1,\n 'lines.solid_capstyle': u'round',\n 'text.color': '.15',\n 'xtick.color': '.15',\n 'xtick.direction': u'out',\n 'xtick.major.size': 0.0,\n 'xtick.minor.size': 0.0,\n 'ytick.color': '.15',\n 'ytick.direction': u'out',\n 'ytick.major.size': 0.0,\n 'ytick.minor.size': 0.0}\n\n然后你可以设置这些参数的不同版本:\nsns.set_style(\"darkgrid\", {\"axes.facecolor\": \".9\"})\nsinplot()\n\n\n使用plotting_context()和set_context()来设置布局元素的规模\n布局元素的规模被独立的参数集合控制,这能让你使用相同的代码得到不同大小的规模合适的布局\n首先让我们重新调用set()函数得到缺省设置:\nsns.set()\n\n有4种预设好的上下文(context),按相对大小排序分别是:paper, notebook, talk,和poster.缺省的规模是notebook,上述的所有图表都是它.\nsns.set_context(\"paper\")\nplt.figure(figsize=(8, 6))\nsinplot()\n\n\nsns.set_context(\"talk\")\nplt.figure(figsize=(8, 6))\nsinplot()\n\n\nsns.set_context(\"poster\")\nplt.figure(figsize=(8, 6))\nsinplot()\n\n\n大部分你现在所稽首的样式函数都应该被转换成上下文函数.\n你可以调用set_context()，将上下文的名字当作一个参数传入，然后你就可以通过提供一个写有各项设置值的词典重载上下文的参数。\n在修改上下文时，你也可以单独修改字体大小。（更高级的set()里也可以这么做）\nsns.set_context(\"notebook\", font_scale=1.5, rc={\"lines.linewidth\": 2.5})\nsinplot()\n\n\n同样地（虽然可能没什么用），你可以用with语句临时设置图表的规模。\n样式和上下文都可能通过set()来快速设置。这个函数也可以设置缺省的配色方案，不过这将是下一节我们要详细讲述的。\n\n                ", "mainLikeNum": ["3 "], "mainBookmarkNum": "14"}