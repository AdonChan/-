{"title": "python类和对象 - study ", "index": "python", "content": "class\n类的定义\nclass Cat(object):\n    def __init__(self,name,age): # 相当于Java的构造函数\n        self.name=name\n        self.age=age\n        print(\"__init__方法\")\n    \n    def __str__(self):  # 相当于Java的toString方法\n        pass\n    \n    def eat(self):\n        print(\"eat......\")\n        \n    def drink(self):\n        print(\"drink......\")\n\ntom=Cat(\"jack\",10) # 创建了tom对象，python会自动的调用__init__()方法\n\n__del__():\nclass Cat(object):\n    \"\"\"docstring for test\"\"\"\n    def __init__(self,name,age):\n        self.name=name\n        self.age=age\n        print(\"__init__被调用\")\n\n    def __del__(self):\n        print(\"__del__\")\n\ntom=Cat(\"name\",12)\ndel tom\nprint(\"=\" * 30)\nOut:\n__init__被调用\n__del__\n==============================\n\ntom=Cat(\"name\",12)\nprint(\"=\" * 30)\nOut:\n__init__被调用\n==============================\n__del__\n魔法方法\n在python中，所有的以\"__\"双下划线包起来的方法，都被统称为\"魔法方法\"。例如上述的__init__和__str__。\n魔法方法参考\n私有属性和方法\n\nPython中没有像Java中有public和private这些关键字来区别公有属性和私有属性\nPython是以属性命名方式来区分，如果在属性名前面加了2个下划线'__'，则表明该属性是私有属性，否则为公有属性（方法也是一样，方法名前面加了2个下划线的话表示该方法是私有的，否则为公有的）。\n\n继承\nclass Animal:\n    def eat(self):\n        print(\"-----吃----\")\n    def run(self):\n        print(\"-----跑----\")\n\nclass Dog(Animal):     # python继承关键 \n    def bark(self):\n        print(\"----汪汪叫---\")\n    def run(self):        # 重写\n        super().run()   # 调用被重写的父类的方法\n\ndog = Dog()\ndog.eat()\n上述介绍的私有属性和方法不能被继承。\n多继承\nclass Base(object):\n    def test(self):\n        print(\"----Base\")\n\nclass A(Base):\n    def test1(self):\n        print(\"-----test1\")\n\nclass B(Base):\n    def test2(self):\n        print(\"-----test2\")\n\nclass C(A,B):    # 多继承\n    pass\n\nc = C()\nc.test1()\nc.test2()\nc.test()\n注意如果父类拥有同名的方法，子类会调用哪个方法：\nclass Base(object):\n    def test(self):\n        print(\"----Base\")\n\nclass A(Base):\n    def test(self):\n        print(\"-----A\")\n\nclass B(Base):\n    def test(self):\n        print(\"-----B\")\n\nclass C(A,B):\n    pass\n    #def test(self):\n    #    print(\"-----C\")\n\n\nc = C()\nc.test() # -----A\n\nprint(C.__mro__) # (<class '__main__.C'>, <class '__main__.A'>, <class '__main__.B'>, <class '__main__.Base'>, <class 'object'>) 如果有同名方法，会按这个顺序执行。其中<class '__main__.A'>, <class '__main__.B'>这个顺序与class C(A,B)这个顺序有关。\n多态\n多态的概念是应用于Java和C#这一类强类型语言中，而Python崇尚“鸭子类型”。\n所谓多态：定义时的类型和运行时的类型不一样，此时就成为多态。\nclass Dog(object):\n    def print_self(self):\n        print(\"大家好,我是dog,...\")\n\nclass xiaogou(Dog):\n    def print_self(self):\n        print(\"hello ,我是xiaogou\")\n\n\ndef introduce(temp):\n    temp.print_self()\n\n\ndog1 = Dog()\ndog2 = xiaogou()\n\nintroduce(dog1)\nintroduce(dog2)\n类属性、实例属性\nclass Tool(object):\n\n    #类属性\n    num = 0\n\n    #方法\n    def __init__(self, new_name):\n        #实例属性\n        self.name = new_name\n        #对类属性+=1\n        Tool.num += 1\n\n\ntool1 = Tool(\"t1\")\ntool2 = Tool(\"t2\")\ntool3 = Tool(\"t3\")\n\nprint(Tool.num)\n静态方法、类方法\nclass Game(object):\n\n    #类属性\n    num = 0\n\n    #实例方法 操作实例属性\n    def __init__(self):\n        #实例属性\n        self.name = \"laowang\"\n\n    #类方法  操作类属性\n    @classmethod\n    def add_num(cls):\n        cls.num = 100\n\n    #静态方法  不操作类属性和实例属性\n    @staticmethod\n    def print_menu():\n        print(\"----------------------\")\n\ngame = Game()\n#Game.add_num()#可以通过类的名字调用类方法\ngame.add_num()#可以通过这个类创建出来的对象调用这个类方法\nprint(Game.num)\n\n#Game.print_menu()#通过类调用静态方法\ngame.print_menu()#通过实例对象调用静态方法\n单例模式\nclass Car(object):\n    __instance=None\n\n    def __init__(self):\n        pass\n\n    def __new__(cls):\n        if not cls.__instance:\n            cls.__instance=object.__new__(cls)\n\n        return cls.__instance\n\n\nc1=Car()\nc2=Car()\n\nprint(id(c1))\nprint(id(c2)) #相等\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}