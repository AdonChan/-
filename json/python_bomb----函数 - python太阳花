{"title": "python_bomb----函数 - python太阳花 ", "index": "python", "content": "函数的定义\n范例\ndef print(self, *args, sep=' ', end='n', file=None):\n\n总结\n无参\n\ndef 函数名():\n快注释\n函数体\n定义函数，并不会执行函数体里面的内容\ndef hello():\n    print('hello')\n    print('sheenstar')\n\n调用函数的过程\nhello()\n函数里面嵌套函数\ndef sheen():\n    print(\"happy is ...\")\n    def star():\n        print(\"sheen\")\n调用外层函数时，内层函数不会执行\nsheen()\n\nhappy is ...\n变量参数\n定义函数时的变量，称做形参，可以任意命名真实的数据信息，调用函数时传递的参数，称为实参\ndef game(guess):    #guess是形参\n    print(guess>2)\n\ngame(3)    #3是实参\nnumber = 1\ngame(number)    #number是实参\n\n形参\n形参可分为：位置参数，默认参数，可变参数，关键字参数\n位置参数\n形参必须和实参个数一致，按照位置传递参数\ndef getinfo(name, age):\n    print(name, age)\n\n\ngetinfo('sheen', 17)\ngetinfo(age=13, name='star')\n\nsheen 17\nstar 13\n\n默认参数\n实参和形参的个数可以不一致\ndef mypow(x, y=2):\n    \"\"\"\n    求x的y次方，y默认值为2\n    :param x: value\n    :param y:\n    :return:\n    \"\"\"\n    print(x ** y)\n\nmypow(2)\nmypow(2, 3)\n\n4\n8\n\n可变参数\n# 可变参数\ndef mysum(*args):\n    \"\"\"\n    用户可以传入任意个数值，计算数值的和\n    注意：*args是可变参数；\n        args是元组数据类型\n        args可以改称其他，因为是形参\n    mysum(1,2,45,787,...)\n    :return:\n    \"\"\"\n    print(args)  # 元组\n    sum = 0\n    for item in args:\n        sum += item\n    print(sum)\n\n\nmysum(1, 2, 3, 4, 5, 6, 7)\n\n\n28\n\n\n关键字参数\n**kwargs是一个字典，可以传递任意多的key-value对\n\ndef getstinfo(name, age, **kwargs):\n    print(name, age)\n    print(kwargs)\n\n\ngetstinfo('sheen', 19, hobbies=['code', 'flower'], gender='female')\n\nsheen 19\n{'hobbies': ['code', 'flower'], 'gender': 'female'}\n动态添加函数成员\ndef fun():\n    print(fun.x)\nfun()    #报错，AttributeError: 'function' object has no attribute 'x'\n动态添加\nfun.x = 3\nfun()\n\n3\n动态删除\nfun.x = 3\ndel fun.x\nfun()    #报错，AttributeError: 'function' object has no attribute 'x'\n函数返回值\n返回值：函数运算的结果，还需要进一步操作时，给一个返回值'return''return'用来返回函数执行结果，如果没有返回，默认为‘none’遇到'return',函数执行结束，后面代码不会执行，（yield）python可以间接返回多个值;原理：返回一个元组，再对元组进行解包\ndef myfun(x,y):\n    return x+y,x-y,x*y,x**y\n\nm=myfun(3,2)\nprint(m)\n\n(5, 1, 6, 9)\n变量的作用域\n变量：局部变量，全局变量局部变量：在函数体内定义的变量，只在函数内有意义，函数执行结束后，变量不存在不可变数据类型：函数内部改变，不会影响外部变量值可变数据类型：函数内部改变，会影响外部变量值\na= 1\nprint('outsides',id(a))\ndef fun():\n    a=5    #局部变量\n    print('besides:',id(a))\nfun()\nprint(a)\n\noutsides 9326560\nbesides: 9326688\n1\n# 全局变量:global\na= 1\nprint('outsides',id(a))\ndef fun():\n    global a    #a为全局变量\n    a=5\n    print('besides:',id(a))\nfun()\nprint(a)\nprint(id(a))\n\noutsides 9326560\nbesides: 9326688\n5\n9326688\n\n函数补充\n给变量和返回值都设定默认数据类型，不是此类型，函数仍能执行\ndef myadd(x:int,y:int) -> int:\n    return x+y\n\nprint(myadd(1.0,8))\n\n9.0\n参数数据类型的判断\nisinstance()\n>>> isinstance(1,int)\nTrue\n>>> isinstance([1,2],int)\nFalse\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}