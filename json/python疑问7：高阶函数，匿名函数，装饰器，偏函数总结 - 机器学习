{"title": "python疑问7：高阶函数，匿名函数，装饰器，偏函数总结 - 机器学习 ", "index": "python", "content": "本文是学习廖雪峰官网网站python教程后总结的，供日后参考用1.高阶函数一个函数将另一个函数作为参数，称为高阶函数。当然也可以将一个函数作为结果返回\n示例1：将函数作为参数\ndef add(x,y,f):\n    return f(x)+f(y)\nresult = add(-3,2,abs)\nprint(result) // 5 \n示例2：将函数作为结果返回\ndef func(x,y):\n    def add():\n        return x+y\n    return add\nf = func(2,3)\nprint(f) // Out:<function func.<locals>.add at 0x0000019D1F420158> \nresult = f()\nprint(result) // 5   \n2.匿名函数\nf = lambda x: x*x\nprint(f) // <function <lambda> at 0x0000019D1F420158>\nresult = f(5)\nprint(result) //25\n3.装饰器装饰器(decorator)就是一个返回函数的高阶函数，在代码运行期间动态增加功能。无参数的装饰器示例:\nimport functools\ndef log(func):\n    //经过装饰的函数名称发生改变，此方法解决这个问题\n    @functools.wraps(func)\n    def wrapper(*args,**kw):\n        print('call %s:' % func.__name__)\n        return func(*args,**kw)\n    return wrapper\n@log\ndef now():\n    print(\"2018-2-4\")\nnow() // call now: 2018-2-4\n带参数的装饰器示例：\nimport functools\ndef log(text):\n    def decorator(func):\n        //经过装饰的函数名称发生改变，此方法解决这个问题\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            print('%s %s():' % (text, func.__name__))\n            return func(*args, **kw)\n        return wrapper\n    return decorator\n@log('execute')\ndef now():\n    print('2015-3-25')\nnow() // execute now(): 2015-3-25\n4.偏函数偏函数就是把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，调用这个新函数会更简单\nimport functools\n//等价于\n//def int2(x, base=2):\n//    return int(x, base)\nint2 = functools.partial(int, base=2)\nresult = int2('100000')\nprint(result) // 32\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}