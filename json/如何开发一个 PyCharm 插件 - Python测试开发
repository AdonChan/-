{"title": "如何开发一个 PyCharm 插件 - Python测试开发 ", "index": "pycharm,plugin,python", "content": "PyCharm 是很多 Python 开发者优先选择的 IDE，功能强大，跨平台，提供免费社区版，非常良心。如果你想自己给PyCharm添加一些功能怎么办呢？有两个办法：\n\n通过提需求实现，到 JetBrains 的 github 去提issue或者自己发Pull Request请他们merge。\n通过安装插件实现，你可以查找现有的插件仓库，或者，自己写一个。\n\n今天我们说说怎么搭建环境自己写一个 PyCharm 插件。\n前期准备\n先普及一下知识，开发 PyCharm 插件和开发 IntellJ IDEA 插件需要的环境是一样的，因为 PyCharm 本身就是 IDEA 的一个子集，说白了就是 IDEA 上套了一个 Python 语言支持的插件。其他系列的 IDEA IDE 其实也是一样的道理，都是套了对应语言支持的框架外加一点外观修改，就成了新的产品，比如 WebStrom，PhpStorm，RubyMine。到这里你应该有个印象，JetBrains 这个公司太能玩了，就一个 IDEA 能整出那么多产品来，很厉害吧？\n开发 PyCharm 插件你需要：\n\n对 Java  语言有一定了解，因为你只能用 Java 开发插件\n安装最新版的 IntelliJ IDEA\n安装 PyCharm Community Edition 到本地\n确保 IntelliJ 安装并启用了 Plugin DevKit 插件，默认自带\n配置 IntelliJ Platform SDK， 下文会涉及相关步骤\n（非必需）将IntellJ IDEA Community Edition 的代码克隆到本地，方便调试\n\n​\n如果你英文还可以，也可以阅读官方的帮助文档。\nhttp://www.jetbrains.org/inte...\n新建插件工程\n从文件菜单选择 New Project， 选择 IntelliJ Platform Plugin，如果你没有配置SDK，点击New 菜单。\n\n选择你本地 PyCharm Community Edition（社区版）的安装路径作为SDK目录，Java SDK 选择 1.8 以上的版本。\n请注意，你也可以使用 PyCharm Professional (旗舰版) 的安装路径作为SDK目录，不过当你调试插件碰到核心代码时，社区版你可以一步一步跟到最里面，但旗舰版不行，因为旗舰版并不是开源的，你拿不到源代码。\n\n回到 New Project 的界面，点击 Next，输入 Project name 和 Project location，点击完成。\n\n小贴士：如果你是打开别人的写的插件，那么你直接选择打开工程目录是没有用的，因为 IntelliJ IDEA 不认为这是个插件工程，所以你没法运行和调试这个插件，一个不怎么优雅的办法就是从现有代码新建一个插件工程，StackOverflow 关于这个的吐槽问题你搜到，如果你有更好的办法请告诉我。当你换一台机器把插件代码克隆下来之后应该就知道我在说什么了。\n插件工程目录结构\n一个典型的插件目录结构就像下图。\n\n\n.idea 目录 - JetBrains IDE 生成的工程都会有这么一个目录，存放用户配置和缓存，无需关心。\ndoc 目录 - 插件的文档，可选。\nout 目录 - 编译后的代码字节，无需关心。\nresources 目录 - 资源存放目录，插件的配置文件在此。\nsrc 目录 - 代码存放的位置。\n*.iml 文件 - 项目的配置文件。\n\n修改插件信息\n打开 /resources/META-INF/plugin.xml， 更新插件信息，举例说明。\n<idea-plugin version=\"2\">\n    <id>com.eflabs.plugin.efcommon</id>\n    <name>EF Common for PyCharm</name>\n    <version>3.1</version>\n    <vendor email=\"toby.qin@live.com\">Toby Qin</vendor>\n    <description><![CDATA[\n      <b>Able to run and debug ef common tests easily.</b><br>\n      <br>\n      <ul>\n      <li>Support run/debug ef-common tests via context menu.</li>\n      <li>Show run button in the line of test case.</li>\n      </ul>]]>\n    </description>\n    <change-notes><![CDATA[\n      <b>v3.0</b><br>\n      <p>Support PyCharm 171.*</p>\n      <p>Support nested ef-common project.</p>\n      <br>\n\n      <b>Early version</b><br>\n      <p>Bug fix: failed to get run.template in resource.</p>\n      <p>The baby version.</p>\n      <br>]]>\n    </change-notes>\n    <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html for description -->\n    <idea-version since-build=\"171.1\"/>\n    <!-- please see http://confluence.jetbrains.com/display/IDEADEV/Plugin+Compatibility+with+IntelliJ+Platform+Products\n         on how to target different products -->\n    <depends>com.intellij.modules.python</depends>\n    <extensions defaultExtensionNs=\"com.intellij\">\n        <!-- Add your extensions here -->\n        <configurationType implementation=\"com.eflabs.efcommon.runConfiguration.EfCommonConfigurationType\"\n                           order=\"FIRST\"/>\n        <runConfigurationProducer implementation=\"com.eflabs.efcommon.runConfiguration.EfCommonConfigurationProducer\"\n                                  order=\"FIRST\"/>\n        <runLineMarkerContributor\n                implementationClass=\"com.eflabs.efcommon.runLineMarker.EfCommonRunLineMarkerContributor\"\n                language=\"Python\"/>\n    </extensions>\n\n    <actions>\n        <!-- Add your actions here -->\n    </actions>\n\n</idea-plugin>\n这个配置文件里有几点要注意的：\n\n<id>和<version> 用于声明你的插件唯一标识，同id和version的插件不能够重复上传。\n<depends> 节点声明了此插件的依赖条件，如果是PyCharm 适用的，那么就写 com.intellij.modules.python\n<extenstions 节点用于声明你要扩展的类，只要继承和实现对应的接口就可以了。\n<actions> 节点用于注册你要实现的 Action，比如你先写一些 Action，然后注册到某个菜单。\n\n实现具体的业务代码\n这里我略过最核心的部分，因为每个人的需求和代码能力都不一样，这应该去查阅Java编程规范。\n简而言之，就是根据你自己的需求用Java实现一些接口和方法。\n运行和调试你的插件\n如果你的代码已经实现了，那么运行和调试就比较简单。\n\n使用 Run | Run 菜单来运行你的插件，这时候会启动一个新的PyCharm，默认安装好你的插件。\n使用 Run | Debug  菜单来调试你的插件，你可以设置断点进行调试。\n\n发布你的插件\n你可以选择本地发布你的插件，也可以选择上传到 JetBrains 的插件仓库。\n本地发布安装\n如果你的插件是内部小范围使用，并且可能带有敏感信息，那么这样的方式会比较适合你。从主菜单选择 Build > Prepare plugin 'my_plugin' For Deployment。\n\n如果成功那么在工程目录就会生成一个同名的 jar 文件。\n\n将这个文件 copy 到目标机器就可以通过 Install Plugin from disk ...  完成安装。\n发布插件到 JetBrains Plugin 仓库\n生成插件的步骤和本地发布是一样的，唯一不同的就是你需要到 JetBrains Plugins 网站去注册一个账号。\nhttps://plugins.jetbrains.com/\n登录之后选择 UPLOAD PLUGIN 菜单，上传之后大概需要2个工作日审核。\n\n审核通过后其他用户就可以直接从 Browse Repositories... 里搜索到你的插件并安装。通过插件仓库安装的插件，一旦有新版本发布，用户将收到更新提示。\n写在最后\n关于如何实现具体的插件业务代码，一个偷懒的办法就是去看现有功能大概是怎么实现的，你既然可以拿到 PyCharm Community Edition 的所有代码，还有啥看不到的，看懂只是时间问题。再或者去 github 搜搜看，万一有惊喜呢？\n就 PyCharm 本身来说，我觉得作为 IDE 提供的功能已经很丰富了，为啥还要写插件呢？对啊，哪里来的需求，会不会是一个伪需求呢。写插件前请你想一想这个问题。\n\n关于作者：\nToby Qin, Python 技术爱好者，目前从事测试开发相关工作，转载请注明原文出处。\n欢迎关注我的博客 https://betacat.online，你可以到我的公众号中去当吃瓜群众。\n\n\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "2"}