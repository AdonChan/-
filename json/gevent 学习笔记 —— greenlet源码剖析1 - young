{"title": "gevent 学习笔记 —— greenlet源码剖析1 - young ", "index": "协程,python,greenlet", "content": "\n\n在greenlet篇中只是简单讲述了一下greenlet原理，不知道有没有人对源码感兴趣的，不过我还是比较感兴趣的。对于技术我一直都觉得『知其然，知其所以然』才是最好的，不希望自己只停留在知道用，而不知道为什么这样用。\n\n一篇可能介绍不完，所以可能需要分几部分来介绍。当我写到这的时候突然发现自己是不是写跑题了，本来是写greenlet源码分析的，结果变成了怎么去写Python扩展了。不过不管怎样，就当多学习了一些其他知识，况且分析源码肯定少不了对这些知识的了解。\n\n模块初始化\n\ngreenlet是用C编写的一个扩展模块，即用Python去调用C程序。像下面这段代码，内部都是怎样的一个过程呢？\n\nfrom greenlet import greenlet\n\ndef test1():\n    print 12\n    gr2.switch()\n    print 34\n\ndef test2():\n    print 56\n    gr1.switch()\n    print 78\n\ngr1 = greenlet(test1)\ngr2 = greenlet(test2)\ngr1.switch()\n\n\n这段代码中，我们看到from greenlet import greenlet这句，相信都能明白是导入了一个模块。为什么要导入这个模块呢？这个问题有点瞧不起大家了，因为我们可能需要使用这个模块的某个功能。那在导入这个模块的时候，Python解释器需要做哪些工作呢？在使用一个类的时候，我们肯定是需要调用构造函数来初始化的，导入模块就类似于这样的一个初始化过程。所以肯定会有一个初始化函数，它长啥样？\n\n在文档中有这样一句：The initialization function must be named initname(), where name is the name of the module, and should be the only non-static item defined in the module file.\n\n所以对于greenlet，我们就能找到initgreenlet(void)函数。\n\n#define INITERROR return\n// 第一次导入greenlet模块时调用\nPyMODINIT_FUNC initgreenlet(void) \n{\n    PyObject* m = NULL;\n    char** p = NULL;\n    PyObject *c_api_object;\n    static void *_PyGreenlet_API[PyGreenlet_API_pointers];\n\n    GREENLET_NOINLINE_INIT();\n\n    m = Py_InitModule(\"greenlet\", GreenMethods);\n\n    if (m == NULL)\n    {\n        INITERROR;\n    }\n    ...\n}\n\n\n首先根据模块名查找相应的初始化函数，然后Py_InitModule()函数向Python解释器注册该模块中所有可以用到的方法。而Py_InitModule()函数是由Python提供的C API，对于使用C API只需要包含一个头文件就可以了。\n\n官方文档描述：All function, type and macro definitions needed to use the Python/C API are included in your code by the following line:\n\n#include \"Python.h\"\n\n\n方法列表\n\n看下关键代码m = Py_InitModule(\"greenlet\", GreenMethods)。官方文档描述：Create a new module object based on a name and table of functions, returning the new module object.\n\n里面提到了table of functions，在这个模块中指的就是GreenMethods，一般称它为方法列表。该列表给出了所有可以被Python解释器使用的方法，将这些方法注册到这个模块中，这样在我们导入模块后就可以直接使用了。\n\n当Python程序第一次导入greenlet模块的时候，调用initgreenlet()函数。接着Py_InitModule()会创建一个“模块对象”（它将被插入到sys.modules字典下的“greenlet”键下），并且将方法列表（PyMethodDef结构数组）构成的内建函数对象作为它的第二个参数传到刚被创建的模块中。Py_InitModule()返回一个指向它创建的模块对象的指针。方法列表代码：\n\nstatic PyMethodDef GreenMethods[] = {\n    {\"getcurrent\", (PyCFunction)mod_getcurrent, METH_NOARGS, /*XXX*/ NULL},\n    ...\n};\n\n\n方法列表中的各项参数如下：\n\n(PyCFunction)mod_getcurrent函数如下：\n\nstatic PyObject* mod_getcurrent(PyObject* self)\n{\n    if (!STATE_OK)\n        return NULL;\n    Py_INCREF(ts_current);\n    return (PyObject*) ts_current;\n}\n\n\n该函数的作用就是获取当前greenlet对象，并添加引用计数。\n\n小结\n\n一个模块的初始化工作大致是这样的。不过针对greenlet发现了一些问题，在该模块的方法列表中看到了getcurrent，而其他像switch、run等却没有看到。随后去查阅greenlet的官方文档，看到了greenlet.getcurrent()和g.switch(*args, **kwargs)，却被分别安排在『实例化』和『greenlets的方法和属性』两个不同的标题之下，为什么要这样区分呢？\n\n以上部分都是一个Python C扩展模块基本的初始化工作，针对greenlet还有其他要做的。具体怎么做以及上面问题的答案就放到下一篇讲吧，因为内容比较多在这篇讲不完。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "5"}