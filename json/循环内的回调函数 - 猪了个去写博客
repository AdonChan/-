{"title": "循环内的回调函数 - 猪了个去写博客 ", "index": "闭包,python", "content": "问题出现在循环体内的回调函数，用一个很简单的例子举例：\n\nfor x in xrange(3):\n    print \"requests begin:%s\"%x\n    def callback(respon):\n        print x\n        print respon.body\n    client.fetch(\"http://httpbin.org/get?x=%s\" % x, callback)\n\n\n此例子忽略了等待回调函数完成的wait实现（不实现这个会导致作为单个文件运行的时候，还没获得结果就退出了），在tornado.testing中的AsyncTestCase提供了相关功能\nhttpbin.org/get这个地址的作用是返回了请求的json对象，形如：\n\n{\n  \"args\": {\n    \"x\": \"0\"\n  },\n  \"headers\": {\n    \"Accept-Encoding\": \"gzip\",\n    \"Connection\": \"close\",\n    \"Host\": \"httpbin.org\",\n    \"X-Request-Id\": \"95df3c15-7ed0-4a6d-830d-fb9629e66515\"\n  },\n  \"origin\": \"192.81.129.91\",\n  \"url\": \"http://httpbin.org/get?x=0\"\n}\n\n\n但实际上，由于回调函数特殊的特性：访问闭包内局部变量的当前值。易知，在第一个请求http://httpbin.org/get?x=0的url返回时,循环早已结束，此时的x已经为2，因此实际上虽然httpbin.org返回的json告诉我们，get参数里的x为0，但闭包内访问到的x已经是2了\n\n解决方法我想了两个，一个是利用回调函数构造时的变量空间，在构造函数时即产生这个参数，形如：\n\nclient = AsyncHTTPClient(self.io_loop)\nfor x in xrange(3):\n    def callback(respon,num=x):\n        print x, num\n        print respon.body\n        if num == 2:\n            self.stop()\n\n    client.fetch(\"http://httpbin.org/get?x=%s\" % x, wrap(x))\n\n\n一种是再包一层闭包（这层闭包也可以放在for外面）：\n\nclient = AsyncHTTPClient(self.io_loop)\nfor x in xrange(3):\n    def wrap(number):\n        num = number\n        def callback(respon):\n            print x, num\n            print respon.body\n            if num == 2:\n                self.stop()\n        return callback\n    client.fetch(\"http://httpbin.org/get?x=%s\" % x, wrap(x))\n\n#wrap放在for外面：\nclient = AsyncHTTPClient(self.io_loop)\ndef wrap(number):\n    num = number\n    def callback(respon):\n        print x, num\n        print respon.body\n        if num == 2:\n            self.stop()\n    return callback\nfor x in xrange(3):\n    client.fetch(\"http://httpbin.org/get?x=%s\" % x, wrap(x))\n\n\n思索了一下，闭包的内存占用问题应当是不可避免的？当循环体的每一项（x）是一个大内存对象时，内存占用等同于不用迭代器用列表进行循环，除了这两种不知道还有没有更优雅的解决方案。。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}