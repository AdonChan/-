{"title": "sql to sqlalchemy 实例教程 - 藕丝空间 ", "index": "flask,sqlalchemy,mysql,python", "content": "在Python项目中，经常需要操作数据库，而 sqlalchemy 提供了 SQL 工具包及对象关系映射(ORM)工具，大大提高了编程开发的效率。为了更好的提升自己的 sql 以及使用 sqlachemy 水平，可以使用 MySQL 自带的示范数据库 employees 进行练习。\n搭建基于 MySQL 实例数据库 employees 的 sqlalchemy 开发环境\n请参阅下面的链接内容：\n搭建基于 MySQL 实例数据库 employees 的 sqlalchemy 开发环境\n基本实例\n以下九个例子全是以代码加注释的形式来展示给大家。\n# -*- coding:utf-8 -*-\n__author__ = '东方鹗'\n__blog__ = 'http://www.os373.cn'\n\nfrom models import session, Employee, Department, DeptEmp, DeptManager, Salary, Title\nimport operator\n\n\n'''----------------------------------------------第一例-----------------------------------------------\n    功能说明：\n    使用主键对 employees 表进行查询，结果是： 返回该主键对应的单条数据！\n'''\n\n'''使用 sql 语句方式进行查询'''\nsql = \"select * from employees where emp_no = 10006\"\nsql_data = [(d.emp_no, d.birth_date, d.first_name, d.last_name, d.gender, d.hire_date) for d in session.execute(sql)]\n\n'''使用 sqlalchemy 方式进行查询'''\nd = session.query(Employee).get(10006)\nalchemy_data = [(d.emp_no, d.birth_date, d.first_name, d.last_name, d.gender, d.hire_date)]\n\n'''比较两个结果，应该是True'''\nfor d in zip(sql_data, alchemy_data):\n    print(d)\nprint('第一例结果是：{}'.format(operator.eq(sql_data, alchemy_data)))\n\n'''-------------------------------------------------------------------------------------------------'''\n\n'''-------------------------------------------第二例--------------------------------------------------\n    功能说明：\n    对 employees 表进行查询，结果是：从第 4 行开始查询，返回之后的 10 行数据！值为一个列表。\n'''\n\n'''使用 sql 语句方式进行查询'''\nsql = \"select * from employees limit 10 offset 4\"\nsql_data = [(d.emp_no, d.birth_date, d.first_name, d.last_name, d.gender, d.hire_date) for d in session.execute(sql)]\n\n'''使用 sqlalchemy 方式进行查询'''\nalchemy_data = [(d.emp_no, d.birth_date, d.first_name, d.last_name, d.gender, d.hire_date)\n                for d in session.query(Employee).limit(10).offset(4).all()]\n\n'''比较两个结果，应该是True'''\nfor d in zip(sql_data, alchemy_data):\n    print(d)\nprint('第二例结果是：{}'.format(operator.eq(sql_data, alchemy_data)))\n\n'''-------------------------------------------------------------------------------------------------'''\n\n'''-------------------------------------------第三例--------------------------------------------------\n    功能说明：\n    使用一个精确参数对 employees 表进行查询(搜索字段 last_name 为 'Nooteboom' 的内容)，\n    结果是： 返回该参数对应的第一条数据！仅仅是第一条数据！\n'''\n\n'''使用 sql 语句方式进行查询'''\nsql = \"select * from employees where last_name = 'Nooteboom' limit 1\"\nsql_data = [(d.emp_no, d.birth_date, d.first_name, d.last_name, d.gender, d.hire_date) for d in session.execute(sql)]\n\n'''使用 sqlalchemy 方式进行查询'''\nd = session.query(Employee).filter_by(last_name='Nooteboom').first()\nalchemy_data = [(d.emp_no, d.birth_date, d.first_name, d.last_name, d.gender, d.hire_date)]\n\n'''比较两个结果，应该是True'''\nfor d in zip(sql_data, alchemy_data):\n    print(d)\nprint('第三例结果是：{}'.format(operator.eq(sql_data, alchemy_data)))\n\n'''-------------------------------------------------------------------------------------------------'''\n\n'''-------------------------------------------第四例--------------------------------------------------\n    功能说明：\n    使用一个精确参数对 employees 表进行查询(搜索字段 last_name 为 'Nooteboom' 的内容)，\n    结果是： 返回该参数对应的所有数据！所有数据！值为一个列表。\n'''\n\n'''使用 sql 语句方式进行查询'''\nsql = \"select * from employees where last_name = 'Nooteboom'\"\nsql_data = [(d.emp_no, d.birth_date, d.first_name, d.last_name, d.gender, d.hire_date) for d in session.execute(sql)]\n\n'''使用 sqlalchemy 方式进行查询'''\n\n'''方法一\nalchemy_data = [(d.emp_no, d.birth_date, d.first_name, d.last_name, d.gender, d.hire_date)\n                for d in session.query(Employee).filter_by(last_name='Nooteboom').all()]\n'''\n\n'''方法二如下'''\nalchemy_data = [(d.emp_no, d.birth_date, d.first_name, d.last_name, d.gender, d.hire_date)\n                for d in session.query(Employee.emp_no, Employee.birth_date, Employee.first_name,\n                Employee.last_name, Employee.gender, Employee.hire_date\n                ).filter_by(last_name='Nooteboom').all()]\n\n\n'''比较两个结果，应该是True'''\nfor d in zip(sql_data, alchemy_data):\n    print(d)\nprint('第四例结果是：{}'.format(operator.eq(sql_data, alchemy_data)))\n\n'''-------------------------------------------------------------------------------------------------'''\n\n'''-------------------------------------------第五例--------------------------------------------------\n    功能说明：\n    使用两个及以上的精确参数对 employees 表进行查询(搜索字段 last_name 为 'Nooteboom' \n    并且字段 first_name 为 'Pohua' 的内容)，\n    结果是： 返回参数对应的所有数据！所有数据！值为一个列表。\n'''\n\n'''使用 sql 语句方式进行查询'''\nsql = \"select * from employees where last_name = 'Nooteboom' and first_name = 'Pohua'\"\nsql_data = [(d.emp_no, d.birth_date, d.first_name, d.last_name, d.gender, d.hire_date) for d in session.execute(sql)]\n\n'''使用 sqlalchemy 方式进行查询'''\n\n'''方法一\nalchemy_data = [(d.emp_no, d.birth_date, d.first_name, d.last_name, d.gender, d.hire_date)\n                for d in session.query(Employee).\n                    filter_by(last_name='Nooteboom', first_name='Pohua').all()]\n'''\n'''方法二如下'''\nalchemy_data = [(d.emp_no, d.birth_date, d.first_name, d.last_name, d.gender, d.hire_date)\n                for d in session.query(Employee).filter(Employee.last_name=='Nooteboom').\n                    filter(Employee.first_name=='Pohua').all()]\n\n'''比较两个结果，应该是True'''\nfor d in zip(sql_data, alchemy_data):\n    print(d)\nprint('第五例结果是：{}'.format(operator.eq(sql_data, alchemy_data)))\n\n'''-------------------------------------------------------------------------------------------------'''\n\n'''-------------------------------------------第六例--------------------------------------------------\n    功能说明：\n    使用一个模糊参数对 employees 表进行查询，结果是： 返回该参数对应的所有数据！所有数据！值为一个列表。\n    提示：\n        1、sqlalchemy 提供了 like, endswith, startswith 函数结合通配符来进行模糊查询。\n           对于 like, endswith, startswith ，见字如面，请按照英文字面意思理解。\n        2、本例的重点是使用且仅一个模糊参数, 主要是为了展示 like 函数。\n'''\n\n'''使用 sql 语句方式进行查询'''\nsql = \"select * from employees where last_name like 'N%te_%'\"\nsql_data = [(d.emp_no, d.birth_date, d.first_name, d.last_name, d.gender, d.hire_date) for d in session.execute(sql)]\n\n'''使用 sqlalchemy 方式进行查询'''\n\nalchemy_data = [(d.emp_no, d.birth_date, d.first_name, d.last_name, d.gender, d.hire_date)\n                for d in session.query(Employee).filter(Employee.last_name.like('N%te_%')).all()]\n\n'''比较两个结果，应该是True'''\nfor d in zip(sql_data, alchemy_data):\n    print(d)\nprint('第六例结果是：{}'.format(operator.eq(sql_data, alchemy_data)))\n\n'''-------------------------------------------------------------------------------------------------'''\n\n'''-------------------------------------------第七例--------------------------------------------------\n    功能说明：\n    使用两个及以上模糊参数对 employees 表进行查询，查询字段 last_name 近似于 'N%te_%'，\n    并且字段 first_name 在 ('Jaewon', 'os373.cn') 里，同时，\n    字段 birth_date 是以 1955 开头，且字段 hire_date 是以 05-30 结束的员工信息。\n    结果是： 返回参数对应的所有数据！所有数据！值为一个列表。\n    提示：\n        1、sqlalchemy 提供了 like, endswith, startswith 函数结合通配符来进行模糊查询。\n           对于 like, endswith, startswith ，见字如面，请按照英文字面意思理解。\n        2、本例的重点是展示 like, endswith, startswith 函数以及 and_, or_, in_ 逻辑运算符函数的用法。\n    彩蛋：思考一下 not in， not equal，is NULL，is not NULL 的用法。\n'''\n\n'''使用 sql 语句方式进行查询'''\nsql = \"\"\"\n        SELECT\n            *\n        FROM\n            employees\n        WHERE\n            last_name LIKE 'N%te_%'\n        AND first_name IN ('Jaewon', 'os373.cn')\n        AND birth_date LIKE '1955%'\n        AND hire_date LIKE '%05-30'\n\"\"\"\nsql_data = [(d.emp_no, d.birth_date, d.first_name, d.last_name, d.gender, d.hire_date) for d in session.execute(sql)]\n\n'''使用 sqlalchemy 方式进行查询'''\nfrom sqlalchemy import and_, or_\nalchemy_data = [(d.emp_no, d.birth_date, d.first_name, d.last_name, d.gender, d.hire_date)\n                for d in session.query(Employee).filter(and_(Employee.last_name.like('N%te_%'),\n                                                             Employee.first_name.in_(['Jaewon','os373.cn']),\n                                                             Employee.birth_date.startswith('1955'),\n                                                             Employee.hire_date.endswith('05-30'))).all()]\n\n'''比较两个结果，应该是True'''\nfor d in zip(sql_data, alchemy_data):\n    print(d)\nprint('第七例结果是：{}'.format(operator.eq(sql_data, alchemy_data)))\n\n'''-------------------------------------------------------------------------------------------------'''\n\n'''-------------------------------------------第八例--------------------------------------------------\n    功能说明：\n    使用两个及以上模糊参数对 employees 表进行查询，查询字段 last_name 近似于 'N%te_%'，\n    并且字段 first_name 在 ('Jaewon', 'os373.cn') 里的员工信息，或者是，\n    字段 birth_date 是以 1955 开头，且字段 hire_date 是以 05-30 结束的员工信息的个数。\n    结果是： 返回一个数字。\n    提示：\n        1、sqlalchemy 提供了 like, endswith, startswith 函数结合通配符来进行模糊查询。\n           对于 like, endswith, startswith ，见字如面，请按照英文字面意思理解。\n        2、本例的重点是展示 like, endswith, startswith 函数以及 and_, or_, in_ 逻辑运算符函数的用法。\n        3、func 函数可以执行数据库所支持的函数，本例中是为了执行 MySQL 的 count 函数。\n        4、scalar() 函数是为了返回单项数据，与 first(), one() 函数类似，\n           但是前者返回的是单项数据，后两者返回的是 tuple。\n'''\n\n'''使用 sql 语句方式进行查询'''\nsql = \"\"\"\n        SELECT\n            count(*)\n        FROM\n            employees\n        WHERE\n            (\n                last_name LIKE 'N%te_%'\n                AND first_name IN ('Jaewon', 'os373.cn')\n            )\n        OR (\n            birth_date LIKE '1955%'\n            AND hire_date LIKE '%05-30'\n        )\n\"\"\"\nsql_data = [d for d in session.execute(sql)][0][0]\n\n'''使用 sqlalchemy 方式进行查询'''\nfrom sqlalchemy import and_, or_\n\n'''方法一\nalchemy_data = session.query(Employee).filter(or_(and_(Employee.last_name.like('N%te_%'),\n                                                       Employee.first_name.in_(['Jaewon','os373.cn'])),\n                                                  and_(Employee.birth_date.startswith('1955'),\n                                                       Employee.hire_date.endswith('05-30')))).count()\n                                                       '''\n\n'''方法二'''\nfrom sqlalchemy import func\nalchemy_data = session.query(func.count(\"*\")).filter(or_(and_(Employee.last_name.like('N%te_%'),\n                                                       Employee.first_name.in_(['Jaewon','os373.cn'])),\n                                                  and_(Employee.birth_date.startswith('1955'),\n                                                       Employee.hire_date.endswith('05-30')))).scalar()\n\n'''比较两个结果，应该是True'''\nprint(sql_data, alchemy_data)\nprint('第八例结果是：{}'.format(operator.eq(sql_data, alchemy_data)))\n\n'''-------------------------------------------------------------------------------------------------'''\n\n'''-------------------------------------------第九例--------------------------------------------------\n    功能说明：\n    使用两个及以上模糊参数对 employees 表进行查询，查询字段 last_name 近似于 'N%te_%'，\n    并且字段 first_name 在 ('Jaewon', 'os373.cn') 里的员工信息，或者是，\n    字段 birth_date 是以 1955 开头，且字段 hire_date 是以 05-30 结束的员工信息，\n    并按照字段 last_name 进行排序。\n    结果是： 返回参数对应的所有数据！所有数据！值为一个列表。\n    提示：\n        1、由于 MySQL 5.7 中的 sql_mode 设置有 only_full_group_by，因此要求 group by 的使用方法像 oracle \n        一样，必须得把要查询出的字段都罗列在 group by 语句之后，聚合函数除外。按照最靠前的字段来进行排序。\n'''\n\n'''使用 sql 语句方式进行查询'''\nsql = \"\"\"\n        SELECT\n            *\n        FROM\n            employees\n        WHERE\n            (\n                last_name LIKE 'N%te_%'\n                AND first_name IN ('Jaewon', 'os373.cn')\n            )\n        OR (\n            birth_date LIKE '1955%'\n            AND hire_date LIKE '%05-30'\n        )\n        GROUP BY\n            last_name,\n            gender,\n            hire_date,\n            emp_no,\n            birth_date,\n            first_name \n\"\"\"\nsql_data = [(d.emp_no, d.birth_date, d.first_name, d.last_name, d.gender, d.hire_date) for d in session.execute(sql)]\n\n'''使用 sqlalchemy 方式进行查询'''\nfrom sqlalchemy import and_, or_\nalchemy_data = [(d.emp_no, d.birth_date, d.first_name, d.last_name, d.gender, d.hire_date)\n                for d in session.query(Employee).filter(or_(and_(Employee.last_name.like('N%te_%'),\n                                                             Employee.first_name.in_(['Jaewon','os373.cn'])),\n                                                            and_(Employee.birth_date.startswith('1955'),\n                                                                 Employee.hire_date.endswith('05-30')))).\\\n    group_by(Employee.last_name, Employee.gender, Employee.hire_date, Employee.emp_no,\n             Employee.birth_date, Employee.first_name).all()]\n\n'''比较两个结果，应该是True'''\nfor d in zip(sql_data, alchemy_data):\n    print(d)\nprint('第九例结果是：{}'.format(operator.eq(sql_data, alchemy_data)))\n\n'''-------------------------------------------------------------------------------------------------'''\nsession.commit()\nsession.close()\n其实，这是本人维护的一个 github 项目，欢迎大家能够提供有意思的 SQL 语句，我们一起来将它转换为 sqlalachemy 语句。项目地址——https://eastossifrage.github.io/sql_to_sqlalchemy/\n希望你能够喜欢。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "0"}