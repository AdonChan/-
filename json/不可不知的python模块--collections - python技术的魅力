{"title": "不可不知的python模块--collections - python技术的魅力 ", "index": "python", "content": "基本介绍\nPython拥有一些内置的数据类型，比如str, int, list, tuple, dict等， collections模块在这些内置数据类型的基础上，提供了几个额外的数据类型：\n\nnamedtuple(): 生成可以使用名字来访问元素内容的tuple子类\ndeque: 双端队列，可以快速的从另外一侧追加和推出对象\nCounter: 计数器，主要用来计数\nOrderedDict: 有序字典\ndefaultdict: 带有默认值的字典\n\nnamedtuple()\nnamedtuple主要用来产生可以使用名称来访问元素的数据对象，通常用来增强代码的可读性， 在访问一些tuple类型的数据时尤其好用。例子1：\nimport collections\n\ncoordinate = collections.namedtuple('Coordinate', ['x', 'y'])\nco = coordinate(10,20)\nprint(type(co))\nprint(co)\nprint(co.x, co.y)\nprint(co[0], co[1])\nco = coordinate._make([100, 200])\nprint(co)\nprint(co.x, co.y)\nco = co._replace(x=30)\nprint(co)\nprint(co.x, co.y)\n运行：\n<class '__main__.Coordinate'>\nCoordinate(x=10, y=20)\n10 20\n10 20\nCoordinate(x=100, y=200)\n100 200\nCoordinate(x=30, y=200)\n30 200\n例子2：\nwebsites = [\n    ('Sohu', 'http://www.sohu.com/', u'张朝阳'),\n    ('Sina', 'http://www.sina.com.cn/', u'王志东'),\n    ('163', 'http://www.163.com/', u'丁磊')\n]\n\nWebsite = collections.namedtuple('Website', ['name', 'url', 'founder'])\n\nfor website in websites:\n    website = Website._make(website)\n    print(website)\n运行：\nWebsite(name='Sohu', url='http://www.sohu.com/', founder='张朝阳')\nWebsite(name='Sina', url='http://www.sina.com.cn/', founder='王志东')\nWebsite(name='163', url='http://www.163.com/', founder='丁磊')\n例子3（一摞有序的纸牌）：\nimport collections\nCard = collections.namedtuple('Card', ['rank', 'suit'])\n\n\nclass FrenchDeck:\n    ranks = [str(n) for n in range(2, 11)] + list('JQKA')\n    suits = 'spades diamonds clubs hearts'.split()\n\n    def __init__(self):\n        self._cards = [Card(rank, suit) for suit in self.suits for rank in self.ranks]\n\n    def __len__(self):\n        return len(self._cards)\n\n    def __getitem__(self, position):\n        return self._cards[position]\n\nbeer_card = Card('7', 'diamonds')\nprint(beer_card)\n\ndeck = FrenchDeck()\nprint(len(deck))\n\nprint(deck._cards)\nprint(deck[0])\nprint(deck[-1])\n\nfrom random import choice\nprint(choice(deck))\n\nprint(deck[:3])\nprint(deck[12::13])     # 先抽出索引是 12 的那张牌，然后每隔 13 张牌拿 1 张\n\nfor card in deck:\n    print(card)\n\nfor card in reversed(deck):\n    print(card)\ndeque\ndeque其实是 double-ended queue 的缩写，翻译过来就是双端队列，它最大的好处就是实现了从队列 头部快速增加和取出对象: .popleft(), .appendleft() 。\n原生的list也可以从头部添加和取出对象？就像这样：\nl.insert(0, v)\nl.pop(0)\n但是值得注意的是，list对象的这两种用法的时间复杂度是 O(n) ，也就是说随着元素数量的增加耗时呈 线性上升。而使用deque对象则是 O(1) 的复杂度，所以当你的代码有这样的需求的时候， 一定要记得使用deque。\n作为一个双端队列，deque还提供了一些其他的好用方法，比如 rotate 等。\n例子：\n# -*- coding: utf-8 -*-\n\"\"\"\n下面这个是一个有趣的例子，主要使用了deque的rotate方法来实现了一个无限循环\n的加载动画\n\"\"\"\nimport sys\nimport time\nfrom collections import deque\n\nfancy_loading = deque('>--------------------')\n\nwhile True:\n    print '\\r%s' % ''.join(fancy_loading),\n    fancy_loading.rotate(1)\n    sys.stdout.flush()\n    time.sleep(0.08)\n运行:\n# 一个无尽循环的跑马灯\n------------->-------\nCounter\n计数器是一个非常常用的功能需求，collections也贴心的为你提供了这个功能。\n例子：\n# -*- coding: utf-8 -*-\n\"\"\"\n下面这个例子就是使用Counter模块统计一段句子里面所有字符出现次数\n\"\"\"\nfrom collections import Counter\n\ns = '''A Counter is a dict subclass for counting hashable objects. It is an unordered collection where elements are stored as dictionary keys and their counts are stored as dictionary values. Counts are allowed to be any integer value including zero or negative counts. The Counter class is similar to bags or multisets in other languages.'''.lower()\n\nc = Counter(s)\n# 获取出现频率最高的5个字符\nprint c.most_common(5)\n运行:\n[(' ', 54), ('e', 32), ('s', 25), ('a', 24), ('t', 24)]\nOrderedDict\n在Python中，dict这个数据结构由于hash的特性，是无序的，这在有的时候会给我们带来一些麻烦， 幸运的是，collections模块为我们提供了OrderedDict，当你要获得一个有序的字典对象时，用它就对了。\n例子：\n# -*- coding: utf-8 -*-\nfrom collections import OrderedDict\n\nitems = (\n    ('A', 1),\n    ('B', 2),\n    ('C', 3)\n)\n\nregular_dict = dict(items)\nordered_dict = OrderedDict(items)\n\nprint 'Regular Dict:'\nfor k, v in regular_dict.items():\n    print k, v\n\nprint 'Ordered Dict:'\nfor k, v in ordered_dict.items():\n    print k, v\n运行:\nRegular Dict:\nA 1\nC 3\nB 2\nOrdered Dict:\nA 1\nB 2\nC 3\ndefaultdict\n我们都知道，在使用Python原生的数据结构dict的时候，如果用 d[key] 这样的方式访问， 当指定的key不存在时，是会抛出KeyError异常的。\n但是，如果使用defaultdict，只要你传入一个默认的工厂方法，那么请求一个不存在的key时， 便会调用这个工厂方法使用其结果来作为这个key的默认值。\n# -*- coding: utf-8 -*-\nfrom collections import defaultdict\n\nmembers = [\n    # Age, name\n    ['male', 'John'],\n    ['male', 'Jack'],\n    ['female', 'Lily'],\n    ['male', 'Pony'],\n    ['female', 'Lucy'],\n]\n\nresult = defaultdict(list)\nfor sex, name in members:\n    result[sex].append(name)\n\nprint result\n运行:\ndefaultdict(<type 'list'>, {'male': ['John', 'Jack', 'Pony'], 'female': ['Lily', 'Lucy']})\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}