{"title": "[零基础学python]list和str比较 - 易水禾 ", "index": "零基础,python", "content": "list和str两种类型数据，有不少相似的地方，也有很大的区别。本讲对她们做个简要比较，同时也是对前面有关两者的知识复习一下，所谓“温故而知新”。\n\n相同点\n\n都属于序列类型的数据\n\n所谓序列类型的数据，就是说它的每一个元素都可以通过指定一个编号，行话叫做“偏移量”的方式得到，而要想一次得到多个元素，可以使用切片。偏移量从0开始，总元素数减1结束。\n\n例如：\n\n>>> welcome_str = \"Welcome you\"\n>>> welcome_str[0]\n'W'\n>>> welcome_str[1]\n'e'\n>>> welcome_str[len(welcome_str)-1]\n'u'\n>>> welcome_str[:4]\n'Welc'\n>>> a = \"python\"\n>>> a*3\n'pythonpythonpython'\n\n>>> git_list = [\"qiwsir\",\"github\",\"io\"]\n>>> git_list[0]\n'qiwsir'\n>>> git_list[len(git_list)-1]\n'io'\n>>> git_list[0:2]\n['qiwsir', 'github']\n>>> b = ['qiwsir']\n>>> b*7\n['qiwsir', 'qiwsir', 'qiwsir', 'qiwsir', 'qiwsir', 'qiwsir', 'qiwsir']\n\n\n对于此类数据，下面一些操作是类似的：\n\n>>> first = \"hello,world\"\n>>> welcome_str\n'Welcome you'\n>>> first+\",\"+welcome_str   #用+号连接str\n'hello,world,Welcome you'\n>>> welcome_str             #原来的str没有受到影响，即上面的+号连接后从新生成了一个字符串\n'Welcome you'\n>>> first\n'hello,world'\n\n>>> language = ['python']\n>>> git_list\n['qiwsir', 'github', 'io']\n>>> language + git_list     #用+号连接list，得到一个新的list\n['python', 'qiwsir', 'github', 'io']\n>>> git_list\n['qiwsir', 'github', 'io']\n>>> language\n['python']\n\n>>> len(welcome_str)    #得到字符数\n11\n>>> len(git_list)       #得到元素数\n3\n\n\n区别\n\nlist和str的最大区别是：list是原处可以改变的，str则原处不可变。这个怎么理解呢？\n\n首先看对list的这些操作，其特点是在原处将list进行了修改：\n\n>>> git_list\n['qiwsir', 'github', 'io']\n\n>>> git_list.append(\"python\")\n>>> git_list\n['qiwsir', 'github', 'io', 'python']\n\n>>> git_list[1]               \n'github'\n>>> git_list[1] = 'github.com'\n>>> git_list\n['qiwsir', 'github.com', 'io', 'python']\n\n>>> git_list.insert(1,\"algorithm\")\n>>> git_list\n['qiwsir', 'algorithm', 'github.com', 'io', 'python']\n\n>>> git_list.pop()\n'python'\n\n>>> del git_list[1]\n>>> git_list\n['qiwsir', 'github.com', 'io']\n\n\n以上这些操作，如果用在str上，都会报错，比如：\n\n>>> welcome_str\n'Welcome you'\n\n>>> welcome_str[1] = 'E'\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nTypeError: 'str' object does not support item assignment\n\n>>> del welcome_str[1]\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nTypeError: 'str' object doesn't support item deletion\n\n>>> welcome_str.append(\"E\")\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nAttributeError: 'str' object has no attribute 'append'\n\n\n如果要修改一个str，不得不这样。\n\n>>> welcome_str\n'Welcome you'\n>>> welcome_str[0] + \"E\" + welcome_str[2:]  #从新生成一个str\n'WElcome you'\n>>> welcome_str                         #对原来的没有任何影响\n'Welcome you'\n\n\n其实，在这种做法中，相当于从新生成了一个str。\n\n多维list\n\n这个也应该算是两者的区别了，虽然有点牵强。在str中，里面的每个元素只能是字符，在list中，元素可以是任何类型的数据。前面见的多是数字或者字符，其实还可以这样：\n\n>>> matrix = [[1,2,3],[4,5,6],[7,8,9]]\n>>> matrix = [[1,2,3],[4,5,6],[7,8,9]]\n>>> matrix[0][1]\n2\n>>> mult = [[1,2,3],['a','b','c'],'d','e']\n>>> mult\n[[1, 2, 3], ['a', 'b', 'c'], 'd', 'e']\n>>> mult[1][1]\n'b'\n>>> mult[2]\n'd'\n\n\n以上显示了多维list以及访问方式。在多维的情况下，里面的list也跟一个前面元素一样对待。\n\nlist和str转化\n\nstr.split()\n\n这个内置函数实现的是将str转化为list。其中str=\"\"是分隔符。\n\n在看例子之前，请看官在交互模式下做如下操作：\n\n>>>help(str.split)\n\n\n得到了对这个内置函数的完整说明。特别强调：这是一种非常好的学习方法\n\n\n  split(...)\n  S.split([sep [,maxsplit]]) -> list of strings\n\n\n\n  Return a list of the words in the string S, using sep as the delimiter string.  If maxsplit is given, at most maxsplit splits are done. If sep is not specified or is None, any whitespace string is a separator and empty strings are removed from the result.\n\n\n不管是否看懂上面这段话，都可以看例子。还是希望看官能够理解上面的内容。\n\n>>> line = \"Hello.I am qiwsir.Welcome you.\" \n\n>>> line.split(\".\")     #以英文的句点为分隔符，得到list\n['Hello', 'I am qiwsir', 'Welcome you', '']\n\n>>> line.split(\".\",1)   #这个1,就是表达了上文中的：If maxsplit is given, at most maxsplit splits are done.\n['Hello', 'I am qiwsir.Welcome you.']       \n\n>>> name = \"Albert Ainstain\"    #也有可能用空格来做为分隔符\n>>> name.split(\" \")\n['Albert', 'Ainstain']\n\n\n\"[sep]\".join(list)\n\njoin可以说是split的逆运算，举例：\n\n>>> name\n['Albert', 'Ainstain']\n>>> \"\".join(name)       #将list中的元素连接起来，但是没有连接符，表示一个一个紧邻着\n'AlbertAinstain'\n>>> \".\".join(name)      #以英文的句点做为连接分隔符\n'Albert.Ainstain'\n>>> \" \".join(name)      #以空格做为连接的分隔符\n'Albert Ainstain'\n\n\n公告：\n\n有朋友愿意学习python,恭请到我的github上follower我，并且可以给我发邮件，也可以在微博上关注我。更多有关信息请看：易水禾：http://qiwsir.github.io\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}