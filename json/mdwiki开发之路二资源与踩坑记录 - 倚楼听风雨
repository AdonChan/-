{"title": "mdwiki开发之路二资源与踩坑记录 - 倚楼听风雨 ", "index": "markdown,flask,javascript,python", "content": "1、bootstrap代码片段：\n如果你没有艺术细胞，偷懒的方法就是到这上面去找，比如登录框界面等。侧边栏选用：http://www.designerslib.com/b...提到的http://bootsnipp.com/fullscre...。其他一些资源：w3schools-howto一个比较炫的html模板(虽然最后没有采用)bootstrap主题\n2、DIV的CSS height:100%无效的解决办法：\n在css当中增加上：\nhtml, body{ margin:0; height:100%; }\n\n3、Alembic migration失败，Sqlite lack of ALTER support解决办法：\n\n在env.py中设置render_as_batch=True\ncontext.configure(\n    connection=connection,\n    target_metadata=target_metadata,\n    render_as_batch=True\n)\n\n4、markdown扩展:\nhttp://pythonhosted.org/Markd...比较有用的Table of Contents(toc)、CodeHilite(代码高亮)、Meta-Data(文件前面可以添加元数据，比如标题，作者等)、New Line to Break(换行即新行，而不是像原生markdown那样得换两行)、Tables(表格插件)\n5、关于Flask的：\nFlask request，g，session的实现原理深入 Flask 源码理解 ContextFlask Session超时设置默认情况下，flask session在你关闭浏览器的时候失效。你可以通过设置permanent session来改变这一行为。\nfrom datetime import timedelta\nfrom flask import session, app\n\n@app.before_request\ndef make_session_permanent():\n    session.permanent = True\n    app.permanent_session_lifetime = timedelta(minutes=30)\n\n默认情况下，permanent_session_lifetime是31天。\n6、关于SQLAlchemy:\nSQLAlchemy 使用经验SqlAlchemy query many-to-many relationship\nclass Restaurant(db.Model):\n    ...\n\n    dishes = db.relationship('Dish', secondary=restaurant_dish,\n        backref=db.backref('restaurants'))\n\n然后检索所有的dishes for a restaurant, you can do:\nx = Dish.query.filter(Dish.restaurants.any(name=name)).all()\n\n产生类似如下SQL语句：\nSELECT dish.*\nFROM dish\nWHERE\n    EXISTS (\n        SELECT 1\n        FROM restaurant_dish\n        WHERE\n            dish.id = restaurant_dish.dish_id\n            AND EXISTS (\n                SELECT 1\n                FROM restaurant\n                WHERE\n                    restaurant_dish.restaurant_id = restaurant.id\n                    AND restaurant.name = :name\n            )\n    )\n\n\n\n7、解决循环import的问题思路\n\n1.延迟导入(lazy import)即把import语句写在方法或函数里面，将它的作用域限制在局部。这种方法的缺点就是会有性能问题。2.将from xxx import yyy改成import xxx;xxx.yyy来访问的形式3.组织代码出现循环import的问题往往意味着代码的布局有问题，可以合并或者分离竞争资源。合并的话就是都写到一个文件里面去。分离的话就是把需要import的资源提取到一个第三方文件去。总之就是 将循环变成单向。具体解决方案后续文章再贴代码\n8、关于Python的一些：\nGood logging practice in PythonHow do I check if a variable exists?To check the existence of a local variable:\nif 'myVar' in locals():\n  # myVar exists.\n\nTo check the existence of a global variable:\nif 'myVar' in globals():\n  # myVar exists.\n\nTo check if an object has an attribute:\nif hasattr(obj, 'attr_name'):\n  # obj.attr_name exists.\nif('attr_name' in dir(obj)):\n    pass\n  \n还有一个不是很优雅地方案,通过捕获异常的方式：\ntry:\n    myVar\nexcept NameError:\n    myVar = None\n# Now you're free to use myVar without Python complaining.\n9、关于Git与Github\nHow do I delete a Git branch with TortoiseGit为什么给GIT库打TAG不成功\n如何修改github上仓库的项目语言?\n项目放在github，是不是经常被识别为javascript项目？知乎这篇问答给出了答案。问题原因: github 是根据项目里文件数目最多的文件类型,识别项目类型.解决办法:项目根目录添加 .gitattributes 文件, 内容如下 :\n*.js linguist-language=python\n\n作用: 把项目里的 .js 文件, 识别成 python 语言.\n10、关于IDE的：\nIndexing excluded directories in PyCharmpycharm convert tabs to spaces automatically\n11、关于Celery的：\nperiodic task for celery sent but not executed这个由于我没仔细看官方文档，搞了好久。Celery的周期性任务scheduler需要配置beat和运行beat进程,但是仅仅运行beat进程可以吗？不行！我就是这里被坑了。还得同时运行一个worker。也就是说beat和worker都需要通过命令行运行。对于周期性任务beat缺一不可。其他任务可仅运行worker。\n12、在supervisor或gunicorn设置环境变量\n\n如果采用gunicorn命令行的形式：-e选项\ngunicorn -w 4 -b 127.0.0.1:4000 -k gevent -e aliyun_api_key=value,SECRET_KEY=mysecretkey app:app \n\n如果采用gunicorn.conf.py文件的形式：raw_env\nimport multiprocessing\n\nbind = \"127.0.0.1:4000\"\nworkers = multiprocessing.cpu_count() * 2 + 1\nworker_class='gevent'\nproc_name = \"mdwiki\"\nuser = \"nginx\"\nchdir='/opt/mdwiki'\n#daemon=False\n#group = \"nginx\"\nloglevel = \"info\"\n#errorlog = \"/home/myproject/log/gunicorn.log\"\n#accesslog=\nraw_env = [\n   'aliyun_api_key=value',\n   'aliyun_secret_key=value',\n   'MAIL_PASSWORD=value',\n   'SECRET_KEY=mysecretkey',\n]\n#ssl\n#keyfile=\n#certfile=\n#ca_certs=\n如果采用supervisor配置环境变量\n[program:mdwiki]\nenvironment=SECRET_KEY=value,aliyun_api_key=value,aliyun_secret_key=value,MAIL_PASSWORD=value\ncommand=/usr/bin/gunicorn -n mdwiki -w 4 -b 127.0.0.1:4000 -k gevent app:app \ndirectory=/opt/mdwiki\nuser=nginx\nautostart=true\nautorestart=true\nredirect_stderr=true\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}