{"title": "利用PYTHON全自动生成分析报告 - python数据分析 ", "index": "python", "content": "日常工作当中，特别是金融行业当中，有不少人的工作是提取数据，分析数据，得到可视化图表，并加入自已的研究分析结论，最终生成分析报告，并且有不少报告是定期生成，存在不少重复手工劳动。本文通过一个简单实例，介绍python中的一个叫python-doc模块，可以实现全自动获取数据-分析数据-最终生成分析报告的全部操作。\n一、从万得数据库读取数据，保存可视化结果图片\ndef getDataAndSavePic():\n    db_engine = create_engine('oracle://lianghua:lianghua@172.16.10.101:1521/orcl', echo=False)\n    DB_Session = sessionmaker(bind=db_engine)\n    session = DB_Session()\n    s = (\"select OB_OBJECT_NAME_1090 AS STOCKNAME,\"#股票名称\n        \"       F5_1090    AS TRDMARKETNAME,               \"#交易所名称\n        \"       F6_1090  AS PLATENAME,                  \"#版块名称\n        \"       F17_1090 AS TIMETOMARKET,               \"#上市时间\n        \"       F16_1090 AS STOCKCODE                   \"#股票代码\n        \"from wind.tb_object_1090 t where t.f4_1090='A' \")#只取A股数据\n    selectsql = text(s)\n    result = session.execute(selectsql)  # 执行查询语句\n    df_result = pd.DataFrame(result.fetchall())\n    df_result.columns = ['STOCKNAME', 'TRDMARKETNAME', 'PLATENAME', 'TIMETOMARKET','STOCKCODE']  # 列重命名\n    df_result = df_result.set_index('STOCKCODE')\n    session.close()    \n    pie_file_path = r'd:\\temp\\pie.png'  #饼状图图片地址\n    bar_file_path = r'd:\\temp\\bar.png' #柱状图图片地址\n    #绘制饼状图，分别计算主板、中小板和创业板股票的数量占比\n    (\n    df_result.groupby('PLATENAME')\n    .count()\n    .plot.pie(y='STOCKNAME',figsize=(6, 6),autopct='%.2f')\n    )\n    plt.savefig(pie_file_path)\n    #绘制柱状图，获取不同年份上市股票的数量\n    df_result['YEARTOMARKET']=df_result['TIMETOMARKET'].map(lambda x:None if x is None else x[0:4])\n    (\n    df_result.groupby('YEARTOMARKET')\n    .count()\n    .plot.bar(y='STOCKNAME',figsize=(8, 6))\n    )\n    plt.savefig(bar_file_path)\n    return (df_result,pie_file_path,bar_file_path)\n二、自动生成WORD文件，定义文档模板\n\nfrom docx import Document\nfrom docx.shared import Inches\n\ndef gen_docfile(df,pie_file_path,bar_file_path,doc_file_path):\n    '''\n    :param df_result: 数据记录，用于表格显示\n    :param pie_file_path: 饼图文件显示\n    :param bar_file_path: 柱状图文件显示\n    :param doc_file_path: 需要保存的WORK文件路径\n    :return: 无返回值\n    '''\n    # 新建一个文档\n    document = Document()\n    document.add_heading(u' 自动分析报告生成 ', 0)\n    # 添加一个段落\n    p = document.add_paragraph(u'python-doc模块是一个非常实用的用于自动生成报告的文档，可以自动根据读取的数据生成')\n    p.add_run(u'图片').bold = True\n    p.add_run(u' 和 ')\n    p.add_run(u'表格').italic = True\n    document.add_paragraph(u'python-doc模块可以用于：')\n    #无序列表项\n    document.add_paragraph(\n        u'根据程序计算动态结果替换动态内容，如统计数字等', style='ListBullet'\n    )\n    document.add_paragraph(\n        u'可以自动嵌入相应的图片和表格', style='ListBullet'\n    )\n    document.add_paragraph(\n        u'支持各类样式进行调整', style='ListBullet'\n    )\n\n    document.add_paragraph(u'python-doc模块不足的地方：')\n    document.add_paragraph(\n        u'相对简单', style='ListNumber'\n    )\n    document.add_paragraph(\n        u'暂不支持WORD文档模板', style='ListNumber'\n    )\n\n    document.add_heading(u'二、各板块统计', level=1)\n    text=u'沪深两地的上市A股总共有%s只，其中沪市有 %s 只，深市有%s 只,各板块的数据占比如下所示'\\\n         %(str(df['STOCKNAME'].count()),\\\n           str(df[df['TRDMARKETNAME']=='上海']['STOCKNAME'].count()),\\\n           str(df[df['TRDMARKETNAME']=='深圳']['STOCKNAME'].count())\n           )\n    document.add_paragraph(text)\n    # 插入图片，文件名可以作为参数传入，由之前的程序进行传入\n    document.add_picture(pie_file_path, width=Inches(5.0))\n\n    document.add_heading(u'三、上市时间统计', level=1)\n    text=u'\\n上市时间分布图如下所示，可以看出今明两年并不上上市的高峰期'\n    document.add_paragraph(text)\n    # 插入图片，文件名可以作为参数传入，由之前的程序进行传入\n    document.add_picture(bar_file_path, width=Inches(5.0))\n\n\n    document.add_heading(u'四、待上市新股统计', level=1)\n    # 轮询上市时间为空的未上市股票,添加表格\n    text=u'\\n待上市股票列表如下'\n    df['TIMETOMARKET']=df['TIMETOMARKET'].map(lambda x:'99991231' if x is None else x[0:4])\n    df_newstock=df[df['TIMETOMARKET']=='99991231']\n    print df_newstock\n    #插入表格\n    table = document.add_table(rows=len(df_newstock.index)+1, cols=3,style='Table Grid')\n    hdr_cells = table.rows[0].cells\n    hdr_cells[0].text = u'股票名称'\n    hdr_cells[1].text = u'上市交易所'\n    hdr_cells[2].text = u'上市板块'\n    #编历DATAFRAME\n    list_stockname=list(df_newstock['STOCKNAME'])\n    list_TRDMARKETNAME=list(df_newstock['TRDMARKETNAME'])\n    list_PLATENAME=list(df_newstock['PLATENAME'])\n    for i in range(len(df_newstock.index)):\n        row_cells = table.add_row().cells\n        #注意这里PYTHON2的编码问题,多谢stackoverflow,程序员的圣地\n        row_cells[0].text = unicode(list_stockname[i],'utf-8')\n        row_cells[1].text = unicode(list_TRDMARKETNAME[i],'utf-8')\n        row_cells[2].text = unicode(list_PLATENAME[i],'utf-8')\n\n    document.add_page_break()\n    document.save(doc_file_path)\n\n三、前后串在一起，生成最终完整的WORD文件\n#生成图片\n(df,pie_file_path,bar_file_path)=getDataAndSavePic()\n#整合到WORD文档当中\ngen_docfile(df,pie_file_path,bar_file_path,r'd:\\temp\\test.doc')\n\n四、最终效果图\n打开d:temptest.doc,效果如下：\n\n\n\n\n怎么样，是不是很方便？对于图表样式和文档样式，python的matplotlib和python-doc模块都可以修改，使用起来也非常方便。另外更有用的在于通过嵌入网络爬虫，以及对外部的接口，可以快速实现大量手工劳动才能完成的工作，提高工作效率\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "4"}