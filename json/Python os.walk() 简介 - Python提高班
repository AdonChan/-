{"title": "Python os.walk() 简介 - Python提高班 ", "index": "python", "content": "os.walk目录遍历\n\n每个月都有那么几天想划水，又到划水的日子了，今天分享的是刚在处理遍历目录相关用到的相关方法。\nos.walk\n\nos.walk的参数如下:\nos.walk(top, topdown=True, onerror=None, followlinks=False)\n\n其中：\n\ntop是要遍历的目录。\ntopdown是代表要从上而下遍历还是从下往上遍历。\nonerror可以用来设置当便利出现错误的处理函数(该函数接受一个OSError的实例作为参数)，设置为空则不作处理。\nfollowlinks表示是否要跟随目录下的链接去继续遍历，要注意的是，os.walk不会记录已经遍历的目录，所以跟随链接遍历的话有可能一直循环调用下去。\n\nos.walk返回的是一个3个元素的元组 (root, dirs, files) ，分别表示遍历的路径名，该路径下的目录列表和该路径下文件列表。注意目录列表和文件列表不是具体路径，需要具体路径(从root开始的路径)的话可以用 os.path.join(root,dir) 和 os.path.join(root,dir) 。\n例子\n\n假设现在存在如下的文件和目录结构:\n➜  test_os_walk git:(master) ✗ tree\n.\n├── a.py\n├── b.py\n├── c.py\n├── dir1\n│   ├── dir4\n│   │   ├── g.py\n│   │   └── h.py\n│   ├── dirx\n│   │   ├── diry\n│   │   │   └── k.py\n│   │   └── z.py\n│   ├── e.py\n│   ├── f.py\n│   └── g.py\n├── dir2\n│   ├── dira\n│   │   └── dirb\n│   │       └── dirc\n│   │           └── aha.py\n│   ├── k.py\n│   ├── l.py\n│   └── m.py\n└── dir3\n    ├── dir5\n    │   └── z.py\n    ├── x.py\n    └── y.py\n\n10 directories, 17 files\n\n测试topdown\n\n当我用 os.walk 遍历这个目录时，程序和输出如下:\nimport os\n\npath = '/Users/nisen/Projects/python_advanced_class/test/test_os_walk'\n\nfor root, dirs, files in os.walk(path, True):\n    print 'root: %s' % root\n    print 'dirs: %s' % dirs\n    print 'files: %s' % files\n    print ''\n\n结果如下，从root的路径可以看出遍历是自上而下的：\n➜  test git:(master) ✗ python test11.py\nroot: /Users/nisen/Projects/python_advanced_class/test/test_os_walk\ndirs: ['dir1', 'dir2', 'dir3']\nfiles: ['a.py', 'b.py', 'c.py']\n\nroot: /Users/nisen/Projects/python_advanced_class/test/test_os_walk/dir1\ndirs: ['dir4', 'dirx']\nfiles: ['e.py', 'f.py', 'g.py']\n\nroot: /Users/nisen/Projects/python_advanced_class/test/test_os_walk/dir1/dir4\ndirs: []\nfiles: ['g.py', 'h.py']\n\nroot: /Users/nisen/Projects/python_advanced_class/test/test_os_walk/dir1/dirx\ndirs: ['diry']\nfiles: ['z.py']\n\nroot: /Users/nisen/Projects/python_advanced_class/test/test_os_walk/dir1/dirx/diry\ndirs: []\nfiles: ['k.py']\n\nroot: /Users/nisen/Projects/python_advanced_class/test/test_os_walk/dir2\ndirs: ['dira']\nfiles: ['k.py', 'l.py', 'm.py']\n\nroot: /Users/nisen/Projects/python_advanced_class/test/test_os_walk/dir2/dira\ndirs: ['dirb']\nfiles: []\n\nroot: /Users/nisen/Projects/python_advanced_class/test/test_os_walk/dir2/dira/dirb\ndirs: ['dirc']\nfiles: []\n\nroot: /Users/nisen/Projects/python_advanced_class/test/test_os_walk/dir2/dira/dirb/dirc\ndirs: []\nfiles: ['aha.py']\n\nroot: /Users/nisen/Projects/python_advanced_class/test/test_os_walk/dir3\ndirs: ['dir5']\nfiles: ['x.py', 'y.py']\n\nroot: /Users/nisen/Projects/python_advanced_class/test/test_os_walk/dir3/dir5\ndirs: []\nfiles: ['z.py']\n\n而当设置os.walk的topdown为False时，结果如下, 可以看出他是自上而下遍历的：\n➜  test git:(master) ✗ python test11.py\nroot: /Users/nisen/Projects/python_advanced_class/test/test_os_walk/dir1/dir4\ndirs: []\nfiles: ['g.py', 'h.py']\n\nroot: /Users/nisen/Projects/python_advanced_class/test/test_os_walk/dir1/dirx/diry\ndirs: []\nfiles: ['k.py']\n\nroot: /Users/nisen/Projects/python_advanced_class/test/test_os_walk/dir1/dirx\ndirs: ['diry']\nfiles: ['z.py']\n\nroot: /Users/nisen/Projects/python_advanced_class/test/test_os_walk/dir1\ndirs: ['dir4', 'dirx']\nfiles: ['e.py', 'f.py', 'g.py']\n\nroot: /Users/nisen/Projects/python_advanced_class/test/test_os_walk/dir2/dira/dirb/dirc\ndirs: []\nfiles: ['aha.py']\n\nroot: /Users/nisen/Projects/python_advanced_class/test/test_os_walk/dir2/dira/dirb\ndirs: ['dirc']\nfiles: []\n\nroot: /Users/nisen/Projects/python_advanced_class/test/test_os_walk/dir2/dira\ndirs: ['dirb']\nfiles: []\n\nroot: /Users/nisen/Projects/python_advanced_class/test/test_os_walk/dir2\ndirs: ['dira']\nfiles: ['k.py', 'l.py', 'm.py']\n\nroot: /Users/nisen/Projects/python_advanced_class/test/test_os_walk/dir3/dir5\ndirs: []\nfiles: ['z.py']\n\nroot: /Users/nisen/Projects/python_advanced_class/test/test_os_walk/dir3\ndirs: ['dir5']\nfiles: ['x.py', 'y.py']\n\nroot: /Users/nisen/Projects/python_advanced_class/test/test_os_walk\ndirs: ['dir1', 'dir2', 'dir3']\nfiles: ['a.py', 'b.py', 'c.py']\n\n运行时修改遍历目录\n\n当topdown设置为True时，可以在处理时修改返回的 dirs 列表，这样可以遍历下面的目录时会根据修改后的 dirs 来遍历。比如下面的例子，在遍历的时候不把\"CSV\"目录包括在内:\nimport os\nfrom os.path import join, getsize\nfor root, dirs, files in os.walk('python/Lib/email'):\n    print root, \"consumes\",\n    print sum(getsize(join(root, name)) for name in files),\n    print \"bytes in\", len(files), \"non-directory files\"\n    if 'CVS' in dirs:\n        dirs.remove('CVS')  # don't visit CVS directories\n\n参考资料\n\nhttps://docs.python.org/2/lib...\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "2"}