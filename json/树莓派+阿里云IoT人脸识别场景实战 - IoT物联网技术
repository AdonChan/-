{"title": "树莓派+阿里云IoT人脸识别场景实战 - IoT物联网技术 ", "index": "树莓派3,人脸识别,iot,node.js,python", "content": "1.整体架构\n基于阿里云的Serverless架构\n\n运行效果\n\n2.阿里云产品\nIoT平台:https://www.aliyun.com/product/iot\n函数计算:https://www.aliyun.com/product/fc\n表格存储:https://www.aliyun.com/product/ots\nOSS存储:https://www.aliyun.com/product/oss\n人脸识别:https://data.aliyun.com/product/face\n3.设备采购\n\n\n名称\n图片\n购买\n\n\n\n摄像头\n![image.png\nleft\n155x144.9410029498525](https://cdn.nlark.com/yuque/0... \"\")\n淘宝\n\n\n树莓派\n![image.png\nleft\n155x144.82939632545933](https://cdn.nlark.com/yuque/0... \"\")\n淘宝\n\n\n\n4.树莓派设备端开发\n4.1 Enable Camera\n\n4.2 目录结构\n\n在/home/pi目录下创建 iot文件夹，\n在/home/pi/iot创建 photos文件夹，iot.cfg配置文件,iot.py文件\n\n\n4.3 Python3程序\n4.3.1 安装依赖\npip3 install oss2\npip3 install picamera\npip3 install aliyun-python-sdk-iot-client\n4.3.2 iot.cfg配置文件\n[IOT]\nproductKey = xxx\ndeviceName = xxx\ndeviceSecret = xxx\n\n[OSS]\nossAccessKey = xxx\nossAccessKeySecret = xxx\nossEndpoint = xxx\nossBucketId = xxx\n\n4.3.3 iot.py应用程序\n#!/usr/bin/python3\n# -*- coding: utf-8 -*-\nimport oss2\nfrom picamera import PiCamera\nimport time\nimport aliyunsdkiotclient.AliyunIotMqttClient as AliyunIot\nimport configparser\n\nconfig = configparser.ConfigParser()\nconfig.read('iot.cfg')\n\n# IoT\nPRODUCE_KEY = config['IOT']['productKey']\nDEVICE_NAME = config['IOT']['deviceName']\nDEVICE_SECRET = config['IOT']['deviceSecret']\n\nHOST = PRODUCE_KEY + '.iot-as-mqtt.cn-shanghai.aliyuncs.com'\nSUBSCRIBE_TOPIC = \"/\" + PRODUCE_KEY + \"/\" + DEVICE_NAME + \"/control\";\n# oss\nOSS_AK = config['OSS']['ossAccessKey']\nOSS_AK_SECRET = config['OSS']['ossAccessKeySecret']\nOSS_ENDPOINT = config['OSS']['ossEndpoint']\nOSS_BUCKET_ID = config['OSS']['ossBucketId']\n\nauth = oss2.Auth(OSS_AK, OSS_AK_SECRET)\nbucket = oss2.Bucket(auth, OSS_ENDPOINT, OSS_BUCKET_ID)\n\ncamera = PiCamera()\ncamera.resolution = (720,480)\n\n# Take a photo first, then upload photo to oss\ndef take_photo():\n    ticks = int(time.time())\n    fileName = 'raspi%s.jpg' % ticks\n    filePath = '/home/pi/iot/photos/%s' % fileName\n    # take a photo\n    camera.capture(filePath)\n    # upload to oss\n    bucket.put_object_from_file('piPhotos/'+fileName, filePath)\n\n\ndef on_connect(client, userdata, flags, rc):\n    print('subscribe '+SUBSCRIBE_TOPIC)\n    client.subscribe(topic=SUBSCRIBE_TOPIC)\n\n\ndef on_message(client, userdata, msg):\n    print('receive message topic :'+ msg.topic)\n    print(str(msg.payload))\n    take_photo()\n\n\nif __name__ == '__main__':\n    client = AliyunIot.getAliyunIotMqttClient(PRODUCE_KEY,DEVICE_NAME, DEVICE_SECRET, secure_mode=3)\n    client.on_connect = on_connect\n    client.on_message = on_message\n    client.connect(host=HOST, port=1883, keepalive=60)\n    # loop\n    client.loop_forever()\n\n5.函数计算开发\n5.1 index.js应用程序\nconst request = require('request');\nconst url = require('url');\nconst crypto = require('crypto');\nconst TableStore = require('tablestore');\nconst co = require('co');\nconst RPCClient = require('@alicloud/pop-core').RPCClient;\n\nconst config = require(\"./config\");\n\n//iot client\nconst iotClient = new RPCClient({\n    accessKeyId: config.accessKeyId,\n    secretAccessKey: config.secretAccessKey,\n    endpoint: config.iotEndpoint,\n    apiVersion: config.iotApiVersion\n});\n//ots client\nconst otsClient = new TableStore.Client({\n    accessKeyId: config.accessKeyId,\n    secretAccessKey: config.secretAccessKey,\n    endpoint: config.otsEndpoint,\n    instancename: config.otsInstance,\n    maxRetries: 20\n});\n\nconst options = {\n    url: config.dtplusUrl,\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Content-type': 'application/json'\n    }\n};\n\nmodule.exports.handler = function(event, context, callback) {\n\n    var eventJson = JSON.parse(event.toString());\n\n    try {\n        var imgUrl = config.ossEndpoint + eventJson.events[0].oss.object.key;\n\n        options.body = JSON.stringify({ type: 0, image_url: imgUrl });\n        options.headers.Date = new Date().toUTCString();\n        options.headers.Authorization = makeDataplusSignature(options);\n\n        request.post(options, function(error, response, body) {\n\n            console.log('face/attribute response body' + body)\n            const msg = parseBody(imgUrl, body)\n            //\n            saveToOTS(msg, callback);\n\n        });\n    } catch (err) {\n        callback(null, err);\n    }\n};\n\nparseBody = function(imgUrl, body) {\n\n    body = JSON.parse(body);\n    //face_rect [left, top, width, height],\n    const idx = parseInt(10 * Math.random() % 4);\n    const age = (parseInt(body.age[0])) + \"岁\";\n    const expression = (body.expression[0] == \"1\") ? config.happy[idx] : config.normal[idx];\n    const gender = (body.gender[0] == \"1\") ? \"帅哥\" : \"靓女\";\n    const glass = (body.glass[0] == \"1\") ? \"戴眼镜\" : \"火眼金睛\";\n\n    return {\n        'imgUrl': imgUrl,\n        'gender': gender,\n        'faceRect': body.face_rect.join(','),\n        'glass': glass,\n        'age': age,\n        'expression': expression\n    };\n}\n\n//pub msg to WebApp by IoT\niotPubToWeb = function(payload, cb) {\n    co(function*() {\n        try {\n            //创建设备\n            var iotResponse = yield iotClient.request('Pub', {\n                ProductKey: config.productKey,\n                TopicFullName: config.topicFullName,\n                MessageContent: new Buffer(JSON.stringify(payload)).toString('base64'),\n                Qos: 0\n            });\n        } catch (err) {\n            console.log('iotPubToWeb err' + JSON.stringify(err))\n        }\n\n        cb(null, payload);\n    });\n}\n\nsaveToOTS = function(msg, cb) {\n\n    var ots_data = {\n        tableName: config.tableName,\n        condition: new TableStore.Condition(TableStore.RowExistenceExpectation.IGNORE, null),\n\n        primaryKey: [{ deviceId: \"androidPhoto\" }, { id: TableStore.PK_AUTO_INCR }],\n\n        attributeColumns: [\n            { 'imgUrl': msg.imgUrl },\n            { 'gender': msg.gender },\n            { 'faceRect': msg.faceRect },\n            { 'glass': msg.glass },\n            { 'age': msg.age },\n            { 'expression': msg.expression }\n        ],\n\n        returnContent: { returnType: TableStore.ReturnType.Primarykey }\n    }\n\n    otsClient.putRow(ots_data, function(err, data) {\n\n        iotPubToWeb(msg, cb);\n    });\n}\n\nmakeDataplusSignature = function(options) {\n\n    const md5Body = crypto.createHash('md5').update(new Buffer(options.body)).digest('base64');\n\n    const stringToSign = \"POST\\napplication/json\\n\" + md5Body + \"\\napplication/json\\n\" + options.headers.Date + \"\\n/face/attribute\"\n    // step2: 加密 [Signature = Base64( HMAC-SHA1( AccessSecret, UTF-8-Encoding-Of(StringToSign) ) )]\n    const signature = crypto.createHmac('sha1', config.secretAccessKey).update(stringToSign).digest('base64');\n\n    return \"Dataplus \" + config.accessKeyId + \":\" + signature;\n}\n5.2 config.js配置文件\nmodule.exports = {\n    accessKeyId: '账号ak',\n    secretAccessKey: '账号ak secret',\n    iotEndpoint: 'https://iot.cn-shanghai.aliyuncs.com',\n    iotApiVersion: '2018-01-20',\n    productKey: 'web大屏产品pk',\n    topicFullName: 'web大屏订阅识别结果的topic',\n\n//可选，如果不保存结果，不需要ots\n    otsEndpoint: 'ots接入点',\n    otsInstance: 'ots实例',\n    tableName: 'ots结果存储表',\n}\n6. Web端App开发\n<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset=\"UTF-8\">\n    <title>阿里云IoT</title>\n    <style type=\"text/css\">\n    body {\n        line-height: 1.6;\n        font-family: Arial, Helvetica, sans-serif;\n        margin: 0;\n        padding: 0;\n        background: url(http://iot-face.oss-cn-shanghai.aliyuncs.com/iot-face-yq.png) no-repeat;\n        background-color: #202124;\n    }\n\n    .face-msg {\n        display: inline;\n        font-size: 32px;\n        color: #5FFFF8;\n        padding: 30px 160px 0px 60px;\n    }\n    </style>\n</head>\n\n<body>\n    <div style=\"padding: 190px 10px 0px 360px;\">\n        <div class=\"face-msg\" id='glass' style=\"color: #5FFFF8\"></div>\n        <div class=\"face-msg\" id='gender' style=\"color: #FF5FE5\"></div>\n        <div class=\"face-msg\" id='age' style=\"color: #FFDD5F\"></div>\n        <div class=\"face-msg\" id='expression' style=\"color: #FC4D4D\"></div>\n    </div>\n    <!-- -->\n    <div style=\"position: relative;padding: 145px 10px 0px 165px;\">\n        <div style=\"position: absolute;\">\n            <canvas id=\"myCanvas\" width=\"720px\" height=\"480px\"></canvas>\n        </div>\n        <img id='imageUrl' src=\"\" width=\"720px\" height=\"480px\" />\n    </div>\n    <script type=\"text/javascript\" src=\"http://iot-face.oss-cn-shanghai.aliyuncs.com/zepto.min.js\"></script>\n    <script src=\"http://iot-face.oss-cn-shanghai.aliyuncs.com/mqttws31.min.js\" type=\"text/javascript\"></script>\n    <script type=\"text/javascript\">\n\n    $(document).ready(function() {\n\n        initMqtt();\n    });\n\n    var client;\n\n    function initMqtt() {\n        //模拟设备参数\n        var mqttClientId = Math.random().toString(36).substr(2);\n        client = new Paho.MQTT.Client(\"public.iot-as-mqtt.cn-shanghai.aliyuncs.com\", 443, mqttClientId);\n\n        // set callback handlers\n        var options = {\n            useSSL: false,\n            userName: '替换iotId',\n            password: '替换iot token',\n            keepAliveInterval: 60,\n            onSuccess: onConnect,\n            onFailure: function(e) {\n                console.log(e);\n            }\n        };\n\n        client.onConnectionLost = onConnectionLost;\n        client.onMessageDelivered = onMessageDelivered;\n        client.onMessageArrived = onMessageArrived;\n\n        // connect the client\n        client.connect(options);\n    }\n\n    // called when the client connects\n    function onConnect() {\n        // Once a connection has been made, make a subscription\n        client.subscribe(\"替换订阅数据更新topic\");\n    }\n\n    // called when the client loses its connection\n    function onConnectionLost(responseObject) {\n        if (responseObject.errorCode !== 0) {\n            console.error(\"onConnectionLost:\", responseObject);\n        }\n    }\n\n    function onMessageArrived(message) {\n        fillData(JSON.parse(message.payloadString))\n    }\n\n    function onMessageDelivered(message) {\n        console.log(\"onMessageDelivered: [\" + message.destinationName + \"] --- \" + message.payloadString);\n    }\n\n    function fillData(data) {\n\n        $(\"#age\").html(data.age);\n        $(\"#expression\").html(data.expression);\n        $(\"#gender\").html(data.gender);\n        $(\"#glass\").html(data.glass);\n\n        $(\"#imageUrl\").attr(\"src\", data.imgUrl);\n\n        var rect = data.faceRect.split(\",\"); //\"270,22,202,287\"\n\n        var canvas = document.getElementById(\"myCanvas\");\n        var ctx = canvas.getContext(\"2d\");\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.strokeStyle = '#03A9F4';\n        ctx.lineWidth = 2;\n\n        ctx.beginPath();\n        ctx.rect(rect[0], rect[1], rect[2], rect[3]);\n        ctx.stroke();\n    };\n    </script>\n</body>\n\n</html>\n7. 拍照指令触发器\n/**\n * package.json 添加依赖：\"@alicloud/pop-core\": \"1.5.2\"\n */\nconst co = require('co');\nconst RPCClient = require('@alicloud/pop-core').RPCClient;\n\nconst options = {\n    accessKey: \"替换ak\",\n    accessKeySecret: \"替换ak Secret\",\n};\n\n//1.初始化client\nconst client = new RPCClient({\n    accessKeyId: options.accessKey,\n    secretAccessKey: options.accessKeySecret,\n    endpoint: 'https://iot.cn-shanghai.aliyuncs.com',\n    apiVersion: '2018-01-20'\n});\n\nconst params = {\n    ProductKey: \"a1p35XsaOS7\",\n    TopicFullName: \"相机指令topic\",\n    MessageContent: new Buffer('{\"action\":\"takephoto\"}').toString('base64'),\n    Qos: \"0\"\n};\n\nco(function*() {\n    try {\n        //3.发起API调用\n        const response = yield client.request('Pub', params);\n        console.log(JSON.stringify(response));\n    } catch (err) {\n        console.log(err);\n    }\n});\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}