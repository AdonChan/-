{"title": "pycharm 快捷键整理及一些常用设置 - BigJeff ", "index": "python", "content": "pycharm快捷键及一些常用设置\n1、编辑（Editing）\nCtrl + Space 基本的代码完成（类、方法、属性）Ctrl + Alt + Space 快速导入任意类Ctrl + Shift + Enter 语句完成Ctrl + P 参数信息（在方法中调用参数）Ctrl + Q 快速查看文档Shift + F1 外部文档Ctrl + 鼠标 简介Ctrl + F1 显示错误描述或警告信息Alt + Insert 自动生成代码Ctrl + O 重新方法Ctrl + Alt + T 选中Ctrl + / 行注释Ctrl + Shift + / 块注释Ctrl + W 选中增加的代码块Ctrl + Shift + W 回到之前状态Ctrl + Shift + ]/[ 选定代码块结束、开始Alt + Enter 快速修正Ctrl + Alt + L 代码格式化Ctrl + Alt + O 优化导入Ctrl + Alt + I 自动缩进Tab / Shift + Tab 缩进、不缩进当前行Ctrl+X/Shift+Delete 剪切当前行或选定的代码块到剪贴板Ctrl+C/Ctrl+Insert 复制当前行或选定的代码块到剪贴板Ctrl+V/Shift+Insert 从剪贴板粘贴Ctrl + Shift + V 从最近的缓冲区粘贴Ctrl + D 复制选定的区域或行Ctrl + Y 删除选定的行Ctrl + Shift + J 添加智能线Ctrl + Enter 智能线切割Shift + Enter 另起一行Ctrl + Shift + U 在选定的区域或代码块间切换Ctrl + Delete 删除到字符结束Ctrl + Backspace 删除到字符开始Ctrl + Numpad+/- 展开折叠代码块Ctrl + Numpad+ 全部展开Ctrl + Numpad- 全部折叠Ctrl + F4 关闭运行的选项卡\n2、查找/替换(Search/Replace)F3 下一个Shift + F3 前一个Ctrl + R 替换Ctrl + Shift + F 全局查找Ctrl + Shift + R 全局替换\n3、运行(Running)Alt + Shift + F10 运行模式配置Alt + Shift + F9 调试模式配置Shift + F10 运行Shift + F9 调试Ctrl + Shift + F10 运行编辑器配置Ctrl + Alt + R 运行manage.py任务\n4、调试(Debugging)F8 跳过F7 进入Shift + F8 退出Alt + F9 运行游标Alt + F8 验证表达式Ctrl + Alt + F8 快速验证表达式F9 恢复程序Ctrl + F8 断点开关Ctrl + Shift + F8 查看断点\n5、导航(Navigation)Ctrl + N 跳转到类Ctrl + Shift + N 跳转到符号Alt + Right/Left 跳转到下一个、前一个编辑的选项卡F12 回到先前的工具窗口Esc 从工具窗口回到编辑窗口Shift + Esc 隐藏运行的、最近运行的窗口Ctrl + Shift + F4 关闭主动运行的选项卡Ctrl + G 查看当前行号、字符号Ctrl + E 当前文件弹出Ctrl+Alt+Left/Right 后退、前进Ctrl+Shift+Backspace 导航到最近编辑区域Alt + F1 查找当前文件或标识Ctrl+B / Ctrl+Click 跳转到声明Ctrl + Alt + B 跳转到实现Ctrl + Shift + I查看快速定义Ctrl + Shift + B跳转到类型声明Ctrl + U跳转到父方法、父类Alt + Up/Down跳转到上一个、下一个方法Ctrl + ]/[跳转到代码块结束、开始Ctrl + F12弹出文件结构Ctrl + H类型层次结构Ctrl + Shift + H方法层次结构Ctrl + Alt + H调用层次结构F2 / Shift + F2下一条、前一条高亮的错误F4 / Ctrl + Enter编辑资源、查看资源Alt + Home显示导航条F11书签开关Ctrl + Shift + F11书签助记开关Ctrl + #[0-9]跳转到标识的书签Shift + F11显示书签\n6、搜索相关(Usage Search)Alt + F7/Ctrl + F7文件中查询用法Ctrl + Shift + F7文件中用法高亮显示Ctrl + Alt + F7显示用法\n7、重构(Refactoring)F5复制F6剪切Alt + Delete安全删除Shift + F6重命名Ctrl + F6更改签名Ctrl + Alt + N内联Ctrl + Alt + M提取方法Ctrl + Alt + V提取属性Ctrl + Alt + F提取字段Ctrl + Alt + C提取常量Ctrl + Alt + P提取参数\n8、控制VCS/Local HistoryCtrl + K提交项目Ctrl + T更新项目Alt + Shift + C查看最近的变化Alt + BackQuote(’)VCS快速弹出\n9、模版(Live Templates)Ctrl + Alt + J当前行使用模版Ctrl +Ｊ插入模版\n10、基本(General)Alt + #[0-9]打开相应的工具窗口Ctrl + Alt + Y同步Ctrl + Shift + F12最大化编辑开关Alt + Shift + F添加到最喜欢Alt + Shift + I根据配置检查当前文件Ctrl + BackQuote(’)快速切换当前计划Ctrl + Alt + S　打开设置页Ctrl + Shift + A查找编辑器里所有的动作Ctrl + Tab在窗口间进行切换\n一些常用设置：\n\npycharm默认是自动保存的，习惯自己按ctrl + s 的可以进行如下设置：\nfile -> Setting -> General -> Synchronization -> Save files on frame deactivation 和 Save files automatically if application is idle for .. sec 的勾去掉\nfile ->Setting -> Editor -> Editor Tabs -> Mark modified tabs with asterisk 打上勾\nAlt + Enter: 自动添加包\n对于常用的快捷键，可以设置为visual studio(eclipse...)一样的：\n-> Setting -> Keymap -> Keymaps -> vuisual studio -> Apply\nPycharm中默认是不能用Ctrl+滚轮改变字体大小的，可以在file -> Setting ->Editor-〉Mouse中设置\n要设置Pycharm的字体，要先在file -> Setting ->Editor-〉Editor中选择一种风格并保存，然后才可以改变\n在setting中搜索theme可以改变主题，所有配色统一改变\n\n补充:1、编辑（Editing）\nCtrl + Space    基本的代码完成（类、方法、属性）\nCtrl + Alt + Space  快速导入任意类\nCtrl + Shift + Enter    语句完成\nCtrl + P    参数信息（在方法中调用参数）\nCtrl + Q    快速查看文档\nShift + F1    外部文档\nCtrl + Shift + Z --> Redo 重做\nCtrl + 鼠标    简介\nCtrl + F1    显示错误描述或警告信息\nAlt + Insert    自动生成代码\nCtrl + O    重新方法\nCtrl + Alt + T    选中\nCtrl + /    行注释\nCtrl + Shift + /    块注释\nCtrl + W    选中增加的代码块\nCtrl + Shift + W    回到之前状态\nCtrl + Shift + ]/[     选定代码块结束、开始\nAlt + Enter    快速修正\nCtrl + Alt + L     代码格式化\nCtrl + Alt + O    优化导入\nCtrl + Alt + I    自动缩进\nTab / Shift + Tab  缩进、不缩进当前行\nCtrl+X/Shift+Delete    剪切当前行或选定的代码块到剪贴板\nCtrl+C/Ctrl+Insert    复制当前行或选定的代码块到剪贴板\nCtrl+V/Shift+Insert    从剪贴板粘贴\nCtrl + Shift + V    从最近的缓冲区粘贴\nCtrl + D  复制选定的区域或行\nCtrl + Y    删除选定的行\nCtrl + Shift + J  添加智能线\nCtrl + Enter   智能线切割\nShift + Enter    另起一行\nCtrl + Shift + U  在选定的区域或代码块间切换\nCtrl + Delete   删除到字符结束\nCtrl + Backspace   删除到字符开始\nCtrl + Numpad+/-   展开/折叠代码块（当前位置的：函数，注释等）\nCtrl + shift + Numpad+/-   展开/折叠所有代码块\nCtrl + F4   关闭运行的选项卡\n2、查找/替换(Search/Replace)\nF3   下一个\nShift + F3   前一个\nCtrl + R   替换\nCtrl + Shift + F   全局查找\nCtrl + Shift + R   全局替换\n3、运行(Running)\nAlt + Shift + F10   运行模式配置\nAlt + Shift + F9    调试模式配置\nShift + F10    运行\nShift + F9   调试\nCtrl + Shift + F10   运行编辑器配置\nCtrl + Alt + R   运行manage.py任务\n4、调试(Debugging)\nF8   跳过\nF7   进入\nShift + F8   退出\nAlt + F9    运行游标\nAlt + F8    验证表达式\nCtrl + Alt + F8   快速验证表达式\nF9    恢复程序\nCtrl + F8   断点开关\nCtrl + Shift + F8   查看断点\n5、导航(Navigation)\nCtrl + N    跳转到类\nCtrl + Shift + N    跳转到符号\nAlt + Right/Left    跳转到下一个、前一个编辑的选项卡\nF12    回到先前的工具窗口\nEsc    从工具窗口回到编辑窗口\nShift + Esc   隐藏运行的、最近运行的窗口\nCtrl + Shift + F4   关闭主动运行的选项卡\nCtrl + G    查看当前行号、字符号\nCtrl + E   当前文件弹出\nCtrl+Alt+Left/Right   后退、前进\nCtrl+Shift+Backspace    导航到最近编辑区域\nAlt + F1   查找当前文件或标识\nCtrl+B / Ctrl+Click    跳转到声明\nCtrl + Alt + B    跳转到实现\nCtrl + Shift + I查看快速定义\nCtrl + Shift + B跳转到类型声明\nCtrl + U跳转到父方法、父类\nAlt + Up/Down跳转到上一个、下一个方法\nCtrl + ]/[跳转到代码块结束、开始\nCtrl + F12弹出文件结构\nCtrl + H类型层次结构\nCtrl + Shift + H方法层次结构\nCtrl + Alt + H调用层次结构\nF2 / Shift + F2下一条、前一条高亮的错误\nF4 / Ctrl + Enter编辑资源、查看资源\nAlt + Home显示导航条F11书签开关\nCtrl + Shift + F11书签助记开关\nCtrl + #[0-9]跳转到标识的书签\nShift + F11显示书签\n6、搜索相关(Usage Search)\nAlt + F7/Ctrl + F7文件中查询用法\nCtrl + Shift + F7文件中用法高亮显示\nCtrl + Alt + F7显示用法\n7、重构(Refactoring)\nF5复制F6剪切\nAlt + Delete安全删除\nShift + F6重命名\nCtrl + F6更改签名\nCtrl + Alt + N内联\nCtrl + Alt + M提取方法\nCtrl + Alt + V提取属性\nCtrl + Alt + F提取字段\nCtrl + Alt + C提取常量\nCtrl + Alt + P提取参数\n8、控制VCS/Local History\nCtrl + K提交项目\nCtrl + T更新项目\nAlt + Shift + C查看最近的变化\nAlt + BackQuote(’)VCS快速弹出\n9、模版(Live Templates)\nCtrl + Alt + J当前行使用模版\nCtrl +Ｊ插入模版\n10、基本(General)\nAlt + #[0-9]打开相应的工具窗口\nCtrl + Alt + Y同步\nCtrl + Shift + F12最大化编辑开关\nAlt + Shift + F添加到最喜欢\nAlt + Shift + I根据配置检查当前文件\nCtrl + BackQuote(’)快速切换当前计划\nCtrl + Alt + S　打开设置页\nCtrl + Shift + A查找编辑器里所有的动作\nCtrl + Tab在窗口间进行切换\npycharm常用设置：\nfile -> Setting ->Editor\n设置Python自动引入包，要先在>general > autoimport-> python :show popup\n快捷键：Alt + Enter: 自动添加包\n“代码自动完成”时间延时设置\nCode Completion   -> Auto code completion in (ms):0  -> Autopopup in (ms):500\n\nPycharm中默认是不能用Ctrl+滚轮改变字体大小的，可以在〉Mouse中设置\n显示“行号”与“空白字符”\n\nAppearance  -> 勾选“Show line numbers”、“Show whitespaces”、“Show method separators”\n设置编辑器“颜色与字体”主题\nColors & Fonts -> Scheme name -> 选择\"monokai\"“Darcula”\n说明：先选择“monokai”，再“Save As”为\"monokai-pipi\"，因为默认的主题是“只读的”，一些字体大小颜色什么的都不能修改，拷贝一份后方可修改！\n修改字体大小\nColors & Fonts -> Font -> Size -> 设置为“14”\n设置缩进符为制表符“Tab”\nFile -> Default Settings -> Code Style\n-> General -> 勾选“Use tab character”\n-> Python -> 勾选“Use tab character”\n-> 其他的语言代码同理设置\n去掉默认折叠\nCode Folding -> Collapse by default -> 全部去掉勾选\npycharm默认是自动保存的，习惯自己按ctrl + s  的可以进行如下设置：\n\nGeneral -> Synchronization -> Save files on frame deactivation  和 Save files automatically if application is idle for .. sec 的勾去掉\nEditor Tabs -> Mark modified tabs with asterisk 打上勾\n\n9.>file and code template>python scripts\n!/usr/bin/env python\n-- coding: utf-8 --\n\"\"\"\ntitle = '$Package_name'\nauthor = '$USER'\nmtime = '$DATE'\ncode is far away from bugs with the god animal protecting\nI love animals. They taste delicious.\n┏┓      ┏┓\n┏┛┻━━━┛┻┓\n┃      ☃      ┃\n┃  ┳┛  ┗┳  ┃\n┃      ┻      ┃\n┗━┓      ┏━┛\n┃      ┗━━━┓\n┃  神兽保佑    ┣┓\n┃　永无BUG！   ┏┛\n┗┓┓┏━┳┓┏┛\n┃┫┫  ┃┫┫\n┗┻┛  ┗┻┛\n\"\"\"\n10 python文件默认编码\nFile Encodings> IDE Encoding: UTF-8;Project Encoding: UTF-8;\nFile -> Settings -> appearance\n修改IDE快捷键方案\nKeymap\n1) execute selection in console : add keymap > ctrl + enter\n系统自带了好几种快捷键方案，下拉框中有如“defaul”,“Visual Studio”,在查找Bug时非常有用,“NetBeans 6.5”,“Default for GNOME”等等可选项，\n因为“Eclipse”方案比较大众，个人用的也比较多，最终选择了“Eclipse”。\n还是有几个常用的快捷键跟Eclipse不一样，为了能修改，还得先对Eclipse方案拷贝一份：\n(1).代码提示功能，默认是【Ctrl+空格】，现改为跟Eclipse一样，即【Alt+/】\nMain menu -> code -> Completion -> Basic -> 设置为“Alt+/”\nMain menu -> code -> Completion -> SmartType -> 设置为“Alt+Shift+/”\n不过“Alt+/”默认又被\nMain menu -> code -> Completion -> Basic -> Cyclic Expand Word 占用，先把它删除再说吧（单击右键删除）！\n(2).关闭当前文档，默认是【Ctrl+F4】，现改为跟Eclipse一样，即【Ctrl+W】\nMain menu -> Window -> Active Tool Window -> Close Active Tab -> 设置为 “Ctrl+F4”;\nMain menu -> Window -> Editor -> Close -> 设置为 “Ctrl+W”;\n2.设置IDE皮肤主题\nTheme -> 选择“Alloy.IDEA Theme”\n或者在setting中搜索theme可以改变主题，所有配色统一改变\nFile > settings > build.excution\n1 console > pyconsole\nimportsys# print('Python %s on %s' % (sys.version, sys.platform))sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])importosprint('current workdirectory : ', os.getcwd() )importnumpyasnpimportscipyasspimportmatplotlibasmpl\nFile > settings > Project : initial project\nproject dependencies > LDA > project depends on these projects > 选择sim_cluster就可以在LDA中调用sim_cluster中的包\n[Configure PyCharm]\nPycharm实用功能：\n[PyCharm中的那些实用功能]\npycharm中配置python脚本和console执行路径和当前工作目录\n1 ctrl + shift + f10 / f10 执行python脚本时\n当前工作目录cwd为run/debug configurations 中的working directory\n可在edit configurations > project or defaults中配置\n2python console中执行时\ncwd为File > settings > build.excution > console > pyconsole中的working directory\n并可在其中配置\nhttp://blog.csdn.net/pipisorr...\npycharm中进行python包管理\npycharm中的项目中可以包含package、目录（目录名可以有空格）、等等\n目录的某个包中的某个py文件要调用另一个py文件中的函数，首先要将目录设置为source root，这样才能从包中至上至上正确引入函数，否则怎么引入都出错：\nSystemError: Parent module '' not loaded, cannot perform relative import\nNote:目录 > 右键 > make directory as > source root\n1、编辑（Editing）Ctrl + Space 基本的代码完成（类、方法、属性）Ctrl + Alt + Space 快速导入任意类Ctrl + Shift + Enter 语句完成Ctrl + P 参数信息（在方法中调用参数）Ctrl + Q 快速查看文档Shift + F1 外部文档Ctrl + 鼠标 简介Ctrl + F1 显示错误描述或警告信息Alt + Insert 自动生成代码Ctrl + O 重新方法Ctrl + Alt + T 选中Ctrl + / 行注释Ctrl + Shift + / 块注释Ctrl + W 选中增加的代码块Ctrl + Shift + W 回到之前状态Ctrl + Shift + ]/[ 选定代码块结束、开始Alt + Enter 快速修正Ctrl + Alt + L 代码格式化Ctrl + Alt + O 优化导入Ctrl + Alt + I 自动缩进Tab / Shift + Tab 缩进、不缩进当前行Ctrl+X/Shift+Delete 剪切当前行或选定的代码块到剪贴板Ctrl+C/Ctrl+Insert 复制当前行或选定的代码块到剪贴板Ctrl+V/Shift+Insert 从剪贴板粘贴Ctrl + Shift + V 从最近的缓冲区粘贴Ctrl + D 复制选定的区域或行Ctrl + Y 删除选定的行Ctrl + Shift + J 添加智能线Ctrl + Enter 智能线切割Shift + Enter 另起一行Ctrl + Shift + U 在选定的区域或代码块间切换Ctrl + Delete 删除到字符结束Ctrl + Backspace 删除到字符开始Ctrl + Numpad+/- 展开折叠代码块Ctrl + Numpad+ 全部展开Ctrl + Numpad- 全部折叠Ctrl + F4 关闭运行的选项卡\n2、查找/替换(Search/Replace)F3 下一个Shift + F3 前一个Ctrl + R 替换Ctrl + Shift + F 全局查找Ctrl + Shift + R 全局替换\n3、运行(Running)Alt + Shift + F10 运行模式配置Alt + Shift + F9 调试模式配置Shift + F10 运行Shift + F9 调试Ctrl + Shift + F10 运行编辑器配置Ctrl + Alt + R 运行manage.py任务\n4、调试(Debugging)F8 跳过F7 进入Shift + F8 退出Alt + F9 运行游标Alt + F8 验证表达式Ctrl + Alt + F8 快速验证表达式F9 恢复程序Ctrl + F8 断点开关Ctrl + Shift + F8 查看断点\n5、导航(Navigation)Ctrl + N 跳转到类Ctrl + Shift + N 跳转到符号Alt + Right/Left 跳转到下一个、前一个编辑的选项卡F12 回到先前的工具窗口Esc 从工具窗口回到编辑窗口Shift + Esc 隐藏运行的、最近运行的窗口Ctrl + Shift + F4 关闭主动运行的选项卡Ctrl + G 查看当前行号、字符号Ctrl + E 当前文件弹出Ctrl+Alt+Left/Right 后退、前进Ctrl+Shift+Backspace 导航到最近编辑区域Alt + F1 查找当前文件或标识Ctrl+B / Ctrl+Click 跳转到声明Ctrl + Alt + B 跳转到实现Ctrl + Shift + I查看快速定义Ctrl + Shift + B跳转到类型声明Ctrl + U跳转到父方法、父类Alt + Up/Down跳转到上一个、下一个方法Ctrl + ]/[跳转到代码块结束、开始Ctrl + F12弹出文件结构Ctrl + H类型层次结构Ctrl + Shift + H方法层次结构Ctrl + Alt + H调用层次结构F2 / Shift + F2下一条、前一条高亮的错误F4 / Ctrl + Enter编辑资源、查看资源Alt + Home显示导航条F11书签开关Ctrl + Shift + F11书签助记开关Ctrl + #[0-9]跳转到标识的书签Shift + F11显示书签\n6、搜索相关(Usage Search)Alt + F7/Ctrl + F7文件中查询用法Ctrl + Shift + F7文件中用法高亮显示Ctrl + Alt + F7显示用法\n7、重构(Refactoring)F5复制F6剪切Alt + Delete安全删除Shift + F6重命名Ctrl + F6更改签名Ctrl + Alt + N内联Ctrl + Alt + M提取方法Ctrl + Alt + V提取属性Ctrl + Alt + F提取字段Ctrl + Alt + C提取常量Ctrl + Alt + P提取参数\n8、控制VCS/Local HistoryCtrl + K提交项目Ctrl + T更新项目Alt + Shift + C查看最近的变化Alt + BackQuote(’)VCS快速弹出\n9、模版(Live Templates)Ctrl + Alt + J当前行使用模版Ctrl +Ｊ插入模版\n10、基本(General)Alt + #[0-9]打开相应的工具窗口Ctrl + Alt + Y同步Ctrl + Shift + F12最大化编辑开关Alt + Shift + F添加到最喜欢Alt + Shift + I根据配置检查当前文件Ctrl + BackQuote(’)快速切换当前计划Ctrl + Alt + S　打开设置页Ctrl + Shift + A查找编辑器里所有的动作Ctrl + Tab在窗口间进行切换\n实时比较\nPyCharm 对一个文件里你做的改动保持实时的跟踪，通过在编辑器的左侧栏显示一个蓝色的标记。\n这一点非常方便，我之前一直是在Eclipse里面用命令“Compare against HEAD” 来比较一个文件前后的改动。\n在PyCharm中，你可以对你的改动一览无余。同时，点击那个标记，会显示出之前的内容以及一个工具栏：\n你可以很容易地回滚这些改动，在一个详尽的对话框中查看这些改动或是将之前的文本粘贴到剪切板上。\n提交时的比较预览\n在Eclipse 中，当你提交改动时，会有一个提交对话框向你展示将要被提交的文件列表。\n你可以双击其中任意一项来查看改动的对比：这时候，如果你看到代码里一些想修改的地方（比如一个拼错的单词，一段\n遗漏的文档，等等），那可就不爽了：你必须关闭所有的东西（包括带有你精心写好的提交注释的提交框），去找到那处惹人烦的代码，改正，然后从头再来一遍。\nPyCharm 有同样的特性，但是你的改动是可编辑的。我简直不能再去强调可以当场修正那些错误有多么棒啦！\n在提交过程中，我可以很容易地修复像上面那些类似的拼写错误。\n一个额外好处是，无论你因为何种原因关闭了提交对话框，当再次尝试提交时，它会保留你刚才填写的那些提交注释。\n提交时检查\n在提交过程中，我们还可以在实际提交前执行其他一些选项，像“优化导入（排序并移除未使用过的导入）“，检查变动集合中的待完成项等等。\n一个有意思的地方是”执行代码分析“那一项。。。\n代码审查\n你可以让PyCharm在一个文件，目录或整个项目里执行“代码审查”操作。它会在无需实际执行程序的情况下，\n找出存在问题以及相应的改进办法，比如类型检查，可静态的方法，违反代码规范等等问题。\n正如在上一节中解释过的，这也可以在提交时在发生改动的文件中自动完成。这是一个文件一次审查之后的结果：\n对于其中一些审查结果来说，你还可以应用一个修复建议。例如，对于“Function call can be replaced with set literal（）”这一建议，我们可以选择相应的选项来修复。\nPyCharm 会将这句：\nPython\nextensions = set(['.avi', '.mp4', '.mpg', '.mkv'])1extensions = set(['.avi', '.mp4', '.mpg', '.mkv'])自动替换为：\nPython\nextensions = {'.avi', '.mp4', '.mpg', '.mkv'}1extensions = {'.avi', '.mp4', '.mpg', '.mkv'}你可以关闭任何你不希望的审查，包括在项目一级。\n重构\n我一直在试图重命名一个模块，可在菜单项里一直找不到那一项。。。F2也无济于事。\n突然我注意到文件子菜单下面的”重构/重命名“一项，就想。。。会是它吗？果然就是！\n在你重命名一个模块时，PyCharm会询问你是否需要自动修改所有与之关联的项目。有福了！\n还有很多其他的重构项目，但目前为止我还没有机会一一尝试。\n关于过时代码的提示以及改进建议\nPyCharm可以告诉你代码里面过时的结构块，并且提出一些改进建议。比如，我有像下面一段这样的代码：\nPython\nwith nested(open(filename1), open(filename2)) as (f1, f2): <代码块>12with nested(open(filename1), open(filename2)) as (f1, f2): <代码块>PyCharm会明显的标注出nested:\n我用的是Python2.7，事实上你可以使用嵌套上下文管理器，但是，唉，我还得支持python的一些老版本，就保留了nested。\n但PyCharm提醒了我，这个事情本身还是很酷的。\n任务+特性 分支\n如同Eclipse一样（需要Mylin支持），PyCharm也支持基于任务的工作流（包括任务感知的上下文）。\n然而PyCharm本身自带了很多直接可用的连接器（GitHub，Mantis，Jira，Bugzilla，等等）。\n而且，当你开启一项任务时，它会询问你是否想要创建那个任务的一个特性分支，分支的名字可以配置。\n这就避免了必须手动创建一个新的分支，而这个操作确实挺繁琐的（拿到任务的ID，选择名称，等等）。\n这个是加分项。\n快速\n我观察到PyCharm在执行代码的自动完成时扫瞄代码的速度要远快于Eclipse，而且还不打断你当前的工作。\n当你想保存一个文件时，Eclipse会阻止你这么做因为它正在后台执行一个任务，这有多惹人烦。。。\n快速查看文档\n当你把光标挪到一个函数、方法，类或者别的什么上的时候，你会得到一个选项来浏览”快速文档“。看一眼：\n正如你看到的，它会用一种赏心悦目的格式展示方法的文档说明，还从代码使用说明中提示了参数的类型。。。即使该函数没有对应的文档说明，你还是会得到像下面这样的一个说明：\n很好！\nDocutils 支持\nPyCharm 还包括了对于doctils的一流支持，这让它很容易从集成开发环境中直接再生成文档。\n另一方面，它还包括了一个非常好的富文本（译者注：ReST即reStructuredTexteditor）编辑器（比Eclipse的IMHO好用的多）：\n完善的插件系统\n跟据我的使用经验，在Eclipse里面安装插件是件挺痛苦的事情：\n很难找到你想要去的地方（提示: 帮助/安装新软件。。。）；你没有一个单一的索引，所以你得去网上去找那些插件源；系统有时会因为库的依赖问题而崩溃，结果我就没装上那些我想要的插件（工作中还有其他人也同样遇到这个问题，最后不得不放弃）；PyCharm的插件体验则要流畅地多。\n首先，它位于一个你认为它有可能会存在的地方：就在”设置”下面的一项：\n你可以很容易地浏览插件：\n我快速安装了一个标记编辑器（和ReST一样），一个临时存放代码片段的插件，可以让我直接从选择的文本中快速地剪贴，并且预览代码，和SublimeText类似，还用一个漂亮的代码外观。\n文／yido（简书作者）原文链接：http://www.jianshu.com/p/e59f...著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。\n\n                ", "mainLikeNum": ["3 "], "mainBookmarkNum": "8"}