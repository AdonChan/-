{"title": "opencv python 直方图反向投影 - 个人文章 ", "index": "opencv-python,opencv,python", "content": "Histogram - 4 : Histogram Backprojection \n理论\n直方图反向投影用于图像分割或查找图像中感兴趣的对象,简单来说，它会创建一个与输入图像大小相同（单个通道）的图像,其中每个像素对应于属于我们对象该像素的概率.输出图像将使我们感兴趣的对象比其余部分更明显.\n首先，我们创建一个包含我们感兴趣对象的图像的直方图，对象应尽可能填充图像以获得更好的结果，颜色直方图比灰度直方图更受青睐，因为对象的颜色比灰度强度更能定义对象，然后我们将这个直方图“反投影”到我们需要找到对象的测试图像上.\nOpenCV中的反投影\nOpenCV提供了一个内置函数cv.calcBackProject（）。 它的参数与cv.calcHist（）函数几乎相同. 此外，在传递给backproject函数之前，应该对象直方图进行标准化. 它返回概率图像,然后我们将图像与内核卷积并应用阈值.代码：\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\n# roi是我们需要找到的对象或区域\nroi = cv2.imread('img_roi.png')\nhsv = cv2.cvtColor(roi, cv2.COLOR_BGR2HSV)\n\n# target是我们搜索的图像\ntarget = cv2.imread('img.jpg')\nhsvt = cv2.cvtColor(target, cv2.COLOR_BGR2HSV)\n\n# 计算对象的直方图\nroihist = cv2.calcHist([hsv], [0,1], None, [180,256], [0,180,0,256])\n\n# 标准化直方图，并应用投影\ncv2.normalize(roihist, roihist, 0, 255, cv2.NORM_MINMAX)\ndst = cv2.calcBackProject([hsvt], [0,1], roihist, [0,180,0,256], 1)\n\n# 与磁盘内核进行卷积\ndisc = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (5,5))\ncv2.filter2D(dst, -1, disc, dst)\n\n# 阈值、二进制按位和操作\nret, thresh = cv2.threshold(dst, 50, 255, 0)\nthresh = cv2.merge((thresh, thresh, thresh))\nres = cv2.bitwise_and(target, thresh)\n\nres = np.vstack((target, thresh, res))\ncv2.imshow('res', res)\ncv2.waitKey()\n原图：\n感兴趣区域：\n结果：\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}