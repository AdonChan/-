{"title": "史上最全的 Python 3 类型转换指南 - 格物 ", "index": "python", "content": "int\n支持转换为 int 类型的，仅有 float、str、bytes，其他类型均不支持。\nfloat -> int\n会去掉小数点及后面的数值，仅保留整数部分。\nint(-12.94)     # -12\nstr -> int\n如果字符串中有数字(0-9)和正负号(+/-)以外的字符，就会报错。\nint('1209')     # 1209\nint('-12')      # -12\nint('+1008')    # 1008\nbytes -> int\n如果 bytes 中有数字(0-9)和正负号(+/-)以外的字符，就会报错。\nint(b'1209')     # 1209\nint(b'-12')      # -12\nint(b'+1008')    # 1008\nfloat\n支持转换为 float 类型的，仅有 int、str、bytes，其他类型均不支持。\nint -> float\nint 转换为 float 时，会自动给添加一位小数。\nfloat(-1209)     # -1209.0\nstr -> float\n如果字符串含有正负号(+/-)、数字(0-9)和小数点(.)以外的字符，则不支持转换。\nfloat('-1209')          # -1209.0\nfloat('-0120.29023')    # -120.29023\nbytes -> float\n如果 bytes 中含有正负号(+/-)、数字(0-9)和小数点(.)以外的字符，则不支持转换。\nfloat(b'-1209')         # -1209.0\nfloat(b'-0120.29023')   # -120.29023\ncomplex\n仅支持 int、float、str 转换成 complex 类型。\nint -> complex\nint 转换 complex 时，会自动添加虚数部分并以0j表示。\ncomplex(12)         # (12+0j)\nfloat -> complex\nfloat 转换 complex 时，会自动添加虚数部分并以0j表示。\ncomplex(-12.09)     # (-12.09+0j)\nstr -> complex\nstr 转换 complex 时，如果能转换成 int 或 float，则会转换后再转为 complex。如果字符串完全符合 complex 表达式规则，也可以转换为 complex 类型值。\ncomplex('-12.09')       # (-12.09+0j)\ncomplex('-12.0')        # (-12+0j)，去除了小数部分\ncomplex('-12')          # (-12+0j)\ncomplex('-12+9j')       # (-12+9j)\ncomplex('(-12+9j)')     # (-12+9j)\ncomplex('-12.0-2.0j')   # (-12-2j)，去除了小数部分\ncomplex('-12.0-2.09j')  # (-12-2.09j)\ncomplex(b'12')          # 报错，不支持 bytes 转换为 complex\ncomplex('12 + 9j')      # 报错，加号两侧不可有空格\nstr\nstr() 函数可以将任意对象转换为字符串。\nint -> str\nint 转换 str 会直接完全转换。\nstr(12)     # 12\nfloat -> str\nfloat 转换 str 会去除末位为 0 的小数部分。\nstr(-12.90)     # -12.9\ncomplex -> str\ncomplex 转换 str，会先将值转化为标准的 complex 表达式，然后再转换为字符串。\nstr(complex(12 + 9j))   # (12+9j)\nstr(complex(12, 9))     # (12+9j)\nbytes -> str\nbytes 和 str 的转换比较特殊点，在 Python 3.x 中，字符串和字节不再混淆，而是完全不同的数据类型。\n转换为可执行的表达式字符串：\nstr(b'hello world')        # b'hello world'\nstr() 函数指定 encoding 参数，或者使用 bytes.decode() 方法，可以作实际数据的转换：\nb'hello world'.decode()                             # hello world\nstr(b'hello world', encoding='utf-8')               # hello world\nstr(b'\\xe4\\xb8\\xad\\xe5\\x9b\\xbd', encoding='utf-8')  # 中国\nlist -> str\n会先将值格式化为标准的 list 表达式，然后再转换为字符串。\nstr([])                      # []\nstr([1, 2, 3])              # [1, 2, 3]\n''.join(['a', 'b', 'c'])    # abc\ntuple -> str\n会先将值格式化为标准的 tuple 表达式，然后再转换为字符串。\nstr(())                     # ()\nstr((1, 2, 3))              # (1, 2, 3)\n''.join(('a', 'b', 'c'))    # abc\ndict -> str\n会先将值格式化为标准的 dict 表达式，然后再转换为字符串。\nstr({'name': 'hello', 'age': 18})       # {'name': 'hello', 'age': 18}\nstr({})                                 # {}\n''.join({'name': 'hello', 'age': 18})   # nameage\nset -> str\n会先将值格式化为标准的 set 表达式，然后再转换为字符串。\nstr(set({}))                # set()\nstr({1, 2, 3})              # {1, 2, 3}\n''.join({'a', 'b', 'c'})    # abc\n其他类型\n转换内置对象：\nstr(int)                # <class 'int'>，转换内置类\nstr(hex)                # <built-in function hex>，转换内置函数\n转换类实例：\nclass Hello:\n    pass\n\n\nobj = Hello()\n\nprint(str(obj))\n\n# <__main__.Hello object at 0x1071c6630>\n转换函数：\ndef hello():\n    pass\n\n\nprint(str(hello))\n\n# <function hello at 0x104d5a048>\nbytes\n仅支持 str 转换为 bytes 类型。\n'中国'.encode()                   # b'\\xe4\\xb8\\xad\\xe5\\x9b\\xbd'\n\nbytes('中国', encoding='utf-8')   # b'\\xe4\\xb8\\xad\\xe5\\x9b\\xbd'\nlist\n支持转换为 list 的类型，只能是序列，比如：str、tuple、dict、set等。\nstr -> list\nlist('123abc')      # ['1', '2', '3', 'a', 'b', 'c']\nbytes -> list\nbytes 转换列表，会取每个字节的 ASCII 十进制值并组合成列表\nlist(b'hello')      # [104, 101, 108, 108, 111]\ntuple -> list\ntuple 转换为 list 比较简单。\nlist((1, 2, 3))     # [1, 2, 3]\ndict -> list\n字典转换列表，会取键名作为列表的值。\nlist({'name': 'hello', 'age': 18})  # ['name', 'age']\nset -> list\n集合转换列表，会先去重为标准的集合数值，然后再转换。\nlist({1, 2, 3, 3, 2, 1})    # [1, 2, 3]\ntuple\n与列表一样，支持转换为 tuple 的类型，只能是序列。\nstr -> tuple\ntuple('中国人')    # ('中', '国', '人')\nbytes -> tuple\nbytes 转换元组，会取每个字节的 ASCII 十进制值并组合成列表。\ntuple(b'hello')     # (104, 101, 108, 108, 111)\nlist -> tuple\ntuple([1, 2, 3])    # (1, 2, 3)\ndict -> tuple\ntuple({'name': 'hello', 'age': 18})     # ('name', 'age')\nset -> tuple\ntuple({1, 2, 3, 3, 2, 1})       # (1, 2, 3)\ndict\nstr -> dict\n\n\n使用 json 模块\n使用 json 模块转换 JSON 字符串为字典时，需要求完全符合 JSON 规范，尤其注意键和值只能由单引号包裹，否则会报错。\nimport json\n\nuser_info = '{\"name\": \"john\", \"gender\": \"male\", \"age\": 28}'\nprint(json.loads(user_info))\n\n# {'name': 'john', 'gender': 'male', 'age': 28}\n\n\n使用 eval 函数\n因为 eval 函数能执行任何符合语法的表达式字符串，所以存在严重的安全问题，不建议。\nuser_info = \"{'name': 'john', 'gender': 'male', 'age': 28}\"\nprint(eval(user_info))\n\n# {'name': 'john', 'gender': 'male', 'age': 28}\n\n\n使用 ast.literal_eval 方法\n使用 ast.literal_eval 进行转换既不存在使用 json 进行转换的问题，也不存在使用 eval 进行转换的 安全性问题，因此推荐使用 ast.literal_eval。\nimport ast\n\nuser_info = \"{'name': 'john', 'gender': 'male', 'age': 28}\"\nuser_dict = ast.literal_eval(user_info)\nprint(user_dict)\n\n# {'name': 'john', 'gender': 'male', 'age': 28}\n\n\nlist -> dict\n通过 zip 将 2 个列表映射为字典：\nlist1 = [1, 2, 3, 4]\nlist2 = [1, 2, 3]\nprint(dict(zip(list1, list2)))\n\n# {1: 1, 2: 2, 3: 3}\n将嵌套的列表转换为字典：\nli = [\n    [1, 111],\n    [2, 222],\n    [3, 333],\n]\n\nprint(dict(li))\n\n# {1: 111, 2: 222, 3: 333}\ntuple -> dict\n通过 zip 将 2 个元组映射为字典：\ntp1 = (1, 2, 3)\ntp2 = (1, 2, 3, 4)\n\nprint(dict(zip(tp1, tp2)))\n\n# {1: 1, 2: 2, 3: 3}\n将嵌套的元组转换为字典：\ntp = (\n    (1, 111),\n    (2, 222),\n    (3, 333),\n)\n\nprint(dict(tp))\n\n# {1: 111, 2: 222, 3: 333}\nset -> dict\n通过 zip 将 2 个集合映射为字典：\nset1 = {1, 2, 3}\nset2 = {'a', 'b', 'c'}\n\nprint(dict(zip(set1, set2)))\n\n# {1: 'c', 2: 'a', 3: 'b'}\nset\nstr -> set\n先将字符切割成元组，然后再去重转换为集合。\nprint(set('hello'))     # {'l', 'o', 'e', 'h'}\nbytes -> set\n会取每个字节的 ASCII 十进制值并组合成元组，再去重。\nset(b'hello')           # {104, 108, 101, 111}\nlist -> set\n先对列表去重，再转换。\nset([1, 2, 3, 2, 1])    # {1, 2, 3}\ntuple -> set\n先对列表去重，再转换。\nset((1, 2, 3, 2, 1))    # {1, 2, 3}\ndict -> set\n会取字典的键名组合成集合。\nset({'name': 'hello', 'age': 18})\n\n# {'age', 'name'}\n参考资料\nPython 如何将字符串转为字典\n\n原文地址: https://shockerli.net/post/py...\n\n\n                ", "mainLikeNum": ["18 "], "mainBookmarkNum": "13"}