{"title": "Amazon DynamoDB 入门3： 表的基本操作 - 古寺比的寺 ", "index": "数据库,python,nosql", "content": "Amazon DynamoDB 表的基本操作\n之前两篇文章介绍了DynamoDB如何在本地安装以及基本的工作原理和API，这一节主要介绍如何使用DynamoDB。\n基本的DynamoDB 操作包括表操作、项目操作和索引管理。\n首先是链接数据库。和关系型数据库不同，DynamoDB 是一项 Web 服务，与其进行的交互是无状态的。应用程序不需要维护持久性网络连接。相反，与 DynamoDB 的交互是通过 HTTP(S) 请求和响应进行的。\n执行某项操作的步骤为：\n\n应用程序将 HTTP(S) 请求发送到 DynamoDB。该请求包含要执行的 DynamoDB 操作的名称和参数。DynamoDB 将立即执行请求。\nDynamoDB 返回一个包含操作结果的 HTTP(S) 响应。如果出错，DynamoDB 将返回 HTTP 错误状态和消息。\n\n大多数情况下，我们编写应用程序代码访问DynamoDB。同时还可以使用 AWS 管理控制台或 AWS Command Line Interface (AWS CLI) 向 DynamoDB 发送临时请求并查看结果。\n剩下的就让我们用代码展示吧！\n表操作\n我们知道，关系模型需要一个明确定义的架构，其中，数据将标准化为表、列和行。此外，在表、列、索引和其他数据库元素之间定义所有关系。但 DynamoDB 不同，DynamoDB 没有架构。每个表必须具有一个用来唯一标识每个数据项目的主键，但对其他非键属性没有类似的约束。DynamoDB 可以管理结构化或半结构化的数据，包括 JSON 文档。\n表是关系数据库和 DynamoDB 中的基本数据结构。关系数据库管理系统 (RDBMS) 要求在创建表时定义表的架构。相比之下，DynamoDB 表没有架构 - 与主键不同，我们在创建表时无需定义任何属性或数据类型。\n新建表\nDynamoDB 使用 CreateTable 操作创建表，并指定参数，请求语法如下所示：\n{\n   \"AttributeDefinitions\": [ \n      { \n         \"AttributeName\": \"string\",\n         \"AttributeType\": \"string\"\n      }\n   ],\n   \"GlobalSecondaryIndexes\": [ \n      { \n         \"IndexName\": \"string\",\n         \"KeySchema\": [ \n            { \n               \"AttributeName\": \"string\",\n               \"KeyType\": \"string\"\n            }\n         ],\n         \"Projection\": { \n            \"NonKeyAttributes\": [ \"string\" ],\n            \"ProjectionType\": \"string\"\n         },\n         \"ProvisionedThroughput\": { \n            \"ReadCapacityUnits\": number,\n            \"WriteCapacityUnits\": number\n         }\n      }\n   ],\n   \"KeySchema\": [ \n      { \n         \"AttributeName\": \"string\",\n         \"KeyType\": \"string\"\n      }\n   ],\n   \"LocalSecondaryIndexes\": [ \n      { \n         \"IndexName\": \"string\",\n         \"KeySchema\": [ \n            { \n               \"AttributeName\": \"string\",\n               \"KeyType\": \"string\"\n            }\n         ],\n         \"Projection\": { \n            \"NonKeyAttributes\": [ \"string\" ],\n            \"ProjectionType\": \"string\"\n         }\n      }\n   ],\n   \"ProvisionedThroughput\": { \n      \"ReadCapacityUnits\": number,\n      \"WriteCapacityUnits\": number\n   },\n   \"StreamSpecification\": { \n      \"StreamEnabled\": boolean,\n      \"StreamViewType\": \"string\"\n   },\n   \"TableName\": \"string\"\n}\n\n\n必须向 CreateTable 提供以下参数：\n\nTableName – 表名称。\nKeySchema – 用于主键的属性。有关更多信息，请参阅 表、项目和属性 和 主键。\nAttributeDefinitions – 键架构属性的数据类型。\nProvisionedThroughput – 每秒需对此表执行的读取和写入次数。DynamoDB 将保留足量的存储和系统资源，以便始终满足吞吐量要求。也可在创建之后使用 UpdateTable 操作后更改这些设置。存储分配完全由 DynamoDB 管理，我们无需指定表的存储要求。\n\nAttributeType 的定义中：\n\nS - 字符串类型\nN - 数字类型\nB - 二进制类型 \n\nPython Example\nboto3\nimport boto3\ndb3 = boto3.resource('dynamodb', endpoint_url='http://localhost:8000',  region_name='us-west-2')\n\n\ntable = db3.create_table(\n    TableName='Music',\n    KeySchema=[\n        { \n            'AttributeName': \"Artist\", \n            'KeyType': \"HASH\"\n        },\n        { \n            'AttributeName': \"SongTitle\", \n            'KeyType': \"RANGE\"\n        }\n    ],\n    AttributeDefinitions=[\n        { \n            'AttributeName': \"Artist\", \n            'AttributeType': \"S\" \n        },\n        { \n            'AttributeName': \"SongTitle\", \n            'AttributeType': \"S\" \n        }\n    ],\n    ProvisionedThroughput={       \n        'ReadCapacityUnits': 1, \n        'WriteCapacityUnits': 1\n    }\n)\n\n\n# Wait until the table exists.\ntable.meta.client.get_waiter('table_exists').wait(TableName='Music')\n\n# Print out some data about the table.\nprint(table.item_count)\n\n此表的主键包括 Artist（分区键）和 SongTitle（排序键）。\n获取有关表的信息\n表建好后，我们可以使用 DescribeTable 命令查看表的信息。唯一的参数是表名称，如下所示：\n{\n    TableName : \"Music\"\n}\n来自 DescribeTable 回复如下所示：\n{\n  \"Table\": {\n    \"AttributeDefinitions\": [\n      {\n        \"AttributeName\": \"Artist\",\n        \"AttributeType\": \"S\"\n      },\n      {\n        \"AttributeName\": \"SongTitle\",\n        \"AttributeType\": \"S\"\n      }\n    ],\n    \"TableName\": \"Music\",\n    \"KeySchema\": [\n      {\n        \"AttributeName\": \"Artist\",\n        \"KeyType\": \"HASH\"  //Partition key\n      },\n      {\n        \"AttributeName\": \"SongTitle\",\n        \"KeyType\": \"RANGE\"  //Sort key\n      }\n    ],\n\n    ...remaining output omitted...\nDescribeTable 还将返回有关表中的索引、预配置的吞吐量设置、大约项目数和其他元数据的信息。\nPython Example\nboto3\nimport boto3\ndb3 = boto3.resource('dynamodb', endpoint_url='http://localhost:8000',  region_name='us-west-2')\n\ndb3.meta.client.describe_table(TableName='Music')\n# 返回结果如下\n\n{'ResponseMetadata': {'HTTPHeaders': {'content-length': '569',\n   'content-type': 'application/x-amz-json-1.0',\n   'server': 'Jetty(8.1.12.v20130726)',\n   'x-amz-crc32': '2801025854',\n   'x-amzn-requestid': '2dafeeab-8d79-4b32-ad1f-03983624ab41'},\n  'HTTPStatusCode': 200,\n  'RequestId': '2dafeeab-8d79-4b32-ad1f-03983624ab41',\n  'RetryAttempts': 0},\n u'Table': {u'AttributeDefinitions': [{u'AttributeName': u'Artist',\n    u'AttributeType': u'S'},\n   {u'AttributeName': u'SongTitle', u'AttributeType': u'S'}],\n  u'CreationDateTime': datetime.datetime(2016, 12, 28, 11, 25, 12, 657000, tzinfo=tzlocal()),\n  u'ItemCount': 0,\n  u'KeySchema': [{u'AttributeName': u'Artist', u'KeyType': u'HASH'},\n   {u'AttributeName': u'SongTitle', u'KeyType': u'RANGE'}],\n  u'ProvisionedThroughput': {u'LastDecreaseDateTime': datetime.datetime(1970, 1, 1, 8, 0, tzinfo=tzlocal()),\n   u'LastIncreaseDateTime': datetime.datetime(1970, 1, 1, 8, 0, tzinfo=tzlocal()),\n   u'NumberOfDecreasesToday': 0,\n   u'ReadCapacityUnits': 1,\n   u'WriteCapacityUnits': 1},\n  u'TableArn': u'arn:aws:dynamodb:ddblocal:000000000000:table/Music',\n  u'TableName': u'Music',\n  u'TableSizeBytes': 0,\n  u'TableStatus': u'ACTIVE'}}\n删除表\n当不再需要一个表并希望将它永久性丢弃时，可使用 DeleteTable：\n表一经删除便无法恢复。（一些关系数据库允许撤消 DROP TABLE 操作）\n{\n    TableName: \"Music\"\n}\nPython Example\nboto3\nfrom __future__ import print_function # Python 2/3 compatibility\nimport boto3\n\ndynamodb = boto3.resource('dynamodb', region_name='us-west-2', endpoint_url=\"http://localhost:8000\")\n\ntable = dynamodb.Table('Music')\n\ntable.delete()\n\n## output\n\n{'ResponseMetadata': {\n   'HTTPHeaders': {\n       'content-length': '1012',\n       'content-type': 'application/x-amz-json-1.0',\n       'server': 'Jetty(8.1.12.v20130726)',\n       'x-amz-crc32': '2473676771',\n       'x-amzn-requestid': '84938373-870f-420f-b19e-4de2c6301743'},\n   'HTTPStatusCode': 200,\n   'RequestId': '84938373-870f-420f-b19e-4de2c6301743',\n   'RetryAttempts': 0},\n   u'TableDescription': {\n   ...\n   }\n}\n修改表\n当一个表创建好之后如果想要调整，可以使用UpdateTable命令\n修改表时我们一次只可以做一个操作:\n* 修改预设的吞吐量。\n* 开启或者停止使用Streams。\n* 删除一个全局耳机索引。\n* 创建一个全局的二级索引。当索引开始后台执行时，可以使用UpdateTable进行下一个操作。\n\nUpdateTable 是一个异步操作; 当它开始执行时，表的状态将由 ACTIVE 变为 UPDATING。\n请求语法为：\n{\n   \"AttributeDefinitions\": [ \n      { \n         \"AttributeName\": \"string\",\n         \"AttributeType\": \"string\"\n      }\n   ],\n   \"GlobalSecondaryIndexUpdates\": [ \n      { \n         \"Create\": { \n            \"IndexName\": \"string\",\n            \"KeySchema\": [ \n               { \n                  \"AttributeName\": \"string\",\n                  \"KeyType\": \"string\"\n               }\n            ],\n            \"Projection\": { \n               \"NonKeyAttributes\": [ \"string\" ],\n               \"ProjectionType\": \"string\"\n            },\n            \"ProvisionedThroughput\": { \n               \"ReadCapacityUnits\": number,\n               \"WriteCapacityUnits\": number\n            }\n         },\n         \"Delete\": { \n            \"IndexName\": \"string\"\n         },\n         \"Update\": { \n            \"IndexName\": \"string\",\n            \"ProvisionedThroughput\": { \n               \"ReadCapacityUnits\": number,\n               \"WriteCapacityUnits\": number\n            }\n         }\n      }\n   ],\n   \"ProvisionedThroughput\": { \n      \"ReadCapacityUnits\": number,\n      \"WriteCapacityUnits\": number\n   },\n   \"StreamSpecification\": { \n      \"StreamEnabled\": boolean,\n      \"StreamViewType\": \"string\"\n   },\n   \"TableName\": \"string\"\n}\n\nPython Example\nboto3\nimport boto3\ndb3 = boto3.resource('dynamodb', endpoint_url='http://localhost:8000',  region_name='us-west-2')\n\n\ntable = db3.meta.client.update_table(\n    TableName='Music',\n    AttributeDefinitions=[\n        { \n            'AttributeName': \"Artist\", \n            'AttributeType': \"S\" \n        },\n        { \n            'AttributeName': \"SongTitle\", \n            'AttributeType': \"S\" \n        }\n    ],\n    ProvisionedThroughput={       \n        'ReadCapacityUnits': 10, \n        'WriteCapacityUnits': 10\n    }\n)\n\ndb3.meta.client.describe_table(TableName='Music')\n\n现在查看Music 表会发现预设的吞吐量都已经修改为了10\nDynamoDB UpdateTable 操作\n下一篇我们将要结束DynamoDB 最常用的部分，项目的基本操作（CRUD）。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "3"}