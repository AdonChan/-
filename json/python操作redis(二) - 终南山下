{"title": "python操作redis(二) - 终南山下 ", "index": "python,redis", "content": "连接\nredis-py需要一个可以运行的redis服务，如何安装配置redis?首先安装redis模块\nsudo pip3 install redis\n在ipython中操作\nIn [1]: import redis\n\nIn [2]: r = redis.StrictRedis(host='localhost', port=6379, db=0, password='123456')\n\nIn [3]: r.set('name', 'lyon')\nOut[3]: True\n\nIn [4]: r.get('name')\nOut[4]: b'lyon'\n连接池\nedis-py使用connection pool来管理对一个redis server的所有连接，避免每次建立、释放连接的开销。默认，每个Redis实例都会维护一个自己的连接池。可以直接建立一个连接池，然后作为参数Redis，这样就可以实现多个Redis实例共享一个连接池。\nIn [6]: pool = redis.ConnectionPool(host='localhost', port=6379, db=0, password='123456')\n\nIn [7]: r = redis.Redis(connection_pool=pool)\n管道\nredis-py默认在执行每次请求都会创建（连接池申请连接）和断开（归还连接池）一次连接操作，如果想要在一次请求中指定多个命令，则可以使用pipline实现一次请求指定多个命令，并且默认情况下一次pipline 是原子性操作。\nIn [2]: import redis\n\nIn [3]: pool = redis.ConnectionPool(host='localhost', port=6379, db=0, password='0okmnhy6')\n\nIn [4]: r = redis.Redis(connection_pool=pool)\n\nIn [5]: pipe = r.pipeline(transaction=True)\n\nIn [6]: r.set('country', 'china')\nOut[6]: True\n\nIn [7]: r.set('city', 'beijing')\nOut[7]: True\n\nIn [8]: r.get('country')\nOut[8]: b'china'\n\nIn [9]: r.get('city')\nOut[9]: b'beijing'\n\nIn [10]: pipe.execute()\nOut[10]: []\n\n参考链接https://pypi.org/project/redis/http://www.cnblogs.com/melonj...\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}