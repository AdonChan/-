{"title": "Python logging 模块简介 - Python提高班 ", "index": "python", "content": "Logging 模块\n\n简介\n\nPython的 logging 模块提供了灵活的日志处理相关功能, 可以用来追踪程序运行的情况。\nlogging 模块提供了一系列标准的日志等级: DEBUG, INFO, WARNING, ERROR, CRITICAL, 顾名思义可以大致看出它们各自的使用情况。 logging 模块设置的默认等级时 WARNING, 这意味着默认情况下，日志级别为 WARNING, ERROR, CRITICAL 的日志会被记录，而 DEBUG, INFO 的日志会被忽略。\n不同等级的value值如下，只有当value大于 logger 的值才会记录日志。\nLevel    Value\nCRITICAL 50\nERROR    40\nWARNING  30\nINFO     20\nDEBUG    10\nUNSET     0\n\n简单输出日志\n\n下面看一个简单的官方文档上的例子:\nimport logging\nlogging.warning('Watch out!')  # will print a message to the console\nlogging.info('I told you so')  # will not print anything\n\n输出如下：\nWARNING:root:Watch out!\n\n可以看到info记录的信息没有输出，这是因为默认输出级别不低于WARNING级别的。\n输入日志到文件\n\nlogging 支持输出日志到文件，参考下面示例:\nimport logging\nlogging.basicConfig(filename='example.log',level=logging.DEBUG)\nlogging.debug('This message should go to the log file')\nlogging.info('So should this')\nlogging.warning('And this, too')\n\n其中level是指的记录等级， 输出如下：\nDEBUG:root:This message should go to the log file\nINFO:root:So should this\nWARNING:root:And this, too\n\n几个基本概念\n\nloggers\n\nlogger是logging模块提供的日志类 Logger 的实例，它暴露出接口可以直接供程序调用。每个实例都有一个名字，并且示例间有类之间那种继承关系，根据logger的名字来区分，比如叫\"scan\"的logger是叫\"scan.text\"和\"scan.html\"的父类(没错，他们是以点号错分隔符)。\n所有logger共同的父类是 root , 就是上面示例中的中间那个默认的root。 basicConfig 默认的输出格式为: severity:logger name:message 。\nlogger的通过 logging.getLogger(name) 来创建，有种在包里命名的惯用做法是：\nlogger = logging.getLogger(__name__)\n\n这样的好处是可以从logger的名字清楚的看到记录的来源。\nhandlers 和轮转日志\n\nhandlers 承担 logging 模块里负责处理合适的信息到不同的地方的角色，下面通过设置一个RotatingFileHandler来展示handler的特性。\n有时候需要创建多个轮转日志，每个日志保存一定长度的内容，最多保留一定数量的日志，其余的丢弃，这种情况下，可以定义 RotatingFileHandler 来实现:\nlogging_rotatingfile_example.py\nimport glob\nimport logging\nimport logging.handlers\n\nLOG_FILENAME = 'logging_rotatingfile_example.out'\n\n# Set up a specific logger with our desired output level\nmy_logger = logging.getLogger('MyLogger')\nmy_logger.setLevel(logging.DEBUG)\n\n# Add the log message handler to the logger\nhandler = logging.handlers.RotatingFileHandler(\n    LOG_FILENAME,\n    maxBytes=20,\n    backupCount=5,\n)\nmy_logger.addHandler(handler)\n\n# Log some messages\nfor i in range(20):\n    my_logger.debug('i = %d' % i)\n\n# See what files are created\nlogfiles = glob.glob('%s*' % LOG_FILENAME)\nfor filename in logfiles:\n    print(filename)\n\n运行输出如下:\nlogging_rotatingfile_example.out\nlogging_rotatingfile_example.out.1\nlogging_rotatingfile_example.out.2\nlogging_rotatingfile_example.out.3\nlogging_rotatingfile_example.out.4\nlogging_rotatingfile_example.out.5\n\n当日志内容达到定义的 maxBytes 时，会自动重命名文件后加上后缀\".1\",如果已经存在后续的\".1\",\".2\"等则自动重命名他们向后加1，最后最多只保留 backupCount 定义数量的日志文件。\n其它有用的handler参见这里。\nFormatters 和 个性化输出\n\nFormatters 可以用来控制日志输出的格式，参考下面的示例:\nimport logging\n\n# create logger\nlogger = logging.getLogger('simple_example')\nlogger.setLevel(logging.DEBUG)\n\n# create console handler and set level to debug\nch = logging.StreamHandler()\nch.setLevel(logging.DEBUG)\n\n# create formatter\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\n# add formatter to ch\nch.setFormatter(formatter)\n\n# add ch to logger\nlogger.addHandler(ch)\n\n# 'application' code\nlogger.debug('debug message')\nlogger.info('info message')\nlogger.warn('warn message')\nlogger.error('error message')\nlogger.critical('critical message')\n\n输出如下:\n2016-11-27 23:18:51,128 - simple_example - DEBUG - debug message\n2016-11-27 23:18:51,128 - simple_example - INFO - info message\n2016-11-27 23:18:51,128 - simple_example - WARNING - warn message\n2016-11-27 23:18:51,128 - simple_example - ERROR - error message\n2016-11-27 23:18:51,128 - simple_example - CRITICAL - critical message\n\n可以看到 %(asctime)s - %(name)s - %(levelname)s - %(message)s 这里对格式化输出的影响。其中默认的日期时间显示的格式是ISO8601格式， 也可以自定义时间格式，如下面的例子:\nimport logging\nlogging.basicConfig(format='%(asctime)s %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p')\nlogging.warning('is when this event was logged.')\n\n输出:\npython test12.py\n11/27/2016 11:22:41 PM is when this event was logged.\n\n好有个比较有用的格式化参数时 %(lineno)d, 显示logger调用的时候所处的行数。具体的格式和作用可以参见这里。\n其它\n\nlogger.exception\n\n以 ERROR 的等级记录日志，但和 DEBUG 等级一样会输出详细的错误信息，通常用在exception处理中\nFilter Object\n\nFilters 是可以被handlers和loggers用来过滤日志的输出的，因为用的不多，具体可参见文档。\n线程安全\n\nlogging模块是通过线程锁保证线程安全的。\nLogging Flow\n\n官方文档上看到的logging流程图，可以帮助理解日志记录流程，参见这里。\n从配置文件获取logging的配置\n\n参见这里。\n参考资料\n\n\nhttps://docs.python.org/2.7/h...\nhttps://pymotw.com/3/logging/...\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "6"}