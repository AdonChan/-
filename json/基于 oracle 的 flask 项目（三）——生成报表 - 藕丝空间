{"title": "基于 oracle 的 flask 项目（三）——生成报表 - 藕丝空间 ", "index": "python,flask,flask-sqlalchemy,oracle,sqlalchemy", "content": "曾经，因为对 sqlalchemy 不熟悉，固执的抛弃之，直接引入原生的 cx_Oracle 来生成报表，但是经过一堆的“上下文等”错误后，我幡然悔悟，还是回到了 sqlalchemy 的怀抱来。认真学习 sqlalchemy，你会发现意想不到的惊喜。本文主要讲解如何生成不同需求的报表。\n项目描述\n\n第一个页面，以 OusiStaff.phone 和 OusiGuest.staff_phone 为关联，查询出本月职工的关联客户及客户的资产余额。\n第二个页面，以 OusiStaff.phone 和 OusiGuest.staff_phone 为关联，查询出每个职工所有关联的客户的本月资产、上月资产及本月管户资产增额。\n\n具有管理员权限的员工可以看到本部门下面所有员工的相关信息，非管理员权限的员工只能查看自己的相关信息。\n查询功能留给下一章详细讲解。\n\n建立报表模板\n不在赘述。详情请下载代码查看。\n实现第一个页面\n建立第一个页面的试图函数\n第一个页面使用sqlalchemy查询比较简单，关键点是：\n\n区分权限。\n联表查询。\n建立上个月的虚字段。\n分页显示。\n查询嵌套。\n\nviews.py 内容：\n@show.route('/01', methods = ['GET', 'POST'])\n@login_required\ndef _01():\n    g1 = aliased(OusiGuest) # 重复用到该数据库，需要设置别名。\n    g2 = aliased(OusiGuest) # 重复用到该数据库，需要设置别名。\n    page = request.args.get('page', 1, type=int) # 分页\n    if current_user.role == 'admin': # 区分权限\n        database = db.session.query(OusiStaff.department, OusiStaff.name.label('staff_name'), OusiStaff.phone,\n                                    OusiStaff.role,\n                                    g1.name.label('guest_name'), g1.month, g1.balance,\n                                    func.nvl(db.session.query(g2.balance).filter(\n                                        g1.name == g2.name,\n                                        func.to_date(g2.month, 'yyyy-mm') == func.add_months(\n                                            func.to_date(g1.month, 'yyyy-mm'), -1)\n                                    ), 0).label('last_balance')\n                                    ).filter(\n            OusiStaff.phone == g1.staff_phone, current_user.department == OusiStaff.department,\n            g1.month == date.today().strftime('%Y-%m')\n        ).order_by(g1.name).group_by(OusiStaff.department, OusiStaff.name.label('staff_name'), OusiStaff.phone,\n                                     OusiStaff.role,\n                                     g1.name.label('guest_name'), g1.month, g1.balance)\n    else:\n        database = db.session.query(OusiStaff.department, OusiStaff.name.label('staff_name'), OusiStaff.phone,\n                                    OusiStaff.role,\n                                    g1.name.label('guest_name'), g1.month, g1.balance,\n                                    func.nvl(db.session.query(g2.balance).filter(\n                                        g1.name==g2.name,\n                                        func.to_date(g2.month, 'yyyy-mm')==func.add_months(\n                                            func.to_date(g1.month, 'yyyy-mm'), -1)\n                                    ), 0).label('last_balance')\n                                    ).filter(\n            OusiStaff.phone==g1.staff_phone, current_user.phone==g1.staff_phone,\n            g1.month==date.today().strftime('%Y-%m')\n            ).order_by(g1.name).group_by(OusiStaff.department, OusiStaff.name.label('staff_name'), OusiStaff.phone,\n                                    OusiStaff.role,\n                                    g1.name.label('guest_name'), g1.month, g1.balance)\n    data = database.paginate(page, per_page=current_app.config['OUSI_POSTS_PER_PAGE'], error_out=False)\n\n    return render_template('show/01.html', data=data)\n其实，以上内容就是利用 sqlalchemy 的联表查询问题，将 OusiStaff 和 OusiGuest 以 phone 值为关联进行查询，然后将结果显示出来。\n其中的难点一是利用 func.to_date 和 func.add_months 对上个月这个时间进行关联查询（凡是数据库支持的函数，在 sqlalchemy 中都可以使用 func 加函数名来操作。），二是利用 func.nvl 函数来对初始化数据进行赋值 0 的操作。 具体的 sqlalchemy 语法，请参见代码。\n\n提示： 注意 sqlalchemy 的语法。 func.nvl(db.session.query(g2.balance).filter(g1.name==g2.name, func.to_date(g2.month, 'yyyy-mm')==func.add_months(func.to_date(g1.month, 'yyyy-mm'), -1)), 0).label('last_balance') ，这语句的主要是为了实现查询上个月的余额，如果查询不到，通过 oracle 的 nvl 函数设置为 0 。\n第一个页面显示结果\n权限为 admin 的用户显示本部门下所有员工的相关信息。\n\n权限为 general 的用户只显示本人的相关信息。\n\n实现第二个页面\n建立第二个页面的试图函数\n第二页使用 sqlalchemy 查询稍微复杂点，关键点除了第一个页面的要求外还有：\n\n使用 func.sum 对相关字段进行相加运算。\n用到了子查询。\n\nviews.py 内容：\n@show.route('/02', methods = ['GET', 'POST'])\n@login_required\ndef _02():\n    page = request.args.get('page', 1, type=int)\n    g1 = aliased(OusiGuest)\n    g2 = aliased(OusiGuest)\n    if current_user.role == 'admin':\n        sbq = db.session.query(OusiStaff.department, OusiStaff.role, OusiStaff.name.label('staff_name'),\n                               g1.staff_phone, g1.name.label('guest_name'), g1.month, g1.balance,\n                               func.nvl(db.session.query(g2.balance).filter(\n                                   g1.name==g2.name,\n                                   func.add_months(func.to_date(g1.month, 'yyyy-mm'), -1) == func.to_date(g2.month,\n                                                                                                          'yyyy-mm')\n                                                                             ), 0).label('last_balance')).filter(\n            OusiStaff.phone==g1.staff_phone,\n            OusiStaff.department==current_user.department\n        ).group_by(OusiStaff.department, OusiStaff.role, OusiStaff.name.label('staff_name'),\n                               g1.staff_phone, g1.name.label('guest_name'), g1.month, g1.balance).subquery()\n        database = db.session.query(sbq.c.department, sbq.c.role, sbq.c.staff_name, sbq.c.staff_phone,\n                                    sbq.c.month, func.count(sbq.c.guest_name).label('members'),\n                                    func.sum(sbq.c.balance).label('balance'), func.sum(sbq.c.last_balance).label('last_balance')).\\\n            filter(sbq.c.month==date.today().strftime('%Y-%m')).group_by(sbq.c.department, sbq.c.role,\n                                                                         sbq.c.staff_name, sbq.c.staff_phone,\n                                                                         sbq.c.month)\n    else:\n        sbq = db.session.query(OusiStaff.department, OusiStaff.role, OusiStaff.name.label('staff_name'),\n                               g1.staff_phone, g1.name.label('guest_name'), g1.month, g1.balance,\n                               func.nvl(db.session.query(g2.balance).filter(\n                                   g1.name == g2.name,\n                                   func.add_months(func.to_date(g1.month, 'yyyy-mm'), -1) == func.to_date(g2.month,\n                                                                                                          'yyyy-mm')\n                               ), 0).label('last_balance')).filter(\n            OusiStaff.phone == g1.staff_phone,\n            OusiStaff.phone == current_user.phone\n        ).group_by(OusiStaff.department, OusiStaff.role, OusiStaff.name.label('staff_name'),\n                   g1.staff_phone, g1.name.label('guest_name'), g1.month, g1.balance).subquery()\n        database = db.session.query(sbq.c.department, sbq.c.role, sbq.c.staff_name, sbq.c.staff_phone,\n                                    sbq.c.month, func.count(sbq.c.guest_name).label('members'),\n                                    func.sum(sbq.c.balance).label('balance'),\n                                    func.sum(sbq.c.last_balance).label('last_balance')). \\\n            filter(sbq.c.month == date.today().strftime('%Y-%m')).group_by(sbq.c.department, sbq.c.role,\n                                                                           sbq.c.staff_name, sbq.c.staff_phone,\n                                                                           sbq.c.month)\n    data = database.paginate(page, per_page=current_app.config['OUSI_POSTS_PER_PAGE'], error_out=False)\n\n    return render_template('show/02.html', data=data)\n\n注意 query 的字段以及 group_by 里分组查询的字段。\n第二个页面显示结果\n权限为 admin 的用户显示本部门下所有员工的相关信息。\n\n权限为 general 的用户只显示本人的相关信息。\n\n源码下载\n下节更精彩，将实现搜索查询功能，又是一堆 sqlalchemy 语句。\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "1"}