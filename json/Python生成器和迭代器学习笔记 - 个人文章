{"title": "Python生成器和迭代器学习笔记 - 个人文章 ", "index": "iterable,iterator,generator,python", "content": "定义\n生成器 (generator)\n\n一种定义体中含有yield关键词的函数被调用时得到的对象\n有时指上述的函数\n\n迭代器 (iterator)\n\n一种实现了无参数__next__方法和__iter__方法的对象(实例)\npython内建的一种类，其继承自collections.Iterable (py3.4)\n\n可迭代对象\n实现了__iter__或__getitem__方法的对象\n范例\nclass GeneratorSampleInClass:\n    def __iter__(self):\n        for item in [1, 2, 3]:\n            yield item\n\n\ng = GeneratorSampleInClass()\nprint(type(GeneratorSampleInClass.__iter__))  # <class 'function'>\nprint(type(g.__iter__()))  # <class 'generator'>\nprint(dir(g.__iter__()))  # [..., '__next__', ...]\n\n\ndef generator_sample_in_function():\n    for item in [1, 2, 3]:\n        yield item\n\n\nprint(type(generator_sample_in_function))  # <class 'function'>\nprint(type(generator_sample_in_function()))  # <class 'generator'>\nprint(dir(generator_sample_in_function))  # 没有__next__方法\nprint(dir(generator_sample_in_function()))  # [..., '__next__', ...]\n\n\nclass IteratorSampleInClass:\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        for item in [1, 2, 3]:\n            yield item\n\n\nfrom collections import Iterator\n\ni = IteratorSampleInClass()\nprint(isinstance(i, Iterator))  # True\n注意\n\n迭代器是可迭代对象\n生成器也是迭代器\n不要把yield和yield from搞混，后者虽然可以简化for循环中的yield语句，但其的定义较复杂，我也不是很明白，这里就不做展开\n\n作用\n\n更优雅的代码\n更有效处理大型对象 (不用一次性读入所有数据)\n其他 (例：生成器还可以通过.send()方法变身为协程)\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}