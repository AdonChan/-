{"title": "Python全栈之路系列之文件操作 - Python全栈之路 ", "index": "file,python", "content": "Python可以对文件进行查看、创建等功能，可以对文件内容进行添加、修改、删除，且所使用到的函数在Python3.5.x为open，在Python2.7.x同时支持file和open，但是在3.5.x系列移除了file函数。\nPython文件打开方式\n文件句柄 = open('文件路径','打开模式')\nPs：文件句柄相当于于变量名，文件路径可以写为绝对路径也可以写为相对路径。\nPython打开文件的模式\n基本的模式\n\n\n模式\n说明\n注意事项\n\n\n\nr\n只读模式\n文件必须存在\n\n\nw\n只写模式\n文件不存在则创建文件，文件存在则清空文件内容\n\n\nx\n只写模式\n文件不可读，文件不存在则创建，存在则报错\n\n\na\n追加模式\n文件不存在创建文件，文件存在则在文件末尾添加内容\n\n\n\n带+的模式\n\n\n模式\n说明\n\n\n\nr+\n读写\n\n\nw+\n写读\n\n\nx+\n写读\n\n\na+\n写读\n\n\n\n带b的模式\n\n\n模式\n说明\n\n\n\nrb\n二进制读模式\n\n\nwb\n二进制写模式\n\n\nxb\n二进制只写模式\n\n\nab\n二进制追加模式\n\n\n\n提示：以b方式打开时，读取到的内容是字节类型，写入时也需要提供字节类型\n带+带b的模式\n\n\n模式\n说明\n\n\n\nrb+\n二进制读写模式\n\n\nwb+\n二进制读写模式\n\n\nxb+\n二进制只写模式\n\n\nab+\n二进制读写模式\n\n\n\nPython文件读取方式\n\n\n模式\n说明\n\n\n\nread([size])\n读取文件全部内容，如果设置了size，那么久读取size字节\n\n\nreadline([size])\n一行一行的读取\n\n\nreadlines()\n读取到的每一行内容作为列表中的一个元素\n\n\n\n测试的文件名是hello.tx\"，文件内容为：\nHello Word!\n123\nabc\n456\nabc\n789\nabc\nread\n代码：\n# 以只读的方式打开文件hello.txt\nf = open(\"hello.txt\",\"r\")\n# 读取文件内容赋值给变量c\nc = f.read()\n# 关闭文件\nf.close()\n# 输出c的值\nprint(c)\n输出结果：\nC:\\Python35\\python.exe F:/Python_code/sublime/Day06/file.py\nHello Word!\n123\nabc\n456\nabc\n789\nabc\nreadline\n代码：\n# 以只读模式打开文件hello.txt\nf = open(\"hello.txt\",\"r\")\n# 读取第一行\nc1 = f.readline()\n# 读取第二行\nc2 = f.readline()\n# 读取第三行\nc3 = f.readline()\n# 关闭文件\nf.close()\n# 输出读取文件第一行内容\nprint(c1)\n# 输出读取文件第二行内容\nprint(c2)\n# 输出读取文件第三行内容\nprint(c3)\n输出结果：\nC:\\Python35\\python.exe F:/Python_code/sublime/Day06/file.py\nHello Word!\n\n123\n\nabc\nreadlines\n# 以只读的方式打开文件hello.txt\nf = open(\"hello.txt\",\"r\")\n# 将文件所有内容赋值给c\nc = f.readlines()\n# 查看数据类型\nprint(type(c))\n# 关闭文件\nf.close()\n# 遍历输出文件内容\nfor n in c:\n    print(n)\n结果\nC:\\Python35\\python.exe F:/Python_code/sublime/Day06/file.py\n# 输出的数据类型\n<class 'list'>\nHello Word!\n\n123\n\nabc\n\n456\n\nabc\n\n789\n\nabc\nPython文件写入方式\n\n\n方法\n说明\n\n\n\nwrite(str)\n将字符串写入文件\n\n\nwritelines(sequence or strings)\n写多行到文件，参数可以是一个可迭代的对象，列表、元组等\n\n\n\nwrite\n代码：\n# 以只读的模式打开文件write.txt，没有则创建，有则覆盖内容\nfile = open(\"write.txt\",\"w\")\n# 在文件内容中写入字符串test write\nfile.write(\"test write\")\n# 关闭文件\nfile.close()\nwrite.txt文件内容为：\ntest write\nwritelines\n代码：\n# 以只读模式打开一个不存在的文件wr_lines.txt\nf = open(\"wr_lines.txt\",\"w\",encoding=\"utf-8\")\n# 写入一个列表\nf.writelines([\"11\",\"22\",\"33\"])\n# 关闭文件\nf.close()\nwr_lines.txt文件内容：\n112233\nPython文件操作所提供的方法\nclose(self):\n关闭已经打开的文件\nf.close()\nfileno(self):\n文件描述符\n f = open(\"hello.txt\",\"r\")\nret = f.fileno()\nf.close()\nprint(ret)\n执行结果：\n3\nflush(self):\n刷新缓冲区的内容到硬盘中\nf.flush()\nisatty(self):\n判断文件是否是tty设备，如果是tty设备则返回True，否则返回False\nf = open(\"hello.txt\",\"r\")\nret = f.isatty()\nf.close()\nprint(ret)\n返回结果：\nC:\\Python35\\python.exe F:/Python_code/sublime/Day06/file.py\nFalse\nreadable(self):\n是否可读，如果可读返回True，否则返回False\nf = open(\"hello.txt\",\"r\")\nret = f.readable()\nf.close()\nprint(ret)\n返回结果：\nC:\\Python35\\python.exe F:/Python_code/sublime/Day06/file.py\nTrue\nreadline(self, limit=-1):\n每次仅读取一行数据\nf = open(\"hello.txt\",\"r\")\nprint(f.readline())\nprint(f.readline())\nf.close()\n返回结果：\nC:\\Python35\\python.exe F:/Python_code/sublime/Day06/file.py\nHello Word!\n\n123\nreadlines(self, hint=-1):\n把每一行内容当作列表中的一个元素\nf = open(\"hello.txt\",\"r\")\nprint(f.readlines())\nf.close()\n返回结果：\nC:\\Python35\\python.exe F:/Python_code/sublime/Day06/file.py\n['Hello Word!\\n', '123\\n', 'abc\\n', '456\\n', 'abc\\n', '789\\n', 'abc']\ntell(self):\n获取指针位置\nf = open(\"hello.txt\",\"r\")\nprint(f.tell())\nf.close()\n返回结果:\nC:\\Python35\\python.exe F:/Python_code/sublime/Day06/file.py\n0\nseek(self, offset, whence=io.SEEK_SET):\n指定文件中指针位置\nf = open(\"hello.txt\",\"r\")\nprint(f.tell())\nf.seek(3)\nprint(f.tell())\nf.close()\n执行结果\nC:\\Python35\\python.exe F:/Python_code/sublime/Day06/file.py\n0\n3\nseekable(self):\n指针是否可操作\nf = open(\"hello.txt\",\"r\")\nprint(f.seekable())\nf.close()\n执行结果\nC:\\Python35\\python.exe F:/Python_code/sublime/Day06/file.py\nTrue\nwritable(self):\n是否可写\nf = open(\"hello.txt\",\"r\")\nprint(f.writable())\nf.close()\n执行结果\nC:\\Python35\\python.exe F:/Python_code/sublime/Day06/file.py\nFalse\nwritelines(self, lines):\n写入文件的字符串序列，序列可以是任何迭代的对象字符串生产，通常是一个字符串列表。\nf = open(\"wr_lines.txt\",\"w\")\nf.writelines([\"11\",\"22\",\"33\"])\nf.close()\n执行结果\n112233\nread(self, n=None):\n读取指定字节数据，后面不加参数默认读取全部\nf = open(\"wr_lines.txt\",\"r\")\nprint(f.read(3))\nf.seek(0)\nprint(f.read())\nf.close()\n执行结果\nC:\\Python35\\python.exe F:/Python_code/sublime/Day06/file.py\n112\n112233\nwrite(self, s):\n往文件里面写内容\nf = open(\"wr_lines.txt\",\"w\")\nf.write(\"abcabcabc\")\nf.close()\n文件内容\nabcabcabc\n同时打开多个文件\n为了避免打开文件后忘记关闭，可以通过管理上下文，即：\nwith open('log','r') as f:\n 代码块\n如此方式，当with代码块执行完毕时，内部会自动关闭并释放文件资源。\n在Python 2.7 及以后，with又支持同时对多个文件的上下文进行管理，即：\nwith open('log1') as obj1, open('log2') as obj2:\n    pass\n\n原文链接\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "10"}