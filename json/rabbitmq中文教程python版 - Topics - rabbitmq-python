{"title": "rabbitmq中文教程python版 - Topics - rabbitmq-python ", "index": "rabbitmq,python", "content": "源码：https://github.com/ltoddy/rabbitmq-tutorial\nTopics\n(using the Pika Python client)\n本章节教程重点介绍的内容\n在之前的教程中，我们改进了日志记录系统。我们没有使用只有虚拟广播的fanout交换，而是使用了direct交换，并让选择性接收日志成为了可能。\n尽管使用direct交换改进了我们的系统，但它仍然有局限性 - 它不能根据多个标准进行路由。\n在我们的日志系统中，我们可能不仅需要根据严重性来订阅日志，还要根据发布日志的来源进行订阅。您可能从syslog unix工具知道这个概念，该工具根据严重性(info / warning / crit...)和工具(auth / cron / kern ...)来路由日志。\n这会给我们很大的灵活性 - 因为我们可能想听取来自'cron'的error日志，而且还听取来自'kern'的所有日志。\n为了在我们的日志系统中实现这一点，我们需要了解更复杂的topic交换。\nTopic 交换\n发送到topic交换的消息必须有规范的routing_key - 它必须是由点分隔的单词列表。单词可以是任何东西，但通常它们指定了与该消息相关的一些功能。一些有效的routing_key例子: \"stock.usd.nyse\"，\"nyse.vmw\"，\"quick.orange.rabbit\"。只要您愿意，路由键中可以有任意的单词，但最多255个字节。\n绑定键也必须是相同的形式。topic交换背后的逻辑与direct topic交换背后的逻辑类似 - 使用特定路由键发送的消息将被传递到与匹配绑定键绑定的所有队列。但是绑定键有两个重要的特殊情况：\n\n* (star) 可以代替一个字。\n# (hash) 可以替代零个或多个单词。\n\n在这个例子中解释这个很简单：\n\n在这个例子中，我们将发送所有描述动物的消息。消息将使用由三个字（两个点）组成的路由键发送。路由关键字中的第一个单词将描述速度，第二个颜色和第三个物种：\" <celerity> <color> <species> \"。\n我们创建了三个绑定：Q1绑定了绑定键\" *.orange.* \"，Q2绑定了\" *.*.rabbit \"和\" lazy.#\"。\n这些绑定可以概括为：\n\nQ1对所有的橙色动物都感兴趣。\nQ2希望听到关于兔子的一切，以及关于懒惰动物的一切。\n\n将路由键设置为\"quick.orange.rabbit\"的消息将传递到两个队列。消息\"lazy.orange.elephant\"也会去他们两个。另一方面，\"quick.orange.fox\"只会进入第一个队列，而\"lazy.brown.fox\"只会进入第二个队列。\"lazy.pink.rabbit\"只会传递到第二个队列一次，即使它匹配了两个绑定。\"quick.brown.fox\"不匹配任何绑定，因此将被丢弃。\n如果我们违反我们的合同并发送带有一个或四个单词的消息，如\"orange\"或\"quick.orange.male.rabbit\"，会发生什么情况？那么，这些消息将不匹配任何绑定，并会丢失。\n另一方面，\"lazy.orange.male.rabbit\"即使有四个单词，也会匹配最后一个绑定，并将传递到第二个队列。\ndirect change\n\n  话题交换功能强大，可以像其他交流一样行事。\n  当使用\" \\# \"（散列）绑定键绑定队列时，它将接收所有消息，\n  而不管路由密钥如何 - 就像在*fanout*交换中一样。\n  当在绑定中没有使用特殊字符\"\\*\"(星号)和\"\\#\"(散列)时，主题交换将像*direct*交换一样。\n\n把它放在一起\n我们将在我们的日志系统中使用topic交换。我们首先假定日志的路由键有两个单词：\" <facility>.<severity> \"。\n代码几乎与前一个教程中的代码相同 。\nemit_log_topic.py的代码：\n#!/usr/bin/env python\nimport sys\nimport pika\n\nconnection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))\nchannel = connection.channel()\n\nchannel.exchange_declare(exchange='topic_logs',\n                         exchange_type='topic')\n\nrouting_key = sys.argv[1:] if len(sys.argv) > 2 else 'anonymous.info'\nmessage = ' '.join(sys.argv[2:]) or 'Hello World'\nchannel.basic_publish(exchange='topic_logs',\n                      routing_key=routing_key,\n                      body=message)\n\nprint(\" [x] Sent %r:%r\" % (routing_key, message))\nconnection.close()\nreceive_logs_topic.py的代码:\n#!/usr/bin/env python\nimport sys\nimport pika\n\n# connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))\nconnection = pika.BlockingConnection(pika.ConnectionParameters('172.17.0.2'))\nchannel = connection.channel()\n\nchannel.exchange_declare(exchange='topic_logs',\n                         exchange_type='topic')\n\nresult = channel.queue_declare(exclusive=True)\nqueue_name = result.method.queue\n\nbinding_keys = sys.argv[1:]\nif not binding_keys:\n    sys.stderr.write(\"Usage: %s [binding_key]...\\n\" % sys.argv[0])\n    sys.exit(1)\n\nfor binding_key in binding_keys:\n    channel.queue_bind(exchange='topic_logs',\n                       queue=queue_name,\n                       routing_key=binding_key)\n\nprint(' [*] Waiting for logs. To exit press CTRL+C')\n\n\ndef callback(ch, method, properties, body):\n    print(\" [x] %r:%r\" % (method.routing_key, body))\n\n\nchannel.basic_consume(callback,\n                      queue=queue_name,\n                      no_ack=True)\n\nchannel.start_consuming()\n要接收所有日志运行：\npython receive_logs_topic.py \"#\"\n要从设施“ kern ” 接收所有日志：\npython receive_logs_topic.py \"kern.*\"\n或者，如果您只想听到关于“ critical ”日志的信息：\npython receive_logs_topic.py \"*.critical\"\n您可以创建多个绑定：\npython receive_logs_topic.py \"kern.\" \".critical\"\n发布带有路由键“ kern.critical ”类型的日志：\npython emit_log_topic.py \"kern.critical\" \"A critical kernel error\"\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}