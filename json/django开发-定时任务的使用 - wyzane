{"title": "django开发-定时任务的使用 - wyzane ", "index": "crontab,django,python", "content": "今天介绍在django中使用定时任务的两种方式。\n方式一: APScheduler1)安装:\npip install apscheduler\n2)使用:\nfrom apscheduler.scheduler import Scheduler\nfrom django.core.cache import cache\n# 实例化\nsched = Scheduler()    \n\n# 每30秒执行一次\n@sched.interval_schedule(seconds=30)\ndef sched_test():\n    \"\"\"\n    测试-定时将随机数保存到redis中\n    :return:\n    \"\"\"\n    seed = \"123456789\"\n    sa = []\n    for i in range(4):\n        sa.append(random.choice(seed))\n    code = ''.join(sa)\n    cache.set(\"test_\"+code, code)\n3)启动定时任务\n# 启动定时任务\nsched.start()\n方式二: django-crontab1) 安装:\npip install django-crontab\n2) 添加配置到INSTALL_APPS中INSTALLED_APPS = (\n'django_crontab',\n)3) 编写定时函数:\n在django的app中新建一个test_crontab.py文件，把需要定时执行的代码放进去\n    import random\n\n    from django.core.cache import cache\n\n    def test():\n        \"\"\"\n        测试-定时将随机数保存到redis中\n        :return:\n        \"\"\"\n        seed = \"123456789\"\n        sa = []\n        for i in range(4):\n            sa.append(random.choice(seed))\n        code = ''.join(sa)\n        cache.set(\"test_\"+code, code)\n4）编写定时命令Django为项目中每一个应用下的management/commands目录中名字没有以下划线开始的Python模块都注册了一个manage.py命令, 自定义一个命令如下: 必须定义一个继承自BaseCommand的Command类, 并实现handle方法。编写appname/management/commands/test.py文件\nimport random\n\nfrom django.core.management.base import BaseCommand\nfrom django.core.cache import cache\n\nclass Command(BaseCommand):\n    \"\"\"\n    自定义命令\n    \"\"\"\n    def handle(self, *args, **options):\n        \"\"\"\n        自定义命令\n        :return:\n        \"\"\"\n        seed = \"123456789\"\n        sa = []\n        for i in range(4):\n            sa.append(random.choice(seed))\n        code = ''.join(sa)\n        cache.set(\"test_\"+code, code)\n定义完成后，执行python manage.py test, 会执行handle()函数\n5) 在settings.py中增加配置\n# 运行定时函数\nCRONJOBS = [\n    ('*/1 * * * *', 'appname.test_crontab.test','>>/home/python/test_crontab.log')\n]\n\n# 运行定时命令\nCRONJOBS = [\n    ('*/1 * * * *', 'django.core.management.call_command', ['test'], {}, '>> /home/python/test.log'),\n]\n上面主要有3个参数，分别表示: 定时任务执行时间(间隔), 待执行定时任务, 将定时任务的信息追加到文件中对于熟悉linux中定时任务crontab的同学可能对上面第一个参数的语法很亲切。上面表示每隔1分钟执行一次代码。\nlinux中的定时任务crontab的语法如下:\n*  *  *  *  * command\n分钟(0-59) 小时(0-23) 每个月的哪一天(1-31) 月份(1-12) 周几(0-6) shell脚本或者命令\n例子:\n0 6 * * * commands >> /tmp/test.log # 每天早上6点执行, 并将信息追加到test.log中\n0 */2 * * * commands # 每隔2小时执行一次\n有兴趣的小伙伴可以深入研究下linux的crontab定时任务。\n6) 添加并启动定时任务\npython manage.py crontab add\n其它命令:\npython manage.py crontab show: 显示当前的定时任务\npython manage.py crontab remove: 删除所有定时任务\n今天的定时任务就说到这里，有错误之处，欢迎交流指正!\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "1"}