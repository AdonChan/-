{"title": "python中用with关键字来实现上下文管理器. - 记录python学习中的点点滴滴 ", "index": "python", "content": "例子\nwith open(r'somefileName') as somefile:\n     for line in somefile:\n            print line\nwith 语句的语法\n\nwith <context_expression> [as <target>]:\n     <with-body>\n     \n什么语句可以作为<context_expression>, <target>变量是在哪里定义的呢?\n\n<context_expression>应该返回一个上下文管理器,所谓上下文管理器就是任何一个实现了 __enter__(self) ,和__exit__(self, *unused)方法的class的实例.\n在 __enter__(self)对象中返回的内容会被赋值给<target>变量\n\n直接用类进行构造的构造函数\nclass PypixContextManagerDemo:\n    def __enter__(self):\n        print 'Entering the block'\n    def __exit__(self, *unused):\n        print 'Exiting the block'\nwith PypixContextManagerDemo():\n    print 'In the block'\n也可以用工厂方法建立\n以MySQLdb为例,通常是调用MySQLdb.Connect方法建立的Connection的实例的.而在MySQLdb中Connect方法是这样实现的.\ndef Connect(*args, **kwargs):\n    \"\"\"Factory function for connections.Connection.\"\"\"\n    from MySQLdb.connections import Connection\n    return Connection(*args, **kwargs)\n而在Connection类中实现了__enter__(self) ,和__exit__(self, *unused)方法\nclass Connection(_mysql.connection):\n.....................\n    def __enter__(self):\n            if self.get_autocommit():\n                self.query(\"BEGIN\")\n            return self.cursor()\n            \n    def __exit__(self, exc, value, tb):\n        if exc:\n            self.rollback()\n        else:\n            self.commit()\n注意__enter__方法直接返回了cursor对象,因此as后跟的就是一个cursor对象\nwith MySQLdb.connect(kwargs=Mysqldb_kwargs) as ins_cursor:\n        ins_cursor.execute('select * from user')\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}