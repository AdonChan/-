{"title": "Unity命令行模式，也能「日志实时输出」 - 霖哥的工作日常 ", "index": "python,unity,unity3d", "content": "\n如果你使用过Unity命令行模式（batchmode），来实现Unity自动化编译构建，你肯定会踩过这样的问题：\n\nUnity的命令行模式，它只提供了一个-logfile参数，用于把日志输出到日志文件，但却没有提供实时的日志输出功能。\n《点击参考官方命令行文档》\n\n在这种情况下，我们执行Unity命令行程序，只知道了，Unity正在工作，但是，工作到什么进度，从它的Unity命令行程序的进程控制台日志，是看不出来的。\n对于我，折衷的办法，会在自动化的编译脚本里，在Unity命令行执行完毕以后，手动的使用文件打印命令(cat)，把日志给打印出来。类似这样...\n# 执行Unity\n/Applications/Unity/Unity.app/Contents/MacOS/Unity -batchmode -projectPath ~/UnityProjectPath -nographics -executeMethod GameEditor.BuildApp -logFile ~/UnityProjectPath/__kellylog.txt\n\n# 打印最终输出的日志\ncat ~/UnityProjectPath/__kellylog.txt\n\n要想在Unity命令行模式工作的时候，查看它的编译进度，霖哥一般会远程跑进执行编译工作的机器，然后用tail -f命令，把它的日志实时输出来...\ntail -F ~/UnityProjectPath/__kellylog.txt\n嗯，这相当的不科学啊。\n当类似的情况一而再再而三地出现的时候，你可曾回想起，那作为软件开发人员的最初梦想？——Don't Repeat Yourself，消灭重复。\n那有没有更好的方法？可以实时地，在执行Unity命令行后台程序的同时，进行日志输出？\nPython多线程\n就像我们前面所说的：Unity命令行模式，日志输出到文件中；同时，我平时使用tail -f命令，进行日志查看；\n所以解决方法，很简单，遵循这个思路，做一个小脚本：\n这个脚本，调用Unity命令行模式执行，同时，实现类似tail命令的功能，实时打印日志\n脚本语言的选择，想要轻便、支持多线程、跨平台，Python自然是最佳的选择了。用Python的subprocess子进程模块，就能轻松实现这样的功能。\n首先，使用subprocess调用Unity进程，并且实时输出进程控制台标准输出的日志。\n\n# 执行命令，子进程，并把进程控制台日志，实时输出\nimport subprocess\n\ncmd = \"\"\"\n/Applications/Unity/Unity.app/Contents/MacOS/Unity -batchmode -projectPath ~/UnityProjectPath -nographics -executeMethod GameEditor.BuildApp -logFile ~/UnityProjectPath/__kellylog.txt\n\"\"\"\n\nprocess = subprocess.Popen(\n    cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, cwd=project_path\n)\n\nwhile True:\n    out = process.stdout.read(1)\n    if out == '' and process.poll() != None:\n        break\n    if out != '':\n        sys.stdout.write(\"[Unity process console output]: \" + out)\n        sys.stdout.flush()\n然后，发起一个线程，使用python-tail模块，实时把日志文件，进行抓取输出。\nimport thread, tail\ndef tail_thread(tail_file):\n    t = tail.Tail(tail_file)\n    t.register_callback(unity_log_tail)\n    t.follow(s=1)\n\nthread.start_new_thread(tail_thread, ('~/UnityProjectPath/__kellylog.txt', ))\n你看，其实很简单的脚本，动动脑、动动手，就能实现达到目的，就一个子进程，加一个线程嘛。\n源码\n上面的只是不完整的一小段脚本技巧，完整的代码可以直接使用，开源在GitHub：\nunity_realtime_log | https://github.com/mr-kelly/unity_realtime_log\n你可以跨平台使用这个脚本，制定Unity的路径(-unity)，工程路径(-project)，和需要执行的C#方法(-method)。\nWindows:\nunity_realtime_log.bat -unity C:\\Unity\\Unity.exe -project C:\\UnityProjectPath -method GameEditor.BuildMethod\nMac:\nunity_realtime_log.sh -unity /Applications/Unity/Unity.app/Contents/MacOS/Unity -project ~/UnityProjectPath -method GameEditor.BuildMethod\n或者直接执行Python:\npython unity_realtime_log.py -unity C:\\Unity\\Unity.exe -project C:\\UnityProjectPath -method GameEditor.BuildMethod\n这样用，就相当于给Unity命令行程序，外挂上了实时日志输出的功能啦。\n以上，希望对你有帮助。\n我是霖哥，一个商学院毕业的程序员，一个Unity3D游戏开发工程师。如果觉得有用请点赞，转载请注明出处。如果在了解或学习编程的过程中有迷惘、或对一些生涩的科技概念的不解，评论里留下你的疑惑！\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "3"}