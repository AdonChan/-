{"title": "Keras文本分类实战（下） - 个人文章 ", "index": "shell,序列化,python,神经网络", "content": "\n摘要： 本文是使用kreas处理文本分析的入门教程（下），介绍文本处理的两种方法——独热编码和词嵌入。\n在上一节Keras文本分类实战（上），讲述了关于NLP的基本知识。这部分，将学会以不同方式将单词表示为向量。\n词嵌入（word embedding）是什么\n文本也被视为一种序列化的数据形式，类似于天气数据或财务数据中的时间序列数据。在之前的BOW模型中，了解了如何将整个单词序列表示为单个特征向量。下面将看到如何将每个单词表示为向量。这里有多种方法可以对文本进行向量化，比如：\n\n每个词语（word）表示的词语（words）作为向量\n每个字符（character）表示的字符（characters）作为向量\nN-gram单词/字符表示为向量\n\n在本教程中，将使用单热编码和单词嵌入将单词表示为向量，这是在神经网络中处理文本的常用方法。\n独热码（one-hot encoding）\n将单词表示为向量的第一种方式是创建独热码，这是通过将词汇长度的向量与语料库中的每个单词的条目组合一起来完成。通过这种方式，对于每个单词，只要它在词汇表中存在，就会将该单词在相应的位置设置为1，而向量中其它的位置设置为0。但这种方式可能为每个单词创建相当大的向量，且不会提供任何其他信息，例如单词之间的关系。假设有一个城市列表，如下例所示：\n>>> cities = ['London', 'Berlin', 'Berlin', 'New York', 'London']\n>>> cities\n['London', 'Berlin', 'Berlin', 'New York', 'London']\n可以使用scikit-learn包中LabelEncoder对城市列表进行分类：\n>>> from sklearn.preprocessing import LabelEncoder\n\n>>> encoder = LabelEncoder()\n>>> city_labels = encoder.fit_transform(cities)\n>>> city_labels\narray([1, 0, 0, 2, 1])\n之后就可以使用scikit-learn包中OneHotEncoder对城市列表进行编码：\n>>> from sklearn.preprocessing import OneHotEncoder\n\n>>> encoder = OneHotEncoder(sparse=False)\n>>> city_labels = city_labels.reshape((5, 1))\n>>> encoder.fit_transform(city_labels)\narray([[0., 1., 0.],\n       [1., 0., 0.],\n       [1., 0., 0.],\n       [0., 0., 1.],\n       [0., 1., 0.]])\n使用这种表示，可以看到分类整数值表示数组的位置，1表示出现，0表示不出现。这种编码常用于分类之中，这些类别可以是例如城市、部门或其他类别。\n词嵌入|word embeddings\n该方法将字表示为密集字向量（也称为字嵌入），其训练方式不像独热码那样，这意味着词嵌入将更多的信息收集到更少的维度中。嵌入词并不像人类那样理解文本，而是映射语料库中使用的语言的统计结构，其目标是将语义意义映射到几何空间，该几何空间也被称为嵌入空间（embedding space）。这个研究领域的一个著名例子是能够映射King - Man + Woman = Queen。怎么能获得这样的词嵌入呢？这里有两种方法，其中一种是在训练神经网络时训练词嵌入（word embeddings ）层。另一种方法是使用预训练好的词嵌入。现在，需要将数据标记为可以由词嵌入使用的格式。Keras为文本预处理和序列预处理提供了几种便捷方法，我们可以使用这些方法来处理文本。首先，可以从使用Tokenizer类开始，该类可以将文本语料库向量化为整数列表。每个整数映射到字典中的一个值，该字典对整个语料库进行编码，字典中的键是词汇表本身。此外，可以添加参数num_words，该参数负责设置词汇表的大小。num_words保留最常见的单词。对前面的例子准备测试和训练数据：\n>>> from keras.preprocessing.text import Tokenizer\n\n>>> tokenizer = Tokenizer(num_words=5000)\n>>> tokenizer.fit_on_texts(sentences_train)\n\n>>> X_train = tokenizer.texts_to_sequences(sentences_train)\n>>> X_test = tokenizer.texts_to_sequences(sentences_test)\n\n>>> vocab_size = len(tokenizer.word_index) + 1  # Adding 1 because of reserved 0 index\n\n>>> print(sentences_train[2])\n>>> print(X_train[2])\nOf all the dishes, the salmon was the best, but all were great.\n[11, 43, 1, 171, 1, 283, 3, 1, 47, 26, 43, 24, 22]\n索引是按文本中最常用的单词排序，这里索引0是保留的，并不会分配给任何单词，0索引用于填。未知单词（不在词汇表中的单词）在Keras中用word_count + 1表示，因为它们也可以保存一些信息。\n>>> for word in ['the', 'all', 'happy', 'sad']:\n...     print('{}: {}'.format(word, tokenizer.word_index[word]))\nthe: 1\nall: 43\nhappy: 320\nsad: 450\n注意：密切注意这种技术与scikit-learn的CountVectorizer产生的X_train二者之间的区别。\n使用CountVectorizer，每个向量的长度相同（总语料库的大小）。使用Tokenizer，每个向量等于每个文本的长度，其数值并不表示计数，而是对应于字典tokenizer.word_index中的单词值。\n为了解决每个文本序列在大多数情况下具有不同长度的单词的问题，可以使用pad_sequence()简单地用零填充单词序列。此外，还需要添加maxlen参数来指定序列的长度。以下代码展示如何使用Keras填充序列：\n>>> from keras.preprocessing.sequence import pad_sequences\n\n>>> maxlen = 100\n\n>>> X_train = pad_sequences(X_train, padding='post', maxlen=maxlen)\n>>> X_test = pad_sequences(X_test, padding='post', maxlen=maxlen)\n\n>>> print(X_train[0, :])\n[  1  10   3 282 739  25   8 208  30  64 459 230  13   1 124   5 231   8\n  58   5  67   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n   0   0   0   0   0   0   0   0   0   0]\n第一个值表示从前面的示例中学到的词汇表中的索引，可以看到生成的特征向量主要包含0值元素，这是因为句子比较短。\nKeras嵌入层|Embedding Layer\n此时，采用的数据仍然是硬编码（hardcode），且没有告诉Keras通过后续任务学习新的嵌入空间。这种情况下，就可以使用Keras 的嵌入层，它采用先前计算的整数并将它们映射到嵌入的密集向量，需要设定以下参数：\n\ninput_dim：词汇量的大小\noutput_dim：密集向量的大小\ninput_length：序列的长度\n\n使用该嵌入层有两种方法，一种方法是获取嵌入层的输出并将其插入一个全连接层（dense layer）。为此，必须在其中间添加一个flatten layer：\nfrom keras.models import Sequential\nfrom keras import layers\n\nembedding_dim = 50\n\nmodel = Sequential()\nmodel.add(layers.Embedding(input_dim=vocab_size, \n                           output_dim=embedding_dim, \n                           input_length=maxlen))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(10, activation='relu'))\nmodel.add(layers.Dense(1, activation='sigmoid'))\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\nmodel.summary()\n结果如下\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\nembedding_8 (Embedding)      (None, 100, 50)           87350     \n_________________________________________________________________\nflatten_3 (Flatten)          (None, 5000)              0         \n_________________________________________________________________\ndense_13 (Dense)             (None, 10)                50010     \n_________________________________________________________________\ndense_14 (Dense)             (None, 1)                 11        \n=================================================================\nTotal params: 137,371\nTrainable params: 137,371\nNon-trainable params: 0\n_________________________________________________________________\n可以看到，有87350个新参数需要训练，嵌入层的这些权重初始化使用随机权重初始化，并在训练期间通过反向传播进行调整，该模型将单词按照句子的顺序作为输入向量。可以使用以下方法进行训练：\nhistory = model.fit(X_train, y_train,\n                    epochs=20,\n                    verbose=False,\n                    validation_data=(X_test, y_test),\n                    batch_size=10)\nloss, accuracy = model.evaluate(X_train, y_train, verbose=False)\nprint(\"Training Accuracy: {:.4f}\".format(accuracy))\nloss, accuracy = model.evaluate(X_test, y_test, verbose=False)\nprint(\"Testing Accuracy:  {:.4f}\".format(accuracy))\nplot_history(history)\n结果如下\nTraining Accuracy: 0.5100\nTesting Accuracy:  0.4600\n\n从图中可以看到，这用来处理顺序数据时通常是一种不太可靠的方法。当处理顺序数据时，希望关注查看本地和顺序信息的方法，而不是绝对的位置信息。使用嵌入的另一种方法是在嵌入后使用MaxPooling1D/AveragePooling1D或GlobalMaxPooling1D/ GlobalAveragePooling1D层。在最大池化的情况下，可以为每个要素维度获取池中所有要素的最大值。在平均池化的情况下取得平均值。一般在神经网络中，最大池化更常用，且效果要优于平均池化。使用Keras可以在顺序模型中添加各类池化层：\nfrom keras.models import Sequential\nfrom keras import layers\n\nembedding_dim = 50\n\nmodel = Sequential()\nmodel.add(layers.Embedding(input_dim=vocab_size, \n                           output_dim=embedding_dim, \n                           input_length=maxlen))\nmodel.add(layers.GlobalMaxPool1D())\nmodel.add(layers.Dense(10, activation='relu'))\nmodel.add(layers.Dense(1, activation='sigmoid'))\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\nmodel.summary()\n结果如下\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\nembedding_9 (Embedding)      (None, 100, 50)           87350     \n_________________________________________________________________\nglobal_max_pooling1d_5 (Glob (None, 50)                0         \n_________________________________________________________________\ndense_15 (Dense)             (None, 10)                510       \n_________________________________________________________________\ndense_16 (Dense)             (None, 1)                 11        \n=================================================================\nTotal params: 87,871\nTrainable params: 87,871\nNon-trainable params: 0\n_________________________________________________________________\n训练步骤不变：\nhistory   \n\nformat(accuracy))\nloss, accuracy = model.evaluate(X_test, y_test, verbose=False)\nprint(\"Testing Accuracy:  {:.4f}\".format(accuracy))\nplot_history(history)\n结果如下\nTraining Accuracy: 1.0000\nTesting Accuracy:  0.8050\n\n可以看到，模型有一些改进。接下来，将学习如何使用预训练的词嵌入，以及是否对我们的模型有所帮助。\n使用预训练的词嵌入\n对于机器学习而言，迁移学习比较火热。在NLP中，也可以使用预先计算好的嵌入空间，且该嵌入空间可以使用更大的语料库。最流行的方法是由谷歌开发的Word2Vec和由斯坦福NLP组开发的Glove，其中Word2Vec是通过神经网络来实现，而GloVe通过共生矩阵和使用矩阵分解来实现。在这两种情况下，都是进行降维处理。但比较而言，Word2Vec更准确，GloVe的计算速度更快。下面将了解如何使用斯坦福NLP组的GloVe词嵌入，从这里下载6B大小的词嵌入（822 MB），还可以在GloVe主页面上找到其他的词嵌入，另外预训练好的Word2Vec的嵌入词可以在此下载。如果你想训练自己的词嵌入，也可以使Python的gensim包有效地完成，更多实现内容可以在此查看。下面将使用一个示例展示如何加载嵌入矩阵。示例中的文件的每一行都以单词开头，后面跟着特定单词的嵌入向量。该文件包含400000行，每行代表一个单词，后跟其向量作为浮点数流。例如，以下是第一行的前50个字符：\n$ head -n 1 data/glove_word_embeddings/glove.6B.50d.txt | cut -c-50\n    the 0.418 0.24968 -0.41242 0.1217 0.34527 -0.04445\n由于不需要涵盖所有的单词，只需关注词汇中的单词。由于词汇量有限，因此可以在预训练词嵌入时略过绝大部分单词：\nimport numpy as np\n\ndef create_embedding_matrix(filepath, word_index, embedding_dim):\n    vocab_size = len(word_index) + 1  # Adding again 1 because of reserved 0 index\n    embedding_matrix = np.zeros((vocab_size, embedding_dim))\n\n    with open(filepath) as f:\n        for line in f:\n            word, *vector = \n\n    return embedding_matrix\n可以使用下面函数检索嵌入矩阵：\n>>> embedding_dim = 50\n>>> embedding_matrix = create_embedding_matrix(\n...     'data/glove_word_embeddings/glove.6B.50d.txt',\n...     tokenizer.word_index, embedding_dim)\n下面将在训练中使用嵌入矩阵，当使用预训练词嵌入时，我们可以选择在训练期间对嵌入进行更新，或者只按照原样使用这两种方式。首先，快速查看有多少嵌入向量是非零的：\n>>> nonzero_elements = np.count_nonzero(np.count_nonzero(embedding_matrix, axis=1))\n>>> nonzero_elements / vocab_size\n0.9507727532913566\n从上可以看到，95.1%的词汇被预先训练的模型所覆盖，这是一个很好的词汇覆盖范围。下面看看使用全局池化层时的性能：\nmodel = Sequential()\nmodel.add(layers.Embedding(vocab_size, embedding_dim, \n                           weights=[ \n\n 'relu'))\n结果如下：\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\nembedding_10 (Embedding)     (None, 100, 50)           87350     \n_________________________________________________________________\nglobal_max_pooling1d_6 (Glob (None, 50)                0         \n_________________________________________________________________\ndense_17 (Dense)             (None, 10)                510       \n_________________________________________________________________\ndense_18 (Dense)             (None, 1)                 11        \n=================================================================\nTotal params: 87,871\nTrainable params: 521\nNon-trainable params: 87,350\n_________________________________________________________________\n结果如下：\nTraining Accuracy: 0.7500\nTesting Accuracy:  0.6950\n\n\n由于词嵌入没有经过额外训练，因此预计精度会降低。但是，如果通过使用trainable=True这种方式训练词嵌入，其执行效果又会是怎样呢？\nmodel = Sequential()\nmodel.add(layers.Embedding(vocab_size, embedding_dim, \n                           weights=[embedding_matrix], \n                           input_length=maxlen, \n                           trainable=True))\n\n 'relu'))\nmodel.add(layers.Dense(1, activation='sigmoid'))\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\nmodel.summary()\n结果如下\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\nembedding_11 (Embedding)     (None, 100, 50)           87350     \n_________________________________________________________________\nglobal_max_pooling1d_7 (Glob (None, 50)                0         \n_________________________________________________________________\ndense_19 (Dense)             (None, 10)                510       \n_________________________________________________________________\ndense_20 (Dense)             (None, 1)                 11        \n=================================================================\nTotal params: 87,871\nTrainable params: 87,871\nNon-trainable params: 0\n_________________________________________________________________\nhistory = model.fit(X_train, y_train,\n                    epochs=50,\n                    verbose=False,\n                    validation_data=(X_test, y_test),\n                    batch_size=10)\nloss, accuracy = model.evaluate(X_train, y_train, verbose=False)\nprint(\"Training Accuracy: {:.4f}\".format(accuracy))\nloss, accuracy = model.evaluate(X_test, y_test, verbose=False)\nprint(\"Testing Accuracy:  {:.4f}\".format(accuracy))\nplot_history(history)\n结果如下\nTraining Accuracy: 1.0000\nTesting Accuracy:  0.8250\n\n从上可以看到，使用预训练词嵌入是最有效的。在处理大型训练集时，可以加快训练过程。下面，是时候关注更先进的神经网络模型，看看是否有可能提升模型及其性能优势。\n卷积神经网络（CNN）\n卷积神经网络或是近年来机器学习领域中最令人振奋的发展成果之一，尤其是在计算机视觉领域里表现优异。关于CNN详细介绍可以看这篇文章《一文入门卷积神经网络：CNN通俗解析》，这里只做简单介绍。在下图中，可以看到卷积是如何工作的。它首先是从一个具有过滤器内核大小的输入特征开始的，且一维卷积对于平移是不变的，这意味着可以在不同位置识别某些序列，这对文本中的某些模式是很有帮助：\n\n下面演示如何在Keras中使用这个网络，Keras提供了各种卷积层：\nembedding_dim  \n\nmodel = Sequential()\nmodel.add(layers.Embedding(vocab_size, embedding_dim, input_length=maxlen))\nmodel.add(layers.Conv1D(128, 5, activation='relu'))\nmodel.add(layers.GlobalMaxPooling1D())\nmodel.Dense(10, \n结果如下\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\nembedding_13 (Embedding)     (None, 100, 100)          174700    \n_________________________________________________________________\nconv1d_2 (Conv1D)            (None, 96, 128)           64128     \n_________________________________________________________________\nglobal_max_pooling1d_9 (Glob (None, 128)               0         \n_________________________________________________________________\ndense_23 (Dense)             (None, 10)                1290      \n_________________________________________________________________\n\nTotal params: 240,129\nTrainable params: 240,129\nNon-trainable params: 0\nhistory = model.fit(X_train, y_train,\n                    epochs=10,\n                    verbose=False,\n                    validation_data=(X_test, y_test),\n                    batch_size=10)\nloss, accuracy = model.evaluate(X_train, y_train, verbose=False)\nprint(\"Training Accuracy: format(accuracy))\nloss, accuracy = model.evaluate(X_test, y_test, verbose=False)\nprint(\"Testing Accuracy:  {:.4f}\".format(accuracy))\nplot_history(history)\n结果如下\nTraining Accuracy: 1.0000\nTesting Accuracy:  0.7700\n\n从上可以看到，其准确率最高为80％，表现并不是很理想，造成这样的原因可能是：\n\n没有足够的训练样本\n拥有的数据并不能很好地概括现实\n缺乏对调整超参数的关注\n\nCNN网络一般适合在大型训练集上使用，在这些训练集中，CNN能够找到像逻辑回归这样的简单模型无法实现的概括。\n超参数优化|Hyperparameters Optimization\n深度学习和使用神经网络的一个关键步骤是超参数优化。正如在目前使用的模型中看到的那样，即使是更简单的模型，也有大量的参数可供调整和选择，这些参数被称为超参数，也是机器学习中最为耗时的部分，依赖于实验和个人经验。Kaggle上的比赛常用的方法有：一种流行的超参数优化方法是网格搜索（grid search）。这个方法的作用是获取参数列表，并使用它找到每个参数组合运行模型。简单粗暴，但计算量最大；另一种常见的方法是随机搜索（random search），只需采用随机的参数组合。为了使用Keras应用随机搜索，需要使用KerasClassifier作为scikit-learn API的包装器。使用这个包装器，可以使用scikit提供的各种工具——像交叉验证一样学习。需要的类是RandomizedSearchCV，使用交叉验证实现随机搜索。交叉验证是一种验证模型并获取整个数据集并将其分成多个测试和训练数据集的方法。常用的方法有k折交叉验证（k-fold cross-validation）和嵌套交叉验证（ nested cross-validation ），这里实现k折交叉验证法。在该方法中，数据集被划分为k个相等大小的集合，其中一个集合用于测试，其余的分区用于训练。这使得我们可以运行k个不同的运行仿真，其中每个分区都曾被用作测试集。因此，k越高，模型评估越准确，而每个测试集也越小。第一步KerasClassifier创建一个创建Keras模型的函数：\ndef create_model(num_filters, kernel_size, vocab_size, embedding_dim, maxlen):\n    model = Sequential()\n    model.add(layers.Embedding(vocab_size, embedding_dim, input_length=maxlen))\n    model.add(layers.Conv1D(num_filters, kernel_size, activation=))\n    model.add(layers.GlobalMaxPooling1D())\n    model.add(layers.Dense(10, activation='relu'))\n    model.add(layers.Dense(1, activation='sigmoid'))\n    model.compile(optimizer='adam',\n                  loss='binary_crossentropy',\n                  metrics'accuracy'])\n    return model\n接下来，定义在训练中使用的参数。它由一个字典组成，每个参数都在上一个函数中命名。网格上的空格数是3 * 3 * 1 * 1 * 1，其中每个数字是给定参数的不同选择的数量。使用以下字典初始化参数网格：\nparam_grid = dict(num_filters=[32, 64, 128],\n                  kernel_size=[3, 5, 7],\n                  vocab_size=[5000], \n                  embedding_dim=[50],\n                  maxlen=[100])\n接下来运行随机搜索：\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import RandomizedSearchCV\n\n# Main settings\nepochs = 20\nembedding_dim = 50\nmaxlen = 100\noutput_file = 'data/output.txt'\n\n# Run grid search for each source (yelp, amazon, imdb)\nfor source, frame in df.groupby('source'):\n    print('Running grid search for data set :', source)\n    sentences = df['sentence'].values\n    y = df['label'].values\n\n    # Train-test split\n    sentences_train, sentences_test, y_train, y_test = train_test_split(\n        sentences, y, test_size=0.25, random_state=1000)\n\n    # Tokenize words\n    tokenizer = Tokenizer(num_words=5000)\n    tokenizer.fit_on_texts(sentences_train)\n    X_train = tokenizer.texts_to_sequences(sentences_train)\n    X_test = tokenizer.texts_to_sequences(sentences_test)\n\n    # Adding 1 because of reserved 0 index\n    vocab_size = len(tokenizer.word_index) + 1\n\n    # Pad sequences with zeros\n    X_train = pad_sequences(X_train, padding='post', maxlen=maxlen)\n    X_test = pad_sequences(X_test, padding='post', maxlen=maxlen)\n\n    # Parameter grid for grid search\n    param_grid = dict(num_filters=[32, 64, 128],\n                      kernel_size=[3, 5, 7],\n                      vocab_size=[vocab_size],\n                      embedding_dim=[embedding_dim],\n                      maxlen=[maxlen])\n    model = KerasClassifier(build_fn=create_model,\n                            epochs=, batch_size=10,\n                            verbose=False)\n    grid = RandomizedSearchCV(estimator=model, param_distributions=param_grid,\n                              cv=4, verbose=1, n_iter=5)\n    grid_result = grid.fit(X_train, y_train)\n\n    # Evaluate testing set\n    test_accuracy = grid.score(X_test, y_test)\n\n    # Save and evaluate results\n    prompt = input(f'finished {source}; write to file and proceed? [y/n]')\n    if prompt.lower() not in {'y', 'true', 'yes'}:\n        break\n    with open(output_file, 'a') as f:\n        s = ('Running {} data set\\nBest Accuracy : '\n             '{:.4f}\\n{}Test Accuracy : {:.4f}\\n\\n')\n        output_string = s.format(\n            source,\n            grid_result.best_score_,\n            grid_result.best_params_,\n            test_accuracy)\n        print(output_string)\n        f.write(output_string)\n运行需要一段时间，最后结果输出如下：\nRunning amazon data set\nBest Accuracy : 0.8122\n{'vocab_size': 4603, 'num_filters': 64, 'maxlen': 100, 'kernel_size': 5, 'embedding_dim': 50}\nTest Accuracy : 0.8457\n\nRunning imdb data set\nBest Accuracy : 0.8161\n{'vocab_size': 4603, 'num_filters': 128, 'maxlen': 100, 'kernel_size': 5, 'embedding_dim': 50}\nTest Accuracy : 0.8210\n\nRunning yelp data set\nBest Accuracy : 0.8127\n{'vocab_size': 4603, 'num_filters': 64, 'maxlen': 100, 'kernel_size': 7, 'embedding_dim': 50}\nTest Accuracy : 0.8384\n由于某种原因，测试精度高于训练精度，这可能是因为在交叉验证期间得分存在很大差异。可以看到，使用卷积神经网络表现最佳。\n结论\n本文讲述如何使用Keras进行文本分类，从一个使用逻辑回归的词袋模型变成了越来越先进的卷积神经网络方法。本文没有涉及的另一个重要主题是循环神经网络RNN，更具体地说是LSTM和GRU。这些是处理文本或时间序列等顺序数据的强大且流行的工具。当了解上述内容后，就可以将其用于各种文本分类中，例如：电子邮件中的垃圾邮件检测、自动标记文本或使用预定义主题对新闻文章进行分类等，快动手尝试吧。\n云服务器99元拼团购！拉新还可赢现金红包！300万等你瓜分！马上一键开团赢红包： http://click.aliyun.com/m/100...\n\n\n本文作者：【方向】阅读原文\n本文为云栖社区原创内容，未经允许不得转载。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "1"}