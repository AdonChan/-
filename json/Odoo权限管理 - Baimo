{"title": "Odoo权限管理 - Baimo ", "index": "odoo,python", "content": "在Odoo中，使用用户组(res.groups)来管理权限，一个特殊的用户组是 员工/员工(base.group_user) 组，所有的用户都属于这个组，这个组里包含一些基本的权限。四种权限级别（粒度越来越细）：1．菜单/对象级别设置哪些人可以访问哪些菜单/对象，对象的访问权限包括创建、读、写、删除。2．记录级别设置哪些人可以访问哪些记录，也就是设置表的查询条件。3．字段级别设置表中的字段的访问权限。4．工作流级别（很少用到）在工作流的每一步迁移中，设置哪些角色允许触发本迁移\n下面示例使用的是account模块中的代码，所以大家有什么问题可以去odoo源码查询。关于权限的文件一般在security文件夹中，xxx_security.xml文件定义用户组和用户组对菜单的访问权限ir.model.access.csv定义用户组对对象的权限矩阵\n菜单/对象级别\n用户组\n首先创建一个组分类（表示很多组属于一个分类）：\n<record id=\"base.module_category_accounting_and_finance\" model=\"ir.module.category\">\n    <field name=\"name\">module_category_accounting_and_finance</field>\n    <field name=\"sequence\">57</field>\n</record>\n再创建一个用户组：\n<record id=\"group_account_invoice\" model=\"res.groups\">\n    <!-- 组的名字，如：员工 -->\n    <field name=\"name\">Billing</field>\n    <!-- 此组属于的组分类 -->\n    <field name=\"category_id\" ref=\"base.module_category_accounting_and_finance\"/>\n    <!-- 继承的组，也就是说这个组也拥有这些继承组的权限 -->\n    <field name=\"implied_ids\" eval=\"[(4, ref('base.group_user'))]\"/>\n</record>\n修改这个组的一些内容，如：给这组加上一个用户：\n<record id=\"group_account_invoice\" model=\"res.groups\">\n    <!-- 给这个组添加admin用户 -->\n    <field name=\"users\" eval=\"[(4, ref('base.user_root'))]\"/>\n</record>\n下面说一下eval语法：\n(0, 0, {values}) 根据values的值新建一条记录\n(1, ID, {values}) 更新id=ID的记录，（写入values的值）\n(2, ID) 删除id=ID这条记录，（调用unlink方法，删除数据及整个主从数据链接关系）\n(3, ID) 切断主从数据的链接关系但是不删除这个记录\n(4, ID) 为id=ID的数据添加主从链接关系\n(5) 删除所有的从数据的链接关系，也就是向所有的从数据调用(3, ID)\n(6, 0, [IDs]}) 用IDs中的记录替换原来的记录（相当于先执行(5)在循环执行(4, ID)）\n用户组对model的权限控制（也就是对象的访问权限）\n模块下 security 目录下的文件：ir.model.access.csv\nid,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink\naccess_product_product_account_user,product.product.account.user,product.model_product_product,group_account_user,1,0,0,0\naccess_product_product_account_manager,product.product.account.manager,product.model_product_product,group_account_manager,1,1,1,1\naccess_product_template_account_manager,product.template.account.manager,product.model_product_template,group_account_manager,1,1,1,1\naccess_product_price_history_account_manager,prices.history.account.manager,product.model_product_price_history,group_account_manager,1,1,1,1\naccess_account_payment_term,account.payment.term,model_account_payment_term,account.group_account_`user,1,0,0,0\nid：可以随便取，但是在一个模块中是唯一的，一般取名为 access_模型名_特定用户组名（用下划线连起来）name： 可以随便取，一般命名沿用模型名用“.”连接加 用户组名model:id： 要做权限控制的model，格式写法是   模块名.model_模块名(中间的‘.’换成‘_’)，如果model在此模块中，可以省略模块名，如product.model_product_productgroup:id：组的id，不是本模块的组，要在前面加上模块名，如：account.group_account_userperm_read,perm_write,perm_create,perm_unlink：这些就是具体的权限：读写增删，1 有权限，0 无权限\n菜单的权限控制\n第一种写法（所有的记录，都可以用这种方法添加及修改，如果id是一样的话就是修改这条记录，如果没有这个id就是添加该记录）\n<record id=\"menu_finance\" model=\"ir.ui.menu\">\n    <field name=\"name\">Invoicing</field>\n    <field name=\"web_icon\">account,static/description/icon.png</field>\n    <field name=\"sequence\">40</field>\n    <field name=\"groups_id\" eval=\"[(6, 0, [ref('account.group_account_user'), ref('account.group_account_manager'), ref('account.group_account_invoice')])]\"/>\n</record>\n第二种写法（简洁写法）\n<menuitem name=\"Invoicing\"\n    id=\"menu_finance\"\n    groups=\"group_account_user,group_account_manager,group_account_invoice\"\n    web_icon=\"account,static/description/icon.png\"\n    sequence=\"40\"/>\n上面的2个xml表示menu_finance这个菜单只能被group_account_user，group_account_manager，group_account_invoice 三个用户组访问如果有上级菜单，加parent属性，如果上级菜单不在本模块中，需要加模块名如：account.menu_finance：\n<menuitem id=\"menu_finance_reports\" name=\"Reports\" parent=\"menu_finance\" sequence=\"5\" groups=\"group_account_invoice\"/>\n记录级别的权限控制\n记录的权限放在\"ir.rule\"model中，所有我们添加或修改ir_rule表中的记录，就可以控制记录的权限\n<record id=\"account_move_comp_rule\" model=\"ir.rule\">\n    <!-- 规则名称 -->\n    <field name=\"name\">Account Entry</field>\n    <!-- 对应模型 -->\n    <field name=\"model_id\" ref=\"model_account_move\"/>\n    <!-- 是否全局 -->\n    <field name=\"global\" eval=\"True\"/>\n    <!-- 过滤条件 其中user表示当前登录用户对象 -->\n    <field name=\"domain_force\">['|',('company_id','=',False),('company_id','child_of',[user.company_id.id])]</field>\n    <!-- 读写增删权限（针对过滤后的记录） -->\n    <field name=\"perm_read\" eval=\"True\"/>\n    <field name=\"perm_write\" eval=\"False\"/>\n    <field name=\"perm_create\" eval=\"False\"/>\n    <field name=\"perm_unlink\" eval=\"False\"/>\n</record>\ndomain_force（也就是domain表达式的写法）写法请看我的另一篇博客domain的写法及运用。\n字段级别的权限控制\n给字段上添加用户组，表示只有这些组的用户在这个视图中才能访问和操作这个字段，如：\n<record id=\"view_invoice_line_tree\" model=\"ir.ui.view\">\n    <field name=\"name\">account.invoice.line.tree</field>\n    <field name=\"model\">account.invoice.line</field>\n    <field name=\"arch\" type=\"xml\">\n        <tree string=\"Invoice Line\">\n            <field name=\"name\"/>\n            <field name=\"account_id\" groups=\"account.group_account_user\"/>\n            <field name=\"quantity\"/>\n            <field name=\"uom_id\" groups=\"product.group_uom,account.group_account_user\"/>\n            <field name=\"price_unit\"/>\n            <field name=\"discount\" groups=\"base.group_no_one\"/>\n            <field name=\"price_subtotal\"/>\n            <field name=\"currency_id\" invisible=\"1\"/>\n        </tree>\n    </field>\n</record>\n上面xml表示在这个tree视图(这里注意，这个权限只针对这个tree视图)上，account_id，uom_id，discount这3个字段只有对应的用户组中的用户才能看到。如果你想在这个model的所有视图中都有这个权限控制的话，要在这个字段定义的时候，就要指定groups，多个用户组用\",\"分隔，如：\ngengo_private_key = fields.Text(string=\"Gengo Private Key\", copy=False, groups=\"base.group_system,base.group_user\")\n\n权限控制到这里就结束了，如果有什么错误的地方，欢迎大家指出。\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "0"}