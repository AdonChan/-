{"title": "使用Pdb调试Python - xumenger ", "index": "pdb,python", "content": "简单介绍\nPython自带 Pdb库，使用 Pdb调试 Python程序还是很方便的。但是远程调试、多线程，Pdb是搞不定的\n本文参考的相关文章如下：\n\n《指针和字符串和字符串常量、用gdb来获取非法内存中的内容》\n《Linux gdb调试器用法全面解析》\n《用PDB库调试Python程序》\n\n用Pdb调试有多种方式\n使用 Pdb调试 Python的程序的方式主要是下面的三种！下面逐一介绍\n命令行加-m参数\n命令行启动目标程序，加上-m参数，这样调用 testPdb.py的话断点就是程序执行的第一行之前\n本文接下来重点讲到的实例展示就是使用这种方式进行调试的！\npython -m pdb testPdb.py\n在python交互环境调试\n>>> import pdb\n>>> import testPdb\n>>> pdb.run('testPdb.test()')\n代码中插入一段程序\n比较常用的，就是在程序中间插入一段程序，相对于在一般 IDE 里面打上断点然后启动 debug，不过这种方式是 hardcode的\nif __name__ == \"__main__\":\n  a = 1\n  import pdb\n  pdb.set_trace()\n  b = 2\n  c = a + b\n  print(c)\n然后正常运行脚本：python testPdb.py 到了 pdb.set_trace()那里就会定下来，然后就可以看到调试的提示符 (Pdb)了\n针对上面的这段小程序的调试情况如下：\n\n准备测试程序\n接下来使用上面介绍的第一种方式来调试 Python程序，以此来介绍 pdb常用的命令，不过在开始之前先要准备好测试的程序代码：\ntestFun.py\n这是一个会被主模块调用的子模块，用于测试使用 Pdb调试的时候，是不是可以断点从主模块跟踪进入子模块（后续有说明）\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\ndef add(a, b):\n    return a + b\ntestPdb.py\n这是下面被调试的主模块的代码\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\ndef sub(a, b):\n    return a - b\n\nif __name__ == \"__main__\":\n\n    print ''\n    import testFun\n    i = 0\n    a = 1\n    while(i < 100):\n        a = testFun.add(a, 1)\n        i = i + 1\n    print \"累加结果：\", a\n    print \"\"\n\n    for letter in 'Pdb':\n        print \"当前字母：\", letter\n    print \"\"\n\n    fruits = ['banana', 'apple', 'mango']\n    for fruit in fruits:\n        print \"当前水果：\", fruit\n    print \"\"\n\n\n    ret = 0\n    for num in range(10, 12):\n        ret = sub(ret, num)\n    print '循环结果：', ret\n    print \"\"\n\n    d = {'abc': 123, 123: \"abc\"}\n    for (k,v) in d.items():\n        print \"当前键值对：\", k, '-', v\n    print \"\"\n总结常用的命令\n基础命令\nh(elp)命令：会打印当前版本 Pdb可用的命令，如果要查询某个命令，可输入 h [command] ，例如 h l 查看 list命令\n\nl(ist)命令：可以列出当前将要运行的代码块\n\n断点管理\nb(reak)：设置断点\n比如 b 12 就是在当前脚本的第 9行加上断点\n比如 b sub 就是在当前脚本的 sub函数定义处加断点\n除了可以在当前的脚本中添加断点之外，还可以在当前脚本对其他脚本下断点，以上面用到的代码为例 b testFun.add 就可以实现在 testFun.py脚本中的 add函数处加断点\n如果只用 b 就会显示现有的全部断点\n\ncondition bpnumber [condition]：设置条件断点，比如 condition 2 a==0 ，就是在第二个断点出加条件 “a==0”\n\ncl(ear)：删除断点，如果后面带有参数，就是清楚指定的断点；如果不带参数就是清除所有的断点\n\ndisable/enable：禁用/激活断点\n\n程序逻辑控制\n下面展示的几个命令，需要知道对应的脚本的代码和行号，所以这里先截图展示下面测试需要用到的前几行代码\n\nc(ont(inue))，让程序正常运行，直到遇到下一个断点\n\nn(ext)，让程序运行下一行，如果当前语句有一个函数调用，用n是不会进入被调用的函数体中的\n下图中展示的，当对脚本断点调试到 testFun.add(a, 1)时，继续执行n，并不会进入 testFun.add(a, 1)的函数内部\n\ns(tep)，跟n相似，但如果当前有一个函数调用，那么 s会进入被调用的函数体中\n下图中展示的，当对脚本断点调试到 testFun.add(a, 1)时，继续执行s，会进入 testFun.add(a, 1)对应的函数定义内部，虽然 testFun.add不是本脚本中定义的函数\n\nj(ump)，让程序跳转到指定的行数\n假如当前所在行是 10，注意：假如执行了 j 20 之后，那么相当于程序直接跳到 20行，中间的 11~19行其实就直接跳过去根本没有被执行到，所以如果这段代码中有变量的声明或对象的初始化需要在 20行及之后被用到，那么等到用到的时候就可能导致报错！\n\n打印重要信息\na(rgs)，打印当前函数的参数。比如下图就是展示断点进入到 testFun.add内部之后，打印 testFun.add的参数\n\np，打印某个变量\n\n退出调试\nq，直接退出调试；或者使用 Ctrl+D的方式退出\n\n最后说一句\n上面展示的使用 Pdb调试的过程其实是很简单的，文章中主要通过截图展示运行的效果。如果单纯的看一遍文章，不出意外，会很没有头绪，甚至感觉截图中的命令、输出乱七八糟，但是如果亲自动手跟着走一遍流程，花不了一小时，但是效果绝对极佳！\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "14"}