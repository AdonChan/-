{"title": "用Python生成MySql数据字典 - Python ", "index": "数据库,mysql,python", "content": "项目的数据库字典表是一个很重要的文档。通过此文档可以清晰的了解数据表结构及开发者的设计意图。通常为了方便我都是直接在数据库中建表，然后通过工具导出数据字典。\n在Mysql数据库中有一个information_schema库，它提供了访问数据库元数据的方式。什么是元数据呢？就是关于数据的数据，如数据库名、表名、列的数据类型、访问权限等。SCHEMATA表：提供了当前mysql实例中所有数据库的信息。是show databases的结果取之此表。TABLES表：提供了关于数据库中的表的信息（包括视图）。详细表述了某个表属于哪个schema，表类型，表引擎，创建时间等信息。show tables from schemaname的结果取之此表。COLUMNS表：提供了表中的列信息。详细表述了某张表的所有列以及每个列的信息.show columns from schemaname.tablename的结果取之此表。\n了解了生成数据字典的原理后看一下实现代码：\n#!/usr/bin/env python\n# -*- coding: utf-8 -*- \n\nimport mysql.connector as mysql\nimport sys\nimport getopt\nreload(sys)\nsys.setdefaultencoding('utf8')\n\n\ndef usage():\n    print 'help:'\n    print '--host db server,default localhost'\n    print '--port db port,default 3306'\n    print '--user db username,default root'\n    print '--password db password,default blank'\n    print '--database db name'\n    print '--output markdown output file,default current path'\n\nif __name__ == '__main__':\n    try:\n        opts,args = getopt.getopt(sys.argv[1:],\"h\",[\"help\",\"host=\",\"port=\",\"database=\",\"user=\",\"password=\",\"output=\"])\n    except getopt.GetoptError:\n        sys.exit()\n    if 'help' in args:\n        usage()\n        sys.exit()\n        print opts\n    host = 'localhost'\n    user = 'root'\n    password = ''\n    database = ''\n    port = 3306\n    output = './markdown.out'\n\n    for op,value in opts:\n        if op == '--host':\n            host = value\n        elif op == '--port':\n            port = value\n        elif op == '--database':\n            database = value\n        elif op == '--user':\n            user = value\n        elif op == '--password':\n            password = value\n        elif op == '--output':\n            output = value\n        elif op == '-h':\n            usage()\n            sys.exit()\n        if database == '':\n            usage()\n        #    sys.exit()\n    conn = mysql.connect(host=host,port=port,user=user,password=password,database='information_schema')\n    cursor = conn.cursor()\n    cursor.execute(\"select table_name,table_comment from information_schema.tables where table_schema='%s' and table_type='base table'\" % database)\n    tables = cursor.fetchall()\n    \n    markdown_table_header = \"\"\"### %s (%s) \n    字段名 | 字段类型 | 默认值 | 注解\n    ---- | ---- | ---- | ---- \n    \"\"\"\n    markdown_table_row = \"\"\"%s | %s | %s | %s\n    \"\"\"\n    f = open(output,'w')\n    for table in tables:\n        cursor.execute(\"select COLUMN_NAME,COLUMN_TYPE,COLUMN_DEFAULT,COLUMN_COMMENT from information_schema.COLUMNS where table_schema='%s' and table_name='%s'\"% (database,table[0]))\n        tmp_table = cursor.fetchall()\n        p = markdown_table_header % table;\n        for col in tmp_table:\n            p += markdown_table_row % col\n        f.writelines(p)\n        f.writelines('\\r\\n')\n    f.close()\n    print 'generate markdown success！'\n上面的执行结果会输出 markdown 格式的文件。\n数据库表名\n\n字段名\n字段类型\n默认值\n注解\n\n后面会写一篇用Python生成数据库关系图。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "3"}