{"title": "flask入门3-表单 - Python全栈玩起来 ", "index": "python,flask", "content": "flask 表单\n一、原生表单\nform.html\n{% extends 'common/base.html' %}\n{% block title %}\n    原生表单\n{% endblock %}\n{% block pagecontent %}\n{#    <form action=\"{{ url_for('check') }}\" method=\"post\">#}\n    <form action=\"{{ url_for('form') }}\" method=\"post\">\n        <p>用户名: <input type=\"text\" name=\"username\" placeholder=\"请输入用户名\" maxlength=\"12\"></p>\n        <p>密码： <input type=\"password\" name=\"userpass\" placeholder=\"请输入密码...\"></p>\n        <p><input type=\"submit\" value=\"提交\"></p>\n    </form>\n{% endblock %}\nmanage.py\n@app.route('/form/')\ndef form():\n    return render_template('form1.html')\n\n#接收表单的数据\n@app.route('/check/',methods=['POST'])\ndef check():\n    print(request.form)\n    return '提交过来了'\n将俩个路由地址合并为同一个\n@app.route('/form/',methods=['GET','POST'])\ndef form():\n    if request.method == 'POST':\n        print(request.form)\n    return render_template('form1.html')\n二、使用flask-wtf表单扩展库\n作用：  是一个用于表单处理的扩展库  提供表单的校验  csrf的功能\npip install flask-wtf\n使用\n(1) 字段类型\n\n\n字段名称\n字段类型\n\n\n\nStringField\n普通文本字段\n\n\nPasswordField\n密码框\n\n\nSubmitField\n提交按钮\n\n\nTextAreaField\n多行文本域\n\n\nHiddenField\n隐藏域\n\n\nDateField\n日期\n\n\nDateTimeField\n日期时间\n\n\nIntegerField\n整形\n\n\nFloatFIeld\n浮点型\n\n\nRadioField\n单选字段\n\n\nSelectField\n下拉\n\n\nFileField\n文件上传字段\n\n\nBooleanField\n布尔字段\n\n\n\n(2) 验证器\n\n\n验证器\n说明\n\n\n\nDataRequired\n必填\n\n\nLength\n长度 min  max\n\n\nIPAddress\nIP地址\n\n\nEmail\n邮箱\n\n\nURL\n地址\n\n\nRegexp\n正则匹配\n\n\nEqualTo\n验证俩个字段值的正确性\n\n\nNumberRange\n输入值的范围  min  max\n\n\n\n实例\n在manage中\nfrom flask import Flask,render_template,request\nfrom flask_script import Manager\nfrom flask_bootstrap import Bootstrap\n#导入自定义表单类的基类\nfrom flask_wtf import FlaskForm\n#导入表单的字段\nfrom wtforms import StringField,PasswordField,SubmitField\n#导入验证器\nfrom wtforms.validators import Length,DataRequired\n\n\napp = Flask(__name__)\nbootstrap = Bootstrap(app)\n#加密种子 csrf需要使用\napp.config['SECRET_KEY'] = 'abcdedff'\nmanager = Manager(app)\n\nclass Login(FlaskForm):\n    username = StringField('用户名',validators=[Length(min=6,max=12,message='用户名的长度为6~12为'),DataRequired(message='用户名不能为空!!!')])\n    userpass = PasswordField('密码',validators=[Length(min=6,max=12,message='用户名的长度为6~12为'),DataRequired(message='密码不能为空!!!')])\n    submit = SubmitField('登录')\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/form/',methods=['GET','POST'])\ndef form():\n    #将表单类实例化\n    form = Login()\n    if request.method == 'POST':\n        #验证是否存在正确的csrftoken和 数据的正确性 如果都正确则为真\n        if form.validate_on_submit():\n            # print(request.form)\n            print(form.username.data)\n    return render_template('form2.html',form=form)\n\n在模板中\n{% extends 'common/base.html' %}\n{% block title %}\n    原生表单\n{% endblock %}\n{% block pagecontent %}\n    <form action=\"{{ url_for('form') }}\" method=\"post\">\n        <p>{{ form.csrf_token }}</p>\n        <p>{{ form.username.label() }} {{ form.username(style='color:red;',class='userclass',placeholder='请输入用户名') }}\n            {% if  form.errors%}\n            <span style=\"color:red;\">{{ form.errors.username.0 }}</span>\n            {% endif %}\n        </p>\n        <p>{{ form.userpass.label() }} {{ form.userpass() }}</p>\n        <p>{{ form.submit() }}</p>\n    </form>\n{% endblock %}\n使用 bootstrap渲染表单\n{% import 'bootstrap/wtf.html' as wtf %}\n{% block pagecontent %}\n    <div class=\"row\">\n        <div class=\"col-md-8\">图片</div>\n        <div class=\"col-md-4\">{{ wtf.quick_form(form,action=\"\",method=\"\") }}\n        </div>\n    </div>\n{% endblock %}\n自定义表单验证器\nclass Login(FlaskForm):\n    ...\n    def validate_username(self,field):\n        # print(field)\n        if field.data == 'zhangsan':\n        # if self.username.data == 'zhangsan':\n            raise ValidationError('该用户已存在')\n注意：\nvalidate_ 验证的字段名称   为固定格式 \n所有字段和验证器方法的使用\nclass Login(FlaskForm):\n    username = StringField('用户名',validators=[Length(min=6,max=12,message='用户名的长度为6~12为'),DataRequired(message='用户名不能为空!!!')])\n    userpass = PasswordField('密码',validators=[Length(min=6,max=12,message='用户名的长度为6~12为'),DataRequired(message='密码不能为空!!!'),EqualTo('confirm',message='俩次密码输入不一致')])\n    confirm = PasswordField('确认密码')\n    info = TextAreaField('个人简介',validators=[Length(min=6,max=20,message='内容为6-20个长度'),DataRequired(message='内容不能为空')],render_kw={\"style\":\"resize:none;\",'placeholder':\"请输入你此刻的感谢...\"})\n    hidde =  HiddenField()\n    birth = DateField('出生日期')\n    birth = DateTimeField('出生日期')\n    age = IntegerField('年龄',validators=[NumberRange(min=6,max=99,message='年龄为6~99岁')])\n    money = FloatField()\n\n    sex = RadioField(choices=[('w','女'),('m','男')])\n    address = SelectField(choices=[('1001','北京'),('1002','上海'),('1003','天津')])\n\n    file = FileField('文件上传')\n\n    argee = BooleanField('请仔细阅读以上条款')\n\n    ip = StringField('IPV4',validators=[IPAddress(message='请输入正确的ip地址')])\n    url = StringField('url地址',validators=[URL(message='输入正确的url地址')])\n    email = StringField('email',validators=[Email(message='请输入正确的邮箱地址')])\n    preg = StringField('手机号码',validators=[Regexp('^[1][3-8][0-9]{9}$',flags=re.I,message='请输入正确的手机号码')])\n    submit = SubmitField('登录')\n三、flash 消息的显示\n概述： 当用户请求 或者有消息的显示 通过flash,get_flashed_messages 来进行操作\n导入\nfrom flask import flash,get_flashed_messages\nfrom flask import flash,get_flashed_messages\n\nclass Login(FlaskForm):\n    username = StringField('用户名',validators=[DataRequired(message='用户名不能为空')])\n    userpass = PasswordField('密码',validators=[DataRequired(message='密码不能为空')])\n    submit = SubmitField('登录')\n\n@app.route('/form/',methods=['GET','POST'])\ndef form():\n    form = Login()\n    if form.validate_on_submit():\n        if form.username.data == 'zhangsan' and form.userpass.data == '123456':\n            flash('登录成功')\n            return redirect(url_for('index'))\n        else:\n            flash('当前用户不存在')\n    return render_template('user/login.html',form=form)\n使用\n{% for message in get_flashed_messages() %}\n    <div class=\"alert alert-danger\" role=\"alert\">{{ message }}</div>\n{% endfor %}\nflask入门4-文件上传与邮件发送\n\n                ", "mainLikeNum": ["3 "], "mainBookmarkNum": "1"}