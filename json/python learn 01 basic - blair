{"title": "python learn 01 basic - blair ", "index": "python", "content": "Python Learn Part\nMore_Info\nContent List\n\n\n1.Python Introduce\n\n1.1 python REPL\n1.2 python helloworld.py\n1.3 python help()\n1.4 to python_string\n1.5 difference between input and raw_input\n\n\n\n2.Python Preliminary program\n\n2.1 Operators and Expression\n2.2 python control flow\n\n\n\n3.function\n\n3.1 local var\n3.2 global var\n3.3 func_key\n3.4 DocStrings\n\n\n\n4.Module\n\n4.1 sys module\n4.2 from..import\n4.3 name\n4.4 dir()\n\n\n\n1. Python Introduce\npython 少有的一种可以称得上即简单又功能强大的编程语言\npython 代表简单主义思想的语言\n➜  python git:(master) python -V\nPython 2.7.10\n➜  python git:(master)\n1.1 python REPL\n➜  python git:(master) python\nPython 2.7.10 (default, Jul 14 2015, 19:46:27)\n[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.39)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> 2**3 or pow(2, 3)\n8\n>>> x = input(\"x:\")\nx:5\n>>> print \"hello \", x\nhello  5\n>>> print 3\n3\n>>> print '3'\n3\n>>> 0xAF\n175\n>>> 010\n8\n>>> round(1.0/3.0) #四舍五入\n0.0\n>>> round(1.0/2.0)\n1.0\n>>> import math\n>>> math.floor(32.9)\n32.0\n>>> print r'C:\\nowhere''\\\\'    # 解决最后一个字符是 '\\' 的情况！ 完美解决  \nC:\\nowhere\\  \n>>> print u'hello, world'      # Unicode 字符串， 在python3.0中，所有的字符串都是 Unicode 字符串  \nhello, world  \n>>>\n1.2 python helloworld.py\n#!/usr/bin/python\n# Filename : helloworld.py\nprint 'Hello World'\n1.3 python help()\n>>> help()\n\nWelcome to Python 2.7!  This is the online help utility.\n\nhelp> input\nHelp on built-in function input in module __builtin__:\n\ninput(...)\n    input([prompt]) -> value\n\n        Equivalent to eval(raw_input(prompt)).\n        (END)\n1.4 to python_string\n\nstr\nrepr\nbackquote\n\n>>> '\"hello world\" she said'  \n'\"hello world\" she said'  \n>>> \"hello world\"  \n'hello world'  \n>>> 10000L  \n10000L  \n>>> print \"hello world\"  \nhello world  \n>>> print 10000L  \n10000  \n>>> print str(\"Hello world\")  \nHello world  \n>>> print str(10000L)  \n10000  \n1.5 input and raw_input\n>>> raw_input(\"shuru : \")  \nshuru : 6  \n'6'  \n>>> input(\"shuru : \")  #默认为合法的python表达式  \nshuru : 5  \n5   \n2. Python Preliminary program\n>>> i = 5\n>>> i = i + 1\n>>> print \\\n... i\n6\n>>> print i\n6\n>>>\n2.1 Operators and Expression\noperator precedence\nExpression\n#!/usr/bin/python\n# Filename: expression.py\n\nlength = 5\nbreadth = 2\narea = length * breadth\nprint 'Area is', area\nprint 'Perimeter is', 2 * (length + breadth)\n2.2 python control flow\n#!/usr/bin/python\n# Filename: while.py\n\nnumber = 23\nrunning = True\n\nwhile running:\n  guess = int(raw_input('Enter an integer : '))\n\n  if guess == number:\n    print 'Congratulations, you guessed it.' \n    running = False # this causes the while loop to stop\n  elif guess < number:\n    print 'No, it is a little higher than that' \n  else:\n    print 'No, it is a little lower than that' \nelse:\n  print 'The while loop is over.' \n  # Do anything else you want to do here\n\nprint 'Done'\nbreak, continue\n#!/usr/bin/python\n# Filename: continue.py\n\nwhile True:\n  s = raw_input('Enter something : ')\n  if s == 'quit':\n    break\n  if len(s) < 3:\n    continue\n  print 'Input is of sufficient length'\n  # Do other kinds of processing here...\n3. function\n3.1 local var\n#!/usr/bin/python\n# Filename: func_local.py\n\ndef func(x):\n    print 'x is', x\n    x = 2\n    print 'Changed local x to', x\n\nx = 50\nfunc(x)\nprint 'x is still', x\nOutput\n$ python func_local.pyx is 50Changed local x to 2x is still 50\n3.2 global var\n#!/usr/bin/python\n# Filename: func_global.py\n\ndef func():\n  global x\n\n  print 'x is', x\n  x = 2\n  print 'Changed local x to', x\n\nx = 50\nfunc()\nprint 'Value of x is', x\nOutput\n$ python func_global.pyx is 50Changed global x to 2Value of x is 2\n3.3 func_key\n#!/usr/bin/python\n# Filename: func_key.py\n\ndef func(a, b=5, c=10):\n  print 'a is', a, 'and b is', b, 'and c is', c\n\n  func(3, 7)\n  func(25, c=24)\n  func(c=50, a=100)\nOutput\n$ python func_key.pya is 3 and b is 7 and c is 10a is 25 and b is 5 and c is 24a is 100 and b is 5 and c is 50\n3.4 DocStrings\n# #!/usr/bin/python\n# Filename: func_doc.py\n\ndef printMax(x, y):\n  '''Prints the maximum of two numbers.\n\n    The two values must be integers.'''\n  x = int(x) # convert to integers, if possible\n  y = int(y)\n\n  if x > y:\n    print x, 'is maximum'\n  else:\n    print y, 'is maximum'\n    return y\n\nprintMax(3, 5)\nprint printMax.__doc__\noutput\n$ python func_doc.py\n5 is maximum\nPrints the maximum of two numbers.\n\n    The two values must be integers.\n4. Module\n4.1 sys 模块\n#!/usr/bin/python\n# Filename: using_sys.py\n\nimport sys\n\nprint 'The command line arguments are:'\nfor i in sys.argv:\n  print i\n\nprint '\\n\\nThe PYTHONPATH is', sys.path, '\\n'\n4.2 from..import\nyourself module\n#!/usr/bin/python\n# Filename: mymodule.py\n\ndef sayhi():\n    print 'Hi, this is mymodule speaking.'\n\nversion = '0.1'\n\n# End of mymodule.py\nmymodule_demo.py\n#!/usr/bin/python\n# Filename: mymodule_demo.py\n\nimport mymodule\n\nmymodule.sayhi()\nprint 'Version', mymodule.version\nfrom..import..\n#!/usr/bin/python\n# Filename: mymodule_demo2.py\n\nfrom mymodule import sayhi, version\n# Alternative:\n# from mymodule import *\n\nsayhi()\nprint 'Version', version\n4.3 __name__\n#!/usr/bin/python\n# Filename: using_name.py\n\nif __name__ == '__main__':\n    print 'This program is being run by itself'\nelse:\n    print 'I am being imported from another module'\n每个Python模块都有它的__name__，如果它是'__main__'，这说明这个模块被用户单独运行，我们可以进行相应的恰当操作。\n4.4 dir()\n$ python\n>>> import sys\n>>> dir(sys) # get list of attributes for sys module\n['__displayhook__', '__doc__', '__excepthook__', '__name__', '__stderr__',\n'__stdin__', '__stdout__', '_getframe', 'api_version', 'argv',\n'builtin_module_names', 'byteorder', 'call_tracing', 'callstats',\n'copyright', 'displayhook', 'exc_clear', 'exc_info', 'exc_type',\n'excepthook', 'exec_prefix', 'executable', 'exit', 'getcheckinterval',\n'getdefaultencoding', 'getdlopenflags', 'getfilesystemencoding',\n'getrecursionlimit', 'getrefcount', 'hexversion', 'maxint', 'maxunicode',\n'meta_path','modules', 'path', 'path_hooks', 'path_importer_cache',\n'platform', 'prefix', 'ps1', 'ps2', 'setcheckinterval', 'setdlopenflags',\n'setprofile', 'setrecursionlimit', 'settrace', 'stderr', 'stdin', 'stdout',\n'version', 'version_info', 'warnoptions']\n>>> dir() # get list of attributes for current module\n['__builtins__', '__doc__', '__name__', 'sys']\n>>>\n>>> a = 5 # create a new variable 'a'\n>>> dir()\n['__builtins__', '__doc__', '__name__', 'a', 'sys']\n>>>\n>>> del a # delete/remove a name\n>>>\n>>> dir()\n['__builtins__', '__doc__', '__name__', 'sys']\n>>>\n\n输入的sys模块上使用dir。我们看到它包含一个庞大的属性列表。\ndir() , 默认地，它返回当前模块的属性列表。\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}