{"title": "Fabric - 动态生成主机列表和角色列表 - yexiaoxiaobai ", "index": "env.roledefs,运维自动化,python,fabric", "content": "在使用 Fabric 的过程中，一般我们常用的方式是手工填写主机列表或者是角色列表，但是这样当服务器数量超级多的时候，你会有想死的感觉的。正好公司有 cmdb 的话，就可以结合 CMDB 来做。\n\n\n  PS：如果公司没有开发 CMDB 系统，也自己尽量弄个简单的系统录入服务器数据吧，不要那么复杂，提供 API，能获取主机列表即可。\n\n\n动态生成主机列表\n\n通过参考 Fabric 的官方文档的 Using execute with dynamically-set host lists，其中有这么一段示例代码：\n\nfrom fabric.api import run, execute, task\n\n# For example, code talking to an HTTP API, or a database, or ...\nfrom mylib import external_datastore\n\n# This is the actual algorithm involved. It does not care about host\n# lists at all.\ndef do_work():\n    run(\"something interesting on a host\")\n\n# This is the user-facing task invoked on the command line.\n@task\ndef deploy(lookup_param):\n    # This is the magic you don't get with @hosts or @roles.\n    # Even lazy-loading roles require you to declare available roles\n    # beforehand. Here, the sky is the limit.\n    host_list = external_datastore.query(lookup_param)\n    # Put this dynamically generated host list together with the work to be\n    # done.\n    execute(do_work, hosts=host_list)\n\n\n\n然后执行命令：\n\n$ fab deploy:app\n$ fab deploy:db\n\n\n其生成主机列表的格式如下：\n\n['10.2.5.1', '10.2.5.2', '10.2.5.3', '10.2.5.4', '10.2.5.5', '10.2.5.6', '10.2.5.7', '10.2.5.8', '10.2.5.9', '10.2.5.10']\n\n\n现在我们就可以根据 CMDB 接口来动态生成主机列表了。具体见代码吧\n\n方法一：\n\n#!/usr/bin/env python\n#encoding=utf-8\nimport sys\nimport os\nimport requests\n\n\nfrom fabric.api import env\nfrom fabric.api import run\nfrom fabric.api import put\nfrom fabric.api import execute\nfrom fabric.api import roles\nfrom fabric.api import parallel\nfrom fabric.api import cd\nfrom fabric.api import task\n\nenv.user = 'test'\nenv.password = 'test'\n\n\n\ncmdburl = 'http://cmdb.test.com/test/listServer.do'\n\n\ndef find_ips_by_domain(domain_name):\n     ips=[]\n     payload={'domain':domain_name}\n     res = requests.get(cmdburl, params=payload)\n     hosts=res.json()['object'][0]['servers']\n     for host in hosts:\n         host_ip=host['ip']\n         ips.append(host_ip)\n     return ips \n\n\n\n\ndef do_work():\n    run('echo \"Running stress test...\"')\n\n@task\ndef set_hosts(domain):\n    # Update env.hosts instead of calling execute()\n    host_list = find_ips_by_domain(domain)\n    execute(do_work, hosts=host_list)\n\n\n# 调用\nfab set_hosts:app\nfab set_hosts:db\n\n\n方法二：\n\n#!/usr/bin/env python\n#encoding=utf-8\nimport sys\nimport os\nimport requests\n\nfrom fabric.api import env\nfrom fabric.api import run\nfrom fabric.api import put\nfrom fabric.api import execute\nfrom fabric.api import roles\nfrom fabric.api import parallel\nfrom fabric.api import cd\nfrom fabric.api import task\n\nenv.user = 'test'\nenv.password = 'test'\n\n\n\ncmdburl = 'http://cmdb.test.com/test/listServer.do'\n\n\ndef find_ips_by_domain(domain_name):\n     ips=[]\n     payload={'domain':domain_name}\n     res = requests.get(cmdburl, params=payload)\n     hosts=res.json()['object'][0]['servers']\n     for host in hosts:\n         host_ip=host['ip']\n         ips.append(host_ip)\n     return ips \n\n\n\n@task\ndef do_work():\n    run('echo \"Running stress test...\"')\n\n@task\ndef set_hosts(domain):\n    # Update env.hosts instead of calling execute()\n    env.hosts = find_ips_by_domain(domain)\n\n\n#调用\nfab set_hosts:test.com do_work\n\n\n上面两种方法的区别是，第二种方法更容易替换执行其他任务\n\n动态生成角色列表\n\n#!/usr/bin/env python\n#encoding=utf-8\nimport sys\nimport os\nimport requests\n\nfrom fabric.api import env\nfrom fabric.api import run\nfrom fabric.api import put\nfrom fabric.api import execute\nfrom fabric.api import roles\nfrom fabric.api import parallel\nfrom fabric.api import cd\nfrom fabric.api import task\n\nenv.user = 'test'\nenv.password = 'test'\n\n\ncmdburl = 'http://cmdb.test.com/test/listServer.do'\n\n## 根据域名（服务名）查询该域的所有服务器列表\ndef find_ips_by_domain(domain_name):\n     ips=[]\n     payload={'domain':domain_name}\n     res = requests.get(cmdburl, params=payload)\n     hosts=res.json()['object'][0]['servers']\n     for host in hosts:\n         host_ip=host['ip']\n         ips.append(host_ip)\n     return ips \n\n@task\ndef gener_roles(domain_name):\n    ips = find_ips_by_domain(domain_name)  \n    ### 动态生成角色列表\n    **env.roledefs['ips'] = map(lambda x: x, ips)**\n    ### 根据生成的角色列表处理任务\n    execute(do_work)\n\n@roles('ips')\ndef do_work():\n    run('echo \"Running stress test...\"')\n\n\n执行任务的方式为：\n\n fab gener_roles:test.com\n\n\n参考资料\n\n\nUsing execute with dynamically-set host lists\nhttp://my.oschina.net/indestiny/blog/290239\n\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "6"}