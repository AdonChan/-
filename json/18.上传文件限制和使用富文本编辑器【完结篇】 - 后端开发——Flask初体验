{"title": "18.上传文件限制和使用富文本编辑器【完结篇】 - 后端开发——Flask初体验 ", "index": "flask,python", "content": "本文是后端开发——Flask初体验专栏的最后一篇文章，整个Q&A demo的简单框架其实已经建立起来了，现在就是再优化、完善一些细节。本文首先完善一下前文上传头像的部分，增加上传文件的大小和格式限制，其次把发布问答部分中，问题的详细描述部分从普通的textarea修改为富文本编辑器TinyMCE，这样可以在问题描述中添加各种格式的信息，如代码、表格、列表、图片等。最后，整个demo已经上传到GitHub:QADemoByFlask，欢迎大家访问、关注和交流。\n\n首先在config.py中添加\nMAX_CONTENT_LENGTH = 1 * 1024 * 1024\n表示最大上传文件的限制是1MB，添加完成即可，Flask会自动处理，如果上传的文件超出，会抛出异常，显示无法连接，但程序不会中断；其次在exts.py中添加函数：\ndef allowed_file(filename):\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1] in ['jpg', 'jpeg', 'png', 'gif']\n我们用这个来确保用户上传的文件是指定的4种扩展名的格式。再从werkzeug库中导出secure_filename来检验文件名的安全性，这一步也是十分必要的，具体原因可参考Flask文档。此时视图函数修改如下：\n@app.route('/user/avatar/', methods=['GET', 'POST'])\ndef avatar():\n    if request.method == 'POST':\n        file = request.files['avatar_upload']\n        if file and allowed_file(file.filename):\n            filename = secure_filename(file.filename)\n            base_path = path.abspath(path.dirname(__file__))\n            filename = str(g.user.id) + '.' + filename.rsplit('.', 1)[1]\n            file_path = path.join(base_path, 'static', 'images', 'uploads', filename)\n            file.save(file_path)\n            g.user.avatar_path = 'images/uploads/' + filename\n            db.session.commit()\n    return render_template('avatar.html')\n\n现在网上有许多富文本编辑器可供我们使用，这里选择TinyMCE，详情和文档可以浏览其官网。首先需要引用tinymce.min.js这个文件，就像是用Bootstrap一样，我们可以直接在线引用，但会有个讨厌的提示，如下图：\n\n因此我直接将其下载（开发版下载）到本地，解压至项目的static文件夹，同时下载汉化文件zh_CN.js，放入langs文件夹，文件夹结构如下：\n\n然后在static/javascript文件夹中新建一个tinymce_setup.js文件，用于配置TinyMCE，其内容如下：\ntinymce.init({\n    selector: '#tinymce-content',\n    language:'zh_CN',\n    height:200,\n    plugins: [\n            'advlist autolink link image lists charmap print preview hr anchor pagebreak spellchecker',\n            'searchreplace wordcount visualblocks visualchars code fullscreen insertdatetime media nonbreaking',\n            'save table contextmenu directionality emoticons template paste textcolor',\n            'codesample',\n    ],\n     toolbar: 'insertfile undo redo | \\\n     styleselect | \\\n     bold italic | \\\n     alignleft aligncenter alignright alignjustify | \\\n     bullist numlist outdent indent | \\\n     link image | \\\n     print preview media fullpage | \\\n     forecolor backcolor emoticons |\\\n     codesample fontsizeselect fullscreen',\n     nonbreaking_force_tab: true,\n});\n代码中selector其实就是css中的选择器，会把对应的html元素替换成TinyMCE富文本编辑器，plugins和toolbar是设定编辑器带有哪些功能和按钮。此时可以在question.html中引入TinyMCE的js和配置文件的js，如下：\n<script src=\"{{ url_for('static', filename='tinymce/js/tinymce/tinymce.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='javascript/tinymce_setup.js') }}\"></script>\n其实还需要引入jQuery，但我们之前在引入Bootstrap的时候，在base.html中已经引入了，而question.html又继承自base.html。将question.html中的\n<div class=\"form-group\">\n    <textarea class=\"form-control\" rows=\"6\" placeholder=\"问题描述\" name=\"question_desc\"></textarea>\n</div>\n替换为\n<div class=\"tinymce-group\">\n    <textarea id=\"tinymce-content\" name=\"question_desc\"></textarea>\n</div>\n此时再点击发布问答进入页面，已经可以使用TinyMCE了，如下：\n\n随便插入张图片，点击提交试试，发现后端获取到的数据是带html标记的文本，数据库数据如下：\n\n而detail.html中的内容也是这样的字符串：\n\n如何把这样的内容渲染成html呢？其实很简单，给html中的参数加个safe过滤器就可以了：\n{{ question.content | safe }}\n此时detail.html中的图片就正常显示了：\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}