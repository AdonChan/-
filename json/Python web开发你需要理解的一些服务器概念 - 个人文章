{"title": "Python web开发你需要理解的一些服务器概念 - 个人文章 ", "index": "wsgi,uwsgi,python", "content": "1.Python web开发你需要理解的一些服务器概念\n  前几日在生产服务器上部署Python web.py的一个项目，发现自己对服务器的一些概念不是很明白，遂查资料看了一会，特此做出个人的一些算是笔试的总结吧，以便之后可以回顾\n2.WSGI\n  全称是Web Server Gateway Interface,WSGI不是服务器，也不是API或者Python的什么模块之类的，它只是一种Python web的一种规范，类似于Java web里面的servlet规范，WSGI规范定义了web应用（web框架）与web服务器之间交互的接口，约定了WSGI server怎么去调用web应用程序类或者函数，web应用程序需要符合什么样的规范。而下面说的uWSGI就是一种支持WSGI规范的服务器，或者你可以将uWSGI理解为一种支持WSGI规范的容器，所以我们可以将web应用部署到uWSGI中，然后当它接受请求时，就会按照WSGI定义的接口回调web应用来处理请求。  WSGI定义了两种角色，分别为server端（或者gateway端）和application端（或者framework端），需要server端和application端都支持WSGI，一般而言server端是uWSGI，application端是一个可调用对象（callable object），可调用对象可以是类、方法或者可调用的实例，这个对象接受两个参数environ(请求的环境变量)和start_response（回调函数）。\n\nenviron是一个字典，包含了客户端请求的信息，如 HTTP 请求的首部，方法等信息，可以认为是请求上下文\nstart_response一个用于发送HTTP响应状态（HTTP status ）、响应头（HTTP headers）的回调函数。在返回内容之前必须先调用这个回调函数\n\ndef simple_app(environ, start_response):\n    \"\"\"\n    docstring, it's just a test application\n    \"\"\"\n    status = '200 OK'\n    response_headers = [('Content-type', 'text/html')]\n    start_response(status, response_headers)\n    return ['Hello World']\n  上面的回调函数的作用是让WSGI server返回响应的首部和HTTP状态码，这个函数必须有两个参数，第一个是状态码，第二个是响应的首部元组组成的列表，并且回调函数设置状态码和首部需要在return响应HTTP body之前执行。  值得一说的是，return返回的响应信息应该是一个可迭代对象，上面的例子中将字符串放在了列表里面，如果直接返回字符串，会导致WSGI服务器对字符串进行迭代而影响速度。\n3 uWSGI\n  是一个web服务器，实现了WSGI协议、uwsgi协议、http协议等\n4 UWSGI\n  一种规范，或者说是一种通信协议，主要用在代理服务器（如Nginx）与uWSGI服务器之间的通信，而WSGI主要是用在uWSGI服务器和应用程序之间的通信。\n5 请求流程\n\n首先nginx 是对外的服务接口，外部浏览器通过url访问nginx；\nnginx 接收到浏览器发送过来的http请求，将包进行解析，分析url，如果是静态文件请求就直接访问用户给nginx配置的静态文件目录，直接返回用户请求的静态文件。如果不是静态文件，而是一个动态的请求，那么nginx就将请求转发给uWSGI,uWSGI接收到请求之后将包进行处理，处理成WSGI可以接受的格式，根据请求调用应用程序的某个文件，某个文件的某个函数，最后处理完将返回值再次交给uWSGI,uWSGI将返回值进行打包，打包成UWSGI能够接收的格式，并转发给nginx,nginx最终将返回值返回给浏览器.\n\n6 小问题\n从上面可以看出，Nginx这一层并不是必须的，uWSGI服务器完全可以完成整个和浏览器的交互，但是需要考虑下面的情况\n\n安全问题，程序不能直接被浏览器访问到，而是通过nginx,nginx只开放某个接口，uWSGI本身是内网接口，这样运维人员在nginx上加上安全性的限制，可以达到保护程序的作用\n负载均衡问题，一个uWSGI很可能不够用，即使开了多个work也是不行，毕竟一台机器的cpu和内存都是有限的，有了nginx做代理，一个nginx可以代理多台uWSGI完成uWSGI的负载均衡\n静态文件问题，用django或是uWSGI这种东西来负责静态文件的处理是很浪费的行为，而且他们本身对文件的处理也不如nginx好，所以整个静态文件的处理都直接由nginx完成，静态文件的访问完全不去经过uWSGI以及其后面的东西。\n\n参考文章： python nginx+uwsgi+WSGI 处理请求详解Nginx + uWSGI + Webpy配置&原理.md\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}