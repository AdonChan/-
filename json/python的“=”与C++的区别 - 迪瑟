{"title": "python的“=”与C++的区别 - 迪瑟 ", "index": "c,python", "content": "先来看python中普通变量传值\ndata1=1\ndata2=data1\ndata2+=1\nprint data2,data1\n2 1\n对于普通变量python和c是一样的，接下来看看python的列表\ndata1=[1,2,3,4]\ndata2=data1\ndata2+=[5]\nprint data1\n[1, 2, 3, 4, 5]\nprint data2\n[1, 2, 3, 4, 5]\ndata1=[1,2,3,4]\ndata2=data1\ndata2.append(5)\nprint data1\n[1, 2, 3, 4, 5]\nprint data2\n[1, 2, 3, 4, 5]\ndata1=[1,2,3,4]\ndata2=data1\ndata2=data2+[5]\nprint data1\n[1, 2, 3, 4]\nprint data2\n[1, 2, 3, 4, 5]\n由此可以看到python list传值时，传递的是指针。但是从上面代码可以看到data2=data2+[5]跟前面运行结果不一样，这是因为data2=data2+[5]在python中应该是分两步运算的，先把右值传递给栈内的一个变量，然后再把这个变量传给data2，所以运算后data1跟data2的指针不在一起。由于python中的元组相当与C中的常量数组，不分析元组，接下来看看python中的字典变量\ndata1={}\ndata1[\"ont\"]=\"st1\"\ndata2=data1\ndata1[2]=\"st2\"\nprint data1\n{2: 'st2', 'ont': 'st1'}\nprint data2\n{2: 'st2', 'ont': 'st1'}\n字典中传递的也是地址，接下来看看一种特殊的字典，即字典中对应的值是个list\nfrom collections import defaultdict\ndata1=defaultdict(list)\nb=data1[\"one\"]\nb.append(\"1\")\nb.append(\"2\")\nprint data1\ndefaultdict(<type 'list'>, {'one': ['1', '2']})\nprint b\n['1', '2']\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}