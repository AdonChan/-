{"title": "用python写通用restful api service（一） - zhoutk ", "index": "python,flask,rest-api,mysql", "content": "一直在用node.js做后端，要逐步涉猎大数据范围，注定绕不过python，因此决定把一些成熟的东西用python来重写，一是开拓思路、通过比较来深入学习python；二是有目标，有动力，希望能持之以恒的坚持下去。\n项目介绍\n用python语言来写一个restful api service，数据库使用mysql。因为只做后端微服务，并且ORM的实现方式，采用自动生成SQL的方式来完成，因此选择了轻量级的flask作为web框架。如此选择，主要目的是针对中小规模的网络应用，能充分利用关系数据库的种种优势，来实现丰富的现代互联网应用。\nrestful api\nrestful api 的概念就不介绍了。这里说一下我们实现协议形式：\n[GET]/rs/user/{id}/key1/value1/key2/value2/.../keyn/valuen         \n[POST]/rs/user[/{id}]         \n[PUT]/rs/user/{id}\n[DELETE]/rs/user/{id}/key1/value1/key2/value2/.../keyn/valuen\n说明：\n\nrs为资源标识；\n第二节，user，会被解析为数据库表名；\n查询时，id为空或0时，id会被忽略，即为列表查询；\n新建和修改，除接收form表单外，url中的id参数也会被合并到参数集合中；\n删除同查询。\n\n让flask支持正则表达式\nflask默认路由不支持正则表达式，而我需要截取完整的URL自己来解析，经查询，按以下步骤很容易完成任务。\n\n使用werkzeug库 ：from werkzeug.routing import BaseConverter\n定义转换器：\n\nclass RegexConverter(BaseConverter):\n    def __init__(self, map, *args):\n        self.map = map\n        self.regex = args[0]\n\n注册转换器 ： app.url_map.converters['regex'] = RegexConverter\n用正则来截取url : @app.route('/rs/<regex(\".*\"):query_url>', methods=['PUT', 'DELETE', 'POST', 'GET'])\n\n几点疑问：\n\n正则（.*）理论上应该是匹配任何除回车的所有字符，但不知道为什么，在这里不识别问号（？）\n我用request.data来取表单数据，为何request.form取不到？\n'/rs/<regex(\".\"):query_url>'后若加个反斜杠（'/rs/<regex(\".\"):query_url>/'），request.data就取不到数据，为什么？\n\n解析json数据\n解析json数据很容易，但我需要对客户端送上来的数据进行校验，下面是用异常处理又只解析一次的解决方案。\ndef check_json_format(raw_msg):\n    try:\n        js = json.loads(raw_msg, encoding='utf-8')\n    except ValueError:\n        return False, {}\n    return True, js\nURL解析\n按既定协议解析URL，提取表名，为生成sql组合参数集合。\n@app.route('/rs/<regex(\".*\"):query_url>', methods=['PUT', 'DELETE', 'POST', 'GET'])\ndef rs(query_url):\n    (flag, params) = check_json_format(request.data)\n\n    urls = query_url.split('/')\n    url_len = len(urls)\n    if url_len < 1 or url_len > 2 and url_len % 2 == 1:\n        return \"The params is wrong.\"\n\n    ps = {}\n    for i, al in enumerate(urls):\n        if i == 0:\n            table = al\n        elif i == 1:\n            idd = al\n        elif i > 1 and i % 2 == 0:\n            tmp = al\n        else:\n            ps[tmp] = al\n\n    ps['table'] = table\n    if url_len > 1:\n        ps['id'] = idd\n    if request.method == 'POST' or request.method == 'PUT':\n        params = dict(params, **{'table': ps.get('table'), 'id': ps.get('id')})\n    if request.method == 'GET' or request.method == 'DELETE':\n        params = ps\n    return jsonify(params)\npycharm项目配置\n配置好Run/Debug Configurations才能在IDE中运行并单步调试，可以很熟悉flask框架的运行原理。\n\nScript path : /usr/local/bin/flask\nParameters : run\n\n环境变量\n\nFLASK_APP = index.py\nLC_ALL = en_US.utf-8\nLANG = en_US.utf-8\n\n\n\n本以为配置完上面三条就能运行了，因为在终端模拟器上就已经能正常运行。结果在IDE中出现了一堆莫名的错误，仔细看，大概是编码配置的问题。经搜索，还需要配置后面两个环境变量才能正常运行，大概原因是python版本2与3之间的区别。\n完整代码\ngit clone https://github.com/zhoutk/pyrest.git\ncd pyrest\nexport FLASK_APP=index.py\nflask run\n小结\n今天利用flask完成了web基础架构，能够正确解析URL，提取客户端提交的数据，按请求的不同方式来组合我们需要的数据。\n\n                ", "mainLikeNum": ["6 "], "mainBookmarkNum": "20"}