{"title": "python开发-实现redis中的发布订阅功能 - wyzane ", "index": "redis,python", "content": "redis中的发布/订阅模型是一种消息通信模式，今天聊一下在python中实现简单的发布订阅功能。\n实现方式一: redis_helper.py: 封装发布订阅方法\nimport redis\n                \n                \nclass RedisHelper(object):\n    \n    def __init__(self):\n        self.__conn = redis.Redis(host=\"localhost\")\n        # 订阅频道\n        self.chan_sub = \"fm104.5\"\n        \n    def public(self, msg):\n        \"\"\"\n        在指定频道上发布消息\n        :param msg:\n        :return:\n        \"\"\"\n        # publish(): 在指定频道上发布消息，返回订阅者的数量\n        self.__conn.publish(self.chan_sub, msg)\n        return True\n\n    def subscribe(self):\n        # 返回发布订阅对象，通过这个对象你能1）订阅频道 2）监听频道中的消息\n        pub = self.__conn.pubsub()\n        # 订阅频道，与publish()中指定的频道一样。消息会发布到这个频道中\n        pub.subscribe(self.chan_sub)\n        ret = pub.parse_response()  # [b'subscribe', b'fm86', 1]\n        print(\"ret:%s\" % ret)\n        return pub\nredis_pub.py: 发布者\nfrom redis_helper import RedisHelper\n                \n                \nobj = RedisHelper()\nfor i in range(5):\n    obj.public(\"hello_%s\" % i)\nredis_sub.py: 订阅者\nfrom redis_helper import RedisHelper\n                \n                \nobj = RedisHelper()\nredis_sub = obj.subscribe()\nwhile True:\n    msg = redis_sub.parse_response()\n    print(msg)\n实现方式二: redis_helper.py: 封装发布订阅方法\nimport redis\n                \n                \nclass RedisHelper(object):\n    \n    def __init__(self):\n        self.__conn = redis.Redis(host=\"localhost\")\n        # 频道名称\n        self.chan_sub = \"orders\"\n        \n    def public(self, msg):\n        \"\"\"\n        在指定频道上发布消息\n        :param msg:\n        :return:\n        \"\"\"\n        # publish(): 在指定频道上发布消息，返回订阅者的数量\n        self.__conn.publish(self.chan_sub, msg)\n        return True\n\n    def subscribe(self):\n        # 返回发布订阅对象，通过这个对象你能1）订阅频道 2）监听频道中的消息\n        pub = self.__conn.pubsub()\n        # 订阅某个频道，与publish()中指定的频道一样。消息会发布到这个频道中\n        pub.subscribe(self.chan_sub)\n        return pub\nredis_pub.py:\nfrom redis_helper import RedisHelper\n\n\nobj = RedisHelper()\nfor i in range(5):\n    obj.public(\"hello_%s\" % i)\nredis_sub.py:\nfrom redis_helper import RedisHelper\n\nobj = RedisHelper()\nredis_sub = obj.subscribe()\nwhile True:\n    # listen()函数封装了parse_response()函数\n    msg = redis_sub.listen()\n    for i in msg:\n        if i[\"type\"] == \"message\":\n            print(str(i[\"channel\"], encoding=\"utf-8\") + \":\" + str(i[\"data\"], encoding=\"utf-8\"))\n        elif i[\"type\"] == \"subscrube\":\n            print(str(i[\"chennel\"], encoding=\"utf-8\"))\n以上两种方式的不同之处在于，方式一使用发布订阅对象的parse_response()方法获取订阅信息，方式二使用发布订阅对象的listen()方法获取订阅信息。listen()方法是对parse_response()方法的封装，加入了阻塞，并将parse_response()返回的结果进行了处理，使结果更加简单。\n参考自 链接描述\n以上就是发布/订阅的简单实现，如有错误，欢迎交流指正！\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}