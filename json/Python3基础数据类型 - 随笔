{"title": "Python3基础数据类型 - 随笔 ", "index": "python", "content": "一、说明\nPython 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。在 Python 中，变量就是变量，它没有类型，我们所说的\"类型\"是变量所指的内存中对象的类型。等号（=）用来给变量赋值。等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。\n例如：\n#!/usr/bin/python3\n \ncounter = 100          # 整型变量\nmiles   = 1000.0       # 浮点型变量\nname    = \"runoob\"     # 字符串\na = b = c = 1          # 同时为多个变量赋值\na,b,c=1,2,'hello'      # 为多个对象指定多个变量\n二、标准数据类型\nPython3 中有六个标准的数据类型：\nNumber（数字）\nString（字符串）\nList（列表）\nTuple（元组）\nSets（集合）\nDictionary（字典）\n2.1 Number（数字）\nPython3 支持 int、float、bool、complex（复数）只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。内置的 type() 函数可以用来查询变量所指的对象类型。\n>>> a,b,c,d=5,6.7,true,2+3j\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'true' is not defined\n>>> a,b,c,d=5,6.7,True,2+3j\n>>> print(type(a),type(b),type(c),type(d))\n<class 'int'> <class 'float'> <class 'bool'> <class 'complex'>\n注意：\n1、Python可以同时为多个变量赋值，如a, b = 1, 2。\n2、一个变量可以通过赋值指向不同类型的对象。\n3、数值的除法（/）总是返回一个浮点数（print（2/4）输出0.5），要获取整数使用//操作符。\n4、在混合计算时，Python会把整型转换成为浮点数。 5、布尔型：Ture和False、1和0\n6、del语句可删除定义的对象，如：del a,b\n\n2.2 String（字符串）\nPython中的字符串用单引号(')或双引号(\")括起来，同时使用反斜杠转义特殊字符。字符串的截取的语法格式如下：\n变量[头下标:尾下标]\n索引值以 0 为开始值，-1 为从末尾的开始位置。加号 (+) 是字符串的连接符， 星号 (*) 表示复制当前字符串，紧跟的数字为复制的次数。\n例子：\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\nstr='hello,world!'\n\nprint(str)                 # 输出字符串\nprint(str[0:-1])           # 输出第一个到倒数第二个的所有字符\nprint(str[0])              # 输出字符串第一个字符\nprint(str[2:5])            # 输出从第三个开始到第五个的字符\nprint(str[2:])             # 输出从第三个开始的后的所有字符\nprint(str * 2)             # 输出字符串两次\nprint(str + '你好')        # 连接字符串\n\nprint('------------------------------')\n\nprint('hello\\nworld')      # 使用反斜杠(\\)+n转义特殊字符\nprint(r'hello\\nworld')     # 在字符串前面添加一个 r，表示原始字符串，不会发生转义\n执行结果\nhello,world!                  \nhello,world                  \nh                  \nllo\nllo,world!\nhello,world!hello,world!\nhello,world!你好\n\n------------------------------\n\nhello\nworld\nhello\\nworld\n注意：\n 1、反斜杠可以用来转义，使用r可以让反斜杠不发生转义。\n 2、字符串可以用+运算符连接在一起，用*运算符重复。\n 3、Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。\n 4、Python中的字符串不能改变。\n 5、Python 没有单独的字符类型，一个字符就是长度为1的字符串。\n \n2.3 List（列表）\nList（列表） 是 Python 中使用最频繁的数据类型。列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。列表是写在方括号[]之间、用逗号分隔开的元素列表。和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。\n列表截取的语法格式如下：\n变量[头下标:尾下标]\n索引值以 0 为开始值，-1 为从末尾的开始位置。加号（+）是列表连接运算符，星号（*）是重复操作。\n例子：\n#!/usr/bin/python3\n# -*- coding:UTF-8 -*-\n\nlist=['hello',357,6.6,'world']\nttlist=[123,'new']\n\nprint(list)                # 输出完整列表\nprint(list[0])             # 输出列表第一个元素\nprint(list[1:3])           # 输出从第2个开始到第3个元素\nprint(list[2:])            # 输出从第三个开始的后的所有元素\nprint(ttlist * 2)          # 输出两次列表\nprint(str + ttlist)        # 连接列表\n执行结果\n['hello', 357, 6.6, 'world']\nhello\n[357, 6.6]\n[6.6, 'world']\n[123, 'new', 123, 'new']\n['hello', 357, 6.6, 'world', 123, 'new']\n与Python字符串不一样的是，列表中的元素是可以改变的：\n>>> new=[1,2,3,4,5,'hi']       \n>>> new\n[1, 2, 3, 4, 5, 'hi']\n>>> new[1]='hehe'           #改变列表new中的第2个元素为hehe\n>>> new\n[1, 'hehe', 3, 4, 5, 'hi']\n>>> new[2:4]=[8,10]         #改变列表new中的第3/4个元素为8,9\n>>> new\n[1, 'hehe', 8, 10, 5, 'hi'\n>>> new[2:4]=[]            #删除列表new中的第3、4个元素\n>>> new\n[1, 'hehe', 5, 'hi']\n>>> new[2:3]=[]\n注意：\n   1、List写在方括号之间，元素用逗号隔开。\n   2、和字符串一样，list可以被索引和切片.\n   3、List可以使用+操作符进行拼接。 \n   4、List中的元素是可以改变的。\n   \n2.4 Tuple（元组）\n 元组（tuple）与列表类似，不同之处在于元组的元素不能修改。\n 元组写在小括号()里，元素之间用逗号隔开。\n 元组中的元素类型也可以不相同, \n 元组与字符串类似，可以被索引且下标索引从0开始，-1 为从末尾开始的位置。也可以进行截取。\n 其实，可以把字符串看作一种特殊的元组。   \n构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则：\ntup1 = ()     # 空元组\ntup2 = (20,)  # 一个元素，需要在元素后添加逗号\nstring、list和tuple都属于sequence（序列）。\n注意：\n1、与字符串一样，元组的元素不能修改。\n2、元组也可以被索引和切片，方法一样。\n3、注意构造包含0或1个元素的元组的特殊语法规则。\n4、元组也可以使用+操作符进行拼接。\n\n2.5 Sets（集合）\n集合（set）是一个无序不重复元素的序列。\n基本功能是进行成员关系测试和删除重复元素。\n可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。 \n\n例子：\n#!/usr/bin/python3\n\nstudent = {'Tom', 'Jim', 'Mary', 'Tom', 'Jack', 'Rose'}\nprint(student)  # 输出集合，重复的元素被自动去掉\n\n# 成员测试\nif ('Rose' in student):\n    print('Rose 在集合中')\nelse:\n    print('Rose 不在集合中')\n\n# set可以进行集合运算\na = set('abracadabra')\nb = set('alacazam')\n\nprint(a)\nprint(b)\nprint(a - b)  # a和b的差集\nprint(b - a)  # b和a的差集\nprint(a | b)  # a和b的并集\nprint(a & b)  # a和b的交集\nprint(a ^ b)  # a和b中不同时存在的元素\n输出结果：\n{'Jim', 'Mary', 'Rose', 'Tom', 'Jack'}\nRose 在集合中\n{'d', 'c', 'r', 'a', 'b'}\n{'l', 'c', 'm', 'a', 'z'}\n{'d', 'b', 'r'}\n{'l', 'm', 'z'}\n{'l', 'd', 'c', 'r', 'm', 'a', 'b', 'z'}\n{'c', 'a'}\n{'l', 'd', 'r', 'm', 'b', 'z'}\n2.6 Dictionary（字典）\n字典（dictionary）是Python中另一个非常有用的内置数据类型。\n列表是有序的对象结合，字典是无序的对象集合。\n两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。\n字典是一种映射类型，字典用\"{ }\"标识，它是一个无序的键(key) : 值(value)对集合.\n键(key)必须使用不可变类型。\n在同一个字典中，键(key)必须是唯一的。 \n例子:\n#!/usr/bin/python3\n\ndict = {}\ndict['one'] = \"1 - hello,world\"\ndict[2] = \"2 - 嘿嘿\"\n\ntinydict = {'name': 'lucy', 'code': 100, 'class': '5年级6班'}\n\nprint(dict['one'])  # 输出键为 'one' 的值\nprint(dict[2])  # 输出键为 2 的值\nprint(tinydict)  # 输出完整的字典\nprint(tinydict.keys())  # 输出所有键\nprint(tinydict.values())  # 输出所有值\n输出结果:\n1 - hello,world\n2 - 嘿嘿\n{'name': 'lucy', 'code': 100, 'class': '5年级6班'}\ndict_keys(['name', 'code', 'class'])\ndict_values(['lucy', 100, '5年级6班'])\n内置函数：\nget 根据key值去对应的value取不到值返回None，不报错\n>>> dic = {'k1':'v1','k2':'v2'}\n>>> v = dic.get('k1')\n>>> print(v)\nv1\nclear 清空\n>>> dic = {'k1':'v1','k2':'v2'}\n>>> v = dic.clear()\n>>> print(dic)\n{}\n>>> print(v)\nNone\ncopy 拷贝（浅拷贝）\n>>> dic = {'k1':'v1','k2':'v2'}\n>>> v = dic.copy()\n>>> print(v)\n{'k1':'v1','k2':'v2'}\npop 删除并获取对应的value值\n>>> dic = {'k1':'v1','k2':'v2'}\n>>> v = dic.pop('k1')\n>>> print(dic)\n{'k2':'v2'}\n>>> print(v)\nv1\npopitem 随机删除键值对，并获取到删除的键值\n>>> dic = {'k1':'v1','k2':'v2'}\n>>> v = dic.popitem()\n>>> print(dic)\n{'k1':'v1'}\n>>> print(v)\n{'k2':'v2'}\nsetdefault 增加，如果key值存在则不操作\n>>> dic = {'k1':'v1','k2':'v2'}\n>>> dic.setdefault('k3','v3')\n>>> print(dic)\n{'k1':'v1','k2':'v2','k3':'v3'}\nupdate 批量增加或修改\ndic = {'k1':'v1','k2':'v2'}\ndic.update({'k3':'v3','k4':'v4'})\nprint(dic)\n{'k1':'v1','k2':'v2','k3':'v3','k4':'v4'}\n注意：\n1、字典是一种映射类型，它的元素是键值对。\n2、字典的关键字必须为不可变类型，且不能重复。\n3、创建空字典使用 { }。\n\n三、数据类型转换\n数据类型的转换，你只需要将数据类型作为函数名即可。\n以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。\n\n\n函数\n描述\n\n\n\nint(x [,base])\n将x转换为一个整数\n\n\nfloat(x)\n将x转换到一个浮点数\n\n\ncomplex(real [,imag])\n创建一个复数\n\n\nstr(x)\n将对象 x 转换为字符串\n\n\nrepr(x)\n将对象 x 转换为表达式字符串\n\n\neval(str)\n用来计算在字符串中的有效Python表达式,并返回一个对象\n\n\ntuple(s)\n将序列 s 转换为一个元组\n\n\nlist(s)\n将序列 s 转换为一个列表\n\n\nset(s)\n转换为可变集合\n\n\ndict(d)\n创建一个字典。d 必须是一个序列 (key,value)元组。\n\n\nfrozenset(s)\n转换为不可变集合\n\n\nchr(x)\n将一个整数转换为一个字符\n\n\nunichr(x)\n将一个整数转换为Unicode字符\n\n\nord(x)\n将一个字符转换为它的整数值\n\n\nhex(x)\n将一个整数转换为一个十六进制字符串\n\n\noct(x)\n将一个整数转换为一个八进制字符串\n\n\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "6"}