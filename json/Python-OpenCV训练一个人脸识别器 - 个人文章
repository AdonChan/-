{"title": "Python-OpenCV训练一个人脸识别器 - 个人文章 ", "index": "python,opencv", "content": "想要能人脸识别，我们需要训练一个识别器处理。训练的话就需要之前已经标注好的训练集，在前一篇文章中，我们创建了一个已经标注好的训练集。现在，是时候用这个训练集来训练一个人脸识别器了。当然，是用OpenCV Python。\n准备\n首先，我们在（前一篇文章的）同目录下创建一个叫Python文件，名为trainner.py，用于编写数据集生成脚本。同目录下，创建一个文件夹，名为trainner，用于存放我们训练后的识别器。\n现在，项目目录大概如此：\n\n其他乱七八糟的文件、目录，都是之前的文章中创建的。\n在开始之前，我们先安装一个Python库，Pillow：\npip install pillow\n开始Coding\n导入库\n编写训练程序需要先做是：\n\n导入opencv库\n导入os库，用于方法文件\n导入numpy库，用于计算\n导入pillow库，用于处理图像\n\n其实就是这样：\nimport cv2\nimport os\nimport numpy as np\nfrom PIL import Image\n现在我们初始化识别器和人脸检测器：\nrecognizer = cv2.face.LBPHFaceRecognizer_create()\n# 有可能是 recognizer = cv2.createLBPHFaceRecognizer()\ndetector = cv2.CascadeClassifier(\"haarcascade_frontalface_default.xml\")\n如果face.LBPHFaceRecognizer_create或createLBPHFaceRecognizer显示不存在，则需要下载opencv-contrib-python：\npip install opencv-contrib-python\n当然用IDE的也行：\n\n载入训练数据\n恩，现在我们来创建一个函数，用于从数据集文件夹中获取训练图片，然后从图片的文件名中获取到这个素材相应的id。需要remind的是，根据前文，图片的格式是User.id.samplenumber。\n给函数起个名字，就叫get_images_and_labels吧（Python不建议用驼峰），然后参数需要有素材的文件夹：\ndef get_images_and_labels(path):\n在函数中，我们需要的做的有：\n\n从数据集文件夹中载入训练图片\n获取到人脸和id\n整理成list并返回\n\n获取图片：\nimage_paths=[os.path.join(path, f) for f in os.listdir(path)]\n新建两个list用于存放：\nface_samples=[]\nids=[]\n遍历图片路径，导入图片和id，添加到list：\n    for image_path in image_paths:\n        image = Image.open(image_path).convert('L')\n        image_np = np.array(image, 'uint8')\n        image_id = int(os.path.split(image_path)[-1].split(\".\")[1])\n        faces = detector.detectMultiScale(image_np)\n        for (x, y, w, h) in faces:\n            face_samples.append(image_np[y:y + h, x:x + w])\n            ids.append(image_id)\n以上代码，使用了Image.open(image_path).convert(‘L’)通过图片路径并将其转换为灰度图片。\n接下来我们通过image_np = np.array(image, 'uint8')将图片转换成了Numpy数组，Numpy数组的逻辑结构和普通的数组无异，但是是经过优化的。\n为了获取到id，我们将图片的路径分裂一下并获取相关信息，即image_id = int(os.path.split(image_path)[-1].split(\".\")[1])\n接下来的一个循环for (x, y, w, h) in faces则是将图片和id都添加在list中。\n再return一下即可。\n训练\n差不多完成了，现在我们调用一下这个函数，然后将我们的数据喂给识别器去训练吧。\nfaces, Ids = get_images_and_labels('dataSet')\nrecognizer.train(faces, np.array(Ids))\nrecognizer.save('trainner/trainner.yml')\n现在只要我们运行这些代码，程序就会在trainner文件夹中创建一个trainner.yml文件。\n\n这个yml文件，存着我们的训练好的数据，以后识别会用到的。\n完整代码\nimport cv2\nimport os\nimport numpy as np\nfrom PIL import Image\n\n# recognizer = cv2.createLBPHFaceRecognizer()\ndetector = cv2.CascadeClassifier(\"haarcascade_frontalface_default.xml\")\nrecognizer = cv2.face.LBPHFaceRecognizer_create()\n\n\ndef get_images_and_labels(path):\n    image_paths = [os.path.join(path, f) for f in os.listdir(path)]\n    face_samples = []\n    ids = []\n\n    for image_path in image_paths:\n        image = Image.open(image_path).convert('L')\n        image_np = np.array(image, 'uint8')\n        if os.path.split(image_path)[-1].split(\".\")[-1] != 'jpg':\n            continue\n        image_id = int(os.path.split(image_path)[-1].split(\".\")[1])\n        faces = detector.detectMultiScale(image_np)\n        for (x, y, w, h) in faces:\n            face_samples.append(image_np[y:y + h, x:x + w])\n            ids.append(image_id)\n\n    return face_samples, ids\n\n\nfaces, Ids = get_images_and_labels('dataSet')\nrecognizer.train(faces, np.array(Ids))\nrecognizer.save('trainner/trainner.yml')\n先这样吧\n原文，若有错误之处请指出，更多地关注煎鱼。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "4"}