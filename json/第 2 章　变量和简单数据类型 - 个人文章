{"title": "第 2 章　变量和简单数据类型 - 个人文章 ", "index": "python", "content": "第 2 章　变量和简单数据类型\n2.2 变量\nmessage = \"Hello World!\"\nmessage 就是变量，这个变量存储了一个值。\n2.2.1　变量的命名和使用\n\n变量名：字母，数字，下划线。message_1\n\n用下划线分割单词\n变量名具有描述性：name_length 比 length_of_persons_name 好\n慎用小写字母i和大写字母O，容易当成数字1和0\n\n2.2.2　使用变量时避免命名错误\n2.3 字符串\n2.3.1　使用方法修改字符串的大小写\n方法跟在字符串后面调用。\nname = 'bramble xu'\nprint(name.title())\n输出的结果是Bramble Xu.\n\n\nname.title() : 能把每个单词的首字母变为大写\n\nname.upper() : 全是大写\n\nname.lower() : 全是小写\n\n2.3.2　合并（拼接）字符串\n用+号来拼接字符。\nfirst_name = 'bramble'\nlast_name = 'xu'\nfull_name = first_name + ' ' + last_name\n\nprint('Hello, ' + full_name.title() + '!')\n输出结果Hello, Bramble Xu!\n2.3.3　使用制表符或换行符来添加空白\n\n\n\\t : 制表符\n\n\\n : 换行符\n\n>>> print(\"\\tPython\")\n    Python\n\n>>> print(\"Languages:\\n\\tPython\\n\\tC\\n\\tJavaScript\")\nLanguages:\n    Python\n    C\n    JavaScript\n2.3.4　删除空白\n在用户登录网站的时候检查用户名是否有空白，删去空白。\n\n\n'python '.rstrip(): 删除右边空白\n\n' python'.lstrip(): 删除左边空白\n\n' python '.strip(): 删除两边空白\n\n要注意，这里调用strip()方法后，并没有对原本的字符串进行更改。想要永久删除空白，必须把删除操作的结果保存到变量里。\n  >>> favorite_language = 'python '\n❶ >>> favorite_language = favorite_language.rstrip()\n  >>> favorite_language\n  'python'\n2.3.5　使用字符串时避免语法错误\nmessage = 'One of Python's strengths is its diverse community.' 比如这种一句话里有三个单引号，就造成了语法错误。\n可以把外围的双引号用单引号代替message = \"One of Python's strengths is its diverse community.“\n2.4　数字\n2.4.1　整数\n需要注意一下除法\n在Python 3.0中，’/’总是执行真除法，不管操作数的类型，都会返回包含任何余数的浮点结果；’//’执行Floor除法，截除掉余数并且针对整数操作数返回一个整数，如果有任何一个操作数是浮点数，则返回一个浮点数。\nFloor除法：效果等同于math模块中的floor函数：\n\nmath.floor(x) ：返回不大于x的整数\n所以当运算数是负数时：结果会向下取整。\n\n>>> 5//3   #1.6666666666666667\n1\n>>> -5//3\n-2 \n与floor()函数类似的还有很多，比如trunc()函数：\n>>> import math\n>>> math.trunc(-1.6)\n-1\n>>> math.trunc(1.6)\n1\n2.6　Python之禅\n>>> import this\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}