{"title": "正则表达式总结 - 湖边漫步 ", "index": "python", "content": "工具\nRegexpal是一个在线Javascript正则表达式处理器，地址是:http://www.regexpal.com\n学习正则重要的是实践操作，不妨举个栗子：\n匹配号码：707-827-7019\n字符组匹配\n[0-9][0-9][0-9]-[0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]\n\n\\d匹配任意阿拉伯数字\\D匹配任何非阿拉伯数字.匹配任意字符\n\\d\\d\\d\\D\\d\\d\\d\\D\\d\\d\\d\\d\\D\n\\d\\d\\d.\\d\\d\\d.\\d\\d\\d\\d.\n捕获分组与后向应用\n用圆括号()创建分组,用\\1来对捕获分组内容进行向后引用\n(\\d)\\d\\1   则匹配707\n\n完整匹配号码：\n^(\\(\\d{3}\\)|^\\d{3}[.-]?)?\\d{3}[.-]?\\d{4}$\n\n^ 表示一行起始位置( 表示捕获分组的起始符\\( 表示左括号\\d{3} 表示匹配三位数字\\) 表示右括号| 表示选择[.-]? 匹配一个可选的点号或连字符) 捕获分组的结束符? 表示分组可选$ 表示行结束为止\n边界\n匹配行或字符串起始位置使用脱字符 ^ 匹配行或字符串末尾位置使用美元符 $\n量词\n量词默认是贪心的贪心的量词会首先匹配整个字符串。尝试匹配时，他会选定尽可能多的内容，也就是整个输入。量词首先匹配整个字符，如果失败则回退一个字符再次尝试。这个过程就叫做 回溯。懒惰的量词是从目标的起始位置开始寻找匹配。每次检查字符串的一个字符，寻找他要匹配的内容。最后，他会尝试匹配整个字符串。占有量词会覆盖整个目标，然后尝试寻找匹配内容，但是他只尝试一次，不会回溯。 如使用 .* 匹配任何字符零次或多次\n贪心量词\n使用花括号{}可限制某个模式在某个范围内匹配的次数，另外，未经修饰的量词就是贪心量词7{1,}与7+7{0,}与7*7?与7{0,1}本质上则是一样7{m,n}  则会匹配m到n次\n懒惰量词\n末尾加上?则使量词变懒惰7??     首先7?匹配零个或一个7，懒惰后不会匹配任何内容7*?     匹配零个77+?     匹配一个77{m,n}? 匹配m个7\n关于正则匹配html，xml标签，下次再写\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "3"}