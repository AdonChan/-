{"title": "Python基础学习之常用六大数据类型 - 个人文章 ", "index": "python", "content": "刚开始学习一门编程语言，除了了解运行环境与语言类型之外，最基本还是从该语言的基本数据类型开始学起。\nPython六大常用数据类型：\n\nint        整数\nfloat      浮点数\nstr        字符串\nlist       列表\ntuple      元组\ndict       字典\n\n讲解这些先说一下python中的变量与变量名。变量其实本质上是一个具有特殊格式的内存，变量名则是指向这个内存的别名。python中的变量不需要声明，所有的变量必须赋值了才能使用。赋值的步骤：\na = 100\n\n第一步：准备好值100第二部：准备好变量名a第三部：将值与名字进行关联\n一、整数python将其他一些静态语言中的int、long，也就是整型和长整型合并为了一个。python中的int是边长的，也就是说可以存储无限大的整数，但是这是不现实的，因为没有这么多的内存够分配。整型不仅支持十进制，还支持二进制、八进制、十六进制。可以通过下面的方式来互相转换：\nprint(bin(20)) #转换二进制\nprint(oct(20)) #转换八进制\nprint(hex(20)) #转换十六进制\n\n二、浮点型浮点数也就是小数，如22.1,44.2，也可以使用科学计数法,比如：1.22e8。python支持对整数和浮点数直接进行四则混合运算。整数运算结果仍然是整数，浮点数运算结果仍然是浮点数,但整数和浮点数混合运算的结果就变成浮点数了。\na = 1\nb = 1.1\nprint(type(a+b)) #<class 'float'>\n\n三、字符串字符串在任何编程语言中都是最常用的数据类型。字符串的创建很简单，也是上面所说的三步，但是要加上单引号或者双引号。\na = \"hello python\"\n\n也可以使用 \"\"\" 创建多行字符串：\na = \"\"\"\n    hello\n    python\n\"\"\"\n\n字符串可以通过下面方式进行截取或者连接：\nprint (str[0:4])      输出第一个到倒数第四个的所有字符\nprint (str[0])        输出单字符 第1个字符\nprint (str[3:])       输出从第四个开始之后的所有字符\nprint (str * 2)       输出字符串两次\nprint (str + \"bbbb\")  连接字符串\n\n字符串常用函数：str.strip() 消除字符串s左右两边的空白字符（包括't'，'n','r',''）len(str)    获取字符串长度str.upper() 转换为大写str.lower() 转换为小写str.title() 每个单词首字母大写str.capitalize() 首字母大写字符串翻转：\na = 'abcde'\nprint(a[::-1])\n\n字符串分割：\na = 'hello,python'\nprint(a.split(',')) #['hello', 'python'] 返回一个列表\n\n相对应的还有一个将列表元素连接成字符串:\na = ['hello', 'python']\nstr = '-'\nprint(str.join(a)) # hello-python\n\n四、列表列表的写法是一个方括号内的值用逗号分隔。比如上面的['hello', 'python']。列表的数据项不需要具有相同的类型，列表中的每个元素都分配一个数字索引，第一个索引是0，第二个索引是1，依此类推。访问列表中的值可以通过下面的方式：\nlist1 = [1, 2, 3, 4, 5, 6]\nprint(list1[2])\n\n同样可以通过索引截取\nprint (\"list1[2:5]: \", list1[2:5])\n\n列表常用操作:list1.append('7') 追加一个元素在末尾，每次只能添加一个len(list1) 返回列表元素个数max(list1) 返回列表元素最大值min(list1) 返回列表元素最小值list1.count(obj) 统计某个元素在列表中出现的次数list1.index(obj) 从列表中找出某个值第一个匹配项的索引位置list1.reverse()  反向列表中元素list1.clear()     清空列表list1.extend(seq)  在列表末尾一次性追加另一个序列中的多个值,也就是扩充了列表append与extend的区别：\nA = ['a', 'b', 'c']\nA.append(['d', 'e'])\nprint(A) # ['a', 'b', 'c', ['d', 'e']]\n\nB = ['a', 'b', 'c']\nB.extend(['d', 'e'])\nprint(B) # ['a', 'b', 'c', 'd', 'e']\n\nextend方法只能接收list类型，它是把这个列表中的每个元素添加到原list中。append可以接收任意类型，追加到原list的末尾。\n五、元组元组的创建也很简单，和list类似，只是把'[]'换成了'()'。\ntup1 = ('hello', 'python')\n\n元组中只有一个元素的时候要注意：\ntup2 = (10)\ntup3 = ('a')\nprint(type(tup2)) #<class 'int'>\nprint(type(tup3)) #<class 'str'>\n\n因为这样会被解释器当做运算符，所以正确的方法是在第一个元素后面添加逗号。\ntup4 = ('a',)\nprint(type(tup4)) #<class 'tuple'>\n\n元组同样可以使用下标索引来访问元组中的值：\ntup5 = ('hello', 'python', 'hello', 'word')\nprint(tup5[1]) #python\nprint(tup5[1:3]) #('python', 'hello')\n\n注意：元组是不可以被修改的。\ntup6 = ('hello', 'python', 'hello', 'word')\ntup6[2] = 'aaa'\n\n上面会出现一个异常： TypeError: 'tuple' object does not support item assignment但是元组中如果包含了一个列表，那么这个列表是可以被修改的。\ntup7 = ('hello', 'python', 'hello', 'word', ['aa', 'bb', 'cc'])\ntup7[-1][1] = 'ddd'\nprint(tup7) # ('hello', 'python', 'hello', 'word', ['aa', 'ddd', 'cc'])\n\n元组运算符：len(tup)     计算元素个数tup1 + tup2     连接生成新元组tup * 4      元组复制num in tup     元素是否存在,返回True/False\n六、字典python中的字典就是key，value的形式。使用大括号包含起来。字典中的成员的键是唯一的,如果出现多个同名的键，那么写在后面覆盖前面的值。形式如下：\ndict1 = {'a' : 1, 'b' : 2}\n\n字典的常用操作最基本的也就是增删改查:获取：直接通过键来获取。\ndict['b'] # 2\n\ndict.keys()  获取字典中所有的键dict.values()获取字典中的所有的值增加：\ndict1['c'] = 3 #{'a': 1, 'b': 2, 'c': 3} #如果键存在则更新对应的值\n\n修改：直接给键进行再次赋值就可以修改键对应的值了。如果键不存在，则变成添加成员。还可以通过：\ndict1.update({\"a\":\"11\"})\ndict1.setdefault(\"a\", \"222\") # 已存在的键则修改无效\ndict1.setdefault(\"d\",\"222\") # 不存在的话则创建\ndict1.setdefault(\"e\") # 没有设置值为None\n\n删除：使用pop删除指定键对应的成员,同时返回该值\nprint(dict1) # {'a': '11', 'b': 2, 'c': 3, 'd': '222', 'e': None}\nprint(dict1.pop(\"a\")) # a\nprint(dict1) # {'b': 2, 'c': 3, 'd': '222', 'e': None}\n#在不设置默认值的情况下，使用pop删除不存在的键，会报错。\nprint(dict1.pop(\"f\")) # 报错 KeyError: 'f'\n\n如果设置了默认值， print(dict1.pop(\"f\", None))，则不会报错，返回这个默认值。判断是否删除成功可以通过下面方式来判断：\nif dict1.pop(\"f\", None) == None:\n    print('键不存在')\nelse:\n    print('删除成功')\n\n以上则是python中最基本的数据类型以及用法，当然还有其他的数据类型，作者暂时只列举了这些。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}