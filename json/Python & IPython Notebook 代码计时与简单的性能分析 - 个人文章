{"title": "Python & IPython Notebook 代码计时与简单的性能分析 - 个人文章 ", "index": "python", "content": "本文记录一些用于 Python 代码计时和简单性能分析的工具。强烈推荐后两种工具。\nbegin & end 手动计时\nMatlab 里有一对 tic toc 命令，使用格式如下：\ntic\n% do anything\ntoc\n之后会打印中间的代码执行时间。这种风格对于简单的计时还是挺好用的。遗憾的是 Python 中没有类似的特别方便的模块，只能用类似于下面的代码进行模仿：\nfrom time import time\n\nbegin = time()\n# do anything\nend = time()\nprint(end - begin)\ntimeit 模块\ntimeit 模块用起来特别不方便：\nfrom timeit import timeit\n\ntimeit(stmt='code to run', setup='init code', number=1000000)\n后来逐渐发现这个模块是设计在 Shell 命令行模式下使用的，而不是在 IPython notebook 模式下使用的。因此这里不多介绍，需要在 Shell 命令行下计时时可以查阅其 Shell 模式下的使用方法。\nIPython Notebook %%time\n使用 IPython Notebook 时，最简单的代码计时应该是 %%time 魔法命令（magic command, I am a Zhong 2）\n%%time\n# code to run...\n注意，'%%' 开头的魔法命令必须写在一个 cell 的第一行，并且通常以 cell 中剩余的内容作为输入变量。也就是这个魔法命令把 cell 中剩余的代码作为输入变量，对其进行计时。\nline_profiler\nline_profiler 是一个强大的代码逐行时间或者空间开销分析工具，笔者通常用于代码逐行运行时间分析，从而定位到用时最多的代码，并且能得到每行代码耗时百分比。定位到代码热点之后可以对热点进行优化，从而以最小的改动而最大程度上提升代码效率。本文仅介绍笔者常用的一种方式。\n使用前需要安装：\nconda install line_profiler\n# or\npip install line_profiler\n在 Notebook 中使用，需要运行\n%load_ext line_profiler\n使用 line_profiler 进行时间分析时，需要指定分析的函数，该工具只会对这个函数中的代码进行逐行分析。比如对函数 hello 和函数 hi 进行逐行分析，在 Notebook 中命令为\n%lprun -f hello -f hi hello()\n-f 参数表明接下来要指定一个函数名进行分析，最后一个参数则是要运行的代码。该命令会运行最后一个参数指定的代码，然后在运行时分析所有需要分析的函数。该命令运行之后会打印一个逐行分析报告。\n更详细的使用方法参考 如何进行 Python性能分析，你才能如鱼得水？，easy profile python in jupyter 以及这些模块的帮助文档和官方文档。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "1"}