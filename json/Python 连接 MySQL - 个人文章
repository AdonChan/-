{"title": "Python 连接 MySQL - 个人文章 ", "index": "python", "content": "一、普通 MySQL 连接方法\n  使用模块 MySQLdb 普通方式连接。\n#!/usr/bin/env python\n# _*_ coding:utf-8 _*_\n\nimport MySQLdb\n\nconn = MySQLdb.connect(host='127.0.0.1', port=3306, user='root', passwd='123', db='test')\ncursor = conn.cursor()\n\nsql_1 = \"select * from user where id = %s;\" % (5,)\nsql_2 = \"select * from user \\\n         where id = %s;\" % (5,)\nsql_3 = \"\"\"\n           insert into user(username, password)\n           values(\"yuchaoshui\", \"123\");\n        \"\"\"\n\ntry:\n    print cursor.execute(sql_1)\n    print cursor.fetchall()\n\n    print cursor.execute(sql_2)\n    print cursor.fetchall()\n\n    print cursor.execute(sql_3)\n    conn.commit()\n\nexcept Exception as e:\n    print(e)\n    conn.rollback()\n\ncursor.close()\nconn.close()\n   execute() 返回结果表示影响的行数。cursor.fetchone() 取回一条结果。sql_1 直接一行写完，sql_2 换行写完， sql_3 多行写。 查询时不需要 commit() 操作，插入、更新、删除时需要 commit() 提交。\n二、使用连接池连接MySQL\n#!/usr/bin/env python\n# _*_ coding:utf-8 _*_\n\nimport MySQLdb\nfrom DBUtils.PooledDB import PooledDB\n\npool = PooledDB(MySQLdb, 5, host='127.0.0.1', port=3306, user='root', passwd='123', db='test')\nconn = pool.connection()\ncursor = conn.cursor()\n\nsql_1 = \"select * from user where id = %s;\" % (5,)\nsql_2 = \"select * from user \\\n         where id = %s;\" % (5,)\nsql_3 = \"\"\"\n           insert into user(username, password)\n           values(\"yuchaoshui\", \"123\");\n        \"\"\"\ntry:\n    print cursor.execute(sql_1)\n    print cursor.fetchall()\n\n    print cursor.execute(sql_2)\n    print cursor.fetchall()\n\n    print cursor.execute(sql_3)\n    conn.commit()\n\nexcept Exception as e:\n    print(e)\n    conn.rollback()\n\ncursor.close()\nconn.close()\n   5 为连接池里的最少连接数， 以后每次需要数据库连接就是用connection()函数获取连接就好了\nPooledDB 的默认值\nPooledDB(self, creator, mincached=0, maxcached=0, maxshared=0, maxconnections=0, blocking=False, maxusage=None, setsession=None, reset=True, failures=None, ping=1, *args, **kwargs)\nPooledDB的参数：\n\nmincached，最少的空闲连接数，如果空闲连接数小于这个数，pool会创建一个新的连接\nmaxcached，最大的空闲连接数，如果空闲连接数大于这个数，pool会关闭空闲连接\nmaxconnections，最大的连接数，\nblocking，当连接数达到最大的连接数时，在请求连接的时候，如果这个值是True，请求连接的程序会一直等待，直到当前连接数小于最大连接数，如果这个值是False，会报错，\nmaxshared , 当连接数达到这个数，新请求的连接会分享已经分配出去的连接\n\n\n三、模块导入连接 MySQL\n  以连接池的方式，编写模块 mysqlhelper.py，可以在项目的其他地方导入MySQL连接实例即可使用。 模块点此下载 mysqlhelper.py\n#!/usr/bin/env python\n# _*_ coding:utf-8 _*_\n\nfrom __future__ import print_function\nfrom DBUtils.PooledDB import PooledDB\nimport MySQLdb\nimport sys\n\n__all__ = ['m'] + [\"m\"+str(i) for i in range(2, 11)]\n\nclass MH(object):\n    def __init__(self):\n        try:\n            print(\"Connecting MySQL Server {0}@{1}:{2} ..\".format(\n                self.__class__.db, self.__class__.host, self.__class__.port), end='.')\n\n            self.conn = self.__class__.pool.connection()\n            self.cursor = self.conn.cursor()\n            print(' ok!')\n        except Exception, e:\n            print(\"pool.connection error: {0}\".format(e))\n\n    def select(self, query=''):\n        try:\n            self.effect = self.cursor.execute(query)\n            return self.cursor\n        except Exception as e:\n            print(\"select error: {0}\".format(e))\n\n    def update(self, query=''):\n        try:\n            self.effect = self.cursor.execute(query)\n            self.conn.commit()\n        except Exception as e:\n            print(\"update error: {0}\".format(e))\n            self.conn.rollback()\n            self.effect = 0\n\n\n# M2 类继承自 M1，表示一个新的 MySQL 连接池。\n# 如果需要新的连接池 ，按照如下格式新增即可。\nclass MH2(MH):\n    pass\n\n\ndef init_pool(M,\n            host='127.0.0.1', \n            port=3306, \n            user='root', \n            password='', \n            database='test',\n            pool_size=5): \n\n    M.host = host\n    M.port = int(port)\n    M.user = user\n    M.password = password\n    M.db = database\n    M.pool_size = pool_size\n    try:\n        M.pool = PooledDB(MySQLdb, \n            M.pool_size,\n            host=M.host,\n            port=M.port,\n            user=M.user,\n            passwd=M.password,\n            db=M.db)\n    except Exception, e:\n        print(\"PooledDB init error: {0}\".format(e))\n        exit(1)\n\n\n# 初始化连接池，可以有多个。第一个参数是前面手动定义的连接池类。\ninit_pool(MH, '127.0.0.1', 3306, 'root', '123', 'test')\ninit_pool(MH2, '12.55.5.61', 3306, 'root', '123', 'test')\n\n\n# 定义将要被导出的MySQL实例。 一个连接池可同时提供多个实例对象。\nm = MH()\nm2 = MH2()\n\n\nif __name__ == \"__main__\":\n    pass\n    #print \"\\nm info:\"\n    #print m.select(\"select * from user;\").fetchone()\n    #print m.effect\n    #print m.select(\"select * from user;\").fetchall()\n    #print m.effect\n    #m.update(\"insert into user(username,password) values('haha', 'heihei');\")\n    #print m.effect\n    ##################################################\n    #print \"\\nm2 info:\"\n    #print m2.select(\"select * from user;\").fetchone()\n    #print m2.effect\n    #print m2.select(\"select * from user;\").fetchall()\n    #print m2.effect\n    #m2.update(\"insert into user(username,password) values('haha', 'heihei');\")\n    #print m2.effect\n\n使用方法\n#!/usr/bin/env python\n# _*_ coding:utf-8 _*_\n\nfrom mysqlhelper import m, m2\nimport time\n\ndef test():\n    print \"\\nm info:\"\n    print m.select(\"select * from user;\").fetchone()\n    print m.effect\n    print m.select(\"select * from user;\").fetchall()\n    print m.effect\n    m.update(\"insert into user(username,password) values('haha', 'heihei');\")\n    print m.effect\n    \n    #################################################\n    \n    print \"\\nm2 info:\"\n    print m2.select(\"select * from user;\").fetchone()\n    print m2.effect\n    print m2.select(\"select * from user;\").fetchall()\n    print m2.effect\n    m2.update(\"insert into user(username,password) values('haha', 'heihei');\")\n    print m2.effect\n\nif __name__ == '__main__':\n    test()\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}