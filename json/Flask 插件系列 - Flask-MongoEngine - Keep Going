{"title": "Flask 插件系列 - Flask-MongoEngine - Keep Going ", "index": "flask,python", "content": "简介\nMongoDB 是一个文档型数据库，是 NoSQL (not only SQL) 的一种，具有灵活、易扩展等诸多优点，受到许多开发者的青睐。MongoEngine 是一个用来操作 MongoDB 的 ORM 框架，如果你不知道什么是 ORM，可以参考 Flask-SQLAlchemy 一节。在 Flask 中，我们可以直接使用 MongoEngine，也可使用 Flask-MongoEngine ，它使得在 Flask 中使用 MongoEngine 变得更加简单。\n安装\n使用 pip 安装，如下：\n$ pip install flask-mongoengine\n使用\n在使用之前，请确保 mongo 服务已经开启。\n配置\n我们需要配置 MongoDB 的相关参数，以便我们能访问数据库。\n# -*- coding: utf-8 -*-\n\nfrom flask import Flask\nfrom flask_mongoengine import MongoEngine\n\napp = Flask(__name__)\napp.config['MONGODB_SETTINGS'] = {\n    'db': 'test',\n    'host': '127.0.0.1',\n    'port': 27017\n}\n\ndb = MongoEngine(app)\n上面的代码中，我们在 app.config 的 MONGODB_SETTINGS 字典中配置了数据库、主机和端口。如果数据库需要身份验证，那我们需要在该字典中添加 username 和 password 参数，比如：\napp.config['MONGODB_SETTINGS'] = {\n  'db': 'test', \n  'username':'admin', \n  'password':'12345'\n}\n另外，上面的配置也可以改成下面的方式：\napp.config['MONGODB_DB'] = 'test'\napp.config['MONGODB_HOST'] = '127.0.0.1'\napp.config['MONGODB_PORT'] = 27017\napp.config['MONGODB_USERNAME'] = 'admin'\napp.config['MONGODB_PASSWORD'] = '12345'\n如果我们想在应用初始化前配置数据库，比如使用工厂方法，可以类似这样做：\nfrom flask import Flask\nfrom flask_mongoengine import MongoEngine\ndb = MongoEngine()\n\n...\n\napp = Flask(__name__)\napp.config.from_pyfile('config.json')\ndb.init_app(app)\n定义数据模型\n接下来，我们需要定义数据模型。这里，我们以一个 Todo 数据库为例，数据模型定义如下：\nfrom datetime import datetime\n\nclass Todo(db.Document):\n    meta = {\n        'collection': 'todo',\n        'ordering': ['-create_at'],\n        'strict': False,\n    }\n\n    task = db.StringField()\n    create_at = db.DateTimeField(default=datetime.now)\n    is_completed = db.BooleanField(default=False)\n在上面的代码中，我们定义了一个 Todo 类，meta 字典设置了 collection，ordering 和 strict，其中 ordering 的值可以指定你的 QuerySet 的默认顺序，strict 的值指定是否使用严格模式，默认值是 True，也就是使用严格模式，这就意味着如果数据库的记录如果存在某些字段没有在我们的数据模型中声明，那程序在运行时会产生一个 FieldDoesNotExist 的错误。因此，我们的数据模型定义最好跟记录中的字段保持一致。\n查询数据\n查询所有数据使用 all() 方法\ntodos = Todo.objects().all()\n查询满足某些条件的数据\ntask = 'cooking'\ntodo = Todo.objects(task=task).first()\n其中，first() 方法会取出满足条件的第 1 条记录。\n添加数据\n添加数据使用 save() 方法\ntodo1 = Todo(task='task 1', is_completed=False)\ntodo1.save()\n数据排序\n排序使用 order_by() 方法\ntodos = Todo.objects().order_by('create_at')\n更新数据\n更新数据需要先查找数据，然后再更新\ntask = 'task 1'\ntodo = Todo.objects(task=task).first()  # 先查找\nif not todo:\n    return \"the task doesn't exist!\"\n\ntodo.update(is_completed=True)   # 再更新\n删除数据\n删除数据使用 delete() 方法：先查找，再删除\ntask = 'task 6'\ntodo = Todo.objects(task=task).first()  # 先查找\nif not todo:\n    return \"the task doesn't exist!\"\n\ntodo.delete()   # 再删除\n分页\n分页可结合使用 skip() 和 limit() 方法\nskip_nums = 1\nlimit = 3\n\ntodos = Todo.objects().order_by(\n    '-create_at'\n).skip(\n    skip_nums\n).limit(\n    limit\n)\n使用 paginate() 方法\ndef view_todos(page=1):\n    todos = Todo.objects.paginate(page=page, per_page=10)\n本文完整的代码在这里。\n本文由 funhacks 发表于个人博客，采用 Creative Commons BY-NC-ND 4.0（自由转载-保持署名-非商用-禁止演绎）协议发布。非商业转载请注明作者及出处。商业转载请联系作者本人。本文标题为: Flask 插件系列 - Flask-SQLAlchemy本文链接为: https://funhacks.net/2016/11/...\n更多阅读\nflask-mongoengine\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "7"}