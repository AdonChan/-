{"title": "Tornado-03、Tornado的输入和输出 - python web ", "index": "ubuntu,tornado,python", "content": "Tornado的输入和输出\n1、输入函数\n在tornado文件夹下新建文件夹lesson2在lesson2下新建start1.py写入下列代码\n\nimport tornado.httpserver\nimport tornado.ioloop\nimport tornado.options\nimport tornado.web\nfrom tornado.options import define, options\n\ndefine('port', default=9000, help='run port', type=int)\n\n\nclass TestIndexHandler(tornado.web.RequestHandler):\n    def get(self):\n        abc = self.get_argument('abc', 'no')\n        self.write('hello ' + abc)\n        self.write('<br>')\n        abc = self.get_arguments('abc')\n        print(\"the type of abc is %s\" % type(abc))\n        print(\"the value of abc is %s\" % abc)\n        self.write(','.join(abc))\n\n\nif __name__ == '__main__':\n    tornado.options.parse_command_line()\n    print(options.port)  # 打印端口到terminal\n    app = tornado.web.Application(\n        handlers=[\n            (r'/test', TestIndexHandler),\n        ]\n    )\n    http_server = tornado.httpserver.HTTPServer(app)\n    http_server.listen(options.port)\n    tornado.ioloop.IOLoop.instance().start()\n\n\n\nget_argument 函数获取查询字符串或者请求体中的信息\n查询字符串：就是在浏览器的地址栏看到的url中“？”后面的字符串\n请求体：在POST请求中的body数据，比如表单数据form data、json数据、xml数据\n函数原型：（返回具有给定名称的参数的值。返回的值编码始终是unicode）\nRequestHandler.get_argument（*name*，*default = *，*strip = True *）\n\n参数说明：\n\n如果未提供default 值，则认为该参数是必需的，如果缺少该参数则抛出 MissingArgumentError异常。\n如果参数多次出现在url中，我们返回最后一个值。\n\nstrip = True，默认为剪切字符串两边的空格\n\n通过get_arguments 函数获取查询字符串或者请求体中的信息\n函数原型：返回具有给定名称的参数的值的列表。返回的值始终是unicode，如果参数不存在返回空列表\nRequestHandler.get_arguments（name，*strip = True *）\n\n除此之外，还有：\n    RequestHandler.get_query_argument（name，default = <object object>，strip = True ）\n    RequestHandler.get_query_arguments（name，strip = True ）\n    RequestHandler.get_body_argument（name，default = <object object>，strip = True ）\n    RequestHandler.get_body_arguments（name，strip = True ）\n在之前我们都是使用url来获取字符串，通过URI来获取参数的时候有两种风格\n#查询字符串风格\nhttp://127.0.0.1:8000/test?abc=weiwei\n#符合REST风格的url\nhttp://127.0.0.1:8000/user/weiwei/18\n\n\n#当时使用REST风格的写法时，路由映射的写法：\n(r'/user/(.+)/([1-9]+)', UserHandler), \n#通过url名称不固定的传参 格式为 非零个非换行字符/非零个数字字符\n(r'/bookname/(?P<name>.+)/(?P<age>[1-9]+)', BookNameHandler),\n#通过url传固定名称的参数,名字固定为name age\n\n#Handler的写法\nclass UserHandler(tornado.web.RequestHandler):\n    def get(self,name,age):\n    self.write('---name=%s---age=%s'%(name,age))\n    \nclass BookNameHandler(tornado.web.RequestHandler):\n    def get(self, name, age):\n        '''通过url传入参数名是固定的'''\n        print(self.request.remote_ip)\n        self.write('-----name=%s --------age=%s-----%s------'%(name, age, self.request.remote_ip))\n     \n浏览器显示如下\n\n\n\n2、输出函数\n函数原型:\nRequestHandler.write(chunk)\n将给定的块写入输出缓冲区。\n要将输出写入网络，请使用下面的flush（）方法\n如果给定的块是字典，我们将其写为JSON，并将响应的Content-Type设置为application/json。（如果要发送JSON作为其他的Content-Type，调用write（）后调用set_header ）。\n请注意，由于潜在的跨站点安全漏洞，列表不会转换为JSON。所有JSON输出都应该包装在字典中。\n(r'/write',WriteHandler),\n\nclass WriteHandler(tornado.web.RequestHandler):\n    def get(self):\n        user = {\n            'name':'budong',\n            'age':18,\n        }\nself.write(user) #wirte 回去的就是字符串\nli = [1,2,3,4]\nimport json\nli = json.dumps(li)# 转成json\nself.write(li)\nprint(repr(li),type(li))\nli = json.loads(li) # 转成python\nprint(repr(li),type(li))\n\n\n函数原型：\nRequestHandler.render（template_name，kwargs）\n\n返回html页面，页面中可以添加变量和函数。\n#添加\n(r'/html',HtmlHandler),\n\ntemplate_path='templates',\n\nclass HtmlHandler(tornado.web.RequestHandler):\n    def get(self):\n        self.render('hello.html') #html 的文件名\n#templates 必须在一个lesson下面，一个文件夹下面，它自己是从起服务这个地方开始找的\n\n在lesson2下新建一个子文件夹并命名为templates  （千万别写成了 template 必须和template_path对应）新建一个html文件命名为hellohtml页面如下：\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n    hello\n</body>\n</html>\n\n\n\n上面这些就是tornado的输入和输出，从前台获取数据，就是输入，后台把数据返回给前台，就是输出。\n接下来我们看看如果是post请求，改怎么得到信息：\n首先在之前的html中添加下面内容：\n<form method=\"post\" action=\"/html\">\n<p>用户名<br><input type=\"text\" name=\"name\"></p>\n<p>密码<br><input type=\"text\" name=\"password\"></p>\n<input type=\"submit\">\n</form>\n\n在HtmlHandler中添加如下代码：\ndef post(self):\n    name = self.get_argument('name','no')\n    passwd = self.get_argument('password','no')\n    st = '---name=%s---password=%s---'%(name,passwd)\n    self.write(st)\n\n显示如下\n\n\n\nget和post的区别是:get就是获取服务器数据的意思，post是类似于提交数据，往服务器提交数据。接下来我们看看，我们可以从前台的请求中获取些什么信息：\n(r'/request',MyHandler),\n\nclass MyHandler(tornado.web.RequestHandler):\n    def get(self):\n    print(self.request.remote_ip)\n\n\n\n\n\n3、附录\n本文章总代码\n\n文件结构\n\nstart1.py\nimport tornado.httpserver\nimport tornado.ioloop\nimport tornado.options\nimport tornado.web\nfrom tornado.options import define, options\n\ndefine('port', default=9000, help='run port', type=int)\n\n\nclass TestIndexHandler(tornado.web.RequestHandler):\n    def get(self):\n        abc = self.get_argument('abc', 'no')\n        self.write('hello ' + abc)\n        self.write('<br>')\n        abc = self.get_arguments('abc')\n        print(\"the type of abc is %s\" % type(abc))\n        print(\"the value of abc is %s\" % abc)\n        self.write(','.join(abc))\n\n\nclass UserHandler(tornado.web.RequestHandler):\n    def get(self, name, age):\n        self.write('---name=%s---age=%s' % (name, age))\n\n\nclass BookNameHandler(tornado.web.RequestHandler):\n    def get(self, name, age):\n        \"\"\"通过url传入参数名是固定的\"\"\"\n        # print(self.request.remote_ip)  # 得到请求主机的IP\n        self.write('-----name=%s --------age=%s-----%s------' % (name, age, self.request.remote_ip))\n\n\nclass HtmlHandler(tornado.web.RequestHandler):\n    def get(self):\n        self.render('hello.html')  # html 的文件名\n\n    def post(self):\n        name = self.get_argument('name', 'no')\n        passwd = self.get_argument('password', 'no')\n        st = '---name=%s---password=%s---' % (name, passwd)\n        self.write(st)\n\n\nclass MyHandler(tornado.web.RequestHandler):\n    def get(self):\n        print(self.request.remote_ip)\n\n\nif __name__ == '__main__':\n    tornado.options.parse_command_line()\n    print(options.port)  # 打印端口到terminal\n    app = tornado.web.Application(\n        handlers=[\n            (r'/test', TestIndexHandler),\n            (r'/user/(.+)/([1-9]+)', UserHandler),\n            (r'/bookname/(?P<name>.+)/(?P<age>[1-9]+)', BookNameHandler),\n            (r'/html', HtmlHandler),\n            (r'/request', MyHandler),\n        ],\n        template_path='templates',\n\n    )\n    http_server = tornado.httpserver.HTTPServer(app)\n    http_server.listen(options.port)\n    tornado.ioloop.IOLoop.instance().start()\n\n\nhello.py\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n    hello\n    <form method=\"post\" action=\"/html\">\n    <p>用户名<br><input type=\"text\" name=\"name\"></p>\n    <p>密码<br><input type=\"text\" name=\"password\"></p>\n    <input type=\"submit\">\n    </form>\n</body>\n</html>\n\n注：本文章使用的是 pycharm+VMware+ubuntutornado文件夹对应ubuntu用户文件夹下的tonado_1文件夹关于pycharm连接ubuntu的相关问题 详情请见https://segmentfault.com/a/11...\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}