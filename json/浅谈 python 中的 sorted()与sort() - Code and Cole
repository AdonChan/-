{"title": "浅谈 python 中的 sorted()与sort() - Code and Cole ", "index": "python", "content": "我们需要对List进行排序，Python提供了两个方法\n对给定的List L进行排序，方法1.用List的成员函数sort进行排序方法2.用built-in函数sorted进行排序（从2.4开始）\n\n--------------------------------sorted---------------------------------------\n>>> help(sorted)\nHelp on built-in function sorted in module __builtin__:\n\nsorted(...)\n    sorted(iterable, cmp=None, key=None, reverse=False) --> new sorted list\n---------------------------------sort----------------------------------------\n>>> help(list.sort)\nHelp on method_descriptor:\n\nsort(...)\n    L.sort(cmp=None, key=None, reverse=False) -- stable sort *IN PLACE*;\n    cmp(x, y) -> -1, 0, 1\n-----------------------------------------------------------------------------\n\n\n\n  iterable：是可迭代类型;\n  cmp：用于比较的函数，比较什么由key决定,有默认值，迭代集合中的一项;\n  key：用列表元素的某个属性和函数进行作为关键字，有默认值，迭代集合中的一项;\n  reverse：排序规则. reverse = True 或者 reverse = False，有默认值。\n  返回值：是一个经过排序的可迭代类型，与iterable一样。\n\n\n注；一般来说，cmp和key可以使用lambda表达式。\n\nsort()与sorted()的不同在于，sort是在原位重新排列列表，而sorted()是产生一个新的列表。\n\nSorting basic:\n\n>>> print sorted([5, 2, 3, 1, 4])\n[1, 2, 3, 4, 5]\n>>> L = [5, 2, 3, 1, 4]\n>>> L.sort()\n>>> print L\n[1, 2, 3, 4, 5]\n\n\nSorting  cmp:\n\n>>>L = [('b',2),('a',1),('c',3),('d',4)]\n>>>print sorted(L, cmp=lambda x,y:cmp(x[1],y[1]))\n[('a', 1), ('b', 2), ('c', 3), ('d', 4)]\n\n\nSorting  keys:\n\n>>>L = [('b',2),('a',1),('c',3),('d',4)]\n>>>print sorted(L, key=lambda x:(x[1]))\n[('a', 1), ('b', 2), ('c', 3), ('d', 4)]\n\n\nSorting  reverse:\n\n>>> print sorted([5, 2, 3, 1, 4], reverse=True)\n[5, 4, 3, 2, 1]\n>>> print sorted([5, 2, 3, 1, 4], reverse=False)\n[1, 2, 3, 4, 5]\n\n\n注：效率key>cmp(key比cmp快)\n\n在Sorting Keys中：我们看到，此时排序过的L是仅仅按照第二个关键字来排的，如果我们想用第二个关键字\n排过序后再用第一个关键字进行排序呢?\n\n>>> L = [('d',2),('a',4),('b',3),('c',2)]\n>>> print sorted(L, key=lambda x:(x[1],x[0]))\n>>>[('c', 2), ('d', 2), ('b', 3), ('a', 4)]\n\n\n以上环境python2.4\n\nVia\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "4"}