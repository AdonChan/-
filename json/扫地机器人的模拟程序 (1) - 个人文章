{"title": "扫地机器人的模拟程序 (1) - 个人文章 ", "index": "python", "content": "前言\n在朋友的推荐下，尝试写一个模拟的扫地机器人的程序，当做是练习(工程能力和算法)写这篇文章一是记录和分享思路，也希望获得更多意见和建议，欢迎评论\n效果\n本来是打算最后再贴图的，文章没啥人气，加上感冒偷个懒就先贴个图吧（不知道为什么没办法直接贴图片，只好贴链接了)https://wx1.sinaimg.cn/mw1024...https://wx4.sinaimg.cn/mw1024...\n思路\n想了下大概应该有下面几个模块\n\n主模块，负责调用其他模块\n地图模块，负责处理地图，比如导入外部的地图文件并转换成方便处理的格式\n感知模块，负责感知当前所在位置的周围是否可通行\n动作模块，负责“走动”，出于解耦的考虑，这里的动作只有最基本的走路动作，不包含寻路逻辑\n寻路模块，负责调用感知模块和动作模块，做一些复杂动作，比如U形走法（听上去有点中二，先这么叫着）和最短路径走法(到最近的未清洁点)\n显示模块，负责把机器人走过的路径显示出来，形式上最好是独立于程序的存在，比如gif文件\n\n在准备写复杂模块前，首先把地图模块给写出来吧，这篇文章就专注于这个模块\n地图模块\n首先思考，外部的地图文件要便于创建（手工绘制），查看和被导入，于是便想到csv\n1 . 在Excel中“画图”\n画一个10*10的地图，其中一个格子代表一个区域，每个格子的面积先假设是0.5m*0.5m好了可通行区域是'.'，不可通行区域是'#'，保存成csv\n2 . 通过官方的csv库来读取文件\n代码如下：\nimport csv\n\nfile = 'E:\\\\扫地机器人\\\\map_1.csv'\nmap = []\nwith open(file, newline='') as csv_file:\n    f = csv.reader(csv_file)\n    for row in f:\n        map.append(row)\n这样我们得到一个map列表[['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], .....]其内容还是列表，每个列表代表地图中的一行，顺序是从上到下\n3 . 给地图上的点/格子“编号”\n虽然地图上的点可以通过map[x][y]来获得，但这么做似乎不优雅，不妨就用坐标点的形式，即(x,y)的方式来描述这些格子吧，于是：\ncoordinate_list = []\nimpassable_coordinate_list = []\nfor x in range(len(map)):\n    for y in range(len(map[x])):\n        coordinate_list.append((y, x))\n        if map[x][y] == '#':\n            reverse_x, reverse_y = y, len(map) - x - 1\n            impassable_coordinate_list.append((reverse_x, reverse_y))\n我们把所有的格子转成坐标点的形式放到coordinate_list同时把不能通行的格子记录到impassable_coordinate_list前者: [(0, 0), (1, 0), (2, 0),....]后者: [(1, 8), (1, 7), (2, 4), (2, 3)]要注意的是这里的(0,0)代表的是最左下角的那个点/格子map模块就此告一段落\nPS: 可能有读者感到奇怪，既然已经有地图了，根据所在位置和地图就知道周围的情况了，为何还要感知模块，我解释一下我的想法是先让机器人根据完善的地图来实现部分功能，然后再逐步改善，先让感知模块根据地图来“感知”按理说，地图模块应该要根据感知模块的反馈来不断更新的\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}