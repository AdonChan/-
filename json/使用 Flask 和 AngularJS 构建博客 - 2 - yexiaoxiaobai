{"title": "使用 Flask 和 AngularJS 构建博客 - 2 - yexiaoxiaobai ", "index": "bootstrap,python,angularjs,flask", "content": "\n  注：该文作者是 John Kevin M. Basco，原文地址是 Building a blog using Flask and AngularJS Part 2\n\n\n\n  注：翻译的第一部分请移步到 - 使用 Flask 和 AngularJS 构建博客 - 1\n\n\n\n\n这是这个教程系列的第二部分，如果你还没有都第一部分，请移步到这里：http://blog.john.mayonvolcanosoftware.com/building-a-blog-using-flask-and-angularjs-part-1/\n\n因为我们在该系列的第一部分已经构建好了 REST API ，在这部分我们将专注于构建一个 AngularJS 应用，用来使用我们构建的 REST API。\n\n目录结构\n\nAngularJS 应用的目录结构看起来像这样：\n\n\n\n安装必要的包\n\n我们将使用的包如下：\n\n\nangular-route\nbootstrap\nrestangular\nangularjs\nangular-local-storage\n\n如果你不熟悉 Restangular 的话，我建议你首先读下 Restangular 的文档 - https://github.com/mgonto/restangular\n\n或者如果你懒得读它的文档，随时继续阅读本教程，当你遇到如下对你没有意义的 Restangular 代码的时候，你可以参考下 Restangular 文档。\n\n为了使得事情更容易，在 blog/client/ 目录创建一个 bower.json 文件，并且拷贝和粘贴以下内容：\n\n{\n  \"name\": \"client\",\n  \"version\": \"0.0.0\",\n  \"authors\": [\n    \"John Kevin Basco <basco.johnkevin@gmail.com>\"\n  ],\n  \"license\": \"MIT\",\n  \"ignore\": [\n    \"**/.*\",\n    \"node_modules\",\n    \"bower_components\",\n    \"test\",\n    \"tests\"\n  ],\n  \"dependencies\": {\n    \"angular-route\": \"~1.2.21\",\n    \"bootstrap\": \"~3.2.0\",\n    \"restangular\": \"~1.4.0\",\n    \"angularjs\": \"~1.2.21\",\n    \"angular-local-storage\": \"~0.0.7\"\n  }\n}\n\n\n然后进入 blog/client 目录，运行 bower install 来安装必要的包。\n\n初始化应用设置\n\n首先，在 blog/client 目录下创建一个新文件，并命名为 index.html，然后拷贝和粘贴以下内容：\n\n<!DOCTYPE html>\n<html ng-app=\"Blog\" ng-controller=\"ApplicationCtrl\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>Blog</title>\n\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"./bower_components/bootstrap/dist/css/bootstrap.css\">\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"./css/theme.css\">\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"./css/styles.css\">\n    </head>\n    <body>\n\n        <div class=\"blog-masthead\">\n            <div class=\"container\">\n                <nav class=\"blog-nav\">\n                    <a class=\"blog-nav-item\" href=\"#\" ng-class=\"{active: isActive('/')}\">Home</a>\n                    <a class=\"blog-nav-item\" href=\"#/sessions/create\" ng-hide=\"isLoggedIn\" ng-class=\"{active: isActive('/sessions/create')}\">Login</a>\n                    <a class=\"blog-nav-item\" href=\"#/sessions/destroy\" ng-show=\"isLoggedIn\">Logout</a>\n                    <a class=\"blog-nav-item\" href=\"#/users/create\" ng-class=\"{active: isActive('/users/create')}\">Register</a>\n                    <a class=\"blog-nav-item\" href=\"#/posts/create\" ng-show=\"isLoggedIn\" ng-class=\"{active: isActive('/posts/create')}\">Create a post</a>\n                </nav>\n            </div>\n        </div>\n\n        <div class=\"container main-view\">\n\n            <div ng-view></div>\n\n        </div><!-- /.container -->\n\n        <div class=\"blog-footer\">\n            <p>Blog built by <a href=\"https://twitter.com/johnkevinmbasco\">@johnkevinmbasco</a> using Flask and AngularJS.</p>\n            <p>\n                <a href=\"#\">Back to top</a>\n            </p>\n        </div>\n\n        <script type=\"text/javascript\" src=\"./bower_components/angularjs/angular.js\"></script>\n        <script type=\"text/javascript\" src=\"./bower_components/angular-route/angular-route.js\"></script>\n        <script type=\"text/javascript\" src=\"./bower_components/lodash/dist/lodash.js\"></script>\n        <script type=\"text/javascript\" src=\"./bower_components/restangular/dist/restangular.js\"></script>\n        <script type=\"text/javascript\" src=\"./bower_components/angular-local-storage/angular-local-storage.js\"></script>\n        <script type=\"text/javascript\" src=\"./js/main.js\"></script>\n        <script type=\"text/javascript\" src=\"./js/controllers/HomeDetailCtrl.js\"></script>\n        <script type=\"text/javascript\" src=\"./js/controllers/ApplicationCtrl.js\"></script>\n        <script type=\"text/javascript\" src=\"./js/controllers/SessionCreateCtrl.js\"></script>\n        <script type=\"text/javascript\" src=\"./js/controllers/SessionDestroyCtrl.js\"></script>\n        <script type=\"text/javascript\" src=\"./js/controllers/UserCreateCtrl.js\"></script>\n        <script type=\"text/javascript\" src=\"./js/controllers/PostCreateCtrl.js\"></script>\n        <script type=\"text/javascript\" src=\"./js/factories/Session.js\"></script>\n        <script type=\"text/javascript\" src=\"./js/factories/User.js\"></script>\n        <script type=\"text/javascript\" src=\"./js/factories/Post.js\"></script>\n        <script type=\"text/javascript\" src=\"./js/services/AuthService.js\"></script>\n        <script type=\"text/javascript\" src=\"./js/directives/match.js\"></script>\n\n    </body>\n</html>\n\n\n在以上代码中，我们只是简单的包含了我们稍后将要创建的 css 和 javascript 文件。我们也为 navigation bar， footer 等等添加了 html markup。你将注意到在以上的 gist 中，它包含了 <div ng-view></div> 这个 html 元素。这是一个当前的路由将用来插入模板的地方。你将看到这些事情：ng-class=\"{active: isActive('/')}\" 和 ng-show=\"isLoggedIn\"，忽略它们现在。我们将在 为 ApplicationCtrl 写代码的时候讨论它们。\n\n添加一些样式\n\n现在让我们添加一些样式以便这个 app 看起来更好。为了使我们的工作更轻松，让我们使用一个 Bootstrap 提供的主题 - http://getbootstrap.com/examples/blog/。在 app/client/css 目录下创建一个新文件，并命名为 theme.css，然后拷贝和粘贴以下内容：\n\n/*\n * Globals\n */\n\nbody {\n    font-family: Georgia, \"Times New Roman\", Times, serif;\n    color: #555;\n}\n\nh1, .h1,\nh2, .h2,\nh3, .h3,\nh4, .h4,\nh5, .h5,\nh6, .h6 {\n    margin-top: 0;\n    font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n    font-weight: normal;\n    color: #333;\n}\n\n\n/*\n * Override Bootstrap's default container.\n */\n\n@media (min-width: 1200px) {\n    .container {\n        width: 970px;\n    }\n}\n\n\n/*\n * Masthead for nav\n */\n\n.blog-masthead {\n    background-color: #428bca;\n    -webkit-box-shadow: inset 0 -2px 5px rgba(0,0,0,.1);\n                    box-shadow: inset 0 -2px 5px rgba(0,0,0,.1);\n}\n\n/* Nav links */\n.blog-nav-item {\n    position: relative;\n    display: inline-block;\n    padding: 10px;\n    font-weight: 500;\n    color: #cdddeb;\n}\n.blog-nav-item:hover,\n.blog-nav-item:focus {\n    color: #fff;\n    text-decoration: none;\n}\n\n/* Active state gets a caret at the bottom */\n.blog-nav .active {\n    color: #fff;\n}\n.blog-nav .active:after {\n    position: absolute;\n    bottom: 0;\n    left: 50%;\n    width: 0;\n    height: 0;\n    margin-left: -5px;\n    vertical-align: middle;\n    content: \" \";\n    border-right: 5px solid transparent;\n    border-bottom: 5px solid;\n    border-left: 5px solid transparent;\n}\n\n\n/*\n * Blog name and description\n */\n\n.blog-header {\n    padding-top: 20px;\n    padding-bottom: 20px;\n}\n.blog-title {\n    margin-top: 30px;\n    margin-bottom: 0;\n    font-size: 60px;\n    font-weight: normal;\n}\n.blog-description {\n    font-size: 20px;\n    color: #999;\n}\n\n\n/*\n * Main column and sidebar layout\n */\n\n.blog-main {\n    font-size: 18px;\n    line-height: 1.5;\n}\n\n/* Sidebar modules for boxing content */\n.sidebar-module {\n    padding: 15px;\n    margin: 0 -15px 15px;\n}\n.sidebar-module-inset {\n    padding: 15px;\n    background-color: #f5f5f5;\n    border-radius: 4px;\n}\n.sidebar-module-inset p:last-child,\n.sidebar-module-inset ul:last-child,\n.sidebar-module-inset ol:last-child {\n    margin-bottom: 0;\n}\n\n\n\n/* Pagination */\n.pager {\n    margin-bottom: 60px;\n    text-align: left;\n}\n.pager > li > a {\n    width: 140px;\n    padding: 10px 20px;\n    text-align: center;\n    border-radius: 30px;\n}\n\n\n/*\n * Blog posts\n */\n\n.blog-post {\n    margin-bottom: 60px;\n}\n.blog-post-title {\n    margin-bottom: 5px;\n    font-size: 40px;\n}\n.blog-post-meta {\n    margin-bottom: 20px;\n    color: #999;\n}\n\n\n/*\n * Footer\n */\n\n.blog-footer {\n    padding: 40px 0;\n    color: #999;\n    text-align: center;\n    background-color: #f9f9f9;\n    border-top: 1px solid #e5e5e5;\n}\n.blog-footer p:last-child {\n    margin-bottom: 0;\n}\n\n\n在 app/client/css 目录下创建另外一个文件，命名为 styles.css ，然后拷贝和粘贴一下内容：\n\n.main-view {\n    margin-top: 20px;\n    margin-bottom: 20px;\n}\n\n\n现在进入 blog/client 目录，然后运行这个命令：python -m SimpleHTTPServer 8000，现在访问 http://localhost:8000/，你应该可以看到应用已经有设计样式。\n\n创建必须的 javascript 文件\n\n注意：以下应用使用的配置变量的值，为了假话，被硬编码了。在生产环境的应用中，需要把它放入一个配置文件中，因此你可以根据不同的环境使用不同的值，比如开发环境和生产环境。\n\n现在让我们创建必须的 javascript 文件，在 blog/client/js 目录下创建一个新文件，命名为 main.js 并且以下的代码拷贝和粘贴进文件：\n\nwindow.Blog = angular.module('Blog', ['ngRoute', 'restangular', 'LocalStorageModule'])\n\n.run(function($location, Restangular, AuthService) {\n    Restangular.setFullRequestInterceptor(function(element, operation, route, url, headers, params, httpConfig) {\n        headers['Authorization'] = 'Basic ' + AuthService.getToken();\n        return {\n            headers: headers\n        };\n    });\n\n    Restangular.setErrorInterceptor(function(response, deferred, responseHandler) {\n        if (response.config.bypassErrorInterceptor) {\n            return true;\n        } else {\n            switch (response.status) {\n                case 401:\n                    AuthService.logout();\n                    $location.path('/sessions/create');\n                    break;\n                default:\n                    throw new Error('No handler for status code ' + response.status);\n            }\n            return false;\n        }\n    });\n})\n\n.config(function($routeProvider, RestangularProvider) {\n\n    RestangularProvider.setBaseUrl('http://localhost:5000/api/v1');\n\n    var partialsDir = '../partials';\n\n    var redirectIfAuthenticated = function(route) {\n        return function($location, $q, AuthService) {\n\n            var deferred = $q.defer();\n\n            if (AuthService.isAuthenticated()) {\n                deferred.reject()\n                $location.path(route);\n            } else {\n                deferred.resolve()\n            }\n\n            return deferred.promise;\n        }\n    }\n\n    var redirectIfNotAuthenticated = function(route) {\n        return function($location, $q, AuthService) {\n\n            var deferred = $q.defer();\n\n            if (! AuthService.isAuthenticated()) {\n                deferred.reject()\n                $location.path(route);\n            } else {\n                deferred.resolve()\n            }\n\n            return deferred.promise;\n        }\n    }\n\n    $routeProvider\n        .when('/', {\n            controller: 'HomeDetailCtrl',\n            templateUrl: partialsDir + '/home/detail.html'\n        })\n        .when('/sessions/create', {\n            controller: 'SessionCreateCtrl',\n            templateUrl: partialsDir + '/session/create.html',\n            resolve: {\n                redirectIfAuthenticated: redirectIfAuthenticated('/posts/create')\n            }\n        })\n        .when('/sessions/destroy', {\n            controller: 'SessionDestroyCtrl',\n            templateUrl: partialsDir + '/session/destroy.html'\n        })\n        .when('/users/create', {\n            controller: 'UserCreateCtrl',\n            templateUrl: partialsDir + '/user/create.html'\n        })\n        .when('/posts/create', {\n            controller: 'PostCreateCtrl',\n            templateUrl: partialsDir + '/post/create.html',\n            resolve: {\n                redirectIfNotAuthenticated: redirectIfNotAuthenticated('/sessions/create')\n            }\n        });\n})\n\n\n在以上代码中，我们初始化了我们的应用，配置 Restangular 来包括每个请求的登录用户的用户名和密码，配置 Restangular 来使用一个错误拦截器，它将删除本地存储的所有已经保存的数据，并且如果 REST API 返回一个 401 状态码，则把用户跳转到登录页面。\n\n在配置部分，我们设置了 Restangular 将使用的基准 url，我们也设置了路由。你将注意到 /posts/create 路由有一个解决属性包含了 redirectIfNotAuthenticated promise。是的，像你猜的那样，如果用户未被授权，它将把用户跳转到登录页面。/sessions/create 路由也有一个解决属性，但是它包含了 redirectIfAuthenticated promise 而不是 redirectIfNotAuthenticated promise。如果用户被授权了，它将简单的跳转用户到创建博客的页面。你可以阅读关于这个主题的更多信息 - http://blog.john.mayonvolcanosoftware.com/protecting-routes-in-angularjs/。\n\nFactories\n\n让我们创建我们的应用将使用到的工厂方法。\n\nPost\n\n让我们在 blog/client/js/factories 目录下创建一个新文件，命名为 Post.js ，然后拷贝并粘贴一下代码到文件中：\n\nBlog.factory('Post', function(Restangular) {\n    var Post;\n    Post = {\n        get: function() {\n            return Restangular\n                .one('posts')\n                .getList();\n        },\n        create: function(data) {\n            return Restangular\n                .one('posts')\n                .customPOST(data);\n        }\n    };\n    return Post;\n})\n\n\n在以上代码中，factory 将创建一个对象，该对象有一个 get 和 create 方法。我们将使用 get 方法来获取博客列表，create 方法来创建一篇博客。\n\nSession\n\n让我们在 blog/client/js/factories 目录下创建一个新文件，命名为 Session.js  ，然后拷贝并粘贴一下代码到文件中：\n\nBlog.factory('Session', function(Restangular) {\n    var Session;\n    Session = {\n        create: function(data, bypassErrorInterceptor) {\n            return Restangular\n                .one('sessions')\n                .withHttpConfig({bypassErrorInterceptor: bypassErrorInterceptor})\n                .customPOST(data);\n        }\n    };\n    return Session;\n})\n\n\n上面的 Session  工厂有一个 create 方法返回这个对象。我们将用这个 create 方法来授权一个用户的 email 和密码。你将注意到 create 方法有一个参数叫做 bypassErrorInterceptor。这个参数应该是一个布尔类型的值（true or false），当 bypassErrorInterceptor 是 true 的时候，它将绕过我们早先在配置块中定义的 error 拦截器。这不会立即显得有意义，但是在后面我们将遇到一个场景，在那我们需要绕过 error 拦截器。\n\nUser\n\n在 blog/client/js/factories 目录下创建一个新文件，并命名为 User.js，然后把以下代码拷贝和粘贴进文件：\n\nBlog.factory('User', function(Restangular) {\n    var User;\n    User = {\n        create: function(user) {\n            return Restangular\n                .one('users')\n                .customPOST(user);\n        }\n    };\n    return User;\n}\n\n\nUser 工厂将有一个 create 方法返回该对象。我们将使用 create 方法创建一个 user。\n\nServices\n\n我们的应用需要一个服务，该服务包含登录，登出，和校验该用户是否被授权的业务逻辑。我们把该服务命名为 AuthService。在 blog/cient/js/services 目录下创建一个新文件，并命名为 AuthService.js，然后拷贝和粘贴一下代码到文件中：\n\nBlog.service('AuthService', AuthService = function($q, localStorageService, Session) {\n\n    this.login = function(credentials) {\n        var me = this;\n        deferred = $q.defer()\n        Session.create(credentials, true).then(function(user) {\n            me.setToken(credentials);\n            return deferred.resolve(user);\n        }, function(response) {\n            if (response.status == 401) {\n                return deferred.reject(false);\n            }\n            throw new Error('No handler for status code ' + response.status);\n        });\n        return deferred.promise\n    };\n\n    this.logout = function() {\n        localStorageService.clearAll();\n    };\n\n    this.isAuthenticated = function() {\n        var token = this.getToken();\n        if (token) {\n            return true\n        }\n        return false;\n    };\n\n    this.setToken = function(credentials) {\n        localStorageService.set('token', btoa(credentials.email + ':' + credentials.password));\n    };\n\n    this.getToken = function() {\n        return localStorageService.get('token');\n    };\n\n    return this;\n}\n\n\n以上的 login 方法使用 Session.create 认证用户的认证信息。当登录认证信息是有效的，我们将保存 base64  编码格式的 email 和密码到本地存储稍后使用，并授权。当登录认证信息是无效的（当登录认证信息是无效的，REST API 将返回一个 401 状态码），我们简单的拒绝授权，并且让使用该方法的代码处理它。看一下我们传递给 Session.create 的第二个参数。我们传递一个布尔类型（true），这个就是我们早先讨论的 bypassErrorInterceptor 的参数。我们需要绕过在配置块中的 error 拦截器，因为如果我们不这样做，处理 401 错误码的 handler 将把用户跳转到登录视图。我们想这个发生在其他场景，但当我们正在登录视图并且用户提交了错误的认证信息的时候，我们想展示一个错误消息，比如“Incorrect login credentials. Please try again.”。这就是为什么我们需要绕过默认的 error 拦截器，使用一个新的，包含了不同的业务逻辑（检查以上代码的 10 - 15 行）。\n\nlogout 方法将清理保存在本地存储的数据，isAuthenticated 方法仅仅通过检查 token 是否被呈现来检查当前用户是否被授权。setToken 方法保存一个 token （base64 编码格式的 email 和 password）到本地存储中，getToken 方法获取保存在本地存储中的 token。\n\nDirectives\n\n我们应用的 registration form 将有一个 password 和 一个确认 password  字段，因此我们需要一个方法来校验值是否匹配。为这个我们将使用 directive，在 blog/client/js/directives 目录下创建一个新文件，并命名为 match.js，然后拷贝和粘贴一下代码到文件中：\n\nBlog.directive('match', function () {\n    return {\n        require: 'ngModel',\n        restrict: 'A',\n        scope: {\n            match: '='\n        },\n        link: function(scope, elem, attrs, ctrl) {\n            scope.$watch(function() {\n                return (ctrl.$pristine && angular.isUndefined(ctrl.$modelValue)) || scope.match === ctrl.$modelValue;\n            }, function(currentValue) {\n                ctrl.$setValidity('match', currentValue);\n            });\n        }\n    };\n}\n\n\n信任以上 directive 的作者。我是从别处抓取来了以上源码，但是我没有忘记链接到该站点和谁是作者。\n\n我们现在完成了我们 AngularJS 应用程序的一半。我们还没有写的剩下部分是控制层和模板。因为这篇文章太长了，我决定在第三部分写控制层和模板部分。同时，研究目前为止我们已经编写的代码，让我们更熟悉它。再使用  Flask 和 AngularJS 构建博客教程系列的第三部分见。\n\n所有的 REST API 源码都在 Github 上 - https://github.com/basco-johnkevin/building-a-blog-using-flask-and-angularjs ，但是 AngularJS 应用程序的源码还没有放上去，因为我们还没有完成它，等到第三部分写完以后再放全部的源码到 Github 上。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "22"}