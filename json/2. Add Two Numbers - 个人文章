{"title": "2. Add Two Numbers - 个人文章 ", "index": "letcode,python", "content": "问题\nYou are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\nExample\nInput: (2 -> 4 -> 3) + (5 -> 6 -> 4)Output: 7 -> 0 -> 8\n过程\n\n先算出每个链表代表的数字，进行相加\n然后再把得数转换为链表形式\n\nCode\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        l1_num = self.getval(l1)\n        l2_num = self.getval(l2)\n        l3_num = l1_num + l2_num\n        \n        l3 = ListNode(l3_num % 10)\n        head = l3\n        index = 1\n        while l3_num / (10 ** index):\n            l = ListNode((l3_num / (10 ** index)) % 10)\n            head.next = l\n            head = l\n            index += 1\n            \n        return l3\n            \n        \n    def getval(self, l):\n        num = 0\n        index = 0\n        while l:\n            num += l.val * (10 ** index)\n            l = l.next\n            index += 1\n        return num\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}