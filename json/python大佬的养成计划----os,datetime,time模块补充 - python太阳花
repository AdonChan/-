{"title": "python大佬的养成计划----os,datetime,time模块补充 - python太阳花 ", "index": "python", "content": "os模块\nos模块提供了多数操作系统的功能接口函数。当os模块被导入后，它会自适应于不同的操作系统平台，根据不同的平台进行相应的操作，在python编程时，经常和文件、目录打交道，所以离不了os模块\n常用os命令\nos.name\nname顾名思义就是'名字'，这里的名字是指操作系统的名字，主要作用是判断目前正在使用的平台，并给出操作系统的名字，如Windows 返回 'nt'; Linux 返回'posix'。注意该命令不带括号。\nos.getcwd()\n全称应该是'get current work directory'，获取当前工作的目录，如：返回结果为：''E:\\python资料\\python-teavh\\day17''。注意该命令带括号，除了第一个命令不带括号之外，以下命令基本都带括号。\nos.listdir(path)\n列出path目录下所有的文件和目录名。以列表的形式全部列举出来，其中没有区分目录和文件。\n>>import os\n>>os.listdir()\n['.idea', '01_os模块补充.py', '02_time模块详解.py', '03_datetime模块详解.py', '04_应用案例_系统监控.py', '05_namedtupled新型数据类型.py', '06_python与Excel.py', '07_excel需求.py', '08_今日作业_批量更新商品价格.py', '09_json模块.py', '10_获取IP对应的地理位置.py', 'Book1.xlsx', 'date.txt', 'Excel应用参考', 'json.txt', 'produceSales.xlsx']\nos.path命令\n\nos.path.isfile(path)——判断指定对象是否为文件。是返回True,否则False\nos.path.isdir(path)——判断指定对象是否为目录。是True,否则False\nos.path.exists(path)——检验指定的对象是否存在。是True,否则False\nos.path.split(path)——返回路径的目录和文件名，即将目录和文件名分开，而不是一个整体。此处只是把前后两部分分开而已。就是找最后一个'/'。\nos.path.abspath()——获得绝对路径\nos.path.basename(path)——返回文件名\n\nos模块示例\n查看文件修改日期\n#查看D:/python_need/data文件的修改日期\n#并保存到当前目录下的'date.txt'文件中\nimport os\nimport time\nimport codecs\nfilename = 'D:\\\\python_need\\\\data.txt'\nctime = os.path.getctime(filename)  #输出时间戳：1536580746.5799537\ntuple_time = time.localtime(ctime)  #将时间戳变成元组时间，time.struct_time(tm_year=2018, tm_mon=9, tm_mday=10, tm_hour=19, tm_min=59, tm_sec=6, tm_wday=0, tm_yday=253, tm_isdst=0)\n\nyear = tuple_time.tm_year\nmonth = tuple_time.tm_mon\nday = tuple_time.tm_mday\n\nwith codecs.open('date.txt','w','utf-8') as f:  #打开方式一定要使用codecs.open()，否则中文字符会乱码\n    f.write(\"%s的修改日期是%s年%s月%s日\" %(filename,year,month,day))\n\ntime模块\n在Python中，通常有这几种方式来表示时间：1）时间戳 2）格式化的时间字符串 3）元组（struct_time）共九个元素。由于Python的time模块实现主要调用C库，所以各个平台可能有所不同。UTC（Coordinated Universal Time）即格林威治天文时间，为世界标准时间。中国北京为UTC+8。DST（Daylight Saving Time）即夏令时。\n时间格式\n时间戳（timestamp）的方式：通常来说，时间戳是指格林威治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的总秒数。我们运行“type(time.time())”，返回的是float类型。返回时间戳方式的函数主要有time()，clock()等。\n>>import time\n>>time.time()\n1536645999.1539526\n元组（struct_time）方式：struct_time元组共有9个元素，返回struct_time的函数主要有gmtime()，localtime()，strptime()。元组时间元素如下：\n>>import time\n>>time.localtime()\ntime.struct_time(tm_year=2018, tm_mon=9, tm_mday=11, tm_hour=14, tm_min=7, tm_sec=31, tm_wday=1, tm_yday=254, tm_isdst=0)\n\n字符串时间\n>>import time\n>>time.ctime\n'Tue Sep 11 14:04:52 2018'\n时间格式的相互转换\n\nimport time\nstr_time = time.ctime()#Tue Sep 11 14:10:43 2018\ntuple_time = time.localtime()#time.struct_time(tm_year=2018, tm_mon=9, tm_mday=11, tm_hour=14, tm_min=11, tm_sec=27, tm_wday=1, tm_yday=254, tm_isdst=0)\ntimestamp = time.time()#1536646330.1479473\n\n#把元组时间转换成时间戳\nprint(time.mktime(tuple_time))\n\n#把元组时间转换成字符串时间\n# strftime(format[, tuple]) -> string\nprint(time.strftime('%Y-%m-%d-%H-%M-%S'))#指定格式\n\n#把字符串时间转换成元组时间\nprint(time.strptime('2018-9-10','%Y-%m-%d'))#指定格式\n\n\ndatetime模块\ntime模块主要用于时间访问和转换，这个模块提供了各种与时间相关的函数。但不是所有方法在任意平台中有效。datetime模块提供了处理日期和时间的类，既有简单的方式，又有复杂的方式。它虽然支持日期和时间算法，但其实现的重点是为输出格式化和操作提供高效的属性提取功能。datetime模块中定义的类\nfrom datetime import time\nfrom datetime import datetime\nfrom datetime import timedelta\ntoday_time = datetime.today() #获取当前本区时间，并以字符串格式显示2018-09-11 15:04:25.317120\nnow_time = datetime.now()  #返回指定时区日期时间的datetime对象，如果不指定tz参数则结果同上\ndelta = timedelta(days=3)   #增减或减少一个delta\nprint(now_time-delta)   #返回三天前的时间，2018-09-08 15:07:11.904546\n\n\n综合应用\n实现对系统的监控\n#   1. 获取当前主机信息， 包含操作系统名， 主机名， 内核版本， 硬件架构等\n#   2. 获取开机时间和开机时长\n#   3. 获取当前登陆用户\n\n#win下没有os.uname()用法\n#解决方案，使用platform.uname()\nimport platform\nimport time\n\nimport psutil\nimport datetime\n\ninfo =platform.uname()  #uname_result(system='Windows', node='DESKTOP-EN0LQJH', release='10', version='10.0.16299', machine='AMD64', processor='Intel64 Family 6 Model 142 Stepping 10, GenuineIntel')\n\nprint(\"1. 主机信息\".center(50, '*'))\nprint(\"\"\"\n    操作系统: %s, \n    主机名: %s, \n    内核版本: %s, \n    硬件架构: %s\n\"\"\" %(info.system, info.node, info.release, info.machine))\n\nprint(\"2. 开机时间\".center(50, '*'))\nboot_time = psutil.boot_time()  #时间戳，1536040894.0\n#datetime对象，datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]]\n#fromtimestamp,根据指定的时间戳创建一个datetime对象\nboot_time = datetime.datetime.fromtimestamp(boot_time)  #2018-09-04 14:01:34\nnow_time = datetime.datetime.now()  #同一类型\ndelta_time = now_time-boot_time #获取时间差\ndelta_time = str(delta_time).split('.')[0]\nprint(\"\"\"\n    开机时间: %s\n    当前时间: %s\n    开机时长: %s\n\"\"\" %(boot_time,now_time, delta_time))\n\nprint(\"3. 当前登陆用户\".center(50, '*'))\n\n# 获取当前登陆用户的详细信息， 需求是获取用户名和登陆主机\nusers = psutil.users()  #[suser(name='Sheen_Star', terminal=None, host='0.4.0.0', started=1536585663.0, pid=None)]\nusers = {\"%s %s\" %(user.name, user.host) for user in users} #集合实现数据去重\nfor user in users:\n    print(\"\\t当前登录用户有： %s\" %(user))\n\n\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "1"}