{"title": "8个Python高效数据分析的技巧 - 个人文章 ", "index": "python", "content": "一行代码定义List\n\n\n\n下面是使用For循环创建列表和用一行代码创建列表的对比。\nx = [1,2,3,4]\nout = []\nfor item in x:\n    out.append(item**2)\nprint(out)\n[1, 4, 9, 16]\n# vs.\nx = [1,2,3,4]\nout = [item**2 for item in x]\nprint(out)\n[1, 4, 9, 16]\n\nLambda表达式\n\n\n厌倦了定义用不了几次的函数？ Lambda表达式是你的救星！ Lambda表达式用于在Python中创建小型，一次性和匿名函数对象。 它能替你创建一个函数。\nlambda表达式的基本语法是：\nlambda arguments: expression\n请注意，只要有一个lambda表达式，就可以完成常规函数可以执行的任何操作。 你可以从下面的例子中，感受lambda表达式的强大功能：\ndouble = lambda x: x * 2\nprint(double(5))\n10\nMap和Filter\n\n\n一旦掌握了lambda表达式，学习将它们与Map和Filter函数配合使用，可以实现更为强大的功能。\n具体来说，map通过对列表中每个元素执行某种操作并将其转换为新列表。 在本例中，它遍历每个元素并乘以2，构成新列表。 请注意，list()函数只是将输出转换为列表类型。\n# Map\nseq = [1, 2, 3, 4, 5]\nresult = list(map(lambda var: var*2, seq))\nprint(result)\n[2, 4, 6, 8, 10]\n\nFilter函数接受一个列表和一条规则，就像map一样，但它通过比较每个元素和布尔过滤规则来返回原始列表的一个子集。\n# Filter\nseq = [1, 2, 3, 4, 5]\nresult = list(filter(lambda x: x > 2, seq))\nprint(result)\n[3, 4, 5]\nArange和Linspace\n\n\nArange返回给定步长的等差列表。 它的三个参数start、stop、step分别表示起始值，结束值和步长， 请注意，stop点是一个“截止”值，因此它不会包含在数组输出中。\n# np.arange(start, stop, step)\nnp.arange(3, 7, 2)\narray([3, 5])\nLinspace和Arrange非常相似，但略有不同。 Linspace以指定数目均匀分割区间。 所以给定区间start和end，以及等分分割点数目num，linspace将返回一个NumPy数组。 这对绘图时数据可视化和声明坐标轴特别有用。\n# np.linspace(start, stop, num)\nnp.linspace(2.0, 3.0, num=5)\narray([ 2.0,  2.25,  2.5,  2.75, 3.0])\nAxis代表什么？\n\n\n在Pandas中，删除一列或在NumPy矩阵中求和值时，可能会遇到Axis。 我们用删除一列（行）的例子：\ndf.drop('Column A', axis=1)\ndf.drop('Row A', axis=0)\n如果你想处理列，将Axis设置为1，如果你想要处理行，将其设置为0。 但为什么呢？ 回想一下Pandas中的shape\ndf.shape\n(# of Rows, # of Columns)\n\n从Pandas DataFrame中调用shape属性返回一个元组，第一个值代表行数，第二个值代表列数。如果你想在Python中对其进行索引，则行数下标为0，列数下标为1，这很像我们如何声明轴值。\nConcat，Merge和Join\n\n\n如果您熟悉SQL，那么这些概念对您来说可能会更容易。 无论如何，这些函数本质上就是以特定方式组合DataFrame的方式。 在哪个时间跟踪哪一个最适合使用可能很困难，所以让我们回顾一下。\nConcat允许用户在表格下面或旁边追加一个或多个DataFrame（取决于您如何定义轴）。\n\nMerge将多个DataFrame合并指定主键（Key）相同的行。\nJoin，和Merge一样，合并了两个DataFrame。 但它不按某个指定的主键合并，而是根据相同的列名或行名合并。\nPandas Apply\n\n\nApply是为Pandas Series而设计的。如果你不太熟悉Series，可以将它想成类似Numpy的数组。Apply将一个函数应用于指定轴上的每一个元素。 使用Apply，可以将DataFrame列（是一个Series）的值进行格式设置和操作，不用循环，非常有用！\ndf = pd.DataFrame([[4, 9],] * 3, columns=['A', 'B'])\n df\n   A  B\n0  4  9\n1  4  9\n2  4  9\n\ndf.apply(np.sqrt)\n     A    B\n0  2.0  3.0\n1  2.0  3.0\n2  2.0  3.0\n\n df.apply(np.sum, axis=0)\nA    12\nB    27\n\ndf.apply(np.sum, axis=1)\n0    13\n1    13\n2    13\nPivot Tables\n\n\n最后是Pivot Tables。 如果您熟悉Microsoft Excel，那么你也许听说过数据透视表。 Pandas内置的pivot_table函数以DataFrame的形式创建电子表格样式的数据透视表,，它可以帮助我们快速查看某几列的数据。 下面是几个例子：非常智能地将数据按照“Manager”分了组\npd.pivot_table(df, index=[\"Manager\", \"Rep\"])\n或者也可以筛选属性值\npd.pivot_table(df,index=[\"Manager\",\"Rep\"],values=[\"Price\"])\n\n\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}