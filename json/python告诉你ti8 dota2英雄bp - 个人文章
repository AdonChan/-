{"title": "python告诉你ti8 dota2英雄bp - 个人文章 ", "index": "python爬虫,python", "content": "文章链接：https://mp.weixin.qq.com/s/phJzZEQojndY-iNe77RF_w\n\n恭喜OG成为ti8冠军，很可惜这次偶数年ti8中国队LGD与冠军失之交臂。\n上学那会儿还是个dota的玩家，现在已经不玩了，对于这种国际性的赛事还是会比较关注的，这篇文章就是爬取ti8期间，bp英雄的统计（b是ban的简称：禁止一个英雄上场；p是pick的简称：挑选英雄上场）。   \npython爬虫之前写过几篇文章的，都是用requests+ BeautifulSoup 进行页面解析获取数据的。  \npython itchat 爬取微信好友信息   \npython爬虫学习：爬虫QQ说说并生成词云图，回忆满满   \n一如既往的，找到这样的页面，但是却解析不到这些数据。  \n\n\n再仔细一看，原来这些数据是js动态加载渲染的，可以看到是接口请求来的数据，庆幸的是这个接口不需要cookie之类的验证信息的，直接get请求可以拿到数据，这样处理起来就方便的，对照页面可以知道json格式的各字段名。\njson结构分析\n数据来源是接口，直接\nresponse = requests.get(url)\ndata = json.loads(response.text)\n通过json.loads 去解析string类型的数据，主要数据格式如下：\n{\n    total: 402,\n    data: [{\n        match_id: 4080856812,\n        radiant: {\n            team_id: 15,\n            name: \"PSG.LGD\",\n            tag: \"PSG.LGD\",\n            country_code: \"CN\",\n            score: 34,\n            bans: [{ //每个英雄数据\n                name: \"spectre\",\n                name_cn: \"幽鬼\",\n                id: 67\n            }, ...],\n            picks: [{\n                name: \"earthshaker\",\n                name_cn: \"撼地者\",\n                id: 7\n            }, ...]\n        },\n        dire: {\n            team_id: 2586976,\n            name: \"OG\",\n            tag: \"OG\",\n            country_code: \"US\",\n            score: 35,\n            bans: [{\n                name: \"tiny\",\n                name_cn: \"小小\",\n                id: 19\n            }, ...],\n            picks: [{\n                name: \"furion\",\n                name_cn: \"先知\",\n                id: 53\n            }, ...]\n        },\n        radiant_win: 0,\n        end_time: \"2018-08-26 10:51\"\n    }, ...]\n}\n每个item含radiant、dire ，其中radiant_win: 1,代表radiant 获胜，0 则代表dire 获胜。bans里面的是ban的英雄数据列表，picks里面是pick的英雄数据列表。  \n这里是用循环不断去请求获取的，每次的数据是20条，可以改变size改变条数。\npage = 1\nwhile True:\n    url = \"https://www.dotamore.com/api/v1/league/matchlist?league_id=9870&page=%d&size=20\" % page\n    response = requests.get(url)\n    data = json.loads(response.text)\n    page += 1\n    for item in data[\"data\"]:\n        # 比赛从8月16开始，小于这个时间生成excel，跳出循环\n        if item[\"end_time\"] < \"018-08-16 00:00\":\n            //生成excel\n            ...\n        return\n        //bp数据\n        ...\nbp数据\n每项里面的bans、picks数据都要处理，每个英雄是一条记录，重复的就+1，所以给每个英雄count 的属性，记录次数。\n# item 指radiant 或dire 的bans、picks列表数据\ndef bp(item, bp_dict):\n    if item is None:\n        return\n    # 遍历bans 或picks 数据\n    for i, bp in enumerate(item):\n        key = bp[\"name\"]\n        # 如果这个英雄已存在，count+1\n        if key in bp_dict.keys():\n            bp_dict[key][\"count\"] = bp_dict[key][\"count\"] + 1\n        else:  # 不存在就记录一条数据\n            bp_dict[key] = copy.deepcopy(bp)\n            bp_dict[key].update(count=1)\n    return bp_dict\n每条英雄数据是个键值对字典，键是name 属性即英文名字，值就是bans、picks里的各项英雄数据，顺便加上了count 属性。每个英雄数据存在dict()\n{ //每条英雄数据\n    name: \"tiny\",\n    name_cn: \"小小\",\n    id: 19,\n    count:1\n}\n分别获取两只队伍bp数据存放\nb_dict = dict()\np_dict = dict()\n# ban的数据\nbp(item[\"radiant\"][\"bans\"], b_dict)\nbp(item[\"dire\"][\"bans\"], b_dict)\n# pick的数据\nbp(item[\"radiant\"][\"picks\"], p_dict)\nbp(item[\"dire\"][\"picks\"], p_dict)\n也可以统计所有英雄的出场次数，非搬即选bp_list。   还可以获取冠军队伍的bp情况，team_id 即队伍的id。\nif item[\"radiant_win\"] == 0:\n    if item[\"dire\"][\"team_id\"] == \"2586976\":\n        bp(item[\"dire\"][\"bans\"], b_win_dict)\n        bp(item[\"dire\"][\"picks\"], p_win_dict)\nelse:\n    if item[\"radiant\"][\"team_id\"] == \"2586976\":\n        bp(item[\"radiant\"][\"bans\"], b_win_dict)\n        bp(item[\"radiant\"][\"picks\"], p_win_dict)\n生成excel\n以上数据我们得到的是字典，里面有各英雄的bp次数，现在要对这些数据进行排序，按次数从大到小排序，这里就用到sorted()方法\n# x[0]是根据键排序，x[1]是根据值，这里的值是字典，取[\"count\"]项排序，得到的是元祖的list\nnew_b_dict = sorted(b_dict.items(), key=lambda x: x[1][\"count\"], reverse=True)\n得到的是数组，生成表格在之前这篇文章中有过使用，这里使用的是xlsxwriter三方库来操作excel 表格的。\n# 创建excel表格\nfile = xlsxwriter.Workbook(\"dota.xlsx\")\n# 创建工作表1\nsheet1 = file.add_worksheet(\"sheet1\")\n# 创建表头\nheaders = [\"图片\", \"英雄\", \"ban\", \"\", \"图片\", \"英雄\", \"pick\", \"\", \"图片\", \"英雄\", \"bp_all\"]\nfor i, header in enumerate(headers):\n    # 第一行为表头\n    sheet1.write(0, i, header)\n第一行是表头，对应的每一列填充数据\ndef insert_data(sheet1, headers, bp_list, col1, col2, col3):\n    for row in range(len(bp_list)):  # 行\n        # 设置行高\n        sheet1.set_row(row + 1, 30)\n        for col in range(len(headers)):  # 列\n            if col == col1:  # 英雄图片，根据id获取\n                url = \"http://cdn.dotamore.com/heros_id_62_35/%d.png\" % bp_list[row][1][\"id\"]\n                image_data = BytesIO(urlopen(url).read())\n                sheet1.insert_image(row + 1, col, url, {\"image_data\": image_data})\n            if col == col2:  # 英雄名\n                name = bp_list[row][1][\"name_cn\"]\n                sheet1.write(row + 1, col, name)\n            if col == col3:  # 统计次数\n                count = bp_list[row][1][\"count\"]\n                sheet1.write(row + 1, col, count)\nexcel 表格生成，还可以插入柱状图。\ndef insert_chart(file, sheet1, bp_list, name, M, col_x, col_y):\n    chart = file.add_chart({\"type\": \"column\"})  # 柱状图\n    chart.add_series({\n        \"categories\": [\"sheet1\", 1, col_x, len(bp_list), col_x],  # 图表类别标签范围，x轴，这里取英雄的名字，即英雄名字那一列，行数根据数据列表确定\n        \"values\": [\"sheet1\", 1, col_y, len(bp_list), col_y],  # 图表数据范围，y轴，即次数那一列，行数根据数据列表确定\n        \"data_labels\": {\"value\": True},\n    })\n    chart.set_title({\"name\": name})  # 图表标题\n    chart.set_size({\"width\": 2000, \"height\": 400})\n    chart.set_x_axis({'name': '英雄'})  # x轴描述\n    chart.set_y_axis({'name': '次数'})  # y轴描述\n    chart.set_style(3)  # 直方图类型\n    sheet1.insert_chart(M, chart)  # 在表格M处插入柱状图\n效果图：  \n\n这里只是简单的对数据进行筛选展示，这些数据还是可以用来做更多的数据分析的，数据来源：刀魔数据。  github地址：https://github.com/taixiang/py_dota\n最后放上lgd的图片，希望他们明年能在ti9上再干回来\n\n\n欢迎关注我的博客：https://blog.manjiexiang.cn/  更多精彩欢迎关注微信号：春风十里不如认识你    \n\n有个「佛系码农圈」，欢迎大家加入畅聊，开心就好！  \n过期了，可加我微信 tx467220125 拉你入群。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}