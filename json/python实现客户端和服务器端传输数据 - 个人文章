{"title": "python实现客户端和服务器端传输数据 - 个人文章 ", "index": "linux,python", "content": "'''Fuction：python实现客户端和服务器端传输数据Date：2018.9.4Author：SnowKing'''\n\n客户端\ndef sock_client_data():\n    while True:\n        try:\n            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            s.connect(('192.168.20.1', 6666))  #服务器和客户端在不同的系统或不同的主机下时使用的ip和端口，首先要查看服务器所在的系统网卡的ip\n            # s.connect(('127.0.0.1', 6666))  #服务器和客户端都在一个系统下时使用的ip和端口\n        except socket.error as msg:\n            print(msg)\n            print(sys.exit(1))\n        data = input(\"input data:\")   #输入要传输的数据\n        s.send(data.encode())  #将要传输的数据编码发送，如果是字符数据就必须要编码发送\n        s.close()\nif __name__ == '__main__':\n    sock_client_data()\n\n服务器端\ndef socket_service_data():\n    try:\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        s.bind(('127.0.0.1', 6666))  # 在同一台主机的ip下使用测试ip进行通信\n        # s.bind(('192.168.20.1', 6666))  #在不同主机或者同一主机的不同系统下使用实际ip\n        s.listen(10)\n    except socket.error as msg:\n        print(msg)\n        sys.exit(1)\n\n    print(\"Wait for Connection..................\")\n\n    while True:\n        sock, addr = s.accept()\n        buf = sock.recv(1024)  #接收数据\n        buf = buf.decode()  #解码\n        print(\"The data from \" + str(addr[0]) + \" is \" + str(buf))\n        print(\"Successfully\")\n        # return buf\n        # sock.close()\nif __name__ == '__main__':\n    socket_service_data()\n\n运行结果：\n客户端：\n\n服务器端：\n\n\n说明：1、服务器和客户端同在一个物理主机的同一系统下使用127.0.0.1，端口自己设置，只要不被占用即可，linux系统下查看端口是否被占用命令sudo netstat -nap | grep 6666 如果查不到端口则证明端口未被占用。建立两个.py文件，一个是sender.py，存放客户端程序，一个是recieve.py，存放服务器端程序，首先运行服务器端程序，待连接成功后再运行客户端程序，输入要传输的数据，在服务器终端看到传输过来的数据即为传输成功。2、服务器和客户端在同一个物理主机的不同系统下，则使用服务器系统实际的ip地址，作者将windows作为客户端，linux作为服务器端，在linux终端输入 ifconfig查看ip，两个程序使用相同的ip和端口，将两个程序部署到各自的系统下，首先运行服务器端程序，再运行客户端程序，发送数据，待服务器端数据接收成功为止。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}