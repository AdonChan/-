{"title": "慎用python os库 - 个人文章 ", "index": "failed,shell,python", "content": "概述\n最近在一个项目用，大量的使用的os.system函数，来执行各式各样的shell命令，随之而来的，是各种坑。\n环境\n\npython:2.7\nos: centos6\n\n问题复现\n有一行代码如下：\n\nos.system('cp path1 path2')\n假设path1和path2两个路径都存在，并且path1的文件比较大，大家想想，这段代码执行会有问题吗？具体问题表现是什么样的。\n再有一行代码如下：\n\nos.rename('cp path1 path2')\n\n假设path1和path2都是存在的，这段代码会有问题吗？\n你猜不到的答案\n\n第一行代码，正常情况下不会有什么问题，可以一旦当这个文件太大，就会引发OOM(out of memory)错误，导致cp那个命令执行失败，下面这句话画重点，这个错误不会抛异常、不会抛异常、不会抛异常。（重要的事情说三遍）\n第二行代码，正常情况下也不会有什么问题，可以当你a b两个目录不在同一个磁盘或者是nfs这种共享目录的话，就会导致a文件在move之后不会被删除。\n\n这是为什么了\n\nos.system 这个函数在linux环境下，只是封装了c语言的system这个函数，并且没做任何修改，所以，system函数返回什么，os.system就返回什么，而正常c语言system这个函数是启动的子进程被杀是不会发生异常的。\n\nos.rename 这个函数在源文件和目的文件在一个硬盘，不会有问题，但是当不同磁盘间移动时，就会出问题，用官方的话说\n  The operation may fail on some Unix flavors if src and dst are on different filesystems\n但是一旦成功，就是个原子操作，就是说，可mv命令一致了。\n\n\n解决方案\n\nos.system 可以是用subprocess模块代替\nos.rename 使用shutil模块代替，shutil提供了文件处理相关的函数\n\n最后说一句\nos库里的好多函数都已经过期了，推荐大家在以后的编码中，尽量不要使用os库里的函数，万一掉进去，都是巨深无比的坑。\n\n点一下给你更多，你的点击，将给我更多的分享动力。（其实就是的我博客太冷清了，惨）\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "1"}