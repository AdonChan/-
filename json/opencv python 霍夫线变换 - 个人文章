{"title": "opencv python 霍夫线变换 - 个人文章 ", "index": "opencv-python,opencv,python", "content": "Hough Line Transform \n霍夫变换是一种检测任何形状的流行技术，可以检测形状，即使它被破坏或扭曲一点点.一条线可以表示成y = mx + c或参数形式，像ρ=xcosθ+ysinθ，其中ρ是从原点到直线的垂直距离，θ角是由这条垂线和水平轴以逆时针的方向形成的(这个方向取决于你如何表示坐标系统，这种表示法在OpenCV中使用）\n\nOpenCV中的Hough变换\ncv.HoughLines()第一个参数，输入图像应该是一个二值图像，因此在应用hough变换之前应用阈值或使用Canny边缘检测.第二和第三个参数分别是ρ和θ的精度.第四个参数是阈值，这意味着它应该被视为一条直线.记住，选票的数量取决于直线上的点的数量,所以它表示应该检测到的最小长度.\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('img.jpg')\ngray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\nedges = cv2.Canny(gray,50,150,apertureSize = 3)\n\nlines = cv2.HoughLines(edges,1,np.pi/180,200)\nfor line in lines:\n    rho,theta = line[0]\n    a = np.cos(theta)\n    b = np.sin(theta)\n    x0 = a*rho\n    y0 = b*rho\n    x1 = int(x0 + 1000*(-b))\n    y1 = int(y0 + 1000*(a))\n    x2 = int(x0 - 1000*(-b))\n    y2 = int(y0 - 1000*(a))\n\n    cv2.line(img,(x1,y1),(x2,y2),(0,0,255),2)\n\ncv2.imshow('show',img)\ncv2.waitKey()\n\n概率Hough变换\n在hough转换中，你可以看到，即使对于一个有两个参数的线，它也需要大量的计算.概率Hough变换是我们所见的Hough变换的一个优化,它并没有把所有的要点都考虑进去,相反，它只需要一个随机子集，对行检测来说足够.\ncv2.HoughLinesP(image, rho, theta, threshold[, lines[, minLineLength[, maxLineGap]]])\n\nminLineLength：最小长度的线。比这更短的线段被拒绝了。\nmaxLineGap：最大限度允许线段之间的间隙把它们当作一条线来对待\n\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('img.jpg')\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\nedges = cv2.Canny(gray, 50, 150, apertureSize=3)\nlines = cv2.HoughLinesP(edges, 1, np.pi/180,100, minLineLength=100, maxLineGap=10)\nfor line in lines:\n    x1, y1, x2, y2 = line[0]\n    cv2.line(img, (x1, y1), (x2, y2), (0,255,0), 2)\n\ncv2.imshow('show',img)\ncv2.waitKey()\n\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "0"}