{"title": "scrapy学习之路4.1(SQLAlchemy的使用)(未完) - 个人文章 ", "index": "scrapy,python", "content": "sqlalchemy是Python编程语言下的一款ORM框架，该框架建立在数据库API之上，使用关系对象映射进行数据库操作，简言之便是：将对象转换成SQL，然后使用数据API执行SQL并获取执行结果。\n\nSQLAlchemy本身无法操作数据库，其必须以pymsql等第三方插件，Dialect用于和数据API进行交流，根据配置文件的不同调用不同的数据库API，从而实现对数据库的操作。\nMySQL-Python\n    mysql+mysqldb://<user>:<password>@<host>[:<port>]/<dbname>\n  \npymysql\n    mysql+pymysql://<username>:<password>@<host>/<dbname>[?<options>]\n  \nMySQL-Connector\n    mysql+mysqlconnector://<user>:<password>@<host>[:<port>]/<dbname>\n  \ncx_Oracle\n    oracle+cx_oracle://user:pass@host:port/dbname[?key=value&key=value...]\n\n底层处理\n使用 Engine/ConnectionPooling/Dialect 进行数据库操作，Engine使用ConnectionPooling连接数据库，然后再通过Dialect执行SQL语句。\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\nfrom sqlalchemy import create_engine\n \n \nengine = create_engine(\"mysql+pymysql://root:123@127.0.0.1:3306/t1\", max_overflow=5)\n \n# 执行SQL\n# cur = engine.execute(\n#     \"INSERT INTO hosts (host, color_id) VALUES ('1.1.1.22', 3)\"\n# )\n \n# 新插入行自增ID\n# cur.lastrowid\n \n# 执行SQL\n# cur = engine.execute(\n#     \"INSERT INTO hosts (host, color_id) VALUES(%s, %s)\",[('1.1.1.22', 3),('1.1.1.221', 3),]\n# )\n \n \n# 执行SQL\n# cur = engine.execute(\n#     \"INSERT INTO hosts (host, color_id) VALUES (%(host)s, %(color_id)s)\",\n#     host='1.1.1.99', color_id=3\n# )\n \n# 执行SQL\n# cur = engine.execute('select * from hosts')\n# 获取第一行数据\n# cur.fetchone()\n# 获取第n行数据\n# cur.fetchmany(3)\n# 获取所有数据\n# cur.fetchall()\n\nORM\nORM框架的作用就是把数据库表的一行记录与一个对象互相做自动转换。 正确使用ORM的前提是了解关系数据库的原理。 ORM就是把数据库表的行与相应的对象建立关联，互相转换。 由于关系数据库的多个表还可以用外键实现一对多、多对多等关联，相应地， ORM框架也可以提供两个对象之间的一对多、多对多等功能。\n1.创建表\ncreate_engine方法参数('使用数据库+数据库链接模块://数据库用户名:密码@ip地址:端口/要连接的数据库名称?charset=utf8',echo=True表示是否查看生成的sql语句,max_overflow=5)\n\nmax_overflow=5 表示最大连接数\n\ndeclarative_base()创建一个SQLORM基类\nColumn()设置字段属性\ncreate_all()向数据库创建指定表\n\n创建表数据类型\n\n整数型：TINYINT，SMALLINT，INT，BIGINT\nBoolean()对应TINYINT\nInteger()对应INT\nSMALLINT()对应SMALLINT\nBIGINT()对应BIGINT\n\n浮点型：FLOAT，DOUBLE，DECIMAL(M,D)\nDECIMAL()对应DECIMAL\nFloat()对应FLOAT\nREAL()对应DOUBLE\n\n字符型：CHAR，VARCHAR\nString(40)对应VARCHAR\nCHAR()对应CHAR\n\n日期型：DATETIME，DATE，TIMESTAMP\nDATETIME()对应DATETIME\nDATE()对应DATE\nTIMESTAMP()对应TIMESTAMP\n\n备注型：TINYTEXT，TEXT，\nText()对应TEXT\nUnicodeText(10)对应TINYTEXT\n\n##############################################################################\n\n# -*- coding:utf-8 -*-\n\nimport sqlalchemy\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy import Column, Integer, String, ForeignKey, UniqueConstraint, Index\nfrom sqlalchemy.orm import sessionmaker, relationship\nfrom sqlalchemy import create_engine\n\nengine = create_engine(\"mysql+mysqlconnector://root:123456@127.0.0.1:3306/project_db\", echo=True)\nBase = declarative_base()\n\nclass People(Base):\n    __tablename__ = \"people\" # 表名\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String(16), nullable=False)\n    age = Column(Integer, nullable=False)\n    job = Column(String(16), nullable=False)\n    salary = Column(Integer, nullable=False)\n    \n\nBase.metadata.create_all(engine)  # 新建表\n# Base.metadata.drop_all(engine)  # 删除表\nprimary_key=True主键索引autoincrement=True自增字段index=True给当前字段创建普通索引unique=True给当前字段创建唯一索引UniqueConstraint('字段','字段',name='索引名称')创建唯一组合索引Index('索引名称','字段','字段')创建普通组合索引default='abc'设置字段默认值，不怎么可靠ForeignKey(\"连接表名称.连接表主键字段\")设置外键链表nullable=False类容不能为空\n\n创建外键表\n# -*- coding:utf-8 -*-\n\nimport sqlalchemy\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy import Column, Integer, String, ForeignKey, UniqueConstraint, Index\nfrom sqlalchemy.orm import sessionmaker, relationship\nfrom sqlalchemy import create_engine\n\nengine = create_engine(\"mysql+mysqlconnector://root:123456@127.0.0.1:3306/project_db\", echo=True)\nBase = declarative_base()\n\n\nclass People(Base):\n    __tablename__ = \"people\"\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String(16), nullable=False)\n    age = Column(Integer, nullable=False)\n    job = Column(String(16), nullable=False)\n    salary = Column(Integer, nullable=False)\n    books = relationship('book') # 这里的book为小写\n\n\nclass Book(Base):\n    __tablename__ = \"book\"\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String(16), nullable=False)\n    author = Column(String(16), nullable=False)\n    people_id = Column(Integer, ForeignKey('people.id')) # 这里的people为小写\n\n\nBase.metadata.create_all(engine)  # 新建表\n#Base.metadata.drop_all(engine)  # 删除表\n创建多对多\nclass Server(Base):\n    __tablename__ = \"server\"\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    hostname = Column(String(8))\n\n\nclass Group(Base):\n    __tablename__ = \"group\"\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String(16), unique=True)\n\n\nclass ServertoGroup(Base):\n    __tablename__ = \"servertogroup\"\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    server_id = Column(Integer, ForeignKey('server.id'))\n    group_id = Column(Integer, ForeignKey('group.id'))\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "0"}