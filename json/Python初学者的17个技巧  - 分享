{"title": "Python初学者的17个技巧  - 分享 ", "index": "python", "content": "英文原文：http://www.maxburstein.com/blog/python-shortcuts-for-the-python-beginner/\n\n交换变量\n\nx = 6\ny = 5\n\nx, y = y, x\n\nprint x\n>>> 5\nprint y\n>>> 6\n\n\nif 语句在行内\n\nprint \"Hello\" if True else \"World\"\n>>> Hello\n\n\n连接\n\n下面的最后一种方式在绑定两个不同类型的对象时显得很酷。\n\nnfc = [\"Packers\", \"49ers\"]\nafc = [\"Ravens\", \"Patriots\"]\nprint nfc + afc\n>>> ['Packers', '49ers', 'Ravens', 'Patriots']\n\nprint str(1) + \" world\"\n>>> 1 world\n\nprint `1` + \" world\"\n>>> 1 world\n\nprint 1, \"world\"\n>>> 1 world\nprint nfc, 1\n>>> ['Packers', '49ers'] 1\n\n\n计算技巧\n\n#向下取整\nprint 5.0//2\n>>> 2\n# 2的5次方\nprint 2**5\n>> 32\n\n\n注意浮点数的除法\n\nprint .3/.1\n>>> 2.9999999999999996\nprint .3//.1\n>>> 2.0\n\n\n数值比较\n\nx = 2\nif 3 > x > 1:\n   print x\n>>> 2\nif 1 < x > 0:\n   print x\n>>> 2\n\n\n两个列表同时迭代\n\nnfc = [\"Packers\", \"49ers\"]\nafc = [\"Ravens\", \"Patriots\"]\nfor teama, teamb in zip(nfc, afc):\n     print teama + \" vs. \" + teamb\n>>> Packers vs. Ravens\n>>> 49ers vs. Patriots\n\n\n带索引的列表迭代\n\nteams = [\"Packers\", \"49ers\", \"Ravens\", \"Patriots\"]\nfor index, team in enumerate(teams):\n    print index, team\n>>> 0 Packers\n>>> 1 49ers\n>>> 2 Ravens\n>>> 3 Patriots\n\n\n列表推导\n\n已知一个列表，刷选出偶数列表方法：\n\nnumbers = [1,2,3,4,5,6]\neven = []\nfor number in numbers:\n    if number%2 == 0:\n        even.append(number)\n\n\n用下面的代替\n\nnumbers = [1,2,3,4,5,6]\neven = [number for number in numbers if number%2 == 0]\n\n\n字典推导\n\nteams = [\"Packers\", \"49ers\", \"Ravens\", \"Patriots\"]\nprint {key: value for value, key in enumerate(teams)}\n>>> {'49ers': 1, 'Ravens': 2, 'Patriots': 3, 'Packers': 0}\n\n\n初始化列表的值\n\nitems = [0]*3\nprint items\n>>> [0,0,0]\n\n\n将列表转换成字符串\n\nteams = [\"Packers\", \"49ers\", \"Ravens\", \"Patriots\"]\nprint \", \".join(teams)\n>>> 'Packers, 49ers, Ravens, Patriots'\n\n\n从字典中获取元素\n\n不要用下列的方式\n\ndata = {'user': 1, 'name': 'Max', 'three': 4}\ntry:\n   is_admin = data['admin']\nexcept KeyError:\n   is_admin = False\n\n\n替换为\n\ndata = {'user': 1, 'name': 'Max', 'three': 4}\nis_admin = data.get('admin', False)\n\n\n获取子列表\n\nx = [1,2,3,4,5,6]\n#前3个\nprint x[:3]\n>>> [1,2,3]\n#中间4个\nprint x[1:5]\n>>> [2,3,4,5]\n#最后3个\nprint x[-3:]\n>>> [4,5,6]\n#奇数项\nprint x[::2]\n>>> [1,3,5]\n#偶数项\nprint x[1::2]\n>>> [2,4,6]\n\n\n60个字符解决FizzBuzz\n\n前段时间Jeff Atwood 推广了一个简单的编程练习叫FizzBuzz，问题引用如下：\n\n写一个程序，打印数字1到100，3的倍数打印“Fizz”来替换这个数，5的倍数打印“Buzz”，对于既是3的倍数又是5的倍数的数字打印“FizzBuzz”。\n\n\n这里有一个简短的方法解决这个问题：\n\nfor x in range(101):print\"fizz\"[x%3*4::]+\"buzz\"[x%5*4::]or x\n\n\n集合\n\n用到Counter库\n\nfrom collections import Counter\nprint Counter(\"hello\")\n>>> Counter({'l': 2, 'h': 1, 'e': 1, 'o': 1})\n\n\n迭代工具\n\n和collections库一样，还有一个库叫itertools\n\nfrom itertools import combinations\nteams = [\"Packers\", \"49ers\", \"Ravens\", \"Patriots\"]\nfor game in combinations(teams, 2):\n    print game\n>>> ('Packers', '49ers')\n>>> ('Packers', 'Ravens')\n>>> ('Packers', 'Patriots')\n>>> ('49ers', 'Ravens')\n>>> ('49ers', 'Patriots')\n>>> ('Ravens', 'Patriots')\n\n\nFalse == True\n\n在python中，True和False是全局变量，因此：\n\nFalse = True\nif False:\n   print \"Hello\"\nelse:\n   print \"World\"\n>>> Hello\n\n\n译文首发：http://blog.92fenxiang.com/articles/1421931112\n\n                ", "mainLikeNum": ["8 "], "mainBookmarkNum": "43"}