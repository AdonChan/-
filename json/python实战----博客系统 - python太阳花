{"title": "python实战----博客系统 - python太阳花 ", "index": "windows,mysql,html5,python", "content": "如何使用Django框架编写自己的blog系统\n创建项目\nstep_1\n首先创建一个新项目FirstBlog(以下简称FB)，实现基础功能，如创建数据库，创建超级用户，可以实现后台管理员登陆\n过程可参考[链接描述][1]\n\n注册应用\nstep_2\n在FB中注册应用blog，编写数据库文件blog/models.py，告诉主程序FirstBlog/settings.py你注册了应用，并修改数据库\n后台运行前，需要在blog/admin.py中注册站点\n\n\n\n博客属性：id,博客标题，博客作者，博客摘要，博客正文，博客创建时间，博客所属专栏（类别），博客标签，阅读数\n标签属性：id,标签名称\n专栏（类别）属性：id,专栏名称\n博客和专栏： 多对一\n博客和标签： 多对多\n与flask的数据库表结构不同,django框架里，数据库表之间的关联只需要在对应关系里多的一侧写外键ForeignKey，不需要在另一个表写反向引用。如果是多对多的关系，可在任意一端写ManyToManyField。\n# blog/models.py\nfrom django.contrib.auth.models import User\nfrom django.db import models\n\n\n# Create your models here.\n# 博客属性：id,博客标题，博客作者，博客摘要，博客正文，博客创建时间，博客所属专栏（类别），博客标签，阅读数，评论数\n# 标签属性：id,标签名称\n# 专栏（类别）属性：id,专栏名称\n# 博客和专栏： 多对一\n# 博客和标签： 多对多\nclass Category(models.Model):\n    name = models.CharField(max_length=64, verbose_name='专栏名称')\n\n    class Meta:\n        verbose_name = '专栏'\n        verbose_name_plural = '专栏'\n    def __str__(self):\n        return '%s' %(self.name)\n\nclass Tag(models.Model):\n    name = models.CharField(max_length=64, verbose_name='标签名称')\n    class Meta:\n        verbose_name = '标签'\n        verbose_name_plural = '标签'\n    def __str__(self):\n        return '%s' %(self.name)\n\nclass Post(models.Model):\n    title = models.CharField(max_length=100, unique=True, verbose_name='标题')\n    create_time = models.DateTimeField(verbose_name='创建时间')\n    summary = models.CharField(max_length=255, verbose_name='摘要')\n    body = models.TextField(verbose_name='正文')\n    # 作者可以从管理员数据库表User中查找\n    author = models.ForeignKey(User, verbose_name='作者')\n    category = models.ForeignKey(Category, verbose_name='专栏')\n    tags = models.ManyToManyField(Tag, verbose_name='标签')\n    views = models.IntegerField(default=0,verbose_name='阅读数')\n    class Meta:\n        verbose_name = '博客'\n        verbose_name_plural = '博客'\n    def __str__(self):\n        return '%s' %(self.title)\n创建数据\nstep_3\n后台创建多个标签、栏目，多篇博客，确保前端显示是有数据的。\n\n构造路由\nstep_4\n构建路由和视图函数，并告诉主路由函数FirstBlog/settings.py如何查找\n\n前端显示\nstep_5\n创建静态模板目录static/，修改模板文件，settings.py文件的static配置。如果没有修改settings.py文件，可在模板文件加上{% load static%}。并修改样式(css...)的位置\n根据使用的网页模板，显示自己的页面\n\n显示结果：\n如何快速准确跳转页面\nfrom django.urls import reverse    #返回正确而完整的路由\n为了在html文件内，继续阅读可以直接跳转{{ post.get_url }}\n注意在重写视图函数名称时，需要申明命名空间\n\n修改blog/models.py的Post表，添加属性get_url()\n#blog/models.py\n    def get_url(self):\n        return reverse('blog:detail',kwargs={'id':self.pk})\n#blog/urls.py\n\nfrom django.conf.urls import url\nfrom django.contrib import admin\n\nfrom blog import views\napp_name = 'blog'\nurlpatterns = [\n    url(r'^$',views.index ,name='index'),\n    url(r'book/(?P<id>\\d+)/$',views.detail,name='detail' ),\n]\n\n阔以看见html文件的‘继续阅读’会自动链接到博客详情页\n{#templates/blog/index.html 部分代码#}\n <div class=\"read-more cl-effect-14\">\n                                <a href=\"{{ post.get_url }}\" class=\"more-link\">继续阅读 <span\n                                        class=\"meta-nav\">→</span></a>\n                            </div>\n\n正文显示使用markdown语法\n现在的博客都是使用mrkdown语法来显示的，并且配备高亮显示\n需要下载安装模块Markdown,pygments\n在视图函数里将博客正文转成html时，加上高亮的ectensions\n修改base.html,添加对应高亮的css样式\n#blog/views.py文件\n post.body = markdown(\n        post.body,\n        extensions=['markdown.extensions.extra',\n                    'markdown.extensions.codehilite',\n                    'markdown.extensions.toc', ],\n        output_format='html'\n    )\n\n{#templates/blog/detail.html 部分代码#}\n\n  <div class=\"entry-content clearfix\">\n     {{ post.body | safe}}\n   </div>\n{#templates/base.html 部分代码#}\n\n    {#    代码高亮显示的样式#}\n    <link rel=\"stylesheet\" href=\"/static/css/highlights/github.css\">\n\n增加阅读量\n修改数据库表结构，添加增加阅读量的方法\n#blog/models.py\n# 增加阅读量\ndef add_views(self):\n    self.views +=1\n    self.save(update_fields=['views'])    #只重新保存更新字段views\n\n修改视图函数，当你访问某一篇博客时，阅读量加1\npost = Post.objects.get(id=id)\npost.add_views()\n阔以从图上看出，阅读量的增加\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}