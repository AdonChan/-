{"title": "Tornado 简单入门教程（二）——Demo2 - CHENGKANG ", "index": "mongodb,python,tornado", "content": "前面的话\n\n在Demo1里面,我们练习了如何部署应用、tornado框架的基本结构以及应用如何处理请求。\n其实Demo1算不上一个博客啦。一个最基本的信息系统一定要包含对数据库的增、删、改和查。所以这次，我们来将Demo1升级为Demo2，添加上基本的增删改查。\n\n源码\n\n\n  终于=。=在github上创建了项目，把源码传上去了。有需要的同学自己去下载吧。https://github.com/cAntCheng/simple_tutorial_of_tornado\n\n\n呐，还是把源码在这里贴一下\n\n\n  demo.py\n\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport os.path\n\nimport tornado.auth\nimport tornado.escape\nimport tornado.httpserver\nimport tornado.ioloop\nimport tornado.options\nimport tornado.web\nfrom tornado.options import define, options\n\nimport pymongo\n\ndefine(\"port\", default=8002, help=\"run on the given port\", type=int)\n\nclass Application(tornado.web.Application):\n    def __init__(self):\n        handlers = [\n            (r\"/\", MainHandler),\n            (r\"/edit/([0-9Xx\\-]+)\", EditHandler),\n            (r\"/add\", EditHandler),\n            (r\"/delete/([0-9Xx\\-]+)\", DelHandler),\n            (r\"/blog/([0-9Xx\\-]+)\", BlogHandler),\n        ]\n        settings = dict(\n            template_path=os.path.join(os.path.dirname(__file__), \"templates\"),\n            static_path=os.path.join(os.path.dirname(__file__), \"static\"),\n            debug=True,\n            )\n        conn = pymongo.Connection(\"localhost\", 27017)\n        self.db = conn[\"demo2\"]\n        tornado.web.Application.__init__(self, handlers, **settings)\n\n\nclass MainHandler(tornado.web.RequestHandler):\n    def get(self):\n        import time\n        coll = self.application.db.blog\n        blogs = coll.find().sort(\"id\",pymongo.DESCENDING)\n        self.render(\n            \"index.html\",\n            blogs = blogs,\n            time = time,\n        )\n\nclass EditHandler(tornado.web.RequestHandler):\n    def get(self, id=None):\n        blog = dict()\n        if id:\n            coll = self.application.db.blog\n            blog = coll.find_one({\"id\": int(id)})\n        self.render(\"edit.html\",\n            blog = blog)\n\n    def post(self, id=None):\n        import time\n        coll = self.application.db.blog\n        blog = dict()\n        if id:\n            blog = coll.find_one({\"id\": int(id)})\n        blog['title'] = self.get_argument(\"title\", None)\n        blog['content'] = self.get_argument(\"content\", None)\n        if id:\n            coll.save(blog)\n        else:\n            last = coll.find().sort(\"id\",pymongo.DESCENDING).limit(1)\n            lastone = dict()\n            for item in last:\n                lastone = item\n            blog['id'] = int(lastone['id']) + 1\n            blog['date'] = int(time.time())\n            coll.insert(blog)\n        self.redirect(\"/\")\n\nclass DelHandler(tornado.web.RequestHandler):\n    def get(self, id=None):\n        coll = self.application.db.blog\n        if id:\n            blog = coll.remove({\"id\": int(id)})\n        self.redirect(\"/\")\n\nclass BlogHandler(tornado.web.RequestHandler):\n    def get(self, id=None):\n        import time\n        coll = self.application.db.blog\n        if id:\n            blog = coll.find_one({\"id\": int(id)})\n            self.render(\"blog.html\",\n                page_title = \"我的博客\",\n                blog = blog,\n                time = time,\n                )\n        else:\n            self.redirect(\"/\")\n\ndef main():\n    tornado.options.parse_command_line()\n    http_server = tornado.httpserver.HTTPServer(Application())\n    http_server.listen(options.port)\n    tornado.ioloop.IOLoop.instance().start()\n\n\nif __name__ == \"__main__\":\n    main()\n\n\n\n  index.html\n\n\n{% autoescape None %}\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n    <head>\n        <meta charset=\"utf-8\">\n        <title>B06 Innovation Space</title>\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"{{ static_url(\"css/style.css\") }}\">\n    </head>\n    <body>\n        <div class=\"main\">\n            <a href=\"/\">\n                <img class=\"logo\" src=\"{{ static_url(\"img/logo.png\") }}\">\n            </a>\n            <div class=\"container\">\n                <h1>欢迎访问B06创新实验室的博客</h1>\n                {% autoescape None %}\n                {% for blog in blogs %}\n                <div class=\"content\">\n                    <div class=\"Title\">\n                        <p>\n                            <a href=\"/blog/{{ int(blog['id']) }}\">{{ blog['title'] }}</a>\n                        </p>\n                        <p>\n                            <span class=\"Time\">{{ time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(blog['date']) ) }}</span>\n                        </p>\n                    </div>\n                    <div class=\"Article\">\n                        <p>\n                            {{ blog['content'] }}\n                        </p>\n                    </div>\n                </div>\n                {% end %}\n                <a href=\"/add\">\n                    <input type=\"button\" class=\"Article Button Submit\" value=\"发    布\" onclick=\"document.location.href('/add/')\"/>\n                </a>\n            </div>\n        </div>\n    </body>\n</html>\n\n\n\n  blog.html\n\n\n{% autoescape None %}\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n    <head>\n        <meta charset=\"utf-8\">\n        <title>{{ page_title }}</title>\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"{{ static_url(\"css/style.css\") }}\">\n    </head>\n    <body>\n        <div class=\"main\">\n            <a href=\"/\">\n                <img class=\"logo\" src=\"{{ static_url(\"img/logo.png\") }}\">\n            </a>\n            <div class=\"container\">\n                <h1>欢迎访问B06创新实验室的博客</h1>\n                <div class=\"content\">\n                    <div class=\"Title\">\n                        <p>\n                            {{ blog['title'] }}\n                        </p>\n                        <p>\n                            <span class=\"Time\">{{ time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(blog['date']) ) }}</span>\n                        </p>\n                    </div>\n                    <div class=\"Article\">\n                        <p>\n                            {{ blog['content'] }}\n                        </p>\n                    </div>\n                    <div class=\"buttonDiv\">\n                        <a href=\"/edit/{{ int(blog['id']) }}\">\n                            <input type=\"button\" class=\"Article Button Edit\" value=\"编    辑\"/>\n                        </a>\n                        <a href=\"/delete/{{ int(blog['id']) }}\">\n                            <input type=\"button\" class=\"Article Button Delete\" value=\"删    除\"/>\n                        </a>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </body>\n</html>\n\n\n\n  edit.html\n\n\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n    <head>\n        <meta charset=\"utf-8\">\n        <title>B06 Innovation Space</title>\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"{{ static_url(\"css/style.css\") }}\">\n        <script type=\"text/javascript\">\n            window.setInterval(function() {\n                go_to();\n            },\n            100);\n            function go_to() {\n                if( document.getElementById(\"myArticle\").style.height < (document.getElementById(\"myArticle\").scrollHeight - 4 ) + \"px\")\n                    document.getElementById(\"myArticle\").style.height = document.getElementById(\"myArticle\").scrollHeight + \"px\";\n            }\n        </script>\n    </head>\n    <body>\n        <div class=\"main\">\n            <a href=\"/\">\n                <img class=\"logo\" src=\"{{ static_url(\"img/logo.png\") }}\">\n            </a>\n            <div class=\"container\">\n                <h1>欢迎访问B06创新实验室的博客</h1>\n                <div class=\"content\">\n                    {% if blog.get('id', None) %}\n                    <form method=\"post\" action=\"/edit/{{ int(blog['id']) }}\">\n                    {% else%}\n                    <form method=\"post\" action=\"/add\">\n                    {% end %}\n                        <p>文章标题：</p>\n                        <input type=\"text\" class=\"Title\" name=\"title\" placeholder=\"在这里输入你的标题\" value=\"{{ blog.get('title', '') }}\" />\n                        <p>文章正文：</p>\n                        <textarea type=\"text\" class=\"Article\" id=\"myArticle\" name=\"content\" placeholder=\"在这里输入你的正文\">\n                            {{ blog.get('content', '') }}\n                        </textarea>\n                        <br/>\n                        {% if blog.get('id', None) %}\n                        <input type=\"submit\" class=\"Article Button Submit\" value=\"修    改\"/>\n                        {% else%}\n                        <input type=\"submit\" class=\"Article Button Submit\" value=\"发    布\"/>\n                        {% end %}\n                    </form>\n                </div>\n            </div>\n        </div>\n    </body>\n</html>\n\n\n应用结构\n\n代码回顾：\n\nhandlers = [\n            (r\"/\", MainHandler),\n            (r\"/edit/([0-9Xx\\-]+)\", EditHandler),\n            (r\"/add\", EditHandler),\n            (r\"/delete/([0-9Xx\\-]+)\", DelHandler),\n            (r\"/blog/([0-9Xx\\-]+)\", BlogHandler),\n        ]\n\n\n在Demo2中定义了5个handler，分别是\n\n\n\n(r\"/\", MainHandler)->博客列表\n\n\n(r\"/edit/([0-9Xx\\-]+)\", MainHandler)->编辑博客\n\n\n(r\"/add\", MainHandler)->发表博客\n\n\n(r\"/delete/([0-9Xx\\-]+)\", MainHandler)->删除博客\n\n\n(r\"/blog/([0-9Xx\\-]+)\", MainHandler)->查看博客\n\n\n通过这五个handler，我们终于能写出一个真正的博客了噢耶。\n\n有没有注意到/([0-9Xx\\-]+)！！！这是干嘛的呢？恩，这是一个url参数。这个正则表达式规定参数由0-9的数字和X组成。\n在edit、delete和blog方法中，我们需要一个博客id参数来找到指定的博客进行响应操作，所以我们在这里添加了一个url参数。\n\n博客首页\n\n代码回顾：\n\nclass MainHandler(tornado.web.RequestHandler):\n    def get(self):\n        import time\n        coll = self.application.db.blog\n        blogs = coll.find().sort(\"id\",pymongo.DESCENDING)\n        self.render(\n            \"index.html\",\n            blogs = blogs,\n            time = time,\n        )\n\n\n在MainHandler中，我们通过find()查询所有的博客，并通过sort(\"id\",pymongo.DESCENDING)对博客id进行倒序排序（因为id越大，博文就越新，那它就应该在越前面显示嘛）。\n同时载入了time模块，方便我们在模板里输出正确格式的时间。\n\n代码回顾：\n\n<span class=\"Time\">{{ time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(blog['date']) ) }}</span>\n\n\n看看index.html，在输出时间的这一行，调用了time模块的strftime()方法，将在数据库储存的时间按照制定的格式%Y-%m-%d %H:%M:%S输出。\n\n\n  注意：可以看到，在self.render()方法中，我们将time对象作为参数传递到模板中。\n  这样我们才可以在模板中调用time对象的方法。\n\n\n代码回顾：\n\n{% for blog in blogs %}\n    ...\n{% end %}\n\n\n通过for循环输出博客列表。\n\n来看看效果（不要在意里面乱七八糟的内容=。=）：\n\n增\n\n代码回顾：\n\n(r\"/add\", EditHandler),\n\n\n有没有觉得奇怪=。=，为什么add（发表博客）调用的还是EditHandler。\n\n\n  解释：\n  一般的博客系统，发表博客和编辑博客的模板（html文件）其实是一样的。无非是编辑博客的模板里填充了博客的内容，而发表博客的模板是一个空表单。\n  因此我们常常把新增和编辑放在同一个方法里处理。具体的处理方法我们下面继续聊。\n\n\n代码回顾：\n\nclass EditHandler(tornado.web.RequestHandler):\n    def get(self, id=None):\n        blog = dict()\n        if id:\n            coll = self.application.db.blog\n            blog = coll.find_one({\"id\": int(id)})\n        self.render(\"edit.html\",\n            blog = blog)\n\n\n在get方法中，我们新建了一个空字典blog。接下来判断id是否为空。我们通过判断id是否为空来选择下一步是编辑还是新增。\n\n代码回顾：\n\n<a href=\"/add\">\n    <input type=\"button\" class=\"Article Button Submit\" value=\"发    布\"/>\n</a>\n\n\n思考一下业务逻辑，当我们点击首页发布按钮，即访问http://127.0.0.1:8002/add，由EditHandler执行get方法。\n\n代码回顾：\n\ndef get(self, id=None):\n\n\n因为没有传递url参数，所以id赋值为默认值None。\n\n代码回顾：\n\n    if id:\n        coll = self.application.db.blog\n        blog = coll.find_one({\"id\": int(id)})\n    self.render(\"edit.html\",\n        blog = blog)\n\n\n因为id = None，所以if id:为false。因此接下来执行self.render(\"edit.html\",blog = blog)。\n\n代码回顾：\n\n{% if blog.get('id', None) %}\n<form method=\"post\" action=\"/edit/{{ int(blog['id']) }}\">\n{% else%}\n<form method=\"post\" action=\"/add\">\n{% end %}\n    <p>文章标题：</p>\n    <input type=\"text\" class=\"Title\" name=\"title\" placeholder=\"在这里输入你的标题\" value=\"{{ blog.get('title', '') }}\" />\n    <p>文章正文：</p>\n    <textarea type=\"text\" class=\"Article\" id=\"myArticle\" name=\"content\" placeholder=\"在这里输入你的正文\">\n        {{ blog.get('content', '') }}\n    </textarea>\n    <br/>\n    {% if blog.get('id', None) %}\n    <input type=\"submit\" class=\"Article Button Submit\" value=\"修    改\"/>\n    {% else%}\n    <input type=\"submit\" class=\"Article Button Submit\" value=\"发    布\"/>\n    {% end %}\n</form>\n\n\n在edit.html中，我们通过判断blog.get('id', None)的值是否为None来输出不同的form标签。\n\n\n  dict.get('key','Defalt')这个方法用于获取字典中指定键名的键值（第一个参数），如果该键名不存在，则返回第二个参数设定的默认值。\n  要调用这个方法，我们必须有一个字典可以查找。所以在EditHandler的get方法中，我们定义了一个空字典：blog（还记得吗？回头看一下代码吧。）\n\n\n继续刚才的业务逻辑，我们渲染了edit.html，并将空字典：blog作为参数传递到模板文件中。所以blog.get('id', None) == None，所以输出<form method=\"post\" action=\"/add\">。\n\n下面的{{ blog.get('title', '') }}和{{ blog.get('content', '') }}，同上，均为空字符串。所以我们最终得到了一个空表单页面，也就是我们的发布博客页面。\n\n\n\n当我们填写好表单，点击发布按钮，表单就以POST方式被提交到/add（相对路径，对应的绝对路径为http://127.0.0.1:8002/add）。这时候EditHandler执行post方法。\n\n代码回顾：\n\ndef post(self, id=None):\n    import time\n    coll = self.application.db.blog\n    blog = dict()\n    if id:\n        blog = coll.find_one({\"id\": int(id)})\n    blog['title'] = self.get_argument(\"title\", None)\n    blog['content'] = self.get_argument(\"content\", None)\n    if id:\n        coll.save(blog)\n    else:\n        last = coll.find().sort(\"id\",pymongo.DESCENDING).limit(1)\n        lastone = dict()\n        for item in last:\n            lastone = item\n        blog['id'] = int(lastone['id']) + 1\n        blog['date'] = int(time.time())\n        coll.insert(blog)\n    self.redirect(\"/\")\n\n\n在post方法中，同样的逻辑判断执行新增还是编辑。\n\n代码回顾：\n\nblog['title'] = self.get_argument(\"title\", None)\nblog['content'] = self.get_argument(\"content\", None)\n\n\n将获取的表单填充到空字典：blog中，然后调用coll.insert(blog)方法向数据库中插入文档。\n\n诶诶诶，等等，好像插入之前还有好几行啊！！\n好吧=。=这几行代码是用来生成新博客id的。我们的博客需要一个id来标识身份，所以我们给每一篇博客设置一个id。一般就是用一个从1开始自增的整数作为id啦。\n\n\n  解释：\n  因为mongodb不像mysql那样可以设置自增字段，所以我们需要自己生成自增的id（查过资料应该是有办法设置自增，但是文档没太看明白=。=就当没有办法吧。除了文档中的办法，我查了好久，发现都是靠自己写函数生成自增的id，大家有兴趣可以自己去查一下。在这里我就用自己的方法了。）\n\n\n我的方法是这样的：last = coll.find().sort(\"id\",pymongo.DESCENDING).limit(1)倒序查询数据库获取最后id最大的那一条记录。因为find()函数返回的结果是一个数组？所以要用for循环取值（因为只查询了一条记录，所以用一个循环也不会太奢侈吧啦啦啦）。blog['id'] = int(lastone['id']) + 1将最大id加1赋值给新博客的id。因为mongodb在存整型数的时候好像会默认存为浮点型（具体可以自行百度），所以用int()方法处理lastone['id']保证我们处理过程中数据类型的正确。\n\n好了，这样我们终于成功新增了一篇博客！！！\n\n查\n\n当我们在首页点击某一篇博客的标题的时候，比如点击第二篇，我们会访问http://127.0.0.1:8002/blog/2，进入到这个页面：\n\n这个过程是这样的：/blog对应BlogHandler，执行get方法。\n\n代码回顾：\n\nclass BlogHandler(tornado.web.RequestHandler):\n    def get(self, id=None):\n        import time\n        coll = self.application.db.blog\n        if id:\n            blog = coll.find_one({\"id\": int(id)})\n            self.render(\"blog.html\",\n                page_title = \"我的博客\",\n                blog = blog,\n                time = time,\n                )\n        else:\n            self.redirect(\"/\")\n\n\nif判断id是否存在，不存在则跳转到首页。我们这里get方法获取到url参数，因此id=2。blog = coll.find_one({\"id\": int(id)})查询该博客并渲染博客页面。\n\n这样，我们就完成了博客查看的功能。\n\n\n  留一个小问题。\n  因为这个demo是刚开始学tornado的时候写的，所以代码其实写得很糟糕。BlogHandler可能这样写会更好一点，初学的同学看一看，思考一下为什么。我就不改demo里的代码了。\n\nclass BlogHandler(tornado.web.RequestHandler):\n        def get(self, id=0):\n            import time\n            coll = self.application.db.blog\n            blog = coll.find_one({\"id\": int(id)})\n            if blog:\n                self.render(\"blog.html\",\n                    page_title = \"我的博客\",\n                    blog = blog,\n                    time = time,\n                    )\n            else:\n                self.redirect(\"/\")\n\n\n\n改\n\n代码回顾：\n\nclass EditHandler(tornado.web.RequestHandler):\n    def get(self, id=None):\n        blog = dict()\n        if id:\n            coll = self.application.db.blog\n            blog = coll.find_one({\"id\": int(id)})\n        self.render(\"edit.html\",\n            blog = blog)\n\n    def post(self, id=None):\n        import time\n        coll = self.application.db.blog\n        blog = dict()\n        if id:\n            blog = coll.find_one({\"id\": int(id)})\n        blog['title'] = self.get_argument(\"title\", None)\n        blog['content'] = self.get_argument(\"content\", None)\n        if id:\n            coll.save(blog)\n        else:\n            last = coll.find().sort(\"id\",pymongo.DESCENDING).limit(1)\n            lastone = dict()\n            for item in last:\n                lastone = item\n            blog['id'] = int(lastone['id']) + 1\n            blog['date'] = int(time.time())\n            coll.insert(blog)\n        self.redirect(\"/\")\n\n\n自己看，就不多说了=。=\n\n删\n\n删除操作的逻辑是，传递博客id给DelHandler，然后调用remove()方法从数据库删除指定博客。\n\n代码回顾：\n\nclass DelHandler(tornado.web.RequestHandler):\n    def get(self, id=None):\n        coll = self.application.db.blog\n        if id:\n            blog = coll.remove({\"id\": int(id)})\n        self.redirect(\"/\")\n\n\n<(￣ˇ￣)/相信聪明的你已经看懂了！\n\n总结\n\n至此，我们练习了mongodb的增删改查，也实现了应用的增删改查。\n当然这个Demo还有很多需要改进的地方，比如：\n\n\n构造形如http://127.0.0.1:8002/delete?id=2的链接，通过get方法传递参数。\n给我们的表单加上格式验证。\n\n同学们可以自己稍作修改尝试一下。\n\n                ", "mainLikeNum": ["3 "], "mainBookmarkNum": "20"}