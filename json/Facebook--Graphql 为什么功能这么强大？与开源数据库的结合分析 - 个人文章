{"title": "Facebook--Graphql 为什么功能这么强大？与开源数据库的结合分析 - 个人文章 ", "index": "graphql,arangodb,docker,python,javascript", "content": "Updated GraphQL Sync in ArangoDB 3.2\nJust in time for the upcoming 3.2.0 release, we have updated the graphql-sync module for compatibility with graphql-js versions 0.7.2, 0.8.2, 0.9.6 and 0.10.1. The graphql-sync module allows developers to implement GraphQL backends and schemas in strictly synchronous JavaScript environments like the ArangoDB Foxx framework by providing a thin wrapper around the official GraphQL implementation for JavaScript.\nAs a long-term database solution, ArangoDB is committed to API stability and avoids upgrades to third-party dependencies that would result in breaking changes. This means ArangoDB will continue to bundle the graphql-js 0.6.2 compatibility version of graphql-sync.\nHowever, in order to allow developers to keep up with the rapid development of the GraphQL language and reference implementation, starting with ArangoDB 3.2, services that bring their own version of graphql-sync can now still benefit from the built-in Foxx GraphQL integration.\nSimply pass the imported module as the new graphql option when creating the router:\nconst graphql = require('graphql-sync');\nconst createGraphQLRouter = require('@arangodb/foxx/graphql');\nconst graphqlSchema = new graphql.Schema({\n//...\n});\nmodule.context.use(createGraphQLRouter({\nschema: graphqlSchema,\ngraphiql: true,\ngraphql: graphql\n}));\n\nIf you want to try out Foxx with the latest release of graphql-sync, grab the ArangoDB 3.2 beta and make sure to include the node_modules/graphql-sync folder in your service bundle.\nGraphQL-- a query language for your API\nGraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools.\nAsk for what you need, get exactly that!Send a GraphQL query to your API and get exactly what you need, nothing more and nothing less. GraphQL queries always return predictable results. Apps using GraphQL are fast and stable because they control the data they get, not the server.\nGet many resources in a single requestGraphQL queries access not just the properties of one resource but also smoothly follow references between them. While typical REST APIs require loading from multiple URLs, GraphQL APIs get all the data your app needs in a single request. Apps using GraphQL can be quick even on slow mobile network connections.\nDescribe what’s possible with a type systemGraphQL APIs are organized in terms of types and fields, not endpoints. Access the full capabilities of your data from a single endpoint. GraphQL uses types to ensure Apps only ask for what’s possible and provide clear and helpful errors. Apps can use types to avoid writing manual parsing code.\nMove faster with powerful developer toolsKnow exactly what data you can request from your API without leaving your editor, highlight potential issues before sending a query, and take advantage of improved code intelligence. GraphQL makes it easy to build powerful tools like GraphiQL by leveraging your API’s type system.\nEvolve your API without versionsAdd new fields and types to your GraphQL API without impacting existing queries. Aging fields can be deprecated and hidden from tools. By using a single evolving version, GraphQL APIs give apps continuous access to new features and encourage cleaner, more maintainable server code.\nBring your owndata and codeGraphQL creates a uniform API across your entire application without being limited by a specific storage engine. Write GraphQL APIs that leverage your existing data and code with GraphQL engines available in many languages. You provide functions for each field in the type system, and GraphQL calls them with optimal concurrency.Find ArangoDB on Github\nOriginal article: https://www.arangodb.com/2017...http://graphql.org/\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}