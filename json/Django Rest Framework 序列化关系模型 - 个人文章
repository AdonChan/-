{"title": "Django Rest Framework 序列化关系模型 - 个人文章 ", "index": "python,django-rest-framework,django", "content": "这两天一直在学习 Django Rest Framework 这个框架，这是一个非常流行的 REST API 框架，深度整合 Django。但与传统 MVC 模式的不同， Django REST Framework 在使用过程中，需要理解一些新的东西。结合官方 API 分享一下框架中关于序列化关系模型的理解。\n序列化模型与序列化关系模型\n序列化模型，顾名思义，即对 models 里的数据模型作序列化。而序列化关系模型则是对 models 里数据模型中带有关系的如 ForeignKey, ManyToManyField 和 OneToOneField 字段作序列化。Django Rest Framework 提供了灵活的序列化关系模型，让开发者可以自由定制序列化数据模型。\n序列化关系模型\n根据官方的例子来看一下每一个关系模型的介绍。\n数据模型如下：\nclass Album(models.Model):\n    album_name = models.CharField(max_length=100)\n    artist = models.CharField(max_length=100)\n\nclass Track(models.Model):\n    album = models.ForeignKey(Album, related_name='tracks', on_delete=models.CASCADE)\n    order = models.IntegerField()\n    title = models.CharField(max_length=100)\n    duration = models.IntegerField()\n\n    class Meta:\n        unique_together = ('album', 'order')\n        ordering = ['order']\n\n    def __unicode__(self):\n        return '%d: %s' % (self.order, self.title)\nStringRelatedField\n使用 StringRelatedField 将返回一个对应关系 model 的 __unicode__() 方法的字符串。\n这个字段是只读的。\n参数：\nmany 如果应用于多对多关系，则应将此参数设置为 True\n序列化模型如下\nclass AlbumSerializer(serializers.ModelSerializer):\n    tracks = serializers.StringRelatedField(many=True)\n\n    class Meta:\n        model = Album\n        fields = ('album_name', 'artist', 'tracks')\n序列化结果如下：\n{\n    'album_name': 'Things We Lost In The Fire',\n    'artist': 'Low',\n    'tracks': [\n        '1: Sunflower',\n        '2: Whitetail',\n        '3: Dinosaur Act',\n        ...\n    ]\n}\nPrimaryKeyRelatedField\n使用 PrimaryKeyRelatedField 将返回一个对应关系 model 的主键。\n参数：\n\nqueryset 用于在验证字段输入时模型实例查找。 关系必须明确设置 queryset，或设置 read_only = True\nmany 如果是对应多个的关系，就设置为 True\nallow_null 如果设置为 True，则该字段将接受 None 的值或为空的关系的空字符串。默认为 False\npk_field 设置为一个字段以控制主键值的序列化/反序列化。例如，pk_field = UUIDField（format ='hex'） 将UUID主键序列化为紧凑的十六进制表示。\n\n序列化模型如下\nclass AlbumSerializer(serializers.ModelSerializer):\n    tracks = serializers.PrimaryKeyRelatedField(many=True, read_only=True)\n\n    class Meta:\n        model = Album\n        fields = ('album_name', 'artist', 'tracks')\n序列化结果如下：\n{\n    'album_name': 'Undun',\n    'artist': 'The Roots',\n    'tracks': [\n        89,\n        90,\n        91,\n        ...\n    ]\n}\nHyperlinkedRelatedField\n使用 HyperlinkedRelatedField 将返回一个超链接，该链接指向对应关系 model 的详细数据，view-name 是必选参数，为对应的视图生成超链接。\n参数：\n\nview_name 用作关系目标的视图名称。如果使用的是标准路由器类，那么它的格式为 <modelname>-detail 的字符串\nqueryset 验证字段输入时用于模型实例查询的查询器。关系必须明确设置 queryset，或设置 read_only = True\nmany 如果应用于多对多关系，则应将此参数设置为 True\nallow_null 如果设置为 True，则该字段将接受 None 的值或为空的关系的空字符串。默认为 False\nlookup_field 应该用于查找的目标上的字段。应该对应于引用视图上的 URL 关键字参数。默认值为 pk\nlookup_url_kwarg 与查找字段对应的 URL conf 中定义的关键字参数的名称。默认使用与 lookup_field 相同的值\nformat 如果使用 format 后缀，超链接字段将对目标使用相同的 format 后缀，除非使用 format 参数进行覆盖。\n\n序列化模型如下\nclass AlbumSerializer(serializers.ModelSerializer):\n    tracks = serializers.HyperlinkedRelatedField(\n        many=True,\n        read_only=True,\n        view_name='track-detail'\n    )\n\n    class Meta:\n        model = Album\n        fields = ('album_name', 'artist', 'tracks')\n序列化结果如下：\n{\n    'album_name': 'Graceland',\n    'artist': 'Paul Simon',\n    'tracks': [\n        'http://www.example.com/api/tracks/45/',\n        'http://www.example.com/api/tracks/46/',\n        'http://www.example.com/api/tracks/47/',\n        ...\n    ]\n}\nSlugRelatedField\n使用 SlugRelatedField 将返回一个指定对应关系 model 中的字段，需要擦参数 slug_field 中指定字段名称。\n参数：\n\nslug_field 应该用于表示目标的字段。这应该是唯一标识任何给定实例的字段。例如 username 。这是必选参数\nqueryset 验证字段输入时用于模型实例查询的查询器。 关系必须明确设置 queryset，或设置 read_only = True\nmany 如果应用于多对多关系，则应将此参数设置为 True\nallow_null 如果设置为 True，则该字段将接受 None 的值或为空的关系的空字符串。默认为 False\n\n序列化模型如下\nclass AlbumSerializer(serializers.ModelSerializer):\n    tracks = serializers.SlugRelatedField(\n        many=True,\n        read_only=True,\n        slug_field='title'\n     )\n\n    class Meta:\n        model = Album\n        fields = ('album_name', 'artist', 'tracks')\n序列化结果如下：\n{\n    'album_name': 'Dear John',\n    'artist': 'Loney Dear',\n    'tracks': [\n        'Airport Surroundings',\n        'Everything Turns to You',\n        'I Was Only Going Out',\n        ...\n    ]\n}\nHyperlinkedIdentityField\n使用 HyperlinkedIdentityField 将返回指定 view-name 的超链接的字段。\n参数：\n\nview_name 应该用作关系目标的视图名称。如果您使用的是标准路由器类，则它将是格式为 <model_name>-detail 的字符串。必选参数\nlookup_field 应该用于查找的目标上的字段。应该对应于引用视图上的 URL 关键字参数。默认值为 pk\nlookup_url_kwarg 与查找字段对应的 URL conf 中定义的关键字参数的名称。默认使用与 lookup_field 相同的值\nformat 如果使用 format 后缀，超链接字段将对目标使用相同的 format 后缀，除非使用 format 参数进行覆盖\n\n序列化模型如下\nclass AlbumSerializer(serializers.HyperlinkedModelSerializer):\n    track_listing = serializers.HyperlinkedIdentityField(view_name='track-list')\n\n    class Meta:\n        model = Album\n        fields = ('album_name', 'artist', 'track_listing')\n序列化结果如下：\n{\n    'album_name': 'The Eraser',\n    'artist': 'Thom Yorke',\n    'track_listing': 'http://www.example.com/api/track_list/12/',\n}\n嵌套序列化关系模型\n在序列化模型中指定嵌套序列化关系模型将返回一个该嵌套序列化关系模型对应的数据模型中序列化的数据。读起来有些拗口，看例子吧。\n参数：\nmany 如果应用于多对多关系，则应将此参数设置为 True\n序列化模型如下\nclass TrackSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Track\n        fields = ('order', 'title', 'duration')\n\nclass AlbumSerializer(serializers.ModelSerializer):\n    tracks = TrackSerializer(many=True, read_only=True)\n\n    class Meta:\n        model = Album\n        fields = ('album_name', 'artist', 'tracks')\n序列化结果如下：\n {\n    'album_name': 'The Grey Album',\n    'artist': 'Danger Mouse',\n    'tracks': [\n        {'order': 1, 'title': 'Public Service Announcement', 'duration': 245},\n        {'order': 2, 'title': 'What More Can I Say', 'duration': 264},\n        {'order': 3, 'title': 'Encore', 'duration': 159},\n    ],\n}\n\n                ", "mainLikeNum": ["7 "], "mainBookmarkNum": "6"}