{"title": "Python文件及目录操作 - 技术成长图谱 ", "index": "python", "content": "Python的目录操作主要依赖于os和 shutil 模块.\nPython目录操作\n新建目录\nos.mkdir(\"./test/\")\n#在当前目录下新建名为“test”的目录,存在则报错\n新建多级目录\nos.makedirs(\"./test/test1/test2/\")\n#存在则报错\n删除目录\nos.rmdir(\"./test/\") \n#移除非空目录，不为空情况下报错\n删除多级目录\nos.removedirs(\"./test/test1/test2\") \n#移除最后一级(test2)非空目录,不为空情况下报错\n递归拷贝树\nshutil.copytree(\"./test/\",\"./test1/\") \n#目标目录(./test1/)必须保证不存在，存在情况下报错\n递归删除树\nshutil.rmtree(\"./test/\") \n#删除test目录及所包含的文件和目录\n获取当前文件所在目录使用 os.getcwd(),sys.path[0]\n\nPython文件操作\n拷贝文件\nshutil.copyfile(\"./test/1.py\",\"./test1/1.py\") \n#目标(./test1/1.py)必须是新文件的路径，否则报错\n\nshutil.copy(\"./test/1.py\",\"./test1/\") \n#目标可以是新文件的路径，也可以是新文件的目录，后者的情况下，新文件的名字为原文件的名字，若存在则覆盖\n移动文件\nshutyil.move(\"./test/1.py\",\"./test1/\")\n#目标目录不存在则报错，存在同名文件也报错，目标也可以是文件的路径，例如“./test1/2.py” 此时文件会先移动到test1文件夹下，然后对文件进行重命名为2.py\n删除文件\nos.remove(\"./test/1.py\") \n#移除目标文件，不存在则报错\n获取当前文件所在路径\nos.path.abspath(\"./test\"):获取文件的绝对路径os.path.realpath(\"./test/\"):获取文件的真实路径\nPython路径处理\npython对路径的处理，主要存在于os.path模块下\n文件路径拼接\nos.path.join(\"./test/\",\"test1\") #./test/test1/\n判断文件或目录是否存在\nos.path.exists() \n#参数为文件路径或目录路径\n判断是否为文件\nos.path.isfile(\"./test/1.py\") \n#True 文件不存在的情况下为 False \n判断是否为目录\nos.path.isdir(\"./test/\") \n#True. 目录不存在的情况下为 False\n获取文件的名称\nos.path.basename(\"./test/1.py\") \n#1.py 路径不存在不会报错\n获取目录的名称\nos.path.dirname(\"./test/test1/\")\n# ./test/test1 参数后面的反斜杠很重要，区别是文件路径还是目录路径。\n分割路径中的文件和目录\nos.path.split(\"./test/test1/1.py\") \n# (\"./test/test1/\",\"1.py\")\n\nos.path.split(\"./test/test1/\") \n# (\"./test/test1/\",\"\")\n分割路径中的文件扩展名\nos.path.splitext(\"./test/1.py\") \n# (\"./test/1\",\".py\")\n遍历文件夹\n1)os.path.walk(path,func,args) 参数都必填\n参数1为遍历的目录，文件路径不存在不报错\n参数2为回调函数，定义为f(args,dirname,files)<dirname:文件当前遍历的目录，files:为当前目录下文件和目录信息的列表>\n参数3与参数2中函数的参数1相对应\n2)os.walk(path, topdown，onerror) 参数可选填\n参数1为遍历的目录，文件路径不存在不报错\n参数2为True或者不填时，遍历规则为先遍历目录在遍历文件，为False时与之相反\n参数3为对错误处理的函数，它调用时有一个参数, 一个OSError实例。报告这错误后，继续walk,或者抛出exception终止walk。\n调用方式:\nfor dirname(当前遍历的目录),dirs(目录下的目录列表),files(目录下的文件列表) in os.walk(path)\n在进行文件内指针重置的时候，除了Python基础篇文件部分介绍的绝对定位外，通过os模块还可以实现相对定位。\nf.seek(位置,os.SEEK_SET<相对起始位置>|os.SEEK_END<相对结束位置>|os.SEEK_CUR<相对当前位置>)\n更多内容请参考\nos 模块: 请点击shutil 模块:请点击\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "5"}