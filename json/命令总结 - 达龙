{"title": "命令总结 - 达龙 ", "index": "python,linux", "content": "博文参考\nhttp://www.178linux.com/78199\nhttp://www.cnblogs.com/suliuer/p/5448747.html\nhttp://www.codes51.com/article/detail_911629.html\nhttp://www.cnblogs.com/maixiansheng/p/5427022.html\nhttp://www.cnblogs.com/xkfz007/archive/2012/02/28/2371457.html\n命令预览\n\n基础命令\n文本搜索\n\n权限管理\n\n文件搜索\n\n帮助命令\n\n用户管理\n\n压缩解压\n\n网络配置\n\n关机重启\n\n常用命令\n系统信息\nuname -m 显示机器的处理器架构\nuname -r 显示正在使用的内核版本\ncat /proc/cpuinfo 显示CPU info的信息\ncat /proc/meminfo 校验内存使用\ncat /proc/swaps 显示哪些swap被使用\ncat /proc/version 显示内核的版本\ncat /proc/net/dev 显示网络适配器及统计\ncat /proc/mounts 显示已加载的文件系统\nlspci -tv 罗列 PCI 设备\nlsusb -tv 显示 USB 设备\ndate 显示系统日期\ncal 2016 显示2016年的日历表\nclock -w 将时间修改保存到 BIOS\n获取IP地址\nifconfig eth0 | grep \"inet addr\" | awk '{print $2}' | cut -c 6-\nifconfig | grep \"inet addr:\" | grep -v \"127\" | cut -d: -f2 | awk '{print $1}'\n查看当前登录的用户个数\nwho | wc -l\n关机，重启，退出\nshutdown -h now 关闭系统(1)\ninit 0 关闭系统(2)\ntelinit 0 关闭系统(3)\nshutdown -h hours:minutes & 按预定时间关闭系统  \nshutdown -c 取消按预定时间关闭系统\nshutdown -r now 重启(1)\nreboot 重启(2)\nlogout 注销 \n查看内存大小\nfree -m |grep “Mem” | awk ‘{print $2}’\n查看文件大小和磁盘使用情况\ndu：基于文件，统计文件大小相加——是面向文件的命令，它计算分配给指定文件或者目录的空间。\ndf ：基于磁盘，统计数据块使用情况——通过文件系统中未分配的空间来确定文件系统中已分配空间的大小。\n常用命令：\ndf -hi \ndu -a \n查看80端口并排序\nnetstat -an -t | grep “:80″ | grep ESTABLISHED | awk ‘{printf “%s %s\\n”,$5,$6}’ | sort\n日志查看，搜索\ncat /var/log/rflogview/*errors\ngrep -i error /var/log/messages\ngrep -i fail /var/log/messages\ntail -f -n 2000 /var/log/messages\n文件和目录\ncd /home 进入 ‘/ home’ 目录’ \ncd .. 返回上一级目录 \ncd ../.. 返回上两级目录 \ncd 进入个人的主目录 \ncd ~user1 进入个人的主目录 \ncd – 返回上次所在的目录 \npwd 显示工作路径 \nls 查看目录中的文件 \nls -F 查看目录中的文件 \nls -l 显示文件和目录的详细资料 \nls -a 显示隐藏文件 \nls *[0-9]* 显示包含数字的文件名和目录名 \ntree 显示文件和目录由根目录开始的树形结构(1) \nlstree 显示文件和目录由根目录开始的树形结构(2) \nmkdir dir1 创建一个叫做 ‘dir1′ 的目录’ \nmkdir dir1 dir2 同时创建两个目录 \nmkdir -p /tmp/dir1/dir2 创建一个目录树 \nrm -f file1 删除一个叫做 ‘file1′ 的文件’ \nrmdir dir1 删除一个叫做 ‘dir1′ 的目录’ \nrm -rf dir1 删除一个叫做 ‘dir1’ 的目录并同时删除其内容 \nrm -rf dir1 dir2 同时删除两个目录及它们的内容 \nmv dir1 new_dir 重命名/移动 一个目录 \ncp file1 file2 复制一个文件 \ncp dir/* . 复制一个目录下的所有文件到当前工作目录 \ncp -a /tmp/dir1 . 复制一个目录到当前工作目录 \ncp -a dir1 dir2 复制一个目录 \nln -s file1 lnk1 创建一个指向文件或目录的软链接 \nln file1 lnk1 创建一个指向文件或目录的物理链接 \ntouch -t 0712250000 file1 修改一个文件或目录的时间戳 – (YYMMDDhhmm) \nfile file1 outputs the mime type of the file as text \niconv -l 列出已知的编码 \niconv -f fromEncoding -t toEncoding inputFile > outputFile creates a new from the given input file by assuming it is encoded in fromEncoding and converting it to toEncoding. \nfind . -maxdepth 1 -name *.jpg -print -exec convert “{}” -resize 80×60 “thumbs/{}” \\; batch resize files in the current directory and send them to a thumbnails directory (requires convert from Imagemagick) \ncut命令切字段\ncut -d : -f 1,5 /etc/passwd  \n#-d后面的冒号表示字段之间的分隔符。\n#-f表示取分割后取哪些字段。\n用户和组管理\ngroupadd group_name 创建一个新用户组 \ngroupdel group_name 删除一个用户组 \ngroupmod -n new_group_name old_group_name 重命名一个用户组 \nuseradd -c “Name Surname ” -g admin -d /home/user1 -s /bin/bash user1 创建一个属于 “admin” 用户组的用户 \nuseradd user1 创建一个新用户 \nuserdel -r user1 删除一个用户 ( ‘-r’ 排除主目录) \nusermod -c “User FTP” -g system -d /ftp/user1 -s /bin/nologin user1 修改用户属性 \npasswd 修改口令 \npasswd user1 修改一个用户的口令 (只允许root执行) \nchage -E 2005-12-31 user1 设置用户口令的失效期限 \npwck 检查 ‘/etc/passwd’ 的文件格式和语法修正以及存在的用户 \ngrpck 检查 ‘/etc/passwd’ 的文件格式和语法修正以及存在的群组 \nnewgrp group_name 登陆进一个新的群组以改变新创建文件的预设群组 \n文件权限\n文件的权限 – 使用 “+” 设置权限，使用 “-” 用于取消 \nls -lh 显示权限 \nls /tmp | pr -T5 -W$COLUMNS 将终端划分成5栏显示 \nchmod ugo+rwx directory1 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限 \nchmod go-rwx directory1 删除群组(g)与其他人(o)对目录的读写执行权限 \nchown user1 file1 改变一个文件的所有人属性 \nchown -R user1 directory1 改变一个目录的所有人属性并同时改变改目录下所有文件的属性 \nchgrp group1 file1 改变文件的群组 \nchown user1:group1 file1 改变一个文件的所有人和群组属性 \nfind / -perm -u+s 罗列一个系统中所有使用了SUID控制的文件 \nchmod u+s /bin/file1 设置一个二进制文件的 SUID 位 – 运行该文件的用户也被赋予和所有者同样的权限 \nchmod u-s /bin/file1 禁用一个二进制文件的 SUID位 \nchmod g+s /home/public 设置一个目录的SGID 位 – 类似SUID ，不过这是针对目录的 \nchmod g-s /home/public 禁用一个目录的 SGID 位 \nchmod o+t /home/public 设置一个文件的 STIKY 位 – 只允许合法所有人删除文件 \nchmod o-t /home/public 禁用一个目录的 STIKY 位 \n文件特殊属性\n文件的特殊属性 – 使用 “+” 设置权限，使用 “-” 用于取消 \nchattr +a file1 只允许以追加方式读写文件 \nchattr +c file1 允许这个文件能被内核自动压缩/解压 \nchattr +d file1 在进行文件系统备份时，dump程序将忽略这个文件 \nchattr +i file1 设置成不可变的文件，不能被删除、修改、重命名或者链接 \nchattr +s file1 允许一个文件被安全地删除 \nchattr +S file1 一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘 \nchattr +u file1 若文件被删除，系统会允许你在以后恢复这个被删除的文件 \nlsattr 显示特殊的属性 \n字符设置和文件格式转换\ndos2unix filedos.txt fileunix.txt 将一个文本文件的格式从MSDOS转换成UNIX \nunix2dos fileunix.txt filedos.txt 将一个文本文件的格式从UNIX转换成MSDOS \nrecode ..HTML < page.txt > page.html 将一个文本文件转换成html \nrecode -l | more 显示所有允许的转换格式 \n文件内容搜索\nfind / -name file1 从 ‘/’ 开始进入根文件系统搜索文件和目录 \nfind / -user user1 搜索属于用户 ‘user1’ 的文件和目录 \nfind /home/user1 -name \\*.bin 在目录 ‘/ home/user1′ 中搜索带有’.bin’ 结尾的文件 \nfind /usr/bin -type f -atime +100 搜索在过去100天内未被使用过的执行文件 \nfind /usr/bin -type f -mtime -10 搜索在10天内被创建或者修改过的文件 \nfind / -name \\*.rpm -exec chmod 755 ‘{}’ \\; 搜索以 ‘.rpm’ 结尾的文件并定义其权限 \nfind / -xdev -name \\*.rpm 搜索以 ‘.rpm’ 结尾的文件，忽略光驱、捷盘等可移动设备 \nlocate \\*.ps 寻找以 ‘.ps’ 结尾的文件 – 先运行 ‘updatedb’ 命令 \nwhereis halt 显示一个二进制文件、源码或man的位置 \nwhich halt 显示一个二进制文件或可执行文件的完整路径\n取文件内容的开头或结尾\nhead -n 5 /etc/passwd\n显示输入文件的前五行。\ntail -n 5 /etc/passwd             \n显示输入文件的最后五行。\n文件内容查看\ncat file1 从第一个字节开始正向查看文件的内容 \ntac file1 从最后一行开始反向查看一个文件的内容 \nmore file1 查看一个长文件的内容 \nless file1 类似于 ‘more’ 命令，但是它允许在文件中和正向操作一样的反向操作 \nhead -2 file1 查看一个文件的前两行 \ntail -2 file1 查看一个文件的最后两行 \ntail -f /var/log/messages 实时查看被添加到一个文件中的内容 \n重定向输出\n0:表示键盘输入(stdin)\n1:表示标准输出(stdout),系统默认是1\n2:表示错误输出(stderr)\n* 2>&1 就是将 stderr 并进 stdout 作输出\n* 1>&2 或 >&2 就是将 stdout 并进 stderr 作输出\ncommand >/dev/null 2>&1 &  == command 1>/dev/null 2>&1 &\n1)command:表示shell命令或者为一个可执行程序\n2)>:表示重定向到哪里\n3)/dev/null:表示Linux的空设备文件\n4)2:表示标准错误输出\n5)&1:&表示等同于的意思,2>&1,表示2的输出重定向等于于1\n6)&:表示后台执行,即这条指令执行在后台运行\n总而言之，这条命令的意思是：在后台执行这个程序,并将错误输出2重定向到标准输出1,然后将标准输出1全部放到/dev/null文件,也就是清空。\n文本处理\ncat file1 file2 … | command <> file1_in.txt_or_file1_out.txt general syntax for text manipulation using PIPE, STDIN and STDOUT \ncat file1 | command( sed, grep, awk, grep, etc…) > result.txt 合并一个文件的详细说明文本，并将简介写入一个新文件中 \ncat file1 | command( sed, grep, awk, grep, etc…) >> result.txt 合并一个文件的详细说明文本，并将简介写入一个已有的文件中 \ngrep Aug /var/log/messages 在文件 ‘/var/log/messages’中查找关键词”Aug” \ngrep ^Aug /var/log/messages 在文件 ‘/var/log/messages’中查找以”Aug”开始的词汇 \ngrep [0-9] /var/log/messages 选择 ‘/var/log/messages’ 文件中所有包含数字的行 \ngrep Aug -R /var/log/* 在目录 ‘/var/log’ 及随后的目录中搜索字符串”Aug” \nsed ‘s/stringa1/stringa2/g’ example.txt 将example.txt文件中的 “string1” 替换成 “string2” \nsed ‘/^$/d’ example.txt 从example.txt文件中删除所有空白行 \nsed ‘/ *#/d; /^$/d’ example.txt 从example.txt文件中删除所有注释和空白行 \necho ‘esempio’ | tr ‘[:lower:]’ ‘[:upper:]’ 合并上下单元格内容 \nsed -e ‘1d’ result.txt 从文件example.txt 中排除第一行 \nsed -n ‘/stringa1/p’ 查看只包含词汇 “string1″的行 \nsed -e ‘s/ *$//’ example.txt 删除每一行最后的空白字符 \nsed -e ‘s/stringa1//g’ example.txt 从文档中只删除词汇 “string1” 并保留剩余全部 \nsed -n ‘1,5p;5q’ example.txt 查看从第一行到第5行内容 \nsed -n ‘5p;5q’ example.txt 查看第5行 \nsed -e ‘s/00*/0/g’ example.txt 用单个零替换多个零 \ncat -n file1 标示文件的行数 \ncat example.txt | awk ‘NR%2==1’ 删除example.txt文件中的所有偶数行 \necho a b c | awk ‘{print $1}’ 查看一行第一栏 \necho a b c | awk ‘{print $1,$3}’ 查看一行的第一和第三栏 \npaste file1 file2 合并两个文件或两栏的内容 \npaste -d ‘+’ file1 file2 合并两个文件或两栏的内容，中间用”+”区分 \nsort file1 file2 排序两个文件的内容 \nsort file1 file2 | uniq 取出两个文件的并集(重复的行只保留一份) \nsort file1 file2 | uniq -u 删除交集，留下其他的行 \nsort file1 file2 | uniq -d 取出两个文件的交集(只留下同时存在于两个文件中的文件) \ncomm -1 file1 file2 比较两个文件的内容只删除 ‘file1’ 所包含的内容 \ncomm -2 file1 file2 比较两个文件的内容只删除 ‘file2’ 所包含的内容 \ncomm -3 file1 file2 比较两个文件的内容只删除两个文件共有的部分 \n打包压缩\nbunzip2 file1.bz2 解压一个叫做 ‘file1.bz2’的文件 \nbzip2 file1 压缩一个叫做 ‘file1’ 的文件 \ngunzip file1.gz 解压一个叫做 ‘file1.gz’的文件 \ngzip file1 压缩一个叫做 ‘file1’的文件 \ngzip -9 file1 最大程度压缩 \nrar a file1.rar test_file 创建一个叫做 ‘file1.rar’ 的包 \nrar a file1.rar file1 file2 dir1 同时压缩 ‘file1’, ‘file2’ 以及目录 ‘dir1’ \nrar x file1.rar 解压rar包 \nunrar x file1.rar 解压rar包 \ntar -cvf archive.tar file1 创建一个非压缩的 tarball \ntar -cvf archive.tar file1 file2 dir1 创建一个包含了 ‘file1’, ‘file2’ 以及 ‘dir1’的档案文件 \ntar -tf archive.tar 显示一个包中的内容 \ntar -xvf archive.tar 释放一个包 \ntar -xvf archive.tar -C /tmp 将压缩包释放到 /tmp目录下 \ntar -cvfj archive.tar.bz2 dir1 创建一个bzip2格式的压缩包 \ntar -xvfj archive.tar.bz2 解压一个bzip2格式的压缩包 \ntar -cvfz archive.tar.gz dir1 创建一个gzip格式的压缩包 \ntar -xvfz archive.tar.gz 解压一个gzip格式的压缩包 \nzip file1.zip file1 创建一个zip格式的压缩包 \nzip -r file1.zip file1 file2 dir1 将几个文件和目录同时压缩成一个zip格式的压缩包 \nunzip file1.zip 解压一个zip格式压缩包 \n磁盘空间\ndf -h 显示已经挂载的分区列表 \nls -lSr |more 以尺寸大小排列文件和目录 \ndu -sh dir1 估算目录 ‘dir1′ 已经使用的磁盘空间’ \ndu -sk * | sort -rn 以容量大小为依据依次显示文件和目录的大小 \nrpm -q -a –qf ‘%10{SIZE}t%{NAME}n’ | sort -k1,1n 以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统) \ndpkg-query -W -f=’${Installed-Size;10}t${Package}n’ | sort -k1,1n 以大小为依据显示已安装的deb包所使用的空间 (ubuntu, debian类系统) \n挂载文件系统\nmount /dev/hda2 /mnt/hda2 挂载一个叫做hda2的盘 – 确定目录 ‘/ mnt/hda2’ 已经存在 \numount /dev/hda2 卸载一个叫做hda2的盘 – 先从挂载点 ‘/ mnt/hda2’ 退出 \nfuser -km /mnt/hda2 当设备繁忙时强制卸载 \numount -n /mnt/hda2 运行卸载操作而不写入 /etc/mtab 文件- 当文件为只读或当磁盘写满时非常有用 \nmount /dev/fd0 /mnt/floppy 挂载一个软盘 \nmount /dev/cdrom /mnt/cdrom 挂载一个cdrom或dvdrom \nmount /dev/hdc /mnt/cdrecorder 挂载一个cdrw或dvdrom \nmount /dev/hdb /mnt/cdrecorder 挂载一个cdrw或dvdrom \nmount -o loop file.iso /mnt/cdrom 挂载一个文件或ISO镜像文件 \nmount -t vfat /dev/hda5 /mnt/hda5 挂载一个Windows FAT32文件系统 \nmount /dev/sda1 /mnt/usbdisk 挂载一个usb 捷盘或闪存设备 \nmount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share 挂载一个windows网络共享 \nRPM包\nRPM 包 – （Fedora, Redhat及类似系统） \nrpm -ivh package.rpm 安装一个rpm包 \nrpm -ivh –nodeeps package.rpm 安装一个rpm包而忽略依赖关系警告 \nrpm -U package.rpm 更新一个rpm包但不改变其配置文件 \nrpm -F package.rpm 更新一个确定已经安装的rpm包 \nrpm -e package_name.rpm 删除一个rpm包 \nrpm -qa 显示系统中所有已经安装的rpm包 \nrpm -qa | grep httpd 显示所有名称中包含 “httpd” 字样的rpm包 \nrpm -qi package_name 获取一个已安装包的特殊信息 \nrpm -qg “System Environment/Daemons” 显示一个组件的rpm包 \nrpm -ql package_name 显示一个已经安装的rpm包提供的文件列表 \nrpm -qc package_name 显示一个已经安装的rpm包提供的配置文件列表 \nrpm -q package_name –whatrequires 显示与一个rpm包存在依赖关系的列表 \nrpm -q package_name –whatprovides 显示一个rpm包所占的体积 \nrpm -q package_name –scripts 显示在安装/删除期间所执行的脚本l \nrpm -q package_name –changelog 显示一个rpm包的修改历史 \nrpm -qf /etc/httpd/conf/httpd.conf 确认所给的文件由哪个rpm包所提供 \nrpm -qp package.rpm -l 显示由一个尚未安装的rpm包提供的文件列表 \nrpm –import /media/cdrom/RPM-GPG-KEY 导入公钥数字证书 \nrpm –checksig package.rpm 确认一个rpm包的完整性 \nrpm -qa gpg-pubkey 确认已安装的所有rpm包的完整性 \nrpm -V package_name 检查文件尺寸、 许可、类型、所有者、群组、MD5检查以及最后修改时间 \nrpm -Va 检查系统中所有已安装的rpm包- 小心使用 \nrpm -Vp package.rpm 确认一个rpm包还未安装 \nrpm2cpio package.rpm | cpio –extract –make-directories *bin* 从一个rpm包运行可执行文件 \nrpm -ivh /usr/src/redhat/RPMS/`arch`/package.rpm 从一个rpm源码安装一个构建好的包 \nrpmbuild –rebuild package_name.src.rpm 从一个rpm源码构建一个 rpm 包 \nYUM安装软件\nYUM 软件包升级器 – （Fedora, RedHat及类似系统） \nyum install package_name 下载并安装一个rpm包 \nyum localinstall package_name.rpm 将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系 \nyum update package_name.rpm 更新当前系统中所有安装的rpm包 \nyum update package_name 更新一个rpm包 \nyum remove package_name 删除一个rpm包 \nyum list 列出当前系统中安装的所有包 \nyum search package_name 在rpm仓库中搜寻软件包 \nyum clean packages 清理rpm缓存删除下载的包 \nyum clean headers 删除所有头文件 \nyum clean all 删除所有缓存的包和头文件 \nDebian,Ubuntu安装工具\nDEB 包 (Debian, Ubuntu 以及类似系统) \ndpkg -i package.deb 安装/更新一个 deb 包 \ndpkg -r package_name 从系统删除一个 deb 包 \ndpkg -l 显示系统中所有已经安装的 deb 包 \ndpkg -l | grep httpd 显示所有名称中包含 “httpd” 字样的deb包 \ndpkg -s package_name 获得已经安装在系统中一个特殊包的信息 \ndpkg -L package_name 显示系统中已经安装的一个deb包所提供的文件列表 \ndpkg –contents package.deb 显示尚未安装的一个包所提供的文件列表 \ndpkg -S /bin/ping 确认所给的文件由哪个deb包提供\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\nAPT 软件工具 (Debian, Ubuntu 以及类似系统) \napt-get install package_name 安装/更新一个 deb 包 \napt-cdrom install package_name 从光盘安装/更新一个 deb 包 \napt-get update 升级列表中的软件包 \napt-get upgrade 升级所有已安装的软件 \napt-get remove package_name 从系统删除一个deb包 \napt-get check 确认依赖的软件仓库正确 \napt-get clean 从下载的软件包中清理缓存 \napt-cache search searched-package 返回包含所要搜索字符串的软件包名称 \n读写字符\nread\n-n 读取n个字符\n-s 不回显\n-p 显示提示信息\n-t 特定时间\n-d 定界符\n参数传递\n$0脚本名字\n$1 - $9 位置参数 #1 - #9\n$#位置参数的个数\n\"$@\"所有的位置参数\n\"$*\"所有的位置参数\n$?返回前一个命令的返回值，在执行命令后可以用此参数检查执行结果。\n$$脚本的进程ID(PID)\n参数判断\nif  [ expr ];   then … fi\n-n str ：字符串 str 是否不为空 \n-z str ：字符串是否为空 \nstr1  = str2 ：str1是否与 str2 相同 \nstr1 != str2 ： str1是否与 str2 不同 \nint1 -eq int2 ：等于 \nint1 -le  int2 ：小于等于 \nint1 -ge int2 ：大于等于 \nint1 -lt   int2 ：小于 \nint1 -gt  int2 ：大于 \nint1 -ne int2 ：不等于\n-b ：是否块文件 \n-p ：文件是否为一个命名管道 \n-c ：是否字符文件 \n-r ：文件是否可读 \n-d ：是否一个目录 *\n-s ：文件的长度是否不为零\n-e：文件是否存在 *\n-S：是否为套接字文件\n-f：是否普通文件 *\n-x：文件是否可执行，则为真\n-g：是否设置了文件的 SGID 位\n-u：是否设置了文件的 SUID 位\n-G：文件是否存在且归该组所有 \n-w：文件是否可写，则为真\n-k：文件是否设置了的粘贴位\n-t fd：fd 是否是一个与终端相连的打开的文件描述符（fd 默认为 1）\n-O：文件是否存在且归该用户所有\nE_NOARGS=65\nif [ -z \"$1\" ] # -z 如果为0则为真 ，如果没有存在$1参数，则打印用法和错误参数\nthen\n    echo \"Usage: `basename $0 [domain-name]`\"\n    exit $E_NOARGS\nfi\n文件系统分析\nbadblocks -v /dev/hda1 检查磁盘hda1上的坏磁块 \nfsck /dev/hda1 修复/检查hda1磁盘上linux文件系统的完整性 \nfsck.ext2 /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性 \ne2fsck /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性 \ne2fsck -j /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性 \nfsck.ext3 /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性 \nfsck.vfat /dev/hda1 修复/检查hda1磁盘上fat文件系统的完整性 \nfsck.msdos /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性 \ndosfsck /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性 \n初始化一个文件系统\nmkfs /dev/hda1 在hda1分区创建一个文件系统 \nmke2fs /dev/hda1 在hda1分区创建一个linux ext2的文件系统 \nmke2fs -j /dev/hda1 在hda1分区创建一个linux ext3(日志型)的文件系统 \nmkfs -t vfat 32 -F /dev/hda1 创建一个 FAT32 文件系统 \nfdformat -n /dev/fd0 格式化一个软盘 \nmkswap /dev/hda3 创建一个swap文件系统 \nSWAP文件系统\nmkswap /dev/hda3 创建一个swap文件系统 \nswapon /dev/hda3 启用一个新的swap文件系统 \nswapon /dev/hda2 /dev/hdb3 启用两个swap分区 \n备份\ndump -0aj -f /tmp/home0.bak /home 制作一个 ‘/home’ 目录的完整备份 \ndump -1aj -f /tmp/home0.bak /home 制作一个 ‘/home’ 目录的交互式备份 \nrestore -if /tmp/home0.bak 还原一个交互式备份 \nrsync -rogpav –delete /home /tmp 同步两边的目录 \nrsync -rogpav -e ssh –delete /home ip_address:/tmp 通过SSH通道rsync \nrsync -az -e ssh –delete ip_addr:/home/public /home/local 通过ssh和压缩将一个远程目录同步到本地目录 \nrsync -az -e ssh –delete /home/local ip_addr:/home/public 通过ssh和压缩将本地目录同步到远程目录 \ndd bs=1M if=/dev/hda | gzip | ssh user@ip_addr ‘dd of=hda.gz’ 通过ssh在远程主机上执行一次备份本地磁盘的操作 \ndd if=/dev/sda of=/tmp/file1 备份磁盘内容到一个文件 \ntar -Puf backup.tar /home/user 执行一次对 ‘/home/user’ 目录的交互式备份操作 \n( cd /tmp/local/ && tar c . ) | ssh -C user@ip_addr ‘cd /home/share/ && tar x -p’ 通过ssh在远程目录中复制一个目录内容 \n( tar c /home ) | ssh -C user@ip_addr ‘cd /home/backup-home && tar x -p’ 通过ssh在远程目录中复制一个本地目录 \ntar cf – . | (cd /tmp/backup ; tar xf – ) 本地将一个目录复制到另一个地方，保留原有权限及链接 \nfind /home/user1 -name ‘*.txt’ | xargs cp -av –target-directory=/home/backup/ –parents 从一个目录查找并复制所有以 ‘.txt’ 结尾的文件到另一个目录 \nfind /var/log -name ‘*.log’ | tar cv –files-from=- | bzip2 > log.tar.bz2 查找所有以 ‘.log’ 结尾的文件并做成一个bzip包 \ndd if=/dev/hda of=/dev/fd0 bs=512 count=1 做一个将 MBR (Master Boot Record)内容复制到软盘的动作 \ndd if=/dev/fd0 of=/dev/hda bs=512 count=1 从已经保存到软盘的备份中恢复MBR内容 \n光盘\ncdrecord -v gracetime=2 dev=/dev/cdrom -eject blank=fast -force 清空一个可复写的光盘内容 \nmkisofs /dev/cdrom > cd.iso 在磁盘上创建一个光盘的iso镜像文件 \nmkisofs /dev/cdrom | gzip > cd_iso.gz 在磁盘上创建一个压缩了的光盘iso镜像文件 \nmkisofs -J -allow-leading-dots -R -V “Label CD” -iso-level 4 -o ./cd.iso data_cd 创建一个目录的iso镜像文件 \ncdrecord -v dev=/dev/cdrom cd.iso 刻录一个ISO镜像文件 \ngzip -dc cd_iso.gz | cdrecord dev=/dev/cdrom – 刻录一个压缩了的ISO镜像文件 \nmount -o loop cd.iso /mnt/iso 挂载一个ISO镜像文件 \ncd-paranoia -B 从一个CD光盘转录音轨到 wav 文件中 \ncd-paranoia — “-3” 从一个CD光盘转录音轨到 wav 文件中（参数-3） \ncdrecord –scanbus 扫描总线以识别scsi通道 \ndd if=/dev/hdc | md5sum 校验一个设备的md5sum编码，例如一张 CD \n网络\nifconfig eth0 显示一个以太网卡的配置 \nifup eth0 启用一个 ‘eth0’ 网络设备 \nifdown eth0 禁用一个 ‘eth0’ 网络设备 \nifconfig eth0 192.168.1.1 netmask 255.255.255.0 控制IP地址 \nifconfig eth0 promisc 设置 ‘eth0’ 成混杂模式以嗅探数据包 (sniffing) \ndhclient eth0 以dhcp模式启用 ‘eth0’ \n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "2"}