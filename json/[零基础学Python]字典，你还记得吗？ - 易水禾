{"title": "[零基础学Python]字典，你还记得吗？ - 易水禾 ", "index": "python", "content": "字典，这个东西你现在还用吗？随着网络的发展，用的人越来越少了。不少人习惯于在网上搜索，不仅有web版，乃至于已经有手机版的各种字典了。我曾经用过一本小小的《新华字典》。\n\n\n  《新华字典》是中国第一部现代汉语字典。最早的名字叫《伍记小字典》，但未能编纂完成。自1953年，开始重编，其凡例完全采用《伍记小字典》。从1953年开始出版，经过反复修订，但是以1957年商务印书馆出版的《新华字典》作为第一版。原由新华辞书社编写，1956年并入中科院语言研究所（现中国社科院语言研究所）词典编辑室。新华字典由商务印书馆出版。历经几代上百名专家学者10余次大规模的修订，重印200多次。成为迄今为止世界出版史上最高发行量的字典。\n\n\n这里讲到字典，不是为了叙旧。而是提醒看官想想我们如何使用字典：先查索引（不管是拼音还是偏旁查字），然后通过索引找到相应内容。\n\n这种方法能够快捷的找到目标。\n\n在python中，也有一种数据与此相近，不仅相近，这种数据的名称就叫做dictionary，翻译过来是字典，类似于前面的int/str/list，这种类型数据名称是:dict\n\n依据管理，要知道如何建立dict和它有关属性方法。\n\n因为已经有了此前的基础，所以，学这个就可以加快了。\n\n前面曾经建议看官一个很好的学习探究方法，比如想了解str的有关属性方法，可以在交互模式下使用:\n\n>>>help(str)\n\n\n将得到所有的有关内容。\n\n现在换一个，使用dir，也能得到相同的结果。只是简单一些罢了。请在交互模式下：\n\n>>> dir(dict)\n['__class__', '__cmp__', '__contains__', '__delattr__', '__delitem__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'has_key', 'items', 'iteritems', 'iterkeys', 'itervalues', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values', 'viewitems', 'viewkeys', 'viewvalues']\n\n\n以__（双下划线）开头的先不管。看后面的。如果要想深入了解，可以这样：\n\n>>> help(dict.values)\n\n\n然后出现：\n\nHelp on method_descriptor:\n\nvalues(...)\n    D.values() -> list of D's values\n(END)\n\n\n也就是在这里显示出了values这个内置函数的使用方法。敲击键盘上的q键退回。\n\n概述\n\npython中的dict具有如下特点：\n\n\ndict是可变的\ndict可以存储任意数量的Python对象\ndict可以存储任何python数据类型\ndict以：key:value，即“键：值”对的形式存储数据，每个键是唯一的。\ndict也被称为关联数组或哈希表。\n\n以上诸条，如果还不是很理解，也没有关系，通过下面的学习，特别是通过各种实验，就能理解了。\n\n创建dict\n\n话说创建dict的方法可是远远多于前面的int/str/list，为什么会多呢？一般规律是复杂点的东西都会有多种渠道生成，这也是从安全便捷角度考虑吧。\n\n方法1:\n\n创建一个空的dict，这个空dict，可以在以后向里面加东西用。\n\n>>> mydict = {}\n>>> mydict\n{}\n\n\n创建有内容的dict。\n\n>>> person = {\"name\":\"qiwsir\",\"site\":\"qiwsir.github.io\",\"language\":\"python\"}\n>>> person\n{'name': 'qiwsir', 'language': 'python', 'site': 'qiwsir.github.io'}\n\n\n\"name\":\"qiwsir\"就是一个键值对，前面的name叫做键（key），后面的qiwsir是前面的键所对应的值(value)。在一个dict中，键是唯一的，不能重复；值则是对应于键，值可以重复。键值之间用(:)英文的分号，每一对键值之间用英文的逗号(,)隔开。\n\n>>> person['name2']=\"qiwsir\"    #这是一种向dict中增加键值对的方法\n>>> person\n{'name2': 'qiwsir', 'name': 'qiwsir', 'language': 'python', 'site': 'qiwsir.github.io'}\n\n\n如下，演示了从一个空的dict开始增加内容的过程：\n\n>>> mydict = {}\n>>> mydict\n{}\n>>> mydict[\"site\"] = \"qiwsir.github.io\"\n>>> mydict[1] = 80\n>>> mydict[2] = \"python\"\n>>> mydict[\"name\"] = [\"zhangsan\",\"lisi\",\"wangwu\"]\n>>> mydict\n{1: 80, 2: 'python', 'site': 'qiwsir.github.io', 'name': ['zhangsan', 'lisi', 'wangwu']}\n\n>>> mydict[1] = 90  #如果这样，则是修改这个键的值\n>>> mydict\n{1: 90, 2: 'python', 'site': 'qiwsir.github.io', 'name': ['zhangsan', 'lisi', 'wangwu']}\n\n\n方法2:\n\n>>> name = ([\"first\",\"Google\"],[\"second\",\"Yahoo\"])      #这是另外一种数据类型，称之为元组，后面会讲到\n>>> website = dict(name)\n>>> website\n{'second': 'Yahoo', 'first': 'Google'}\n\n\n方法3:\n\n这个方法，跟上面的不同在于使用fromkeys\n\n>>> website = {}.fromkeys((\"third\",\"forth\"),\"facebook\")\n>>> website\n{'forth': 'facebook', 'third': 'facebook'}\n\n\n需要提醒的是，这种方法是从新建立一个dict。\n\n访问dict的值\n\n因为dict是以键值对的形式存储数据的，所以，只要知道键，就能得到值。这本质上就是一种映射关系。\n\n>>> person\n{'name2': 'qiwsir', 'name': 'qiwsir', 'language': 'python', 'site': 'qiwsir.github.io'}\n>>> person['name']\n'qiwsir'\n>>> person['language']\n'python'\n>>> site = person['site']\n>>> print site\nqiwsir.github.io\n\n\n如同前面所讲，通过键能够增加dict中的值，通过键能够改变dict中的值，通过键也能够访问dict中的值。\n\n看官可以跟list对比一下。如果我们访问list中的元素，可以通过索引值得到（list[i]），如果是让机器来巡回访问，就可以用for语句。复习一下：\n\n>>> person_list = [\"qiwsir\",\"Newton\",\"Boolean\"]   \n>>> for name in person_list:\n...     print name\n... \nqiwsir\nNewton\nBoolean\n\n\n那么，dict是不是也可以用for语句来循环访问呢？当然可以，来看例子：\n\n>>> person\n{'name2': 'qiwsir', 'name': 'qiwsir', 'language': 'python', 'site': 'qiwsir.github.io'}\n>>> for key in person:\n...     print person[key]\n... \nqiwsir\nqiwsir\npython\nqiwsir.github.io\n\n\n知识\n\n什么是关联数组？以下解释来自维基百科\n\n\n  在计算机科学中，关联数组（英语：Associative Array），又称映射（Map）、字典（Dictionary）是一个抽象的数据结构，它包含着类似于（键，值）的有序对。一个关联数组中的有序对可以重复（如C++中的multimap）也可以不重复（如C++中的map）。\n\n\n\n  这种数据结构包含以下几种常见的操作：\n  \n  \n    1.向关联数组添加配对\n    2.从关联数组内删除配对\n    3.修改关联数组内的配对\n    4.根据已知的键寻找配对\n  \n\n\n\n  字典问题是设计一种能够具备关联数组特性的数据结构。解决字典问题的常用方法，是利用散列表，但有些情况下，也可以直接使用有地址的数组，或二叉树，和其他结构。\n\n\n\n  许多程序设计语言内置基本的数据类型，提供对关联数组的支持。而Content-addressable memory则是硬件层面上实现对关联数组的支持。\n\n\n什么是哈希表？关于哈希表的叙述比较多，这里仅仅截取了概念描述，更多的可以到维基百科上阅读。\n\n\n  散列表（Hash table，也叫哈希表），是根据关键字（Key value）而直接访问在内存存储位置的数据结构。也就是说，它通过把键值通过一个函数的计算，映射到表中一个位置来访问记录，这加快了查找速度。这个映射函数称做散列函数，存放记录的数组称做散列表。\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}