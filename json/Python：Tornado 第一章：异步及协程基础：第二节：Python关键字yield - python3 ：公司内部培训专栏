{"title": "Python：Tornado 第一章：异步及协程基础：第二节：Python关键字yield - python3 ：公司内部培训专栏 ", "index": "python", "content": "上一篇文章：Python：Tornado 第一章：异步及协程基础：第一节：同步与异步I/O下一篇文章：Python：Tornado 第一章：异步及协程基础：第三节：协程\n\n协程是Tornado中进行异步I/O代码开发的方法。协程使用了Python关键字yield将调用者挂起和恢复执行。所以在学习协程之前，我们先熟悉一下yield的概念和使用方法，而要想理解yield，需要先理解迭代器的概念。\n在Python种，使用yield 关键字定义的迭代器也被称为【生成器】\n1、迭代器\n迭代器（Iterator）是访问集合内元素的一种方式。迭代器对象从集合的第1个元素开始访问，直到所有元素都被访问一遍后结束。迭代器不能后退，只能前进迭代。\nPython种最常用迭代器的场景是循环语句for，它用迭代器封装集合，并且煮个访问集合元素以执行循环。\n例如：\nfor number in range(5):#range返回一个列表\n    print(number)\n其中的range()返回一个包含所指定元素的集合，而for语句将其封装成一个迭代器后访问，使用iter()可以讲列表、集合转换成迭代器，例如：\nnumbers=[1,2,3,4,5]\n#t就是迭代器\nt=iter(numbers)\n#打印t对象，以便查看其类型\nprint(t)\n返回结果：\n<list_iterator object at 0x10e805748>\n迭代器与普通Python对象相比，多了一个__next__()方法，每次调用该方法可以返回一个元素，调用者（例如for语句）可以通过不断调用__next__()方法来煮个访问集合元素。\n例如：\nnumbers=[1,2,3,4,5]\n#t就是迭代器\nt=iter(numbers)\n#打印t对象，以便查看其类型\nprint(t.__next__())\nprint(t.__next__())\nprint(t.__next__())\nprint(t.__next__())\n返回结果：\n1\n2\n3\n4\n调用者可以一直调用__next__()方法，直到返回StopIteration异常。\n2、使用yield\n迭代器在Python编程种的使用范围很广，那么开发者如何定制自己的迭代器呢？答案是使用yield关键字。\n调用任何定义包含yield关键字的函数都不会执行该函数，而是会获得一个队应于该函数的迭代器。\n\n实例：\nimport time\ndef demoIternator():\n    print(\"---1---\")\n    yield 1\n    print(\"---2---\")\n    yield 2\n    print(\"---3---\")\n    yield 3\n    print(\"---4---\")\n\nfor x in demoIternator():\n    print(x)\n    time.sleep(1)\n结果\n\n每次调用迭代器的__next__()方法，将执行迭代器函数，并返回yield的结果作为迭代返回元素。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}