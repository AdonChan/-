{"title": "python 中type和object的关系 - helloword ", "index": "python", "content": "学习python的同学都知道这么几句话\n\nobject类是所有新式类的父类。\ntype是所有类的类。\n\n那么type和object是什么关系呢？object是一个新式类，我们可以通过object.__class__和object.__bases__来获取object所属的类核他的父类。\n>>> object.__class__\n<type 'type'>\n这说明 object类是一个type元类的实例。这与type是所有新式类的类这一说法相符合。\n>>> object.__bases__\n()\n这说明 object类已经处于继承链条的顶端，是所有类的父类。\n>>> type.__class__\n<type 'type'>\n这说明type自身的类就是type。就是说type元类也就是由type自身创建的。\n>>> type.__base__\n<type 'object'>\n这就是说type这一元类的父类是object。\n我们来捋一捋，也就是说：object类是由元类type创建的，但是type类又继承了object类。 type元类的类则是由type元类自身创建的。\n我们把python中的内置类和用户创建的内纳入其中，我们就可以画出一下关系图\n简单说明一下出了type和object关系的其他部分。int、float、str、boolean、tuple、dict、set等内置的数据类型其实也就是内置的类。type是一个比较特殊的类，他是所有类的类。所以估计要与int等这种类保持一致，所以也是小写的？\n我们日常在程序中创建的具体的整数, 浮点数、字典、元祖等就是上面int、float、boolean等的实例。\n我们写代码的创建的自定义类分两种，一种是新式类，一种是经典类。新式类的类都是type，它的最终父类是object。经典类的创建者，也是是经典类的类是一个叫classobj的东西，classobj的类才是type。\n以上文字仅基于自己的理解。有错误还请指正。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "3"}