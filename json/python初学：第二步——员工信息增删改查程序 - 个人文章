{"title": "python初学：第二步——员工信息增删改查程序 - 个人文章 ", "index": "python", "content": "程序要求\n\n\n文件存储时可以这样表示\nid,name,age,phone,dept,enroll_date\n1,Alex Li,22,13651054608,IT,2013-04-01\n2,Jack Wang,28,13451024608,HR,2015-01-07\n3,Rain Wang,21,13451054608,IT,2017-04-01\n4,Mack Qiao,44,15653354208,Sales,2016-02-01\n5,Rachel Chen,23,13351024606,IT,2013-03-16\n6,Eric Liu,19,18531054602,Marketing,2012-12-01\n7,Chao Zhang,21,13235324334,Administration,2011-08-08\n8,Kevin Chen,22,13151054603,Sales,2013-04-01\n9,Shit Wen,20,13351024602,IT,2017-07-03\n10,Shanshan Du,26,13698424612,Operation,2017-07-02\n\n\n可进行模糊查询，语法至少支持下面3种查询语法:\nselect name,age from staff_table where age > 22\nselect * from staff_table where dept = \"IT\"\nselect * from staff_table where enroll_date like \"2013\"\n\n\n可创建新员工纪录，以phone做唯一键(即不允许表里有手机号重复的情况)，staff_id需自增语法:\nadd to staff_table values Alex Li,25,134435344,IT,2015-10-29\n\n\n可删除指定员工信息纪录，输入员工id，即可删除语法:\ndel from staff_table where id = 3\n\n\n可修改员工信息，语法如下:\nupdate staff_table set dept = Market where dept = IT #把所有dept=IT的纪录的dept改成Market\nupdate staff_table set age = 25 where name = Alex Li #把name=Alex Li的纪录的年龄改成25\n\n以上每条语名执行完毕后，要显示这条语句影响了多少条纪录。比如查询语句就显示查询出了多少条、修改语句就显示修改了多少条等。\n\n注意：以上需求，要充分使用函数，请尽你的最大限度来减少重复代码！\n编写思路\n\n程序目录结构\nhomework_project├── action│   ├── database.py  # 对数据库中的表文件进行操作│   ├── __init__.py├── config│   ├── __init__.py│   └── syntax.py  # 配置文件。├── core│   ├── actions.py  # 对不同的sql类型进行对应的操作│   ├── help.py  # 提供帮助│   ├── __init__.py│   ├── main.py  # 主函数，提供用户输入界面。并执行语法解析与sql操作│   ├── parsers.py  # 语法解析函数。对用户输入的语法正确性镜像解析，并最终解析成字典格式├── database│   └── staff_table  # 表├── __init__.py__init__.py mysql_run.py  # 执行程序\ngithub链接\n程序运行命令\npython mysql_run.py\n程序正文\nmysql_run.py：执行脚本\nfrom homework_project.core.main import main\n\n\nif __name__ == '__main__':\n    main()\n\nmain.py：主入口程序\n# -*- coding: utf-8 -*-\nfrom . import parsers as p\nfrom .actions import actions\nimport os\n\n\ndef main():\n    \"\"\" 主函数\n        获取用户输入，并对用户进行解析。如果获取解析值，并执行相应的sql操作。\n    \"\"\"\n    database_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) + '/database/'  # 获取数据库文件的路径\n    while True:\n        sql_str = input('请输入sql语句>').strip()\n        if sql_str:\n            sql_type = sql_str.split()[0].lower()  # 获取输入的sql语句的类型。\n            if p.parses(sql_type):  # 检查sql的类型是否符合规则\n                dict_sql = p.parses(sql_type)(sql_str, sql_type, database_dir)  # 调用parsers模块的parses函数进行语法解析\n                if dict_sql:  # 如果字典格式的sql语句返回\n                    actions(sql_type)(dict_sql)  # 则执行后面的sql操作\n            else:\n                print('sql语法错误，程序支持select，del，add，update语句。')\n        else:\n            continue\n\nparsers.py：sql语法解析模块\n# -*- coding: utf-8 -*-\nimport re\nfrom .help import help\n\n\ndef parses(sql_type):\n    \"\"\" 语法解析函数\n\n    :param sql_type: 从main()函数导入的sql语句类型。\n    :return:\n        parsers_dict[sql_type]\n        相应的语法解析函数\n    \"\"\"\n    parsers_dict = {'select': select_parser,\n                    'add': add_parser,\n                    'del': del_parser,\n                    'update': update_parser}\n    if sql_type in parsers_dict:\n        return parsers_dict[sql_type]\n    else:\n        return False\n\n\ndef select_parser(sql_str, sql_type, base_dir):\n    \"\"\" 搜索语句解析函数\n\n    :param sql_str: 用户输入的sql语句\n    :param sql_type: 用户输入的sql语句类型\n    :param base_dir: 主函数导入的数据库所在路径\n    :return:\n    \"\"\"\n    dict_sql = {}  # 创建空字典\n    command_parse = re.search(r'select\\s(.*?)\\sfrom\\s(.*?)\\swhere\\s(.*)', sql_str, re.I)  # 使用正则表达式解析add语法，并且re.I忽略大小写\n    if command_parse:\n        dict_sql['select'] = command_parse.group(1)\n        dict_sql['from'] = base_dir + command_parse.group(2)  # sql字典'from’键添加数据库表文件路径的值\n        dict_sql['where'] = command_parse.group(3).split(',')  # sql字典‘where’键添加插入的值\n        if logic_cal(dict_sql['where']):  # 使用logic_cal函数将where语句语法再次进行解析\n            dict_sql['where'] = logic_cal(dict_sql['where'])  # 如解析有返回值，将返回值重新作为dict_sql['where']的值\n            return dict_sql\n        else:\n            print(help(sql_type))  # 当语法解析不正常答应帮助\n    else:\n        print(help(sql_type))  # 当语法解析不正常答应帮助\n\n\ndef add_parser(sql_str, sql_type, base_dir):\n    \"\"\" 添加语句解析函数\n\n    :param sql_str: 用户输入的sql语句\n    :param sql_type: 用户输入的sql语句类型\n    :param base_dir: 主函数导入的数据库所在路径\n    :return:\n        dict_sql\n        解析后的字典格式sql语句\n    \"\"\"\n    dict_sql = {}\n    command_parse = re.search(r'add\\sto\\s(.*?)\\svalues\\s(.*)', sql_str, re.I)  # 使用正则表达式解析add语法，并且re.I忽略大小写\n    if command_parse:\n        dict_sql['to'] = base_dir + command_parse.group(1)  # sql字典'to’键添加数据库表文件路径的值\n        dict_sql['values'] = command_parse.group(2).split(',')  # sql字典‘values’键添加插入的值\n        return dict_sql\n    else:\n        print(help(sql_type))  # 当语法解析不正常答应帮助\n\n\ndef del_parser(sql_str, sql_type, base_dir):\n    \"\"\" 删除语句解析函数\n\n    :param sql_str: 用户输入的sql语句\n    :param sql_type: 用户输入的sql语句类型\n    :param base_dir: 主函数导入的数据库所在路径\n    :return:\n        dict_sql\n        解析后的字典格式sql语句\n    \"\"\"\n    dict_sql = {}\n    command_parse = re.search(r'del\\sfrom\\s(.*?)\\swhere\\s(.*)', sql_str, re.I)\n    if command_parse:\n        dict_sql['from'] = base_dir + command_parse.group(1)  # sql字典'to’键添加数据库表文件路径的值\n        dict_sql['where'] = command_parse.group(2).split(',')  # sql字典‘where’键添加插入的值\n        if logic_cal(dict_sql['where']):  # 使用logic_cal函数将where语句语法再次进行解析\n            dict_sql['where'] = logic_cal(dict_sql['where'])  # 如解析有返回值，将返回值重新作为dict_sql['where']的值\n            return dict_sql\n        else:\n            print(help(sql_type))  # 当语法解析不正常答应帮助\n    else:\n        print(help(sql_type))  # 当语法解析不正常答应帮助\n\n\ndef update_parser(sql_str, sql_type, base_dir):\n    \"\"\" 更新语句解析函数\n\n    :param sql_str: 用户输入的sql语句\n    :param sql_type: 用户输入的sql语句类型\n    :param base_dir: 主函数导入的数据库所在路径\n    :return:\n        dict_sql\n        解析后的字典格式sql语句\n    \"\"\"\n    dict_sql = {}\n    command_parse = re.search(r'update\\s(.*?)\\sset\\s(.*?)=(.*?)\\swhere\\s(.*)', sql_str, re.I)\n    if command_parse:\n        dict_sql['update'] = base_dir + command_parse.group(1)  # sql字典'to’键添加数据库表文件路径的值\n        dict_sql['set'] = [command_parse.group(2), '=', command_parse.group(3)]  # sql字典‘where’键添加插入的值\n        dict_sql['where'] = command_parse.group(4).split(',')\n        if logic_cal(dict_sql['where']) and logic_cal(dict_sql['set']):  # 如果where语句、set语句都符合logic_cal中定义的规范\n            dict_sql['where'] = logic_cal(dict_sql['where'])  # 如解析有返回值，将返回值重新作为dict_sql['where']的值\n            dict_sql['set'] = logic_cal(dict_sql['set'])  # 如解析有返回值，将返回值重新作为dict_sql['set']的值\n            return dict_sql\n        else:\n            print(help(sql_type))  # 当语法解析不正常答应帮助\n    else:\n        print(help(sql_type))  # 当语法解析不正常答应帮助\n\n\ndef logic_cal(logic_exp):\n    \"\"\" 逻辑函数\n\n    :param logic_exp: sql语句中和逻辑判断相关的语句，列表格式。如[‘age','>=',20] 或 [‘dept','like','HR']\n    :return:\n        logic_exp\n        经过语法解析后的逻辑判断语句。列表格式。如[‘age','==',20] 或 [‘dept','like','HR']\n    \"\"\"\n    # 表达式列表优化成三个元素，形如[‘age','>=',20] 或 [‘dept','like','HR']\n    logic_exp = re.search('(.+?)\\s([=<>]{1,2}|like)\\s(.+)', ''.join(logic_exp))\n    if logic_exp:\n        logic_exp = list(logic_exp. group(1, 2, 3))  # 取得re匹配的所有值，并作为一个列表\n        if logic_exp[1] == '=':\n            logic_exp[1] = '=='\n        # 判断逻辑运算的比较符号后的值是否字母，并且用户是否输入了双引号。如没有输入手工添加上双引号。\n        if not logic_exp[2].isdigit() and not re.search('\"(.*?)\"', logic_exp[2]):\n            logic_exp[2] = '\"' + logic_exp[2] + '\"'\n        return logic_exp\n    else:\n        return False\n\nactions.py：sql操作模块\n# -*- coding: utf-8 -*-\nfrom homework_project.action.database import read_db, write_db, print_info\nfrom homework_project.config.syntax import get_title\nimport re\n\n\ndef actions(sql_type):\n    \"\"\" sql操作主函数\n\n    :param sql_type: sql语句的类型\n    :return:\n        actions_dict[sql_type]\n        相应操作的函数\n    \"\"\"\n    actions_dict = {'select': select_action,\n                    'add': add_action,\n                    'del': del_action,\n                    'update': update_action}\n    if sql_type in actions_dict:  # 判断导入的sql类型是否在actions_dict字典中定义。\n        return actions_dict[sql_type]\n\n\ndef select_action(dict_sql):\n    info = dict_sql['select']\n    data = read_db(dict_sql['from'])  # 获取原始数据库文件中的所有数据，data为列表格式\n    key = dict_sql['where'][0]  # 获取sql语句中where语句的key值。如id = 1，获取id\n    count = 0\n    for values in data:  # 读取data列表中的每一个元素，values是字典格式\n        if type(values[key]) is int:\n            value = str(values[key])\n        else:\n            value = '\"' + str(values[key]) + '\"'\n        dict_sql['where'][0] = value  # 将values[key]的值取出并重新赋值为sql语句的key值。\n        if where_action(dict_sql['where']):  # 将新的where语句，发送给where_action语句进行bool判断。\n            count += 1\n            print_info(info, **values)\n    print('已查找%s条记录' % count)\n\n\ndef add_action(dict_sql):\n    \"\"\" 插入动作\n        获取用户输入的values，并在表中插入\n\n    :param dict_sql: parsers函数处理后的字典格式的sql语句\n    \"\"\"\n    data = read_db(dict_sql['to'])  # 获取原始数据库文件中的所有数据\n    value = dict_sql['values']  # 从dict_sql中获取values的列表\n    t_id = str(int(data[-1]['id']) + 1)  # 获取原始数据库文件中id列最后一行的id数值，并每次自动+1。然后转换为字符串格式\n    value.insert(0, t_id)  # 将添加的id插入到value变量中\n    if len(value) != len(get_title()):  # 判断输入值得长度是否等于数据库文件中定义的列的长度\n        print('列数不正确')\n    else:\n        data.append(dict(zip(get_title(), value)))  # 在获取的原始数据中插入行的数据\n        print('已添加记录')\n        write_db(dict_sql['to'], data)  # 写入文件\n\n\ndef del_action(dict_sql):\n    \"\"\" 删除动作函数\n\n    :param dict_sql: parsers函数处理后的字典格式的sql语句\n    \"\"\"\n    temp_list = []\n    data = read_db(dict_sql['from'])  # 获取原始数据库文件中的所有数据，data为列表格式\n    key = dict_sql['where'][0]  # 获取sql语句中where语句的key值。如id = 1，获取id\n    for values in data:  # 读取data列表中的每一个元素，values是字典格式\n        if type(values[key]) is int:\n            value = str(values[key])\n        else:\n            value = '\"' + str(values[key]) + '\"'\n        dict_sql['where'][0] = value  # 将values[key]的值取出并重新赋值为sql语句的key值。\n        if where_action(dict_sql['where']):  # 将新的where语句，发送给where_action语句进行bool判断。\n            temp_list.append(values)  # 如果符合条件，就从data中移除对应的values\n    print('已删除%s条记录' % len(temp_list))\n    for i in temp_list:\n        data.remove(i)\n    write_db(dict_sql['from'], data)  # 将新生成的data重新写入文件\n\n\ndef update_action(dict_sql):\n    \"\"\" 更新动作函数\n\n    :param dict_sql: parsers函数处理后的字典格式的sql语句\n    \"\"\"\n    data = read_db(dict_sql['update'])  # 获取原始数据库文件中的所有数据，data为列表格式\n    key = dict_sql['where'][0]  # 获取sql语句中where语句的key值。如id = 1，获取id\n    set_key = dict_sql['set'][0]  # 获取set语句中用户输入的key\n    set_value = dict_sql['set'][3].strip(\"'\").strip('\"')  # 获取set语句中用户输入的value\n    count = 0\n    for values in data:  # 读取data列表中的每一个元素，values是字典格式\n        if type(values[key]) is int:\n            value = str(values[key])\n        else:\n            value = '\"' + str(values[key]) + '\"'\n        dict_sql['where'][0] = value  # 将values[key]的值取出并重新赋值为sql语句的key值。\n        if where_action(dict_sql['where']):  # 将新的where语句，发送给where_action语句进行bool判断。\n            count += 1\n            values[set_key] = set_value  # 如果符合条件，使用将set_key的值修改为set_value\n    print('已更新%s条记录' % count)\n    write_db(dict_sql['update'], data)  # 将新生成的data重新写入文件\n\n\ndef where_action(condition):\n    \"\"\" where语句操作函数\n\n    :param condition: 判断语句。就是字典中where的值\n    :return:\n    \"\"\"\n    if 'like' in condition:  # 如果like在语句中\n        # 将where语句中的第二个参数和，第一个参数进行正则比较。如果执行正常就返回True\n        return re.search(condition[2].strip(\"'\").strip('\"'), condition[0]) and True\n\n    else:\n        return eval(' '.join(condition))  # 除此使用eval进行python的逻辑判断\n\nhelp.py：帮助模块\n# -*- coding: utf-8 -*-\ndef help(sql_type):\n    dict = {'select': select_help,\n            'add': add_help,\n            'del': del_help,\n            'update': update_help,\n            }\n    if sql_type in dict:\n        return dict[sql_type]()\n\n\ndef select_help():\n    strings = '''select语法错误。请查看案例：\n    select name,age from staff_table where age > 22\n    select * from staff_table where dept = \"IT\"\n    select * from staff_table where enroll_date like \"2013\"\n    '''\n    return strings\n\n\ndef add_help():\n    strings = '''add语法错误。请查看案例：\n    add to staff_table values Alex Li,25,134435344,IT,2015-10-29\n    '''\n    return strings\n\n\ndef del_help():\n    strings = '''del语法错误。请查看案例：\n    del from staff_table where id = 3\n    '''\n    return strings\n\n\ndef update_help():\n    strings = '''update语法错误。请查看案例：\n    UPDATE staff_table SET dept=\"Market\" WHERE  dept = \"IT\"\n    UPDATE staff_table SET age=25 WHERE  name = \"Alex Li\"\n    '''\n    return strings\ndatabase.py：文件读写模块\n# -*- coding: utf-8 -*-\nfrom homework_project.config.syntax import get_title\n\ndef read_db(table):\n    \"\"\" 读取表文件函数。\n\n    :param table: 表文件参数\n    :return: 返回一个包含表文件内容的字典\n    \"\"\"\n    title = get_title()\n    try:\n        main_list = []\n        with open(table, 'r', encoding='utf-8') as rf:\n            for line in rf:\n                temp_list = []\n                if line.rstrip('\\n').split(',') == title:\n                    continue\n                else:\n                    for values in line.strip('\\n').split(','):\n                        if values.isdigit():\n                            temp_list.append(int(values))\n                        else:\n                            temp_list.append(values)\n                    main_list.append(dict(zip(title, temp_list)))\n        return main_list\n    except FileNotFoundError as e:\n        print(e)\n        exit(1)\n\n\ndef write_db(table, data):\n    \"\"\" 写入表文件函数。\n\n    :param table: 表文件参数\n    :param data: 导入的数据。为字典格式\n    \"\"\"\n    value2 = ','.join(get_title()) + '\\n'\n    for values in data:\n        temp_list = []\n        for value in values.values():\n            temp_list.append(str(value))\n        value2 += ','.join(temp_list) + '\\n'\n    with open(file=table, mode='w', encoding='utf-8') as wf:\n        wf.write(value2)\n\n\ndef print_info(info, **kwargs):\n    \"\"\" 打印函数。\n        用于select语句打印显示\n\n    :param info: select语句中需要显示的类\n    :param kwargs: 字典，用于进行操作的原始数据\n    :return:\n    \"\"\"\n    temp_list = []\n    if info == '*':\n        for key in kwargs:\n            temp_list.append(str(kwargs[key]))\n        print(','.join(temp_list))\n    else:\n        info_list = info.split(',')\n        for i in info_list:\n            temp_list.append(str(kwargs[i]))\n        print(','.join(temp_list))\nsytanx.py：配置文件模块\ndef get_title():\n    title_dict = ['id','name','age','phone','dept','enroll_date']\n    return title_dict\nREADME\nREADME.md\n学习笔记\n文件处理笔记函数基础笔记函数高阶笔记模块笔记（待修改）\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}