{"title": "《Python编程：从入门到实践》笔记 - 个人文章 ", "index": "python", "content": "ch01\n# 打印hello world\nprint('hello world')\nch02 变量与简单数据类型\nmessage = \"Hello Python world!\"  # message即是一个变量\nprint(message)\nmessage = \"Hello Python Crash Course world!\"\nprint(message)\n\n# 将一条消息存储到变量中,再将其打印出来。\nwords = \"Hi, My name is uangianlap. I am learning Python now.\"\nprint(words)\n\n# 将一条消息存储到变量中， 将其打印出来； 再将变量的值修改为一条新消息， 并将其打印出来。\nwords = \"Which language is the best?\"\nprint(words)\nwords = \"Which language is the best, Python or Java?\"\nprint(words)\n\n# 将用户的姓名存到一个变量中， 并向该用户显示一条消息。 显示的消息应非常简单， 如“Hello Eric, would you like to learn some Python today?”。\nname = 'Eric'\nprint(\"Hello \" + name + \", would you like to learn some Python today?\")\n\n# 将一个人名存储到一个变量中， 再以小写、 大写和首字母大写的方式显示这个人名。\nname = \"uangianlap\"\nprint(name.lower())\nprint(name.upper())\nprint(name.title())\n\n# 找一句你钦佩的名人说的名言， 将这个名人的姓名和他的名言打印出来。 输出应类似于下面这样（ 包括引号） ：\nAlbert Einstein once said, “A person who never made a mistake never tried anything new.”\nfamous_person = \"Albert Einstein\"\nmessage = \"A person who never made a mistake never tried anything new.\"\nprint(famous_person + \" said, \" + message)\n\n# 存储一个人名， 并在其开头和末尾都包含一些空白字符。 务必至少使用字符组合\"\\t\" 和\"\\n\" 各一次。\n打印这个人名， 以显示其开头和末尾的空白。 然后， 分别使用剔除函数lstrip() 、 rstrip() 和strip() 对人名进行处理， 并将结果打印出来。\n\nperson = '   \\njames\\t'\nprint(\"My name is \" + person + \"!\")\nprint(\"My name is \" + person.strip() + \"!\")\nprint(\"My name is \" + person.lstrip() + \"!\")\nprint('My name is ' + person.rstrip() + '!')\n\n# 编写4个表达式， 它们分别使用加法、 减法、 乘法和除法运算， 但结果都是数字8。 为使用print 语句来显示结果， 务必将这些表达式用括号括起来， 也就是说， 你应该编写4行类似于下面的代码：print(5+3)\n\nprint(4+4)\nprint(10-2)\nprint(1*8)\nprint(16//2)\n\n# 最喜欢的数字： 将你最喜欢的数字存储在一个变量中， 再使用这个变量创建一条消息， 指出你最喜欢的数字， 然后将这条消息打印出来。\nfav_num = 7\nprint('my favorite num is ' + str(fav_num))\nch03 列表\n# 将一些朋友的姓名存储在一个列表中， 并将其命名为names 。 依次访问该列表中的每个元素， 从而将每个朋友的姓名都打印出来。\nfriends = ['bob', 'James', 'sue', 'lily']\nprint('My first friend is ' + friends[0])\nprint('My second friend is ' + friends[1])\nprint('My third friend is ' + friends[2])\nprint('My fourth friend is ' + friends[3])\n\n# 接上一题,但不打印每个朋友的姓名， 而为每人打印一条消息。 每条消息都包含相同的问候语， 但抬头为相应朋友的姓名。\nfriends = ['bob', 'James', 'sue', 'lily']\ngreeting = \",good morning!\"\nprint(friends[0] + greeting)\nprint(friends[1] + greeting)\nprint(friends[2] + greeting)\nprint(friends[3] + greeting)\n\n# 想想你喜欢的通勤方式， 如骑摩托车或开汽车， 并创建一个包含多种通勤方式的列表。 根据该列表打印一系列有关这些通勤方式的宣言， 如“I would like to own a Honda motorcycle”。\ncommuting = ['bike', 'bus', 'subway', 'motorcycle']\nprint(\"I would like to won a Giant \" + commuting[0])\nprint(\"I would like to won a \" + commuting[1])\nprint(\"I would like to won a \" + commuting[2])\nprint(\"I would like to won a BMW \" + commuting[3])\n\n# 如果你可以邀请任何人一起共进晚餐（ 无论是在世的还是故去的） ， 你会邀请哪些人？ 请创建一个列表， 其中包含至少3个你想邀请的人； 然后， 使用这个列表打印消息， 邀请这些人来与你共进晚餐。\nperson = ['比尔盖驰', '扎克伯格', '李安']\nprint('我相请' + person[0] + '共进晚餐.')\nprint('我相请' + person[1] + '共进晚餐.')\nprint('我相请' + person[2] + '共进晚餐.')\n\n# 你刚得知有位嘉宾无法赴约， 因此需要另外邀请一位嘉宾。\n以完成练习3-4时编写的程序为基础， 在程序末尾添加一条print 语句， 指出哪位嘉宾无法赴约。\n修改嘉宾名单， 将无法赴约的嘉宾的姓名替换为新邀请的嘉宾的姓名。\n再次打印一系列消息， 向名单中的每位嘉宾发出邀请。\nprint(person[2] + '无法参加晚餐')\nperson.pop()\nperson.append('马云')\nprint('我相请' + person[0] + '共进晚餐.')\nprint('我相请' + person[1] + '共进晚餐.')\nprint('我相请' + person[2] + '共进晚餐.')\n\n# 你刚找到了一个更大的餐桌， 可容纳更多的嘉宾。 请想想你还想邀请哪三位嘉宾\nprint('我刚刚找到了一张更大的餐桌.')\nperson.insert(0, '李嘉诚')\nprint(person)\nperson.insert(2, '卡内基')\nperson.append('张艺谋')\nprint('我相请' + person[0] + '共进晚餐.')\nprint('我相请' + person[1] + '共进晚餐.')\nprint('我相请' + person[2] + '共进晚餐.')\nprint('我相请' + person[3] + '共进晚餐.')\nprint('我相请' + person[4] + '共进晚餐.')\n\n# 你刚得知新购买的餐桌无法及时送达， 因此只能邀请两位嘉宾。以完成练习3-6时编写的程序为基础， 在程序末尾添加一行代码， 打印一条你只能邀请两位嘉宾共进晚餐的消息。\n# 使用pop() 不断地删除名单中的嘉宾， 直到只有两位嘉宾为止。 每次从名单中弹出一位嘉宾时， 都打印一条消息， 让该嘉宾知悉你很抱歉， 无法邀请他来共进晚餐。\n# 对于余下的两位嘉宾中的每一位， 都打印一条消息， 指出他依然在受邀人之列。使用del 将最后两位嘉宾从名单中删除， 让名单变成空的。 打印该名单， 核实程序结束时名单确实是空的。\nprint('刚得知新购买的餐桌无法及时送达,因此只能邀请两位嘉宾.')\nperson.pop()\nperson.pop()\nperson.pop()\n\nprint('现在只剩下2位嘉宾了,他们是:')\nprint('我相请' + person[0] + '共进晚餐.')\nprint('我相请' + person[1] + '共进晚餐.')\n\ndel person[0]\ndel person[0]\nprint(person)\n\n# 想出至少5个你渴望去旅游的地方。\n# 将这些地方存储在一个列表中， 并确保其中的元素不是按字母顺序排列的。\nplaces = ['Tokyo', 'Paris', 'London', 'New York', 'HongKong']\n# 按原始排列顺序打印该列表。 不要考虑输出是否整洁的问题， 只管打印原始Python列表。\nprint(places)\n# 使用sorted() 按字母顺序打印这个列表， 同时不要修改它。\nsorted(places)\n# 再次打印该列表， 核实排列顺序未变。\nprint(places)\n# 使用sorted() 按与字母顺序相反的顺序打印这个列表， 同时不要修改它。\nsorted(places, reverse=True)\n# 再次打印该列表， 核实排列顺序未变。\nprint(places)\n# 使用reverse() 修改列表元素的排列顺序。 打印该列表， 核实排列顺序确实变了。\nplaces.reverse()\nprint(places)\n# 使用reverse() 再次修改列表元素的排列顺序。 打印该列表， 核实已恢复到原来的排列顺序。\nplaces.reverse()\nprint(places)\n# 使用sort() 修改该列表， 使其元素按字母顺序排列。 打印该列表， 核实排列顺序确实变了。\nplaces.sort()\nprint(places)\n# 使用sort() 修改该列表， 使其元素按与字母顺序相反的顺序排列。 打印该列表， 核实排列顺序确实变了。\nplaces.sort(reverse=True)\nprint(places)\nch04 操作列表\n# 想出至少三种你喜欢的比萨， 将其名称存储在一个列表中， 再使用for 循环将每种比萨的名称都打印出来。修改这个for 循环， 使其打印包含比萨名称的句子， 而不仅仅是比萨的名称。 对于每种比萨， 都显示一行输出， 如“I like pepperoni pizza”。\n# 在程序末尾添加一行代码， 它不在for 循环中， 指出你有多喜欢比萨。 输出应包含针对每种比萨的消息， 还有一个总结性句子， 如“I really love pizza!”。\n\npizzas = ['pizza', 'pizza', 'California']\nfor pizza in pizzas:\n    print('I like ' + pizza + ' pizza')\nprint(\"I really love pizza!\")\n    \n# 想出至少三种有共同特征的动物， 将这些动物的名称存储在一个列表中， 再使用for 循环将每种动物的名称都打印出来。\n# 修改这个程序， 使其针对每种动物都打印一个句子， 如“A dog would make a great pet”。\n# 在程序末尾添加一行代码， 指出这些动物的共同之处， 如打印诸如“Any of these animals would make a great pet!”这样的句子。\nanimals = ['cat', 'dog', 'rabbit', 'monkey']\nfor animal in animals:\n    print(\"a \" + animal + ' would make a great pet')\nprint(\"Any of these animals would make a great pet!\")\n\n# 使用一个for 循环打印数字1~20（ 含） 。\nfor i in range(1, 21):\n    print(i)\n    \n# 创建一个列表， 其中包含数字1~1 000 000， 再使用一个for 循环将这些数字打印出来（ 如果输出的时间太长， 按Ctrl + C停止输出， 或关闭输出窗口） 。\nlong_list = list(range(1, 1000001))\nfor num in long_list:\n    print(num)\n\n# 创建一个列表， 其中包含数字1~1 000 000， 再使用min() 和max() 核实该列表确实是从1开始， 到1 000 000结束的。\n# 另外， 对这个列表调用函数sum() ， 看看Python将一百万个数字相加需要多长时间。\nlong_list = list(range(1, 1000001))\nmini = min(long_list)\nmaximum = max(long_list)\nsum = sum(long_list)\n\nprint(mini)\nprint(maximum)\nprint(sum)\n\n# 通过给函数range() 指定第三个参数来创建一个列表， 其中包含1~20的奇数； 再使用一个for 循环将这些数字都打印出来。\n\nodds = list(range(1, 21, 2))\nfor odd in odds:\n    print(odd)\n    \n# 建一个列表， 其中包含3~30内能被3整除的数字； 再使用一个for 循环将这个列表中的数字都打印出来。\nmy_list = [i for i in range(3, 31) if i % 3 == 0]\nprint(my_list)\n\n# 将同一个数字乘三次称为立方。 例如， 在Python中， 2的立方用2**3 表示。 请创建一个列表， 其中包含前10个整数（ 即1~10） 的立方，\n# 再使用一个for 循环将这些立方数都打印出来。\n\ncube = [i ** 3 for i in range(1, 11)]\nfor num in cube:\n    print(num)\n    \n# 选择你在本章编写的一个程序， 在末尾添加几行代码， 以完成如下任务。\n# 打印消息“The first three items in the list are:”， 再使用切片来打印列表的前三个元素。\n# 打印消息“Three items fromthe middle of the list are:”， 再使用切片来打印列表中间的三个元素。\n# 打印消息“The last three items in the list are:”， 再使用切片来打印列表末尾的三个元素。\nu = ['china', 'england', 'usa', 'france', 'russia']\nprint('The first three items in the list are:' + str(u[:3]))\nprint('Three items from the middle of the list are:' + str(u[1:4]))\nprint('The last three items in the list are:' + str(u[2:]))\n\n# 在你为完成练习4-1而编写的程序中， 创建比萨列表的副本， 并将其存储到变量friend_pizzas 中， 再完成如下任务。\npizzas = ['pizza', 'pizza', 'California']\nfriend_pizzas = pizzas[:]\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}