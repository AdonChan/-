{"title": "python 设计模式-适配器模式 - 古寺比的寺 ", "index": "适配器模式,设计模式,python", "content": "\n问题：假设有一个软件系统，你希望它能在不改变现有代码的前提下和一个新的厂商类库搭配使用，但是这个新厂商所设计出来的接口不同于旧厂商的接口\n\n这个问题和下图的问题类似\n\n美国标准的插头🔌无法在欧洲标准的插座上使用，通常的做法是什么呢？\n添加一个插头适配器，适配器的作用是将欧式插头转换成美式插座，以便于让美式插头可以使用。\n解决方案\n所以，面对一个有全新接口的类库而又不能改变现有代码时，最先想到的做法是，在这两个系统之间添加一个适配器。\n\n简单的例子\n有一个系统，需要一个鸭子🦆对象，但是现在只有一个火鸡🦃对象。鸭子和火鸡对象的功能简单描述如下：\n\n# 鸭子的简单描述\nclass Duck:\n    def quack(self):\n        # 会呱呱叫\n        print(\"Quack\")\n    \n    def fly(self):\n        # 飞的能力\n        print(\"I'm flying\")\n        \n# 火鸡的简单描述\nclass Turkey:\n    def gobble(self):\n        # 不会呱呱叫，只会咯咯叫\n        print(\"Gobble gobble\")\n    \n    def fly(self):\n        # 飞的能力 但是飞不远\n        print(\"I'm flying a short distance\")\n    \n因为现在没有鸭子对象，只能那火鸡对象冒充。由于鸭子对象和火鸡对象功能不同，不能直接拿来用，现在就需要使用适配器来完成这个功能：\nclass TurkeyAdapter(Duck):\n    turkey = Turkey()  # 这里实际使用的是火鸡对象\n    \n    # 实现鸭子对象拥有的quack方法\n    def quack(self):\n        self.turkey.gobble()\n    \n    def fly(self):\n        # 假设火鸡比鸭子飞的短，为了模拟鸭子的动作，多飞几次\n        for i in range(5):\n            turkey.fly()\n接下来调用就可以像使用鸭子对象一样使用火鸡适配后的对象。\n# test\n\nduck = Duck()\nduck.quack()\nduck.fly()\n\nturkey_adapter = Duck()\nturkey_adapter.quack()\nturkey_adapter.fly()\n现在再来看一下适配器使用的过程：\n\n\n客户通过被适配者实现的接口调用适配器\n适配器将请求转换为被适配者可以响应的请求\n被适配者响应，把结果返回给适配器，然后适配器再将结果响应给客户。\n\n通过这个例子，接下来看一下适配器模式的正式定义\n定义\n\n适配器模式：将一个类的接口，转换成客户期望的另一个接口。适配器让原本接口不兼容的类可以合作。\n优点\n\n可以通过创建适配器进行接口转换，让不兼容的接口兼容，让客户从实现的接口的解耦。\n使用对象组合，以修改的接口包装被适配者\n被适配的子类可以搭配着适配器使用\n满足开放/封闭原则（open/close principle）\n\n\n开放/封闭原则是面向对象设计的基本原则之一，声明一个软件实体应该对扩展是开放的，对修改是关闭的。\n真实世界中的适配器\n\nxmltodict 可以将 xml 转换为 json\ngrpc 也可以认为是一种适配器，提供了跨语言调用能力\nsqlalchemy 可以在不改变代码的情况下对接多种数据库\n\n本文例子来自《Head First 设计模式》。\n\n最后，感谢女朋友支持和包容，比❤️\n也可以在公号输入以下关键字获取历史文章：公号&小程序 | 设计模式 | 并发&协程\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}