{"title": "在 Ubuntu 14.04 服务器上部署 Hexo 博客 - 个人文章 ", "index": "python,mysql,express", "content": "推荐理由：Hexo 是用 Node.js 开发的一个静态站点生成器（Static Site Generator），支持 Markdown 语法写作，有着强大的插件系统，而且性能优异。下面我推荐的这篇文章，介绍如何在一台 Ubuntu 14.04 的 CVM 云服务器上快速部署 Hexo 博客站点，如何快速发布一篇博文并通过云服务器上的私有 Git 仓库部署到 Web 服务器目录下；希望对大家有所帮助。\n以下为文章原文\n除了闷头专研技术之外，程序员还需要不断地写作进行技术积累，写博客是其中最重要的方式之一。商业博客平台不少，但是更符合程序员背景的方案，是自己开发一个博客平台或者使用开源的博客平台。\n开源的博客平台多如牛毛，而且不乏优秀之作，如 Hexo、Octopress、Jekyll、Wordpress。本系列文章将分享如何利用各种博客引擎在云端搭建属于自己的个人博客。今天是第一篇，介绍如何在 Ubuntu 14.04 上部署 Hexo 博客。\nHexo 是用 Node.js 开发的一个静态站点生成器（Static Site Generator），支持 Markdown 语法写作，有着强大的插件系统，而且性能优异。阅读不少技术社区分享的文章时，看到国内不少同学都有在用这个引擎，看来「市场占有率」不低。\n本文将介绍如何在一台 Ubuntu 14.04 的 CVM 云服务器上快速部署 Hexo 博客站点，如何快速发布一篇博文并通过云服务器上的私有 Git 仓库部署到 Web 服务器目录下。\n前提条件\n如果想跟着本教程顺利完成 Hexo 博客的搭建，需要具备以下条件：\n一台安装了 Ubuntu 14.04 的CVM 云服务器。一般个人博客的流量都比较低，初期选择 1核 1GB内存类型的服务器即可，而且有不少免费试用的时间。\n在本地电脑上安装 Node.js 和 npm，建议谷歌相应关键词了解具体步骤。\n此外，还要在云服务器上安装 Git 和 Nginx 两个必备的软件包。Git 用于版本管理和部署，Nginx 用于静态博客托管。\nsudo apt-get updatesudo apt-get install git nginx -y\n另外，本文均以 Windows 为例，演示在本地端的操作，Mac 上的操作会更为简单。Windows 上没有 Mac 的 iTerm2 ，我们以ConEmu+Git Bash组成的终端作为替代。如果有读者感兴趣，后续再撰文介绍具体配置方法。\n本地 Hexo 安装及初始化\nNPM 上还有许多 Hexo 相关的包，但是只要安装好了 hexo-cli 和 hexo-server 这两个核心组件之后，就可以让博客跑起来了。\n我们使用 Node.js 的包管理器 npm 安装 hexo-cli 和 hexo-server。\nnpm install hexo-cli hexo-server -g\nhexo-cli 是 Hexo 的命令行工具，可用于快速新建、发布、部署博客；hexo-server 是 Hexo 的内建服务器，可用于部署前的预览和测试。-g 选项，表示全局安装。\n接下来，为 Hexo 博客做一些基础配置，包括创建基础文件。这步操作很简单，Hexo 提供了一个快捷命令，只需要提供一个存放文件的目录地址即可。\nhexo init ~/hexo_blog\n在国内环境下执行该命令，速度会有些慢。因为需要从 Hexo 在 Github 上的仓库克隆；仓库克隆成功后，会自动执行一系列 npm 命令，自安装依赖模块。\n这时，我们就已经有了一个写作、管理博客的环境。\n云端服务器配置\n完成本地端的操作之后，暂时回到服务器的配置。在下面的操作之前，请确保已经购买了一台云服务器，并且能够以 ubuntu 用户身份正常登陆。\n在这部分，要完成以下件事情：\n为本地的 hexo_blog 配置一个部署静态文件的远程仓库。\n许多教程均以 Github 作为中转的平台，但是会让整个流程变得更为复杂，而且会受服务器与 Github 之间网络情况的影响。假如 Github 宕机或者被封，你将无法更新博客。\n配置 Nginx 托管博客文件目录。\n配置远程仓库自动更新到博客文件目录的钩子。\n2.1 创建私有 Git 仓库\n在 /var/repo/ 下，创建一个名为 hexo_static 的裸仓库（bare repo）。\n如果没有 /var/repo 目录，需要先创建；然后修改目录的所有权和用户权限，之后 ubuntu 用户都具备/var/repo 目录下所有新生成的目录和文件的权限。\nsudo mkdir /var/repo/sudo chown -R $USER:$USER /var/repo/sudo chmod -R 755 /var/repo/\n然后，执行如下命令：\ncd /var/repo/git init --bare hexo_static.git\n2.2 配置 Nginx 托管文件目录\n接下来，创建 /var/www/hexo 目录，用于 Nginx 托管。\nsudo mkdir -p /var/www/hexo\n和上一步类似，这里也需要修改目录的所有权和权限。\nsudo chown -R $USER:$USER /var/www/hexosudo chmod -R 755 /var/www/hexo\n然后，修改 Nginx 的 default 设置：\nsudo vim /etc/nginx/sites-available/default\n将其中的 root 指令指向 /var/www/hexo 目录。\n...server {    listen 80 default_server;    listen [::]:80 default_server ipv6only=on;    root /var/www/hexo; # 需要修改的部分    index index.html index.htm;...\n保存并退出文件。如果以后购买并备案域名之后，可以再将配置中的 default_server 修改为你的域名。\n最后，重启 Nginx 服务，使得改动生效。\nsudo service nginx restart\n做完这一步之后，你去访问服务器的 IP 时，应该还是会报错的，因为 /var/www/hexo 目录是空的。\n2.3 创建 Git 钩子\n接下来，在服务器上的裸仓库 hexo_static 创建一个钩子，在满足特定条件时将静态 HTML 文件传送到 Web 服务器的目录下，即 /var/www/hexo。\n在自动生成的 hooks 目录下创建一个新的钩子文件：\nvim /var/repo/hexo_static.git/hooks/post-receive\n在该文件中添加两行代码，指定 Git 的工作树（源代码）和 Git 目录（配置文件等）。\n!/bin/bashgit --work-tree=/var/www/hexo --git-dir=/var/repo/hexo_static.git checkout -f\n保存并退出文件，并让该文件变为可执行文件。\nchmod +x /var/repo/hexo_static.git/hooks/post-receive\n至此，服务端的配置基本结束。\n完成本地 Hexo 配置\n在第三部分的操作中，我们将完成以下任务：\n修改 Hexo 配置中的 URL 和默认文章版式；\n新建博客草稿并发布\n配置自动部署到服务器端的 hexo_static 裸仓库；\n3.1 修改 Hexo 部分默认配置\n进入 hexo_blog 目录后，主要有以下文件。\n-rw-r--r-- 1 benjisong 1049089 1619 Feb 24 14:45 _config.yml-rw-r--r-- 1 benjisong 1049089  174 Feb 24 13:51 db.jsondrwxr-xr-x 1 benjisong 1049089    0 Feb 24 12:16 node_modules-rw-r--r-- 1 benjisong 1049089  484 Feb 24 12:16 package.jsondrwxr-xr-x 1 benjisong 1049089    0 Feb 24 13:50 publicdrwxr-xr-x 1 benjisong 1049089    0 Feb 24 12:08 scaffoldsdrwxr-xr-x 1 benjisong 1049089    0 Feb 24 12:13 sourcedrwxr-xr-x 1 benjisong 1049089    0 Feb 24 12:08 themes\n其中，_config.yml 为 Hexo 的主配置文件。我们首先修改博客的 URL 地址。\nURL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://server-ip # 没有绑定域名时填写服务器的实际 IP 地址。root: /permalink: :year/:month/:day/:title/permalink_defaults:\n接下来，修改 default_layout，该字段位于在 Writing 部分。将其从 post 修改为 draft ，表示每篇博文默认都是草稿，必须经过发布之后才能在博客站点上访问。\nWritingnew_post_name: :title.md # File name of new postsdefault_layout: draft # 原来的值是 posttitlecase: false # Transform title into titlecase\n暂时保存并退出文件。在 3.3 部分继续进行配置。\n3.2. 新建博客草稿并发布\n这里简单演示通过 Hexo 新建博文草稿，并发布的过程。\n执行如下命令，创建第一篇博文。\nhexo new first-post\n你会看到类似如下输出：\nINFO  Created: ~WorkspaceGithexo_blogsource_draftsfirst-post.md\n在本地通过自己熟悉的编辑器，编辑博文。这里，我们把本文的内容写入第一篇博客中。\ntitle: 在 Ubuntu 14.04 服务器上部署 Hexo 博客tags:  - Ubuntu  - Hexocategories:  - Hexocomments: truedate: 2017-02-24 15:31:00---## 以下为 Markdown 文章正文。\n然后，通过如下命令发布博客：\nhexo publish first-post\n输出类似下面这样：\nINFO  Published: ~WorkspaceGithexo_blogsource_postsfirst-post.md\n博客推送到服务器之后，就可以在网站上访问了。\n3.3 通过 Git 部署\n到了这一步，可以说万事俱备，只欠东风了。这个东风，就是通过 Git 将 Hexo 生成的静态内容推送到服务器。\n继续编辑 _config.yml 文件，找到 Deployment 部分，按照如下情况修改：\ndeploy:    type: git    repo: ubuntu@CVM 云服务器的IP地址:/var/repo/hexo_static    branch: master\n保存并退出文件。\n之后，需要安装一个 Hexo 包，负责将博客所需的静态内容发送到设置好的 Git 仓库。\nnpm install hexo-deployer-git --save\n安装好后可以测试部署：\nhexo generate && hexo deploy\n期间可能会提示输入 ubuntu 用户的登录密码（如果没有设置 SSH 登录）。成功之后的输出大致如下：\n... create mode 100644 tags/Node-js/index.html create mode 100644 tags/Ubuntu/index.htmlBranch master set up to track remote branch master from ubuntu@139.199.170.173:/var/repo/hexo_static.To 139.199.170.173:/var/repo/hexo_static * [new branch]      HEAD -> masterINFO  Deploy done: git\n现在，我们就可以在浏览器中打开 139.199.170.173，即可看到自己的博客网站了。\n我们发现，Hexo 对 blockquote 标签的样式并不太美观，需要后续再调优。\n通过镜像快速部署\n本文虽然将 Hexo 博客的大致部署过程明确地列出，但是对于部分初学用户来说可能还会显得较为复杂。如何利用 CVM 云服务器提供商（即腾讯云）的其他服务，快速让其他用户不必经过上面的步骤，快速进行部署呢？\n在云计算中，与虚拟机相关的一个概念是镜像（Image）。用户通过镜像，可以一键启动多个配置一模一样的云服务器。我们这一步通过 CVM 的「制作系统镜像」功能，将 Hexo 博客的服务器端打包。\n\n打包后的镜像，还可以上传到官方的服务市场，供所有用户使用；还可以直接共享给其他用户。\n如果有用户希望使用该镜像，可在本文下方评论区留下自己的腾讯云账号（登录时使用的QQ号或邮箱）。\n4.1 镜像的使用\n镜像中已经设置好了服务端，通过镜像启动 CVM 云服务器之后，读者只需要根据本文第三部分「完成 Hexo 本地配置」中的步骤，设置好本地 Hexo 写作环境的部署地址和服务器 URL等参数即可。\n这里有一点一定要注意，通过镜像启动云服务器时，务必重新设置密码或密钥，否则镜像的制作者有可能轻松地登录你的服务器。\n不要选择上图中的方式安装。\n总结\n本文较为完整地介绍了 Hexo 博客的安装及初始化，服务端如何配置通过 Git 部署等。与其他教程不同，我们没有使用公开的 Github 等第三方服务，而是直接在服务器上创建了私有仓库。然后，通过 Git 钩子，将 Hexo 生成的博客静态文件，快速地推送到 Web 服务的托管目录。\n由于 Hexo 是采用 Node.js 开发的，可能对于其他语言的学习者来说吸引力不大，因为后续自主二次开发难度较高。因此，后续笔者还将介绍其他语言的博客引擎，如用 Python 编写的 Lektor 和用 PHP 编写的 Wordpress 等。\n敬请期待。\n文章出自腾讯云技术社区\n（埋文字链https://www.qcloud.com/commun...）\n推荐大家关注腾讯云技术社区微信公众号：QcloudCommunity\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}