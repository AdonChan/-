{"title": "Python每日一练0007 - python每日练习 ", "index": "python3.x,python", "content": "问题\n怎样实现一个键对应多个值的字典（也叫 multidict）？\n例如：\nd = {\n    'a' : [1, 2, 3],\n    'b' : [4, 5]\n}\ne = {\n    'a' : {1, 2, 3},\n    'b' : {4, 5}\n}\n解决方案\n使用collections模块中的defaultdict类\ndefaultdict的特点是，当key不存在时，会自动创建它，也就是说我们不用再像dict一样首先判断key是否存在了，下面是一个例子：\n>>> from collections import defaultdict\n>>> d = defaultdict(list)\n>>> d['a'].append(1)\n>>> d['a'].append(2)\n>>> d['a'].append(3)\n>>> d['b'].append(4)\n>>> d['b'].append(5)\n>>> print(d)\ndefaultdict(<class 'list'>, {'a': [1, 2, 3], 'b': [4, 5]})\n当然，也可以用dict的setdefault函数来实现同样的效果，但看起来会比较“丑陋”\n>>> d = dict()\n>>> d.setdefault('a', []).append(1)\n>>> d.setdefault('a', []).append(2)\n>>> print(d)\n{'a': [1, 2]}\n讨论\n根据Python3官方文档对defaultdict的介绍可以了解到\ndefaultdict是dict的子类，defaultdict重写了dict的__missing__方法，并且增加了一个可以修改的default_factory成员\n当defaultdict的key不存在时，会将key初始化为调用default_factory得到的返回值，default_factory可以在初始化时指定，也可以随后再进行改变\n>>> from collections import defaultdict\n>>> d = defaultdict(list)\n>>> d['l'].append(1)\n>>> d.default_factory = set\n>>> d['s'].add(2)\n>>> print(d)\ndefaultdict(<class 'set'>, {'l': [1], 's': {2}})\n来源\nPython Cookbook\n关注\n欢迎关注我的微信公众号：python每日一练\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}