{"title": "Python 闭包的理解 - Yi_Zhi_Yu的世界 ", "index": "闭包,python", "content": "Python中的闭包的概念， 在我看来， 就相当于在某个函数中又定义了一个或多个函数， 内层函数定义了具体的实现方式， 而外层返回的就是这个实现方式， 但并没有执行， 除非外层函数调用的内层的实现方法被执行了。至于这个怎么执行， 看下面的例子就知道了\n比如：\ndef sum_outer(x, y)：\n    def sum_in(z)：\n        return x + y - z;\n    return sum_in #注意， 这里返回的不是sum_in() 只是sum_in的函数名\n  \n\n m = sum_outer(3, 4)  #3, 4 分别对应x, y，这里的m返回的也只是函数sum_in的定义，<function __main__.sum_in>\n print m(5) # m对应z, 这个时候才是真正sum_in执行的时候\n看起来就像通过sum_outer 调用了内层的sum_in函数， 多了层代理\n其中一种应用场景就是可以根据不同的参数，使用相同的实现去返回对应不同的结果，比如， 根据不同的配置获取不同的数据库连接，  或者要求在验证字符串长度时， 可以根据不同的最大长度验证(外层传递最大长度， 内层传递验证的字符串)。\n在抽象化一点， 外层定义了一个环境， 内层则是在该环境中的要做的事情， 但这个事情还没做，只是要做。当真正需要做的时候到这个环境中去做了就好了(外层的返回结果(m)执行内层的函数sum_in)\n实际上， 直接给函数传递需要的所有参数， 直接返回结果， 如上面的sum_outer和sum_in， 直接通过\ndef sum(x,y,z):\n    return x + y - z\n不就结了吗，为社么还要闭包这个实现呢？ 到目前来说， 只能看出他们是两种不同的实现方式， 更多的区别， 还有待日后的学习体验\n\n更新： 闭包最常见的应用就是装饰器。\n\n                ", "mainLikeNum": ["3 "], "mainBookmarkNum": "15"}