{"title": "​Python 3 新特性：类型注解 - Crossin的编程教室 ", "index": "python", "content": "前几天有同学问到，这个写法是什么意思：\n\n\ndef add(x:int, y:int) -> int:\n    return x + y\n\n\n我们知道 Python 是一种动态语言，变量以及函数的参数是 不区分类型 。因此我们定义函数只需要这样写就可以了：\n\n\ndef add(x, y):\n    return x + y\n\n\n这样的好处是有极大的灵活性，但坏处就是对于别人代码，无法一眼判断出参数的类型，IDE 也无法给出正确的提示。\n于是 Python 3 提供了一个新的特性：  函数注解\n也就是文章开头的这个例子：\n\n\ndef add(x:int, y:int) -> int:\n    return x + y\n\n\n用 : 类型 的形式指定函数的 参数类型 ，用 -> 类型 的形式指定函数的 返回值 类型。\n然后特别要强调的是，Python 解释器 并不会 因为这些注解而提供额外的校验，没有任何的类型检查工作。也就是说，这些类型注解加不加，对你的代码来说没有任何影响 ：\n\n输出：\n\n但这么做的好处是：\n\n让别的程序员看得更明白\n让 IDE 了解类型，从而提供更准确的代码提示、补全和语法检查（包括类型检查，可以看到 str 和 float 类型的参数被高亮提示）\n\n\n在函数的 __annotations__ 属性中会有你设定的注解：\n\n输出：\n\n在 Python 3.6 中，又引入了对 变量类型 进行注解的方法：\n\n\na: int = 123\nb: str = 'hello'\n\n\n更进一步，如果你需要指明一个全部由整数组成的列表：\n\n\nfrom typing import List\nl: List[int] = [1, 2, 3]\n\n\n但同样，这些仅仅是“ 注解 ”，不会对代码产生任何影响。\n不过，你可以通过 mypy 库来检验最终代码是否符合注解。\n安装 mypy：\n\n\npip install mypy\n\n\n执行代码：\n\n\nmypy test.py\n\n\n如果类型都符合，则不会有任何输出，否则就会给出类似输出：\n\n这些新特性也许你并不会在代码中使用，不过当你在别人的代码中看到时，请按照对方的约定进行赋值或调用。\n当然，也不排除 Python 以后的版本把类型检查做到解释器里，谁知道呢。\n════  其他文章及回答：\n如何自学Python |新手引导 |精选Python问答| Python单词表 |区块链 |人工智能\n欢迎关注： Crossin的编程教室\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}