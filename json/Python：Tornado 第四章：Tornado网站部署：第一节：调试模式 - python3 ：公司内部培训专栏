{"title": "Python：Tornado 第四章：Tornado网站部署：第一节：调试模式 - python3 ：公司内部培训专栏 ", "index": "python", "content": "上一篇文章：Python：Tornado 第三章：HTML5 WebSocket概念及应用：第三节：客户端编程下一篇文章：Python：Tornado 第四章：Tornado网站部署：第二节：静态文件\n\n之前着重讲解Tornado的编程知识点，所有之前的例子都使用最简单的IOLoop启动方式运行。本节学习如何优化Tornado的运行方式，以达到快捷、易用及资源利用优化的目的。\n到目前为止，本章通过如下方式启动tornado程序：\ndef make_app():\n    return tornado.web.Application([\n        #此处写入映射\n    ])\ndef main():\n    app=make_app()  #建立Application对象\n    app.listen(8888) #设置监听端口\n    IOLoop.current().start()  #启动IOLoop\n\nif __name__ == '__main__':\n    main()\n通过这种方式启动的程序一旦出错，则只能通过Windows任务管理器或Linux命令行Kill掉Python进行。因为调试需要频繁地进行：启动→差错→停止→排错→重启...的迭代流程，所以这样简单的方法并不利于程序调试，本节学习如何简化调试流程。\n1、自动加载\n通过向Application实例传入参数debug=True，可以将程序以调试模式启动，例如：\ndef make_app():\n    return tornado.web.Application([\n        #此处写入映射\n    ],\n    debug=True  #调试模式\n    )\n在这种模式下开发者可以获得如下便利：\n\n自动加载：对项目中任何*.py源文件的修改将导致程序自动重启并加载修改后的代码文件。这样极大地简化了开发者因为调试器需要频繁重启。\n错误追溯：当RequestHandler；处理用户访问出现异常时，系统的错误信息调用栈将被推送到浏览器中，使得调试者可以马上查找错误的根源。\n禁用模板缓存：在运营环境中模板缓存能提高效率，但在调试期间占用了更多的系统资源，所以将其禁用有利于开发者进行调试。\n\n注意：在运营环境中不要开启Debug模式，这样会增加网站被攻击的危险。\n2、Ctrl+C退出机制\n在默认情况下Tornado的IOLoop不会响应Linux控制台的Ctrl+C命令，导致程序无法便捷地退出运行。\n要响应Linux控制台的Ctrl+C命令，则可以在运行中捕获KeyboardInterrupt异常并调用IOLoop.stop()函数：\ndef main():\n    app=make_app()  #建立Application对象\n    app.listen(8888) #设置监听端口\n    try:\n        #启动IOLoop\n        tornado.ioloop.IOLoop.current().start()\n    except KeyboardInterrupt:\n        tornado.ioloop.IOLoop.current().stop()\n        #此处执行资源回收工作\n        print(\"Program exit!\")\n\nif __name__ == '__main__':\n    main()\n这也在控制台发送了Ctrl+C请求后，程序可有机会回收系统的其它资源并退出执行。\n注意：在Windows平台上，产生KeyboardInterrupt中断的方式是Ctrl+Pause\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}