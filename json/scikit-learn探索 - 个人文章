{"title": "scikit-learn探索 - 个人文章 ", "index": "python", "content": "1.KFold与StratifiedKFold的区别\nclass sklearn.model_selection.StratifiedKFold(n_splits=3, shuffle=False, random_state=None)Stratified K-Folds cross-validator Provides train/test indices to split data in train/test sets.This cross-validation object is a variation of KFold that returns stratified folds. The folds are made by preserving the percentage of samples for each class\n意思就是Stra~是按着不同类别标签的相对占比来进行的分折\n看看代码\nimport numpy as np\nimport sklearn.datasets as ds\nimport sklearn.svm as sksvm\nimport sklearn.model_selection as skmodsel\n\na=[[i] for i in range(100)]\nb=[0]*30;b.extend([1]*30);b.extend([2]*30);b.extend([3]*10)\n\nK_strafold=skmodsel.StratifiedKFold(n_splits=10) \nK_folds=skmodsel.KFold(n_splits=10)\nfor train_indices, test_indices in K_folds.split(a):\n    d={}\n    for i in train_indices:\n        d[b[i]]=d.setdefault(b[i],0)+1\n    print(d)\n    \nprint('------------------')    \nfor train_indices, test_indices in K_strafold.split(a,b):\n    d={}\n    for i in train_indices:\n        d[b[i]]=d.setdefault(b[i],0)+1\n    print(d)\n    \nd={}\nfor i in range(100):\n    d[b[i]]=d.setdefault(b[i],0)+1   \nprint(d)\n结果如下\n{0: 20, 1: 30, 2: 30, 3: 10}\n{0: 20, 1: 30, 2: 30, 3: 10}\n{0: 20, 1: 30, 2: 30, 3: 10}\n{0: 30, 1: 20, 2: 30, 3: 10}\n{0: 30, 1: 20, 2: 30, 3: 10}\n{0: 30, 1: 20, 2: 30, 3: 10}\n{0: 30, 1: 30, 2: 20, 3: 10}\n{0: 30, 1: 30, 2: 20, 3: 10}\n{0: 30, 1: 30, 2: 20, 3: 10}\n{0: 30, 1: 30, 2: 30}\n------------------\n{0: 27, 1: 27, 2: 27, 3: 9}\n{0: 27, 1: 27, 2: 27, 3: 9}\n{0: 27, 1: 27, 2: 27, 3: 9}\n{0: 27, 1: 27, 2: 27, 3: 9}\n{0: 27, 1: 27, 2: 27, 3: 9}\n{0: 27, 1: 27, 2: 27, 3: 9}\n{0: 27, 1: 27, 2: 27, 3: 9}\n{0: 27, 1: 27, 2: 27, 3: 9}\n{0: 27, 1: 27, 2: 27, 3: 9}\n{0: 27, 1: 27, 2: 27, 3: 9}\n------------------\n{0: 30, 1: 30, 2: 30, 3: 10}\n我们设置的是十折，也就是说将a分为十份，每次取一份来做test集结果很明显，类别标签里有0,1,2各30个，和10个3标签，他们的占比就是3:3:3:1当直接使用KFold的时候，则是每次取出十个同一列表标签的来做一折，看起来就好像是按着b的排列顺序，第一次取0~9做第一折，10-19做第二折，以此类推但当使用Stra~的时候，每次取都是按着占比来取的，每一折都满足3:3:3:1，测试集也是满足这种\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}