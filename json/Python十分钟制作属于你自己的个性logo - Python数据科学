{"title": "Python十分钟制作属于你自己的个性logo - Python数据科学 ", "index": "python", "content": "作者：xiaoyu微信公众号：Python数据科学知乎：python数据分析师\n\n词云的使用相信大家已经不陌生了，使用很简单，直接调用wordcloud包就可以了。它的主要功能是根据文本词汇和词汇频率生成图片，从中可以直观的看出各个词汇所占比重。最近正好想做一个人的logo，于是乎决定使用词云来制作完成。\nwordcloud安装\npip install wordcloud\n使用 pip 安装你肯定会遇到一个坑，安装过程中可能会报错，提示你安装 Microsoft Visual C++ 14.0，但是这个安装过程很耗时。\n有另一个方法可以解决，就是下载相应的whl文件安装。下载链接：https://www.lfd.uci.edu/~gohlke/pythonlibs/#wordcloud\n文件下载后，cmd 进入whl文件所在文件夹下，然后输入以下命令：\npip install wordcloud-1.4.1-cp36-cp36m-win_amd64.whl\nwordcloud代码使用\n安装成功后我们马上开始制作我们的图片。\nfrom os import path\nfrom PIL import Image\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n\nd = path.dirname(__file__)\n\n# 读文本文件\ntext = open(path.join(d, 'data.txt')).read()\n\n# 读取自定义图片\nalice_coloring = np.array(Image.open(path.join(d, \"pic.jpg\")))\n\n# 你可以通过 mask 参数 来设置词云形状\nwc = WordCloud(background_color=\"white\",max_words=2000, \n                mask=alice_coloring, max_font_size=60,random_state=102,scale=8,\n                font_path=\"C:\\Windows\\Fonts\\msyhbd.ttf\").generate(text)\n\nwc.generate_from_text(text)\nprint('开始加载文本')\n# 改变字体颜色\nimg_colors = ImageColorGenerator(alice_coloring)\n# 字体颜色为背景图片的颜色\nwc.recolor(color_func=img_colors)\n# 显示词云图\nplt.imshow(wc, interpolation=\"bilinear\")\n# 是否显示x轴、y轴下标\nplt.axis('off')\nplt.show()\n# 获得模块所在的路径的\nd = path.dirname(__file__)\n# 将多个路径组合后返回\nwc.to_file(path.join(d, \"h16.jpg\"))\nprint('生成词云成功!')\n上面 text 文本内容是通过爬虫采集的，爬取的关于数据科学的一篇文章，有了文本源之后准备好你想要生成词云的图片就行了。\n配置 wordcloud 的参数对于图片效果尤为重要，下面我们着重介绍一下wordcloud的参数含义：\n\n\nfont_path : string 字体路径，需要展现什么字体就把该字体路径+后缀名写上，如：font_path = '黑体.ttf'\n\nwidth : int (default=400) 输出的画布宽度，默认为400像素\n\nheight : int (default=200) 输出的画布高度，默认为200像素\n\nprefer_horizontal : float (default=0.90) 词语水平方向排版出现的频率，默认 0.9\n\nmask : nd-array or None (default=None) 若参数为空，则正常绘制词云。如果 mask 非空，设置的宽高值将被忽略，形状被 mask 取代。除白色的部分将不会绘制，其余部分会用于绘制词云。\n\nscale : float (default=1) 按照比例进行放大画布，如设置为2，则长和宽都是原来画布的2倍。\n\nmin_font_size : int (default=4) 显示的最小的字体大小\n\nfont_step : int (default=1) 字体步长，如果步长大于1，会加快运算但是可能导致结果出现较大的误差。\n\nmax_words : number (default=200) 要显示的词的最大个数\n\nstopwords : set of strings or None 设置需要屏蔽的词，如果为空，则使用内置的STOPWORDS\n\nbackground_color : color value (default=”black”) 背景颜色，如background_color='white',背景颜色为白色。\n\nmax_font_size : int or None (default=None) 显示的最大的字体大小\n\nmode : string (default=”RGB”) 当参数为“RGBA”并且background_color不为空时，背景为透明。\n\nrelative_scaling : float (default=.5) 词频和字体大小的关联性\n\ncolor_func : callable, default=None 生成新颜色的函数，如果为空，则使用 self.color_func\n\nregexp : string or None (optional) 使用正则表达式分隔输入的文本\n\ncollocations : bool, default=True 是否包括两个词的搭配\n\ncolormap : string or matplotlib colormap, default=”viridis” 给每个单词随机分配颜色，若指定color_func，则忽略该方法。\n\n效果展示\n使用的照片是博主自己的照片。\n——————end——————\n关注微信公众号Python数据科学，获取 120G 人工智能 学习资料。\n\n\n                ", "mainLikeNum": ["23 "], "mainBookmarkNum": "28"}