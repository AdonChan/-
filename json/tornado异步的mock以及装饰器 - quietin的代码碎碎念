{"title": "tornado异步的mock以及装饰器 - quietin的代码碎碎念 ", "index": "python", "content": "mock非常适合写单元测试, 用它patch掉网络请求的返回值即可\nasync_func.py\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\nimport signal\nimport errno\nimport tornado.gen\nimport tornado.ioloop\nimport tornado.web\nimport tornado.httpclient\nimport tornado.httpserver\n\nHOST = 'baidu.com'\n\n@tornado.gen.coroutine\ndef search(keyword):\n    client = tornado.httpclient.AsyncHTTPClient()\n    url = 'http://%s/s?wd=%s' % (HOST, keyword)\n    resp = yield client.fetch(url)\n    raise tornado.gen.Return(resp.body)\n\nclass FooHandler(tornado.web.RequestHandler):\n    @tornado.gen.coroutine\n    def get(self):\n        keyword = self.get_argument('wd')\n        result = yield search(keyword)\n        self.finish(result)\n\ndef handle_signal_kill(sig, frame):\n    print 'Catch signal: %s' % errno.errorcode(sig)\n    tornado.ioloop.IOLoop.instance().stop()\n\nif __name__ == '__main__':\n    app = tornado.web.Application(\n        handlers=[\n            (r\"/\", FooHandler),\n        ]\n    )\n    http_server = tornado.httpserver.HTTPServer(app)\n    http_server.listen(8888)\n\n    signal.signal(signal.SIGINT, handle_signal_kill)\n    signal.signal(signal.SIGQUIT, handle_signal_kill)\n    signal.signal(signal.SIGTERM, handle_signal_kill)\n    signal.signal(signal.SIGHUP, handle_signal_kill)\n\n    # test url: http://127.0.0.1:8888/?wd=nmb\n    tornado.ioloop.IOLoop.current().start()\n测试用的test.py\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\nimport mock\nimport tornado.gen\nimport tornado.ioloop\nimport tornado.testing\nimport tornado.concurrent\nimport unittest\nimport tornado.testing\n\nfrom async_func import search\n\nclass AsyncTestCase(tornado.testing.AsyncTestCase):\n    def setUp(self):\n        super(AsyncTestCase, self).setUp()\n\n    @mock.patch('tornado.httpclient.AsyncHTTPClient')\n    @tornado.testing.gen_test\n    def test_fetch(self, AsyncHTTPClient):\n        AsyncHTTPClient.return_value = mock.MagicMock()\n        future = tornado.concurrent.Future()\n        future.set_result(mock.MagicMock(body='mycontent'))\n        x = mock.MagicMock()\n        x.fetch.return_value = future\n        AsyncHTTPClient.return_value = x\n        result = yield search('nmb48')\n        self.assertIn(result, 'mycontent test')\n\nunittest.main()\n给上面的FooHandler加装饰器(放在coroutine上面), 这种一般的使用场景就是加缓存或者计时之类...因为异步的里面是个generator, 所以最里面包的一层还是要加coroutine并且用gen返回\ndef cache_it(func):\n    @tornado.gen.coroutine\n    def _deco(self):\n        print 'decrator work'\n        # save cache or other...\n        result = yield func(self)\n        raise tornado.gen.Return(result)\n    return _deco\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "2"}