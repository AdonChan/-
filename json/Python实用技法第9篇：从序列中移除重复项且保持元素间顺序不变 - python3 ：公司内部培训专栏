{"title": "Python实用技法第9篇：从序列中移除重复项且保持元素间顺序不变 - python3 ：公司内部培训专栏 ", "index": "python", "content": "上一篇文章：Python实用技法第8篇：在两个字典中寻找相同点下一篇文章：Python实用技法第10篇：对切片命名\n\n1、需求🙀\n我们想去除序列出现的重复元素，但仍然保持剩下的元素的顺序不变。\n如果只是想要去重，那么通常足够简单的方法就是构建一个集合：\na=[1,5,4,36,7,8,2,3,5,7]\n#结果为：{1, 2, 3, 4, 5, 36, 7, 8}\nprint(set(a))\n2、解决方案😸\n如果序列中的值是可哈希的（hashable），那么这个问题可以通过使用集合和生成器轻松解决。\n如果一个对象是可哈希的，那么它的生存期内必须是不可变的，它需要有一个__hash__()方法。整数、浮点数、字符串、元素都是不可变的。\ndef dedupe(items):\n    seen=set()\n    for item in items:\n        if item not in seen:\n            yield item\n            seen.add(item)\n\na=[1,2,3,1,9,1,5,10]\nprint(list(dedupe(a)))\n运行结果：\n[1, 2, 3, 9, 5, 10]\n只有当序列中的元素是可哈希的时候才能这么做。如果想在不可哈希的对象序列中去除重复项，需要上述代码稍作修改：\ndef dedupe(items,key=None):\n    seen=set()\n    for item in items:\n        value=item if key is None else key(item)\n        if value not in seen:\n            yield item\n            seen.add(value)\n\na=[\n    {'x':1,'y':2},\n    {'x':1,'y':3},\n    {'x':1,'y':4},\n    {'x':1,'y':2},\n    {'x':1,'y':3},\n    {'x':1,'y':1},\n\n]\nprint(list(dedupe(a,key=lambda d:(d['x'],d['y']))))\n\nprint(list(dedupe(a,key=lambda d:d['y'])))\n运行结果：\n[{'x': 1, 'y': 2}, {'x': 1, 'y': 3}, {'x': 1, 'y': 4}, {'x': 1, 'y': 1}]\n[{'x': 1, 'y': 2}, {'x': 1, 'y': 3}, {'x': 1, 'y': 4}, {'x': 1, 'y': 1}]\n这里的参数key的作用是指定一个函数用来将序列中的元素转换为可哈希的类型，那么做的目的是为了检测重复项。\n\n                ", "mainLikeNum": ["3 "], "mainBookmarkNum": "1"}