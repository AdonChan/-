{"title": "python学习笔记- python中的类 - helloword ", "index": "python", "content": "动态语言与静态语言的最大的不同就是，函数和类的定义，不是在编译的时候创建的，而是在运行的时候创建的。例如我们写了一个叫demo.py的模块，在里面定义了一个类：\nclass Demo(object):\n    pass\n然后我们在另一个模块helloword.py中引入了该模块：\nfrom demo import Demo\nclass HelloWrold(object):\n    pass\n当我们执行helloworld.py时，import入Demo则会创建一个Demo类。我们可以用type()函数类看看Demo是啥类型。\ntype(Demo)  // Demo是一个type类型 <type 'type'>\ntype(Demo()) //Demo()是一个Demo的实例，那么他是一个Demo类型。<class 'demo.Demo'>\n我们定义的类的类型都是type类型，就跟python内置的类型int、float、string等一样～～其实我们可以这么理解，int、float、string其实也是归纳了世界上上常见的数据类型，例如一类由一串文字组成的数据，我们就叫这种数据类型为string。 那么我们自定义类一直数据类型叫Student，包含了年龄、性别、各科成绩等。我们自己将这一类数据归纳成一种数据类型叫做Student。 所以从这个较多来看，我们自己创建的一个类其实跟python定义的int、float啥的是一样的～～ 上面扯了这么多类的概念，也知道了实例是根据类来创建，类是在运行过程中创建的。那么类又是这么来的呢？\n类是用type()函数创建的。type函数不是用来判断类型的吗？没错，type还可以用来创建类。type(what, base=None, attrs=None)python在用type创建类的时候，接收三个参数\n\nwhat，要创建的类名\n要继承的父类，用一个tuple表示。\n参数、方法，用一个字典表示我们来举一个例子：\n\ndef __init__(self, name):\n    self.__name = name\n\n\ndef print_name(self):\n    print self.__name\n\n\nStudent = type(\"Student\", (object,), {\"__init__\": __init__, \"print_name\": print_name, \"age\": 25})\nstudent = Student(\"Charlie\")\nstudent.print_name()\nprint student.age\n上面的例子中，我们利用type创建了一个类，并可以根据这个类来创建一个实例。我们平时用关键字class定义一个类，其实仅仅是定义了一个类。Python解释器读取到用class定义的类的时候，读取了我在里面写的属性和方法，然后用type()创建了这个类。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "2"}