{"title": "看我打脸Message Pack - 冷且静 ", "index": "pickle,python", "content": "总之网站上说得很好啦：http://msgpack.org/，又快，生成的文件又小等等，总之就是很牛逼的救世主咯\n因为忍受不了 pickle 的速度，所以尝试切换一下。\nimport pickle\nimport msgpack\nimport gc\n\na = list(range(10000*10000))\n\ndef dump1():\n    with open('1', 'wb') as f:\n        pickle.dump(a, f)\n\ndef dump2():\n    with open('2', 'wb') as f:\n        msgpack.dump(a, f)\n\ndef dump3():\n    gc.disable()\n    with open('2', 'wb') as f:\n        msgpack.dump(a, f)\n    gc.enable()\n然后测速，有 dump3 的原因是官方网站说关闭gc有奇效:\nCPython's GC starts when growing allocated object. This means unpacking may cause useless GC. You can use gc.disable() when unpacking large message.\n恩，先看测试结果(测试了10次):\ndump1: 1 loop, best of 3: 3.98 s per loop\ndump2: 1 loop, best of 10: 5.22 s per loop\ndump3: 1 loop, best of 10: 5.13 s per loop\n恩，彻底打脸了。关闭gc也没有奇效。\n然后看dump出来的文件 (=，=b):\n-rw-r--r--  1 chendx  staff   477M  8 11 18:43 1\n-rw-r--r--  1 chendx  staff   477M  8 11 18:49 2\n恩，浪费我的时间……\n\n然后不死心\ndef load1():\n    with open('1', 'rb') as f:\n        pickle.load(f)\n\ndef load2():\n    with open('2', 'rb') as f:\n        msgpack.load(f)\n结果(还是10次)\nload1: 1 loop, best of 10: 6.78 s per loop\nload2: 1 loop, best of 10: 5.91 s per loop\n恩，真是鸡肋啊\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}