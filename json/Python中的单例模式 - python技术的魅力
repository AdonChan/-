{"title": "Python中的单例模式 - python技术的魅力 ", "index": "python,单例,class", "content": "单例模式\n单例模式（Singleton Pattern）是一种常用的软件设计模式，该模式的主要目的是确保某一个类只有一个实例存在。当你希望在整个系统中，某个类只能出现一个实例时，单例对象就能派上用场。\n比如，某个服务器程序的配置信息存放在一个文件中，客户端通过一个 AppConfig 的类来读取配置文件的信息。如果在程序运行期间，有很多地方都需要使用配置文件的内容，也就是说，很多地方都需要创建 AppConfig 对象的实例，这就导致系统中存在多个 AppConfig 的实例对象，而这样会严重浪费内存资源，尤其是在配置文件内容很多的情况下。事实上，类似 AppConfig 这样的类，我们希望在程序运行期间只存在一个实例对象。\n在 Python 中，我们可以用多种方法来实现单例模式：\n\n使用模块\n使用 new\n\n使用装饰器（decorator）\n使用元类（metaclass）\n\n使用模块\n其实，Python 的模块就是天然的单例模式，因为模块在第一次导入时，会生成 .pyc 文件，当第二次导入时，就会直接加载 .pyc 文件，而不会再次执行模块代码。因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单例对象了。如果我们真的想要一个单例类，可以考虑这样做：\n#!/usr/bin/env python\n# _*_ coding:utf-8 _*_\n__author__ = 'junxi'\n\n\nclass MySingleton(object):\n    def foo(self):\n        pass\n    \nmy_singleton = MySingleton()\n将上面的代码保存在文件 mysingleton.py 中，然后这样使用：\nfrom mysingleton import my_singleton\nmy_singleton.foo()\n使用 new\n\n为了使类只能出现一个实例，我们可以使用 new 来控制实例的创建过程，代码如下：\nclass Singleton(object):\n    _instance = None\n\n    def __new__(cls, *args, **kwargs):\n        if not cls._instance:\n            cls._instance = super(Singleton, cls).__new__(cls, *args, **kwargs)\n        return cls._instance\n\n\nclass MyClass(Singleton):\n    a = 1\n\none = MyClass()\ntwo = MyClass()\nprint 'one == two: ', (one == two)\nprint 'id(one): ', id(one)\nprint 'id(two): ', id(two)\n执行结果：\none == two:  True\nid(one):  50662032\nid(two):  50662032\n使用装饰器\n我们知道，装饰器（decorator）可以动态地修改一个类或函数的功能。这里，我们也可以使用装饰器来装饰某个类，使其只能生成一个实例，代码如下：\nfrom functools import wraps\n\n\ndef singleton(cls):\n    instances = {}\n    @wraps(cls)\n    def getinstance(*args, **kwargs):\n        if cls not in instances:\n            instances[cls] = cls(*args, **kwargs)\n        return instances[cls]\n    return getinstance\n\n\n@singleton\nclass MyClass(object):\n    a = 1\n在上面，我们定义了一个装饰器 singleton，它返回了一个内部函数 getinstance，该函数会判断某个类是否在字典 instances 中，如果不存在，则会将 cls 作为 key，cls(args, *kw) 作为 value 存到 instances 中，否则，直接返回 instances[cls]。\n使用 metaclass\n元类（metaclass）可以控制类的创建过程，它主要做三件事：\n拦截类的创建修改类的定义返回修改后的类使用元类实现单例模式的代码如下：\nclass Singleton(type):\n    _instances = {}\n    def __call__(cls, *args, **kwargs):\n        if cls not in cls._instances:\n            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)\n        return cls._instances[cls]\n    \n# python2\nclass MyClass(object):\n    __metaclass__ = Singleton\n    a = 1\n    \n    \n# python3\n# class MyClass(metaclass=Singleton)\n#    pass\n\na = MyClass()\nb = MyClass()\nprint a.a\nprint 'a is b ? ', (a is b)\n执行结果：\n1\na is b ?  True\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}