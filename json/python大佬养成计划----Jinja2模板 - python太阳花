{"title": "python大佬养成计划----Jinja2模板 - python太阳花 ", "index": "html5,python", "content": "什么是Jinja2\nJinja2是Python下一个被广泛应用的模版引擎，他的设计思想来源于Django的模板引擎，并扩展了其语法和一系列强大的功能。其中最显著的一个是增加了沙箱执行功能和可选的自动转义功能，这对大多应用的安全性来说是非常重要的。\n基于unicode并能在python2.4之后的版本运行，包括python3。\n如何使用Jinja2\n要想使用Jinja2模板，需要从flask导入render_template函数，然后在路由函数中调用render_template函数，该函数第一个参数就是模板名字。模板默认保存在目录。\n最简单的模板文件就是普通的HTML文件，但静态文件没什么意义，需要在访问路由时传入响应的参数，并在模板中以一定的样式显示在浏览器中，因此，需要用到render_template函数的关键字参数。假设有一个模板文件hello.html，代码如下：\n<h1> hello,{{name}}.</h1>\n这个用{{......}}括起来的部分就是模板表达式。在使用render_template函数调用模板文件hello.html时，需要通过关键字参数指定name值。\nrender_template('hello.html',name='star')\n返回给客户端时，{{name}}会被替换成star.网页输出代码\n<h1> hello,star.</h1>\njinja2常用语法\n1.  变量显示语法: {{ 变量名 }}\n\n2. for循环:\n{% for i in li%}\n\n{% endfor %}\n\n3. if语句\n{% if user == 'westos'%}\n\n{% elif user == 'hello' %}\n\n{% else %}\n\n{% endif%}\n数据显示\n# templates目录里面建立mubna.html文件\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>hello</title>\n</head>\n<body>\n<p>变量:{{ name }}</p>\n<p>列表:{{ li }}</p>\n<p>列表元素:\n{% for item in li  %}\n<br/>{{ item }}\n{% endfor %}</p>\n<p>字典:{{ d }}</p>\n<p>字典元素:\n{{ d.a }}\n{{ d['b'] }}</p>\n<p>对象:{{ u }}</p>\n<table>\n    <tr>\n        <td>用户</td>\n        <td>密码</td>\n    </tr>\n    <tr>\n        <td>{{ u.name }}</td>\n        <td>{{ u.passwd }}</td>\n    </tr>\n\n</table>\n\n</body>\n</html>\nfrom flask import Flask, render_template\n\napp = Flask(__name__)\n\nclass User(object):\n    def __init__(self, name, passwd):\n        self.name = name\n        self.passwd = passwd\n\n    def __str__(self):\n        return  \"<User: %s>\" %(self.name)\n\n@app.route('/')\ndef index1():\n    name = \"sheen is cute !!\"\n    li = [1, 2, 4, 5]\n    d = dict(a=1, b=2)\n    u = User(\"westos\", \"passwd\")\n    return  render_template('muban.html',\n                            name = name,\n                            li = li,\n                            d = d,\n                            u = u\n                            )\n\napp.run()\n\n模板中的过滤器\n服务端给客户端返回的数据可能来自于多种数据源。这些数据格式可能并不能满足客户端需求，就需要对数据进行再加工。过滤器需要放在模板表达式变量的后面，与变量之间用'|'分割，{{ vlaue|upper}}将value英文字母都转换为大写形式。\n编写一个时间过滤器，将时间戳转换为特定格式的字符串时间\n\nfrom flask import Flask, render_template\nimport time\napp = Flask(__name__)\n\n\ndef time_format(value,format=\"%Y-%m-%d %H:%M:%S\"):\n    #  时间戳----> 元组\n    t_time = time.localtime(value)\n    #  元组  ----> 指定字符串\n    return time.strftime(format,t_time)\n# 第一个参数是过滤器函数，第二个参数是过滤器名称\napp.add_template_filter(time_format,'time_format')\n\n@app.route('/chtime/')\ndef chtime():\n    return render_template('chtime.html',timestamp = time.time())\n\n\napp.run()\n# templates/目录下的chtime.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n时间戳\n{{ timestamp }}\n<br/>\n格式化后的时间\n{{ timestamp | time_format }}\n\n</body>\n</html>\n\n宏操作\n在编写python程序时，会有很多地方调用同样或类似的代码。这种情况，可以把重复使用的代码放到函数或类中，只需要访问函数或类的实例就可以实现代码复用。Jinja2 模板中使用宏来防止代码冗余。\nJinja2 模板中的宏需要放到{%......%}，使用修饰，支持参数，并且使用{% endmacro %}结束\n\n如果宏要被多个模板文件共享，就需要将宏单独放到一个模板文件中，然后使用{% import ….%}指令导入该模板\n\n调用宏，实现登陆页面的模板继承\n## templates/目录下的macro.html\n{% macro input(type,  name, text ) %}\n\n <div class=\"form-group\">\n            <label>{{ text }}</label>\n            <input name={{ name }} type={{ type }} class=\"form-control\">\n        </div>\n{% endmacro %}\n# # templates/目录下的login.html\n{% extends \"base.html\" %}\n\n{% block title %}\n登陆\n{% endblock %}\n\n\n{% block content %}\n<div class=\"container container-small\">\n    <h1>登录\n        <small>没有账号？<a href=\"signup.html\">注册</a></small>\n    </h1>\n\n{#    /*将表单信息提交给/login路由对应的函数进行处理, 并且提交信息的方式为post方法, 为了密码的安全性*/#}\n    <form action=\"/login/\" method=\"post\">\n        <!--<div class=\"form-group\">-->\n            <!--<label>用户名/手机/邮箱</label>-->\n            <!--<input name=\"user\" type=\"text\" class=\"form-control\">-->\n        <!--</div>-->\n        \n        {% import 'macro.html' as macro %}\n        {#调用宏模板#}\n        {{macro.input('text', 'user', \"用户名/手机/邮箱\" )}}\n        {{macro.input('password','passwd',  \"密码\" )}}\n\n        <!--<div class=\"form-group\">-->\n            <!--<label>密码</label>-->\n            <!--<input name=\"passwd\" type=\"password\" class=\"form-control\">-->\n        <!--</div>-->\n        <div class=\"form-group\">\n            <button class=\"btn btn-primary btn-block\" type=\"submit\">登录</button>\n        </div>\n        <div class=\"form-group\">\n            <a href=\"#\">忘记密码？</a>\n        </div>\n        <!--获取服务器传递给后台的变量message, jinja2模板引擎里面的语法-->\n        {% if message %}\n        <p style=\"color: red\">{{ message }}</p>\n        {% endif %}\n\n\n    </form>\n</div>\n{% endblock %}\n#主程序\nfrom flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('/login/')\ndef login():\n    return render_template('login.html')\n\napp.run()\n\n模板继承\nJinja2模板还有另一种代码复用技术，就是模板继承。当一个模板被另外的模板继承时，可以通过{{ super() }} 访问父模板的资源。在一个模板中继承另一个模板，需要extends 指令。如 child.txt 模板文件从 parent.txt 继承的代码\n{% extends ‘parents.txt’ %}\nchild.txt 从parent.txt模板继承后，会自动使用parent.txt 中的所有代码，但要放在\n{% block xxxx%} ....  {% endblock %}\n中的代码需要child.txt中使用{{super() }}引用。其中，xxxx是块(block)的名字模板继承语法:\n1. 如何继承某个模板?\n        {% extends \"模板名称\" %}\n\n\n2. 如何挖坑和填坑?\n挖坑:\n    {% block 名称 %}\n\n        默认值\n\n    {% endblock %}\n\n\n填坑:\n    {% block 名称 %}\n\n    {% endblock %}\n\n\n3. 如何调用/继承被替代的模板?\n挖坑:\n    {% block 名称 %}\n\n        默认值\n\n    {% endblock %}\n\n\n填坑:\n    {% block 名称 %}\n        #如何继承挖坑时的默认值?\n        {{ super() }}\n\n        # 后面写新加的方法.\n        ........\n    {% endblock %}\n\n#templates目录下建立parent.html模板文件\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    {% block head %}\n    <meta charset=\"UTF-8\">\n    <title>{% block title %}hello{% endblock %}</title>\n    {% endblock %}\n</head>\n<body>\nI LOVE PYTHON! <br/>\n{% block body %}\n    Cute,{{ text }}\n{% endblock %}\n\n</body>\n</html>\n#templates目录下建立child.html模板文件\n{% extends 'parent.html' %}\n{% block title %}\n{#继承挖坑时的默认值:{{ super() }}#}\n{{ super() }}-{{ text }}\n{% endblock %}\n\n{% block body %}\n<h1>{{ super() }},Beauty!</h1>\n{% endblock %}\n# 主程序\nfrom flask import Flask,render_template\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return render_template('child.html',text = 'sheen')\n\nif __name__ == '__main__':\n    app.run()\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}