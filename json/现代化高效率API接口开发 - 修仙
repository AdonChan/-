{"title": "现代化高效率API接口开发 - 修仙 ", "index": "api,python", "content": "接口分类\n\n增删改查接口\n业务接口\n\n增删改查接口\n主要负责对数据库数据进行增删改查，用户管理，商品管理，订单管理等，主要为后台管理系统接口和配置接口，严格按照RESTful规范编写, 状态码按照标准规范。\n入口 /api/resouces/{orders, users等}\n日志内容： 时间，ip， 请求方式，请求路径，用户信息，操作类型，操作结果，ua\n业务接口\n业务主流程接口抽象，登录，注册，修改密码，下单，付款，确认收货等，主要是终端用户的操作主流程的接口，规范按照自定义更佳, 返回错误需要明确每个错误的业务错误码。只要正确收到和返回请求，HTTP状态码就为200 OK，包括服务器内部错误。未知错误使用code=-1。尽量不要将任何不可控的错误以及调用栈暴露，而应当在捕获到异常后，将调用栈打印到日志中。\n入口\nPOST /api/action\n参数\n{\n    \"action\": \"login\", \n    \"data\": {\n        \"phone\":\"111\", \n        \"password\": \"123456\"\n    }\n}\n日志内容\n时间，ip，请求方式，请求路径，用户标识，错误码，错误内容， action，data，设备ua等信息\n返回\n{\n    \"code\": 10000,\n    \"msg\": \"用户未注册\",\n    \"data\": null\n}\n实现\n框架：\n\nimport traceback\n\n\nclass ErrorCode:\n    sys_unknown = \"未知错误\", -1\n    sys_action_not_exist = \"操作不存在\", 10000\n    sys_params_wrong = \"参数错误\", 10001\n    already_register = \"用户已注册\", 10002\n    verify_code_wrong = \"验证码错误\", 10003\n    action_not_exist = \"操作不存在\", 10004\n\n\nclass Action:\n    schema = {}\n\n    def __init__(self, data):\n        assert data, ErrorCode.sys_params_wrong\n        self.data = data\n\n    def run(self, data):\n        raise NotImplementedError()\n\n\nclass App:\n    action_map = {}\n\n    def dispatch(self, data):\n        try:\n            assert data[\"action\"] in self.action_map, ErrorCode.sys_action_not_exist\n            action = self.action_map[data[\"action\"]]\n            return {\n                \"code\": 0,\n                \"msg\": \"\",\n                \"data\": action.run(data[\"params\"])\n            }\n        except AssertionError as e:\n            msg, code = e\n            return {\n                \"code\": code,\n                \"msg\": msg,\n                \"data\": None\n            }\n        except Exception:\n            traceback.print_exc()\n            msg, code = ErrorCode.sys_unknown\n            return {\n                \"code\": code,\n                \"msg\": msg,\n                \"data\": None\n            }\n\n注册：\n\nfrom schema import And, Schema\n\nfrom acts import Action, App, ErrorCode\n\n\nclass MyErrorCode(ErrorCode):\n    params_wrong = \"参数错误\", 10000\n    already_register = \"用户已注册\", 10001\n    verify_code_wrong = \"验证码错误\", 10002\n    action_not_exist = \"操作不存在\", 10003\n    unknown = \"未知错误\", -1\n\n\nclass RegisterAction(Action):\n    schema = Schema({\n        \"verify_code\": And(str, len),\n        \"phone\": And(str, len),\n        \"password\": And(str, len)\n    })\n    auth = False\n\n    def run(self, data):\n        assert check_verify_code(data[\"verify_code\"]), MyErrorCode.verify_code_wrong\n        assert User.get(data[\"phone\"]), MyErrorCode.already_register\n        return {\"token\": \"token\"}\n\n\naction_map = {\n    'register': RegisterAction\n}\n\n\nclass MyApp(App):\n    action_map = action_map\n\n\napp = MyApp()\n\n部署\n\nnginx\ngunicorn app:app  -k \"egg:meinheld#gunicorn_worker\" -w 9\n\n目录结构\n\napp.py,入口\nactions/ action目录\nresources/ resouce目录\n.gitignore\n\n文件上传\n特殊接口，form-data格式，用户直接上传到对象存储服务器，使用对象存储服务器生成一次性上传token，返回文件id。\n文件获取：根据文件id从对象存储服务器获取临时下载地址。\n用户认证\ntoken附在header中，保证日志的干净\n编码表\n所有下拉框类型，枚举类型，都统一存储至统一的编码表中。\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "2"}