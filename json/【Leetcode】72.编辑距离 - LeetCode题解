{"title": "【Leetcode】72.编辑距离 - LeetCode题解 ", "index": "python,c++,css,php,javascript", "content": "题目\n给定两个单词 word1 和 word2，计算出将 word1 转换成 word2 所使用的最少操作数 。你可以对一个单词进行如下三种操作：\n插入一个字符\n删除一个字符\n替换一个字符\n示例 1:\n输入: word1 = \"horse\", word2 = \"ros\"\n输出: 3\n解释: \nhorse -> rorse (将 'h' 替换为 'r')\nrorse -> rose (删除 'r')\nrose -> ros (删除 'e')\n示例 2:\n输入: word1 = \"intention\", word2 = \"execution\"\n输出: 5\n解释: \nintention -> inention (删除 't')\ninention -> enention (将 'i' 替换为 'e')\nenention -> exention (将 'n' 替换为 'x')\nexention -> exection (将 'n' 替换为 'c')\nexection -> execution (插入 'u')\n题解\n这个题目拿到题目基本就能想到DP，因为感觉和我们之前的爬楼梯啥的比较相似。这个题目比较为hard主要是，状态转换比较复杂。\n定义: dpi  ， word1这个字符串的前i个 -> word1这个字符串的前j 个字符，所需要的最小的步数\n那么有以下几种情况\nword1[i] == word2[j]\n不需要做变化，那么 dpi = dp[i-1,j-1]\nword1[i] != word2[j]\n我们就需要动用上面那三种操作了：\n\nadd = dp[i, j-1], 代表插入一个字符\ndelete = dp[i-1, j]，代表删除一个字符\nreplace = dp[i-1, j-1]，代表替换一个字符\ndpi = 1 + min(add, delete, replace)\n\n时间复杂度 o(m * n)\njava\nclass Solution {\n    public int minDistance(String word1, String word2) {\n        int m = word1.length();\n        int n = word2.length();\n        int[][] dp = new int[m + 1][n + 1];\n        // base \n        for (int i = 0; i <= m; i++) {\n            dp[i][0] = i;\n        }\n\n        for (int j = 0; j <= n; j++) {\n            dp[0][j] = j;\n        }\n        \n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (word1.charAt(i) == word2.charAt(j)) {\n                    dp[i + 1][j + 1] = dp[i][j];\n                } else {\n                    int add = dp[i][j + 1];\n                    int delete = dp[i + 1][j];\n                    int rep = dp[i][j];\n                    dp[i + 1][j + 1] = Math.min(Math.min(add, delete), rep) + 1;\n                }\n            }\n        }\n        return dp[m][n];\n    }\n}\npython\nclass Solution:\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        m = len(word1)\n        n = len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = i\n        for i in range(n + 1):\n            dp[0][i] = i\n        for i in range(m):\n            for j in range(n):\n                if word1[i] == word2[j]:\n                    dp[i + 1][j + 1] = dp[i][j]\n                else:\n                    add = dp[i][j + 1]\n                    delete = dp[i + 1][j]\n                    replace = dp[i][j]\n                    dp[i + 1][j + 1] = min(add, delete, replace) + 1\n        return dp[m][n]\n近期文章\n\n【mysql】mysql系统架构\n【Leetcode】71. 简化路径\n【Leetcode】70. 爬楼梯\n\n\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "1"}