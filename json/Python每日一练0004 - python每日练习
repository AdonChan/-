{"title": "Python每日一练0004 - python每日练习 ", "index": "python", "content": "问题\n如何保存迭代对象的最后N个元素\n例如保存列表['a', 'b', 'c', 'd']的最后2个元素\n或者保存某个迭代器对象的最后5个元素\n解决方案\n对于列表、元组这样的数据结构，可以使用切片来很方便的实现，例如保存列表l的最后3个元素就可以直接l[-3:]\n但有些时候，我们操作的可迭代对象不能使用切片\n这个时候可以使用collections库里的deque（双端队列）数据结构\nfrom collections import deque\n\ndef foo():\n    for i in range(100):\n        yield i\n        \nlast_5 = list(deque(foo(), maxlen=5))\nprint(last_5)\ndeque能做到这一点，是因为如果deque指定了maxlen，那么当deque的元素超过maxlen时，就会从另一端把端头的元素删掉，再插入新的元素\n也就是说，当deque指定了maxlen，deque中的元素永远最多只有maxlen个\n这里虽然也可以使用list来模拟出这种效果，但并不能使用list，原因是因为list如果删除头部的元素，时间复杂度会是O(n)，而deque删除头部和尾部元素的时间复杂度都是O(1)\n讨论\ndeque是一个类似于list的数据结构，但又与list有许多不同之处，这里详细介绍一下\n\n构造deque对象时，如果不指定maxlen，那么deque的元素个数会不断增加；如果指定了maxlen，那么当元素的个数超过maxlen时再插入，就会先删掉另一端队头的元素，然后再插入新的元素\n\ndeque也支持下标访问，访问两端的队头元素时，时间复杂度为O(1)，但访问中间的元素时，时间复杂度会退化到O(n)。这一点与list不同，list随机访问任意一个位置的元素时间复杂度都是O(1)\n\ndeque删除两端元素的复杂度都是O(1)；而list删除最后一个元素的复杂度是O(1)，删除第一个元素的复杂度是O(n)，这是因为后面的元素需要向前移位\n\n来源\nPython Cookbook\n关注\n欢迎关注我的微信公众号：python每日一练\n\n\n                ", "mainLikeNum": ["3 "], "mainBookmarkNum": "2"}