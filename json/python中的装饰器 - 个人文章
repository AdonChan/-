{"title": "python中的装饰器 - 个人文章 ", "index": "python", "content": "python的装饰器是用来装饰函数的。这是什么意思呢？假如我们有一个函数，这个函数的功能不能满足我们现有的需求，那么我们可以通过装饰器在这个函数执行前执行后做一些我们需要的操作(如果函数本身功能不满足，那就直接修改方法体了，不需要装饰器帮忙)。\n1. 简单装饰器\n装饰器的语法糖是使用@符号表示，装饰器本身也是一个函数，只不过参数是函数而已。\ndef decor_function(func):\n    def wrapper_function():\n        print(\"[%s] %s() called\" % (ctime(), func.__name__))\n        return func()\n    return wrapper_function\n\n@decor_function\ndef my_func():\n    print(\"Hello world\")\n\n...\nmy_func()\ndecor_function也就是我们的装饰器函数，它对原有的函数进行包装，返回一个包装过的函数wrapper_function。使用@修饰过的函数my_func，返回的函数实际上是装饰器返回的函数wrapper_function.\n[Mon Jul  9 17:07:40 2018] my_func() called\nHello world\n2. 修饰含有参数的函数\n函数定义可以使用任意的参数，那么装饰器函数如何处理呢？其实很简单，使用*args和**kargs就可以方便的调用了，只需要在装饰器函数的返回的函数中将参数传递给被修饰的函数就可以了。\ndef decor_function(func):\n    def wrapper_function(*args, **kargs):\n        print(\"[%s] %s() called\" % (ctime(), func.__name__))\n        return func(*args, **kargs)\n    return wrapper_function\n  \n@decor_function\ndef my_func_with_param(name):\n    print(\"Hello\", name)\n\nmy_func_with_param(\"Joe\")\n[Mon Jul  9 17:12:58 2018] my_func_with_param() called\nHello Joe\n3. 装饰函数带参数\n装饰器函数本身也是可以带参数的，使用参数，可以根据具体的场景添加不同的功能实现。\ndef decor_function_with_parm(level):\n    if level == \"info\":\n        logging.info(\"info message logged\")\n    elif level == \"error\":\n        logging.error(\"error message logged\")\n    else:\n        logging.debug(\"debug message logged\")\n\n    def wrapper_outter_func(func):\n        def wrapper_inner_func(*args, **kargs):\n            func(*args, **kargs)\n        return wrapper_inner_func\n\n    return wrapper_outter_func\n\n\n@decor_function_with_parm(level=\"info\")\ndef my_func2(name):\n    print(\"Hello,\", name)\n\n\nmy_func2(\"Joe\")\n带参数的装饰器函数写起来比较麻烦，因为需要处理的参数比较多，一般最外层的函数处理装饰器参数，接下来的函数处理func，最后一层函数用来处理被修饰的函数的参数。\n4. 多重修饰\n一个函数可以被多个装饰器修饰，like this\n@decor_function_with_parm(level=\"info\")\n@decor_function\ndef my_func():\n    print(\"Hello world\")\n\n执行的顺序是：\n\nf = decor_function_with_parm(level='info', decor_function(my_func()))\n5.使用类来处理\n类的__call__()方法可以把类当成函数来处理，所以类也可以用做装饰器\nclass Decor:\n    def __init__(self, func):\n        print(\"__init__ method called\")\n        self.func = func\n\n    def __call__(self, *args, **kargs):\n        print(\"__call__ method called\")\n        self.func(*args, **kargs)\n\n\n@Decor\ndef func(name):\n    print(\"func called\")\n    print(\"Hello,\",name)\n\n\nfunc(\"joe\")\n\n使用类做装饰器时，init函数中添加被修饰函数的引用，在call函数中处理参数。\n__init__ method called\n__call__ method called\nfunc called\nHello, joe\n6.保留函数的元信息\n被修饰之后的函数，它的元信息都消失，被替换的wrapper函数代替。python中提供了functools.wraps来保存函数的元信息。wraps本身也是个装饰器\ndef decor_function(func):\n    @wraps(func)\n    def wrapper_function(*args, **kargs):\n        print(\"[%s] %s() called\" % (ctime(), func.__name__))\n        print(func.__name__)\n        return func(*args, **kargs)\n    return wrapper_function\n   \n@decor_function\ndef my_func_with_param(name):\n    print(\"Hello\", name)\n\n[Mon Jul  9 18:16:11 2018] my_func_with_param() called\nmy_func_with_param\nHello joe\n参考：理解 Python 装饰器看这一篇就够了\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "0"}