{"title": "PyQt5, PushButton - pyqt5 ", "index": "python,pyqt", "content": "\n简介\n操作按钮通常用于让用户只需按下按钮就可以执行某些操作，比如下载或者删除文件。\n创建\nPushbutton = QPushButton(label)\n\n如果不需要label字符串可以省略，或者设置为在按钮顶部显示的文本。\n方法\n按钮上显示的标签可以在构建小部件后更改:\npushbutton.setText(label)\n\n默认情况下，该按钮显示为带有明确定义的边框，使其看起来从下面的窗口表面凸起,但是通过以下方式为按钮提供平整的外观:\npushbutton.setFlat(flat)\n\n当flat 设置为True时，该按钮不会出现凸起效果.要检查一个按钮是否已经设置为没有凸起效果，请使用以下方法:\npushbutton.isFlat() \n\n按钮小部件也可以用来显示下拉菜单，而不仅仅是可点击，该菜单使用以下方式关联:\nPushbutton.setMenu(menu)\n\nmenu参数应该设置为menu部件的名称。\n信号\n一个按钮的常用功能就是用户的点击，并执行相关的操作。这个方法的实现是通过按钮单击发出信号连接的相对的方法来完成的:\npushbutton.clicked.connect(button_clicked_function)\n\n例子\n# !/usr/bin/python3\n\nfrom PyQt5.QtWidgets import * \nimport sys\n\nclass Window(QWidget):\n    def __init__(self):\n        QWidget.__init__(self)\n        \n        layout = QGridLayout()\n        self.setLayout(layout)\n        self.button = QPushButton('Click me')\n        # self.button.setFlat(True)\n        self.button.clicked.connect(self.on_button_clicked)\n        layout.addWidget(self.button, 0, 0)\n        \n        \n    def on_button_clicked(self):\n    print(\"The button was pressed!\")\n    self.button.setText(\"wow\")\n\napp = QApplication(sys.argv)\n\nscreen = Window()\nscreen.show()\n\nsys.exit(app.exec_())\n\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}