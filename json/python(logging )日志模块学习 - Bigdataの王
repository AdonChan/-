{"title": "python(logging )日志模块学习 - Bigdataの王 ", "index": "python,logging", "content": "0.前置说明\n\n\n1.运行环境：Win7虚拟机、python2.7(anacoda版)\n2.本文大部分内容引用此参考文献：http://my.oschina.net/leejun2005/blog/126713\n\n\n1.基本元素说明：\n\n\nLogger：用于输出的日志的总对象\nHandlers：用来指定log的输出方式\nFormatters：设置日志信息的结构和内容格式，默认的时间格式为%Y-%m-%d %H:%M:%S\nFilter：过滤器，用来过滤的输出内容（如：只输出debug以上的内容）\n\nLogger\n\n常用函数\n\n\nLOG=logging.getLogger(”chat.gui”)\nLogger.setLevel(lel):指定最低的日志级别，低于lel的级别将被忽略。debug是最低的内置级别，critical为最高\nLogger.addFilter(filt)、Logger.removeFilter(filt):添加或删除指定的filter\nLogger.addHandler(hdlr)、Logger.removeHandler(hdlr)：增加或删除指定的handler\nLogger.debug()、Logger.info()、Logger.warning()、Logger.error()、Logger.critical()：可以设置的日志级别\nLogger.log(\"debug\",\"This is a bug\"):可以通过这个函数直接输出内容并选择对应的告警级别\n\n内置级别\n\n\n\n名称\n  对应数字级别\n\n\n\nNOTSET\n  0\n\n\nDEBUG\n  10\n\n\nINFO\n  20\n\n\nWARNING\n  30\n\n\nERROR\n  40\n\n\nCRITICAL\n  50\n\n\n\nHandlers\n\n1.常用函数\n\n\nHandler.setLevel(lel):指定被处理的信息级别，低于lel级别的信息将被忽略\nHandler.setFormatter()：给这个handler选择一个格式\nHandler.addFilter(filt)、Handler.removeFilter(filt)：新增或删除一个filter对象\n\n2.Handler种类\n\n\nlogging.StreamHandler\n使用这个Handler可以向类似与sys.stdout或者sys.stderr的任何文件对象(file object)输出信息。\n它的构造函数是：StreamHandler([strm])\n其中strm参数是一个文件对象。\n默认是sys.stderr\nlogging.FileHandler\n和StreamHandler类似，用于向一个文件输出日志信息。不过FileHandler会帮你打开这个文件。\n它的构造函数是：FileHandler(filename[,mode])\nfilename是文件名，必须指定一个文件名。\nmode是文件的打开方式。\n默认是’a'，即添加到文件末尾。\nlogging.handlers.RotatingFileHandler\n这个Handler类似于上面的FileHandler，但是它可以管理文件大小。当文件达到一定大小之后，它会自动将当前日志文件改名，然后创建一个新的同名日志文件继续输出。比如日志文件是chat.log。当chat.log达到指定的大小之后，RotatingFileHandler自动把 文件改名为chat.log.1。不过，如果chat.log.1已经存在，会先把chat.log.1重命名为chat.log.2。。。最后重新创建 chat.log，继续输出日志信息。\n它的构造函数是：RotatingFileHandler( filename[, mode[, maxBytes[, backupCount]]])\n其中filename和mode两个参数和FileHandler一样。\nmaxBytes用于指定日志文件的最大文件大小。如果maxBytes为0，意味着日志文件可以无限大，这时上面描述的重命名过程就不会发生。\nbackupCount用于指定保留的备份文件的个数。比如，如果指定为2，当上面描述的重命名过程发生时，原有的chat.log.2并不会被更名，而是被删除。\nlogging.handlers.TimedRotatingFileHandler\n这个Handler和RotatingFileHandler类似,不过,它没有通过判断文件大小来决定何时重新创建日志文件，而是间隔一定时间就 自动创建新的日志文件。重命名的过程与RotatingFileHandler类似，不过新的文件不是附加数字，而是当前时间。它的构造函数是：\nTimedRotatingFileHandler( filename [,when [,interval [,backupCount]]])\n其中filename参数和backupCount参数和RotatingFileHandler具有相同的意义。\ninterval是时间间隔。\nwhen参数是一个字符串。表示时间间隔的单位，不区分大小写。它有以下取值：\nS 秒\nM 分\nH 小时\nD 天\nW 每星期（interval==0时代表星期一）\nmidnight 每天凌晨\nlogging.handlers.SocketHandler\nlogging.handlers.DatagramHandler\n以上两个Handler类似，都是将日志信息发送到网络。不同的是前者使用TCP协议，后者使用UDP协议。它们的构造函数是：\nHandler(host, port)\n其中host是主机名，port是端口名\nlogging.handlers.SysLogHandler\nlogging.handlers.NTEventLogHandler\nlogging.handlers.SMTPHandler\nlogging.handlers.MemoryHandler\nlogging.handlers.HTTPHandler\n\nFormatters\n\n\n\n参数\n  含义\n\n\n\n%(name)s\n  Logger的名字\n\n\n%(levelno)s\n  数字形式的日志级别\n\n\n%(levelname)s\n  文本形式的日志级别\n\n\n%(pathname)s\n  调用日志输出函数的模块的完整路径名，可能没有\n\n\n%(filename)s\n  调用日志输出函数的模块的文件名\n\n\n%(module)s\n  调用日志输出函数的模块名\n\n\n%(funcName)s\n  调用日志输出函数的函数名\n\n\n%(lineno)d\n  调用日志输出函数的语句所在的代码行\n\n\n%(created)f\n  当前时间，用UNIX标准的表示时间的浮点数表示\n\n\n%(relativeCreated)d\n  输出日志信息时的，自Logger创建以 来的毫秒数\n\n\n%(asctime)s\n  字符串形式的当前时间。默认格式是 “2003-07-08 16:49:45,896”。逗号后面的是毫秒\n\n\n%(thread)d\n  线程ID。可能没有\n\n\n%(threadName)s\n  线程名。可能没有\n\n\n%(process)d\n  进程ID。可能没有\n\n\n%(message)s\n  用户输出的消息\n\n\n\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "13"}