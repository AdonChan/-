{"title": "python-学习笔记 内部函数 - helloword ", "index": "python", "content": "内部函数\nPython可以在函数内部再定义一个函数。这个定义的内部函数可以引用外部函数的参数和局部变量。事实上，内部函数还可以在其中再定义内部函数，实现内部函数多重嵌套。例如：\ndef fun_outer(x, y):\n    def fun_inner(z):\n        def fun_inner_inner(h):\n            return x+y+z+h\n        return fun_inner_inner(100)\n    return fun_inner(20)\n\nprint fun_outer(1, 2)\n返回函数本身\n函数本身也是一个对象。因此我们可以在函数内将一个内部函数返回。返回该函数的时候，携带了该内部函数引用的外部函数参数和局部变量。\ndef fun_outer(x, y):\n    def fun_inner(z):\n        def fun_inner_inner(h):\n            return x+y+z+h\n        return fun_inner_inner(100)\n    return fun_inner(20)\n\nf =  fun_outer(1, 2)\nprint f\n打印的结果为<function fun_inner at 0x10d951f50>. 此时fun_outer(1, 2)得到的是一个函数对象，该函数对象携带了两个参数值，即x=1与y=2。如何让它进一步计算呢，此时我们再执行f(3)就会返回结果6。\n每次返回的函数都是不同的对象\nf1 = fun_outer(1, 2)\nf2 = fun_outer(1, 2)\nprint f1\nprint f2\nprint的结果为：\n<function fun_inner at 0x102973f50>\n<function fun_inner at 0x102973f50>\n\n内部函数本身被返回时，所携带的参数或局部变量时return那一刻的值\n例如在函数内有循环，内部函数引用的循环变量。\ndef fun_outer(x, y):\n    funcs = []\n    for i in range(0,3):\n        def fun_inner():\n            return x+y+i\n        funcs.append(fun_inner)\n    return funcs\n\nfunc1, func2, func3 = fun_outer(1, 2)\nprint func1(),func2(),func3()\n打印结果竟然三个函数都是5.其实这时候func_outer函数在返回一个函数列表的时候，i已经循环到2了。因此func1、func2、func3携带的i参数都已经是2了。因此最终计算结果都是5. 如何实现在有循环变量的时候，返回的函数携带的变量都是循环当时的值呢？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变.\ndef fun_outer(x, y):\n    funcs = []\n    for i in range(0,3):\n        def fun_inner(c):\n            def fun_inner_inner():\n                return x+y+c\n            return fun_inner_inner\n        funcs.append(fun_inner(i))\n    return funcs\n\nfunc1, func2, func3 = fun_outer(1, 2)\nprint func1(),func2(),func3()\n打印结果：3 4 5\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}