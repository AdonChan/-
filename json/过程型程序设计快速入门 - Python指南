{"title": "过程型程序设计快速入门 - Python指南 ", "index": "python,程序设计,程序,入门-编程语言", "content": "大家好，从本文开始将逐渐更新Python教程指南系列，为什么叫指南呢？因为本系列是参考《Python3程序设计指南》，也是作者的学习笔记，希望与读者共同学习。\n.py文件中的每个估计都是顺序执行的，从第一行开始，逐行执行的。    \n\nPython的8个关键要素\n\n1、数据类型\n\n\nint整数(正整数或负整数)\n\nPython所能表示的整数大小只受限于机器内存\n使用int()可以将字符串转换为整数，允许字符串头尾带有空格，例如：int(\"68\")\n\n\n\nstr字符串(Unicode字符序列)\n\n使用方括号([])来存取字符串序列中的某一项\n使用str()几乎可以将任何数据项转换为字符串\n\n\n\n2、对象引用\n\n定义：存储某种数据类型的变量\n语法：objectReference=value\n不需要预先的声明语句，也不需要指定数据类型\n在Python中，\"=\"的作用是将对象引用与内存中的某对象进行绑定，如果对象引用已经存在，就简单的进行绑定，以便引用”=“操作符右面的对象；如果对象引用尚未存在，就由”=“操作符创建对象引用。\n限制：不能与任何Python关键字相同\nPython使用 “动态类型” 机制，也就是说，在任何时刻，只要需要，某个对象引用都可以重新引用一个不同的对象（可以是不同的数据类型）。\n\ntemp = 123\nprint(temp, type(temp))\ntemp = 'hello'\nprint(temp, type(temp))\n\noutput:\n123 <class 'int'>\nhello <class 'str'>\n​\n3、组合数据类型\n\n\n元组和列表可以用于存储任意数量、任意类型的数据项。元组是固定的，创建之后就不能改变；列表是可变的，在需要的时候，可以插入或者移除数据项。\n实质上，列表与元组并不真正存储数据项，而是存放对象引用，创建列表与元组时（以及在列表中插入数据项时），实际上是使用其给定的对象引用的副本，在字面意义项（比如整数或字符串）的情况下，会在内存中创建适当数据类型的对象，而存放在列表或元组中的才是对象引用。\n点（存取属性）操作符用于存取某对象的属性\n\n4、逻辑操作符\n4.1 身份操作符：is。\n\n并不必须对进行比较的对象本身进行检查，is操作符只需要对对象所在的内存地址进行比较——同样的地址存储的是同样的对象。\na = [1, 'abc']\nb = [1, 'abc']\nprint(a is b)\na = (1, 'abc')\nb = (1, 'abc')\nprint(a is b)\na = b\nprint(a is b)\n\noutput:\nFalse\nFalse\nTrue\n​\n4.2 比较操作符：==、!=、>、>=、<、<=\n\n与身份运算符不同，比较运算符进行的是值比较，即比较两个引用对象所指向的值。\na = [1, 'abc']\nb = [1, 'abc']\nprint(a is b)\na = (1, 'abc')\nb = (1, 'abc')\nprint(a is b)\na = b\nprint(a is b)\n\noutput:\nTrue\nTrue\nTrue\n结链比较\na = 9\nprint(0 <= a <= 10)\n\noutput:\nTrue\n​\n4.3 成员操作符：in。\n\nin来测试成员关系，用not in来测试非成员关系。\n# in运算符\na = (3, 45, 'hello', {'name': 'lisi'})\nprint(45 in a)\nstring = 'zhangsan|wanger'\nprint('|' in string)\n\noutput:\nTrue\nTrue\n4.4 逻辑运算符：and、or与not。\n\n\nand与or都使用short-circuit逻辑，并返回决定结果的操作数——而不是返回布尔值（除非实际上就是布尔操作数）。\nnot返回布尔型结果\n\n5、控制流语句\n在Python中，一块代码，也就是说一条或者多条语句组成的序列，称为suit。\n5.1 if语句（if...elif...else...）\n语法：\nif boolean_expression1:\n    suite1\nelif boolean_expression2:\n    suite2\nelse:\n    suite3\n5.2 while语句\nwhile语句用于0次或多次执行某个suite，循环执行的次数取决于while循环中布尔表达式的状态，其语法为：\nwhile boolean_expression:\n    suite\n5.3 for...in语句\nfor循环语句重用了关键字in，其语法为：\nfor variable in iterable:\n    suite\n5.4 基本的异常处理\nPython的很多函数与方法都会产生异常，并将其作为发生错误或重要事件的标志。其语法为：\ntry:\n    try_suite\nexcept exception1 as variable1:\n    exception_suite1\n...\nexcept exceptionN as variableN:\n    excetpion_suiteN\n其中as variable部分是可选的。\n6、算术操作符\n\nint数据类型是固定的，一旦赋值就不能改变\n除法操作符(/)产生一个浮点值\n剥离操作符(//)产生一个整数值\n\n增强赋值操作符\n\n不可变数据类型：a+=8：a+8之后产生新的int对象，并与a重新绑定\n可变数据类型：使用+=后，原始值改变，不会重新绑定\na+=b与a=a+b区别：前者只查询一次a的值，有更快的可能性\n\n字符串列表+=和append的区别\n\nli = ['aaa','bbb']  li += 'ccc' => li = ['aaa','bbb','c','c','c']\nli = ['aaa','bbb']  li.append( 'ccc') => li = ['aaa','bbb','ccc']\n\n\n\n\n\n7、输入/输出\n\n内置input()函数，用来接收用户的输入，输入之后按Enter键结束输入\n内置print()函数可以输出所有python数据类型\n\n8、函数的创建与调用\n创建函数语法：\ndef functionName(arguments)： \n    suite\n\narguments可选，如果为多个参数，用逗号隔开\n每个函数有一个返回值，默认为None，可以使用return value来制定返回值，可以是一个值，也可以是一组值\n执行def时会创建一个函数对象，同时创建一个带有指定名的对象引用\n\n实例\n为了熟悉以上关键要素，我们用一个实例来练习一下：\n创建一个生成随机整数组成的网格程序，用户可以规定需要多少行、多少列，以及整数所在的区域。\n首先引入random模块，该模块用于生成随机数：\nimport random\n构建获取用户输入函数该函数需要3个参数：msg为提示信息，minimum为最小值，default为默认值。该函数的返回值有两种情况：default（用户没有输入直接按Enter键），或者一个有效的整数。\n\ndef get_int(msg, minimum, default):\n    while True:\n        try:\n            line = input(msg)\n            # 如果输入值为空并且default不为None\n            if not line and default is not None:\n                return defalut\n            # 将输入转为整形\n            i = int(line)\n            # 如果输入值小于最小值，提示用户\n            if i < minimum:\n                print(\"must be >=\", minimum)\n            else:\n                return i\n        # 异常处理\n        except ValueError as e:\n            print(e)\n让用户输入相关的值\n# 用户输入行数\nrows = get_int('rows:', 1, None)\n# 用户输入列数\ncolumns = get_int('columns', 1, None)\n# 用户输入最小值\nminimum = get_int('minimum(or Enter for 0):', -10000, 0)\n\ndefault = 1000\n# 如果最小值大于default，default设置为最小值的2倍\nif default < minimum:\n    default = 2 * minimum\n\n# 用户输入最大值\nmaximum = get_int('maximum (or Enter for' + str(default) + ')', minimum, default)\n根据用户输入输出随机值：\nrow = 0\nwhile row < rows:\n    line = ''\n    column = 0\n    while column < columns:\n        # 生成一个大于minimum,小于maximum的随机整数\n        i = random.randint(minimum, maximum)\n        s = str(i)\n        # 让每个数占10个字符，为了输出整齐\n        while len(s) < 10:\n            s = ' ' + s\n        line += s\n        column += 1\n    print(line)\n    row += 1\n以下为输出信息：\nrows:5\ncolumns7\nminimum(or Enter for 0):-1000\nmaximum (or Enter for1000)1000\n      -871      -205       426       820       986       369       238\n      -389       485       388      -907       243       346      -912\n      -885       528        50      -572       744       519      -128\n       785      -747      -565      -390       522      -357       933\n      -144       947      -949      -409       105       954       708\n注：本文知识介绍Python的8个关键要素，但是并没有完全介绍，比如数据类型不只包括整形和字符串，后面的文章中还会详细介绍。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "0"}