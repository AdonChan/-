{"title": "九宫格键盘输入 - leetcode ", "index": "python,leetcode,算法", "content": "九宫格键盘输入\nLetter Combinations of a Phone Number\n\n给定一个数字字符串，返回数字可能代表的所有可能的字母组合。\n数字到字母的映射（就像九宫格电话按钮一样）如下图。\n\n\n\nGiven a digit string, return all possible letter combinations that the number could represent.\nA mapping of digit to letters (just like on the telephone buttons) is given below.\n\nNote:Although the above answer is in lexicographical order, your answer could be in any order you want.\nexample 1\nInput:Digit string \"23\"\nOutput: [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"].\n思路\n\n以23为例，2代表abc，只需要将其转换成lists = [a,b,c]，然后处理3，3为def，将这三个字符分别加到s的每一个元素中，得到[\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"]。重复此过程即可。\n上述思路可以用循环完成，同时python提供的reduce函数和生成式特性能够精炼地表述，下面给出两种代码。\n\n代码\nclass Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        from functools import reduce #python3.x\n        if not digits:\n            return []\n        nums = '0 1 abc def ghi jkl mno pqrs tuv wxyz'.split(' ')\n        return reduce(lambda last, d: [x + y for x in last for y in nums[int(d)]], digits, [''])  # 第三个参数是initial\n\n\n\n    \n\n\n    #使用循环完成\n    def letterCombinations_old(self, digits):\n        if not digits:\n            return []\n        nums = '0 1 abc def ghi jkl mno pqrs tuv wxyz'.split(' ')\n        ret = [_ for _ in nums[int(digits[0])]]\n        digits = digits[1:]\n        while digits:\n            ret = [x + y for x in ret for y in nums[int(digits[0])]]\n            digits = digits[1:]\n        return ret\n本题以及其它leetcode题目代码github地址: github地址\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}