{"title": "Ubuntu+Django+Nginx+uWSGI+Mysql搭建Python Web服务器 - 大龄青年的学习之路 ", "index": "django,mysql,uwsgi,python,ubuntu", "content": "Ubuntu+Django+Nginx+uWSGI+Mysql搭建Python Web服务器\n前不久为了部署Django项目，在百度上到处找教程，找到的教程因为这样那样的原因，总是失败，可能是因为作者水平比较高吧，有些细节的东西估计没写出来，造成我这种初学者想照着做都做不成。百度不行就用Google吧，中文不行就找英文的，最后，给我误打误撞的部署成功了。为了加深印象，我用虚拟机再重新部署一次。\n准备工作\n我使用的系统是Ubuntu14.04.5 LTS(Trusty Tahr) server i386版，官网下载地址：http://releases.ubuntu.com/14.04.4/ubuntu-14.04.5-server-i386.iso\n安装的时候全部选择英文，记得以前选择中文的时候安装时出了问题，服务器组件一个不选，Ubuntu安装做的很贴心，基本上是一路回车，就不详细说明了。装好以后，首先要更新apt-get，貌似我的ubuntu镜像是在国内站下载的，所以源是国内的地址，所以就不用更换源了。\n1. 更新apt-get\nsudo apt-get update\nsudo apt-get upgrade\n2. 安装SSH\nsudo apt-get install ssh\n装好以后，用ifconfig查看一下IP地址\n可以看到IP地址是192.168.0.154，下面我们就使用XSHELL连接192.168.0.154进行操作了。\n3. 安装Git\n这一步不是必须的，因为我的测试项目是放在git.oschina.com上的，安装git获取项目代码就很方便了\nsudo apt-get install git\n安装配置MySQL\n1. 安装\nsudo apt-get install mysql-server\n安装过程中会提示让你设置root密码\n2. 配置\n2.1 数据库初始化：\nsudo mysql_install_db\n2.2 运行数据库Mysql安全配置向导\nsudo mysql_secure_installation\n\n输入root密码\n是否修改root密码，因为前面已经设置过了，选n\n是否移除匿名用户,肯定是要选y的\n是否允许远程登陆，如果选n的话，只能在本机访问数据库，建议选y\n是否移除test数据库，建议选是\n重新加载权限表，选y\nAll done!\n安装配置Python环境\n1.安装python-dev包\nsudo apt-get install python-dev\n2.安装pip\nsudo apt-get install python-pip\n3.更换pip源因为国内使用默认的pip源速度很慢，所以需要更换,在用户根目录下新建.pip目录，在该目录下新建pip.conf文件\nsudo mkdir ~/.pip\nsudo vi ~/.pip/pip.conf\n然后在文件里写上：\n[global]\nindex-url = http://mirrors.aliyun.com/pypi/simple/\n\n[install]\ntrusted-host=mirrors.aliyun.com\n\n4.安装配置VirtualEnv和VirtualEnvWrapperVirtualEnv可以管理多个开发环境，VirtualEnvWrapper使得VirtualEnv变得更好用\nsudo pip install virtualenv virtualenvwrapper\n\n安装完成以后，需要在环境变量中加入一些配置：下面这句话是使用python3才需要执行的，python2不需要\necho \"export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3\" >> ~/.bashrc\n\n不管python是什么版本，都要执行下面两句：\necho \"export WORKON_HOME=~/Env\" >> ~/.bashrc\necho \"source /usr/local/bin/virtualenvwrapper.sh\" >> ~/.bashrc\n\n可以重启系统激活，也可以运行：\nsource ~/.bashrc\n\n然后就可以开始建立一个虚拟环境：\nmkvirtualenv first\n\n你会发现，提示符变成(first)user@hostname:~$,表示现在已经进入first的虚拟环境，在此环境下进行的pip等操作，只会在当前环境下生效,当前虚拟环境在/home/siva/Env/first目录下\nDjango项目配置\n1.安装django\n我使用选择版本来安装：\npip install django==1.10.1\n\n2.下载或拷贝项目\n安装完成以后，使用git把项目clone下来,此处填写你自己的地址：\ngit clone https://git.oschina.net/xxx/Siva_First.git\n此例子的项目名称是Siva_First，路径是在/home/siva/下\n3.配置django\n用Mysql建好项目的数据库，然后进入Siva_First目录，用django应用数据模型：\npython manage.py makemigrations\npython manage.py migrate\n\n建立后台超级用户：\n\npython manage.py createsuperuser\n\n静态文件安置：\npython manage.py collectstatic\n\n4.测试项目\n运行开发服务器测试一下是否可以正常运行：\npython manage.py runserver 0.0.0.0:8000\n\n这时，用浏览器打开http://192.168.0.154:8000/可以看到网站\n5.退出虚拟环境\n因为当前是在first虚拟环境下，为了下一步的安装，必须退出当前的虚拟环境：\ndeactivate\n\nuWSGI安装和配置\n1.安装uWSGIpip下安装很简单：\nsudo pip install uwsgi\n我们可以测试一下uwsgi是否安装成功\nuwsgi --http :8000 --home /home/siva/Env/first --chdir /home/siva/Siva_First -w Siva_First.wsgi\n上面的命令是使用8000端口，虚拟环境在/home/siva/Env/first，项目在/home/siva/Siva_First下\n2.配置uWSGI\n使用上面的命令行来部署网站肯定是不行的，我们需要使用“Emperor mode”，建立一个目录来放配置文件：\nsudo mkdir -p /etc/uwsgi/sites\ncd /etc/uwsgi/sites\n\n以项目名称来命名这个配置文件：\nsudo vi Siva_First.ini\n\n内容如下：\n[uwsgi]\nproject = Siva_First\nbase = /home/siva\n\nchdir = %(base)/%(project)\nhome = %(base)/Env/%(project)\nmodule = %(project).wsgi:application\n\nmaster = true\nprocesses = 5\n\nsocket = %(base)/%(project)/%(project).sock\nchmod-socket = 664\nvacuum = true\n\nproject是项目名称，base是项目所在位置\n现在，配置文件建好了，但是uwsgi还不能自动运行我们需要在/etc/init目录中建一个启动脚本：\n\nsudo vi /etc/init/uwsgi.conf\n\n内容如下：\ndescription \"uWSGI application server in Emperor mode\"\n\nstart on runlevel [2345]\nstop on runlevel [!2345]\n\nsetuid siva\nsetgid www-data\n\nexec /usr/local/bin/uwsgi --emperor /etc/uwsgi/sites\n\n这一步完成以后，uwsgi还是不能正常启动，是因为www-data用户组还没有创建，等我们装完nginx以后就可以了。\n反向代理：Nginx的安装和配置\n1.安装\nsudo apt-get install nginx\n\n2.创建配置文件\nsudo vi /etc/nginx/sites-available/Siva_First\n\n内容如下：\nserver {\n    listen 80;\n    server_name 192.168.0.154;\n\n    location = /favicon.ico { access_log off; log_not_found off; }\n    location /static/ {\n        root /home/siva/Siva_First;\n    }\n\n    location / {\n        include         uwsgi_params;\n        uwsgi_pass      unix:/home/siva/Siva_First/Siva_First.sock;\n    }\n}\n然后把这个配置文件链接到sites-enabled目录下\nsudo ln -s /etc/nginx/sites-available/Siva_First /etc/nginx/sites-enabled/\n\n检查一下配置文件的语法是否有问题\nsudo service nginx configtest\n\n如果没问题，那么重启一下nginx和uwsgi的服务就可以访问了\nsudo service nginx restart\nsudo service uwsgi restart\n\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "24"}