{"title": "django搭建一个小型的服务器运维网站-查看和修改服务器配置与数据库的路由 - 个人文章 ", "index": "django,python,html,javascript", "content": "目录\n\n\n项目介绍和源码；\n\n拿来即用的bootstrap模板；\n\n服务器SSH服务配置与python中paramiko的使用；\n\n用户登陆与session;\n\n最简单的实践之修改服务器时间；\n查看和修改服务器配置与数据库的路由；\n\n基于websocket的实时日志实现；\n\n查看服务器中的日志与前端的datatable的利用；\n\n重启服务器进程。\n\n前言\n  运维过程中，常常希望修改一些配置文件，文章用网站的功能替代登陆服务器修改文件，并不是十全十美，总得来说，实现了功能。文章主要分为两个部分，分别是数据库的路由和服务器配置的处理。这个功能页面如图1所示。\n\n数据库的路由\n  一个django项目通常会有多个app，一般每个app的功能差异较大，造成models.py差异也较大，可以为每一个app设置一个单独的存储数据库。这个项目中server就有一个单独的数据库存储它有的一些表（图2 蓝框），其他的功能默认存储在mysql这个默认的数据库中（图2 红框）。要使用该功能需要修改项目的配置(settings.py)文件。\n\n修改settings\n# Database 配置\nDATABASE_ROUTERS = ['WebTool.database_router.DatabaseAppsRouter']\n\nDATABASE_APPS_MAPPING = {\n    # example:\n    # 'app_name':'database_name',\n    # 为server单独设置一个名字叫做server的数据库\n    'server': 'server',\n}\n\nDATABASES = {\n    # 默认的数据库，未指定存放位置的表会建在这个数据库里面，也包含一些django自带的表\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'mysql',\n        'USER': 'root',\n        'PASSWORD': 'root',\n        'HOST': '127.0.0.1',\n        'PORT': '',\n    },\n    # server的数据库\n    'server': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'server',\n        'USER': 'root',\n        'PASSWORD': 'root',\n        'HOST': '127.0.0.1',\n        'PORT': '',\n    },\n}\n添加database_router.py文件\n  在WebTool/WebTool下添加一个py文件用来实现数据库路由功能，文件命名为database_router.py,如图3红框位置。\n\nfrom django.conf import settings\n\nDATABASE_MAPPING = settings.DATABASE_APPS_MAPPING\n\n\nclass DatabaseAppsRouter(object):\n    \"\"\"\n    A router to control all database operations on models for different\n    databases.\n\n    In case an app is not set in settings.DATABASE_APPS_MAPPING, the router\n    will fallback to the `default` database.\n\n    Settings example:\n\n    DATABASE_APPS_MAPPING = {'app1': 'db1', 'app2': 'db2'}\n    \"\"\"\n\n    def db_for_read(self, model, **hints):\n        \"\"\"\"Point all read operations to the specific database.\"\"\"\n        if model._meta.app_label in DATABASE_MAPPING:\n            return DATABASE_MAPPING[model._meta.app_label]\n        return None\n\n    def db_for_write(self, model, **hints):\n        \"\"\"Point all write operations to the specific database.\"\"\"\n        if model._meta.app_label in DATABASE_MAPPING:\n            return DATABASE_MAPPING[model._meta.app_label]\n        return None\n\n    def allow_relation(self, obj1, obj2, **hints):\n        \"\"\"Allow any relation between apps that use the same database.\"\"\"\n        db_obj1 = DATABASE_MAPPING.get(obj1._meta.app_label)\n        db_obj2 = DATABASE_MAPPING.get(obj2._meta.app_label)\n        if db_obj1 and db_obj2:\n            if db_obj1 == db_obj2:\n                return True\n            else:\n                return False\n        return None\n\n    def allow_syncdb(self, db, model):\n        \"\"\"Make sure that apps only appear in the related database.\"\"\"\n\n        if db in DATABASE_MAPPING.values():\n            return DATABASE_MAPPING.get(model._meta.app_label) == db\n        elif model._meta.app_label in DATABASE_MAPPING:\n            return False\n        return None\n\n    def allow_migrate(self, db, app_label, model=None, **hints):\n        \"\"\"\n        Make sure the auth app only appears in the 'auth_db'\n        database.\n        \"\"\"\n        if db in DATABASE_MAPPING.values():\n            return DATABASE_MAPPING.get(app_label) == db\n        elif app_label in DATABASE_MAPPING:\n            return False\n        return None\n在model函数中建立映射\n  前篇文章最简单的实践之修改服务器时间中曾经设置过两个model函数分别是taskinbackground和modifytime，app_label就是用来区分该函数用来对应哪个数据库的，app_label = \"server\"是把表建立在server这个数据库里面。\nclass taskinbackground(models.Model):\n    taskname = models.CharField(max_length=50)\n    taskor = models.CharField(max_length=100)\n\n    class Meta:\n        db_table = 'task'\n        app_label = \"server\"\n\n\nclass modifytime(models.Model):\n    modifyer = models.CharField(max_length=100)\n    modifytime = models.CharField(max_length=200, default=\"\")\n    modifyservertime = models.CharField(max_length=200, default=\"\")\n\n    class Meta:\n        db_table = 'modifytime'\n        app_label = \"server\"\n初始化数据库\n  执行python manage.py makemigrations、python manage.py migrate、python manage.py migrate --database=server三条指令分别用来更新数据库、刷新默认的数据库和server的数据库。这样，一个数据库的路由就可以了，现在可以不同app对应不同的数据库了。\n服务器配置\n  这个页面功能可以用下图4概括，其中的函数来自于服务器SSH服务配置与python中paramiko的使用中。实现这个些功能中会遇到一些小细节的处理。\n\n  这里直接给出页面的html代码：\n{% extends \"./base.html\" %}\n\n{% block othercss %}{% endblock %}\n{% block title %}{{ title }}{% endblock %}\n{% block log %}{{ title }}{% endblock %}\n{% block username %}{{ username }}{% endblock %}\n\n\n{% block mainbody %}\n<section class=\"wrapper site-min-height\">\n    <h3><i class=\"fa fa-angle-right\"></i> 服务器配置 <i class=\"fa fa-cog\"></i></h3>\n    <div class=\"row mt\">\n        <div class=\"form-panel\">\n            <div class=\"col-lg-12 row mt\">\n                <div class=\"col-sm-6\">\n                    <h4 class=\"mb\" style=\"float:left;dispaly:block;\">服务器配置</h4>\n                    <button type=\"button\" class=\"btn btn-theme02\" id='getconfig' style=\"float:right;dispaly:block;\">更新服务器配置</button>\n                </div>\n                <div class=\"col-sm-6\">\n                    <div class=\"col-sm-12\">\n                        <!--onkeyup=\"searchintable()\" 当每次输入键盘弹起后就调用函数-->\n                        <input type=\"text\" class=\"form-control\" onkeyup=\"searchintable()\" id=\"search\" placeholder=\"配置搜索\">\n                    </div>\n                </div>\n                <div class=\"col-sm-12\">\n                    <!-- 获取配置的时候出现的加载图标 -->\n                    <div class=\"progress progress-striped active\" style=\"display:none\" id=\"loading\">\n                        <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"100\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 100%\"></div>\n                    </div>\n                </div>\n            </div>\n            <table class=\"table table-striped table-advance table-hover\" id=\"configtable\">\n                  <thead>\n                  <tr>\n                      <th style=\"width:15%;\"><i class=\"fa fa-cog\"></i> 配置文件</th>\n                      <th style=\"width:55%;\" class=\"hidden-phone\">&nbsp;&nbsp;&nbsp;&nbsp;<i class=\"fa fa-question-circle\"></i> 配置描述</th>\n                      <th><i class=\" fa fa-edit\"></i> 操作</th>\n                  </tr>\n                  </thead>\n                  <tbody>\n                  {% for index,name,detail in name_list %}\n                  <tr>\n                    <td style=\"vertical-align:middle;\">{{ name }}</td>\n                    {% if detail == '' %}\n                    <td tyle=\"vertical-align:middle;\">\n                        <div class=\"col-sm-8\">\n                            <div class=\"input-group\">\n                                <input type=\"text\" class=\"form-control\" placeholder='此处可以添加配置描述'>\n                                <span class=\"input-group-btn\">\n                                    <button class=\"btn btn-default\" onclick=\"write_detail(this, &quot;{{name}}&quot;)\" type=\"button\">添加</button>\n                                </span>\n                            </div>\n                        </div>\n                    </td>\n                    {% else %}\n                    <td style=\"vertical-align:middle;\">\n                        <div class=\"col-sm-8\">\n                            <div class=\"input-group\" style=\"display:none;\">\n                                <input type=\"text\" class=\"form-control\" placeholder='此处可以添加配置描述'>\n                                <span class=\"input-group-btn\">\n                                    <button class=\"btn btn-default\" onclick=\"write_detail(this, &quot;{{name}}&quot;)\" type=\"button\">添加</button>\n                                </span>\n                            </div>\n                            <div>\n                            {{ detail }}&nbsp;&nbsp;<button onclick=\"modify_detail(this)\" style=\"border:0;background:transparent;\"><i class=\"fa fa-pencil\"></i></button>\n                            </div>\n                        </div>\n                    </td>\n                    {% endif %}\n                    <!-- 每一行配置的三个操作按钮 -->\n                    <td style=\"vertical-align:middle;\">\n                        <button class=\"btn btn-success btn-sm\" data-toggle=\"modal\" data-target=\"#readModal\" onclick=\"readbutton(&quot;{{name}}&quot;)\"><i class=\"fa fa-eye\"></i></button>\n                        <button class=\"btn btn-primary btn-sm\" data-toggle=\"modal\" data-target=\"#writeModal\" onclick=\"writebutton(&quot;{{name}}&quot;)\"><i class=\"fa fa-pencil\"></i></button>\n                        <button class=\"btn btn-danger btn-sm\" onclick=\"deletebutton(&quot;{{name}}&quot;)\"><i class=\"fa fa-trash-o\"></i></button>\n                    </td>\n                  </tr>\n                  {% endfor %}\n                  </tbody>\n              </table>\n        </div>\n    </div>\n</section>\n<!-- 查看配置模态框 -->\n<div class=\"modal fade\" id=\"readModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\n    <div class=\"modal-dialog\">\n        <input type=\"hidden\" name='modal' value=''>\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">\n                    &times;\n                </button>\n                <h4 class=\"modal-title\" id=\"myModalLabelread\">\n                    模态框（Modal）标题\n                </h4>\n            </div>\n            <!--style=\"cursor:default\" 设置只读状态-->\n            <textarea type=\"text\" class=\"form-control modal-body-read\" rows=\"35\" placeholder=\"\" readonly=\"readonly\" style=\"cursor:default\">    \n            在这里添加一些文本    \n            </textarea>\n            <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-theme02\" data-dismiss=\"modal\">关闭\n                </button>\n            </div>\n        </div>\n    </div>\n</div>\n<!-- 修改配置模态框 -->\n<div class=\"modal fade\" id=\"writeModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\n    <div class=\"modal-dialog\">\n        <input type=\"hidden\" id='configname' name='modal' value=''>\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <button type=\"button\" class=\"close\" id=\"closebtn1\" data-dismiss=\"modal\" aria-hidden=\"true\">\n                    &times;\n                </button>\n                <h4 class=\"modal-title\" id=\"myModalLabelwrite\">\n                    模态框（Modal）标题\n                </h4>\n            </div>\n            <div class=\"progress progress-striped active\" style=\"display:none;\" id=\"writeloading\">\n                <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"100\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 100%\"></div>\n            </div>\n            <textarea type=\"text\" class=\"form-control modal-body-write\" rows=\"35\" placeholder=\"\"></textarea>\n            <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-theme03\" id=\"putconfigbtn\" onclick=\"putconfig()\">提交</button>\n                <button type=\"button\" class=\"btn btn-theme02\" id=\"closebtn2\" data-dismiss=\"modal\">关闭</button>\n            </div>\n        </div>\n    </div>\n</div>\n{% endblock %}\n  页面使用到的javascript函数：\n{% block scripts %}\n<script>\n// 提交修改后的配置\nfunction putconfig(){\n    swal({  \n        title: '提交新的配置?',\n        type: 'warning',\n        confirmButtonColor: '#DD6B55',\n        confirmButtonText:\"是的\",  \n        cancelButtonText:\"不用\",\n        showLoaderOnConfirm: true, //加载按钮是否可见  \n        showCancelButton: true,\n        preConfirm: function() {  \n            return new Promise(function(resolve) {  \n                setTimeout(function(){\n                    $(\"#putconfigbtn\").hide();\n                    $(\"#closebtn1\").hide();\n                    $(\"#closebtn2\").hide();\n                    $(\"#writeloading\").show();\n                    resolve();  \n                }, 3000);  \n            });  \n        },  \n        allowOutsideClick: false, //弹框外是否可点\n        }).then(function(res){  \n            if(res) {  \n                $.ajax({\n                    url:\"writeconfig\",\n                    type:'POST',\n                    data:{'name':$(\"#configname\").val(), 'content':$(\".modal-body-write\").val()},\n                    success: function(arg){\n                        ret = eval(arg);\n                        if(ret.status){\n                            swal({  \n                                type: 'success',  \n                                title: '设置修改成功！',  \n                                confirmButtonText: '确定',  \n                                confirmButtonColor: '#4cd964',\n                                allowOutsideClick: false,\n                            }).then(function(){\n                                    window.location.reload();\n                                });  \n                        }else{\n                            if(ret.error == '1'){\n                                swal({  \n                                    type: 'error',  \n                                    title: 'json格式错误，请重新修改！',  \n                                    confirmButtonText: '确定',  \n                                    confirmButtonColor: '#4cd964',\n                                    allowOutsideClick: false,\n                                }).then(function(){\n                                    window.location.reload();\n                                });  \n                            }else{\n                                swal({  \n                                        type: 'error',  \n                                        title: '设置修改失败！',  \n                                        confirmButtonText: '确定',  \n                                        confirmButtonColor: '#4cd964',\n                                        allowOutsideClick: false,\n                                    }).then(function(){\n                                        window.location.reload();\n                                    });  \n                            }\n                        }\n                    }});   \n            }  \n        });  \n}\n// 只读按钮\nfunction readbutton(configname){\n    $(\"#myModalLabelread\").html(\"<b>查看\"+configname+\"配置</b>\");\n    $.ajax({\n            url:\"readconfig\",\n            type:'POST',\n            data:{'configname':configname},\n            success: function(arg){\n                ret = eval(arg);\n                content = ret.content;\n                var json = JSON.parse(content);\n                $(\".modal-body-read\").html(JSON.stringify(json,null,4));\n            }\n    });\n}\n// 修改按钮\nfunction writebutton(configname){\n    $(\"#myModalLabelwrite\").html(\"<b>修改\"+configname+\"配置</b>\");\n    // 模态框中添加一个属性用来记录配置的名字，方便提交配置取配置的名字\n    $(\"#configname\").val(configname);\n    $.ajax({\n        url:\"readconfig\",\n        type:'POST',\n        data:{'configname':configname},\n        success: function(arg){\n            ret = eval(arg);\n            content = ret.content;\n            var json = JSON.parse(content);\n            // JSON.stringify(json,null,4)函数可以将字符串格式化成json格式\n            $(\".modal-body-write\").html(JSON.stringify(json,null,4));\n        }\n    });\n}\n// 删除配置\nfunction deletebutton(configname){\n    swal({  \n        title: '删除'+configname+'这个配置？',\n        type: 'warning',\n        confirmButtonColor: '#DD6B55',\n        confirmButtonText:\"是的\",  \n        cancelButtonText:\"不用\",\n        showLoaderOnConfirm: true, //加载按钮是否可见  \n        showCancelButton: true,\n        preConfirm: function() {  \n            return new Promise(function(resolve) {  \n                setTimeout(function(){\n                    resolve();  \n                }, 6000);  \n            });  \n        },  \n        allowOutsideClick: false, //弹框外是否可点\n        }).then(function(res){  \n            if(res) {  \n                $.ajax({\n                    url:\"deleteconfig\",\n                    type:'POST',\n                    data:{'name':configname },\n                    success: function(arg){\n                        ret = eval(arg);\n                        if(ret.status){\n                            if(ret.status){\n                                swal({  \n                                    type: 'success',  \n                                    title: '删除完成！',  \n                                    confirmButtonText: '确定',  \n                                    confirmButtonColor: '#4cd964'  \n                                    }).then(function(){\n                                        window.location.reload();\n                                    });  \n                            }else{\n                                swal({  \n                                    type: 'error',  \n                                    title: '删除失败！',  \n                                    confirmButtonText: '确定',  \n                                    confirmButtonColor: '#4cd964'  \n                                    }).then(function(){\n                                        window.location.reload();\n                                    });  \n                            }\n                        }\n                    }});   \n                }  \n        });  \n}\n// 为配置添加描述\nfunction write_detail(obj, name){\n    var father_span = obj.parentNode;\n    var input = $(father_span).prev(); \n    var detail = input.val();\n    $.ajax({\n        url:\"configdetail\",\n        type:'POST',\n        data:{'name':name, 'detail':detail},\n        success: function(arg){\n            window.location.reload();\n    }});\n}\nfunction modify_detail(obj){\n    $(obj).parent().prev().show();\n    $(obj).parent().hide();\n}\n</script>\n<script>\n// 查询函数\nfunction searchintable(){\n    input = document.getElementById(\"search\");\n    filter = input.value.toUpperCase();\n    table = document.getElementById(\"configtable\");\n    tr = table.getElementsByTagName(\"tr\");\n    for(i = 0; i < tr.length; i++){\n    td = tr[i].getElementsByTagName(\"td\")[0];\n    if (td){\n      if (td.innerHTML.toUpperCase().indexOf(filter) > -1){\n        tr[i].style.display = \"\";\n      }else{\n        tr[i].style.display = \"none\";\n      }\n    } \n  }\n}\n</script>\n<script>\n$(document).ready(function(){\n    //从服务器更新配置到数据库\n    $(\"#getconfig\").click(function(){\n    swal({\n        title: '您确定要重新获取游戏配置吗?',\n        type: 'warning',\n        confirmButtonColor: '#DD6B55',\n        confirmButtonText:\"是的！\",  \n        cancelButtonText:\"让我再考虑一下…\",\n        showLoaderOnConfirm: true, //加载按钮是否可见  \n        showCancelButton: true,\n        preConfirm: function() {  \n            return new Promise(function(resolve){  \n                setTimeout(function(){\n                    $(\"#getconfig\").hide();\n                    $(\"#search\").hide();\n                    $(\"#loading\").show();\n                    $('table > tbody').remove();\n                    resolve();  \n                }, 3000);  \n            });  \n        },  \n        allowOutsideClick: false, //弹框外是否可点\n        }).then(function(res){\n        if (res){\n        $.ajax({\n            url:\"getconfig\",\n            type:'GET',\n            success: function(arg){\n                ret = eval(arg);\n                if(ret.status){\n                    swal({  \n                        type: 'success',  \n                        title: '更新完成！',  \n                        confirmButtonText: '确定',  \n                        confirmButtonColor: '#4cd964'  \n                        }).then(function(){\n                            window.location.reload();\n                        });  \n                }else{\n                    swal({  \n                        type: 'error',  \n                        title: '更新失败！',  \n                        confirmButtonText: '确定',  \n                        confirmButtonColor: '#4cd964'  \n                        }).then(function(){\n                            window.location.reload();\n                        });  \n                }\n            }});\n        }})\n    });\n});\n</script>\n{% endblock %}\n  下面具体说下这些功能的交互。\n显示界面\n创建配置相关的model函数\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\nfrom django.db import models\n\n\nclass serverconfig(models.Model):\n    id = models.AutoField(primary_key=True)\n    # 配置的名字\n    config_name = models.CharField(max_length=100)\n    # 配置的内容\n    content = models.TextField()\n    # 配置的描述\n    detail = models.CharField(max_length=200, default=\"\")\n\n    class Meta:\n        # 别名（存储在数据库中的table名）\n        db_table = 'serverconfig'\n        # 使用server数据库\n        app_label = \"server\"\n  依然，创建好之后需要更新django的数据表，执行python manage.py migrate --database=server。\n添加渲染函数serverconfig的url(server/urls.py)\n  除了给出渲染函数serverconfig，这里的urls.py还写了所有后文中需要用到的相关功能url：获得配置、读取配置、修改配置、删除配置、添加配置的描述。\nfrom django.conf.urls import url\nimport views\n\nurlpatterns = [\n    url(r'^$', views.homepage),\n    url(r'^home', views.homepage),\n\n    url(r'^servertime', views.servertime),\n    # 服务器配置的渲染函数\n    url(r'^serverconfig', views.serverconfig),\n    # 相关功能函数\n    # 获得配置\n    url(r'^getconfig', views.getconfig),\n    # 读取配置\n    url(r'^readconfig', views.readconfig),\n    # 修改配置\n    url(r'^writeconfig', views.writeconfig),\n    # 删除配置\n    url(r'^deleteconfig', views.deleteconfig),\n    # 添加配置的描述\n    url(r'^configdetail', views.configdetail),\n\n    # 以下的url在前面的文章已经实现\n    url(r'^settime', views.settime),\n    url(r'^usingserver', views.usingserver),\n    url(r'^restartserver', views.restartserver),\n    url(r'^getservertime', views.getservertime),\n    url(r'^recoverlocaltime', views.recoverlocaltime),\n    url(r'^userlogout', views.userlogout),\n]\n在views.py中(server/views.py)添加渲染函数servertime\n  页面渲染函数会将数据库中的配置通过字典传递给前端渲染，值得注意的是，这里传递给前端的只有配置的名字和它的相关描述。每个配置的展示交给前端的javascript中的getconfig单独通过ajax获取。上面给出的html中，前端页面通过模板语言，利用for循环添加到table中(tr元素)。\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.contrib.auth import logout\nfrom django.shortcuts import render_to_response\nfrom django.http import JsonResponse\nfrom django.contrib.auth.decorators import login_required\nimport json\nimport time\n\n\n# 服务器的名字\nhtmltitle = '服务器工具'\n@login_required(login_url='/loginpage')\ndef serverconfig(request):\n    from server import models\n    username = request.session.get('username')\n    name_list = []\n    config_name = models.serverconfig.objects.all().values_list('id', 'config_name', 'detail')\n    for name in config_name:\n        name_list.append(name)\n    pagedict = {'name_list': name_list, 'title': htmltitle, 'username': username}\n    return render_to_response(\"servermaterial/serverconfig.html\", pagedict)\n  添加这些功能后，就能够通过http://127.0.0.1:8888/server/serverconfig.html访问这个页面了，但是我们看到的表格中没有配置，是因为网站后台还没有从服务器读取相关的配置。\n配置相关操作\n获得/更新配置\n  要获得这些配置需要添加相关的view函数（server/views.py），这个view函数会对比服务器中最新的配置文件和mysql中存储的配置文件的差别进行增、删、改，这个函数是通过html中的id=getconfig的按钮触发的，它的javascript函数可以在上面找到，为$(\"#getconfig\").click(function(){...})，url也已经在上面给出，其对应前端页面红框中的按钮，如图5。\n\n# 获得服务器配置\ndef getconfig(request):\n    from server import models\n    if request.method == 'GET':\n        ret = {'status': False}\n        from WebTool.functions import get_serverconfig_lists, read_serverconfig\n        # 获得服务器中最新的配置文件名组成的列表\n        newconfigs = get_serverconfig_lists()\n        # 获得数据库中记录的未更新的老配置文件名列表\n        name_list = models.serverconfig.objects.all().values('config_name')\n        oldconfigs = []\n        for name in name_list:\n            oldconfigs.append(str(name['config_name']))\n        # 服务器和数据库中配置名相同的文件名，对其更新一下配置内容\n        common = [name for name in newconfigs if name in oldconfigs]\n        for config in common:\n            configcontent = read_serverconfig(config)\n            models.serverconfig.objects.filter(config_name=config).update(content=configcontent)\n        # 服务器中增加的配置文件名，数据库中增加一份\n        add_con = [name for name in newconfigs if name not in oldconfigs]\n        for config in add_con:\n            configcontent = read_serverconfig(config)\n            models.serverconfig.objects.create(config_name=config, content=configcontent)\n        # 服务器已经不存在的配置文件名，数据库删除一份\n        delete_con = [name for name in oldconfigs if name not in newconfigs]\n        for config in delete_con:\n            models.serverconfig.objects.filter(config_name=config).delete()\n        ret['status'] = True\n        return JsonResponse(ret)\n  所有的配置文件都放在如下图6所示的服务器目录中，网站后台通过调用funtions.py中的函数（这些paramiko函数在服务器SSH服务配置与python中paramiko的使用文章中已经封装好了）获得这些配置的名字。\n\n前端实现配置搜索\n  如果要实现键盘弹起就进行搜索可以参考这里，在input中加入onkeyup这个性质，图7中红色的搜索框的html代码如下：\n  <input type=\"text\" class=\"form-control\" onkeyup=\"searchintable()\" id=\"search\" placeholder=\"配置搜索\">\n\n  searchintable()函数如下，加入函数之后便可以实现在搜索框中一边输入一边搜索配置。\n<script>\n// 查询函数\nfunction searchintable(){\n    input = document.getElementById(\"search\");\n    filter = input.value.toUpperCase();\n    table = document.getElementById(\"configtable\");\n    tr = table.getElementsByTagName(\"tr\");\n    for(i = 0; i < tr.length; i++){\n    td = tr[i].getElementsByTagName(\"td\")[0];\n    if (td){\n      if (td.innerHTML.toUpperCase().indexOf(filter) > -1){\n        tr[i].style.display = \"\";\n      }else{\n        tr[i].style.display = \"none\";\n      }\n    } \n  }\n}\n</script>\n前端读取配置\n  读取、修改、删除的按钮在图8的红框中。\n\n  点击绿色的查看按钮会弹出只读的模态框，如图9所示。\n\n  读取配置的模态框，配置文件写在textarea中，readonly=\"readonly\"可将其设置为只读模式：\n<div class=\"modal fade\" id=\"readModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\n    <div class=\"modal-dialog\">\n        <input type=\"hidden\" name='modal' value=''>\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">\n                    &times;\n                </button>\n                <h4 class=\"modal-title\" id=\"myModalLabelread\">\n                    模态框（Modal）标题\n                </h4>\n            </div>\n            <!--style=\"cursor:default\" 设置只读状态-->\n            <textarea type=\"text\" class=\"form-control modal-body-read\" rows=\"35\" placeholder=\"\" readonly=\"readonly\" style=\"cursor:default\">    \n            在这里添加一些文本    \n            </textarea>\n            <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-theme02\" data-dismiss=\"modal\">关闭\n                </button>\n            </div>\n        </div>\n    </div>\n</div>\n  读取配置的view函数，函数直接在数据库中按名字查找配置的具体内容。\n# get config content\ndef readconfig(request):\n    ret = {'status': False, 'content': ''}\n    if request.method == 'POST':\n        from server import models\n        name = request.POST.get('configname')\n        content = models.serverconfig.objects.get(config_name=name).content\n        ret['status'] = True\n        ret['content'] = content\n        return JsonResponse(ret)\n    return JsonResponse(ret)\n前端修改配置\n  点击蓝色的修改按钮会弹出修改配置的模态框，如下图10。\n\n  读取配置的模态框，配置文件写在textarea中，并为其添加一个提交按钮：\n<div class=\"modal fade\" id=\"writeModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\n    <div class=\"modal-dialog\">\n        <input type=\"hidden\" id='configname' name='modal' value=''>\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <button type=\"button\" class=\"close\" id=\"closebtn1\" data-dismiss=\"modal\" aria-hidden=\"true\">\n                    &times;\n                </button>\n                <h4 class=\"modal-title\" id=\"myModalLabelwrite\">\n                    模态框（Modal）标题\n                </h4>\n            </div>\n            <div class=\"progress progress-striped active\" style=\"display:none;\" id=\"writeloading\">\n                <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"100\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 100%\"></div>\n            </div>\n            <textarea type=\"text\" class=\"form-control modal-body-write\" rows=\"35\" placeholder=\"\"></textarea>\n            <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-theme03\" id=\"putconfigbtn\" onclick=\"putconfig()\">提交</button>\n                <button type=\"button\" class=\"btn btn-theme02\" id=\"closebtn2\" data-dismiss=\"modal\">关闭</button>\n            </div>\n        </div>\n    </div>\n</div>\n  点击提交按钮会出现swal风格（插件在文章用户登陆与session中介绍过）的二次确认框，如上图9。ajax请求经过server/urls.py中的url找到server/views.py中的writeconfig函数。因为文中的配置都是json格式的，如果格式不符合json要求会无法修改。这里有个缺点，修改服务器配置的函数generate_config_upload_file实际上只是在本地生成一个字符串然后上传覆盖掉服务器的同文件名的配置，并不是局部修改，所以对于大的配置文件修改效率低，但是为了方便就直接这样做了。\n# write config\ndef writeconfig(request):\n    ret = {'status': False, 'error': '', 'oldcontent': ''}\n    if request.method == 'POST':\n        from server import models\n        from WebTool.functions import generate_config_upload_file\n        name = request.POST.get('name')\n        newcontent = request.POST.get('content')\n        try:\n            json.loads(newcontent)\n        except ValueError:\n            oldcontent = models.serverconfig.objects.get(config_name=name).content\n            ret['oldcontent'] = oldcontent\n            ret['error'] = '1'\n            return JsonResponse(ret)\n        rtn = generate_config_upload_file(name, newcontent)\n        if rtn == 'Successful Upload':\n            models.serverconfig.objects.filter(config_name=name).update(content=newcontent)\n            ret['status'] = True\n            return JsonResponse(ret)\n        else:\n            oldcontent = models.serverconfig.objects.get(config_name=name).content\n            ret['oldcontent'] = oldcontent\n            ret['error'] = '2'\n            return JsonResponse(ret)\n删除配置配置\n  删除配置就更简单了，点击红色的按钮可以唤出二次确认框，如图11，然后ajax请求经过server/urls.py中的url找到server/views.py中的deleteconfig函数执行删除。\n\n# delete config\ndef deleteconfig(request):\n    ret = {'status': False}\n    if request.method == 'POST':\n        from server import models\n        from WebTool.functions import delete_config\n        name = request.POST.get('name')\n        try:\n            models.serverconfig.objects.filter(config_name=name).delete()\n            delete_config(name)\n            ret['status'] = True\n            return JsonResponse(ret)\n        except Exception:\n            ret['status'] = False\n        return JsonResponse(ret)\n添加描述\n  每个配置都需要添加响应的描述，如下图12的红框中的input框和描述。\n\n  关于该行表格是显示描述还是input框是由数据库serverconfig表中detail字段是否有内容决定的。\n{% if detail == '' %}\n<td tyle=\"vertical-align:middle;\">\n    <div class=\"col-sm-8\">\n        <div class=\"input-group\">\n            <input type=\"text\" class=\"form-control\" placeholder='此处可以添加配置描述'>\n            <span class=\"input-group-btn\">\n                <button class=\"btn btn-default\" onclick=\"write_detail(this, &quot;{{name}}&quot;)\" type=\"button\">添加</button>\n            </span>\n        </div>\n    </div>\n</td>\n{% else %}\n<td style=\"vertical-align:middle;\">\n    <div class=\"col-sm-8\">\n        <div class=\"input-group\" style=\"display:none;\">\n            <input type=\"text\" class=\"form-control\" placeholder='此处可以添加配置描述'>\n            <span class=\"input-group-btn\">\n                <button class=\"btn btn-default\" onclick=\"write_detail(this, &quot;{{name}}&quot;)\" type=\"button\">添加</button>\n            </span>\n        </div>\n        <div>\n            {{ detail }}&nbsp;&nbsp;<button onclick=\"modify_detail(this)\" style=\"border:0;background:transparent;\"><i class=\"fa fa-pencil\"></i></button>\n        </div>\n    </div>\n</td>\n{% endif %}\n  把javascript代码单独拿出来，write_detail函数是添加配置中的按钮，点击按钮之后需要获得前面input框中的值，这里是分别通过javascript和jquery的parentNode，prev()这些节点关系函数来拿到，modify_detail函数是描述后面的修改笔，$(obj).parent().prev().show();是让描述的字消失，$(obj).parent().hide();是让input框重新出现然后修改描述。\n<script>\nfunction write_detail(obj, name){\n    var father_span = obj.parentNode;\n    var input = $(father_span).prev(); \n    var detail = input.val();\n    $.ajax({\n        url:\"configdetail\",\n        type:'POST',\n        data:{'name':name, 'detail':detail},\n        success: function(arg){\n            window.location.reload();\n    }});\n}\nfunction modify_detail(obj){\n    $(obj).parent().prev().show();\n    $(obj).parent().hide();\n}\n</script>\n  ajax请求经过server/urls.py中的url找到server/views.py中的configdetail函数执行添加描述到数据库。\n# 添加配置描述\ndef configdetail(request):\n    ret = {'status': False}\n    if request.method == 'POST':\n        detail = request.POST.get('detail')\n        name = request.POST.get('name')\n        from server import models\n        models.serverconfig.objects.filter(config_name=name).update(detail=detail)\n        ret['status'] = True\n        return JsonResponse(ret)\n结语\n  服务器配置文件修改基本上就实现了，下篇文章会说说websocket原理以及怎么利用websocket执行实时日志的查看。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "1"}