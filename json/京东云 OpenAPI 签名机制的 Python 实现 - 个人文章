{"title": "京东云 OpenAPI 签名机制的 Python 实现 - 个人文章 ", "index": "京东,openapi,python", "content": "京东云OpenAPI是将京东云所有资源的管理能力通过API的方式提供出来，供京东云用户和合作伙伴使用。OpenAPI是京东云控制台的有效补充，方便用户更灵活的控制自己的云上资源。\n本文档通过step-by-step生成签名以及完整HTTP请求，并将请求发送至京东公共OpenAPI并得到response。\n京东云：www.jdcloud.com京东云OpenAPI：docs.jdcloud.com/cn/?act=3公共说明：docs.jdcloud.com/cn/common-declaration/api/introduction\n前置条件\n要使用某个产品线的OpenAPI，首先需要先通过产品文档了解产品功能、计费等方面的信息。\n在开始调用京东云OpenAPI之前，需提前在京东云用户中心账户管理下的AccessKey管理页面申请AccessKey和SecretKey密钥对（简称AK/SK）。AK/SK信息请妥善保管，如果遗失可能会造成非法用户使用此信息操作您在云上的资源，给你造成数据和财产损失。AK/SK密钥对允许启用、禁用，启用后可用其调用OpenAPI，禁用后不能用其调用OpenAPI。\n京东云OpenAPI使用Restful接口风格，要进行OpenAPI调用需要包含如下信息：请求协议，请求方式，请求地址，请求路径，请求头，请求参数，请求体。\n为了您的数据安全，建议务必使用https协议。\n基本步骤\n\n初始基本配置\n生成初始请求header\n生成标准请求串\n生成待签名字符串\n生成签名key\n计算签名值\n更新请求头\n发送请求\n\n请求签名具体 Python 实现\n1. 初始基本配置\n# GET请求\nmethod = 'GET'\n# 地域\nregion = 'cn-north-1'\n# 产品线\nservice = 'vm'\n# vm产品线服务地址：{product}.jdcloud-api.com\nfull_host = 'vm.jdcloud-api.com'\n\n# OpenAPI服务的地址和路径格式一般为（默认为https）：\n# https://{product}.jdcloud-api.com/{API版本号}/regions/{地域ID}/{资源名称}/{资源ID(可选)}/{子资源名称(可选)}/{子资源ID(可选)}{:自定义动作(可选)}\nurl = 'https://vm.jdcloud-api.com/v1/regions/cn-north-1/instances/i-uvvtdzuxre'\n\n# 规范请求路径Path：/{apiVersion}/regions/{regionId}/instances/{instanceId}\ncanonical_uri = '/v1/regions/cn-north-1/instances/i-uvvtdzuxre'\n\n# 本例中为GET请求，body为空（若为PUT/POST/PATCH请求，则body为parameter的JSON格式）\nbody = ''\n\n2. 生成初始请求header\n# 当前时间\nnow = datetime.datetime.utcfromtimestamp(time.time())\n\n# 格式化字符串为：'20180812T074253Z'\njdcloud_date = now.strftime('%Y%m%dT%H%M%SZ')\n\n# 生成datestamp字符串：“20180812”，用于签名\ndatestamp = now.strftime('%Y%m%d')\n\n# 随机生成的字符串：“58542f21-bda3-4736-9a08-da2339669e52”\nnonce = str(uuid.uuid4())\n\n# 增加请求header字段：\n# Content-Type：请求数据格式为JSON\n# User-Agent：格式为“JdcloudSdkPython/<SDK版本> <产品线>/<产品线revision>”\n# 请求头如下：\n#         {'x-jdcloud-nonce': '63e0148e-0fef-4c78-9228-47fefe470b07', \n#         'Content-Type': 'application/json', \n#         'x-jdcloud-date': '20180812T094103Z', \n#         'User-Agent': 'JdcloudSdkPython/1.2.1 vm/1.0.0'}\nheaders = {'Content-Type': 'application/json', 'User-Agent': 'JdcloudSdkPython/1.2.1 vm/1.0.0'}\nheaders['x-jdcloud-date'] = jdcloud_date\nheaders['x-jdcloud-nonce'] = nonce\n\n3. 生成标准请求串\n# 生成请求查询字符串，本例为空。\ncanonical_querystring = ''\n\n# 生成CanonicalHeaders字符串，CanonicalHeaders为需要参与签名的请求头及值。要创建规范 HTTP header 列表，请将所有 HTTP header 名称转换为小写，并删除前导空格和尾随空格。通过用字符代码排序HTTP header ，然后遍历 HTTP header 名称来构建规范 HTTP header 列表。使用:分隔名称和值，并添加换行符。\n# 如下：\n#         content-type:application/json\n#         host:vm.jdcloud-api.com\n#         x-jdcloud-date:20180812T074253Z\n#         x-jdcloud-nonce:58542f21-bda3-4736-9a08-da2339669e52\n#\ncanonical_headers = 'content-type' + ':' + headers['Content-Type'] + '\\n' + 'host' + ':' + full_host + '\\n' + 'x-jdcloud-date' + ':' + headers['x-jdcloud-date'] + '\\n' + 'x-jdcloud-nonce' + ':' + headers['x-jdcloud-nonce'] + '\\n'\n\n# SignedHeaders用于告知京东云，请求中的哪些头是签名过程的一部分，京东云可以忽略哪些头（例如，由代理添加的任何附加标头），以验证请求。注意host, x-jdcloud-date, x-jdcloud-nonce必须包含在内。\nsigned_headers = 'content-type;host;x-jdcloud-date;x-jdcloud-nonce'\n\n# 生成body的hash（即使body为空字符串）： \n#        “e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855”\npayload_hash = hashlib.sha256(body.encode('utf-8')).hexdigest()\n\n# 生成标准请求串：\n# GET\n# /v1/regions/cn-north-1/instances/i-uvvtdzuxre\n# \n# content-type:application/json\n# host:vm.jdcloud-api.com\n# x-jdcloud-date:20180812T074253Z\n# x-jdcloud-nonce:58542f21-bda3-4736-9a08-da2339669e52\n# content-type;host;x-jdcloud-date;x-jdcloud-nonce\n#\n# e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\ncanonical_request = (method + '\\n' +\n                     canonical_uri + '\\n' +\n                     canonical_querystring + '\\n' +\n                     canonical_headers + '\\n' +\n                     signed_headers + '\\n' +\n                     payload_hash)\n\n4. 生成待签名字符串\n# 用于创建请求签名的哈希算法，目前只支持 `JDCLOUD2-HMAC-SHA256`\nalgorithm = 'JDCLOUD2-HMAC-SHA256'\n\n# CredentialScope格式为”{时间}/{地域编码}/{产品线}/jdcloud2_request\\n”，例如20180130/cn-north-1/vpc/jdcloud2_request\\n\n# \"20180812/cn-north-1/vm/jdcloud2_request\"\ncredential_scope = (datestamp + '/' + region + '/' + service + '/' + 'jdcloud2_request')\n\n# 生成canonical_request的哈希值\n#         a3349e006302711650240165d89bb9c0b504ff8dc95d665cd98907877fbbd423\ncanonical_request_hash = hashlib.sha256(canonical_request.encode('utf-8')).hexdigest()\n\n# 生成待签名字符串：\n#  StringToSign =\n#         Algorithm + \\n +\n#         RequestDateTime + \\n +\n#         CredentialScope + \\n +\n#         HashedCanonicalRequest\n# 结果为：\n# JDCLOUD2-HMAC-SHA256\n# 20180812T074253Z\n# 20180812/cn-north-1/vm/jdcloud2_request\n# a3349e006302711650240165d89bb9c0b504ff8dc95d665cd98907877fbbd423\n\nstring_to_sign = algorithm + '\\n' + jdcloud_date + '\\n' + credential_scope + '\\n' + canonical_request_hash\n\n5. 生成签名key\n# 计算签名key（二进制），其中HMAC(key, data)代表以二进制格式返回输出的HMAC-SHA256函数\n# 伪代码：\n# kSecret = your secret access key\n# kDate = HMAC(\"JDCLOUD2\" + kSecret, Date)\n# kRegion = HMAC(kDate, Region)\n# kService = HMAC(kRegion, Service)\n# kSigning = HMAC(kService, \"jdcloud2_request\")\n\nk_date = hmac.new(('JDCLOUD2' + secret_key).encode('utf-8'), datestamp.encode('utf-8'), hashlib.sha256).digest()\n\nk_region = hmac.new(k_date, region.encode('utf-8'), hashlib.sha256).digest()\n\nk_service = hmac.new(k_region, service.encode('utf-8'), hashlib.sha256).digest()\n\nsigning_key = hmac.new(k_service, 'jdcloud2_request'.encode('utf-8'), hashlib.sha256).digest()\n\n6. 计算签名值\n# 最终生成签名：\n#     如：9b2026198d3acbf99da395e23a994ed369a0d70f5b4a5d7567dd0caf3009656d\nencoded = string_to_sign.encode('utf-8')\nsignature = hmac.new(signing_key, encoded, hashlib.sha256).hexdigest()\n\n7. 更新请求头\n# 计算签名后，需要将签名的结果作为Authorization请求头将其添加到请求中\n# 'JDCLOUD2-HMAC-SHA256 Credential=xxxxxxxxxxxxxxxxxxxxxxxxxxx/20180812/cn-north-1/vm/jdcloud2_request, SignedHeaders=content-type;host;x-jdcloud-date;x-jdcloud-nonce, Signature=53305ed8290a26493beec3060d9b1ff7d94cb1a6f2171cd193a1562814c8de37'\nauthorization_header = algorithm + ' ' + 'Credential=' + access_key + '/' + credential_scope + ', ' + 'SignedHeaders=' + signed_headers + ', ' + 'Signature=' + signature\n\n# 更新请求headers，如下：\n#        {'x-jdcloud-date': '20180812T074253Z', \n#        'x-jdcloud-content-sha256': 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855', \n#        'JDCLOUD2-HMAC-SHA256': 'JDCLOUD2-HMAC-SHA256', \n#        'x-jdcloud-nonce': '58542f21-bda3-4736-9a08-da2339669e52', \n#        'User-Agent': 'JdcloudSdkPython/1.2.1 vm/1.0.0', \n#        'Content-Type': 'application/json', \n#        'Authorization': 'JDCLOUD2-HMAC-SHA256 Credential=xxxxxxxxxxxxxxxxxxxxxxxxxxx/20180812/cn-north-1/vm/jdcloud2_request, SignedHeaders=content-type;host;x-jdcloud-date;x-jdcloud-nonce, Signature=53305ed8290a26493beec3060d9b1ff7d94cb1a6f2171cd193a1562814c8de37'}\n\nheaders['Authorization'] = authorization_header\nheaders['x-jdcloud-date'] = jdcloud_date\nheaders['x-jdcloud-content-sha256'] = payload_hash\nheaders['JDCLOUD2-HMAC-SHA256'] = 'JDCLOUD2-HMAC-SHA256'\nheaders['x-jdcloud-nonce'] = nonce\n\n8. 发送请求\n8.1 Python 发送请求\n# Python发送请求，并获得相应\nresp = requests.request(method, url, data=body, headers=headers)\n\n8.2 Curl发送请求\n请求头中必须包含SignedHeaders中的各个字段：\n# curl -X GET -H \"x-jdcloud-date:20180812T094103Z\" -H \"x-jdcloud-nonce:63e0148e-0fef-4c78-9228-47fefe470b07\" -H \"Content-Type:application/json\" -H \"Authorization:JDCLOUD2-HMAC-SHA256 Credential=xxxxxxxxxxxxxxxxxxxxxxxxxxx/20180812/cn-north-1/vm/jdcloud2_request, SignedHeaders=content-type;host;x-jdcloud-date;x-jdcloud-nonce, Signature=53305ed8290a26493beec3060d9b1ff7d94cb1a6f2171cd193a1562814c8de37\" https://vm.jdcloud-api.com/v1/regions/cn-north-1/instances/i-uvvtdzuxre\n\n总结\n可将发送OpenAPI请求简单总结为：\n\n生成待签名字符串（包含header各个字段、body的hash等）\n生成签名key（包含SK并多层加盐）；\n用key签名step 1的待签名字符串，将签名信息加入到header并发送请求（包含AK），服务端按照同样的方式可以校验身份。\n\n使用Python SDK发送请求源代码：\nfrom jdcloud_sdk.core.credential import *\nfrom jdcloud_sdk.services.vm.client.VmClient import *\nfrom jdcloud_sdk.services.vm.apis.DescribeInstanceRequest import *\nimport json\n# 用户AK&SK\naccess_key = '<your ak>'\nsecret_key = '<your sk>'\n# 地域\nregionId = 'cn-north-1'\n# 要查询的实例ID\ninstanceId = 'i-uvvtdzuxre'\n# 生成Credential和Client\nmyCredential = Credential(access_key, secret_key)\nmyClient = VmClient(myCredential)\n# 定义参数\nmyParam = DescribeInstanceParameters(regionId, instanceId)\n# 定义请求\nmyRequest = DescribeInstanceRequest(myParam)\n# Client发送请求，并得到响应\nresp = myClient.send(myRequest)\n# 将返回结果以JSON格式打印\nprint json.dumps(resp.result, indent=2)\n\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}