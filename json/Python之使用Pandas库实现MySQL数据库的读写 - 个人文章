{"title": "Python之使用Pandas库实现MySQL数据库的读写 - 个人文章 ", "index": "python,mysql", "content": "  本次分享将介绍如何在Python中使用Pandas库实现MySQL数据库的读写。首先我们需要了解点ORM方面的知识。\nORM技术\n  对象关系映射技术，即ORM（Object-Relational Mapping）技术，指的是把关系数据库的表结构映射到对象上，通过使用描述对象和数据库之间映射的元数据，将程序中的对象自动持久化到关系数据库中。  在Python中，最有名的ORM框架是SQLAlchemy。Java中典型的ORM中间件有:Hibernate,ibatis,speedframework。\nSQLAlchemy\n  SQLAlchemy是Python编程语言下的一款开源软件。提供了SQL工具包及对象关系映射（ORM）工具，使用MIT许可证发行。  可以使用pip命令安装SQLAlchemy模块：\npip install sqlalchemy\n  SQLAlchemy模块提供了create_engine()函数用来初始化数据库连接，SQLAlchemy用一个字符串表示连接信息：\n'数据库类型+数据库驱动名称://用户名:口令@机器地址:端口号/数据库名'\nPandas读写MySQL数据库\n  我们需要以下三个库来实现Pandas读写MySQL数据库：\n\npandas\nsqlalchemy\npymysql\n\n其中，pandas模块提供了read_sql_query（）函数实现了对数据库的查询，to_sql（）函数实现了对数据库的写入，并不需要实现新建MySQL数据表。sqlalchemy模块实现了与不同数据库的连接，而pymysql模块则使得Python能够操作MySQL数据库。  我们将使用MySQL数据库中的mydb数据库以及employee表，内容如下：\n\n  下面将介绍一个简单的例子来展示如何在pandas中实现对MySQL数据库的读写：\n# -*- coding: utf-8 -*-\n\n# 导入必要模块\nimport pandas as pd\nfrom sqlalchemy import create_engine\n\n# 初始化数据库连接，使用pymysql模块\n# MySQL的用户：root, 密码:147369, 端口：3306,数据库：mydb\nengine = create_engine('mysql+pymysql://root:147369@localhost:3306/mydb')\n\n# 查询语句，选出employee表中的所有数据\nsql = '''\n      select * from employee;\n      '''\n\n# read_sql_query的两个参数: sql语句， 数据库连接\ndf = pd.read_sql_query(sql, engine)\n\n# 输出employee表的查询结果\nprint(df)\n\n# 新建pandas中的DataFrame, 只有id,num两列\ndf = pd.DataFrame({'id':[1,2,3,4],'num':[12,34,56,89]})\n\n# 将新建的DataFrame储存为MySQL中的数据表，不储存index列\ndf.to_sql('mydf', engine, index= False)\n\nprint('Read from and write to Mysql table successfully!')\n  程序的运行结果如下：\n\n  在MySQL中查看mydf表格：\n\n这说明我们确实将pandas中新建的DataFrame写入到了MySQL中！\n将CSV文件写入到MySQL中\n  以上的例子实现了使用Pandas库实现MySQL数据库的读写，我们将再介绍一个实例：将CSV文件写入到MySQL中，示例的mpg.CSV文件前10行如下：\n\n示例的Python代码如下：\n# -*- coding: utf-8 -*-\n\n# 导入必要模块\nimport pandas as pd\nfrom sqlalchemy import create_engine\n\n# 初始化数据库连接，使用pymysql模块\nengine = create_engine('mysql+pymysql://root:147369@localhost:3306/mydb')\n\n# 读取本地CSV文件\ndf = pd.read_csv(\"E://mpg.csv\", sep=',')\n\n# 将新建的DataFrame储存为MySQL中的数据表，不储存index列\ndf.to_sql('mpg', engine, index= False)\n\nprint(\"Write to MySQL successfully!\")\n  在MySQL中查看mpg表格：\n\n仅仅5句Python代码就实现了将CSV文件写入到MySQL中，这无疑是简单、方便、迅速、高效的！\n总结\n  本文主要介绍了ORM技术以及SQLAlchemy模块，并且展示了两个Python程序的实例，介绍了如何使用Pandas库实现MySQL数据库的读写。程序本身并不难，关键在于多多练习。  本次分享到此结束，欢迎大家多多交流~~\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "2"}