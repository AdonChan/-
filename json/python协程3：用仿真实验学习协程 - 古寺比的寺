{"title": "python协程3：用仿真实验学习协程 - 古寺比的寺 ", "index": "python,协程", "content": "前两篇我们已经介绍了python 协程的使用和yield from 的原理，这一篇，我们用一个例子来揭示如何使用协程在单线程中管理并发活动。。\n什么是离散事件仿真\nWiki上的定义是：\n离散事件仿真将系统随时间的变化抽象成一系列的离散时间点上的事件，通过按照事件时间顺序处理事件来演进，是一种事件驱动的仿真世界观。离散事件仿真将系统的变化看做一个事件，因此系统任何的变化都只能是通过处理相应的事件来实现，在两个相邻的事件之间，系统状态维持前一个事件发生后的状态不变。\n人话说就是一种把系统建模成一系列事件的仿真系统。在离散事件仿真中，仿真“钟”向前推进的量不是固定的，而是直接推进到下一个事件模型的模拟时间。\n假设我们抽象模拟出租车的运营过程，其中一个事件是乘客上车，下一个事件则是乘客下车。不管乘客做了5分钟还是50分钟，一旦下车，仿真钟就会更新，指向此次运营的结束时间。\n事件？是不是想到了协程！\n协程恰好为实现离散事件仿真提供了合理的抽象。\n第一门面向对象的语音 Simula 引入协程这个概念就是为了支持仿真。Simpy 是一个实现离散事件仿真的Python包，通过一个协程表示离散事件仿真系统的各个进程。\n出租车对运营仿真\n仿真程序会创建几辆出租车，每辆出租车会拉几个乘客，然后回家。出租车会首先驶离车库，四处徘徊，寻找乘客；拉到乘客后，行程开始；乘客下车后，继续四处徘徊。\n徘徊和行程所用的时间使用指数分布生成，我们将时间设为分钟数，以便显示清楚。\n完整代码如下：(taxi_sim.py)\n\n#! -*- coding: utf-8 -*-\nimport random\nimport collections\nimport queue\nimport argparse\n\nDEFAULT_NUMBER_OF_TAXIS = 3\nDEFAULT_END_TIME = 180\nSEARCH_DURATION = 5\nTRIP_DURATION = 20\nDEPARTURE_INTERAVAL = 5\n\n\n# time 是事件发生的仿真时间，proc 是出租车进程实例的编号，action是描述活动的字符串\nEvent = collections.namedtuple('Event', 'time proc action')\n\n# 开始 出租车进程\n# 每辆出租车调用一次taxi_process 函数，创建一个生成器对象，表示各辆出租车的运营过程。\ndef taxi_process(ident, trips, start_time=0):\n    '''\n    每次状态变化时向创建事件，把控制权交给仿真器\n    :param ident: 出租车编号\n    :param trips: 出租车回家前的行程数量\n    :param start_time: 离开车库的时间\n    :return: \n    '''\n    time = yield Event(start_time, ident, 'leave garage') # 产出的第一个Event\n    for i in range(trips):  # 每次行程都会执行一遍这个代码块\n        # 产出一个Event实例，表示拉到了乘客 协程在这里暂停 等待下一次send() 激活\n        time = yield Event(time, ident, 'pick up passenger')\n         # 产出一个Event实例，表示乘客下车 协程在这里暂停 等待下一次send() 激活\n        time = yield Event(time, ident, 'drop off passenger')\n    # 指定的行程数量完成后，for 循环结束，最后产出 'going home' 事件。协程最后一次暂停\n    yield Event(time, ident, 'going home')\n    # 协程执行到最后 抛出StopIteration 异常\n\n\ndef compute_duration(previous_action):\n    '''使用指数分布计算操作的耗时'''\n    if previous_action in ['leave garage', 'drop off passenger']:\n        # 新状态是四处徘徊\n        interval = SEARCH_DURATION\n    elif previous_action == 'pick up passenger':\n        # 新状态是开始行程\n        interval = TRIP_DURATION\n    elif previous_action == 'going home':\n        interval = 1\n    else:\n        raise ValueError('Unkonw previous_action: %s' % previous_action)\n    return int(random.expovariate(1/interval)) + 1\n\n\n# 开始仿真\nclass Simulator:\n\n    def __init__(self, procs_map):\n        self.events = queue.PriorityQueue()  # 带优先级的队列 会按时间正向排序\n        self.procs = dict(procs_map) # 从获取的procs_map 参数中创建本地副本，为了不修改用户传入的值\n\n    def run(self, end_time):\n        '''\n        调度并显示事件，直到时间结束\n        :param end_time:  结束时间 只需要指定一个参数\n        :return: \n        '''\n        # 调度各辆出租车的第一个事件\n        for iden, proc in sorted(self.procs.items()):\n            first_event = next(proc)  # 预激协程 并产出一个 Event 对象\n            self.events.put(first_event)  # 把各个事件加到self.events 属性表示的 PriorityQueue对象中\n\n        # 此次仿真的主循环\n        sim_time = 0  # 把 sim_time 归0\n        while sim_time < end_time:\n            if self.events.empty(): # 事件全部完成后退出循环\n                print('*** end of event ***')\n                break\n            current_event = self.events.get() # 获取优先级最高(time 属性最小)的事件\n            sim_time, proc_id, previous_action = current_event # 更新 sim_time\n            print('taxi:', proc_id, proc_id * '  ', current_event)\n            active_proc = self.procs[proc_id]  # 从self.procs 字典中获取表示当前活动的出租车协程\n            next_time = sim_time + compute_duration(previous_action)\n            try:\n                next_event = active_proc.send(next_time)  # 把计算得到的时间发送给出租车协程。协程会产出下一个事件，或者抛出 StopIteration\n            except StopIteration:\n                del self.procs[proc_id]  # 如果有异常 表示已经退出， 删除这个协程\n            else:\n                self.events.put(next_event)  # 如果没有异常，把next_event 加入到队列\n        else:  # 如果超时 则走到这里\n            msg = '*** end of simulation time: {} event pendding ***'\n            print(msg.format(self.events.qsize()))\n\n\n\ndef main(end_time=DEFAULT_END_TIME, num_taxis=DEFAULT_NUMBER_OF_TAXIS,\n         seed=None):\n    '''初始化随机生成器，构建过程，运行仿真程序'''\n    if seed is not None:\n        random.seed(seed)  # 获取可复现的结果\n    # 构建taxis 字典。值是三个参数不同的生成器对象。\n    taxis = {i: taxi_process(i, (i + 1) * 2, i*DEPARTURE_INTERAVAL)\n             for i in range(num_taxis)}\n    sim = Simulator(taxis)\n    sim.run(end_time)\n\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='Taxi fleet simulator.')\n    parser.add_argument('-e', '--end-time', type=int,\n                        default=DEFAULT_END_TIME,\n                        help='simulation end time; default=%s' % DEFAULT_END_TIME)\n    parser.add_argument('-t', '--taxis', type=int,\n                        default=DEFAULT_NUMBER_OF_TAXIS,\n                        help='number of taxis running; default = %s' % DEFAULT_NUMBER_OF_TAXIS)\n    parser.add_argument('-s', '--seed', type=int, default=None,\n                        help='random generator seed (for testing)')\n\n    args = parser.parse_args()\n    main(args.end_time, args.taxis, args.seed)\n\n运行程序，\n# -s 3 参数设置随机生成器的种子，以便调试的时候随机数不变，输出相同的结果\npython taxi_sim.py -s 3\n输出结果如下图\n\n从结果我们可以看出，3辆出租车的行程是交叉进行的。不同颜色的箭头代表不同出租车从乘客上车到乘客下车的跨度。\n从结果可以看出：\n\n出租车每5隔分钟从车库出发\n0 号出租车2分钟后拉到乘客（time=2），1号出租车3分钟后拉到乘客（time=8），2号出租车5分钟后拉到乘客（time=15）\n0 号出租车拉了两个乘客\n1 号出租车拉了4个乘客\n2 号出租车拉了6个乘客\n在此次示中，所有排定的事件都在默认的仿真时间内完成\n\n我们先在控制台中调用taxi_process 函数，自己驾驶一辆出租车，示例如下：\nIn [1]: from taxi_sim import taxi_process\n# 创建一个生成器，表示一辆出租车 编号是13 从t=0 开始，有两次行程\nIn [2]: taxi = taxi_process(ident=13, trips=2, start_time=0) \n\nIn [3]: next(taxi) # 预激协程\nOut[3]: Event(time=0, proc=13, action='leave garage')\n\n# 发送当前时间 在控制台中，变量_绑定的是前一个结果\n# _.time + 7 是 0 + 7\nIn [4]: taxi.send(_.time+7) \nOut[4]: Event(time=7, proc=13, action='pick up passenger') # 这个事件有for循环在第一个行程的开头产出\n\n# 发送_.time+12 表示这个乘客用时12分钟\nIn [5]: taxi.send(_.time+12)\nOut[5]: Event(time=19, proc=13, action='drop off passenger')\n\n# 徘徊了29 分钟\nIn [6]: taxi.send(_.time+29)\nOut[6]: Event(time=48, proc=13, action='pick up passenger')\n\n# 乘坐了50分钟\nIn [7]: taxi.send(_.time+50)\nOut[7]: Event(time=98, proc=13, action='drop off passenger')\n\n# 两次行程结束 for 循环结束产出'going home'\nIn [8]: taxi.send(_.time+5)\nOut[8]: Event(time=103, proc=13, action='going home')\n\n# 再发送值，会执行到末尾 协程返回后 抛出 StopIteration 异常\nIn [9]: taxi.send(_.time+10)\n---------------------------------------------------------------------------\nStopIteration                            Traceback (most recent call last)\n<ipython-input-9-d775cc8cc079> in <module>()\n----> 1 taxi.send(_.time+10)\n\nStopIteration:\n在这个示例中，我们用控制台模拟仿真主循环。从taxi协程中产出的Event实例中获取 .time 属性，随意加一个数，然后调用send()方法发送两数之和，重新激活协程。\n在taxi_sim.py 代码中，出租车协程由 Simulator.run 方法中的主循环驱动。\nSimulator 类的主要数据结构如下：\nself.events\nPriorityQueue 对象，保存Event实例。元素可以放进PriorityQueue对象中，然后按 item[0](对象的time 属性)依序取出（按从小到大）。\n\nself.procs\n一个字典，把出租车的编号映射到仿真过程的进程（表示出租车生成器的对象）。这个属性会绑定前面所示的taxis字典副本。\n\n优先队列是离散事件仿真系统的基础构件：创建事件的顺序不定，放入这种队列后，可以按各个事件排定的顺序取出。\n比如，我们把两个事件放入队列：\nEvent(time=14, proc=0, action='pick up passenger')\nEvent(time=10, proc=1, action='pick up passenger')\n这个意思是 0号出租车14分拉到一个乘客，1号出租车10分拉到一个乘客。但是主循环获取的第一个事件将是\nEvent(time=10, proc=1, action='pick up passenger')\n下面我们分析一下仿真系统的主算法--Simulator.run 方法。\n\n\n迭代表示各辆出租车的进程\n\n在各辆出租车上调用next()函数，预激协程。\n把各个事件放入Simulator类的self.events属性中。\n\n\n\n满足 sim_time < end_time 条件是，运行仿真系统的主循环。\n\n检查self.events 属性是否为空；如果为空，跳出循环\n从self.events 中获取当前事件\n显示获取的Event对象\n获取curent_event 的time 属性，更新仿真时间\n把时间发送给current_event 的pro属性标识的协程，产出下一个事件\n把next_event 添加到self.events 队列中，排定 next_event\n\n\n\n我们代码中 while 循环有一个else 语句，仿真系统到达结束时间后，代码会执行else中的语句。\n这个示例主要是想说明如何在一个主循环中处理事件，以及如何通过发送数据驱动协程，同时解释了如何使用生成器代替线程和回调，实现并发。\n\n并发： 多个任务交替执行\n并行： 多个任务同时执行\n\n到这里 Python协程系列的三篇文章就结束了。\n\n我们会看到，协程做面向事件编程时，会不断把控制权让步给主循环，激活并向前运行其他协程，从而执行各个并发活动。\n协程一种协作式多任务：协程显式自主的把控制权让步给中央调度程序。\n多线程实现的是抢占式多任务。调度程序可以在任何时刻暂停线程，把控制权交给其他线程\n\n前两篇文章\n\npython 协程1：协程10分钟入门\npython 协程2：yield from 从入门到精通\n\n再次说明一下，这几篇是《流畅的python》一书的读书笔记，作者提供了大量的扩展阅读，有兴趣的可以看一下。\n扩展阅读\n\nGenerator Tricks for Systems Programmers\nA Curious Course on Coroutines and Concurrency\nGenerators: The Final Frontier\ngreedy algorithm with coroutines\nBinaryTree类、一个简单的XML解析器、和一个任务调度器Proposal for a yield from statement for Python\n考虑用协程操作多个函数\n\n最后，感谢女朋友支持。\n\n\n>欢迎关注\n>请我喝芬达\n\n\n\n\n\n\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "6"}