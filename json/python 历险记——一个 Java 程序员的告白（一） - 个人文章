{"title": "python 历险记——一个 Java 程序员的告白（一） - 个人文章 ", "index": "java,python", "content": "引言\n想学爬虫还是 python 专业啊，之前一直在用 java， 现在决定尝尝鲜，使用 python及爬虫框架来完成网络数据采集。编程语言之间都是相通的，比如都需要模块化，引入其他文件来实现功能，使用列表等容器来处理数据，都要使用 json 或 xml 来解析和传输数据。你会发现通过 类比 的方式，带着问题去学习，你会发现走的很快而且我认为代码示例的作用是 异常强大的, 我会尽量使用代码示例的方式来展示，以满足同学快速学习的需要，也备后续查询。\n下面就是在 使用 python 过程中的问题总结，okay，让我们一起来历险吧~\nString 有哪些有用的方法？\n不管是哪种语言，用的最多的类型估计都是 string （字符串），要想快速入门 python， 掌握 string 也是必须的。\n在 java 中使用最多的 string 功能，我也会带着同样的疑问来了解 python 该使用什么方法实现。如果这里没有你要找的方法，可以到 python string 官方地址完整方法去查询\n如何拼接字符串?\n\n使用 + 号来拼接，要注意的是，当有数字的时候一定要转化为字符串格式  str(value) 才能够相加，不然会报错。\n使用%进行拼接，和占位符的概念比较类似，这里举个栗子\n\nhour = 9\nminutes = 45\nprint('it\\'s %d:%d minutes!' %(hour, minutes))\n如何分隔字符串?\n# 对字符串分割\nsplit_str = 'a-b-c-d'\nprint(split_str.split('-'))\n如何获取字符串长度\n# 获取字符串的长度\nprint(len('banana'))\n如何将 list 拼接成字符串\n# 以 - 做间隔，拼接字符串\njoin_str_list = ['a', 'b', 'c', 'd']\nprint('-'.join(join_str_list)) # 这里就是用 - 拼接后的值\n如何分割字符串?\nsplit_str = 'a-b-c-d'\nprint(split_str.split('-'))\n如何去除字符串中的空格?\n去除字符串中空格分为 3 种\n\n去除两端的空格\n去除左边的空格\n去除右边的空格\n\n# 去除字符串中的空格\nstrToStrip = '   abc   '\nprint(strToStrip.strip()) # 去除两端空格\nprint(strToStrip.lstrip()) # 去除左边空格\nprint(strToStrip.rstrip()) # 去除右边空格\n如何子字符串是否包含在父字符串中？\nchild_str = 'abc'\nprint('abcd'.find(child_str)) # 如果存在就返回首字母下标，不存在返回 -1\npython 有哪些有用的容器?\n学过 java 的都知道，在 java 中使用最多的容器有 List, Map, Set, Array，这些容器可以让我们方便的存储并操作数据，那么 python 中又有哪些类似的容器可供我们使用呢？\n列表 list\npython 中也有列表，功能包含了 java 列表，而且更牛的是它可以 包含不同类型的元素。\n['a', 10, 1.5] # 这就是一个列表，只需要方括号包起来即可\n如何遍历一个列表\n有两种方式可实现\nfor 循环的方式，这当然是最常见的\nlist = ['a', 1, 1.4]\n\nfor item in list:\n  print(item)\n在只需要读取列表的元素本身时这种方式当然很优雅。但如果需要获取元素的下标，就力不从心了，这就需要下面的方式。\n使用内置函数 range 和 len, 操作元素下表\nlist = ['a', 1, 1.4]\nfor i in range(len(list)):\n  list[i] = list[i] * 2\n  print(list[i])\n如何对列表切片？\npyton 中专门有切片操作符 :, 想切多厚切多厚，这可比 java 要方便不少。通过例子来感受下吧。\nalpha_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\nprint(alpha_list[1:3]) # ['b', 'c']\nprint(alpha_list[:4]) # ['a', 'b', 'c', 'd']\nprint(alpha_list[2:]) # ['c', 'd', 'e', 'f', 'g']\nprint(alpha_list[:]) # ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n如何给列表添加元素？\n有四种方式\n\n在列表尾部添加元素 append(value)\n\n将一个列表中的每个元素分别添加到另一个列表上 extend(list)\n\n将一个元素插入到列表的指定位置 insert(index, value)\n\n\n+ 号，将两个 list 直接相加, 会返回一个新的 list 对象\n\n码字太多了，自己都晕了，直接上代码。\nlist1 = ['a', 'b', 'c', 'd']\nlist1.append('e')\nprint(list1) # ['a', 'b', 'c', 'd', 'e']\n\nlist2_1 = ['a', 'b', 'c', 'd'] \nlist2_2 = ['e', 'f', 'g']\nlist2_1.extend(list2_2)\nprint(list2_1) # ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n\n\nlist3 = ['a', 'c', 'd']\nlist3.insert(1, 'b') # ['a', 'b', 'c', 'd'] \nprint(list3)\n\n# 内存多余消耗，不推荐\nlist4_1 = ['a', 'b']\nlist4_2 = ['c', 'd']\nprint(list4_1 + list4_2) # ['a', 'b', 'c', 'd']\n删掉元素\n也有几种方法可实现\n\n修改列表，弹出被删除的值 pop(index)\n\n知道要删除的元素时 remove(value)\n\n不需要使用删除的值时 del(index)\n\n删除多个值 del(index_begin, index_end)\n\n\n上代码\nremove_list_1 = ['a', 'b', 'c']\nprint(remove_list_1.pop(0))\nprint(remove_list_1)# ['b', 'c']\n\nremove_list_2 = ['a', 'b', 'c']\ndel remove_list_2[1]\nprint(remove_list_2)# ['a', 'c']\n\n\nremove_list_3 = ['a', 'b', 'c']\nremove_list_3.remove('b')\nprint(remove_list_3) # ['a', 'c']\n\nremove_list_4 = ['a', 'b', 'c']\ndel remove_list_4[1:2]\nprint(remove_list_4)# ['a', 'c']\n字典 dict\ndict 和 java 中 Map 非常类似，也是由 key 和 value 组成的，也是使用 散列表 的算法存储, 用过 java 的同学就直接把它当做 Java HashMap 来用就可以啦。另外，在语法上要比 java 也要简洁不少。\n创建 dict 添加元素\na_dict = dict() # 这样就创建了一个空字典\na_dict['one'] = 1 # 塞进去一个元素\n\nnot_empty_dict = {'one': 1, 'two': 2, 'three': 3} # 这是一个包含数据的字典\n遍历 dict\n使用 for 循环遍历所有字典，可以遍历字典中的 key，这样的遍历是没有特定顺序的，如果想按照顺序遍历需要使用内置函数 sorted\nd = {'b': 2, 'a': 1, 'c': 3}\n\nfor item_key in d:\n  print(item_key, d[item_key])\n\n\nfor item_key in sorted(d):\n print(item_key, d[item_key])\n那我如果想要遍历 dict 中的 values 呢?还真有一个方法叫 values(), 它会返回一个值集合，并可以应用 in 操作符遍历\nd = {'b': 2, 'a': 1, 'c': 3}\n\nfor value in d.values():\n  print(value)\n\nfor sorted_value in sorted(d.values()):\n  print(sorted_value)\n元组\n什么是元组？ java 中可没有听过内置元组这样的数据结构。\n在前面已经讲了列表，知道一个列表可以存储多个数据结构。元组和列表很像，但要记住它们间的一个重要区别: 元组是不可变的。\n如何创建元组？\n\n把各个类型的元素用逗号分隔，就可以得到一个元组,为了好看，常常用括号再围起来\n使用内置函数 tuple() 也可以创建元组\n\n注意，由于元组是不可变的，无法修改它的元素。但我们可以使用将多个元组结合成一个新的元组。（元组也支持 +）\ntuple_a = 1, 2, 3, 4, 5\n\ntuple_b = (1, 2, 3, 4, 5)\n\n# tuple 内置函数的参数必须是一个序列\ntupe_c = tuple('12345') # 字符串 \ntuple_e = tuple([1, 2, 3, 4, 5]) # 列表\ntuple_f = tuple((1,2,3,4,5)) # 元组\n\ntuple_d = tuple_a + tuple_b\nprint(tuple_d)\n元组有什么用？\n既然 python 中有这么个数据结构，自然就有它的用武之地。还别说，它的用途还真不少。\n\n交换变量 和 对多个变量赋值 更方便，优雅了\na = 5\nb = 4\na,b = b,a\n# 等式左边是一个变量的元组\n# 等式右边是表达式的元组，可以是（字符串，列表，元组都行)\n\nc,d = (1,2), [1,2,3]\nprint(c)\nprint(d)\n可以在函数中返回多个值,将它们装到元组里就行\ndef min_max(list):\n  return min(list), max(list)\n\nnum_list = [3, 1, 5, 2]\nprint(min_max(num_list))\n其他\n上面讲述的都是一些大的主题,除了这些，还有一些相对小些的。虽然小，但也很重要。这些小且重要的部分都在这个部分存放吧。\n全局变量是如何处理的？\n我们知道 java 中由于变量类型的存在，可以在一个 class 内声明全局变量，从而在 class 的各个方法中读取和赋值。\n而这点在 python 中却是行不通的,因为 python 中没有变量类型, 如果在文件中声明一个全局变量，再在函数内对这个变量赋值，会直接导致错误产生。这是因为在函数内又重新创建了一个局部变量。读取全局变量也有这个问题。\n那该怎么办呢？嗯~o(￣▽￣)o  global 关键字就要登场了。\n在函数内部，使用全局变量前，先用 global 关键字声明下这个变量，表示这个变量是全局变量，后面再使用就 okay啦。\n上栗子...\ng_variable = 3\n\ndef test_g_variable():\n  global g_variable\n  print(g_variable) # 3\n  g_variable = 2\n  print(g_variable) # 2\n\ntest_g_variable()\n结语\n上面并没有把 python 讲完，还类和对象,文件，JSON处理, XML 处理 等重要主题，这些会在下篇文章中涉及，敬请期待。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "0"}