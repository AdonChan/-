{"title": "python3笔记 7 包、模块、函数与变量作用域 - 个人文章 ", "index": "python", "content": "7-1 while循环与使用场景\nwhile循环和for循环\ncounter = 1\nwhile counter <= 10:\ncounter += 1\nprint(counter)\nelse:\nprint('Eof') #while结束后会执行else\nctrl + c 结束死循环\n递归适合用while\n7-2 for与for-else循环\nfor主要是用来遍历/循环 序列或者集合、字典\n对应于其他语言中的for each\na = [['apple','orange','banana','grape'],(1,2,3)]\nfor x in a:\nfor y in x:\nprint(y,end = ' ') #一横行打印\nelse:\nprint('fruit is gone')\n利用break和continue跳过某些字符：\na = [1,2,3]\nfor x in a:\nif x == 2:\ncontinue\nprint(x)\n利用break打断的for循环不会执行else里的语句，而continue会执行else\na = [1,2,3]\nfor x in a:\nif x == 2:\nbreak\nprint(x)\nelse:\nprint('EOF') #此句不执行\n循环二维数组时跳出\na = [['apple','orange','banana','grape'],(1,2,3)]\nfor x in a:\nfor y in x:\nif y == 'orange':\nbreak #只跳出了内层循环\nprint(y,end = ' ')\nelse:\nprint('fruit is gone')\n7-3 for 与 range\n利用range()打印0-9\nfor x in range(0,10):\nprint(x)\nrang(首，跨度，步长)打印0，2，4，6，8\nfor x in range(0,10,2):\nprint(x,end = ' | ')\n0 | 2 | 4 | 6 | 8 |\n递减的等差数列：\nfor x in range(10,0,-2):\nprint(x,end = ' | ')\n10 | 8 | 6 | 4 | 2 |\n7-4 新篇章导言\n高性能、封装性、可复用的代码考验逻辑能力和抽象能力\n7-5 Python工程的组织结构：包、模块儿、类\n最顶级的组织结构：包(文件夹)\n第二个层级：模块(文件)\n第三个层级：类\n第四个层级：函数、变量(不属于组织结构，是类本身的特性)\n7-6 Python包与模块的名字\n区分不同包的同名模块：包名.模块名\n形成的模块的路径叫做命名空间\n一个包下面可以有子包，模块可以和包平级\n普通文件夹想要变成包必须要有__init__.py文件\n__init__.py本身也是一个模块，可以不写内容只是标注包\n特殊地，__init__.py模块的名字就是包名\n7-7 import导入模块\n对于重复的定义需要从其他模块里引用。\n利用 import 模块名 导入\ntest1.c1\na = 1\ntest1.c2\nimport c1\nprint(c1.a)\n1\nimport导入的总是模块，需要用模块名.变量名的方法引用\n可以用as简化书写\ntest1.c1\na = 1\ntest1.c2\nimport c1 as m\nprint(m.a)\n1\n优点是可以一眼看出属于哪个模块\n7-8 from import 导入变量\ntest1.c2\nfrom c1 import a\nprint(a)\n也可以from 包 import 模块\n引用时用 模块.变量\n引用大量变量时使用 * ：\ntest1.c1\na = 1\nb = 2\nc = 3\nd = 4\ntest1.c2\nfrom c1 import *\nprint(a)\nprint(b)\nprint(c)\nprint(d)\n控制*的行为：\ntest1.c1\nall = ['a','c'] #用内置变量__all__来控制*的选择范围\na = 1\nb = 2\nc = 3\nd = 4\ntest1.c2\nfrom c1 import *\nprint(a)\nprint(c)\nprint(d) #d没有被打印，报错\n7-9 __init__.py 的用法\n隐藏__pycache__文件夹\npython3笔记 7 包、模块、函数与变量作用域代码换行：在上一行末尾加上或者加上括号利用括号的特性换行\n当包被导入时，__init__.py会首先自动被执行\ntest1.__init__.py\na = 'This is a __init__.py file'\nprint(a)\nc8.py\nimport test1\nThis is a __init__.py file\n__init__.py的应用场景：\ntest1.__init__.py\nall = ['c1','c2'] #初始化*\ntest1.__init__.py\nimport sys #批量导入库\nimport datetime\nimport io\nc8.py\nimport test1\nprint(test1.sys.path)\n7-10 包与模块的几个常见错误\n包和模块是不会被重复导入的，只会执行一次(入口文件的概念)\n避免循环导入，不要形成闭环\n导入模块的时候会执行模块里所有的代码\n7-11 模块内置变量\ntest1.c3\ninfos = dir() //打印当前模块内所有变量\nprint(infos)\n['__annotations__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__']\ntest1.c4.py\n'''\nThis is a c4 doc\n'''\nprint('name:' + __name__)\nprint('package:' + __package__)\nprint('doc:' + __doc__) #doc指的是模块的注释\nprint('file:' + __file__)\nc9.py\nimport test1.c4\nname:test1.c4\npackage:test1\ndoc:\nThis is a c4 doc\nfile:c:UsersTai ParkDocumentspython    est1c4.py\n7-12 入口文件和普通模块内置变量的区别\nc9.py\n'''\nThis is a c9 doc\n'''\nimport test1.c4\nprint('_________________')\nprint('name:' + __name__)\nprint('package:' + (__package__ or '当前模块不属于任何包'))\nprint('doc:' + __doc__)\nprint('file:' + __file__)\nname:test1.c4\npackage:test1\ndoc:\nThis is a c4 doc\nname:test1.c4\npackage:test1\ndoc:\nThis is a c4 doc\nfile:c:UsersTai ParkDocumentspython    est1c4.py\n_\nname:__main__ #入口文件中__name__会被强制修改为__main__\npackage:当前模块不属于任何包\ndoc:\nThis is a c9 doc\nfile:c9.py #入口文件中路径不同 ，和执行python命令所在目录是有关系的\n7-13 __name__的经典应用\ndir()可以打印当前所有变量，若不传参数显示所有，传参显示特定的变量\nimport sys\ninfos = dir(sys)\nprint(infos)\nmake a script both importable and executable:\nif name == '__main__':\nprint('This is app')\nelse:\nprint('This is a module')\ncmd中 python -m 命名空间.模块 可以将其当作模块来运行\n作为普通模块必须要有包，可执行文件没有包\n7-14 相对导入和绝对导入 一\n有一个主入口文件。\n可执行文件和顶级包在同一级。\n绝对导入：从顶级包开始往下导入\n相对导入：. 当前目录 ..上级目录 ...上上级目录\n7-15 相对导入和绝对导入 二\n相对导入不能超过顶级包。\n入口不能用相对路径导入，相对路径根据__name__定位，而入口文件被强制改成了__main__所以不能使用。\n若想在入口文件使用相对导入，用-m。\n我刚整理了一套2018最新的0基础入门和进阶教程，无私分享，加Python学习q-u-n ：【二二七】，【四三五】，【四五零 】即可获取，内附：开发工具和安装包，以及系统学习路线图\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}