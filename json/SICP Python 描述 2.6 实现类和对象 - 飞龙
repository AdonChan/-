{"title": "SICP Python 描述 2.6 实现类和对象 - 飞龙 ", "index": "sicp,python", "content": "2.6 实现类和对象\n\n来源：2.6   Implementing Classes and Objects\n译者：飞龙\n协议：CC BY-NC-SA 4.0\n\n在使用面向对象编程范式时，我们使用对象隐喻来指导程序的组织。数据表示和操作的大部分逻辑都表达在类的定义中。在这一节中，我们会看到，类和对象本身可以使用函数和字典来表示。以这种方式实现对象系统的目的是展示使用对象隐喻并不需要特殊的编程语言。即使编程语言没有面向对象系统，程序照样可以面向对象。\n为了实现对象，我们需要抛弃点运算符（它需要语言的内建支持），并创建分发字典，它的行为和内建对象系统的元素差不多。我们已经看到如何通过分发字典实现消息传递行为。为了完整实现对象系统，我们需要在实例、类和基类之间发送消息，它们全部都是含有属性的字典。\n我们不会实现整个 Python 对象系统，它包含这篇文章没有涉及到的特性（比如元类和静态方法）。我们会专注于用户定义的类，不带有多重继承和内省行为（比如返回实例的类）。我们的实现并不遵循 Python 类型系统的明确规定。反之，它为实现对象隐喻的核心功能而设计。\n2.6.1 实例\n我们从实例开始。实例拥有具名属性，例如账户余额，它可以被设置或获取。我们使用分发字典来实现实例，它会响应“get”和“set”属性值消息。属性本身保存在叫做attributes的局部字典中。\n就像我们在这一章的前面看到的那样，字典本身是抽象数据类型。我们使用列表来实现字典，我们使用偶对来实现列表，并且我们使用函数来实现偶对。就像我们以字典实现对象系统那样，要注意我们能够仅仅使用函数来实现对象。\n为了开始我们的实现，我们假设我们拥有一个类实现，它可以查找任何不是实例部分的名称。我们将类作为参数cls传递给make_instance。\n>>> def make_instance(cls):\n        \"\"\"Return a new object instance, which is a dispatch dictionary.\"\"\"\n        def get_value(name):\n            if name in attributes:\n                return attributes[name]\n            else:\n                value = cls['get'](name)\n                return bind_method(value, instance)\n        def set_value(name, value):\n            attributes[name] = value\n        attributes = {}\n        instance = {'get': get_value, 'set': set_value}\n        return instance\ninstance是分发字典，它响应消息get和set。set消息对应 Python 对象系统的属性赋值：所有赋值的属性都直接储存在对象的局部属性字典中。在get中，如果name在局部attributes字典中不存在，那么它会在类中寻找。如果cls返回的value为函数，它必须绑定到实例上。\n绑定方法值。make_instance中的get_value 使用get寻找类中的具名属性，之后调用bind_method。方法的绑定只在函数值上调用，并且它会通过将实例插入为第一个参数，从函数值创建绑定方法的值。\n>>> def bind_method(value, instance):\n        \"\"\"Return a bound method if value is callable, or value otherwise.\"\"\"\n        if callable(value):\n            def method(*args):\n                return value(instance, *args)\n            return method\n        else:\n            return value\n当方法被调用时，第一个参数self通过这个定义绑定到了instance的值上。\n2.6.2 类\n类也是对象，在 Python 对象系统和我们这里实现的系统中都是如此。为了简化，我们假设类自己并没有类（在 Python 中，类本身也有类，几乎所有类都共享相同的类，叫做type）。类可以接受get和set消息，以及new消息。\n>>> def make_class(attributes, base_class=None):\n        \"\"\"Return a new class, which is a dispatch dictionary.\"\"\"\n        def get_value(name):\n            if name in attributes:\n                return attributes[name]\n            elif base_class is not None:\n                return base_class['get'](name)\n        def set_value(name, value):\n            attributes[name] = value\n        def new(*args):\n            return init_instance(cls, *args)\n        cls = {'get': get_value, 'set': set_value, 'new': new}\n        return cls\n不像实例那样，类的get函数在属性未找到的时候并不查询它的类，而是查询它的base_class。类并不需要方法绑定。\n实例化。make_class 中的new函数调用了init_instance，它首先创建新的实例，之后调用叫做__init__的方法。\n>>> def init_instance(cls, *args):\n        \"\"\"Return a new object with type cls, initialized with args.\"\"\"\n        instance = make_instance(cls)\n        init = cls['get']('__init__')\n        if init:\n            init(instance, *args)\n        return instance\n最后这个函数完成了我们的对象系统。我们现在拥有了实例，它的set是局部的，但是get会回溯到它们的类中。实例在它的类中查找名称之后，它会将自己绑定到函数值上来创建方法。最后类可以创建新的（new）实例，并且在实例创建之后立即调用它们的__init__构造器。\n在对象系统中，用户仅仅可以调用create_class，所有其他功能通过消息传递来使用。与之相似，Python 的对象系统由class语句来调用，它的所有其他功能都通过点表达式和对类的调用来使用。\n2.6.3 使用所实现的对象\n我们现在回到上一节银行账户的例子。使用我们实现的对象系统，我们就可以创建Account类，CheckingAccount子类和它们的实例。\nAccount类通过create_account_class 函数创建，它拥有类似于 Python class语句的结构，但是以make_class的调用结尾。\n>>> def make_account_class():\n        \"\"\"Return the Account class, which has deposit and withdraw methods.\"\"\"\n        def __init__(self, account_holder):\n            self['set']('holder', account_holder)\n            self['set']('balance', 0)\n        def deposit(self, amount):\n            \"\"\"Increase the account balance by amount and return the new balance.\"\"\"\n            new_balance = self['get']('balance') + amount\n            self['set']('balance', new_balance)\n            return self['get']('balance')\n        def withdraw(self, amount):\n            \"\"\"Decrease the account balance by amount and return the new balance.\"\"\"\n            balance = self['get']('balance')\n            if amount > balance:\n                return 'Insufficient funds'\n            self['set']('balance', balance - amount)\n            return self['get']('balance')\n        return make_class({'__init__': __init__,\n                           'deposit':  deposit,\n                           'withdraw': withdraw,\n                           'interest': 0.02})\n在这个函数中，属性名称在最后设置。不像 Python 的class语句，它强制内部函数和属性名称之间的一致性。这里我们必须手动指定属性名称和值的对应关系。\nAccount类最终由赋值来实例化。\n>>> Account = make_account_class()\n之后，账户实例通过new消息来创建，它需要名称来处理新创建的账户。\n>>> jim_acct = Account['new']('Jim')\n之后，get消息传递给jim_acct ，来获取属性和方法。方法可以调用来更新账户余额。\n>>> jim_acct['get']('holder')\n'Jim'\n>>> jim_acct['get']('interest')\n0.02\n>>> jim_acct['get']('deposit')(20)\n20\n>>> jim_acct['get']('withdraw')(5)\n15\n就像使用 Python 对象系统那样，设置实例的属性并不会修改类的对应属性：\n>>> jim_acct['set']('interest', 0.04)\n>>> Account['get']('interest')\n0.02\n继承。我们可以创建CheckingAccount子类，通过覆盖类属性的子集。在这里，我们修改withdraw方法来收取费用，并且降低了利率。\n>>> def make_checking_account_class():\n        \"\"\"Return the CheckingAccount class, which imposes a $1 withdrawal fee.\"\"\"\n        def withdraw(self, amount):\n            return Account['get']('withdraw')(self, amount + 1)\n        return make_class({'withdraw': withdraw, 'interest': 0.01}, Account)\n在这个实现中，我们在子类的withdraw 中调用了基类Account的withdraw函数，就像在 Python 内建对象系统那样。我们可以创建子类本身和它的实例，就像之前那样：\n>>> CheckingAccount = make_checking_account_class()\n>>> jack_acct = CheckingAccount['new']('Jack')\n它们的行为相似，构造函数也一样。每笔取款都会在特殊的withdraw函数中收费 $1，并且interest也拥有新的较低值。\n>>> jack_acct['get']('interest')\n0.01\n>>> jack_acct['get']('deposit')(20)\n20\n>>> jack_acct['get']('withdraw')(5)\n14\n我们的构建在字典上的对象系统十分类似于 Python 内建对象系统的实现。Python 中，任何用户定义类的实例，都有个特殊的__dict__属性，将对象的局部实例属性储存在字典中，就像我们的attributes字典那样。Python 的区别在于，它区分特定的特殊方法，这些方法和内建函数交互来确保那些函数能正常处理许多不同类型的参数。操作不同类型参数的函数是下一节的主题。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "3"}