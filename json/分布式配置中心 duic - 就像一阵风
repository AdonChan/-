{"title": "分布式配置中心 duic - 就像一阵风 ", "index": "python,php,node.js,golang,java", "content": "什么是配置？\n服务运行时能够通过外部动态修改的参数既是配置。在运行时动态变更服务的行为，避免业务发生变更需要修改代码或重启服务等等。\n什么是 duic？\nduic 是配置管理中心，将配置统一管理提供标准的配置格式及编辑方式。设计目标是统一不同应用的配置管理方式，打造更人性化的配置编辑方式，提供更灵活的配置获取方式。\n\n如上图：duic 支持任何应用，任何语言的配置管理（Java，Go，Android，Web等），同时 duic 采用 YAML 语法作用配置文件格式，支持数据类型及结构化配置。\n如上图采用 YAML 编辑好配置之后通过 RESTful 接口获取配置（PS：官方目前已经提供Java、Android、Go语言的SDK，后期还会支持更多语言）。\n为什么采用 YAML 作为配置格式？\n\nYAML 是一种通用的数据格式\nYAML 支持结构化配置能够弥补 properties 这类单纯 key=value 格式的不足\nYAML 支持数据类型\nYAML 支持引用\nYAML 支持注释\nYAML 可读性高\n\n特性\n\n支持 MongoDB，MySQL，PostgreSQL，Oracle 存储配置信息\n配置修改实时更新\n支持多配置合并\n支持按需获取配置\n支持历史版本比较\n支持配置克隆\n支持用户权限控制\n支持 IP/Token 访问限制\n支持 Docker\n\n部署\n开箱即用，duic 每个 release 版本都可以通过 GitHub Releases 获取 jar 包部署，或者你可以在 Docker Hub 获取 Docker 镜像直接部署。你只需要关注如何使用 duic，而无需关心内部的实现细节，当然你如果对实现细节感兴趣，非常欢迎帮忙审查代码，你的帮助可以让 duic 的代码变得更加精练。\nMySQL 部署\n在 GitHub Releases 页下载最新版本的 duic-x.x.x.jar 文件。\n前提\nJava >= 1.8MySQL >= 5.6\n创建数据库\nCREATE DATABASE IF NOT EXISTS `duic` CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;\n配置数据库连接\napplication.yml\nspring:\n  datasource:\n    url: jdbc:mysql://127.0.0.1:3306/duic?autoReconnect=true&useServerPrepStmts=true\n    username: root\n    password: root\nPS：将 application.yml 文件与 duic-x.x.x.jar 文件放置在同一目录中。duic 是采用 spring-boot 开发，配置文件目录完成遵守 spring-boot 默认加载方式，更多关于 spring-boot 配置可以了解\n\n启动服务\njava -Dspring.profiles.active=mysql -jar duic.jar\n输出如下日志时，恭喜你 duic 已经启动成功。\n ______              _    ______\n|_   _ `.           (_) .' ___  |\n  | | `. \\ __   _   __ / .'   \\_|\n  | |  | |[  | | | [  || |\n _| |_.' / | \\_/ |, | |\\ `.___.'\\\n|______.'  '.__.'_/[___]`.____ .'\n:: duic ::      (v1.5.2-SNAPSHOT)\n\n2018-05-03 07:06:05,980 INFO  i.z.d.server.Application$Companion - Starting Application.Companion v1.5.2-SNAPSHOT on ubuntu with PID 47440 (/opt/duic/duic.jar started by zy in /opt/duic)\n2018-05-03 07:06:05,984 INFO  i.z.d.server.Application$Companion - The following profiles are active: mysql,prod\n2018-05-03 07:06:09,595 INFO  r.i.netty.tcp.BlockingNettyContext - Started HttpServer on /0:0:0:0:0:0:0:0%0:7777\n2018-05-03 07:06:09,596 INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port(s): 7777\n2018-05-03 07:06:09,600 INFO  i.z.d.server.Application$Companion - Started Application.Companion in 4.192 seconds (JVM running for 4.864)\n登录控制台编辑你的第一个配置吧\nhttp://[IP]:7777/index.html\nPS：记得将 IP 替换为你服务的 IP。\n关于 duic 部署在这里就写这么多了，有任何问题请给我留言，我将一一解答，更多关于 duic 部署方面的内容，大家可以参考官方提供的文档 DuiC Wiki。\n使用\n登录并创建你的第一个配置\nhttps://duic.zhudy.io/index.html\n\n\nspring-boot 加载配置\n添加 Maven 依赖\n<dependency>\n  <groupId>io.zhudy.duic</groupId>\n  <artifactId>duic-spring-cloud-config-client</artifactId>\n  <version>2.0.1</version>\n</dependency>\n\n添加 Gradle 依赖\ncompile \"io.zhudy.duic:duic-spring-cloud-config-client:2.0.1\"\n\n在 bootstrap.yml 配置文件中添加获取配置信息\nduic:\n  spring:\n    cloud:\n      config:\n        uri: https://duic.zhudy.io/api/v1\n        name: hello\n        profile: first\n        # token: [TOKEN]                  \n\n\nuri 配置中心地址前缀\n\nname 配置名称\n\nprofile 配置环境名称，多个采用,分隔\n\n\n配置完成后在 spring-boot 项目中即可使用 @ConfigurationProperties @Value 方式注入配置依赖，duic 并没有提供任何自定义注解，完全遵守 spring-boot 的编程习惯，无缝接入及移除 duic。\nGitHub: duic-spring-cloud-config-client\nspring 加载配置\n添加 Maven 依赖\n<dependency>\n  <groupId>io.zhudy.duic</groupId>\n  <artifactId>duic-spring-cloud-config-client</artifactId>\n  <version>2.0.1</version>\n</dependency>\n\n添加 Gradle 依赖\ncompile \"io.zhudy.duic:duic-spring-cloud-config-client:2.0.1\"\n\n<bean id=\"duicConfigBeanFactoryPostProcessor\" class=\"io.zhudy.duic.config.spring.DuicConfigBeanFactoryPostProcessor\">\n  <property name=\"baseUri\" value=\"https://duic.zhudy.io/api/v1\"/>\n  <property name=\"name\" value=\"hello\"/>\n  <property name=\"profile\" value=\"first\"/>\n</bean>\n配置完成 spring bean 之后在项目中即可使用 @Value 注入配置，完全兼容 spring 编程习惯，支持配置热加载。\nGitHub: duic-java-client\ngo 加载配置\n引入 duic-go-client 依赖包\ngo get -u github.com/zhudyos/duic-go-client\n\n初始化配置信息\nduic.BaseUri = \"https://duic.zhudy.io/api/v1\"\nduic.Name = \"hello\"\nduic.Profiles = \"first\"\nduic.Init()\n\n获取配置\nduic.Bool(\"key\")        // 获取一个 bool 配置\nduic.Int(\"key\")         // 获取一个 int 配置\nduic.Float64(\"key\")     // 获取一个 float64 配置\nduic.String(\"key\")      // 获取一个 string 配置\nduic.Array(\"key\")       // 获取一个数组配置\nduic.Object(\"key\")      // 获取一个对象配置\n结语\n欢迎 PR！！！GitHub: https://github.com/zhudyos/duicQQ群：540315111\n\n                ", "mainLikeNum": ["9 "], "mainBookmarkNum": "3"}