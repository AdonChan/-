{"title": "Python基础之(四)之集合 - 再读斋 ", "index": "python", "content": "集合Set类似字典的特点，可以用{}花括号来定义；其中的元素是没有序列，也就是非序列类型的数据；而且集合中的元素不可重复，这就类似于dict键。\n创建集合\n>>> s1 = set(\"qiswri\") #有两个i\n>>> s1\nset(['q', 'i', 's', 'r', 'w']) #只有一个i\n>>> \n>>> s2 = set([123,\"google\",\"facebook\",\"book\",\"facebook\"]);\n>>> s2\nset(['facebook', 123, 'google', 'book']) #只有一个facebook\n说明集合中的元素是不能重复的，在创建集合的时候，如果发现了重复的元素，就会自定过滤重复的元素。并且集合中的元素也是随机排序的。\n除了用set()来创建集合，还可以使用{}的方式，但是这种方式不提倡使用，因为在某些情况下，Python搞不清楚是字典还是集合。\nunhashtable（不可哈希的）表示可变数据，如列表和字典都能原地修改，就是unhastable的；hastable（可哈希）表示不可变数据，如字符串不能修改。\n>>> s1\nset(['q', 'i', 's', 'r', 'w'])\n>>> s1[1] = \"w\"   #集合不是序列类型，不能用索引方式对其进行修改\n\nTraceback (most recent call last):\n  File \"<pyshell#9>\", line 1, in <module>\n    s1[1] = \"w\"\nTypeError: 'set' object does not support item assignment\nlist()和set()实现集合和列表两种对象之间的转化。\n>>> s2\nset(['facebook', 123, 'google', 'book'])\n>>> type(s2)\n<type 'set'>\n>>> lst = list(s2)\n>>> lst\n['facebook', 123, 'google', 'book']\n>>> type(lst)\n<type 'list'>\n>>> s3 = set(lst)\n>>> s3\nset(['google', 123, 'facebook', 'book'])\n集合的函数\ndir(set)：列出集合的函数\nadd和update\nhelp(set.add)\n>>> s1 = set([\"a\",\"b\",\"c\"])\n>>> s1\nset(['a', 'c', 'b'])\n>>> s1.add(\"abc\") #向集合中添加元素\n>>> s1\nset(['a', 'c', 'b', 'abc'])\n\n>>> s1.add([1,2,3]) #不能添加列表，因为列表的数据是可变的\n\nTraceback (most recent call last):\n  File \"<pyshell#31>\", line 1, in <module>\n    s1.add([1,2,3])\nTypeError: unhashable type: 'list'\n>>> \n>>> s1\nset(['a', 'c', 'b', 'abc'])\n>>> s2 = set([\"e\",\"f\",\"g\"])\n>>> s1.update(s2) #集合s2添加到s1中\n>>> s1\nset(['a', 'c', 'b', 'e', 'abc', 'g', 'f'])\n>>> s2\nset(['e', 'g', 'f'])\npop、remove、discard、clear\n>>> s1\nset(['a', 'c', 'b', 'e', 'abc', 'g', 'f'])\n>>> s1.pop() #随机删除一个元素，并返回这个元素\n'a'\n>>> s1.pop()\n'c'\n>>> s1.pop(\"b\")  #不能指定参数\n\nTraceback (most recent call last):\n  File \"<pyshell#43>\", line 1, in <module>\n    s1.pop(\"b\")\nTypeError: pop() takes no arguments (1 given)\n>>> \n>>> s1.remove(\"b\") #删除集合中指定的元素\n>>> s1\nset(['e', 'abc', 'g', 'f'])\n>>> s1.remove()  #remove必须指定参数\n\nTraceback (most recent call last):\n  File \"<pyshell#47>\", line 1, in <module>\n    s1.remove()\nTypeError: remove() takes exactly one argument (0 given)\n>>> s1.discard(\"g\") #存在则删除集合中的元素\n>>> s1\nset(['e', 'abc', 'f'])\n>>> s1.discard(\"i\") #不存在则不做处理，不抛出异常\n>>>\n>>> s1.clear()  #清空集合\n>>> s1\nset([])\n不变的集合\n>>> f1 = frozenset(\"qwert\")\n>>> f1\nfrozenset(['q', 'r', 'e', 't', 'w'])\n>>> f1.add(\"q\") #不能修改集合\n\nTraceback (most recent call last):\n  File \"<pyshell#62>\", line 1, in <module>\n    f1.add(\"q\")\nAttributeError: 'frozenset' object has no attribute 'add'\n>>> f1.remove(\"r\")\n\nTraceback (most recent call last):\n  File \"<pyshell#63>\", line 1, in <module>\n    f1.remove(\"r\")\nAttributeError: 'frozenset' object has no attribute 'remove'\n>>> f1.pop()\n\nTraceback (most recent call last):\n  File \"<pyshell#64>\", line 1, in <module>\n    f1.pop()\nAttributeError: 'frozenset' object has no attribute 'pop'\n集合元素\n元素与集合的关系\n>>> aset=set([\"q\",\"w\",\"e\",\"r\",\"t\"])\n>>> aset\nset(['q', 'r', 'e', 't', 'w'])\n>>> \"q\" in aset\nTrue\n>>> \"a\" in aset\nFalse\n集合与集合的关系\nA是否等于B\n>>> a\nset(['q', 'r', 'e', 't', 'w'])\n>>> b = set([\"a\",\"b\",\"c\"])\n>>> a == b\nFalse\n>>> a != b\nTrue\nA是否是B的子集\n>>> c = set([\"q\",\"r\"])\n>>> a\nset(['q', 'r', 'e', 't', 'w'])\n>>> \n>>> c.issubset(a) #判断c是否是a的子集\nTrue\n>>> a.issuperset(c) #判断a是否是c的超集\nTrue\nAB的并集\n>>> a\nset(['q', 'r', 'e', 't', 'w'])\n>>> b\nset(['a', 'c', 'b'])\n>>> a | b\nset(['a', 'c', 'b', 'e', 'q', 'r', 't', 'w']) #ab的并集\n>>> a.union(b)\nset(['a', 'c', 'b', 'e', 'q', 'r', 't', 'w']) #ab的并集\nAB的交集\n>>> a\nset(['q', 'r', 'e', 't', 'w'])\n>>> b\nset(['a', 'q', 'c', 'b'])\n>>> a & b   #ab的交集\nset(['q'])\n>>> a.intersection(b)\nset(['q'])\nA相对B的差集\nA相对B不同的部分元素集合\n>>> a\nset(['q', 'r', 'e', 't', 'w'])\n>>> b\nset(['a', 'q', 'c', 'b'])\n>>> a - b\nset(['r', 'e', 't', 'w'])\n>>> a.difference(b)\nset(['r', 'e', 't', 'w'])\nAB的差集\nAB中不同元素的集合\n>>> a\nset(['q', 'r', 'e', 't', 'w'])\n>>> b\nset(['a', 'q', 'c', 'b'])\n>>> a.symmetric_difference(b)\nset(['a', 'c', 'b', 'e', 'r', 't', 'w'])\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "3"}