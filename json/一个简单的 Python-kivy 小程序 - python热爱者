{"title": "一个简单的 Python-kivy 小程序 - python热爱者 ", "index": "小程序,python", "content": "大家都知道，Python的用处是所有语言里面最广泛的，这使得它几乎可以开发任何的项目（除了前端）。\n而有一个方向是大家可能不熟悉，但是又确实存在的，那就是全平台APP开发，Python的kivy就是用来做这个事情的，你只需要一次编码，就能够让你的APP能够运行在IOS，Android，Windows，Linux甚至树莓派上。\n简单的Hello World！\n\n我们今天就来体验一下一`kivy`小程序，感受一下它写代码到底又多么容易\n首先我们需要创建一个`kivy`主文件\n# File: hello.py\n​\nimport kivy\nkivy.require('1.9.1')\n​\nfrom kivy.app import App\nfrom kivy.uix.button import Label\n​\nclass HelloApp(App):\n    def build(self):\n        return Label(text='Hello World')\n​\nif __name__==\"__main__\":\n    HelloApp().run()\n   \n然后通过python hello.py --size=200x150来执行这个脚本，将会得到一个界面如下\n\n控制层与表现层分离\n虽然如上的程序编码起来已经很简单了，但是逻辑部分和表现部分的代码混杂在一起，并不方便管理，因此`Kivy`提供了两层分离结构。\n控制层\n# File: hello2.py\n​\nfrom kivy.app import App\nfrom kivy.uix.button import Label\n​\nclass Hello2App(App):\n    def build(self):\n        return Label()\n​\nif __name__== \"__main__\":\n    Hello2App().run()\n2. 表现层\n#:kivy 1.9.1\n<Label>:\n    text: 'Hello World !'\n此处我们分别使用控制层与表现层来展现我们的APP，使得代码更加方便管理，分工更加清晰。\n避免全局样式覆盖组件\n以上虽然实现了开发过程中的代码可管理特性，但是按照如上的方法，所有的`Label`都将是同一个样式。因此为了避免这个情况，我们需要自定义组件（继承）\n# File: widgets.py\nfrom kivy.app import App\nfrom kivy.uix.widget import Widget\n​\nclass MyWidget(Widget):\n    pass\n​\nclass WidgetsApp(App):\n    def build(self):\n        return MyWidget()\n​\nif __name__ == \"__main__\":\n    WidgetsApp().run()\n<MyWidget>:\n    Button:\n        text: 'Hello'\n        font_size: 32\n        color: .8,.9,0,1\n        pos: 0,100\n        size: 100,50\n    Button:\n        text: 'World!'\n        font_size: 32\n        color: .8,.9,0,1\n        pos: 100,0\n        size: 100,50\n注意：此处的<MyWidget>不再简单的表示一个组件，而是象征着类。而Button:表示的是实例，因此我们就在界面中创建了两个Button实例。\n例中样式解析\n1、text文本内容\n2、font_size文本字体大小\n3、 color文本颜色\n4、pos组件位置，以组件的左上角坐标为定位\n5、size组件大小，指定像素量\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "2"}