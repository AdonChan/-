{"title": "python_bomb----排序函数 - python太阳花 ", "index": "python", "content": "li.sort()和sorted()\n\n列表里提供了sort方法，其他数据类型不能用  sorted可以对任何可迭代对象排序\nsort方法支持原地排序，变量排序后，变量本身改变  sorted方法返回一个新的列表，并不改变原变量的内容\n\nli = [1,4,76,23,32]\nprint(li.sort())\n-->None\nli\n-->[1, 4, 23, 32, 76]\n\nli = [1,4,76,23,32]\nprint(sorted(li))        #不改变原有列表次序\n-->[1, 4, 23, 32, 76]\nli    \n-->[1, 4, 76, 23, 32]\n\n\n默认li.sort()和sorted()方法由小到大排序，reverse=True时，从大到小排序\nlee = [1,3,6765,454,234,3434,3245]\nlee.sort(reverse=True)\nprint(lee)\n\n\n[6765, 3434, 3245, 454, 234, 3, 1]\nlee = [1,3,6765,454,234,3434,3245]\nprint(sorted(lee,reverse=True))\n\n\n[6765, 3434, 3245, 454, 234, 3, 1]\n字典排序\nstore = [\n    #商品名称，数量，价格\n    ('apple',40,2),\n    ('banana',17,1),\n    ('watermelon',12,5),\n    ('starwberry',17,10)\n]\nprint(sorted(store))    #默认按关键值排序\n\n#按照商品数量排序\n#key = 代表排序的关键字\ndef sorten_by_count(x):\n    return x[1]\n\nprint(sorted(store,key=sorten_by_count))\n\n#先按照商品数量由小到大进行排序，如果商品数量一致，则按照商品价格由小到大进行排序\n\ndef sorten_by_count_price(x):\n    return x[1],x[2]    #-x[2]商品价格从大到小\nprint(sorted(store,key=sorten_by_count_price))\n\n\n\n[('apple', 40, 2), ('banana', 17, 1), ('starwberry', 17, 10), ('watermelon', 12, 5)]\n[('watermelon', 12, 5), ('banana', 17, 1), ('starwberry', 17, 10), ('apple', 40, 2)]\n[('watermelon', 12, 5), ('banana', 17, 1), ('starwberry', 17, 10), ('apple', 40, 2)]\n\n按字符串长度排序\nl = ['hello','apple','cindy','sheenstar']\nprint(max(l,key=lambda x: len(x)))\n\nsheenstar\n奇偶排序\n# 有一个整数列表（10个元素），要求调整元素顺序\n#   把所有奇数放在前面，偶数放在后面\nimport random\n\nli = [random.randint(1, 10) for i in range(10)]\nprint(li)\n\nprint(sorted(li, key=lambda x: 1 if x % 2 == 0 else 0))\nprint(sorted(li,key=lambda x:x%2==0))\n\n\n[7, 10, 7, 9, 8, 2, 9, 6, 3, 10]\n[7, 7, 9, 9, 3, 10, 8, 2, 6, 10]\n[7, 7, 9, 9, 3, 10, 8, 2, 6, 10]\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}