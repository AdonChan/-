{"title": "python中5个json库的速度对比 ", "index": "json,python", "content": "python中json的序列化与反序列化有很多库，具体选择使用哪一个，或者哪一个速度更快呢？\n先上结果\njson序列化与反序列化速度对比（按总时间排序：测试数据100 * 10000）\n\nujson           序列化: 2.084    反序列化: 1.157      总时间: 3.241\nyajl            序列化: 1.910    反序列化: 1.970      总时间: 3.880\ncjson           序列化: 3.305    反序列化: 1.328      总时间: 4.632\nsimplejson      序列化: 10.279   反序列化: 4.658      总时间: 14.937\nstdlib json     序列化: 7.013    反序列化: 8.594      总时间: 15.607\n其中，除了stdlib json也就是内置的json.dumps外，其他都是第三方包。数据量较少时，速度几乎没有区别，无所谓选择哪一个。数据量大的情况下，ujson的总体表现最好，但序列化不如yajl\n而django中，如果只是response一个json对象，可以直接使用JsonResonse\n用法为：\n>>> from django.http import JsonResponse\n>>> response = JsonResponse({'foo': 'bar'})\n>>> response.content\n'{\"foo\": \"bar\"}'\n默认采用内置方式进json格式化后返回。如果数据不多，着实方便(django1.7引入)\n测试代码\n来自rtyler,在其基础上新增了ujson\nimport time\n\nimport pickle\nimport yajl\n\ntry:\n    import cjson\nexcept ImportError:\n    cjson = None\ntry:\n    import simplejson\nexcept ImportError:\n    simplejson = None\ntry:\n    import ujson\nexcept ImportError:\n    ujson = None\n\ntry:\n    import json\nexcept ImportError:\n    json = None\n\ndefault_data = {\n    \"name\": \"Foo\",\n    \"type\": \"Bar\",\n    \"count\": 1,\n    \"info\": {\n        \"x\": 203,\n        \"y\": 102, }, }\n\n\ndef ttt(f, data=None, x=100 * 10000):\n    start = time.time()\n    while x:\n        x -= 1\n        foo = f(data)\n    return time.time() - start\n\n\ndef profile(serial, deserial, data=None, x=100 * 10000):\n    if not data:\n        data = default_data\n    squashed = serial(data)\n    return (ttt(serial, data, x), ttt(deserial, squashed, x))\n\n\ndef test(serial, deserial, data=None):\n    if not data:\n        data = default_data\n    assert deserial(serial(data)) == data\n\n\ncontenders = [\n    ('yajl', (yajl.Encoder().encode, yajl.Decoder().decode)),\n]\nif cjson:\n    contenders.append(('cjson', (cjson.encode, cjson.decode)))\nif simplejson:\n    contenders.append(('simplejson', (simplejson.dumps, simplejson.loads)))\nif json:\n    contenders.append(('stdlib json', (json.dumps, json.loads)))\nif ujson:\n    contenders.append(('ujson', (ujson.dumps, ujson.loads)))\n\nfor name, args in contenders:\n    test(*args)\n    x, y = profile(*args)\n    print(\"%-11s serialize: %0.3f  deserialize: %0.3f  total: %0.3f\" % (\n        name, x, y, x + y))\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}