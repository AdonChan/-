{"title": "Python面向对象 - Python聚焦 ", "index": "python", "content": "面向对象编程——Object Oriented Programming，简称OOP，是一种程序设计思想。OOP把对象作为程序的基本单元，例如：JAVA。面向过程把函数作为程序的基本单元,例如：C语言。\nclass Person(object):\n    def __init__(self,name,age)    #__init__初始化方法,self为必传,指向创建的实例本身\n        self.__name=name            #__name为私有属性,无法直接访问,可以添加getset方法,或者通过_Person__name访问\n        self.__age=age\n    def set_name(self,name)\n        return self.__name=name\n    def get_name(self)\n        return self.__name\n    def print_info(self)\n        print('Name:-> ',self.name,'Age:-> ',self.age)\n\n使用Person类：\n    psn=Person('jim',22)        #创建Person实例\n    psn.print_info()            #使用方法\n继承：\nclass Student(Person):\n    def get_name(self):\n        return self.__name+'  --'\n\n测试：\nstu=Student('jim',22)\nstu.print_info()        #Name:-> jimAge:-> 22 可以使用父类方法\nstu.get_name()          #jim  --    覆盖父类的方法\n多态\ndef run_twice(Person):\n    Person.get_name()\n测试\nrun_twice(psn)    #jim\nrun_twice(stu)    #jim  -- 在这里，静态语言需要传入的必须是psn/stu,而动态语言只要传入有get_name()方法的对象就可以\n获取对象的信息(反射机制):type()    用来判断基本类型types模块中的常量    用来判断一个对象是否是函数使用isinstance(实例,类)    用来判断实例是否是类的子类或者自己的实例isinstance([1, 2, 3], (list, tuple))  判断前者是否是后者中的一个hasattr(对象，属性)    判断是否存在此属性setattr(对象，属性)    为对象设置属性getattr(对象，属性)    获取对象的属性\ntype('123')==str    #True\ntype('123')==type('456')    #True\ntype(run_twice))==types.FunctionType    #True\ntype(abs)==types.BuiltinFunctionType\ntype(lambda x: x)==types.LambdaType\ntype((x for x in range(10)))==types.GeneratorType\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}