{"title": "微信公众号开发小记——3.接入三方登录 - 后端开发那点事儿 ", "index": "微信开发,python", "content": "为什么要接入三方登录\n如果你的微信服务器要做复杂的逻辑，比如html5、给用户提供高级的服务，并且有很好看的页面等等，这种时候你就需要一个正常的web服务器，用户打通就需要做三方登录了。\n而如果你决定直接用weixin_server做web服务器完全没有问题，80端口给微信留着，剩下的你可以按照一个正常的django项目开发，前端可以接入weixin sdk。\npython-socail-auth\n我接触python-social-auth已经很久了，其中微信的backend就是我贡献的代码，然而当时做的时候比较年轻，而且这个项目处于一个很大的代码重构中，借这次机会重新用正确的姿势接入了一下三方登录，可以当做一个学习接入三方的demo。顺便提了weixin app登录的backend的一个pr。\n如果你想用这个weixin_server项目接入三方登录，可以参考feature/myauth分支，三方用的python-social-auth weixin app backend刚提pr不知道作者什么时候合并，如果要用先-e安装我的分之的这个版本我的python-social-auth,分支master_origin\n用户信息\ndjango默认的User信息肯定是不够用的，按照以前开发的尿性，我们需要一个UserProfile做onetoone的关联，记录额外信息。myauth/models.py\n配置\n参考文档配置即可，可以参考我的配置。\n注意配置中SOCIAL_AUTH_通用配置 | SOCIAL_AUTH_QQ_qq的配置的是因为这个地方源码 social/utils.py的代码来做到的。\n所谓的正确姿势\n关键就是这些pipeline，这是所谓的正确姿势。\nSOCIAL_AUTH_PIPELINE = (\n    'social.pipeline.social_auth.social_details',\n    'social.pipeline.social_auth.social_uid',\n    'social.pipeline.social_auth.auth_allowed',\n    'social.pipeline.social_auth.social_user',\n    'social.pipeline.user.get_username',\n    'social.pipeline.user.create_user',\n    'social.pipeline.social_auth.associate_user',\n    'social.pipeline.social_auth.load_extra_data',\n    'social.pipeline.user.user_details',\n    'myauth.pipeline.user.save_profile',\n)\n\n源码的action.py,通过do_complete方法我们可以看到，微信在做pipeline的时候是backend.continue_pipeline是一直根据配置的pipeline往下调用的，文档讲解的很清楚（比当年好多了），pipeline会暂时中断这次auth，做一些你想做的事情（用户名转化，根据微信的unioid关联唯一用户等等），然后回来继续，然而我当年是从中间某个位置直接跳转出去就不从这继续了，好吧现在用了正确的姿势，例如额外信息存储myauth.pipeline.user.save_profile。\n所以我的这个项目其实是错误的示范，star的同学们对不起了。\n过完pipeline之后微信会根据你settings.py中的各种跳转url根据不同的逻辑做跳转，你需要把其他的业务逻辑放在对应的view里面即可。\n然后你加个next参数做跳转就可以实现微信app里面的登录的功能了。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "8"}