{"title": "CentOS 下用 Nginx 和 uwsgi 部署 flask 项目 - EyEder的专栏 ", "index": "python,flask,uwsgi,nginx,centos", "content": "前一阵自己用flask框架写了一个博客程序，写完之后想部署到服务器上，因为是小白，所以自己google了好些资料，讲的零零碎碎而且有些地方只是告诉你怎么配置，但具体为什么这样配却没有说明，所以自己总结了一篇从头到尾的过程。\n服务器上部署项目说白了就是让你的项目在这台服务器上运行并且做到可以在公网上访问你的项目。那么如果要做到这两点，需要做的工作有如下几个方面：\n\n服务器的环境搭建，让服务器具有运行项目的必要环境\n上传你的项目代码到服务器\n配置服务器代理，处理来自Internet上的请求。\n\n1. 服务器的环境搭建\n首先说一下系统的选择问题，先排除掉Windows系统，在Linux系统下，Ubuntu,Debian,CentOS都很不错。\nUbuntu有强大的软件源支持，但它更适合于桌面操作系统。Debian稳定，占硬盘空间小，占内存小，但发展过快，其安全性和稳定性都没有CentOS好。所以我选择了CentOS。对于三者的比较可以看 http://waynerqiu.com/7/156.html。\n买来的服务器需要用远程连接来操作，这里推荐使用putty。我使用的是CentOS 6.3 x86_64，不同的版本可能在安装软件的地址可能会有些不同。\nLinux系统下自带了低版本的python，可以通过python -V查看。自带的python版本会和系统的一些功能有关联，比如yum。\nflask项目需要python2.7以上的版本，所以我们需要在系统中安装python2.7或python3.5。\n下载并安装 Python 2.7.5：\n#wget http://www.python.org/ftp/python/2.7.5/Python-2.7.5.tar.bz2 \n如果此时没有wget，可以通过yum install wget来安装\n#tar jxvf Python-2.7.5.tar.bz2\n#cd Python-2.7.5\n#./configure --prefix=/usr/local\n#make && make install\n这时的python2.7.5还不是我们系统将会使用的python(现在键入python -V后，显示的还会是低版本的python)。所以需要建立软连接，使系统默认的python指向python2.7.5。\n#mv /usr/bin/python /usr/bin/python2.4.3   //你的python版本可能不同\n#ln -s /usr/local/bin/python27 /usr/bin/python\n使用了新版本的python会导致yum安装软件报错，因为yum没有兼容python2.7，所以我们要指定yum使用的python版本。\n#vi /usr/bin/yum\n进入编辑模式，将#!/usr/bin/python改成#!/usr/bin/python2.7.5\n安装相关的开发工具盒和一些包\n#yum groupinstall \"Development tools\"\n#yum install zlib zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel\n安装pip\n# wget https://pypi.python.org/packages/source/p/pip/pip-1.3.1.tar.gz --no-check-certificate\n由于下载pip是基于https协议的，故需要在wget url后面加上--no-check-certificate，否则不能下载。\n解压和安装pip\n#chmod +x pip-1.3.1.tar.gz \n#tar xzvf pip-1.3.1.tar.gz \n#cd pip-1.3.1 \n#python setup.py install \n在最后一步可能会报错\"ImportError: No module named setuptools\"，原因是没有安装setuptools\n安装setuptools\n#wget https://pypi.python.org/packages/2.7/s/setuptools/setuptools-0.6c11-py2.7.egg  --no-check-certificate \n#chmod +x setuptools-0.6c11-py2.7.egg \n#sh setuptools-0.6c11-py2.7.egg \n这一步也有可能报错\"zlib not available\"，可以使用#rpm -qa | grep zlib 查看可用的安装包，将没有安装的安装上(上面我们已经安装了zlib和zlib-devel)\n再次运行sh setuptools-0.6c11-py2.7.egg，发现还是报错？同样的错误？\n那么这应该不是zlib的问题，而是python的问题，我们需要重新编译python2.7.5，在编译之前需要修改一下Modules/Setup.dist文件。找到\n#zlib zlibmodule.c -I$(prefix)/include -L$(exec_prefix)/lib -lz\n将注释去掉，重新编译python2.7.5\n#cd Python-2.7.5\n#./configure --prefix=/usr/local\n#make && make install\n这样zlib应该可以用了，回到setuptools的安装，再回到pip的安装，这回总算把pip安装上了。你可以在全局环境下安装flask相关的包(如果你的服务器中包括将来只想运行一个项目的话），也可以将包安装在虚拟环境中。先别急，把项目代码上传了再说。\n2. 上传你的项目代码到服务器\n接下来可以上传你的flask项目代码到服务器上，可以使用flashFXP或者FileZilla来上传。\n这里按照我的上传目录来介绍接下来的步骤，我的flask项目代码放在了 /home/www/WebBlogold（WebBlogold就是我的项目文件夹）。不明白Linux目录结构？可以google一下，这里推荐一篇 http://yangrong.blog.51cto.com/6945369/1288072。\n如果你的服务器上有多个项目，那么建议你安装virtualenv虚拟环境。virtualenv可以解决项目与项目之间对同一个包的不同版本的依赖问题。\n使用pip安装virtualenv虚拟环境\npip install virtualenv \n进入项目目录，在目录下键入 virtualenv venv，其中venv是你要建的虚拟环境文件夹的名字，结果会出现下面两行\nNew python executable in venv/bin/python\nInstalling setuptools, pip...done.\n说明文件夹已经建好，使用 source venv/bin/activate 命令来启用虚拟环境，启用后你当前的路径名的前面会有一个(venv)。\n在虚拟环境下安装flask相关包，你可以一个一个安装，也可以将所有的包写在一个txt文件里，一次性安装。\nflaskrelated.txt文件：\nFlask==0.10.1\nFlask-Login==0.2.11\nFlask-Mail==0.9.1\nFlask-Moment==0.4.0\nFlask-PageDown==0.1.5\nFlask-SQLAlchemy==2.0\n等等\n保存在你的项目文件夹下，在虚拟环境中键入 pip install -r flaskrelated.txt 来安装他们。\n3. 配置服务器代理\n我的服务器代理是安装在全局中的，当然你也可以在虚拟环境里安装。\n使用的代理一共有两个，nginx和uwsgi，先说明一下，如果不用nginx一样可以访问你的项目，使用nginx的目的是为了安全和负载均衡。配置了nginx做前端代理，uwsgi作后端代理的服务器(这里所说的前后端都是相对的位置，并无实际含义)，在处理来自Internet的请求时，要先经过nginx的处理，nginx把请求再交给uwsgi，经过uwsgi才能访问到项目本身。\n没有nginx而只有uwsgi的服务器，则是Internet请求直接由uwsgi处理，并反馈到我们的项目中。nginx可以实现安全过滤，防DDOS等保护安全的操作，并且如果配置了多台服务器，nginx可以保证服务器的负载相对均衡。\n而uwsgi则是一个web服务器，实现了WSGI协议(Web Server Gateway Interface)，http协议等，它可以接收和处理请求，发出响应等。所以只用uwsgi也是可以的。\n先安装uwsgi\npip install uwsgi\n在你的项目根目录下创建一个配置文件uwsgiconfig.ini(uwsgi支持多种配置文件格式，xml，ini，json等)\n[uwsgi]\n\nsocket = 127.0.0.1:8001     //启动程序时所使用的地址和端口，通常在本地运行flask项目，\n                            //地址和端口是127.0.0.1:5000,\n                            //不过在服务器上是通过uwsgi设置端口，通过uwsgi来启动项目，\n                            //也就是说启动了uwsgi，也就启动了项目。\nchdir = /home/www/     //项目目录\n\nwsgi-file = manage.py      //flask程序的启动文件，通常在本地是通过运行  \n                           //      python manage.py runserver 来启动项目的\n\ncallable = app      //程序内启用的application变量名\n\nprocesses = 4     //处理器个数\n\nthreads = 2     //线程个数\n\nstats = 127.0.0.1:9191      //获取uwsgi统计信息的服务地址\n保存配置文件，我们可以通过键入 uwsgi uwsgiconfig.ini 来启动uwsgi。\n安装nginx：由于nginx不在yum安装软件源里，所以添加上\n#rpm -ivh http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm\n#yum install nginx\nnginx的一些命令\n\n启动： nginx\n停止： nginx -s -stop\n强制停止： pkill -9 nginx\n查看nginx是否应用配置文件: nginx -t\n查看版本： nginx -v\n\n先别急着启动我们的nginx代理服务器，先来写一下nginx的配置文件。\nnginx的配置文件在/etc/nginx/conf.d/文件夹下，也有可能在/etc/nginx/sites-enabled/default。我们打开默认的配置文件，大部分内容都是加注释的，需要我们修改。\nevents {\n    worker_connections  1024;\n}\nhttp {\n    include       mime.types;    \n    default_type  application/octet-stream;    \n    sendfile        on;    \n    keepalive_timeout  65;\n\n    server {\n        listen       80;         //默认的web访问端口\n        server_name  xxx.xxx.xxx.xxx;     //你的公网ip\n        #charset koi8-r;\n        access_log  /home/www/WebBlogold/logs/access.log;    //服务器接收的请求日志，\n                                                             //需要在项目文件夹下创建\n                                                             //logs文件夹，下同。\n        error_log  /home/www/WebBlogold/logs/error.log;         //错误日志\n\n        location / {\n\n            include        uwsgi_params;     //这里是导入的uwsgi配置\n\n            uwsgi_pass     127.0.0.1:8001;   //需要和uwsgi的配置文件里socket项的地址\n                                             //相同,否则无法让uwsgi接收到请求。\n\n            uwsgi_param UWSGI_PYHOME /home/www/WebBlogold/venv;   //python的位置(虚拟环境下)\n\n            uwsgi_param UWSGI_CHDIR  /home/www/WebBlogold;     //项目根目录\n\n            uwsgi_param UWSGI_SCRIPT manage:app;     //启动项目的主程序(在本地上运行\n                                                     //这个主程序可以在flask内置的\n                                                     //服务器上访问你的项目)\n\n        }\n    }\n}\n下面是一堆#，全都是注释，不用管它。\n在启动nginx时，如果发现报错\"98:Address already in use\",不要着急，很有可能是因为你的nginx已经启动了。\n通过 netstat -ntlp 查看端口占用情况，看看是不是你的nginx占用的80端口。如果发现有其他程序占用了nginx的默认的80端口，可以杀掉这些进程，再启动nginx。\n到此，我们终于完成了所有的工作，马上就可以访问自己的项目了。\n现在，检查一下nginx的配置文件是否应用  nginx -t  没有成功应用的话，检查一下配置文件。\n\n键入 nginx 来启动nginx\n键入uwsgi uwsgiconfig.ini 启动uwsgi\n\n这时uwsgi会告诉你你的项目是否有错误，如果本地运行良好，一般是没有错误的。\n有可能会报的错是项目相关模块的引入路径不对，修改一下便可。没有报错的话，打开浏览器，输入你的服务器IP地址，或者如果你有相应的域名，并解析到了你的IP，输入域名也可以。\n如果一切顺利的话，显示的就是你想要的页面了，如果不是，首先查看一下日志文件，他们在你的项目根目录下logs文件夹里。\n\n                ", "mainLikeNum": ["11 "], "mainBookmarkNum": "68"}