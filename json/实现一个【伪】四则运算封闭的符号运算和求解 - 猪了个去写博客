{"title": "实现一个【伪】四则运算封闭的符号运算和求解 - 猪了个去写博客 ", "index": "数学,python", "content": "最后的效果：\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    x = Symbols(\"x\")\n    print(x * 2 + 1 == 8.0 * x + 6).solution\n打印：{'x': -0.8333333333333334}这里用了8.0是因为众所周知的Python2.7+,对于整数除法用的是整除,3/2=1什么的，Python3后来有用//这个操作符的，这里不是重点，不用管\n昨天快下班的时候事情做完了，于是开始划水，看到sympy是个符号运算的库，我就在想要是让我实现该有多难呢。。感觉真是非常适合新手/高中生的一个题目呢~\n好吧，那么我们从四则运算封闭的符号系统做起~\n下班后先写了一点，然后吃饭的时候构思了一下，写完啦。今天又补了一点求解一元一次方程。。。\n学到的是\n\n数学方面，符号对四则运算封闭的话，需要额外的两个参数：1、系数，2、次数。例如系数是2，次数是3。发现这个问题之后，果断摒弃了次数。最后实现的符号运算，符号与实数对四则运算封闭，符号与符号对加减封闭(多么偷懒啊哈哈哈哈~原谅我没文化）\nPython上，知道了doctest的通过单元测试要实现__repr__方法。不然在写文档测试时：\n\n\"\"\"\n>>> Symbols(\"x\",2) / 4.0\nSymbols(\"x\",0.5)\n\"\"\"\n会报如下错误\nFailed example:\n Symbols(\"x\",2) / 4.0\nExpected:\n Symbols(\"x\",0.5)\nGot:\n <__main__.Symbols object at 0x10d5718d0>\n丢一个不知道能不能让爬虫爬到。关键词：doctest class test\n还有知道了a+1重载__add__方法，而1+a并不需要重载Int,直接重载a的__radd__就行了。。\n多元一次方程的话。。想了想感觉还是挺啰嗦的，就算了。。。加上次数，感觉要涉及高数了。。。做起来好啰嗦。。积分。。。阿西BUG，高数忘光了。如果我真的能有机会做的话\n代码：https://gist.github.com/zjjott/0eb6ff1947cd213dd70a\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}