{"title": "LibShortText简要入门 - 码农咖啡馆 ", "index": "支持向量机,svm,数据挖掘,python", "content": "LibShortText是一个开源的Python短文本（包括标题、短信、问题、句子等）分类工具包。它在LibLinear的基础上针对短文本进一步优化，主要特性有：\n- 支持多分类\n- 直接输入文本，无需做特征向量化的预处理\n- 二元分词（Bigram），不去停顿词，不做词性过滤\n- 基于线性核SVM分类器（参见SVM原理简介：最大间隔分类器），训练和测试的效率极高\n- 提供了完整的API，用于特征分析和Bad Case检验\n\n安装\n\n下载并在解压后的目录下make就OK了。注意：不支持Windows系统；Mac OS和Linux之间的库不通用\n\n性能对比\n\n关于LibShortText的性能，我们可以拿scikit-learn的朴素贝叶斯（参见用scikit-learn实现朴素贝叶斯分类器）和SVM（也是基于LibLinear）就前文提到的网页标题分类问题进行横向对比：\n\n\n\n分类器\n  准确率\n  计算时间（秒）\n\n\n\nscikit-learn(nb)\n  76.8%\n  134\n\n\nscikit-learn(svm)\n  76.9%\n  121\n\n\nlibshorttext\n  79.6%\n  49\n\n\n\n测试环境为低配版MBA2013\n\n显然LibShortText无论在准确率和效率上都要更胜一筹。\n\nAPI说明\n\n虽然LibShortText提供了训练和测试的类命令行操作方式，但直接从Python脚本调用更加灵活和强大，了解和训练、预测和分析相关的API是有帮助的。\n\n预处理\n\nConverter模块负责将文本转化为数值化的数据集（数据格式与LibSVM相同），由于内置的分词器仅支持英文，如果要用于中文短文本的分类，就必须替换分词器（如下代码所示）。分词器是一个将文本转化为单词列表的函数，值得注意的是：分词器不会和模型一起保存，当重载模型时也必须重载分词器。\n\npythonfrom libshorttext.libshorttext.converter import *\n\ntext_converter = Text2svmConverter()\ntext_converter.text_prep.tokenizer = comma_tokenizer\nconvert_text(train_file, text_converter, svm_file)\n\n\n训练文本的格式如下：\n\n\n  娱乐\\t组图：刘亦菲短裙秀腿 浓妆变冷艳时髦女\n\n\n模型\n\nLibShortText提供两组参数供训练时使用：\n- train_arguments实际上是LibLinear的训练参数，可设定松弛参数C等\n- feature_arguments是特征的表现形式，如词数、词频、TF-IDF等\n\n预测\n\n获得模型后，我们可以预测新文本的类别，LibShortText提供了两个API：\n\n\npredict_text(text_file, model) -- 针对以行分隔的测试文本\npredict_single_text(single_text, model) -- 针对单条文本\n\n类别预测将返回一个PredictResult的对象，包含下列属性：\n\n\npredicted_y -- 预测的类别（对单条文本预测时是字符串对象，对测试文本预测时是列表对象）\ndecvals -- 被预测文本对所有类别的决策变量，与文本到分类超平面的距离有关。它是一个列表而非字典对象，如果你希望和类别关联起来，可借助model的get_labels()：\n\npythondecvals = zip(model.get_labels(), predict_result.decvals)\n\n\n\ntrue_y -- 真实的类别（仅对测试文本预测时存在）\nget_accuracy() -- 获得测试的准确率（仅对测试文本预测时存在）\n\n分析\n\nanalyzer的作用是分析LibShortText的预测结果，通过它我们可以了解哪些特征更为关键、哪些类别容易被混淆。\n比如分析一条体育新闻的标题：\n\npythonanalyzer = Analyzer(model)\nanalyzer.analyze_single('国青错失绝杀0-0韩国 下轮平越南就出线')\n\n\n终端输出如下：\n\n\n\n\n  sports\n  news\n  game\n  food\n  porn\n\n\n\n……\n  \n  \n  \n  \n  \n\n\n国 青\n  4.600e-01\n  -1.349e-01\n  -4.283e-03\n  0.000e+00\n  0.000e+00\n\n\n……\n  \n  \n  \n  \n  \n\n\ndecval\n  1.192e+00\n  3.396e-01\n  3.132e-01\n  2.196e-01\n  1.910e-01\n\n\n\n可见「国」和「青」一起促成最关键的sports类特征。\n又比如，选择被误分的样本，调用gen_confusion_table()输出sports、star和movie的混淆表格，以了解哪些类别的特征界限比较模糊。\n\npythonanalyzer = Analyzer(model)\ninsts = InstanceSet(predict_result).select(wrong, with_labels(['sports', 'movie', 'star']))\nanalyzer.gen_confusion_table(insts)\n\n\n终端输出如下（第一行表示预测类别，第一列表示真实类别）：\n\n\n\n\n  star\n  movie\n  sports\n\n\n\nstar\n  0\n  19\n  5\n\n\nmovie\n  21\n  0\n  1\n\n\nsports\n  15\n  4\n  0\n\n\n\n完整demo请见lst_classifier.py。\n\n\n  来自：建造者说\n\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "5"}