{"title": "opencv python BRIEF描述子 - 个人文章 ", "index": "opencv-python,opencv,python", "content": "BRIEF (Binary Robust Independent Elementary Features) \n理论\n我们知道SIFT使用128-dim向量作为描述符，由于它使用浮点数，因此基本上需要512个字节，类似地，SURF也至少需要256个字节（对于64-dim），为数千个特征创建这样的向量需要大量的内存，这对于资源约束应用程序尤其是嵌入式系统是不可行的，内存越大，匹配所需的时间越长.\n实际匹配可能不需要所有这些尺寸，可以使用PCA，LDA等几种方法对其进行压缩。甚至使用LSH（Locality Sensitive Hashing）等散列的其他方法也可以将浮点数中的这些SIFT描述符转换为二进制字符串.\nBRIEF：一种对已检测到的特征点进行描述的算法，它是一种二进制编码的描述子，在图像匹配时使用BRIEF能极大的提升匹配速度.\n算法步骤：\n\n· 为减少噪声干扰，先对图像进行高斯滤波（方差为2，高斯窗口为9x9）\n·以特征点为中心，取SxS的邻域大窗口。在大窗口中随机选取一对（两个）5x5的子窗口，比较子窗口内的像素和（可用积分图像完成），进行二进制赋值.（一般S=31）\n\n$$\n\\tau(p;x,y):=\\begin{cases}1,\\quad if  p(x) < p(y)\\\\\n0,\\quad otherwise\n\\end{cases}\n$$\n其中，p(x)，p(y)分别随机点x=(u1,v1),y=(u2,v2)所在5x5子窗口的像素和.\n·在大窗口中随机选取N对子窗口，重复步骤2的二进制赋值，形成一个二进制编码，这个编码就是对特征点的描述，即特征描述子.（一般N=256）\nNOTE：FAST算法提取特征点+BRIEF计算描述子 就构成了 ORB特征点提取部分.\nBRIEF in OpenCV\n\nimport numpy as np\nimport cv2\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('img5.png',0)\n# Initiate FAST detector\nstar = cv2.xfeatures2d.StarDetector_create()\n\n# Initiate BRIEF extractor\nbrief = cv2.xfeatures2d.BriefDescriptorExtractor_create()\n\n# find the keypoints with STAR\nkp = star.detect(img,None)\n\n# compute the descriptors with BRIEF\nkp, des = brief.compute(img, kp)\n\nprint( brief.descriptorSize() )\nprint( des.shape )\n输出：Backend TkAgg is interactive backend. Turning interactive mode on.32(61, 32)\nNOTE:需要安装opencv-contrib-python\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}