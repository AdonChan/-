{"title": "有关Python2.x版本下的dis模块的使用 - 玖色堇 ", "index": "python", "content": "有关Python2.x版本下的dis模块的使用\n　　事情源于昨天看书看到一个有意思的部分，就是在Python元组里面的元素如果存在可变的对象，比如Python里面的列表，类似下面这种形式：\nt = (1, 2, [3, 4])\n　　那么如果我执行t[2] += [5, 6]会发生什么，首先给我的感觉是这个会报错吧，这个是显而易见的，但是5能否添加进去呢？哈哈，突然觉得有点意思了，然后答案就是:\nt变成(1, 2, [3, 4, 5, 6])\n因为tuple不支持对它的赋值，所以会抛出TypeError异常\n　　具体的报错信息可以在交互式环境中自行测试一下　　这个时候我们可以使用Python的dis模块来反编译一下，看看操作的字节码，如下所示：\nIn [14]: dis.dis(compile(\"t[2]+=[5, 6]\", \" \", \"single\"))\n  1           0 LOAD_NAME                0 (t)\n              3 LOAD_CONST               0 (2)\n              6 DUP_TOPX                 2\n              9 BINARY_SUBSCR\n             10 LOAD_CONST               1 (5)\n             13 LOAD_CONST               2 (6)\n             16 BUILD_LIST               2\n             19 INPLACE_ADD\n             20 ROT_THREE\n             21 STORE_SUBSCR\n             22 LOAD_CONST               3 (None)\n             25 RETURN_VALUE\n　　因为我使用的是Python2的版本，所以在使用dis.dis的时候，我们需要先将代码编译一下，即使用compile方法，这里需要注意的是第三个参数，第三个参数有三个选项，\"single\"、\"eval\"、\"exec\"，具体的可以help查看一下，下面我们来说一下上面字节码的关键行的解释：\nBINARY_SUBSCR 表示将t[2]存入栈顶TOS\nINPLACE_ADD 表示计算 TOS+[5, 6]，这一步是可以完成的，因为TOS指向的是一个可变对象，也就是[3, 4]这个列表\nSTORE_SUBSCR 这一步失败，这是因为t是一个元组，是不可变的，对其元素进行赋值是不被允许的\n　　所以我的建议是：\n\n不要把可变对象放入元组里面\n增量赋值不是一个原子操作，像上面的那样，虽然抛出错误，但是还是完成了操作\n了解Python代码背后的运行机制很有帮助\n不建议这样，虽然我们可以使用t[2].extend([5, 6])来完成操作，但是我们仍然不建议这样做，不要将可变对象放入元组中。\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}