{"title": "【python】简单的服务器监控 - 个人文章 ", "index": "监控,python", "content": "需求\n因为目前服务器规模较小，使用zabbix，nagios 等开源的监控系统的必要性并不高，加上配置维护花费的时间成本，所以决定通过自己的脚本，配合saltstack来处理。监控原理很简单，server端负责处理监控信息，agent 端负责收集信息，并统一发送到服务器端。\n服务器端\n脚本目录├── weixin.py├── __init__.py└── main.py\nmain.py\n#!/usr/bin/python2.7\n# -*- coding: utf-8 -*-\nimport time, socket, threading,json\nfrom weixin import senddata,gettoken\n\ndef tcplink(sock, addr):\n    print 'New Connection from %s:%s...' % addr\n    res={}\n    while True:\n        data = sock.recv(1024)\n        time.sleep(1)\n        if data == 'exit' or not data:\n            break\n        res = data\n        handler(res)\n    sock.close()\n    print 'Connection from %s:%s closed.' % addr\n    return res\n\n# 错误报告\ndef report(data):\n    content = ''\n    for d in data:\n        content = content + d + \"\\n\"\n    print content\n    corpid = 'xxxxxxxxxxxx'\n\n    corpsecret = 'xxxxxxxxxxxxxxxxx'\n\n    accesstoken = gettoken(corpid, corpsecret)\n\n    msg = senddata(accesstoken, content)\n    print msg\n    print data\n\n\n# 处理客户端消息，根据阈值判断\ndef handler(res):\n    try:\n        data = json.loads(res)\n    except Exception,e:\n        print e\n        print \"Data type wrong.\"\n        return False\n    m_type = data['type']\n\n    # 服务器资源监控\n    if m_type == 1:\n        # ip\n        ip = data['ip']\n        # ip\n        name = data['name']\n\n        # cpu 利用率\n        cpu_use = data['cpu_use']\n\n        # cpu load (可以改进通过获取cpu核数来动态判断)\n        cpu_load = data['cpu_load']\n\n        # 内存 利用率\n        mem_use = data['mem_use']\n\n        # 磁盘利用率\n        disk_use = data['disk_use']\n\n        message = [\"ip: %s\" % ip, \"name: %s\" % name]\n        print ip,cpu_use,cpu_load,mem_use,disk_use\n        if cpu_use > 95:\n            message.append(\"cpu_use: %s\" % cpu_use)\n        if cpu_load > 3:\n            message.append(\"cpu_load: %s\" % cpu_load)\n        if mem_use > 85:\n            message.append(\"mem_use: %s\" % mem_use)\n        if disk_use > 75:\n            message.append(\"disk_use: %s\" % disk_use)\n\n        if message.__len__() > 2:\n            report(message)\n            return True\n    # 服务监控\n    elif m_type == 2:\n        print \"service eyes...\"\n        print data\n        message = [\"oops some service down!\"]\n        if data[\"status\"] == 1:\n            message.append(\"message: %s\" % data)\n            report(message)\n            return True\n\nif __name__==\"__main__\":\n    print \"Minitor Service Listening on 9999 port.\"\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.bind(('0.0.0.0', 9999))\n    s.listen(5)\n    while True:\n        sock, addr = s.accept()\n        t = threading.Thread(target=tcplink, args=(sock, addr))\n        t.start()\nweixin.py\nimport requests\nimport json\nimport sys\n\ndef gettoken(corp_id, corp_secret):\n\n    gettoken_url = 'https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=' + corp_id + '&corpsecret=' + corp_secret\n\n    try:\n\n        token_file = requests.get(gettoken_url)\n\n    except requests.HTTPError as e:\n\n        print(e.code)\n\n        print(e.read().decode(\"utf8\"))\n\n    token_data = token_file.text.decode('utf-8')\n\n    token_json = json.loads(token_data)\n\n    token_json.keys()\n\n    token = token_json['access_token']\n\n    return token\n\n\ndef senddata(access_token,content):\n\n    send_url = 'https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=' + access_token\n\n    send_values = {\n\n        \"touser\":\"187xxxxxxxx|185xxxxxxxx\",\n\n        \"msgtype\":\"text\",\n\n        \"agentid\":\"17\",\n\n        \"text\":{\n\n            \"content\":content\n\n            },\n\n        \"safe\":\"0\"\n\n        }\n\n    send_data = json.dumps(send_values, ensure_ascii=False).encode(encoding='UTF8')\n\n    response = requests.post(send_url, send_data)\n\n\n    msg = response.text\n\n    return msg\n\n\ndefault_encoding = 'utf-8'\n\nif sys.getdefaultencoding() != default_encoding:\n\n    reload(sys)\n\n    sys.setdefaultencoding(default_encoding)\n\n客户端 1\n# monitor.py\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nfrom __future__ import division\nimport socket\nimport psutil\nimport os\n\n\n# 内存\ndef getMonitor():\n\n    # 主机信息\n    name =  socket.getfqdn(socket.gethostname())\n    ip = socket.gethostbyname(name)\n\n    # n内存\n    mem=psutil.virtual_memory()\n    mem_use = int((mem.available/mem.total)*100)\n\n    # cpu\n\n    cpuload_1, cpuload_5, cpuload_15 = os.getloadavg()\n    cpu_load = cpuload_5\n\n    # cpu_use = psutil.cpu_percent(1)\n    cpu = psutil.cpu_percent(interval=5, percpu=True)\n    cpu_count = psutil.cpu_count()\n    cpu_use_total = 0\n    for c in cpu:\n        cpu_use_total=cpu_use_total + c\n    cpu_use = cpu_use_total/cpu_count\n\n    # 磁盘\n    disk_use = psutil.disk_usage('/').percent\n    data = {\n        \"type\": 1,\n        \"ip\": ip,\n        \"name\": name,\n        \"cpu_load\": cpu_load,\n        \"cpu_use\": cpu_use,\n        \"mem_use\": mem_use,\n        \"disk_use\": disk_use,\n    }\n    print str(data)\n    return str(data).replace(\"'\", '\"')\n\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n# 建立连接:\ns.connect(('server_ip', 9999))\n\ndata = getMonitor()\ntry:\n    s.send(data)\n    s.close()\nexcept Exception,e:\n    print e\n    s.close()\n\n客户端 2\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nfrom __future__ import division\nimport socket\nimport os,commands,json\n\n# 获取通过systemclt 工具管理的系统服务状态\ndef check_status(service_name):\n    status = os.system('sudo systemctl status ' + service_name+ ' > /dev/null')\n    return status \n\n# 要监控的服务列表\nservice_lists = ['config.service','xxx.service','xxx.service'] \n\n\ndef get_status(service_lists):\n    \"\"\"\n    type == 1 硬件监控\n    type == 2 服务监控\n    type == x xxxxxx\n    \"\"\"\n    data = {\"type\": 2, \"status\": 0}\n    for service in service_lists:\n        re = check_status(service)\n        if re != 0:\n            data[service] = \"down\"\n            data[\"status\"] = 1\n    print str(data)\n    return str(data).replace(\"'\", '\"')\n\ndata = get_status(service_lists)\n\nif json.loads(data)[\"status\"] == 1:\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # 建立连接:\n    s.connect(('server_ip', 9999))\n    try:\n        s.send(data)\n        s.close()\n    except Exception,e:\n        print e\n        s.close()\n运行方式\n客户端  在saltstack 服务器上定时执行 监控脚本\n*/5 * * * * salt '*' cmd.script  salt://scripts/monitor.py python_shell=true*/5 * * * * salt '*' cmd.script  salt://scripts/monitor_service_status.py python_shell=true\n服务器加入系统进程，侦听tcp端口\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "5"}