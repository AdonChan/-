{"title": "Python数据结构——队列 - Geek情怀 ", "index": "队列,数据结构与算法,python", "content": "队列是一种列表，不同的是队列只能在队尾插入元素，在队首删除元素。队列用于存储按顺序排列的数据，先进先出，这点和栈不一样，在栈中，最后入栈的元素反而被优先处理。可以将队列想象成在银行前排队的人群，排在最前面的人第一个办理业务，新来的人只能在后面排队，直到轮到他们为止。\n队列是一种先进先出（First-In-First-Out，FIFO）的数据结构。队列被用在很多地方，比如提交操作系统执行的一系列进程、打印任务池等，一些仿真系统用队列来模拟银行或杂货店里排队的顾客。\n\n队列的两种主要操作是：向队列中插入新元素和删除队列中的元素。插入操作也叫做入队，删除操作也叫做出队。入队操作在队尾插入新元素，出队操作删除队头的元素。\n队列的另外一项重要操作是读取队头的元素。这个操作叫做peek()。该操作返回队头元素，但不把它从队列中删除。除了读取队头元素，我们还想知道队列中存储了多少元素，可以使用size()满足该需求。\nqueue通常的操作：\nQueue()        定义一个空队列，无参数，返回值是空队列。\nenqueue(item)  在队列尾部加入一个数据项，参数是数据项，无返回值。\ndequeue()      删除队列头部的数据项，不需要参数，返回值是被删除的数据，队列本身有变化。\nisEmpty()      检测队列是否为空。无参数，返回布尔值。\nsize()         返回队列数据项的数量。无参数，返回一个整数。\n\n队列操作举例：\n\n\nQueue Operation\nQueue Contents\nReturn Value\n\n\n\nq.isEmpty()\n[]\nTrue\n\n\nq.enqueue(4)\n[4]\n \n\n\nq.enqueue('dog')\n['dog',4]\n \n\n\nq.enqueue(True)\n[True,'dog',4]\n \n\n\nq.size()\n[True,'dog',4]\n3\n\n\nq.isEmpty()\n[True,'dog',4]\nFalse\n\n\nq.enqueue(8.4)\n[8.4,True,'dog',4]\n \n\n\nq.dequeue()\n[8.4,True,'dog']\n4\n\n\nq.dequeue()\n[8.4,True]\n'dog'\n\n\nq.size()\n[8.4,True]\n2\n\n\n\nQueue 类模拟:\nclass Queue:\n    \"\"\"模拟队列\"\"\"\n    def __init__(self):\n        self.items = []\n\n    def isEmpty(self):\n        return self.items == []\n\n    def enqueue(self, item):\n        self.items.insert(0,item)\n\n    def dequeue(self):\n        return self.items.pop()\n\n    def size(self):\n        return len(self.items)\n\n以下是测试代码：\nq=Queue()\nq.isEmpty()\n\nq.enqueue('dog')\nq.enqueue(4)\nq=Queue()\nq.isEmpty()\n\nq.enqueue(4)\nq.enqueue('dog')\nq.enqueue(True)\n\n\n                ", "mainLikeNum": ["4 "], "mainBookmarkNum": "21"}