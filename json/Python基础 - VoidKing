{"title": "Python基础 - VoidKing ", "index": "python", "content": "前言\nPython，是龟叔在1989年为了打发无聊的圣诞节而编写的一门编程语言，特点是优雅、明确、简单，现今拥有丰富的标准库和第三方库。Python适合开发Web网站和各种网络服务，系统工具和脚本，作为“胶水”语言把其他语言开发的模块包装起来使用，科学计算等等。\n小编学习Python的理由有三个：为了爬取需要的各种数据，不妨学习一下Python。为了分析数据和挖掘数据，不妨学习一下Python。为了做一些好玩有趣的事，不妨学习一下Python。\n准备工作\n1、在Python官网下载安装喜欢的版本，小编使用的，是当前最新版本3.6.0。\n2、打开IDLE，这是Python的集成开发环境，尽管简单，但极其有用。IDLE包括一个能够利用颜色突出显示语法的编辑器、一个调试工具、Python Shell，以及一个完整的Python3在线文档集。\nhello world\n1、在IDLE中，输入print('hello world')，回车，则打印出hello world。PS：语句末尾加不加分号;都可以，小编决定不加分号，更简单。\n2、使用sublime新建文件hello.py，内容如下：\nprint('hello world')\n在Windows下，shift+右键，在此处打开命令窗口，执行python hello.py，回车，则打印出hello world。\n3、使用sublime新建文件hello.py，内容如下：\n#!/usr/bin/env python\nprint('hello world')\n在Linux或Mac环境下，可以直接运行脚本。首先添加执行权限chmod a+x hello.py，然后执行./hello.py。当然，也可以和Windows一样，使用python hello.py来执行脚本。\n引入模块\n1、新建name.py，内容如下：\nname='voidking'\n2、执行python name.py。3、进入python shell模式，执行import name，print(name.name)，则打印出voidking。\n基础语法\n常用函数（print）、数据类型、表达式、变量、条件和循环、函数。和其他语言类似，下面选择一部分展开。\nlist链表数组\n1、定义数组myList = ['Hello', 100, True]2、输出数组print(myList)3、输出数组元素print(myList[0])，print(myList[-1])4、追加元素到末尾myList.append('voidking')5、追加元素到头部myList.insert(0,'voidking')6、删除元素myList.pop()，myList.pop(0)7、元素赋值myList[0]='hello666'\ntuple固定数组\n1、定义数组myTuple = ('Hello', 100, True)错误定义：myTuple1=(1)，正确定义：myTuple=(1,)2、输出数组print(myTuple)3、输出数组元素print(myTuple[0])4、tuple和list结合t = ('a', 'b', ['A', 'B'])，t[2][0]='X'\nif语句\nif\nscore = 75\nif score>=60:\n    print 'passed'\n两次回车，即可执行代码。\nif-else\nif score>=60:\n    print('passed')\nelse:\n    print('failed')\nif-elif-else\nif score>=90:\n    print('excellent')\nelif score>=80:\n    print('good')\nelif score>=60:\n    print('passed')\nelse:\n    print('failed')\n循环\nfor循环\nL = [75, 92, 59, 68]\nsum = 0.0\nfor score in L:\n       sum += score\nprint(sum / 4)\nwhile循环\nsum = 0\nx = 1\nwhile x<100:\n    sum += x\n    x = x + 1\nprint(sum)\nbreak\nsum = 0\nx = 1\nwhile True:\n    sum = sum + x\n    x = x + 1\n    if x > 100:\n        break\nprint(sum)\ncontinue\nL = [75, 98, 59, 81, 66, 43, 69, 85]\nsum = 0.0\nn = 0\nfor x in L:\n    if x < 60:\n        continue\n    sum = sum + x\n    n = n + 1\nprint(sum/n)\n多重循环\nfor x in ['A', 'B', 'C']:\n    for y in ['1', '2', '3']:\n        print(x + y)\ndict\ndict的作用是建立一组 key和一组value的映射关系。\nd = {\n    'Adam': 95,\n    'Lisa': 85,\n    'Bart': 59,\n    'Paul': 75\n}\nprint(d)\nprint(d['Adam'])\nprint(d.get('Lisa'))\nd['voidking']=100\nprint(d)\nfor key in d:\n    print(key+':',d.get(key))\nset\nset持有一系列元素，这一点和list很像，但是set的元素没有重复，而且是无序的，这点和dict的key很像。\ns = set(['Adam', 'Lisa', 'Bart', 'Paul'])\nprint(s)\ns = set(['Adam', 'Lisa', 'Bart', 'Paul', 'Paul'])\nprint(s)\nlen(s)\nprint('Adam' in s)\nprint('adam' in s)\nfor name in s:\n    print(name)\ns = set([('Adam', 95), ('Lisa', 85), ('Bart', 59)])\nfor x in s:\n    print(x[0]+':',x[1])\ns.add(100)\nprint(s)\ns.remove(('Adam',95))\nprint(s)\n函数\n自带函数\ndel sum\nL = [x*x for x in range(1,101)]\nprint sum(L)\n自定义函数\ndef my_abs(x):\n    if x >= 0:\n        return x\n    else:\n        return -x\nmy_abs(-100)\n引入函数库\nimport math\n\ndef quadratic_equation(a, b, c):\n    x = b * b - 4 * a * c\n    if x < 0:\n        return none\n    elif x == 0:\n        return -b / (2 *a)\n    else:\n        return ((math.sqrt(x) - b ) / (2 * a)) , ((-math.sqrt(x) - b ) / (2 * a))\nprint(quadratic_equation(2, 3, 0))\nprint(quadratic_equation(1, -6, 5))\n可变参数\ndef average(*args):\n    if args:\n        return sum(args)*1.0/len(args)\n    else:\n        return 0.0\n\nprint(average())\nprint(average(1, 2))\nprint(average(1, 2, 2, 3, 4))\n切片\nlist切片\nL = ['Adam', 'Lisa', 'Bart', 'Paul']\nL[0:3]\nL[:3]\nL[1:3]\nL[:]\nL[::2]\n倒序切片\nL[-2:]\nL[-3:-1]\nL[-4:-1:2]\nL = range(1, 101)\nL[-10:]\nL[4::5][-10:]\nPS：range是有序的list，默认以函数形式表示，执行range函数，即可以list形式表示。\n字符串切片\ndef firstCharUpper(s):\n    return s[0:1].upper() + s[1:]\n\nprint(firstCharUpper('hello'))\n迭代\nPython的for循环不仅可以用在list或tuple上，还可以作用在其他任何可迭代对象上。迭代操作就是对于一个集合，无论该集合是有序还是无序，我们用for循环总是可以依次取出集合的每一个元素。集合是指包含一组元素的数据结构，包括：\n\n有序集合：list，tuple，str和unicode；\n无序集合：set\n无序集合并且具有key-value对：dict\n\nfor i in range(1,101):\n    if i%7 == 0:\n        print(i)\n索引迭代\n对于有序集合，元素是有索引的，如果我们想在for循环中拿到索引，怎么办？方法是使用enumerate()函数。\nL = ['Adam', 'Lisa', 'Bart', 'Paul']\nfor index, name in enumerate(L):\n    print(index+1, '-', name)\n\nmyList = zip([100,20,30,40],L);\nfor index, name in myList:\n    print(index, '-', name)\n迭代dict的value\nd = { 'Adam': 95, 'Lisa': 85, 'Bart': 59 }\nprint(d.values())\nfor v in d.values():\n    print(v)\nPS：Python3.x中，dict的方法dict.keys()，dict.items()，dict.values()不会再返回列表，而是返回一个易读的“views”。这样一来，k = d.keys();k.sort()不再有用，可以使用k = sorted(d)来代替。同时，dict.iterkeys()，dict.iteritems()，dict.itervalues()方法不再支持。\n迭代dict的key和value\nd = { 'Adam': 95, 'Lisa': 85, 'Bart': 59 }\nfor key, value in d.items():\n    print(key, ':', value)\n列表生成\n一般表达式\nL = [x*(x+1) for x in range(1,100)]\nprint(L)\n复杂表达式\nd = { 'Adam': 95, 'Lisa': 85, 'Bart': 59 }\ndef generate_tr(name, score):\n    if score >=60:\n        return '<tr><td>%s</td><td>%s</td></tr>' % (name, score)\n    else:\n        return '<tr><td>%s</td><td style=\"color:red\">%s</td></tr>' % (name, score)\n\ntds = [generate_tr(name,score) for name, score in d.items()]\nprint('<table border=\"1\">')\nprint('<tr><th>Name</th><th>Score</th><tr>')\nprint('\\n'.join(tds))\nprint('</table>')\n条件表达式\nL = [x * x for x in range(1, 11) if x % 2 == 0]\nprint(L)\ndef toUppers(L):\n    return [x.upper() for x in L if isinstance(x,str)]\n\nprint(toUppers(['Hello', 'world', 101]))\n多层表达式\nL = [m + n for m in 'ABC' for n in '123']\nprint(L)\nL = [a*100+b*10+c for a in range(1,10) for b in range(0,10) for c in range(1,10) if a==c]\nprint(L)\n后记\n至此，Python基础结束。接下来，爬虫飞起！\n书签\nPython官网https://www.python.org/\nPython入门http://www.imooc.com/learn/177\n如何学习Python爬虫[入门篇]？https://zhuanlan.zhihu.com/p/...\n你需要这些：Python3.x爬虫学习资料整理https://zhuanlan.zhihu.com/p/...\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "8"}