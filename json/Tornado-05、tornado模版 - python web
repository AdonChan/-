{"title": "Tornado-05、tornado模版 - python web ", "index": "python,html,tornado,ubuntu", "content": "Tornado模板\n1.模板的基本了解\n准备工作\nTornado自身提供了一个轻量级、快速并且灵活的模板语言在tornado.template模块中。\n模板就是格式固定的网页：格式是固定的，内容是变化的模板是一个允许嵌入Python代码片段的HTML文件\n在tornado文件夹下新建一个lesson4文件夹 在该文件夹下新建一个start1.py文件 先添加一些基本内容然后按下列步骤操作1、在Application的参数中添加template_path 配置，指定模板的路径和静态文件的路径\ntemplate_path='templates',\nstatic_path='static',\n\n2、在lesson4文件夹下新建template文件夹（用来存放html文件）   在lesson4文件夹下新建static文件夹（用来存放图片，css，js等静态文件）\n3、使用render方法渲染模板 添加以下代码\n(r'/',IndexHandler),  # 添加路由\n\nclass IndexHandler(tornado.web.RequestHandler):\n    def get(self):\n        self.render('index.html')\n\n这段代码告诉Tornado在templates文件夹下找到一个名为index.html 的文件，读取其中的内容，并且发送给浏览器\n4、在templates文件夹下新建一个index.html文件在body中添加下列代码\nhello boys and girls!\n运行后显示的结果\n\n\n2.模板中的符号\n{{   }}   表达式用双大括号包围，内容可以是任何python表达式 ，在双大括号中的单词是占位符\n{%   %}   模板控制语句以{%  %}包围\n{# #} 模版注释格式\n\n双大括号中放置变量名或表达式，变量名与传入的关键字参数名要相同在templates中新建IndexHandler.html并在这个文件的body中添加以下代码\n<form method=\"post\" action=\"/html\">\n    <p>用户名<br><input type=\"text\" name=\"name\"></p>\n    <p>密码<br><input type=\"text\" name=\"password\"></p>\n    <input type=\"submit\">\n</form>\n在templates中新建index2.html文件并在body中加入以下代码\n<b>欢迎用户 {{ username }}登录</b>\n处理器文件\nclass IndexHandler(tornado.web.RequestHandler):\n    def get(self):\n        self.render('index1.html')\n\n    def post(self):\n        username = self.get_argument('name','no')\n        self.render('index2.html',username=username)\n\n\n\n\n\ntornado的模板处理已经十分方便，在{{}}中可以传入任意的python表达式：\n#为了测试方便，新建一个简单的路由\n(r'/temp',TempHandler),\nclass TempHandler(tornado.web.RequestHandler):\n    def get(self):\n        username = self.get_argument('name','no')\n        self.render('temp.html',username=username)\n\n接下来我们在index.html文件中添加以下代码\n hello boys and girls!<br>\n<!--传入一个表达式-->\n{{ 10+27 }}\n<br>\n{{ time.time() }} <!--可以执行函数-->\n<br>\n{{ haha() }} <!--自定义的函数也可以传入-->  \n在start1.py中的TempHandler中添加以下代码\n    def haha(self):\n        return '这里是tornado'\n\n    def get(self):\n        username = self.get_argument('name','no')\n        import time\n        li = ['a','b','c','d']\n        self.render('index.html',\n                    username=username,\n                    time=time,\n                    haha=self.haha,\n                    li=li\n                    )\n\n\n\n\n3.控制语句\n控制语句的大部分就像对应的Python语句一样工作\n控制语句的返回以最近的{% end  %} 结束\nif条件判断\n{% if condition %}\n     ...\n{% elif condition %}\n     ...\n{% else %}\n     ...\n{% end %}\n\n例子：\n{% if username!='no' %}\n    欢迎用户 {{ username }} 登录\n{% else %}\n    您还没有登录\n{% end %}\n\n\n\nfor循环\n{% for var in expr %}  # 注意在模版中的控制语句都不需要加冒号\n     ...\n{% end %}\n\n\n在html文件中的写法\n<br>\n{% for i in li%}\n    {{ i }} <br>\n{% end %}\n\n\n\n以上就是模板的基本知识，我们在后面还会深入学习。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}