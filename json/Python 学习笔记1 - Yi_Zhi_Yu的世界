{"title": "Python 学习笔记1 - Yi_Zhi_Yu的世界 ", "index": "python", "content": "输出\n\npython 的输出使用print 语法\n\nprint \"hello world\"  //hello world\n//或者\nprint \"hello\", \"world\" //hello world\n//或者\nprint \"hello\" \"world\" //helloworld\n\n\n请注意上面的第二和第三个，一个使用,连接字符串，一个使用空格连接字符串，输出的结果中，逗号连接的中间有个空格，而空格连接的，中间没有任何东西\n\n输入\n\npython的输入使用raw_input函数\n\nhello = raw_input(\"Input your word:\")\n//括号中的参数表示输入的提示字符串,输入的结果保存在`hello`变量中\n\n\n空值\n\npython中的空值用None表示，类似于PHP中的Null\n\n字符串编码\n\npython 中的字符串编码问题，首先要搞明白asicii编码, unicode编码和utf-8编码之间的关系，这里总结如下：\n\n\n  asicii编码长度8位(一个字节)，包含了所有的英文字母和一些常见的字符，\n  能够表示256种编码方式，比如字母a对应的asicii编码就是122(01111010),\n  因为英文总共也就只有那么些个字母和字符，所以一般情况下，asicii码表中的编码足够英文编码使用，但是其他的语言，比如中文，常见的中文字符就起码好几万个，\n  一个字节明显不够， 这就催生了针对中文的编码表，使用两个字节甚至是三个字节表示一个中文字符，\n  比如GB2312编码(2个字节表示一个字符), 但假如一个使用GB2312编码的文件，\n  被一个其他编码比如使用asicii编码的编辑器打开，\n  你看到的却都是乱码，这是因为asicii编码使用一个字节一个字节读取二进制文件(文件最终还是以二进制形式保存在磁盘中的)的关系,\n  每次读取的都是原来2个字节长度中的一半的长度,一个中文字符的一半，我们当然看不懂了。 unicode编码应运而生，\n  unicode编码实际上是一个大的编码表，\n  他使用最少两个字节表示一个字符的编码方式,每种语言占用了码表的某个段，在对应的段内编码自己的语言,比如\n\n`a` 对应的unicode编码就是`00000000 01111010`。\n\n  \n  这样,世界上的很多语言就能统一使用unicode编码进行写入和读取了 utf-8编码则是将unicode编码节约,\n  比如把英文字母定义为1个字节，中文字符定义为3个字节，这样英文字母中的前面的那么多没用的0位就能砍去了\n\n\npython 早期不支持unicode编码， 但现在已经支持，使用u\"...\"语法, 可以输出中文内容了\n\nprint u\"中\" //中\nprint u'\\u4e2d' //中\nu\"中\"       //u'\\u4e2d'\n\n\n最下面的输出打印出的是中的十六进制unicode编码， 在print的时候，u\"中\"和u'\\u4e2d'的输出结果都是一样的\n另外，如果要计算中文字符串的字符长度的话，也要带u，否则输出的长度就是字节长度，而不是字符串长度了\n\nprint len(u\"中\") //1\nprint len(\"中\")  //3\n\n\n如果在编码文件中要输入或输出中文或者其他的非asicii编码的字符时，要在文件的第二行(第一行一般是#!/usr/bin/env python)加上# -*- coding: utf-8 -*-\n\nlist(列表) 和 tuple(元组)\n\nlist 和 tuple 类似于PHP中的索引数组，list和tuple的结构相似，但list可以随时进行写入和删除，而tuple一但初始化就不可以改动list(列表)：\n\n\n\n使用[]语法表示，比如\n\nnames = [\"Tony\", \"Sam\", \"James\"]\n\n\n可以随时写入和删除\n\n写入末尾使用append,\n\n  names.append(\"Yi_Zhi_Yu\")\n  print names //['Tony', 'Sam', 'James', 'Yi_Zhi_Yu']\n\n\n\n插入指定位置，注意这个插入，比如要插入一个\"Gordon\"在\"Tony\"和\"Sam\"之间，\"Gordon\"的索引值就是1， 原先的\"Tony\"后面的所有元素的索引各+1\n\nnames.insert(1,\"Gordon\")\nprint names //['Tony', 'Gordon', 'Sam', 'James', 'Yi_Zhi_Yu']\n\n\n\n更新元素,使用类似于PHP的语法，直接对指定的索引位置的元素赋值\n\nnames[1] = \"Wang\"\nprint names//['Tony', 'Wang', 'Sam', 'James', 'Yi_Zhi_Yu']\n\n\n\n删除元素，使用pop语法,pop函数输出的是删除的元素值\n\n  names.pop() //删除末尾\n  print names //['Tony', 'Wang', 'Sam', 'James']\n  names.pop(1)//删除指定位置(1位置\"Wang\")\n  print names //['Tony', 'Sam', 'James']\n\n\n\ntuple(元组):\n\n\n使用()语法表示\n一但初始化，不可改变\n\n单个元素的写法要加一个,，与算数运算中的括号区分开，如\n\nname=(\"Yi_Zhi_Yu\",)//('Yi_Zhi_Yu',)\n\n\npython在显示单个元素的tuple时，也会带\",\", 如果不带的话，输出的就只是一个字符串了\n\nname = (\"Yi_Zhi_Yu\") //Yi_Zhi_Yu\n\n\n\n学习参考：廖雪峰python教程\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}