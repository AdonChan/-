{"title": "每天一个设计模式之单例模式 - godbmw.com ", "index": "单例模式,设计模式,python,javascript", "content": "博主按：《每天一个设计模式》旨在初步领会设计模式的精髓，目前采用javascript（_靠这吃饭_）和python（_纯粹喜欢_）两种语言实现。诚然，每种设计模式都有多种实现方式，但此小册只记录最直截了当的实现方式 :)\n\n网速过慢的朋友请移步《每天一个设计模式之单例模式》原文地址\n\n欢迎来我的小站看更多干货 + 免费教程：godbmw.com\n\n0. 项目地址\n\n本节课源码地址\n《每天一个设计模式》地址\n\n1. 什么是单例模式？\n单例模式定义：保证一个类仅有一个实例，并提供访问此实例的全局访问点。\n2. 单例模式用途\n如果一个类负责连接数据库的线程池、日志记录逻辑等等，此时需要单例模式来保证对象不被重复创建，以达到降低开销的目的。\n3. 代码实现\n需要指明的是，以下实现的单例模式均为“惰性单例”：只有在用户需要的时候才会创建对象实例。\n\n3.1 python3 实现\nclass Singleton:\n  # 将实例作为静态变量\n  __instance = None\n\n  @staticmethod\n  def get_instance():\n    if Singleton.__instance == None:\n      # 如果没有初始化实例，则调用初始化函数\n      # 为Singleton生成 instance 实例\n      Singleton()\n    return Singleton.__instance\n\n  def __init__(self):\n    if Singleton.__instance != None:\n      raise Exception(\"请通过get_instance()获得实例\")\n    else:\n      # 为Singleton生成 instance 实例\n      Singleton.__instance = self\n\nif __name__ == \"__main__\":\n\n  s1 = Singleton.get_instance()\n  s2 = Singleton.get_instance()\n\n  # 查看内存地址是否相同\n  print(id(s1) == id(s2))\n3.2 javascript 实现\nconst Singleton = function() {};\n\nSingleton.getInstance = (function() {\n  // 由于es6没有静态类型,故闭包: 函数外部无法访问 instance\n  let instance = null;\n  return function() {\n    // 检查是否存在实例\n    if (!instance) {\n      instance = new Singleton();\n    }\n    return instance;\n  };\n})();\n\nlet s1 = Singleton.getInstance();\nlet s2 = Singleton.getInstance();\n\nconsole.log(s1 === s2);\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "2"}