{"title": "如何用django批量导入数据之xml - Ateon ", "index": "django,python", "content": "django后台批量导入数据\n在生产环境中，往往数据不是几条或者几百条，那么举个例子，将公司所有员工员工号或者帐号密码导入进后台，那就不建议你去后台一条条记录去添加了\n如何从xml中批量导入svn记录\n第一步：为数据建立模型\n@python_2_unicode_compatible\nclass SVNLog(models.Model):\n\n    vision = models.IntegerField(verbose_name=u\"修订版本\", blank=False, null=False,)\n    author = models.CharField(verbose_name=u\"作者\", max_length=60, blank=True, null=True)\n    date = models.DateTimeField(verbose_name=u\"修订时间\",null=True )\n    msg = models.TextField(verbose_name=u\"注释消息\", blank=False, null=False, default=u\"\")\n    paths = models.TextField(verbose_name=u\"影响的文件\", blank=False, null=False, default=u\"\")\n    created_time = models.DateTimeField(verbose_name=u\"创建时间\", auto_now_add=True, )\n    update_time = models.DateTimeField(verbose_name=u\"修改时间\", auto_now=True, )\n\n    class Meta:\n        ordering = ['revision']\n\n    def __str__(self):\n        return u'r%s' % (self.revision or u\"\", )\n既然建立好了模型，那我们再去建立接受我们xml文件的models\n@python_2_unicode_compatible\nclass ImportLogFile(models.Model):\n\n    LogFile = models.FileField(upload_to='LogFile')\n    FileName = models.CharField(max_length=50, verbose_name=u'文件名')\n\n    class Meta:\n        ordering = ['FileName']\n\n    def __str__(self):\n        return self.FileName\nok,以上代码我们定义好了数据和上传文件的model同步数据库python manage.py makemigrationspython manage.py migrate\n接着我们去修改admin.py 让我们可以从后台上传文件，\nclass ImportLogAdmin(admin.ModelAdmin):\n\n    list_display = ('LogFile','FileName',)\n    list_filter = ['FileName',]\n\n    def save_model(self, request, obj, form, change):\n\n        re = super(YDImportLogAdmin,self).save_model(request, obj, form, change)\n        update_svn_log(self, request, obj, change)\n        return re\n注意上面代码里的save_model,这里才是关键，在这里我重写了ModelAdmin里的save_model方法因为我们要把上传文件，读取文件，解析文件，操作数据库合为一步来操作，大家可以打开debug，在上传文件的时候，返回参数的obj里包括了文件上传的路径，这个路径也是下一步我们操作解析文件的关键，好了我们在这个app文件夹下新建一个utils.py 用来操作我们操作文件和数据库的工具类，为了简单我写成了函数如下先贴一下我们要测试的xml文件\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<log>\n<logentry\n   revision=\"2\">\n<author>qwert</author>\n<date>2016-09-27T07:16:37.396449Z</date>\n<paths>\n<path\n   action=\"A\"\n   prop-mods=\"false\"\n   text-mods=\"true\"\n   kind=\"file\">/aaa/README\n    </path>\n</paths>\n<msg>20160927 151630</msg>\n</logentry>\n\n\n<logentry\n   revision=\"1\">\n<author>VisualSVN Server</author>\n<date>2016-09-20T05:03:12.861315Z</date>\n<paths>\n<path\n   action=\"A\"\n   prop-mods=\"false\"\n   text-mods=\"false\"\n   kind=\"dir\">/branches</path>\n<path\n   action=\"A\"\n   prop-mods=\"false\"\n   text-mods=\"false\"\n   kind=\"dir\">/tags</path>\n<path\n   action=\"A\"\n   prop-mods=\"false\"\n   text-mods=\"false\"\n   kind=\"dir\">/trunk</path>\n</paths>\n<msg>hello word</msg>\n</logentry>\n</log>\n输出结果格式\nr2 | qwer | 2016-09-27 15:16:37 +0800 (二, 27  9 2016) | 1 line\nChanged paths:\n   A /xxx/README\n\n20160927 151630\n------------------------------------------------------------------------\nr1 | VisualSVN Server | 2016-09-20 13:03:12 +0800 (二, 20  9 2016) | 1 line\nChanged paths:\n   A /branches\n   A /tags\n   A /trunk\n\nInitial structure.\n\nfrom .models import SVNLog\nimport xmltodict\ndef update_svn_log(self, request, obj, change):\n\n    headers = ['r','a','d','m','p']\n    filepath = obj.LogFile.path\n    xmlfile = xmltodict.parse(open(filepath, 'r'))\n    xml_logentry = xml.get('log').get('logentry')\n    info_list = []\n    pathlist = []\n    sql_insert_list = []\n    sql_update_list = []\n    for j in xml:\n        data_dict = {}\n        # get path\n        paths = j.get('paths').get('path')\n        if isinstance(paths,list):\n            for path in paths:\n                action = path.get('@action')\n                pathtext = path.get('#text')\n                pathtext = action + ' ' + pathtext\n                pathlist.append(pathtext)\n                \n            _filelist = u'\\n'.join(pathlist)\n            _paths = u\"Changed paths:\\n {}\".format(_filelist)\n            print _paths\n        else:\n            _filelist = paths.get('@action') + ' ' + paths.get('#text')\n            _paths = u\"Changed paths:\\n {}\".format(_filelist)\n            print _paths\n        # get revision\n        vision = j.get('@vision')\n        # get auth\n        author = j.get('author')\n        #get date\n        date = j.get('date')\n        #get msg\n        msg = j.get('msg')\n\n        data_dict[headers[0]] = int(vision)\n        data_dict[headers[1]] = author\n        data_dict[headers[2]] = date\n        data_dict[headers[3]] = msg\n        data_dict[headers[4]] = _paths\n        info_list.append(data_dict)\n\n    _svnlog = SVNLog.objects.filter().order_by('-vision').first()\n    _last_version = _svnlog.vision if _svnlog else 0\n\n    for value in info_list:\n        vision = value['r']\n        author = value['a']\n        date = value['d']\n        msg = value['m']\n        paths = value['p']\n        print vision,author\n        _svnlog = YDSVNLog.objects.filter().order_by('-revision').first()\n        _last_version = _svnlog.revision if _svnlog else 0\n        if vision > _last_version:\n            sql_insert_list.append(SVNLog(revision=revision, author=author, date=date, msg = msg, paths = paths))\n        else:\n            sql_update_list.append(SVNLog(revision=revision, author=author, date=date, msg = msg, paths = paths))\n\n    SVNLog.objects.bulk_create(sql_insert_list)\n    SVNLog.objects.bulk_create(sql_update_list)\n我们使用的xmltodict这个第三方库来解析xml，他把内容解析成了高效率的orderdict类型，就是有序列的字典\n这个xml中比较复杂的是那个paths里的path，因为这个xml中包含两个元素，第一个元素的path只含有一个path，第二个元素中的paths包含有三个path，因此我们在解析获取的时候需要判断一下\npaths = j.get('paths').get('path')\nif isinstance(paths,list):\n    pass\n我们判断这个path是不是一个list类型的，如果是，那我们就按照list的方式来处理，如果不是，那我们就按单个的方式来处理,获取之后按照输出结果格式处理下结果然后获取其他内容\nrevision = j.get('@vision')\n# get auth\nauthor = j.get('author')\n#get date\ndate = j.get('date')\n#get msg\nmsg = j.get('msg')\n最后我们将获取到的元素存在字典里在循环中判断当前的版本号和数据库中的版本号，如果比原来的小，那么我们执行更新操作，反之执行插入操作\n\n最后使用了bulk_create来操作数据库，这样避免了循环中每次都进行数据库操作造成的资源浪费\n作者微信号：T_V_T_\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "2"}