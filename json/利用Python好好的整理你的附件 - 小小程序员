{"title": "利用Python好好的整理你的附件 - 小小程序员 ", "index": "脚本,程序员,python", "content": "目前我的文件夹中有500多份简历，如果我想知道一些信息，比如学校，学历之类的，我需要打开每一份word去查看，太耗时间了。这个时候python需要出马了。\n目标\n目前类似截图中的word有600+，想简单的进行整理：\n\n可以整理出一份excel用于导航（类似目录），可以通过excel来快速定位到所要的附件，如下图效果：\n\n具体实现\n有了目标，就具体说说如何实现的，整理思路还是比较简单的，就是遍历所有的word文件，将word中关键的信息获取到并保存到excel中。\n这里列下主要用到的模块：\nimport xlsxwriter\nimport subprocess\nimport os\nimport docx\nimport sys\nimport re\nxlsxwriter主要用来操作excel，xlsxwriter只能用来写，效率上比xlwt要高，数据量不多，用xlwt也ok。\nsubprocess主要用来调用命令行，因为docx模块无法解析doc的word文件，所以在解析前将doc的文件转换成docx文件。\nos主要用于遍历文件夹获取文件。\ndocx主要用来解析word文档。\n规范下文件名\n首先我们先规范下文件名称，因为在使用subprocess.call调用命令时，空格，特殊符号之类的没办法转义导致报错，所以干脆在之前就清理掉这个潜在问题。\ndef remove_doc_special_tag():\n    for filename in os.listdir(path):\n        otherName = re.sub(\"[\\s+\\!\\/_,$%^*(+\\\"\\')]+|[+——()?【】“”！，。？、~@#￥%……&*（）]+\", \"\",filename)  \n        os.rename(os.path.join(path,filename),os.path.join(path,otherName))\n遍历文件\n之后我们就可以开始正题，遍历每个文件进行解析：\npath='/Users/cavin/Desktop/files'\nfor filename in os.listdir(path):\n    ...具体逻辑...\n\n这里碰到一个问题，首先是docx模块无法解析doc的word文档，由于又是使用的mac，所以也无法使用win32com模块，这个问题就比较尴尬，后来google发现可以通过命令将doc转换成docx。\n这里注意下转换后的docx文件样式是丢失的，但这不影响我获取文本信息。\n于是就有了这段代码，如果是doc的文件，优先转换成docx，待解析完之后再移除掉。\nif filename.endswith('.doc'):\n    subprocess.call('textutil -convert docx {0}'.format(fullname),shell=True)\n    fullname=fullname[:-4]+\".docx\"\n    sheetModel= etl_word_files(fullname)#解析文本逻辑\n    subprocess.call('rm {0}'.format(fullname),shell=True) #移除转换的文件\n解析word文件\n接下来就是解析文件了，通过docx模块很容易实现,具体的解析逻辑就不贴了，就是遍历每一行，根据一些关键字，符号来截取数据（每个简历格式基本上差不多的）\ndoc = docx.Document(fullname)\nfor para in doc.paragraphs:\n    print(para.text)\n    ...具体解析逻辑...\n填充excel\n解析完的数据就可以直接填充excel了:\nworkbook = xlsxwriter.Workbook('report_list.xlsx')\nworksheet = workbook.add_worksheet('list')\nworksheet.write(0,0, '序号') \nworksheet.write(0,1, '姓名') \nworksheet.write(0,2, '性别') \nworksheet.write(0,3, '年龄') \nworksheet.write(0,4, '籍贯') \nworksheet.write(0,5, '目前所在地') \nworksheet.write(0,6, '学历')\nworksheet.write(0,7, '学校')\nworksheet.write(0,8, '公司')\nworksheet.write(0,9, '职位')\nworksheet.write(0,10, '文档链接')\n这里主要说下文档链接的填充，由于是要给其他人的，只要保证附件和excel在同一个文件夹下，采用相对路径的方式来实现，可以使用Excel的函数HYPERLINK:\nworksheet.write(index,10, '=HYPERLINK(\\\"./'+filename+'\\\",\\\"附件\\\")')\n问题点\n到这里，基本上可以实现相应的功能了，但不是很完美，主要是word中的格式不标准，没有很好的方式去准确获取到我要的数据，但主要的姓名学校之类的大多数都抓到了，也算减轻点任务啦。\n总结\n利用python还是减少了一定的重复劳动，但面对一些不标准的东东貌似还没有很好的方式。\n虽然可以增加逻辑来兼容这些不标准，但显然这个付出和产出就有点不成正比了。\n利用好手上的工具去提高效率才是真的，至于是傻瓜式的重复工作，还是通过代码来减少重复劳动，就看你自己怎么看啦。\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "1"}