{"title": "Django添加全文搜索功能入门篇 - 程序员点滴积累 ", "index": "python,django,搜索引擎", "content": "\n感觉网络上关于Django全文搜索的中文文章太少，并且讲的也不是很到位，就是简单介绍了怎么配置，并没有说这样配置有什么用，所以依然很迷茫。所以希望我这篇文章能够帮助到后来人。\n转载说明来源 http://tenlee2012.github.io/2...添加全文搜索功能入门/\n\n一、使用的工具\n\nhaystack是django的开源搜索框架，该框架支持Solr, Elasticsearch, Whoosh, *Xapian*搜索引擎，不用更改代码，直接切换引擎，减少代码量。\n搜索引擎使用Whoosh，这是一个由纯Python实现的全文搜索引擎，没有二进制文件等，比较小巧，配置比较简单，当然性能自然略低。\n中文分词Jieba，由于Whoosh自带的是英文分词，对中文的分词支持不是太好，故用jieba替换whoosh的分词组件。\n其他：Python 3.4.4, Django 1.8.3，Debian 4.2.6_3\n\n二、配置说明\n现在假设我们的项目叫做Project,有一个myapp的app，简略的目录结构如下。\n - Project\n   - Project\n     - settings.py\n   - blog\n     - models.py\n此models.py的内容假设如下：\nfrom django.db import models\nfrom django.contrib.auth.models import User\n\n\nclass Note(models.Model):\n    user = models.ForeignKey(User)\n    pub_date = models.DateTimeField()\n    title = models.CharField(max_length=200)\n    body = models.TextField()\n\n    def __str__(self):\n        return self.title\n1. 首先安装各工具\npip install whoosh django-haystack jieba\n2. 添加 Haystack 到Django的 INSTALLED_APPS\n配置Django项目的settings.py里面的 INSTALLED_APPS添加Haystack,例子：\nINSTALLED_APPS = [ \n        'django.contrib.admin',\n        'django.contrib.auth', \n        'django.contrib.contenttypes', \n        'django.contrib.sessions', \n        'django.contrib.sites', \n\n          # Added. haystack先添加，\n          'haystack', \n          # Then your usual apps... 自己的app要写在haystakc后面\n          'blog',\n]\n点我看英文原版\n3. 修改 你的 settings.py，以配置引擎\n本教程使用的是Whoosh，故配置如下：\nimport os\nHAYSTACK_CONNECTIONS = {\n    'default': {\n        'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',\n        'PATH': os.path.join(os.path.dirname(__file__), 'whoosh_index'),\n    },\n}\n其中顾名思义，ENGINE为使用的引擎必须要有，如果引擎是Whoosh，则PATH必须要填写，其为Whoosh 索引文件的存放文件夹。\n其他引擎的配置见官方文档\n4.创建索引\n如果你想针对某个app例如mainapp做全文检索，则必须在mainapp的目录下面建立search_indexes.py文件，文件名不能修改。内容如下：\nimport datetime\nfrom haystack import indexes\nfrom myapp.models import Note\n\nclass NoteIndex(indexes.SearchIndex, indexes.Indexable):\n    text = indexes.CharField(document=True, use_template=True)\n    \n    author = indexes.CharField(model_attr='user')\n    pub_date = indexes.DateTimeField(model_attr='pub_date')\n\n    def get_model(self):\n        return Note\n\n    def index_queryset(self, using=None):\n        \"\"\"Used when the entire index for model is updated.\"\"\"\n        return self.get_model().objects.filter(pub_date__lte=datetime.datetime.now())\n每个索引里面必须有且只能有一个字段为document=True，这代表haystack 和搜索引擎将使用此字段的内容作为索引进行检索(primary field)。其他的字段只是附属的属性，方便调用，并不作为检索数据。\n注意：如果使用一个字段设置了document=True，则一般约定此字段名为text，这是在SearchIndex类里面一贯的命名，以防止后台混乱，当然名字你也可以随便改，不过不建议改。\n并且，haystack提供了use_template=True在text字段，这样就允许我们使用数据模板去建立搜索引擎索引的文件，使用方便（官方推荐，当然还有其他复杂的建立索引文件的方式，目前我还不知道），数据模板的路径为yourapp/templates/search/indexes/yourapp/note_text.txt，例如本例子为blog/templates/search/indexes/blog/note_text.txt文件名必须为要索引的类名_text.txt,其内容为\n{{ object.title }}\n{{ object.user.get_full_name }}\n{{ object.body }}\n这个数据模板的作用是对Note.title, Note.user.get_full_name,Note.body这三个字段建立索引，当检索的时候会对这三个字段做全文检索匹配。\n5.在URL配置中添加SearchView，并配置模板\n在urls.py中配置如下url信息，当然url路由可以随意写。\n(r'^search/', include('haystack.urls')),\n其实haystack.urls的内容为，\nfrom django.conf.urls import url\nfrom haystack.views import SearchView\n\nurlpatterns = [\n    url(r'^$', SearchView(), name='haystack_search'),\n]\nSearchView()视图函数默认使用的html模板为当前app目录下，路径为myapp/templates/search/search.html所以需要在blog/templates/search/下添加search.html文件，内容为\n{% extends 'base.html' %}\n\n{% block content %}\n    <h2>Search</h2>\n\n    <form method=\"get\" action=\".\">\n        <table>\n            {{ form.as_table }}\n            <tr>\n                <td> </td>\n                <td>\n                    <input type=\"submit\" value=\"Search\">\n                </td>\n            </tr>\n        </table>\n\n        {% if query %}\n            <h3>Results</h3>\n\n            {% for result in page.object_list %}\n                <p>\n                    <a href=\"{{ result.object.get_absolute_url }}\">{{ result.object.title }}</a>\n                </p>\n            {% empty %}\n                <p>No results found.</p>\n            {% endfor %}\n\n            {% if page.has_previous or page.has_next %}\n                <div>\n                    {% if page.has_previous %}<a href=\"?q={{ query }}&page={{ page.previous_page_number }}\">{% endif %}« Previous{% if page.has_previous %}</a>{% endif %}\n                    |\n                    {% if page.has_next %}<a href=\"?q={{ query }}&page={{ page.next_page_number }}\">{% endif %}Next »{% if page.has_next %}</a>{% endif %}\n                </div>\n            {% endif %}\n        {% else %}\n            {# Show some example queries to run, maybe query syntax, something else? #}\n        {% endif %}\n    </form>\n{% endblock %}\n很明显，它自带了分页。\n6.最后一步，重建索引文件\n使用python manage.py rebuild_index或者使用update_index命令。\n好，下面运行项目，进入该url搜索一下试试吧。\n三、下面要做的，使用jieba分词\n第一步\n将文件whoosh_backend.py（该文件路径为python路径/lib/python3.4/site-packages/haystack/backends/whoosh_backend.py）拷贝到app下面，并重命名为whoosh_cn_backend.py，例如blog/whoosh_cn_backend.py。修改如下添加from jieba.analyse import ChineseAnalyzer修改为如下\nschema_fields[field_class.index_fieldname] =\n    TEXT(stored=True, analyzer=ChineseAnalyzer(),\n            field_boost=field_class.boost)\n第二步\n在settings.py中修改引擎，如下\nimport os\nHAYSTACK_CONNECTIONS = {\n    'default': {\n        'ENGINE': 'blog.whoosh_cn_backend.WhooshEngine',\n        'PATH': os.path.join(BASE_DIR, 'whoosh_index'\n    },\n}\n第三步\n重建索引，在进行搜索中文试试吧。\n索引自动更新\n如果没有索引自动更新，那么每当有新数据添加到数据库，就要手动执行update_index命令是不科学的。自动更新索引的最简单方法在settings.py添加一个信号。\nHAYSTACK_SIGNAL_PROCESSOR =\n            \"haystack.signals.RealtimeSignalProcessor\"\n官方文档\n\n看了这入门篇，你现在应该大概能配置一个简单的全文搜索了吧，如果想自定义怎么办？ 建议阅读官方文档和github的源码。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "11"}