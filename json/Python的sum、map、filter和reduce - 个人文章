{"title": "Python的sum、map、filter和reduce - 个人文章 ", "index": "python", "content": "最近在看《Think Python》（英文版），看到了讲解map, reduce, filter等函数，觉得讲解的思路特别好。所以，我加上了自己的理解，写了本篇文章。\n引子\n如果要对列表中的数字求和，我们可以这样做：\ndef add_all(t):\n    \"\"\"t is a list of nums\"\"\"\n    total = 0\n    for x in t:\n        total += x\n\n    return total\n运行结果：\n由于python中求和操作太常见了，所以python提供了内置函数sum来进行这项操作\nsum\n将上一版代码修改如下：\nif __name__ == '__main__':\n    t = [1, 2, 3, 4]\n    print sum(t)\n运行结果：\n像这种从一个列表中得出一个结果的操作，也叫reduce，除了求和这一种reduce操作外，python还支持自定义的方式\nreduce\n比如，我不是想对队列求和，而是想得到列表各数字的乘积，可以利用reduce这样实现：\ndef multiple_all(x, y):\n    return x * y\n\nif __name__ == '__main__':\n    t = [1, 2, 3, 4]\n    print reduce(multiple_all, t)\n运行结果：\n上面介绍了将一个从一个列表得到一个结果的情形，还有一种情形是：按照某个规律对列表中的元素一一转换，这就要用到map内置函数了\nmap\n如果给定一个列表（元素为字符串），要把列表元素首字母大写，可以这样做\nif __name__ == '__main__':\n    t = ['hello', 'world', 'yarving']\n    print map(lambda x: x.capitalize(), t)\n运行结果：\n还有一种情况，是要将列表里的元素过滤出去，可以用到filter函数\nfilter\n给定一个列表（元素为数字），如果要仅保留不大于4的数字，可以这样做：\nif __name__ == '__main__':\n    t = [1, 2, 3, 4, 5, 6, 7]\n    print filter(lambda x: x <= 4, t)\n运行结果：\n获取《Think Python》（英文版）电子书\n如想要获取《Think Python》（英文书）的PDF版本，可发送邮件到 yarving@qq.com ，并标明主题 \"Think Python\" \n本文作者： Yarving Liu本文链接： http://yarving.historytale.co...版权声明： 本博客所有文章除特别声明外，均采用 CC BY-NC-SA 4.0 许可协议。转载请注明出处！\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}