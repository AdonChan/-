{"title": "Redis-脚本-获取某个大key的值 - 随笔 ", "index": "redis,python", "content": "1、背景\n在redis中，对于一个很大的key，例如hash类型，直接查看其值会非常慢，于是想到写个脚本通过增量迭代来获取\n2、具体的脚本如下：\n功能：扫描redis某个key里面的所有元素使用方法：python bigkey_save_values.py \"zyyset\" \"*\" 100\n3、python脚本实现如下：\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-  \n#功能：扫描某个key里面的所有元素\n#使用方法：python bigkey_save_values.py \"zyyset\" \"m*\" 100\n#如需获取全部的元素：python bigkey_save_values.py \"zyyset\" \"*\" 100\n__author__ = \"lcl\"  \nimport sys\nimport redis \nimport os \n  \npool=redis.ConnectionPool(host='192.168.225.128',port=6379,db=0)  \nr = redis.StrictRedis(connection_pool=pool)  \n#指定key\nkey = sys.argv[1]\n#扫描匹配值\nmatch = sys.argv[2]\n#每次匹配数量\ncount = sys.argv[3]\n#总数量\ntotal = 0\n#获取当前路径\npath = os.getcwd()\nkeytype = r.type(key)\nprint \"key的类型为%s\" % (keytype)\n#扫描到的key输出的文件\ntxt = path+\"/%s.txt\" % (key)\n\n#打开文件\n#f = open(txt,\"w\")\ndef list_iter(name):\n    list_count = r.llen(key)\n    for index in range(list_count):\n        yield r.lindex(key, index)\n\nif keytype=='list':\n    f = open(txt,\"w\")\n    for item in list_iter(key):\n#将匹配到对应key中的member/score输出到文件中\n        f.write(\"%s %s\" % (item,\"\\n\"))\n        total = total+1\n    f.close\n\nelif keytype=='hash':\n    f = open(txt,\"w\")\n    for item in r.hscan_iter(key,match = match,count = count):\n#将匹配到对应key中的member/score输出到文件中\n        f.write(\"%s %s\" % (item,\"\\n\"))\n        total = total+1\n    f.close\n \nelif keytype=='set':\n    f = open(txt,\"w\")\n    for item in r.sscan_iter(key,match = match,count = count):\n        f.write(\"%s %s\" % (item,\"\\n\"))\n        total = total+1\n    f.close\n\nelif keytype=='zset':\n    f = open(txt,\"w\")\n    for item in r.zscan_iter(key,match = match,count = count):\n        f.write(\"%s %s\" % (item,\"\\n\"))\n        total = total+1\n    f.close\n\nelse:\n    print(\"key的类型为string，value为：\" + r.get(key))\n\nprint \"key:%s的match：%s的数量为：%d\" % (key,match,total)\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}