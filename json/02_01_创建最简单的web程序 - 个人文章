{"title": "02_01_创建最简单的web程序 - 个人文章 ", "index": "python", "content": "初始化\n所有的Flask程序都必须创建一个程序实例， 这个程序实例就是Flask类的对象。客户端把请求发送给Web服务器， 服务器再把请求发送给Flask程序实例， 然后由程序实例处理请求。\n创建程序实例：\nfrom flask import Flask\n\napp = Flask(__name__)\n        \n注意: 此处的__name__是一个全局变量， 它的值是代码所处的模块或包的名字， Flask用这个参数决定程序的根目录， 以便稍后能找到相对于程序根目录的资源文件位置。\n路由和视图函数\n    还是上面那句话——客户端把请求发送给Web服务器， 服务器再把请求发送给Flask程序实例， 然后由程序实例处理请求。\n    那么程序实例如何处理请求， 答案是程序实例通过路由来处理请求——路由就是URL和处理请求的函数的映射——处理请求的函数就叫做视图函数。\n    Flask定义路由最简便的方式， 是使用程序实例提供的app.route修饰器：\n@app.route('/'):\ndef index():\n    return '<h1>Hello world!<h1>'\n                 前例把index（）函数注册为程序根地址的处理程序。 （ 如果部署程序的服务器域名为www.example.com， 在浏览器中访问http://www.example.com后， 会触发服务器执行index（）函数。 ）\n         这个函数的返回值称为响应， 是客户端接收到的内容。\n    地址中包含可变部分的路由：\n        @app.route('/user/<name>')\n         def user(name):\n             return '<h1>Hello, %s!</h1>' %name\n        尖括号中的内容就是动态部分，任何能匹配静态部分的URL都会映射到这个视图函数， 调用视图函数时， Flask会将动态部分作为参数传入函数。\n        注意：路由中的动态部分默认类型是字符串， 不过也可以使用别的类型如：/user/<int: id>只会匹配动态片段id为整数的url。除了整型， Flask还支持float， path类型， 其中path类型也是字符串， 不过其中的/不会被当做分隔符， 而是动态片段的一部分。\n3.启动服务器\n    程序实例用run方法启动Flask集成的开发Web服务器：\n        if name == '__main__': (只有直接运行该模块时条件才为真， 该模块被导入条件为假)\n            app.run(debug=True)  #debug参数为True， 表示启用调试模式。\n    服务器启动后会进入轮询， 等待并处理请求， 直到程序停止， 比如按Ctrl+C\n4.一个完整的程序\nfrom flask import Flask\napp = Flask(__name__)\n静态路由\n@app.route('/')\ndef index():\n    return '<h1>hello, world!<h1>'\n动态路由\n@app.route('/user/<name>')\ndef index(name):\n    return '<h1>hello, {}<h1>'.format(name)\nif name == '__main__':\n    #服务器轮询\n    app.run(debug=True)\n————————————————————————实践—————————————————————————\n5.实践操作\n一.准备\n按上节所说， \n    &cd flasky     进入flasky文件夹\n    &source venv/bin/activate    激活虚拟环境\n迁出新版本，\n    &git checkout 2a      此命令迁出的是只含有静态路由的程序， 效果图如下：\n        \n         注意此时迁出的版本hello.py只有一个静态路由。 而且没有启动服务器的代码， 我们要手动修改加上， 然后：\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}