{"title": "Google Python Class --- Sorting - About Data ", "index": "sort,python,google,List", "content": "\n刚才看到一位朋友谈到如何写出高逼格的文章，想了想确实有道理。所以特意弄一张高清的图片加上高逼格的文字。\n坚持是一种品格\n学习Python和我的工作关系并不大，但这不重要，因为喜欢所以坚持。打篮球他们因为不想和我一伙而争论，完全不顾我的感受，但这不重要，因为喜欢所以坚持。写博客很费时间，有时候想写又没什么可写很痛苦，但这不重要，因为喜欢所以坚持。写博客排版很费时，终于碰到segmentfault，又产生了写写写的欲望。【顺便赞一下】\nGoogle Python Class --- Sorting\n继续前面两篇，我个人觉得这篇是干货最多的，至少我从中学到了不少东西。废话少说，开始吧！\n\n\n对一个列表排序最简单的方法就是使用sorted(list)函数。  前面我们说过list.sort(),这是列表的一个方法。它直接作用于列表，并且没有返回值。有时候我们不想改变列表本身，只是希望返回一个新的列表，那么就需要用到sorted(list)函数。\na = [5, 1, 4, 3]\nprint sorted(a)  ## [1, 3, 4, 5]\nprint a  ## [5, 1, 4, 3]\n\n\ngoogle 课程中强烈推荐使用函数sorted(list)，而不是list的方法list.sort().  sorted(list)可以使用参数，比如reverse=Ture/false，默认false[升序排列]\nstrs = ['aa', 'BB', 'zz', 'CC']\nprint sorted(strs)  ## ['BB', 'CC', 'aa', 'zz'] (case sensitive)\nprint sorted(strs, reverse=True)   ## =True，改为降序排列\n\n\nsorted(list)可以使用可选的key参数指定一个函数.该函数会以每个元素为参数。  排序时，列表中的元素会通过函数进行处理，并按照返回值进行排序。\nstrs = ['ccc', 'aaaa', 'd', 'bb']\n#会按照元素的长度进行升序排列\nprint sorted(strs, key=len)  ## ['d', 'bb', 'ccc', 'aaaa']\n\n#按照元素的小写进行排序\nstrs = ['BB','aa','CC','zz']\nprint sorted(strs, key=str.lower)  ## ['aa', 'BB', 'CC', 'zz']\n\n#key后面可以是自定义函数\ndef MyFn(s):\nreturn s[-1]\n\n## Now pass key=MyFn to sorted() to sort by the last letter:\nprint sorted(strs, key=MyFn)  ## ['wa', 'zb', 'xc', 'yd']\n\n## lambda 表达式\nstrs = [1,2,-5,-435]\n#按照返回值排序\nprint sorted(strs,key=lambda str:str*(-1)) #[2, 1, -5, -435]\n\n\n\n元组【Tuples】\n\n元组是固定尺寸的元素的集合。在Python扮演一种\"结构体\"的角色\n\n元组与列表类似，可以使用len()返回长度，使用[]访问元素，使用for,in等等。\ntuple = (1, 2, 'hi')\nprint len(tuple)  ## 可以返回长度\nprint tuple[2]    ## 通过[]访问元素\ntuple[2] = 'bye'  ## 元组一旦创建，不能够对元素进行修改\ntuple = (1, 2, 'bye')  ## 可以重新创建\n\n\n 列表推导式【List Comprehensions】\n\n\n列表推导式是一种简洁的方式，可以将表达式扩展到整个列表。  语法: [ expr for var in list ] \n  nums = [1, 2, 3, 4]\n  squares = [ n * n for n in nums ]   ## [1, 4, 9, 16]\n  \n  #创建一个全部都为0的二维数组\n  matrix = [[0 for col in range(ncols)] for row in range(nrows)]  \n\n\n可以在[ expr for va in list ]的右边增加if条件进行过滤\nnums = [2,8,1,6]\nsmall = [n for n in nums if n <= 2 ] ## [2,1]\n\n## Select fruits containing 'a', change to upper case\nfruits = ['apple', 'cherry', 'bannana', 'lemon']\nafruits = [ s.upper() for s in fruits if 'a' in s ]\n\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}