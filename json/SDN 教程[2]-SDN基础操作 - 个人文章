{"title": "SDN 教程[2]-SDN基础操作 - 个人文章 ", "index": "python,mininet,sdn", "content": "实验二：SDN 基础操作学习\n\nMininet 可视化工具创建拓扑\nMininet 拓扑动态更改\nMininet 连接控制器\n流表操作\n\nMininet 可视化工具创建拓扑\nMininet 2.2.0 以上版本自带\n1. 进入 mininet/example \n在~目录下操作\ncd ~\ncd mininet/example\n2. 启动 miniedit.py \nsudo ./miniedit.py\n界面如下：\n3. 自定义拓扑：拖拽设备到画布 4. 配置 Mininet 设备属性 ① 设置控制器属性长按右键控制器图标-选择「Properties」修改 Controller Type点击OK，开启 miniedit 的终端变化：② 配置交换机属性填写 16位 DPID，更改 Switch Type③ 配置主机属性设置主机 IP 地址④ 配置全局属性菜单栏 - Edit - Preferences勾选：Start CLI 和 OpenFlow 1.3\nIP Base 默认设置了网段，刚才第③步骤可以不填。\n5. 点击左下角 Run \n观察打开 miniedit.py 的终端变化\n6. mininet 基础命令 ① 使用 dump 命令查看网络节点信息② 使用 net 命令查看链路端口对应信息③ 使用 nodes 查看节点信息④ 使用 links 查看链路连接状态7. 保存拓扑图 \n菜单栏选择：File - Export Level 2 Script 保存\n创建好后，终端 CTRL+C 关闭 miniedit8. 验证下次使用 \n打开新的终端Ctrl+Alt+T\ncd mininet/examples\nsudo python sdnsy.py\n9. 退出mininet \nexit\n10. 如果再次使用Mininet报错，RTENETLINK answers:File exists \nsudo mn -c\n清空一下缓存再使用。\nmininet 拓扑动态更改\n已经启动 mininet 拓扑条件下1. 增加主机\n\npy net.addHost('h4')\n2. 增加链路（主机h4和交换机s2\npy net.addLink(s2,net.get('h4'))\n3. 交换机新增端口，连接主机\npy s2.attach('s2-eth3')\n4. 新增主机配置 IP 地址\npy net.get('h4').cmd('ifconfig h4-eth0 10.4')\n5. links 查看结果\nmininet 连接控制器\n1. 启动控制器\n开启终端1启动 Ryu 应用(二层交换)\nryu-manager ryu/app/simple_switch.py\n2. 启动 mininet 拓扑\n再开启终端2， 用刚才自己创建的拓扑\ncd mininet/examples\nsudo python sdnsy.py\n3. Ryu 接收到 PACKET-IN 消息4. mininet 测试连通性\n在mininet 终端页面\npingall\n5. mininet 测试带宽\niperf h1 h2\n\n流表操作\n1. 启动控制器\n在 ryu 文件夹内操作\ncd ryu/ \nryu-manager ryu/app/simple_switch.py\n2. 启动mininet\n打开新的终端Ctrl+Alt+T\ncd mininet/examples\nsudo python sdnsy.py\n3. mininet 查看当前流表\n网络拓扑刚创建，没有数据流传输，初始流表为空\ndpctl dump-flows\n4. pingall 产生PACKET-IN数据包\nsimple_switch 应用会处理 Packet-in 并下发流表\npingall\n5. 再次查看流表\ndpctl dump-flows\n6. 删除所有流表\ndpctl del-flows\n7. 查看流表，验证删除结果\ndpctl dump-flows\n8. 手动添加流表，实现数据转发\ndpctl add-flow in_port=1,ations=output:2\ndpctl add-flow in_port=2,ations=output:1\n9. 查看流表,验证添加结果\ndpctl dump-flows\n观察到两个交换机均添加了这两条流10. ping，验证流表\nh1 ping h2\n可以 ping 通\nh1 ping h3\n由于流表匹配项是in_port=1，执行的action是转发到端口2，所以h1 ping h3时，流表匹配，全部转发到端口2，到达不了h3，ping不通11. 数据包丢弃的流表操作\n交换机丢弃所有端口2传入的数据包\n① 手动添加流表\ndpctl add-flow in_port=2,actions=drop\n② 查看流表结果\ndpctl dump-flows\n③ ping 查看流表是否作用\npingall\n发现 ping 不通，流表项起作用\n12. 流表优先级① 先删除所有流表\ndpctl del-flows\n② pingall 通过应用:simple_switch 下发流\npingall\n③ 添加数据包丢弃流表\ndpctl add-flow in_port=2,actions=drop\n④ 查看流表结果\ndpctl dump-flows\n⑤ 验证pingall 是否仍然连通\npingall\n结果仍然能够 ping 通思考：为什么这次主机间还可以通信？不是已经添加 drop 了么？\n\n13. 删除指定流表\n删除交换机 s1 条件字段中包含 in_port=1 的所有流表,并查看当前流表\nsh ovs-ofctl del-flows s1 in_port=2 \ndpctl dump-flows\n\n                ", "mainLikeNum": ["3 "], "mainBookmarkNum": "2"}