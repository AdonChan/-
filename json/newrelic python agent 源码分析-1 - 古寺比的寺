{"title": "newrelic python agent 源码分析-1 - 古寺比的寺 ", "index": "apm,源码分析,python", "content": "Newrelic 是APM（Application Performance Management）（应用性能管理/监控）解决方案提供商。项目中，通常用它来追踪应用的性能。最近看了一下 newrelic-python-agent 源码，这是查看源码过程中的一些记录。\n目录结构\nnewrelic 目录结构如下：\nnewrelic\n├── admin  # 常用命令\n├── api    # 探针\n├── bootstrap\n├── common  \n├── core\n├── extras\n│   └── framework_django\n│       └── templatetags\n├── hooks   # 数据库 web 各个库的一些探针\n│   ├── framework_tornado\n│   ├── framework_tornado_r3\n│   └── framework_tornado_r4\n├── network\n├── packages\n│   ├── requests\n│   │   └── packages\n│   │       ├── chardet\n│   │       └── urllib3\n│   │           ├── packages\n│   │           │   └── ssl_match_hostname\n│   │           └── util\n│   └── wrapt\n└── samplers\n命令\n使用 newrelic-admin help 可以列出所有命令：\n$ newrelic-admin help\n\nUsage: newrelic-admin command [options]\n\nType 'newrelic-admin help <command>'for help on a specific command.\n\nAvailable commands are:\n  generate-config\n  license-info\n  license-key\n  local-config\n  network-config\n  record-deploy\n  run-program\n  run-python\n  server-config\n  validate-config\n通过 setup.py 代码可以知道：\nif with_setuptools:\n    kwargs['entry_points'] = {\n            'console_scripts': ['newrelic-admin = newrelic.admin:main'],\n            }\nnewrelic-admin 命令调用的是 newrelic.admin:main，这是代码的入口。首先看一下 newrelic/admin/目录。\nadmin\nadmin 目录是 newrelic-admin help 列出的命令脚本所在目录。\n包含文件如下：\n$ tree\nadmin\n├── __init__.py\n├── __main__.py\n├── debug_console.py\n├── generate_config.py\n├── license_info.py\n├── license_key.py\n├── local_config.py\n├── network_config.py\n├── record_deploy.py\n├── run_program.py\n├── run_python.py\n├── server_config.py\n└── validate_config.py\n__init__.py 的 main 函数 是命令执行的入口。\n__init__.py 文件中代码\nload_internal_plugins()\nload_external_plugins()\n用来加载 _builtin_plugins 中定义的命令。\nrun_program\n首先看下 run_program 命令，这个命令使用方式如下：\nnewrelic-admin run-program your command\nnewrelic/admin/run_program.py 中 run_program 函数有装饰器 command，用来定义将命令以及相关说明添加到字典 _commands。\n在 run_program 中代码：\nroot_directory = os.path.dirname(root_directory)\nboot_directory = os.path.join(root_directory, 'bootstrap')\n\nif 'PYTHONPATH' in os.environ:\n    path = os.environ['PYTHONPATH'].split(os.path.pathsep)\n    if not boot_directory in path:\n        python_path = \"%s%s%s\" % (boot_directory, os.path.pathsep, os.environ['PYTHONPATH'])\n\nos.environ['PYTHONPATH'] = python_path\n可以发现newrelic/bootstrap/sitecustomize.py 文件被加入到了 PYTHONPATH。\npython 解释器初始化的时候会自动 import PYTHONPATH 下存在的 sitecustomize 和 usercustomize 模块。\n之后的功能比较简单，就是调用 os 模块执行命令。\n现在看下newrelic/bootstrap/sitecustomize.py 代码。\n在 这个文件的最后一行：\nnewrelic.config.initialize(config_file, environment)\n这里用来初始化newrelic，具体代码在 newrelic/config.py文件。\n以下是initialize函数：\ndef initialize(config_file=None, environment=None, ignore_errors=None,\n            log_file=None, log_level=None):\n\n    if config_file is None:\n        config_file = os.environ.get('NEW_RELIC_CONFIG_FILE', None)\n\n    if environment is None:\n        environment = os.environ.get('NEW_RELIC_ENVIRONMENT', None)\n\n    if ignore_errors is None:\n        ignore_errors = newrelic.core.config._environ_as_bool(\n                'NEW_RELIC_IGNORE_STARTUP_ERRORS', True)\n\n    _load_configuration(config_file, environment, ignore_errors,\n            log_file, log_level)  # 加载配置\n\n    if _settings.monitor_mode or _settings.developer_mode:\n        _settings.enabled = True\n        _setup_instrumentation()  # 设置探针\n        _setup_data_source()  # TODO\n        _setup_extensions()   # TODO\n        _setup_agent_console()   # TODO\n    else:\n        _settings.enabled = False\n其中第14行 _load_configuration 是用来加载 newrelic 的相关配置。比如：日志目录、各种环境变量、秘钥、newrelic host 地址等等。 \n`_setup_instrumentation() 中 _process_module_builtin() 用来设置探针。\n数据库、外部请求 等监控模块都位于 hook 目录下，通过 _process_module_builtin 函数将进程与监控模块进行绑定，包括 django 的主要模块以及常用的数据库等。在核心模块执行的时候触发监控，将数据回传到 api.time_trace 模块进行处理。\n而对于硬件信息的检测则由 commo.system_info 进行。\nnewrelic run_program 初始化过程\n以下为 flask 应用初始化过程，其它应用类似：\n\nnewrelic/admin/__init__.py main()\n\nnewrelic/admin/run_program.py 代码中会把 newrelic/bootstrap/sitecustomize.py 添加到 PYTHONPATH,python 解释器初始化的时候会自动 import PYTHONPATH 下存在的 sitecustomize 和 usercustomize 模块\n\nnewrelic/bootstrap/sitecustomize.py 调用 newrelic.config.initialize()，_setup_instrumentation() 函数被调用，_process_module_builtin会把需要 wrap 的包先添加到_import_hooks。\n\nnewrelic/config.py 中  sys.meta_path.insert(0, newrelic.api.import_hook.ImportHookFinder()) 执行\nnewrelic/api/import_hook.py  ImportHookFinder().find_model()\nnewrelic/api/import_hook.py  _ImportHookLoader() or _ImportHookChainedLoader()\n\nnewrelic/api/import_hook.py  _notify_import_hooks  callable 为 newrelic/config _module_import_hook  _instrument\n\nnewrelic/hooks/framework_flask.py instrument_flask_app\nnewrelic/api/web_transaction.py wrap_wsgi_application\nnewrelic/common/object_wrapper.py wrap_object\n\n在代码中，使用到了第三方包 wrapt，以下是 wrapt 的官方描述（文档地址)。\nwrapt模块的目的是为Python提供一个透明的对象代理，它可以作为构建函数包装器和装饰函数的基础。wrapt 提供了一个简单易用的decorator工厂，利用它你可以简单地创建decorator，并且在任何情况下都可以正确地使用它们。\nwrapt简单示例如下：\nimport wrapt\n# 普通装饰器\n@wrapt.decorator\ndef pass_through(wrapped, instance, args, kwargs):\n    return wrapped(*args, **kwargs)\n\n@pass_through\ndef function():\n    pass\n\n# 带参数的装饰器\nimport wrapt\n\ndef with_arguments(myarg1, myarg2):\n    @wrapt.decorator\n    def wrapper(wrapped, instance, args, kwargs):\n        return wrapped(*args, **kwargs)\n    return wrapper\n\n@with_arguments(1, 2)\ndef function():\n    pass\n要实现decorator，需要首先定义一个装饰器函数。这将在每次调用修饰函数时调用。装饰器函数需要使用四个位置参数:\n\nwrapped - The wrapped function which in turns needs to be called by your wrapper function.\ninstance - The object to which the wrapped function was bound when it was called.\nargs - The list of positional arguments supplied when the decorated function was called.\nkwargs - The dictionary of keyword arguments supplied when the decorated function was called.\n\n具体使用参考文档吧。 文档地址\n\nnewrelic 源码仔细看下去，太...复杂了。下一篇再分析一个 flask 请求到结束探针工作的完整过程吧。\n最后，感谢女朋友支持和包容，比❤️\n也可以在公号输入以下关键字获取历史文章：公号&小程序 | 设计模式 | 并发&协程\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}