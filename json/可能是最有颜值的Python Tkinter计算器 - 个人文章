{"title": "可能是最有颜值的Python Tkinter计算器 - 个人文章 ", "index": "tkinter,windows,python", "content": "上机实践课程开始了,嗯，老师来了之后念了下PPT，然后说:开始做吧.........\n然后就开始了Python的GUI之路，以前没接触过PYthon的可视化界面(虽然这样很不明智)但是现在做起来感觉写小工具还挺方便的，当时搜到的第一个库便是Tkinter就直接开始写了后来发现QT很不错的样子，下个实验就用QT吧.然后关于Tkinter(python3.6)\n计算器源码 ennn.....有的命名不规范.......\n首先对于python中栈的实现是通过list的方式模拟pop()出栈，append()入栈\n开始一个窗口\n做一个可视化的东西，首先想到的坑定是窗口吧窗口又有很多构成，比如title,ico，size,bd,菜单等.\nimport tkinter\nimport os\nfrom tkinter import *\n\nclass Calculator(object):\n    \"\"\"计算器\"\"\"\n    def __init__(self):\n        self.tk=tkinter.Tk() #实例化\n        self.tk.title('计算器')\n        self.tk.minsize(370,460)\n        self.tk.maxsize(400,400)\n        #也可以用self.tk.resizable(0, 0)来禁止调节大小\n        self.tk.iconbitmap(os.getcwd()+'/favicon.ico')\n\n    def start(self):\n        self.tk.mainloop()    \n\nif __name__ == '__main__':\n    NewCalculator=Calculator()\n    NewCalculator.start()\n这里就生成了一个基本的窗口,对于其中的mainloop()的作用如果我们删除它,窗口会一闪而过，它就是为了防止这种情况\n面板显示\n做成计算器之后坑定要先是计算结果，这里就需要生成显示面板当然我们也会很自然地联想到显示内容的字体设置等需求，具体事例在下面代码\n....\nimport tkinter.font as tkfont\n\n....\n        #字体设置\n        self.EntryFont=tkfont.Font(self.tk,size=13)\n        self.ButtonFont=tkfont.Font(self.tk,size=12)\n        #面板显示\n        self.count=tkinter.StringVar()\n        self.count.set('0')\n        self.label=tkinter.Label(self.tk,bg='#EEE9E9',bd='3',fg='black',anchor='center',font=self.EntryFont,textvariable=self.count)\n        self.label.place(y=10,width=380,height=40)\n\n....\n其中tkinter中面板Lable有一些参数，这里用到的基本上也可以满足常见的需求了其中bg是背景色，fg是前景色，改变内容的颜色，anchor是定位内容在面板中的位置，如下图\n\n\n方向\n示例\n表格\n\n\n\nnw\nn\nne\n\n\nw\ncenter\ne\n\n\nsw\ns\nse\n\n\n\n关于面板以及后边的Button的定位，可以用很多方式，place可以准确的定位，也可以用pack(),grid()对于计算器place是更好的，能够准确定位每一个控件其中字体也可以直接在Lable()加参数，例如font=(\"Arial,6\")textvariable相当于“监听”的作用，绑定tkinter中的string，就可以用set()的方式方便的改变面板的内容\n按钮,输入框设置\n按钮,输入框的参数和面板里面的是相似的\nself.NumButton=tkinter.Button(master=self.tk,relief=GROOVE,bg='#EE6A50',text=self.ButtonList[0],\n            font=self.ButtonFont,command=self.clear)\nself.NumButton.place(x=30,y=80,width=70,height=55)\n\nself.shiEntry=Entry(self.baoxianTk,validate='key',validatecommand=(self.checkNum,'%P'),font=self.EntryFont)\nself.shiEntry.place(x=190,y=80)\n一样的是通过bg等参数设置基础的样式，只不过这里会通过command绑定事件，类似于JQ中的.click这里的place也是为了能够准确定位才使用的，其中的relief代表着Button的样式relief=FLAT or GROOVE or RAISED or RIDGE or SOLID or SUNKEN\n其中删除输入框的输入内容\ntext.delete(10)  #删除索引值为10的值\ntext.delete(10, 20)  #删除索引值从10到20之前的值\ntext.insert(0, END)  #删除所有值\n输入限制\n在设计功能的时候我们可能需要用户输入数字等，这里可以进行限制一下Button参数中validate指定什么时候执行validatecommand绑定的函数，使用%P可以实时获取输入的内容当validate选项指定为key的时候，有任何的输入操作都会被拦截,这个时候返回True白能量才会输入到Entry\nself.checkNum=self.baoxianTk.register(self.validateNum)\n\n\nself.gerenEntry=Entry(self.baoxianTk,validate='key',validatecommand=(self.checkNum,'%P'),font=self.EntryFont)\nself.gerenEntry.place(x=190,y=190)\n\n\n#验证是否输入数字    \ndef validateNum(self,content):\n    if content.isdigit() and int(content)>=0 or content==\"\":\n        return True\n    else:\n        return False\nvalidateNum()函数可以根据自己的需求进行更改启用验证validate选项可以设置的值有：\n\n\n名称\n事件\n\n\n\nfocus\n当 Entry 组件获得或失去焦点的时候验证\n\n\nfocusin\n当 Entry 组件获得焦点的时候验证\n\n\nfocusout\n当 Entry 组件失去焦点的时候验证\n\n\nkey\n当输入框被编辑的时候验证\n\n\nall\n当出现上边任何一种情况的时候验证\n\n\n\n拓展符号设计\n这个小计算器中我增加了%，/，sqrt三个符号对于他们的实现我的思路是添加到面板之前检测一下传入的button内容如果是这三种符号则做出对应的处理\n其中需要注意如果是多位数或者带有符号式子不能直接进行变换，需要判断你要转置的数字的位数，我的具体方式如下\n    def checkList(self):\n        result=0\n        locate=-1\n        listSum=0\n        for length in range(0,len(self.inputlist)):\n            if re.findall(r'[-+*/]',str(self.inputlist[length])):\n                result=1\n                if length>locate:\n                    locate=length\n            else:\n                pass\n        if result==1:\n            for i in range(locate+1,len(self.inputlist)):\n                listSum+=int(self.inputlist[i])*(10**(len(self.inputlist)-i-1))\n        else:\n            for j in range(0,len(self.inputlist)):\n                listSum+=int(self.inputlist[j])*(10**(len(self.inputlist)-j-1))\n        return listSum,locate\n    #添加button\n    def addButton(self,button):\n        if button==self.ButtonList[18]:\n            listSum,locate=self.checkList()\n            if locate==-1:\n                self.inputlist=[str(round(eval('1/'+str(listSum)),5))]\n            else:\n                for k in range(locate+1,len(self.inputlist)):\n                    del self.inputlist[k]\n                self.inputlist.append(str(round(eval('1/'+str(listSum)),5)))\n        elif button==self.ButtonList[19]:\n            pass\n        elif button==self.ButtonList[20]:\n            pass\n        else:\n            self.inputlist.append(button)\n        self.count.set(self.inputlist)\n关于lambda\n百度百科：Lambda表达式是Python中一类特殊的定义函数的形式，使用它可以定义一个匿名函数与其它语言不同，Python的Lambda表达式的函数体只能有唯一的一条语句，也就是返回值表达式语句\n搜索更多文章后理解更多，Lambda函数可以说是对按钮起到“call back”的作用如果我们不使用Lambda进行中间函数的延迟回调，在创建按钮的同时command绑定的函数会被调用即如下面两句代码的区别,第二句在进行创建时会直接执行knobDown函数\nself.NumButton=tkinter.Button(master=self.tk,relief=GROOVE,bg='#BFEFFF',text=self.ButtonList[20],\n            font=self.ButtonFont,command=lambda:self.knobDown(self.ButtonList[20]))\nself.NumButton=tkinter.Button(master=self.tk,relief=GROOVE,bg='#BFEFFF',text=self.ButtonList[20],\n            font=self.ButtonFont,command=self.knobDown(self.ButtonList[20]))\n更详细的解释可以参考文末最后两个文章，还是前辈写得好\n关于单选框\n本来想实现PPT中给出的示例-房贷计算的拓展，但是一直这个单选框产生BUG就放弃了下面的示例是从网上摘抄过来的，具体的网址忘了就是通过variable绑定一个IntVar(),通过.get()方式可以获取Radiobutton中value的值\n#!/usr/bin/env python\nimport tkinter\nfrom tkinter import *\nimport tkinter.font as tkfont\n\n\nroot=tkinter.Tk()\n\nval=tkinter.IntVar()\n\nval.set(0)\n\ndef func1():\n    if val.get() == 0:\n        label.configure(text='radio 0')\n    else:\n        label.configure(text='radio 1')\n\nlabel = tkinter.Label(root, text='radio 0')\nlabel.pack()\nr0 = tkinter.Radiobutton(text = 'radio0', variable = val, value = 0)\nr0.pack()\nr1 = tkinter.Radiobutton(text = 'radio1', variable = val, value = 1)\nr1.pack()\nb = tkinter.Button(root, text='button', command=func1)\nb.pack()\n\nroot.mainloop()\n\n打包\nC:\\Users\\bayi\\Desktop\\shiyan\\progrem\n(venv) λ pip install pyinstaller\n\nC:\\Users\\bayi\\Desktop\\shiyan\\progrem\n(venv) λ pyinstaller -F -w -i favicon.ico run.py\n一开始因为代码中的设置ico图标为下面代码第一行windows下打包路径识别有问题,把图标换到一个路径短的地方修改成绝对路径就OK了(下面代码第二行,exe和ico要放在同一个目录下\nself.baoxianTk.icobitmap('favicon.ico')\n\nself.baoxianTk.iconbitmap(os.getcwd()+'/favicon.ico')\n效果预览\n虽然是现学现卖和对于别人的老知识，但是成功之后还是挺有成就感的(and我似乎对美工要求挑剔........调颜色和样式能挑半天,包括以前的那个爬虫的前端\n\n参考：Tkinter控件详解Python数据结构——栈创建一个只能输入数字的输入框Tkinter教程之Entry篇另一个Lambda表达式教程《Python编程》笔记（七）\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "5"}