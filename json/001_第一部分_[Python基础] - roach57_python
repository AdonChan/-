{"title": "001_第一部分_[Python基础] - roach57_python ", "index": "python", "content": "一.python基础:\n\n\n\n数据类型:\n   \n   原始类型:\n   int float byte\n\n   复合类型:\n   由其他原始类型组合起来的类型\n   list dict cuple \n\n\n运算符和表达式:\n\n        算术运算符:\n                加 / 减 / 乘 / 除 / 取模 / 幂 / 地板除\n                +    -    *    /     %     **     //\n\n        python2 的 除:\n        10 / float(20)\n\n        位运算符[二进制之间的运算]:\n        bin(60) 转换成二进制数\n        int('1100',2)   将二进制转换成十进制\n        &    按位与        都为1 才为1    \n        |    按位或         存在1 即为1\n        ^    按位异或         相同的为0,不同的为1\n        ~    按位取反         正数的补码，反码都是其本身\n                        负数的补码是:符号位不变,其余各位求反,末位加1 ，既11111\n                        反码是:符号位为1,其余各位求反,但末位不加1 ，既11110\n                    \n                        假设有一个数~9，计算步骤如下，9=1001\n                        其补码为01001，\n                        对其取反10110，这个数是在内存中存放的，现在需要装换成原码，既先减1，然后取反得 \n                        11010，符号位为1是负数，既-10\n        <<    左移\n        >>  右移\n\n\n按位取反:\n    ---\n    正数的补码和反码都是其本身,但是前面要加上正数的符号位 \"0\"\n    ---\n    负数的符号位是\"1\"\n    负数的补码是:符号位不变,其余各位求反,末位加1\n    负数的反码是:符号位不变,其余各位求反\n    ---\n    二进制数在内存中是以补码的形式存放的\n    ---\n\n\n    60的按位取反计算:\n    \n        第一步:\n        计算60的 [补码] 和 [反码]:\n    \n                    原码    补码     反码\n            十进制    60\n            二进制    111100  0111100    0111100\n    \n    \n        第二步:\n        取反[取反操作是对补码进行取反]:\n    \n    \n                            补码\n                            1000011\n    \n                                    反码\n                                    补码 - 1\n                                    1000010\n                    原码\n                    1111101\n                    1 代表是负数\n                     111101 转换成十进制为61\n                    -61\n\n\n\n比较运算符[返回布尔类型]:\n   ==    等于\n   !=    不等于\n   >   大于\n   <   小于\n\n逻辑运算符:\n\n   \n   and        与     同时True才为True\n   or        或  只要存在True 则为True\n   not     非  取反\n\n   逻辑运算的短路功能:\n   前面False后面就不会再计算:\n   1+2 >4 and (2+2) == 4\n\n   前面是True就不会再计算后面:\n   1+2 <4 or (2+2) == 3　\n\n---\n   def add(x, y):\n       print(\"%d + %d\" %(x, y))\n       return x+y\n   add(1, 2) > 4 and add(2, 3) == 5\n      ...: \n   1 + 2\n   Out[2]: False\n\n---\n   def add(x, y):\n       print(\"%d + %d\" % (x, y))\n       return x+y\n   add(1, 2) < 4 and add(2,3) < 6\n      ...: \n   1 + 2\n   2 + 3\n   True\n\n---\n   def add(x, y):\n       print(\"%d + %d\" % (x, y))\n       return x+y\n   add(1, 2) < 4 and add(2,3) < 4\n      ...: \n   1 + 2\n   2 + 3\n   False\n\n\n其他运算符:\n\n    =        赋值运算符\n    in         成员运算符\n    not in     成员运算符\n    is         身份运算符, 比较两个元素的id; 列表不能用is 做比较\n    is not     身份运算符\n            is 使用的环境经常拿来判断是不是None;\n\n表达式与优先级:\n        1. 一元高于二元\n        2. 数值高于逻辑\n        3. 算术运算高于位运算\n        4. 乘除高于加减\n        5. 拿不准时加括号\n程序结构:\n        1.    顺序结构\n        2.    分支结构\n        3.    循环结构\n\n        关于 SWITCH\n        Python中并没有switch结构,因为'switch'结构完全可以由'if elif else'语句来实现\n        \n        switch实现方法:\n        粗糙版:\n        #coding:utf8  \n        #add minus divide using python  \n        from __future__ import division  \n        x=1  \n        y=2  \n        operator='/'  \n        result={  \n        \"+\":x+y,  \n        \"-\":x-y,  \n        \"*\":x*y,  \n        \"/\":x/y  \n        }  \n        print(result.get(operator))         \n\n        改进版:\n        #!/usr/bin/env python\n        # -*- encoding:utf-8 -*-\n        \n        class calculate:\n            def __init__(self, x, op, y):\n                self.x = x\n                self.op = op\n                self.y = y\n        \n            def count(self):\n                result={\n                \"+\":self.x+self.y,\n                \"-\":self.x-self.y,\n                \"*\":self.x*self.y,\n                \"/\":self.x/self.y}\n                print(result.get(self.op))\n        \n        mark = calculate(10,\"+\",2)\n        mark.count()\npython的三元运算\n        a = 4\n        b = a if a > 0 else 0\nRANGE函数\n        range(x)         [0,x)\n        range(m, n)     [m, n)\n        range(m, n, s)    [m,n),步长为s\nbreak 子句\n        * 只能出现在循环结构中\n        * 用于跳出当前循环结构\ncontinue子句:\n        * 只能出现在循环结构中\n        * 用于跳过此次迭代的剩余操作\nelse子句:\n        循环结构的else子句是python特有的,用于表示一个循环不是经过'break'跳出循环,提前结束循环,而是正常退出的,才会执行else中的语句;\n二.内置容器:\n\n列表\n        * list是最常用的线性数据结构\n        * list是一系列元素的有序组合\n        * list是可变的\n        \n        列表的操作:\n        定义列表:\n        li = []\n        li = list()\n        li = [1, 2, 3]\n\n        查看帮助文档:\n        help(list)\n        增:append, extend, insert\n        删:clear, pop, remove\n        改:reverse, sort\n        查:count, index\n        其他:copy\n\n        增:\n        li = []\n        append:只能一个一个增加\n        li.append(3)\n        \n        extend:扩展\n        li.extend([5,6,7])\n        li\n        [3, 5, 6, 7]\n\n        insert:位置之前插入\n        li.insert(0, 0) 在第一个之前插入0\n\n        删:\n        clear:清空列表\n        li.clear()\n\n        remove:从左开始删除指定元素一个,如果删除的元素不存在会报错ValueError\n        li.remove(3)  删除元素3\n        \n        pop:删除指定位置元素:如果不存在会报错IndexError\n        li.pop()    删除最后一个元素\n        li.pop(3)   删除key是3的元素\n\n        改:\n        reverse:颠倒列表顺序:\n        sort:从小到大排序:    仅用于简单数字排序\n        sort(reverse=True) 从大到小排序:\n\n        查:\n        count:显示匹配元素个数\n        li.count(3)\n        \n        其他:\n        index(3):返回指定元素在列表中的位置;如果不存在会报ValueError:\n        index(value, [start, [stop]]) \n\n        copy: 深拷贝,会生成一个新的list\n                赋值是浅拷贝,浅拷贝的数据修改会对原来的list产生影响;\n\n        下标操作:\n        li[1]\n        \n        li[1] = 10\n\n        切片:\n        li[3:5]:  前面是闭区间  后面是开区间\n        li[3:]\n        li[:]  效果和copy是一样的,效率会比copy快;\n        li[:4] \n        li[4:-2]     切到倒数第二个;后面是开区间\n        li[-4:-1]\n        li[2:6:2]:    start, stop ,步长\n        li[6:2:-1]  start,stop ,反向显示,步长为1\n        li[6:2:-2]    start,stop,反向显示,步长为2\n        li[::-1]\n        li[::2]\n元组[tuple]:\n        tuple和list大多数地方类似\n        tuple是不可变结构\n        tuple只能获取值\n\n        定义一个元组:\n        t = ()\n        t = tuple()\n\n        count:统计元素个数\n        index:返回指定元素在元组中的位置\n\n        下标操作[通过下标获取value]:\n        t[1]\n\n* PACKING & UNPACKING\n\n        PACKING        :把多个变量的值变成一个元组或者列表,默认是变成元组\n        UNPACKING    :也可以把一个元组或者列表赋值给多个变量\n\n    ---\n        x, *y = (1, 2, 3, 4)\n        print(x)\n        1\n        print(y)\n        [2, 3, 4]\n\n    ---\n        *x, y = (1, 2, 3, 4)\n        print(x)\n        [1, 2, 3]\n        print(y)\n        4\n\n    ---\n        *_ 这个表示赋值给一个不能用的变量:\n\n        x, *_, y = (1, 2, 3, 4)\n        print(x)\n        1\n        print(y)\n        4\n        \n    ---\n        x, (y, z) = (1, (2, 3))\n        print(x)\n        1\n        print(y)\n        2\n        print(z)\n        3\n\n    ---\n集合:\n        集合的含义和数学上集合的含义相同\n        集合不是线性结构\n        * 集合元素是唯一的\n        集合元素是可hash的\n        \n        集合的操作:\n        初始化:\n        s = set()\n        s = set([1, 2, 3])\n\n        增:\n        s.add(3)                     //添加一个元素\n        s.update([3, 4, 5, 6])        //集合添加list中的多个元素\n\n        删:\n        remove:        删除,删除不存在的元素会抛出异常;\n        discard:    删除,删除不存在的元素不会抛出异常;\n        clear:        清空\n        pop:        随机删除集合中的一个元素\n        \n        集合运算:\n        union                    并集              a | b\n        intersection            交集              a & b\n        difference                差集,不可交换的    a - b\n        symmetric_difference    集合之差的并集       a ^ b\n\n        集合判断[返回布尔值]:\n        issubset    子集\n        issuperset    超集\n        isdisjoint    \n字典:\n        * 字典是一种无序集合\n        * 字典是一种KV结构\n        * value可以是任何对象\n        * key是唯一的\n        * key必须是可hash对象\n\n        字典的操作:\n        d = dict()\n        d = {'a':5, 'b':4}\n        d['a']\n        \n        d.keys()\n        dict_keys(['b', 'a'])\n\n        遍历 key:\n        for key in d.keys():\n            print(d[key])\n\n        遍历 value:\n        for value in d.values():\n            print(value)\n\n        遍历key和value:\n        for key,value in d.iterms():\n            print(key, value)\n            print('%s => %s' %(key, value))\n\n        d.iterkeys()    返回的是一个生成器;\n        \n        pop,popitem     用于删除元素\n        d.pop('key')    需要指定key,删除不存在的值返回KeyError\n        d.pop('key',6)    删除不存在的值将返回 6\n        \n        增加字典元素:\n        d['c'] = 7\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "2"}