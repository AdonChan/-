{"title": "使用腾讯云配置小程序服务端开发环境 - 古寺比的寺 ", "index": "腾讯云,微信小程序,小程序,python", "content": "最近做小程序服务器的配置，这一篇是服务器配置的记录，方便以后安装配置。\n购买服务器\n之所以选腾讯云的原因很简单，那就是便宜，选用成都区，最低配置每月只需29￥。在 腾讯云 官网注册登录就可以直接购买服务器了。服务器系统我选择的是 ubuntu。\n服务器配置\n启动服务后使用新用户（此步骤不是必须）。\n新建用户\n首先确认使用的是 root 用户登录如果不是使用以下命令切换\nsudo su\n使用 adduser 命令创建用户\nadduser username # username替换为你自己的用户名\n接下来的步骤会让你输入密码和个人信息，自己设置就好。\n使用usermod 命令将新建的用户添加到 sudo 组。\nusermod -aG sudo username\n关闭ssh密码登录使用密钥登录\n安装openssh\n因为是新系统，先执行一下 apt-get update\nsudo apt-get update\nsudo apt-get install openssh-server\n启动ssh服务\n可以通过sudo su命令来临时切换到root权限(不是所有的账号都可以切换到root权限,只有在/etc/sudoers文件中符合规则的用户能切换root身份)\nsudo su\n/etc/init.d/ssh start\n使用密钥登录\n服务器端生成密钥对：\ncd /home/gs # 打开新建的用户目录\nmkdir .ssh\ncd .ssh\nssh-keygen -b 2048 -t rsa\nssh-keygen的基本用法：\n-b后面是指定加密后的字符串长度-t后面是指定加密算法，常用的加密算法有rsa,dsa等\n默认生成的文件如下：\nid_rsa.pub  # 公钥文件\nid_rsa      # 私钥文件\n新建 authorized_keys 文件\n将本地机器的 id_rsa.pub 文件内容复制到 authorized_keys 文件\n测试使用公钥是否可以登录\nssh name@host  # name 是机器的用户名 host 是机器的地址\n关闭ssh密码登录\n确认可以通过私钥进行登录后，关闭ssh密码登录。\nsudo su\nvim /etc/ssh/sshd_config\n将 PasswordAuthentication yes修改成PasswordAuthentication no\n重启系统\nsudo su\nreboot\n搭建开发环境\n安装 zsh\n在终端中输入下面命令进行安装：\nsudo apt-get install zsh\n输入下面命令进行替换zsh替换为你的默认shell：\nchsh -s /bin/zsh\n重启终端使用 zsh\n安装oh-my-zsh\n通过curl安装\ncurl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh\n通过wget安装\nwget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O - | sh\n安装 pip\nsudo apt-get install python-pip  # 安装 pip\npip install --upgrade pip\nsudo apt-get install python3-pip  # 安装 pip3\npip3 install --upgrade pip\n安装 virtualenv\n因为我使用 python3 作为开发环境，所以这里使用 pip3\nsudo pip3 install virtualenv\nsudo pip3 install virtualenvwrapper\n在 .zshrc 添加以下内容\nexport VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3\nexport WORKON_HOME=$HOME/.virtualenvs\nsource /usr/local/bin/virtualenvwrapper.sh\n然后执行命令：\nsource .zshrc\n现在可以输入 workon 测试 virtualenvwrapper 是否已经安装成功。\n创建虚拟环境\nmkvirtualenv py3 -p python3  # -p 参数指定 python 版本\n测试虚拟环境\nworkon py3\n安装 ipython\n首先进入 py3 虚拟环境\nworkon py3\n使用 pip 安装 ipython\npip install ipython # 安装 ipython \n配置 vim\npython vim 配置使用的是 py-vim\n需要先安装 ctags和 cmake\nsudo apt-get install ctags\nsudo apt-get install cmake\n然后将 py-vim clone 到服务器\ngit clone https://github.com/gusibi/py-vim\ncd py-vim\nsh setup.sh \n使用 Caddy 配置 https\nCaddy是一种新的Web服务器，由 go 编写，默认使用 https 协议。caddy 配置简单，容易上手。\n安装 caddy 二进制文件\nCaddy项目提供了一个安装脚本，可以检索和安装Caddy服务器的二进制文件。 可以执行以下命令直接安装：\ncurl -s https://getcaddy.com | bash\n在安装过程中，脚本将使用sudo获取管理权限，以便将Caddy文件放在系统范围的目录中，因此可能会提示您输入密码。\n配置 caddy 必要的目录\nCaddy的自动TLS支持和unit文件需要特定的目录和文件权限。 我们将在这一步中创建它们。\n首先，创建一个目录，该目录将容纳主要的配置文件Caddyfile 。\n# 创建一个目录，该目录将容纳主要的配置文件Caddyfile\nsudo mkdir /etc/caddy\n# 将此目录的所有者更改为root用户及其组到www-data ，以便Caddy可以读取它\nsudo chown -R root:www-data /etc/caddy\n# 创建一个空的Caddyfile\nsudo touch /etc/caddy/Caddyfile\n# 在/etc/ssl创建另一个目录用来存储自动获得的SSL私钥和证书\nsudo mkdir /etc/ssl/caddy\n# 将此目录的所有者更改为root用户及其组到www-data\nsudo chown -R www-data:root /etc/ssl/caddy\n# 确保没有人可以通过删除其他人的所有访问权限来读取这些文件。\nsudo chmod 0770 /etc/ssl/caddy\n# 创建的最终目录是网站的发布目录\nsudo mkdir /var/www\n# 该目录应由www-data完全拥有。\nsudo chown www-data:www-data /var/www\n# 创建日志目录\nsudo mkdir /var/log/caddy\n# 将此目录的所有者更改为root用户及其组到www-data\nsudo chown -R www-data:root /var/log/caddy\n将 caddy 配置为系统服务\n从官方的Caddy存储库下载文件。 curl命令的附加-o参数会将该文件保存在/etc/systemd/system/目录中，并使其对systemd可见。\nsudo curl -s https://raw.githubusercontent.com/mholt/caddy/master/dist/init/linux-systemd/caddy.service -o /etc/systemd/system/caddy.service\nreload 系统服务\nsudo systemctl daemon-reload\n将caddy 设置为开机启动\nsudo systemctl enable caddy.service\n检查 caddy 服务是否已正式加载\nsudo systemctl status caddy.service\n允许HTTP和HTTPS连接\nCaddy使用HTTP和HTTPS协议提供网站，因此我们需要允许访问相应的端口，以便使网路可以从网路获取\nsudo ufw allow http\nsudo ufw allow https\n现在修改caddy 配置 /etc/caddy/Caddyfile\nhttps://your.domain {  # 启用 https\n    gzip\n    log /var/log/caddy/access.log  # 指定日志目录\n    proxy / http://127.0.0.1:8888 {\n        header_upstream Host {host}\n        header_upstream X-Real-IP {remote}\n        header_upstream X-Forwarded-For {remote}\n        header_upstream X-Forwarded-Proto {scheme}\n    }\n}\n保存文件，启动 caddy\nsudo systemctl start caddy    # 启动 caddy\nsudo systemctl restart caddy  # 重启 caddy\nsudo systemctl stop caddy     # 关闭 caddy\n现在启动服务，访问 https://your.domain 应该就能看到数据。日志文件在 /var/log/caddy/ 目录下。\n总结\n小程序开发需要 https，这里我们使用了 caddy 作为 web 服务器。服务器配置好后可以直接存储为镜像，以后可以直接从镜像开启服务，就不再需要配置环境。\n参考链接\n\nHow To Create a Sudo User on Ubuntu \nzsh安装和配置\nvirtualenvwrapper\npy-vim\nInstall MongoDB Community Edition on Ubuntu\n使用 Caddy 替代 Nginx，全站升级 https，配置更加简单\nhow-to-host-a-website-with-caddy-on-ubuntu-16-04\n\n\n最后，感谢女朋友支持。\n\n\n欢迎关注(April_Louisa)\n请我喝芬达\n\n\n\n\n\n\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "8"}