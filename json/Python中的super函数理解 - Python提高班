{"title": "Python中的super函数理解 - Python提高班 ", "index": "class,python", "content": "super()函数根据传进去的两个参数具体作用如下：\n\n通过第一参数传进去的类名确定当前在MRO中的哪个位置。MRO(Method Resolution Order)；\n通过第二个参数传进去的self，确定当前的MRO列表。\n\ndef super(cls, inst):\n    mro = inst.__class__.mro() #确定当前MRO列表\n    return mro[mro.index(cls) + 1] #返回下一个类\n如下代码：\nclass A(object):\n  def name(self):\n    print('name is xiaoming')\n    #super(A,self).name()\nclass B(object):\n  def name(self):\n    print('name is cat')\nclass C(A,B):\n  def name(self):\n    print('name is wang')\n    super(C,self).name()\nif __name__ == '__main__':\n  c = C()\n  print(c.__class__.__mro__)\n  c.name()\n执行以上代码输出：当执行C类下的super()函数时，实际调用了A类下的name函数。A中注释掉了super()函数，所以并没有向后继续执行。并且打印出了当前MRO列表顺序为C,A,B,object.\n(<class '__main__.C'>, <class '__main__.A'>, <class '__main__.B'>, <class 'object'>)\nname is wang\nname is xiaoming\n当我们把A类中的注释去掉后，执行代码输出：可以看到，当A执行后继续执行了B中的name()函数。如果B中仍然有super函数则会继续向上去查找object中是否有name()函数。\n(<class '__main__.C'>, <class '__main__.A'>, <class '__main__.B'>, <class 'object'>)\nname is wang\nname is xiaoming\nname is cat\n参考链接\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}