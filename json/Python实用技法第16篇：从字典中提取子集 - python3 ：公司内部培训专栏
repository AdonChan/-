{"title": "Python实用技法第16篇：从字典中提取子集 - python3 ：公司内部培训专栏 ", "index": "python", "content": "上一篇文章：Python实用技法第15篇：筛选序列中的元素下一篇文章：Python实用技法第17篇：将名称映射到序列的元素中\n\n1、需求🙀\n我们想创建一个字典，其本身是另一个字典的子集。\n2、解决方案😸\n利用字典推导式可轻松解决。\nprices={\n'a':1.1,\n'b':2.2,\n'c':3.3,\n'd':4.4,\n'e':5.5\n}\np1={key:value for key ,value in prices.items() if value>3}\nprint(p1)\n\nnames={'a','b'}\np2={key:value for key,value in prices.items() if key in names}\nprint(p2)\n结果：\n{'c': 3.3, 'd': 4.4, 'e': 5.5}\n{'a': 1.1, 'b': 2.2}\n3、分析😈\n大部分可以用字典推导式解决的问题也可以通过创建元组序列然后将它们传给dict()函数来完成，例如：\n#结果为：{'c': 3.3, 'd': 4.4, 'e': 5.5}\np3=dict((key,value) for key,value in prices.items() if value>3)\n但在字典推导式的方案更加清晰，而且实际运行起来也快很多。（第一种效率会快将近2倍）\n有时候会有多种方法来完成同一件时间。例如，第二个例子还可以重写成：\n#结果为：{'b': 2.2, 'a': 1.1}\np4={key:prices[key] for key in prices.keys() & names}\n但是，测试表明这种解决方案几乎要比第一种慢1.6倍。因此，当出现多种方案解决同一问题时，可以稍稍测试一下来研究所花费的时间。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}