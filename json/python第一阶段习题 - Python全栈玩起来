{"title": "python第一阶段习题 - Python全栈玩起来 ", "index": "python", "content": "\n按照下面的格式打印1~10的数字以及每个数的平方、几何级数和阶乘。（5分）\n\n\n数字\n平方\n几何级数\n阶乘\n\n\n\n1\n1\n2\n1\n\n\n2\n4\n4\n2\n\n\n3\n9\n8\n6\n\n\n4\n16\n16\n24\n\n\n5\n25\n32\n120\n\n\n\n\nprint('|{0:<18}|{1:<18}|{2:<18}|{3:<18}|'.format('数字', '平方', '几何级数', '阶乘'))\nprint('|{0:<20}|{1:<20}|{2:<20}|{3:<20}|'.format('----', '----', '----', '----'))\nnumber4 = 1\nfor i in range(1, 13):\n    number = i\n    number2 = i ** 2\n    number3 = 2 ** i\n    number4 *= i\n    print('|{0:<20}|{1:<20}|{2:<20}|{3:<20}|'.format(number, number2, number3, number4))\n\n\nfrom math import factorial\n\n\ndef main():\n    print('%-12s%-12s%-12s%-12s' % ('s', 's', 's', 's'))\n    for num in range(1, 11):\n        print('%12d%12d%12d%12d' % (num, num ** 2, 2 ** num, factorial(num)))\n# %d前加数字表示间隔的字符数\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n2.设计一个函数，生成指定长度的验证码（由数字和大小写英文字母构成的随机字符串）。（5分）\nimport random\nimport string\n\n\ndef id_code():\n    long = int(input('请输入验证码的长度'))\n    str1 = ''\n    for i in range(long):\n        str1 += random.choice(string.ascii_letters + string.digits)\n    print(str1)\n\nid_code()\n\n\n\n3.设计一个函数，统计字符串中  英文字母和数字各自出现的次数。（10分）\nnum1 = 0\nnum2 = 0\nstr1 = '@djjkjk9565628jjjlkaskdl--'\nimport string\nfor i in str1:\n    if i in string.digits:\n        num1 += 1\n    if i in string.ascii_letters:\n        num2 += 1\nprint(num1,num2)\n\n\n\n4.设计一个函数，判断传入的整数列表（要求元素个数大于2个）中的元素能否构成等差数列。（10分）\ndef judge():\n    list1.sort()\n    for i in range(len(list1)-2):\n        if (list1[i+1]-list1[i]) != (list1[i+2]-list1[i+1]):\n            return False\n    return True\n\nlist1 = [1,2,3,5]\nprint(judge())\n\n\n5.设计一个函数，计算字符串中所有数字序列的和。（10分）\nimport re\n\nstr1 = 'asb123dasjk-7f078'\nlist1 = re.findall(r'-\\d+|\\d+',str1)\ns = 0\nfor i in list1:\n    s += int(i)\nprint(s)\n\n\n6.设计一个函数，对传入的字符串（假设字符串中只包含小写字母和空格）进行加密操作，加密的规则是a变d，b变e，c变f，……，x变a，y变b，z变c，空格不变，返回加密后的字符串。（10分）\ndef change(str1):\n    str2 = ''\n    for i in str1:\n        if i != ' ':   # a 97   z 122\n            str2 += chr(ord('a') + (ord(i) -ord('a') + 3) % 26 )\n        else:\n            str2 += ' '\n    return str2\n\nprint(change('abcd  xyz'))\n\n\n\n7.设计“跳一跳”游戏的计分函数，“跳一跳”游戏中黑色小人从一个方块跳到另一个方块上会获得1分，如果跳到方块的中心点上会获得2分，连续跳到中心点会依次获得2分、4分、6分、……。该函数传入一个列表，列表中用布尔值True或False表示是否跳到方块的中心点，函数返回最后获得的分数。（10分）\n方法一\nstr1 =''\nlist1 = [True, True, True, False, False, False, True]\n\nnum1 = list1.count(False)\nnum2 = 0\nfor i in list1:\n    str1 += str(i)\nlist2 =  str1.split('False')\nfor i in list2:\n    num2 +=i.count('True')*(i.count('True')+1)\n\nprint(num2+num1)\n\n\n\nlist1 = [True, True, True, False, False, False, True]\n\nscore = 0\nrate = 2\nfor i in list1:\n    if i:\n        score += rate\n        rate += 2\n    else:\n        score += 1\n        rate = 2\nprint(score)\n\n\n8.设计一个函数，统计一个字符串中出现频率最高的字符及其出现次数（20分）。\ndef count(str):\n    dict={}\n    for i in str:\n        if i in dict:\n            dict[i]+=1\n        else:\n            dict[i]=1\n    max_keys = []\n    max_value = 0\n    for key, value in dict.items():\n        if value > max_value:\n            max_value = value\n            max_keys.clear()\n            max_keys.append(key)\n        elif value == max_value:\n            max_keys.append(key)\n    return max_keys, max_value\n\nprint(count('aabbaaccbb'))  # (['a', 'b'], 4)\n\n\n\n\n9.设计一个函数，传入两个代表日期的字符串，如“2018-2-26”、“2017-12-12”，计算两个日期相差多少天。（20分）。\ndef month_to_day(m):\n    s = 0\n    for i in range(1, m):\n        if i == 2:\n            s = s+29 if (i % 4 == 0 and i % 100 != 0) or (i % 400 == 0) else s+28\n        else:\n            s = s+30 if i == 4 or i == 6 or i == 9 or i == 11 else s+31\n    return s\n\n\ndef date_to_day(date1, date2):\n    list1 = date1.split('-')\n    list2 = date2.split('-')\n    y1,m1,d1,y2,m2,d2 = int(list1[0]),int(list1[1]),int(list1[2]),int(list2[0]),\\\n                        int(list2[1]),int(list2[2])\n    sum = 0\n    if y1 > y2:\n        y1, y2 = y2, y1\n        m1, m2 = m2, m1\n        d1, d2 = d2, d1\n    if y1 == y2 and m1 > m2:\n        m1, m2 = m2, m1\n        d1, d2 = d2, d1\n    if y1 == y2 and m1 == m2 and d1 > d2:\n        d1, d2 = d2, d1\n    print(y1,m1,d1,y2,m2,d2)\n\n    for i in range(y1, y2):\n        sum = sum + 366 if (i % 4 == 0 and i % 100 != 0) or (i % 400 == 0) else sum + 365\n    s1 = month_to_day(m1)\n    s2 = month_to_day(m2)\n\n    print('sum=%d,s2=%d,s1=%d,d2=%d,d1=%d'%(sum,s2,s1,d2,d1))\n    sum = sum+s2-s1 + d2 - d1\n    return sum\n\ndate1 = '2018-1-1'\ndate2 = '2017-12-31'\nprint(date_to_day(date1,date2))\n\nimport datetime\nd1 = datetime.datetime(2018,1,1,0,0,0,0)\nprint(d1)\nd2 = datetime.datetime(2017,12,31,0,0,0,0)\nd3 = d1-d2\nprint(d3.days)\n\n\n\n\n\n10.“四川麻将”共有108张牌，分为“筒”、“条”、“万”三种类型，每种类型的牌有1~9的点数，每个点数有4张牌；游戏通常有4个玩家，游戏开始的时候，有一个玩家会拿到14张牌（首家），其他三个玩家每人13张牌。要求用面向对象的方式创建麻将牌和玩家并实现洗牌、摸牌、玩家按照  类型  和  点数  排列手上的牌的操作，最后显示出游戏开始的时候每个玩家手上的牌。（20分）'''\nimport random\n\n\nclass Man(object):\n    def __init__(self, name):\n        self.name = name\n        self.maj = []\n\n\nclass Tongzi(object):\n    name = '筒'\n    def __init__(self, number):\n        self.number = number\n\nclass Tiaozi(Tongzi):\n    name = '条'\n\nclass Wanzi(Tongzi):\n    name = '万'\n\ndef packin(clas):\n    list = []\n    for i in range(1, 10):\n        for j in range(4):\n            a = clas(i)\n            list.append(a)\n    return list\n\ndef main():\n    tongList = packin(Tongzi)\n    tiaoList = packin(Tiaozi)\n    wanList = packin(Wanzi)\n    List = tiaoList + tongList + wanList\n    m1 = Man('王宝强')\n    m2 = Man('贾乃亮')\n    m3 = Man('马伊琍')\n    m4 = Man('陈羽凡')\n    # 洗牌\n    random.shuffle(List)\n\n    # 发牌\n    for i in range(13):\n        m1.maj.append(List.pop())\n        m2.maj.append(List.pop())\n        m3.maj.append(List.pop())\n        m4.maj.append(List.pop())\n        # 第一个人多发一张牌\n    m1.maj.append(List.pop())\n\n    for m in [m1, m2, m3, m4]:\n        print('\\n%s的牌是:' % m.name)\n        dict1 = {'筒': [], '条': [], '万': []}\n        for j in range(14 if m == m1 else 13):\n            if m.maj[j].name == '筒':\n                dict1['筒'].append(m.maj[j].number)\n            elif m.maj[j].name == '条':\n                dict1['条'].append(m.maj[j].number)\n            elif m.maj[j].name == '万':\n                dict1['万'].append(m.maj[j].number)\n\n        dict1['筒'].sort()\n        dict1['条'].sort()\n        dict1['万'].sort()\n        for key, value in dict1.items():\n            for i in value:\n                print(str(i) + key, end=' ')\n\nif __name__ == '__main__':\n    main()\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}