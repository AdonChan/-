{"title": "Python web开发笔记五：Django开发进阶一 - everfighting's notebook ", "index": "django,python", "content": "理解上下文\nrender(request,x.html,context)\nrequest:请求的固定写法。\nx.html:模板，需要填补丁的模板。\ncontext:上下文,填充模板的补丁。\n\n模板的使用流程\n\n写模板，创建Template对象，用模板语言进行修改。\n创建Context，context是一组字典，用来传递数据给Template对象。\n调用Template对象的render()方法传递context来填充模板。\n\n创建并使用模板\n\n单独创建templates、staitc文件夹，将之前写的前端文件如何放入Django项目。\n网页放入tempaltes，所有的静态文件放入static中。(静态文件是指网站中的 js, css, 图片，视频等)\n修改setting，TEMPLATES，DIRS:[os.path.join(BASE_DIR,'templates').replace('\\','/')], (注意逗号不能够少)\nhtml最上方加入{% load staticfiles %},在模板中引入静态文件，修改模板中的固定地址改为动态地址。({% static 'css/semantic.css' %})\n\n模板语言\n模板语言分为：模板变量，模板标签，模板过滤器。\n模板变量:\n            \n{{ value }},{{ Person.name }}\n模板标签：\n{% for item in list %}\n    {{ item }}\n{% endfor %}\n\n{% for key, value in dict.items %}\n    {{ key }}: {{ value }}\n{% endfor %}\n\n{% if today_is_weekend %}\n    <p>Welcome to the weekend!</p>\n{% else %}\n    <p>Get back to work.</p>\n{% endif %}\n\n注：标签可以多重进行嵌套。\n其他：\n{% forloop.first %}是一个布尔值。在第一次执行循环时该变量为True\n{% forloop.last %}是一个布尔值；在最后一次执行循环时被置为True。\n\n模板过滤器：\n{{ value|default:\"nothing\" }} 如果为空则显示nothing的样式。\n{{ value|truncatewords:200 }} 只显示前200个字符。\n{{ name|lower }} 功能是转换文本为小写。\n\n案例\n使用 django 的'日期字段'给每篇文章添加类似图中的一个发布日期，格式是「2016-11-05」\nmodel增加:\nclass Aritcle(models.Model):\n    date = models.DateField(auto_now=True)\n\nhtml增加:\n<span class=\"grey\">{{ article.date|date:\"Y-m-d\" }}</span>\n\n模板继承\nextends标签\n定义一个父模板为base.html,写出HTML的骨架，将需要子块修改的地方用{% block %}{% endblock %}标出。子模板使用{% extends \"base.html\" %}将内容填写进这些空白的内容块。模板继承允许你建立一个基本的”骨架”模板, 它包含你所有最常用的站点元素并定义了一些可以被子模板覆盖的block。如果你需要在子模板中引用父模板中的 block 的内容,使用 “{{ block.super }}“ 变量.这在你希望在父模板的内容之后添加一些内容时会很有用.(你不必完全覆盖父模板的内容.)\ninclude标签\n{% include %}该标签允许在(模板中)包含其它的模板的内容。标签的参数是所要包含的模板名称，可以是一个变量，也可以是用单/双引号硬编码的字符串。每当在多个模板中出现相同的代码时，就应该考虑是否要使用 {% include %} 来减少重复。\nstackoverflow问题：{% include %} vs {% extends %} in django templates？\nExtending allows you to replace blocks (e.g. \"content\") from a parent template instead of including parts to build the page (e.g. \"header\" and \"footer\"). This allows you to have a single template containing your complete layout and you only \"insert\" the content of the other template by replacing a block.If the user profile is used on all pages, you'd probably want to put it in your base template which is extended by others or include it into the base template. If you wanted the user profile only on very few pages, you could also include it in those templates. If the user profile is the same except on a few pages, put it in your base template inside a block which can then be replaced in those templates which want a different profile.\n模板注释\n注释使用{# #}注释不能跨多行 eg: {# This is a comment #}\nurls相关\nurls中定义链接(三种)\nFunction views\nAdd an import:  from my_app import views\nAdd a URL to urlpatterns:  url(r'^$', views.home, name='home')\n\nClass-based views\nAdd an import:  from other_app.views import Home\nAdd a URL to urlpatterns:  url(r'^$', Home.as_view(), name='home')\n\nIncluding another URLconf\nImport the include() function: from django.conf.urls import url, include\nAdd a URL to urlpatterns:  url(r'^blog/', include('blog.urls'))\n\nurl的name属性\nurl(r'^add/$', calc_views.add, name='add'), 这里的name可以用于在 templates, models, views ……中得到对应的网址，相当于“给网址取了个名字”，只要这个名字不变，网址变了也能通过名字获取到。\nurl正则表达式\nurl(r'^(?P<year>\\d{4})/(?P<month>\\d{1,2})/$','get_news_list',name=\"news_archive\" )\n<year> <month> 在view的参数获得 如：def index(request,year,month)\nurl的include用法\n(r'^weblog/', include('mysite.blog.urls')), \n(r'^photos/', include('mysite.photos.urls')),\n指向include()的正则表达式并不包含一个$(字符串结尾匹配符)。每当Django 遇到include()时，它将截断匹配的URL，并把【剩余】的字符串发往被包含的 URLconf 作进一步处理。\n创建使用后台\n使用django自带的后台，可以可视化管理后台的数据。\n创建超级管理员\npython manage.py createsuperuser # 设置用户名，密码。\n\n注册自定义model\nfrom models import People\nadmin.site.register(People)\n\n修改显示字段\n管理后台默认显示People Obejct，在model中添加返回值方法，修改显示效果。\n  def __str__(self):\n      return self.name \n\n修改后台密码的方法\n  python manage.py createsuperuser --username admin\n  python manage.py changepassword admin\n\nadmin显示自定义字段\n  from django.contrib import admin\n  from .models import Article\n\n  class ArticleAdmin(admin.ModelAdmin):\n      list_display = ('title','pub_date','update_time',)\n    \n  admin.site.register(Article,ArticleAdmin)\n\n引入数据\nDjango ORM对数据库进行操作，数据库操作完成之后，记得要进行save()保存。\n数据库操作\nArticle.objects.all() 获取表中所有对象\nAritcle.objects.get(pk=1) # Django中pk=primary key,和id等价。\nArticle.objects.filter(pub_date__year=2006) # 使用过滤器获取特定对象\nArticle.objects.all().filter(pub_date__year=2006) #与上方一致\n\n## 链式过滤\n>>> Aritcle.objects.filter(\n...     headline__startswith='What'\n... ).exclude(\n...     pub_date__gte=datetime.date.today()\n... ).filter(\n...     pub_date__gte=datetime(2005, 1, 30)\n... )\n\nArticle.objects.create(author=me, title='Sample title', text='Test') #创建对象\nPerson.objects.get_or_create(name=\"WZT\", age=23) # 防止重复很好的方法\n\nArticle.objects.all()[:5] 记录前5条 \nPerson.objects.all().reverse()[:2] # 最后两条\nPerson.objects.all().reverse()[0] # 最后一条\n\n>>> Post.objects.filter(title__contains='title') # 包含查询\n[<Post: Sample title>, <Post: 4th title of post>] \n# 注在title与contains之间有两个下划线字符 (_)。\n# Django的ORM使用此语法来分隔字段名称 （\"title\"） 和操作或筛选器(\"contains\")。\n\nPost.objects.order_by('-created_date') # 对象进行排序，默认升序，添负号为降序。\nPerson.objects.filter(name__iexact=\"abc\") # 不区分大小写\nPerson.objects.filter(name__exact=\"abc\") # 严格等于\n\nPerson.objects.filter(name__regex=\"^abc\")  # 正则表达式\nPerson.objects.filter(name__iregex=\"^abc\") # 不区分大小写\n\nPerson.objects.exclude(name__contains=\"WZ\")  # 排除\nPerson.objects.filter(name__contains=\"abc\").exclude(age=23\n #找出名称含有abc, 但是排除年龄是23岁的\n\nQuerySet创建对象的四种方法\nAuthor.objects.create(name=\"WeizhongTu\", email=\"tuweizhong@163.com\n\ntwz = Author(name=\"WeizhongTu\", email=\"tuweizhong@163.com\")\ntwz.save()\n\ntwz = Author()\ntwz.name=\"WeizhongTu\"\ntwz.email=\"tuweizhong@163.com\"\n\nAuthor.objects.get_or_create(name=\"WeizhongTu\", email=\"tuweizhon“)\n# 返回值(object, True/False)\n\nQuerySet是可迭代的\nes = Entry.objects.all()\nfor e in es:\n    print(e.headline)\n\n检查对象是否存在\nEntry.objects.all().exists() 返回布尔值\n\n拓展阅读：课堂操作内容文档\n备注该笔记源自网易微专业《Python web开发》1.2节本文由EverFighting创作,采用 知识共享署名 3.0 中国大陆许可协议进行许可。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "5"}