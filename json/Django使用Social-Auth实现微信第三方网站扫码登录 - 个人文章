{"title": "Django使用Social-Auth实现微信第三方网站扫码登录 - 个人文章 ", "index": "第三方登录,auth,django,python", "content": "前言\n之前让网页公司制作新官网的时候规划有第三方账号的登录功能，但由于当时的一些开放平台申请步骤比较繁琐（尤其是微信开放平台），所以一直拖延着，到了最近只能自己添加相关的功能。\n由于是刚接触Python和Django，期间找了好多视频和资料学习练习，才慢慢把MVT结构什么的弄明白了，第三方登录方面百度找到了两篇很有用的文章，也从中学习到了很多：\n1. python实现微信第三方网站扫码登录(Django)2. 用django-social-auth 做中国社交网站三方登录(QQ,微博,豆瓣,百度,人人,微信)\n在实现QQ、微博的登录时就深刻体会到使用social-auth来实现第三方登录是非常简单方便、直接而且完美的，只需要添加配置内容，一句代码都不需要写，真的是一句处理的代码都不需要写哦！然而却一直没有找到微信怎么也同样来实现（上面第二篇文章虽然标题有，但文章内却压根没有提及）；从social-auth的解读文档里也愣是没找到Weixin的内容，由于官网已经有相应的User数据表以及存储第三方的UserSocialAuth数据格，非常规范，在使用上面第一种方法实现之后却苦恼于用户数据表的添加和修改，真心不想破坏那种结构，就在重拾social-auth想学习一下数据库存储方式的时候，竟然在social-backends里发现了Weixin.py,那不就说明能支持微信么？\n注意事项\n\n微信开放平台申请及开通需要提交很多认证资料，也需要缴纳￥300每年的认证费用；与公众号、服务号等不一样哦。地址：http://open.weixin.qq.com\n认证通过后，添加相应的网页应用，注意授权回调域的填写，写网站的主域名即可，比如说不能写www.zzmxy.com/login/wechat之类的，只需要写www.zzmxy.com 即可（不需要添加http或者https），不然后期都是redirect_uri 参数错误!\n\n实操步骤\n\n\n安装social-auth：由于官网使用的是python-social-auth==0.2.12，下载源码回来之后，发现在social-backends里也是有Weixin.py的，证明可用（Ubuntu + Python2.7 + Django1.7）；\npip install python-social-auth==0.2.12\n\n\nsocial-auth配置：\n\nSOCIAL_AUTH_PIPELINE配置：请参考上面提及的第二篇文章的书写；\n\nAUTHENTICATION_BACKENDS配置：\nAUTHENTICATION_BACKENDS = (\n   'social.backends.weibo.WeiboOAuth2',      #微博的功能\n   'social.backends.qq.QQOAuth2',            #QQ的功能\n   'social.backends.weixin.WeixinOAuth2',    #这个是导入微信的功能\n   'oscar.apps.customer.auth_backends.EmailBackend',\n   'django.contrib.auth.backends.ModelBackend',\n   )\n\n\n微信开放平台应用APPID与SECRET的配置：\nSOCIAL_AUTH_WEIBO_KEY = '53*****29'\nSOCIAL_AUTH_WEIBO_SECRET = '272152************81a8b3'\nSOCIAL_AUTH_QQ_KEY = '10*****51'\nSOCIAL_AUTH_QQ_SECRET = '5807************d15bd97'\nSOCIAL_AUTH_WEIXIN_KEY = 'wx4fb***********599'            #开放平台应用的APPID\nSOCIAL_AUTH_WEIXIN_SECRET = 'f1c17************08c0489'    #开放平台应用的SECRET\n\n\n\n\n配置完之后，运行你的网站，使用 www.域名.com/login/weixin 访问即可打开相应的页面了，但有没有发现出现错误了：Scope参数错误或没有Scope权限，实际操作过程中，我发现social-auth自动生成的二维码访问链接里，是少了一个scope参数，而微信官方给的二维码访问链接是这样的：\nhttps://open.weixin.qq.com/connect/qrconnect?appid=APPID&redirect_uri=REDIRECT_URI&response_type=code&scope=SCOPE&state=STATE#wechat_redirect\n如上需要的参数为5个，state可省略，但scope则是必需的，而对于网页授权的访问，scope作用域参数为固定值scope=snsapi_login，这样的话，我们就需要在social-auth的源代码上，把这个参数值给加上，根据你实际的site-packages安装路径，找到/social/backends/weixin.py文件，如我使用VirtualEnv建的路径是:\n/home/ubuntu/env/mppython/lib/python2.7/site-packages/social/backends/weixin.py\n打开这个文件，找到里面def auth_params()这一段内容（原文）：\ndef auth_params(self, state=None):\n    appid, secret = self.get_key_and_secret()\n    params = {\n        'appid': appid,\n        'redirect_uri': self.get_redirect_uri(state),\n    }\n    if self.STATE_PARAMETER and state:\n        params['state'] = state\n    if self.RESPONSE_TYPE:\n        params['response_type'] = self.RESPONSE_TYPE\n    return params\n在params字典里，添加一个scope参数即可，修改后如下：\ndef auth_params(self, state=None):\n    appid, secret = self.get_key_and_secret()\n    params = {\n        'appid': appid,\n        'redirect_uri': self.get_redirect_uri(state),\n        'scope': 'snsapi_login',\n    }\n    if self.STATE_PARAMETER and state:\n        params['state'] = state\n    if self.RESPONSE_TYPE:\n        params['response_type'] = self.RESPONSE_TYPE\n    return params\n修改保存后，再重新运行工程，再次访问 www.域名.com/login/weixin 即可看到效果了！\n\n\n后记\n本文的内容是在《用django-social-auth 做中国社交网站三方登录(QQ,微博,豆瓣,百度,人人,微信)》基础上扩展的，有些地方并没有细化或者深入说明（比如说urls的配置等），如果看不太明白的朋友，请转到上述文章查找相关的信息或者留言交流，谢谢！\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "15"}