{"title": "Python列表最常见的问题【总结】 - python大牛成长之路 ", "index": "数据挖掘,数据分析,python", "content": "列表是Python中使用最多的一种数据结果，如何高效操作列表是提高代码运行效率的关键，本文总结了一些python列表最常见的问题，希望能对大家有帮助。\n1、迭代列表时如何访问列表下标索引\n普通版：\nitems = [8, 23, 45]\nfor index in range(len(items)):\n    print(index, \"-->\", items[index])\n\n>>>\n0 --> 8\n1 --> 23\n2 --> 45\n优雅版：\nfor index, item in enumerate(items):\n    print(index, \"-->\", item)\n\n>>>\n0 --> 8\n1 --> 23\n2 --> 45\n\nenumerate 还可以指定元素的第一个元素从几开始，默认是0，也可以指定从1开始：\n\nfor index, item in enumerate(items, start=1):\n    print(index, \"-->\", item)\n\n>>>\n1 --> 8\n2 --> 23\n3 --> 45\n\n2、append 与 extend 方法有什么区别\nappend表示把某个数据当做新元素追加到列表的最后面，它的参数可以是任意对象\n\nx = [1, 2, 3]\ny = [4, 5]\nx.append(y)\nprint(x)\n\n>>>\n[1, 2, 3, [4, 5]]\n\nextend 的参数必须是一个可迭代对象，表示把该对象里面的所有元素逐个地追加到列表的后面\nx = [1, 2, 3]\ny = [4, 5]\nx.extend(y)\nprint(x)\n\n>>>\n[1, 2, 3, 4, 5]\n\n# 等价于：\nfor i in y:\n    x.append(i)\n\n3、检查列表是否为空\n普通版：\nif len(items) == 0:\n    print(\"空列表\")\n或者\nif items == []:\n    print(\"空列表\")\n优雅版：\nif not items:\n    print(\"空列表\")\n4、如何理解切片\n切片用于获取列表中指定范的子集，语法非常简单\nitems[start:end:step]\n从 start 到 end-1 位置之间的元素。step 表示步长，默认为1，表示连续获取，如果 step 为 2 就表示每隔一个元素获取。\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n>>> a[3:8] # 第3到第8位置之间的元素\n[4, 5, 6, 7, 8]\n\n>>> a[3:8:2] # 第3到第8位置之间的元素，每隔一个元素获取\n[4, 6, 8]\n\n>>> a[:5]   # 省略start表示从第0个元素开始\n[1, 2, 3, 4, 5]\n\n>>> a[3:]  # 省略end表示到最后一个元素\n[4, 5, 6, 7, 8, 9, 10]\n\n>>> a[::]  # 都省略相当于拷贝一个列表，这种拷贝属于浅拷贝\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n5、如何拷贝一个列表对象第一种方法：\nnew_list = old_list[:]\n第二种方法：\nnew_list = list(old_list)\n第三种方法：\nimport copy\n# 浅拷贝\nnew_list = copy.copy(old_list)\n# 深拷贝\nnew_list = copy.deepcopy(old_list)\n\n6、如何获取列表中的最后一个元素\n索引列表中的元素不仅支持正数还支持负数，正数表示从列表的左边开始索引，负数表示从列表的右边开始索引，获取最后一个元素有两种方法。\n>>> a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n>>> a[len(a)-1]\n10\n>>> a[-1]\n10\n\n7、如何对列表进行排序\n列表排序有两种方式，一种是列表自带的方式 sort，一种是内建函数 sorted。复杂的数据类型可通过指定 key参数进行排序。由字典构成的列表，根据字典元素中的age字段进行排序：\nitems = [{'name': 'Homer', 'age': 39},\n         {'name': 'Bart', 'age': 10},\n         {\"name\": 'cater', 'age': 20}]\n\nitems.sort(key=lambda item: item.get(\"age\"))\n\nprint(items)\n\n>>>\n[{'age': 10, 'name': 'Bart'}, {'age': 20, 'name': 'cater'}, {'age': 39, 'name': 'Homer'}]\n\n列表有 sort方法，用于对原列表进行重新排序，指定 key 参数，key 是匿名函数，item 是列表中的字典元素，我们根据字典中的age进行排序，默认是按升序排列，指定 reverse=True 按降序排列\n\nitems.sort(key=lambda item: item.get(\"age\"), reverse=True)\n\n>>>\n[{'name': 'Homer', 'age': 39}, {'name': 'cater', 'age': 20}, {'name': 'Bart', 'age': 10}]\n\n如果不希望改变原列表，而是生成一个新的有序列表对象，那么可以内置函数 sorted ，该函数返回新列表\nitems = [{'name': 'Homer', 'age': 39},\n         {'name': 'Bart', 'age': 10},\n         {\"name\": 'cater', 'age': 20}]\n\nnew_items = sorted(items, key=lambda item: item.get(\"age\"))\n\nprint(items)\n>>>\n[{'name': 'Homer', 'age': 39}, {'name': 'Bart', 'age': 10}, {'name': 'cater', 'age': 20}]\n\nprint(new_items)\n>>>\n[{'name': 'Bart', 'age': 10}, {'name': 'cater', 'age': 20}, {'name': 'Homer', 'age': 39}]\n\n8、如何移除列表中的元素\n删除列表中的元素有三种方式\nremove 移除某个元素，而且只能移除第一次出现的元素\n>>> a = [0, 2, 2, 3]\n>>> a.remove(2)\n>>> a\n[0, 2, 3]\n\n# 如果要移除的元素不在列表中，则抛出 ValueError 异常\n>>> a.remove(7)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: list.remove(x): x not in list·   \n\ndel 根据指定的位置移除某元素\n\n>>> a = [3, 2, 2, 1]\n# 移除第一个元素\n>>> del a[1]\n[3, 2, 1]\n\n# 当超出列表的下表索引时，抛出IndexError的异常\n>>> del a[7]\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nIndexError: list assignment index out of range\n\npop 与del 类似，但是 pop 方法可以返回移除的元素\n\n>>> a = [4, 3, 5]\n>>> a.pop(1)\n3\n>>> a\n[4, 5]\n\n# 同样，当超出列表的下表索引时，抛出IndexError的异常\n>>> a.pop(7)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nIndexError: pop index out of range\n\n9、如何连接两个列表\nlistone = [1, 2, 3]\nlisttwo = [4, 5, 6]\n\nmergedlist = listone + listtwo\n\nprint(mergelist)\n>>>\n[1, 2, 3, 4, 5, 6]\n\n列表实现了 + 的运算符重载，使得 + 不仅支持数值相加，还支持两个列表相加，只要你实现了 对象的 __add__操作，任何对象都可以实现 + 操作，例如：\nclass User(object):\n    def __init__(self, age):\n        self.age = age\n\n    def __repr__(self):\n        return 'User(%d)' % self.age\n\n    def __add__(self, other):\n        age = self.age + other.age\n        return User(age)\n\nuser_a = User(10)\nuser_b = User(20)\n\nc = user_a + user_b\n\nprint(c)\n\n>>>\nUser(30)\n\n10、如何随机获取列表中的某个元素\nimport random\nitems = [8, 23, 45, 12, 78]\n\n>>> random.choice(items)\n78\n>>> random.choice(items)\n45\n>>> random.choice(items)\n12\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}