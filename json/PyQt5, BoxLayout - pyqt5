{"title": "PyQt5, BoxLayout - pyqt5 ", "index": "pyqt,python", "content": "\nBoxLayout简介\n盒子布局类似于网格布局， 但是它仅支持单行或一列小部件，具体取决于方向，但它会动态调整其包含的数量或部件的大小。\n创建\nboxlayout = QBoxLayout()\n\n方法\n使用以方法将小部件插入到BoxLayout中:\nboxlayout.addWidget(widget, stretch, alignment)\nboxlayout.insertWidget(index, widget, stretch, alignment)\n\ninsertWidget方法中的index表示应该放置子部件的位置。widget参数是添加到BoxLayout的子部件,stretch的值应该设置为一个整数，表示子部件伸缩的数值，最后,alignment的值可以设置为以下之一：\nQt.AlignmentLeft\nQt.AlignmentRight\nQt.AlignmentHCenter\nQt.AlignmentJustify\n\n布局对象通过其它方法添加到BoxLayou中:\nboxlayout.addLayout(layout, stretch)\nboxlayout.insertLayout(index, layout, stretch)\n每个子部件之间的像素间距默认为零，但是可以通过以下方式配置:\nboxlayout.setSpacing(spacing)\n\n间距也可以通过以下方式添加到普通窗口小部件中:\nboxlayout.addSpacing(spacing)\nboxlayout.indterSpacing(index, spacing)\n\nspacing的值表示的是要显示的像素间距的数量，.instertSpacing()方法还需要一个index, 表示的是插入该间距的位置.BoxLayou的方向可以通过以下方式设置:\nboxlayout.setDirection(direction)\n\ndirection参数必须设置为以下之一:\nQBoxLayout.LeftToRight\nQBoxLayout.RightToLeft\nQBoxLayout.TopToBottom\nQBoxLayout.BottomToTop\n\nExample\n# !/usr/bin/python\n\nfrom PyQt5.QtWidgets import * \nimport sys\n\n    class Window(QWidget):\n    def __init__(self):\n        QWidget.__init__(self)\n        \n        layout = QBoxLayout(QBoxLayout.LeftToRight)\n        self.setLayout(layout)\n        \n        label = QLabel(\"Label 1\")\n        layout.addWidget(label, 0)\n        label1 = QLabel(\"Label 2\")\n        layout.addWidget(label1, 0 )\n        \n        layout2 = QBoxLayout(QBoxLayout.TopToBottom)\n        layout.addLayout(layout2)\n        \n        label = QLabel(\"Label 3\")\n        layout2.addWidget(label, 0)\n        label = QLabel(\"Label 4\")\n        layout2.addWidget(label, 0)\n\napp = QApplication(sys.argv)\n\nscreen = Window()\nscreen.show()\n\nsys.exit(app.exec_())\n\n\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "0"}