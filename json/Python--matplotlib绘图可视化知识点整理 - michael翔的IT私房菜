{"title": "Python--matplotlib绘图可视化知识点整理 - michael翔的IT私房菜 ", "index": "数据分析,可视化,matplotlib,python", "content": "本文作为学习过程中对matplotlib一些常用知识点的整理，方便查找。\n强烈推荐ipython无论你工作在什么项目上，IPython都是值得推荐的。利用ipython --pylab，可以进入PyLab模式，已经导入了matplotlib库与相关软件包（例如Numpy和Scipy)，额可以直接使用相关库的功能。\n这样IPython配置为使用你所指定的matplotlib GUI后端（TK/wxPython/PyQt/Mac OS X native/GTK)。对于大部分用户而言，默认的后端就已经够用了。Pylab模式还会向IPython引入一大堆模块和函数以提供一种更接近MATLAB的界面。\n参考\n\nmatplotlib-绘制精美的图表\nmatplotlib.pyplot.plt参数介绍\n\nimport matplotlib.pyplot as plt\nlabels='frogs','hogs','dogs','logs'\nsizes=15,20,45,10\ncolors='yellowgreen','gold','lightskyblue','lightcoral'\nexplode=0,0.1,0,0\nplt.pie(sizes,explode=explode,labels=labels,colors=colors,autopct='%1.1f%%',shadow=True,startangle=50)\nplt.axis('equal')\nplt.show()\nmatplotlib图标正常显示中文\n为了在图表中能够显示中文和负号等，需要下面一段设置：\nimport matplotlib mpl\nmpl.rcParams['font.sans-serif']=['SimHei'] #用来正常显示中文标签\nmpl.rcParams['axes.unicode_minus']=False #用来正常显示负号\n这种方法能够奏效的条件是电脑上有simhei字体。\nmatplotlib inline和pylab inline\n可以使用ipython --pylab打开ipython命名窗口。\n%matplotlib inline  #notebook模式下\n%pylab inline    #ipython模式下\n这两个命令都可以在绘图时，将图片内嵌在交互窗口，而不是弹出一个图片窗口，但是，有一个缺陷：除非将代码一次执行，否则，无法叠加绘图，因为在这两种模式下，是要有plt出现，图片会立马show出来，因此：\n推荐在ipython notebook时使用，这样就能很方便的一次编辑完代码，绘图。\n为项目设置matplotlib参数\n在代码执行过程中，有两种方式更改参数：\n\n使用参数字典(rcParams)\n调用matplotlib.rc()命令   通过传入关键字元祖，修改参数\n\n如果不想每次使用matplotlib时都在代码部分进行配置，可以修改matplotlib的文件参数。可以用如下命令来找到当前用户的配置文件目录。\nimport matplotlib  \nmatplotlib.get_data_path()\n得到配置文件夹，其中有font文件夹。\n配置文件包括以下配置项：\naxex: 设置坐标轴边界和表面的颜色、坐标刻度值大小和网格的显示backend: 设置目标暑促TkAgg和GTKAggfigure: 控制dpi、边界颜色、图形大小、和子区( subplot)设置font: 字体集（font family）、字体大小和样式设置grid: 设置网格颜色和线性legend: 设置图例和其中的文本的显示line: 设置线条（颜色、线型、宽度等）和标记patch: 是填充2D空间的图形对象，如多边形和圆。控制线宽、颜色和抗锯齿设置等。savefig: 可以对保存的图形进行单独设置。例如，设置渲染的文件的背景为白色。verbose: 设置matplotlib在执行期间信息输出，如silent、helpful、debug和debug-annoying。xticks和yticks: 为x,y轴的主刻度和次刻度设置颜色、大小、方向，以及标签大小。\n线条相关属性标记设置\n用来该表线条的属性\n\n\n线条风格linestyle或ls\n描述\n线条风格linestyle或ls\n描述\n\n\n\n'-'\n实线\n':'\n虚线\n\n\n'--'\n破折线\n'None',' ',''\n什么都不画\n\n\n'-.'\n点划线\n\n\n\n线条标记\n\n\n标记maker\n描述\n标记\n描述\n\n\n\n'o'\n圆圈\n'.'\n点\n\n\n'D'\n菱形\n's'\n正方形\n\n\n'h'\n六边形1\n'*'\n星号\n\n\n'H'\n六边形2\n'd'\n小菱形\n\n\n'_'\n水平线\n'v'\n一角朝下的三角形\n\n\n'8'\n八边形\n'<'\n一角朝左的三角形\n\n\n'p'\n五边形\n'>'\n一角朝右的三角形\n\n\n','\n像素\n'^'\n一角朝上的三角形\n\n\n'+'\n加号\n'\\\n'\n竖线\n\n\n'None','',' '\n无\n'x'\nX\n\n\n\n颜色\n可以通过调用matplotlib.pyplot.colors()得到matplotlib支持的所有颜色。\n\n\n别名\n颜色\n别名\n颜色\n\n\n\nb\n蓝色\ng\n绿色\n\n\nr\n红色\ny\n黄色\n\n\nc\n青色\nk\n黑色\n\n\nm\n洋红色\nw\n白色\n\n\n\n如果这两种颜色不够用，还可以通过两种其他方式来定义颜色值：\n\n使用HTML十六进制字符串   color='eeefff' 使用合法的HTML颜色名字（'red','chartreuse'等）。\n也可以传入一个归一化到[0,1]的RGB元祖。 color=(0.3,0.3,0.4)\n\n很多方法可以介绍颜色参数，如title()。plt.tilte('Title in a custom color',color='#123456'）\n背景色\n通过向如matplotlib.pyplot.axes()或者matplotlib.pyplot.subplot()这样的方法提供一个axisbg参数，可以指定坐标这的背景色。\nsubplot(111,axisbg=(0.1843,0.3098,0.3098)\n基础\n如果你向plot()指令提供了一维的数组或列表，那么matplotlib将默认它是一系列的y值，并自动为你生成x的值。默认的x向量从0开始并且具有和y同样的长度，因此x的数据是[0,1,2,3].\n\n图片来自:绘图: matplotlib核心剖析\n确定坐标范围\n\nplt.axis([xmin, xmax, ymin, ymax])上面例子里的axis()命令给定了坐标范围。\nxlim(xmin, xmax)和ylim(ymin, ymax)来调整x,y坐标范围\n\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom pylab import *\n\nx = np.arange(-5.0, 5.0, 0.02)\ny1 = np.sin(x)\n\nplt.figure(1)\nplt.subplot(211)\nplt.plot(x, y1)\n\nplt.subplot(212)\n#设置x轴范围\nxlim(-2.5, 2.5)\n#设置y轴范围\nylim(-1, 1)\nplt.plot(x, y1)\n\n叠加图\n用一条指令画多条不同格式的线。\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# evenly sampled time at 200ms intervals\nt = np.arange(0., 5., 0.2)\n\n# red dashes, blue squares and green triangles\nplt.plot(t, t, 'r--', t, t**2, 'bs', t, t**3, 'g^')\nplt.show()\n\nplt.figure()\n你可以多次使用figure命令来产生多个图，其中，图片号按顺序增加。这里，要注意一个概念当前图和当前坐标。所有绘图操作仅对当前图和当前坐标有效。通常，你并不需要考虑这些事，下面的这个例子为大家演示这一细节。\nimport matplotlib.pyplot as plt\nplt.figure(1)                # 第一张图\nplt.subplot(211)             # 第一张图中的第一张子图\nplt.plot([1,2,3])\nplt.subplot(212)             # 第一张图中的第二张子图\nplt.plot([4,5,6])\n\n\nplt.figure(2)                # 第二张图\nplt.plot([4,5,6])            # 默认创建子图subplot(111)\n\nplt.figure(1)                # 切换到figure 1 ; 子图subplot(212)仍旧是当前图\nplt.subplot(211)             # 令子图subplot(211)成为figure1的当前图\nplt.title('Easy as 1,2,3')   # 添加subplot 211 的标题\n\nfigure感觉就是给图像ID，之后可以索引定位到它。\nplt.text()添加文字说明\n\ntext()可以在图中的任意位置添加文字，并支持LaTex语法\nxlable(), ylable()用于添加x轴和y轴标签\ntitle()用于添加图的题目\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nmu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n\n# 数据的直方图\nn, bins, patches = plt.hist(x, 50, normed=1, facecolor='g', alpha=0.75)\n\n\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\n#添加标题\nplt.title('Histogram of IQ')\n#添加文字\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()\ntext中前两个参数感觉应该是文本出现的坐标位置。\nplt.annotate()文本注释\n在数据可视化的过程中，图片中的文字经常被用来注释图中的一些特征。使用annotate()方法可以很方便地添加此类注释。在使用annotate时，要考虑两个点的坐标：被注释的地方xy(x, y)和插入文本的地方xytext(x, y)。1\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nax = plt.subplot(111)\n\nt = np.arange(0.0, 5.0, 0.01)\ns = np.cos(2*np.pi*t)\nline, = plt.plot(t, s, lw=2)\n\nplt.annotate('local max', xy=(2, 1), xytext=(3, 1.5),\n            arrowprops=dict(facecolor='black', shrink=0.05),\n            )\n\nplt.ylim(-2,2)\nplt.show()\n\nplt.xticks()/plt.yticks()设置轴记号\n现在是明白干嘛用的了，就是人为设置坐标轴的刻度显示的值。\n# 导入 matplotlib 的所有内容（nympy 可以用 np 这个名字来使用）\nfrom pylab import *\n\n# 创建一个 8 * 6 点（point）的图，并设置分辨率为 80\nfigure(figsize=(8,6), dpi=80)\n\n# 创建一个新的 1 * 1 的子图，接下来的图样绘制在其中的第 1 块（也是唯一的一块）\nsubplot(1,1,1)\n\nX = np.linspace(-np.pi, np.pi, 256,endpoint=True)\nC,S = np.cos(X), np.sin(X)\n\n# 绘制余弦曲线，使用蓝色的、连续的、宽度为 1 （像素）的线条\nplot(X, C, color=\"blue\", linewidth=1.0, linestyle=\"-\")\n\n# 绘制正弦曲线，使用绿色的、连续的、宽度为 1 （像素）的线条\nplot(X, S, color=\"r\", lw=4.0, linestyle=\"-\")\n\nplt.axis([-4,4,-1.2,1.2])\n# 设置轴记号\n\nxticks([-np.pi, -np.pi/2, 0, np.pi/2, np.pi],\n       [r'$-\\pi$', r'$-\\pi/2$', r'$0$', r'$+\\pi/2$', r'$+\\pi$'])\n\nyticks([-1, 0, +1],\n       [r'$-1$', r'$0$', r'$+1$'])\n# 在屏幕上显示\nshow()\n当我们设置记号的时候，我们可以同时设置记号的标签。注意这里使用了 LaTeX。2\n移动脊柱 坐标系\nax = gca()\nax.spines['right'].set_color('none')\nax.spines['top'].set_color('none')\nax.xaxis.set_ticks_position('bottom')\nax.spines['bottom'].set_position(('data',0))\nax.yaxis.set_ticks_position('left')\nax.spines['left'].set_position(('data',0))\n这个地方确实没看懂，囧，以后再说吧，感觉就是移动了坐标轴的位置。\nplt.legend()添加图例\nplot(X, C, color=\"blue\", linewidth=2.5, linestyle=\"-\", label=\"cosine\")\nplot(X, S, color=\"red\",  linewidth=2.5, linestyle=\"-\", label=\"sine\")\n\nlegend(loc='upper left')\n\nmatplotlib.pyplot\n使用plt.style.use('ggplot')命令，可以作出ggplot风格的图片。\n# Import necessary packages\nimport pandas as pd\n%matplotlib inline\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\nfrom sklearn import datasets\nfrom sklearn import linear_model\nimport numpy as np\n# Load data\nboston = datasets.load_boston()\nyb = boston.target.reshape(-1, 1)\nXb = boston['data'][:,5].reshape(-1, 1)\n# Plot data\nplt.scatter(Xb,yb)\nplt.ylabel('value of house /1000 ($)')\nplt.xlabel('number of rooms')\n# Create linear regression object\nregr = linear_model.LinearRegression()\n# Train the model using the training sets\nregr.fit( Xb, yb)\n# Plot outputs\nplt.scatter(Xb, yb,  color='black')\nplt.plot(Xb, regr.predict(Xb), color='blue',\n         linewidth=3)\nplt.show()\n\n\n给特殊点做注释\n好吧，又是注释，多个例子参考一下！\n我们希望在 2π/32π/3 的位置给两条函数曲线加上一个注释。首先，我们在对应的函数图像位置上画一个点；然后，向横轴引一条垂线，以虚线标记；最后，写上标签。\nt = 2*np.pi/3\n# 作一条垂直于x轴的线段，由数学知识可知，横坐标一致的两个点就在垂直于坐标轴的直线上了。这两个点是起始点。\nplot([t,t],[0,np.cos(t)], color ='blue', linewidth=2.5, linestyle=\"--\")\nscatter([t,],[np.cos(t),], 50, color ='blue')\n\nannotate(r'$\\sin(\\frac{2\\pi}{3})=\\frac{\\sqrt{3}}{2}$',\n         xy=(t, np.sin(t)), xycoords='data',\n         xytext=(+10, +30), textcoords='offset points', fontsize=16,\n         arrowprops=dict(arrowstyle=\"->\", connectionstyle=\"arc3,rad=.2\"))\n\nplot([t,t],[0,np.sin(t)], color ='red', linewidth=2.5, linestyle=\"--\")\nscatter([t,],[np.sin(t),], 50, color ='red')\n\nannotate(r'$\\cos(\\frac{2\\pi}{3})=-\\frac{1}{2}$',\n         xy=(t, np.cos(t)), xycoords='data',\n         xytext=(-90, -50), textcoords='offset points', fontsize=16,\n         arrowprops=dict(arrowstyle=\"->\", connectionstyle=\"arc3,rad=.2\"))\n\n\nplt.subplot()\nplt.subplot(2,3,1)表示把图标分割成2*3的网格。也可以简写plt.subplot(231)。其中，第一个参数是行数，第二个参数是列数，第三个参数表示图形的标号。\nplt.axes()\n我们先来看什么是Figure和Axes对象。在matplotlib中，整个图像为一个Figure对象。在Figure对象中可以包含一个，或者多个Axes对象。每个Axes对象都是一个拥有自己坐标系统的绘图区域。其逻辑关系如下34：\nplt.axes-官方文档\n\naxes() by itself creates a default full subplot(111) window axis.\naxes(rect, axisbg='w') where rect = [left, bottom, width, height] in normalized (0, 1) units. axisbg is the background color for the axis, default white.\naxes(h) where h is an axes instance makes h the current axis. An Axes instance is returned.\n\nrect=[左, 下, 宽, 高] 规定的矩形区域,rect矩形简写，这里的数值都是以figure大小为比例，因此，若是要两个axes并排显示，那么axes[2]的左=axes[1].左+axes[1].宽，这样axes[2]才不会和axes[1]重叠。\nshow code:\nhttp://matplotlib.org/examples/pylab_examples/axes_demo.html\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# create some data to use for the plot\ndt = 0.001\nt = np.arange(0.0, 10.0, dt)\nr = np.exp(-t[:1000]/0.05)               # impulse response\nx = np.random.randn(len(t))\ns = np.convolve(x, r)[:len(x)]*dt  # colored noise\n\n# the main axes is subplot(111) by default\nplt.plot(t, s)\nplt.axis([0, 1, 1.1*np.amin(s), 2*np.amax(s)])\nplt.xlabel('time (s)')\nplt.ylabel('current (nA)')\nplt.title('Gaussian colored noise')\n\n# this is an inset axes over the main axes\na = plt.axes([.65, .6, .2, .2], axisbg='y')\nn, bins, patches = plt.hist(s, 400, normed=1)\nplt.title('Probability')\nplt.xticks([])\nplt.yticks([])\n\n# this is another inset axes over the main axes\na = plt.axes([0.2, 0.6, .2, .2], axisbg='y')\nplt.plot(t[:len(r)], r)\nplt.title('Impulse response')\nplt.xlim(0, 0.2)\nplt.xticks([])\nplt.yticks([])\n\nplt.show()\n\npyplot.pie参数\nmatplotlib.pyplot.pie\ncolors颜色\n找出matpltlib.pyplot.plot中的colors可以取哪些值？\n\nso-Named colors in matplotlib\nCSDN-matplotlib学习之（四）设置线条颜色、形状\n\nfor name,hex in matplotlib.colors.cnames.iteritems():\n    print name,hex\n打印颜色值和对应的RGB值。\nplt.axis('equal')避免比例压缩为椭圆\nautopct\nHow do I use matplotlib autopct?\nautopct enables you to display the percent value using Python string formatting. For example, if autopct='%.2f', then for each pie wedge, the format string is '%.2f' and the numerical percent value for that wedge is pct, so the wedge label is set to the string '%.2f'%pct.\n\n\n\nDataHub-Python 数据可视化入门1 ↩\n\n\nMatplotlib 教程 ↩\n\n\n绘图: matplotlib核心剖析 ↩\n\n\npython如何调整子图的大小？ ↩\n\n\n\n                ", "mainLikeNum": ["7 "], "mainBookmarkNum": "40"}