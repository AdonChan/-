{"title": "关于python的logging库的总结 - 个人文章 ", "index": "python", "content": "最近在写一些python脚本，总是使用print来打印信息感觉很low，所以抽空研究了一下python的logging库，来优雅的来打印和记录日志：\n一、简单的将日志打印到屏幕：\nimport logging\n\nlogging.debug('This is debug message')        #debug\nlogging.info('This is info message')          #info\nlogging.warning('This is warning message')    #warn\n屏幕上打印：WARNING:root:This is warning message默认情况下，会打印WARNING级别的日志\nDEBUG：详细信息，调试信息。INFO：确认一切按预期运行。WARNING：表明发生了一些意外，或者不久的将来会发生问题（如‘磁盘满了’）。软件还是在正常工作。ERROR：由于更严重的问题，软件已不能执行一些功能了。CRITICAL：严重错误，表明软件已不能继续运行了。\n二、通过basicConfig函数来对日志的输入格式和方法进行配置\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG,\n                format='%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s',\n                datefmt='%Y-%m-%d %a %H:%M:%S',\n                filename='test.log',\n                filemode='w')\n    \nlogging.debug('This is debug message')\nlogging.info('This is info message')\nlogging.warning('This is warning message')\n以上代码不会在屏幕上打印日志，而是会在当前目录生成test.log的日志文件，日志被打印在日志文件中：2017-10-16 Mon 10:05:17 testlogging.py[line:25] DEBUG This is debug message2017-10-16 Mon 10:05:17 testlogging.py[line:26] INFO This is info message2017-10-16 Mon 10:05:17 testlogging.py[line:27] WARNING This is warning message\nlogging.basicConfig函数各参数:filename: 指定日志文件名filemode: 和file函数意义相同，指定日志文件的打开模式，'w'或'a'format: 指定输出的格式和内容，format可以输出很多有用信息，如上例所示:\n %(levelno)s: 打印日志级别的数值\n %(levelname)s: 打印日志级别名称\n %(pathname)s: 打印当前执行程序的路径，其实就是sys.argv[0]\n %(filename)s: 打印当前执行程序名\n %(funcName)s: 打印日志的当前函数\n %(lineno)d: 打印日志的当前行号\n %(asctime)s: 打印日志的时间\n %(thread)d: 打印线程ID\n %(threadName)s: 打印线程名称\n %(process)d: 打印进程ID\n %(message)s: 打印日志信息\ndatefmt: 指定时间格式，同time.strftime()level: 设置日志级别，默认为logging.WARNINGstream: 指定将日志的输出流，可以指定输出到sys.stderr,sys.stdout或者文件，默认输出到sys.stderr，当stream和filename同时指定时，stream被忽略\n三、同时将日志输出到屏幕和日志文件\n#定义一个StreamHandler，将INFO级别或更高的日志信息打印到标准错误，并将其添加到当前的日志处理对象\nconsole = logging.StreamHandler()\nconsole.setLevel(logging.INFO)\nformatter = logging.Formatter('%(name)-12s: %(levelname)-8s %(message)s')\nconsole.setFormatter(formatter)\nlogging.getLogger('').addHandler(console)\n插入以上代码就可以同时在屏幕上打印出日志屏幕上打印：root        : INFO     This is info messageroot        : WARNING  This is warning message文件中打印：2017-10-16 Mon 10:20:07 testlogging.py[line:46] DEBUG This is debug message2017-10-16 Mon 10:20:07 testlogging.py[line:47] INFO This is info message2017-10-16 Mon 10:20:07 testlogging.py[line:48] WARNING This is warning message\n四、通过配置文件配置日志\n#logger.conf\n[loggers]\n#定义logger模块，root是父类，必需存在的，其它的是自定义。 \nkeys=root,infoLogger,warnlogger\n\n[logger_root]    \nlevel=DEBUG                         #level     级别，级别有DEBUG、INFO、WARNING、ERROR、CRITICAL\nhandlers=infohandler,warnhandler    #handlers  处理类，可以有多个，用逗号分开\n\n[logger_infoLogger]                 #[logger_xxxx] logger_模块名称\nhandlers=infohandler\nqualname=infoLogger                 #qualname  logger名称，应用程序通过 logging.getLogger获取。对于不能获取的名称，则记录到root模块。\npropagate=0                         #propagate 是否继承父类的log信息，0:否 1:是\n\n[logger_warnlogger]\nhandlers=warnhandler\nqualname=warnlogger\npropagate=0\n\n###############################################\n#定义handler\n[handlers]\nkeys=infohandler,warnhandler\n\n[handler_infohandler]\nclass=StreamHandler                  #class handler类名\nlevel=INFO                           #level 日志级别\nformatter=form02                     #formatter，下面定义的formatter\nargs=(sys.stdout,)                   #args handler初始化函数参数\n\n[handler_warnhandler]\nclass=FileHandler\nlevel=WARN\nformatter=form01\nargs=('logs/deploylog.log', 'a')\n\n###############################################\n# 定义格式化输出\n[formatters]\nkeys=form01,form02\n\n[formatter_form01]\nformat=%(message)s %(asctime)s\ndatefmt=%Y-%m-%d %H:%M:%S\n\n[formatter_form02]\nformat=%(asctime)s %(levelname)s  %(message)s\ndatefmt=%Y-%m-%d %H:%M:%S\n日志格式%(asctime)s       年-月-日 时-分-秒,毫秒 2013-04-26 20:10:43,745%(filename)s      文件名，不含目录%(pathname)s      目录名，完整路径%(funcName)s      函数名%(levelname)s     级别名%(lineno)d        行号%(module)s        模块名%(message)s       消息体%(name)s          日志模块名%(process)d       进程id%(processName)s   进程名%(thread)d        线程id%(threadName)s    线程名\n测试配置文件\nfrom logging.config import fileConfig\n\nfileConfig('logger.conf')\nlogger=logging.getLogger('infoLogger')\nlogger.info('test1')\nlogger_error=logging.getLogger('warnhandler')\nlogger_error.warn('test5')\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "3"}