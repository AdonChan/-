{"title": "python tips - quietin的代码碎碎念 ", "index": "python", "content": "给dict设置默认值\n这样能设置所有key的默认值为[]，包括新添的key\nfrom collections import defaultdict\ncontext = defaultdict(list)\nsetdefault一次只能设置一个值，但好处是能使用链式语法，但defaultdict更快一些\ncontext = {}\ncontext.setdefault('name_list', []).append('Fiona')\n或者用fromkeys，用法dict.fromkeys(seq[, value]))，value默认是国际惯例的None\nname_list = ['kevin', 'robin']\ncontext = {}.fromkeys(name_list, 9)\n# {'kevin': 9, 'robin': 9}\n\ncontext = dict.fromkeys([1, 2], True)  \n# {1: True, 2: True}\n列表去重的快速方法\n比用set要快，来自：http://www.peterbe.com/plog/uniqifiers-benchmark\n{}.fromkeys(mylist).keys()\n列表深复制\na = [3, 2, 1]\nb = a[:]\n字典深复制\na = {'male':0, 'female': 1}\nb = a.copy()\n时间转换相关\n获取今天的年月日时间(date)\n两种代码效果相同\nfrom datetime import datetime\n\nn_date = datetime.now().date()\nn_date = datetime.today().date()\ndate -> datetime\nfrom datetime import datetime\n\nb = datetime.combine(n_date, datetime.min.time())\n# datetime.datetime(2015, 9, 8, 0, 0)\ndatetime -> date\n比较简单，直接使用datetime_object.date()即可\n# datetime.datetime(2015, 6, 5, 11, 45, 45, 393548)\na = datetime.datetime()\n# datetime.datetime(2016, 6, 5)\nb = a.date()\ntime.struct_time -> datetime\n一般time.localtime()或者用time.striptime()得到的就是time.struct_time\n使用位置参数\nstructTime = time.localtime()\ndatetime.datetime(*structTime[:6])\n# datetime.datetime(2009, 11, 8, 20, 32, 35)\n或者使用datetime.fromtimestamp，但是要注意此处的时间不能早于1970-01-01 00:00\nfrom time import mktime\nfrom datetime import datetime\n\ndt = datetime.fromtimestamp(mktime(struct))\n计算日期之差\nfrom datetime import date\n\nd0 = date(2008, 8, 18)\nd1 = date(2008, 9, 26)\ndelta = d0 - d1\nprint delta.days\n获取milliseconds(13位数字)\nimport time\nfrom datetime import datetime\n\ntime.time()  # 1441769033.549239\nint(time.time() * 1000)   # 1441769033549\n\n# or\ndef unix_time_milliseconds:\n    time_gap = datetime.utcnow() - datetime.utcfromtimestamp(0)\n    return int(time_gap.total_seconds() * 1000)   # 1441769033549\n使用map作iterator\n当将func设置为None时，可起到iterator的作用，结果类似于使用了zip，唯一的区别是map可以按最长的列表扩展。python2.x中的itertools.zip_longest可以起到与此处map相同的效果\nmap(None, xrange(3), xrange(10,12))\n# [(0, 10), (1, 11), (2, None)]\nzip(xrange(3), xrange(10,12))\n# [(0, 10), (1, 11)]\n判断奇数\n自然是使用位操作最快了\nif a & 1:\n    print 'it is even'\ndict删除key\n要删除的key数量较多(超多一半)的话，建议重新生成dict；如果数量较少，在pop和del都可以的情况下，del稍快一些\npython -m timeit -s \"d = {'f':1,'foo':2,'bar':3}\" \"d1 = d.copy()\" \"for k in d1.keys():\" \"  if k.startswith('f'):\" \"    del d1[k]\"\n# 1000000 loops, best of 3: 0.827 usec per loop\npython -m timeit -s \"d = {'f':1,'foo':2,'bar':3}\" \"d1 = d.copy()\" \"for k in d1.keys():\" \"  if k.startswith('f'):\" \"    d1.pop(k)\"\n# 1000000 loops, best of 3: 0.96 usec per loop\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "4"}