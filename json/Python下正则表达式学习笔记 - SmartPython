{"title": "Python下正则表达式学习笔记 - SmartPython ", "index": "正则表达式,python", "content": "用途\n正则表达式可以\n\n测试字符串内的模式\n替换文本\n基于模式匹配从字符串中提取子字符串\n\nRegEx语法\n正则表达式(Regular Expression, RegEx)通过单个字符串来匹配一系列符合此语法规则的目标字符串。\n元字符以及其在RegEx中的行为说明列表：\n\n\n元字符\n行为\n\n\n\n\\\n\n\n\n^\n匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与“n”或“r”之后的位置匹配。\n\n\n$\n匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与“n”或“r”之前的位置匹配。\n\n\n*\n零次或多次匹配前面的字符或子表达式。例如，zo 匹配“z”和“zoo”。 等效于 {0,}。\n\n\n+\n一次或多次匹配前面的字符或子表达式。例如，“zo+”与“zo”和“zoo”匹配，但与“z”不匹配。+ 等效于 {1,}。\n\n\n?\n零次或一次匹配前面的字符或子表达式。例如，“do(es)?”匹配“do”或“does”中的“do”。? 等效于 {0,1}。\n\n\n{n}\nn 是非负整数。正好匹配 n 次。例如，“o{2}”与“Bob”中的“o”不匹配，但与“food”中的两个“o”匹配。\n\n\n{n,}\nn 是非负整数。至少匹配 n 次。例如，“o{2,}”不匹配“Bob”中的“o”，而匹配“foooood”中的所有 o。“o{1,}”等效于“o+”。“o{0,}”等效于“o*”。\n\n\n{n,m}\nM 和 n 是非负整数，其中 n <= m。匹配至少 n 次，至多 m 次。例如，“o{1,3}”匹配“fooooood”中的头三个 o。'o{0,1}' 等效于 'o?'。注意：您不能将空格插入逗号和数字之间。\n\n\n?\n当此字符紧随任何其他限定符（*、+、?、{n}、{n,}、{n,m}）之后时，匹配模式是“非贪心的”。“非贪心的”模式匹配搜索到的、尽可能短的字符串，而默认的“贪心的”模式匹配搜索到的、尽可能长的字符串。例如，在字符串“oooo”中，“o+?”只匹配单个“o”，而“o+”匹配所有“o”。\n\n\n.\n匹配除“n”之外的任何单个字符。若要匹配包括“n”在内的任意字符，请使用诸如“[sS]”之类的模式。\n\n\n(pattern)\n匹配 pattern 并捕获该匹配的子表达式。可以使用 $0…$9 属性从结果“匹配”集合中检索捕获的匹配。若要匹配括号字符 ( )，请使用“(”或者“)”。\n\n\n(?:pattern)\n匹配 pattern 但不捕获该匹配的子表达式，即它是一个非捕获匹配，不存储供以后使用的匹配。这对于用“or”字符组合模式部件的情况很有用。\n\n\n(?=pattern)\n执行正向预测先行搜索的子表达式，该表达式匹配处于匹配 pattern 的字符串的起始点的字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。\n\n\n(?!pattern)\n执行反向预测先行搜索的子表达式，该表达式匹配不处于匹配 pattern 的字符串的起始点的搜索字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。\n\n\n[xyz]\n字符集。匹配包含的任一字符。例如，“[abc]”匹配“plain”中的“a”。\n\n\n[^]\n反向字符集。匹配未包含的任何字符。\n\n\n[a-z]\n字符范围。匹配指定范围内的任何字符。例如，“[a-z]”匹配“a”到“z”范围内的任何小写字母。\n\n\nb\n匹配一个字边界，即字与空格间的位置。例如，“erb”匹配“never”中的“er”，但不匹配“verb”中的“er”。\n\n\nB\n非字边界匹配。“erB”匹配“verb”中的“er”，但不匹配“never”中的“er”。\n\n\ncx\n匹配 x 指示的控制字符。例如，cM 匹配 Control-M 或回车符。x 的值必须在 A-Z 或 a-z 之间。如果不是这样，则假定 c 就是“c”字符本身。\n\n\nd\n数字字符匹配。等效于 [0-9]。\n\n\nD\n非数字字符匹配。\n\n\nf\n换页符匹配。等效于 x0c 和 cL。\n\n\nn\n换行符匹配。等效于 x0a 和 cJ。\n\n\nr\n匹配一个回车符。等效于 x0d 和 cM。\n\n\ns\n匹配任何空白字符，包括空格、制表符、换页符等。与 [ fnrtv] 等效。\n\n\nS\n匹配任何非空白字符。\n\n\nt\n制表符匹配。与 x09 和 cI 等效。\n\n\nv\n垂直制表符匹配。与 x0b 和 cK 等效。\n\n\nw\n匹配任何字类字符，包括下划线。与“[A-Za-z0-9_]”等效。\n\n\nW\n与任何非单词字符匹配。\n\n\nnum\n匹配 num，此处的 num 是一个正整数。到捕获匹配的反向引用。例如，“(.)1”匹配两个连续的相同字符。\n\n\n\n表格转载自 Microsoft博客：正则表达式语法\nRegEx用法实例\n\n\n说明\n正则表达式\n\n\n\n电子邮件(Email)\nw+([-+.]w+)@w+([-.]w+).w+([-.]w+)*\n\n\nQQ号码\n[1-9]d{4,}\n\n\n密码(由数字/大写字母/小写字母/标点符号组成，四种都必有，8位以上)\n(?=^.{8,}$)(?=.d)(?=.W+)(?=.[A-Z])(?=.[a-z])(?!.n).$\n\n\n汉字(字符)\n[u4e00-u9fa5]\n\n\n中文及全角标点符号(字符)\n[u3000-u301eufe10-ufe19ufe30-ufe44ufe50-ufe6buff01-uffee]\n\n\n中国大陆手机号码\n1d{10}\n\n\n中国大陆邮政编码\n[1-9]d{5}\n\n\n中国大陆身份证号(15位或18位)\nd{15}(dd[0-9xX])?\n\n\n非负整数(正整数或零)\nd+\n\n\n正整数\n0-9]*[1-9*\n\n\n负整数\n-0-9]*[1-9*\n\n\n整数\n-?d+\n\n\n小数\n(-?d+)(.d+)?\n\n\n不包含abc的单词\nb((?!abc)w)+b\n\n\n\n表格节选自 常用正则表达式\nMemo：上面部分的模式，例如\\b在Vim编辑器的find模式(/)下，无法进行匹配。\nPython中常见的RegEx用法\n为了避免上述部分模式无法匹配的问题，实际操作的时候以参考文档(RE python2)为准。\n如果要替换一个字符串中的某个模式，如下：\nimport re\ntxt = [the text for processing]\nregex = [your regular expression]\nstring = [your string to replace the others]\ndata, number = re.subn(re.compile(regex), string, txt)\n# or you could use\ndata, number = re.subn(regex, string, txt)\n模块中还有其他常用方法：\n\nre.match\nre.search\nre.findall\n\n当然，官方文档中还介绍了直接使用re的方法和使用re.compile()之后再进行正则的区别。具体请参考这里。\nWeiming Hu\n\n2016/6/13 续\n感谢好东西传送门机器学习日报的推荐，我了解到了北京知识图谱学习小组第一次线下活动中关于正则学习阅读资料，在这里收藏并分享。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "5"}