{"title": "Embedding Python modules into C applications. - Uroboros's world ", "index": "programming,python", "content": "In official Doc. of Python 3, there is a short introduction to embedding Python in another application like C/C++ (seeEmbedding Python in Another Application).\n\nThe common procedure is as follows,\n\n\nwrite prototype C/C++ code and Python module codes.\nNote that in the Python codes conventions of python 2 & 3 can not be mixed together, which may cause segfault when running.\n\ncall.c\n\n#include <Python.h>\n\nint\nmain(int argc, char *argv[])\n{\n    PyObject *pName, *pModule, *pDict, *pFunc;\n    PyObject *pArgs, *pValue;\n    int i;\n\n    if (argc < 3) {\n        fprintf(stderr,\"Usage: call pythonfile funcname [args]\\n\");\n        return 1;\n    }\n\n    Py_Initialize();\n    pName = PyUnicode_FromString(argv[1]);\n    /* Error checking of pName left out */\n\n    pModule = PyImport_Import(pName);\n    Py_DECREF(pName);\n\n    if (pModule != NULL) {\n        pFunc = PyObject_GetAttrString(pModule, argv[2]);\n        /* pFunc is a new reference */\n\n        if (pFunc && PyCallable_Check(pFunc)) {\n            pArgs = PyTuple_New(argc - 3);\n            for (i = 0; i < argc - 3; ++i) {\n                pValue = PyLong_FromLong(atoi(argv[i + 3]));\n                if (!pValue) {\n                    Py_DECREF(pArgs);\n                    Py_DECREF(pModule);\n                    fprintf(stderr, \"Cannot convert argument\\n\");\n                    return 1;\n                }\n                /* pValue reference stolen here: */\n                PyTuple_SetItem(pArgs, i, pValue);\n            }\n            pValue = PyObject_CallObject(pFunc, pArgs);\n            Py_DECREF(pArgs);\n            if (pValue != NULL) {\n                printf(\"Result of call: %ld\\n\", PyLong_AsLong(pValue));\n                Py_DECREF(pValue);\n            }\n            else {\n                Py_DECREF(pFunc);\n                Py_DECREF(pModule);\n                PyErr_Print();\n                fprintf(stderr,\"Call failed\\n\");\n                return 1;\n            }\n        }\n        else {\n            if (PyErr_Occurred())\n                PyErr_Print();\n            fprintf(stderr, \"Cannot find function \\\"%s\\\"\\n\", argv[2]);\n        }\n        Py_XDECREF(pFunc);\n        Py_DECREF(pModule);\n    }\n    else {\n        PyErr_Print();\n        fprintf(stderr, \"Failed to load \\\"%s\\\"\\n\", argv[1]);\n        return 1;\n    }\n    Py_Finalize();\n    return 0;\n}\n\n\nmultiply.py\n\ndef multiply(a,b):\n    print(\"Will compute\", a, \"times\", b)\n    c = 0\n    for i in range(0, a):\n        c = c + b\n    return c\n\n\n\nFor a single C code, just build like\n\ng++ call.c -o call `python3-config --cflags` `python3-config --ldflags`\n\n\nThis can be written as a shell like build.sh.\n 3. To run the code, write a shell named run.sh,\n\nPYTHONPATH=. ./call multiply multiply 3 2\n\n\nHere call is the main code, the two multiplys are the module and function names, respectively.\nWhen running, this code gives,\n\nWill compute 3 times 2\nResult of call: 6\n\n\nNote if no PYTHONPATH=. statement in front of the run command, there will be errors like ImportError: No module named multiply.\n\nSomeone suggested to add into the .py file\n\nimport sys\nsys.path.insert(0, \"./path/to/your/modules/\")\n\n\nI tested but not helpful.\nBTW, the system path can be checked by\n\nimport sys\nprint(sys.path)\n\n\n\nUseful commands in Python 3 are:\n\nPyObject *exc_type = NULL, *exc_value = NULL, *exc_tb = NULL;\nPyErr_Fetch(&exc_type, &exc_value, &exc_tb);\nPyObject* str_exc_type = PyObject_Repr(exc_type); //Now a unicode\nobject\nPyObject* pyStr = PyUnicode_AsEncodedString(str_exc_type, \"utf-8\",\n\"Error ~\");\nconst char *strExcType = PyBytes_AS_STRING(pyStr);\nPy_XDECREF(str_exc_type);\nPy_XDECREF(pyStr);\n\nPy_XDECREF(exc_type);\nPy_XDECREF(exc_value);\nPy_XDECREF(exc_tb); \n\n\n\nOther useful tutorials arePython嵌入C/C++ (Python核心编程)C++中嵌入Python调用Embedding Python in C/C++: Part IEmbedding Python in C/C++: Part II\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}