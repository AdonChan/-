{"title": "Python_异常和模块 - MAY ", "index": "python", "content": "异常处理\n单个异常处理：\ntry:\n    print(num)\n\nexcept NameError:\n    print('没有定义变量')\n\nexcept FileNotFoundError:\n    print('找不到文件路径')\n\nprint(1)\n多个异常处理：\ntry:\n    print(num)\n    # 11/0\n    # open('xxx.txt')\nexcept (NameError, FileNotFoundError, ZeroDivisionError): # 多个异常统一处理\n    print('异常')\n\nprint(1)\n所有异常处理：\ntry:\n    print(num)\nexcept Exception: # 所有异常处理\n    print('所有异常处理')\n\nprint(1)\n查看原来异常输出:\ntry:\n    print(num)\nexcept Exception as err:\n    print(err)\nprint(1)    \n没有异常执行\ntry:\n    a = 1\n\nexecpt Exception as err:\n    print(err)\n\nelse:\n    print('没有异常执行')\n\nfinally:\n    print('不管是否出现异常, 都执行')\n\nprint(1)     \n\nimport time\ntry:\n    f = open('test.txt')\n    try:\n        while True\n            content = f.readline()\n            if len(content) == 0:\n                break\n            time.sleep(2)\n            print(content)\n    except Exception:\n        # pass\n        print('文件产生异常')\n    finally:\n        f.close()\n        print('关闭文件')\nexcept Exception:\n    print('没有这个文件')\ntry与except需要同时存在当函数嵌套的时候，如果函数出现异常，会返回异常，然后捕获到异常\n抛出自定义异常\nraise: 抛出一个自定义异常\nraise语句如果不带参数，就会把当前错误原样抛出。\ndef main ():\n    try:\n        s = input('请输入-->')\n        if len(s) < 3:\n            raise ShortInputException(len(s), 3)\n        else:\n            print(s)\n    except ShortInputException as result:\n        print('ShortInputException: 输入的长度是 %d, 长度至少需要是 %d' % (result.length, result.atleast))\n    else:\n        print('没有异常发生.')\n\nclass ShortInputException(Exception):\n    '''自定义异常类'''\n    def __init__(self, length, atleast):\n        # super().__init()\n        self.length = length\n        self.atleast = atleast\n\nmain()\n模块\n如何获取当前模块的文件名: __file__\n引入模块\nimport sys导入模块中的全部功能from argv import sys, from argv import sys,executable导入模块中的单独功能from sys import *from sys as s 别名\n__name__: 用于表示当前模块的名字，同时还能反映一个包的结构\n\n导入输出的是当前模块名\n模块被直接运行时模块名为：__main__\n\n\nif __name__ == '__main__': # 如果模块是被直接运行的，则代码块被运行，如果模块是被导入的，则代码块不被运行。\n    # code\n常用内建模块\n\n\n标准库\n说明\n\n\n\nbuiltins\n内建函数默认加载\n\n\nos\n操作系统接口 [系统级别的操作(文件和目录)]\n\n\nsys\nPython自身的运行环境 [对解释器相关的操作]\n\n\nfunctools\n常用的工具\n\n\njson & pickle\n编码和解码 JSON 对象\n\n\nlogging\n记录日志，调试\n\n\nmultiprocessing\n多进程\n\n\nthreading\n多线程\n\n\ncopy\n拷贝\n\n\ntime\n时间\n\n\ndatetime\n日期和时间\n\n\ncalendar\n日历\n\n\nhashlib\n加密算法\n\n\nrandom\n生成随机数\n\n\nre\n字符串正则匹配\n\n\nsocket\n标准的 BSD Sockets API\n\n\nshutil\n文件和目录管理 [高级的 文件、文件夹、压缩包 处理模块(递归，文件复制等)]\n\n\nglob\n基于文件通配符搜索\n\n\nshelve\n一个简单的k,v将内存数据通过文件持久化的模块，可以持久化任何pickle可支持的python数据格式\n\n\n\nhashlib\nimport hashlib\nm = hashlib.md5()   # 创建hash对象，md5:(message-Digest Algorithm 5)消息摘要算法,得出一个128位的密文\nprint m             # <md5 HASH object>\nm.update('alogy')  # 更新哈希对象以字符串参数\nprint m.hexdigest() # 返回十六进制数字字符串\n例子：用于注册、登录\nimport hashlib\nimport datetime\nKEY_VALUE = 'alogy'\nnow = datetime.datetime.now()\nm = hashlib.md5()\nstr = '%s%s' % (KEY_VALUE,now.strftime(\"%Y%m%d\"))\nm.update(str.encode('utf-8'))\nvalue = m.hexdigest()\nprint(value) # c69c59b58209a94f40e6a7a425f9a977\nfunctools\n['WRAPPER_ASSIGNMENTS', 'WRAPPER_UPDATES', '__builtins__', '__doc__', '__file__', '__name__', '__package__', 'cmp_to_key', 'partial', 'reduce', 'total_ordering', 'update_wrapper', 'wraps']\npartial()\n把一个函数的某些参数设置默认值，返回一个新函数，调用这个新函数会更简单。\nimport functools\n\ndef showarg(*args, **kw):\n    print(args)\n    print(kw)\n\np1 = functools.partial(showarg, 1, 2, 3)\np1()\np1(4,5,6)\np1(a='python', b='alogy')\n\np2 = functools.partial(showarg, a=3, b='linux')\np2()\np2(1, 2)\np2(a='python', b='alogy')\nwraps()\n使用装饰器时，被装饰后等函数其实已经是另外一个函数（函数名等函数属性会发生变化）\n添加后由于函数名和函数的doc发生了改变，对测试结果有一些影响，例如:\ndef note(func):\n    \"note function\"\n    def wrapper():\n        \"wrapper function\"\n        print('note something')\n        return func()\n    return wrapper\n\n@note\ndef test():\n    \"test function\"\n    print('I am test')\n\ntest()\nprint(test.__doc__)\n运行结果\nnote something\nI am test\nwrapper function\n所以，Python的functools包中提供了一个叫wraps的装饰器来消除这样的副作用。例如：\nimport functools\ndef note(func):\n    \"note function\"\n    @functools.wraps(func) # 保存外边函数名\n    def wrapper():\n        \"wrapper function\"\n        print('note something')\n        return func()\n    return wrapper\n\n@note\ndef test():\n    \"test function\"\n    print('I am test')\n\ntest()\nprint(test.__doc__)\n运行结果\nnote something\nI am test\ntest function\n常用扩展库\n\n\n扩展库\n说明\n\n\n\nrequests\n使用的是 urllib3，继承了urllib2的所有特性\n\n\nurllib\n基于http的高层库\n\n\nscrapy\n爬虫\n\n\nbeautifulsoup4\nHTML/XML的解析器\n\n\ncelery\n分布式任务调度模块\n\n\nredis\n缓存\n\n\nPillow(PIL)\n图像处理\n\n\nxlsxwriter\n仅写excle功能,支持xlsx\n\n\nxlwt\n仅写excle功能,支持xls ,2013或更早版office\n\n\nxlrd\n仅读excle功能\n\n\nelasticsearch\n全文搜索引擎\n\n\npymysql\n数据库连接库\n\n\nmongoengine/pymongo\nmongodbpython接口\n\n\nmatplotlib\n画图\n\n\nnumpy/scipy\n科学计算\n\n\ndjango/tornado/flask\nweb框架\n\n\nxmltodict\nxml 转 dict\n\n\nSimpleHTTPServer\n简单地HTTP Server,不使用Web框架\n\n\ngevent\n基于协程的Python网络库\n\n\nfabric\n系统管理\n\n\npandas\n数据处理库\n\n\nscikit-learn\n机器学习库\n\n\n\n例如：读写excel文件\n\n安装esay_install工具sudo apt-get install python-setuptools\n安装模块sudo easy_install xlrdsudo easy_install xlwt\n\n所有内置模块\nimport sys\nsys.modules.keys()\n\n['builtins', 'sys', '_frozen_importlib', '_imp', '_warnings', '_thread', '_weakref', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'zipimport', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_weakrefset', 'site', 'os', 'errno', 'stat', '_stat', 'ntpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'sysconfig', 'idlelib', 'idlelib.run', 'linecache', 'functools', '_functools', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'types', 'collections.abc', 'weakref', 'tokenize', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', '_loc\nale', 'copyreg', 'token', 'queue', 'threading', 'time', 'traceback', 'warnings', 'tkinter', '_tkinter', 'tkinter.constants', 'idlelib.autocomplete', 'string', '_string', 'idlelib.autocomplete_w', 'platform', 'subprocess', 'signal', 'msvcrt', '_winapi', 'idlelib.multicall', 'idlelib.config', 'configparser', '_bootlocale', 'encodings.gbk', '_codecs_cn', '_multibytecodec', 'idlelib.hyperparser', 'idlelib.pyparse', 'idlelib.calltips', 'inspect', 'ast', '_ast', 'dis', 'opcode', '_opcode', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'importlib.machinery', 'textwrap', 'idlelib.calltip_w', 'idlelib.debugger_r', 'idlelib.debugger', 'bdb', 'fnmatch', 'posixpath', 'idlelib.macosx', 'idlelib.scrolledlist', 'idlelib.windows', 'idlelib.debugobj_r', 'idlelib.rpc', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'select', 'socket', '_socket', 'selectors', 'math', 'socketserver', 'idlelib.iomenu', 'shlex', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'locale', 'idlelib.stackviewer', 'idlelib.debugobj', 'idlelib.tree', 'idlelib.zoomheight', 'pydoc', 'importlib.util', 'importlib.abc', 'contextlib', 'pkgutil', 'urllib', 'urllib.parse']\n内置全局变量：vars()\n{'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': None, '__annotations__': {}, '__builtins__': <module 'builtins' (built-in)>}\n第三方模块：anaconda: 数十个常用的第三方模块\n内建属性\npython类的内建属性和方法\n['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__']\n\n\n常用专有属性\n说明\n触发方式\n\n\n\n__init__\n构造初始化函数\n创建实例后,赋值时使用,在__new__后\n\n\n__new__\n生成实例所需属性\n创建实例时\n\n\n__class__\n实例所在的类\n实例.__class__\n\n\n__str__\n实例字符串表示,可读性\nprint(类实例),如没实现，使用repr结果\n\n\n__repr__\n实例字符串表示,准确性\n类实例 回车 或者 print(repr(类实例))\n\n\n__del__\n析构\ndel删除实例\n\n\n__dict__\n实例自定义属性\nvars(实例.__dict__)\n\n\n__doc__\n类文档,子类不继承\nhelp(类或实例)\n\n\n__getattribute__\n属性访问拦截器\n访问实例属性时\n\n\n__bases__\n类的所有父类构成元素\n类名.__bases__\n\n\n\n__getattribute__例子：\nclass Person(object):\n    def __init__(self, subject1):\n        self.subject1 = subject1\n\n    # 属性访问时拦截器，打log\n    def __getattribute__(self, obj):\n        if obj == 'subject1':\n            print('log subject1')\n        return 'redirect python'\n\n    def show(self):\n        print('this is Person')\n\np = Person(\"python\")\nprint(p.subject1)\n内建函数\ndir(__builtins__)\n['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BufferError', 'BytesWarning', 'DeprecationWarning', 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'NameError', 'None', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning', 'ReferenceError', 'RuntimeError', 'RuntimeWarning', 'StandardError', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'ZeroDivisionError', '__debug__', '__doc__', '__import__', '__name__', '__package__', 'abs', 'all', 'any', 'apply', 'basestring', 'bin', 'bool', 'buffer', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'cmp', 'coerce', 'compile', 'complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'execfile', 'exit', 'file', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'intern', 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'long', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'quit', 'range', 'raw_input', 'reduce', 'reload', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'unichr', 'unicode', 'vars', 'xrange', 'zip']\nrange()\nrange(stop) # 整数列表\nrange(start, stop[, step]) # 整数列表\n\nstrat: 计数从start开始，默认是从0开始。例如：range(5)等价于range(0, 5)\n\nstop: 到stop结束，但不包括stop。例如：range(0, 5), 返回[0, 1, 2, 3, 4]没有5\nstep: 每次跳跃的间距，默认为1。例如：range(0, 5)等价于range(0, 5, 1)\n\n\nmap()\nmap函数会根据提供的函数作为指定序列做映射\nmap(function, sequence[, sequence, ...]) -> list\n\n\nfunction: 一个函数\n\nsequence: 一个或多个序列，取决于function需要几个参数\n返回值是一个list\n\n\n# 函数需要一个参数\nmap(lambda x: x*x, [1, 2, 3]) # [1, 4, 9]\n\n# 函数需要两个参数\nmap(lambda x, y: x+y, [1, 2, 3], [4, 5, 6]) # [5, 7, 9]\n\n\ndef f1( x, y ):  \n    return (x, y)\nl1 = [0, 1, 2, 3, 4, 5, 6]  \nl2 = ['Sun', 'M', 'T', 'W', 'T', 'F', 'S']\nl3 = map(f1, l1, l2) \nprint(list(l3))\n# [(0, 'Sun'), (1, 'M'), (2, 'T'), (3, 'W'), (4, 'T'), (5, 'F'), (6, 'S')]\nfilter()\nfilter()会对指定序列执行过滤操作\nfilter(function or None, sequence) -> list, tuple, or string\n\n\nfunction: 接受一个参数，返回布尔值True或False\n\nsequence: 序列可以是str,tuple, list\n\n返回值list, tuple, string\n\n\nfilter(lambda x: x%2, [1, 2, 3, 4])\n[1, 3]\n\nfilter(None, \"a\")\n'a'\nreduce()\nreduce会对参数序列中对元素进行累积\nreduce(function, sequence[, initial]) -> value\nfunction:该函数有两个参数sequence:序列可以是str，tuple，listinitial:固定初始值\n\n\nfunction: 该函数有二个参数\n\nsequence: 序列可以是str, tuple, list\n\n\ninitial: 固定初始值\n返回value\n\n\nreduce(lambda x, y: x+y, [1,2,3,4]) # 10\n\nreduce(lambda x, y: x+y, [1,2,3,4], 5) # 15\n\nreduce(lambda x, y: x+y, ['aa', 'bb', 'cc'], 'dd') # 'ddaabbcc'\nsorted()\nsorted(iterable, cmp=None, key=None, reverse=False) --> new sorted list\n\n\niterable: 迭代器\n\nkey: 函数\n\nreverse: 正序，倒序\n返回一个新的列表\n\nsorted([1, 4, 2, 6, 3, 5]) # [1, 2, 3, 4, 5, 6]\n\nsorted([1, 4, 2, 6, 3, 5], reverse = 1) # 倒序 # [6, 5, 4, 3, 2, 1]\n\nsorted(['dd', 'aa', 'cc', 'bb']) # ['aa', 'bb', 'cc', 'dd']\n\nlst = [3, -19, -1, 28, 7, 0, -2, -5, 7, 8, 0 -3, 9, 0, 11]\nsorted(lst, key=lambda x: (x >= 0, -x if x >= 0 else x)) # [-19, -5, -3, -2, -1, 28, 11, 9, 8, 7, 7, 3, 0, 0] ​​​​\nsorted(lst, key=lambda x: (x >= 0, -abs(x))) # [-19, -5, -3, -2, -1, 28, 11, 9, 8, 7, 7, 3, 0, 0] ​​​​\n模块中的__all__的作用\n__all__只影响from <module> import *这种导入方式\n__all__ = ['test']\n\ndef test():\n    print('test')\n\n包、__init__.py的作用\n某个文件夹下具有__init.py的，称之为包\n__init__.py作用：\n\n\npackage的标识\n定义package中的__all__，用来模糊导入\n\n模块的发布和安装\n新建一个setup.py写入：\nfrom distutils.core import setup\n\nsetup(name='alogy', version='1.0', description='a', author='alogy', py_modules=['suba.aa']) # suba.aa 包名.模块名\n发布：\n> python setup.py build\n\n> python setup.py sdist\n安装：\n> python setup.py install\nimport搜索路径\nimport sys\nsys.path # sys.path的先后顺序\n重新导入模块\n模块被导入后，import module不能重新导入模块，需要重新导入\nfrom imp import *\nreload('module') # module模块名\n调试\npdb是基于命令行的调试工具\n运行时启动\npython -m pdb xxx.py\nl: list 查看运行的代码n: next 往下行执行c: continue 继续执行代码直到结束b 7，b 行数: break 添加断点(通过c执行)b: 查看所有断点clear 断点序号: 清除指定断点s: step 进入当前作用域中p 变量名: 查看指定变量名的值a: 查看所有当前作用域的变量名和变量值q: quit 退出调试r: return 快速执行到函数最后一行\n交互式调试\nimport pdb\npdb.run('testfun(args)') # 此时会打开pdb调试，注意：先使用s跳转到testfun函数中，然后可以使用\n程序里埋点\n当程序执行到pbd.set_trace()位置时停下来调试\nimport pdb\n\npdb.set_trace()\npackage\n常用内置模块：sys: 系统模块, 程序与python解释器的交互, 用于操控python的运行时环境os: 操作系统模块, 程序与操作系统的交互, 系统操作IO等行为time，datetime: 时间模块re: 正则json: json处理urllib: 网络处理random: 随机\n不常用内置模块：itertools: 一些特殊的函数可以操作可迭代对象或者排列组合copy: 拷贝的函数（赋值一般是传递对象的引用，修改一个对象，会导致其它对象也受到改变）string: String模块包含大量实用常量和类\nNaked\nNaked: 一个Python命令行应用程序框架. 可用于执行JS代码\nfrom Naked.toolshed.shell import execute_js, muterun_js\nimport sys\n\nresponse = muterun_js('file.js')\nif response.exitcode == 0:\n  print(response.stdout)\nelse:\n  sys.stderr.write(str(response.stderr))\nshutil\n用于复制和归档文件和目录树的实用函数。\n# 清dist目录\nclearDist = (len(sys.argv) == 4 and (sys.argv[3] == '--clear'))\nif clearDist:\n    shutil.rmtree('./dist/')\nsubprocess\n访问I/O流的子进程\n# 编译vue\nbuildStat = subprocess.call('node build/build.js ' + webPath + ' ' + verPath, shell=True)\nif buildStat != 0:\n    print('vue 编译错误')\n    sys.exit(1)\nsix\nPython 2和3兼容库\nimport six\n\n\ndef bytes_to_str(s, encoding='utf-8'):\n    \"\"\"Returns a str if a bytes object is given.\"\"\"\n    if six.PY3 and isinstance(s, bytes):\n        return s.decode(encoding)\n    return s\n其它\n给程序传递参数\nimport sys\n\nprint(sys.argv) # 接收运行时接受的参数\n终止程序运行\nimport sys\nsys.exit(1)\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}