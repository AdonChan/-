{"title": "python大佬养成计划----Django图书人物适配系统(前端) - python太阳花 ", "index": "windows,mysql,python", "content": "Django添加路由\n与flask一样，django也需要使用路由将URL与服务端要执行的代码关联。\n两者相同的地方是都可以将一个普通函数变成视图函数。不同的是，flask使用装饰器@app.route()定义路由，而django使用正则表达式定义路由。\n\n操作：在我们建立的book项目中新建urls.py文件\n#FristDjango\\book\\urls.py\nfrom django.conf.urls import url\nfrom django.contrib import admin\nfrom book.views import index,detail\nurlpatterns = [\n    url(r'^$',index),   #http://127.0.0.1:9099/\n    url(r'book/(?P<id>\\d+)/$',detail)   #http://127.0.0.1:9099/book/1/\n]\n\n修改主项目的setting.py文件\nfrom django.conf.urls import url, include\nfrom django.contrib import admin\n\nurlpatterns = [\n    url(r'^admin/', admin.site.urls),\n    url(r'',include('book.urls'))    \n\n]\n\n视图函数可以随意编写，现在仅用来做测试\n#FristDjango\\book\\views.py\nfrom django.http import HttpResponse\nfrom django.shortcuts import render\n\n# Create your views here.\ndef index(request): #django不同于flask，flask默认请求方式是request,而django里面的请求对象必须作为参数接收\n    return  HttpResponse('ok')\n\ndef detail(request,id):\n    return HttpResponse('%s is ok' %(id))\n\n^匹配URL路径的开始， $匹配URL路径的结束。中间什么都没有，表示这个正则匹配的是根目录，‘/’。\n简易的网页结构\n已经测试过网页是可用的，现在编写自己的html文件来实现自己的项目我们的网页模板文件放在主项目templates/目录下的应用文件里,可能会有多个应用，所以建立不同的目录，用来区分。需要实现与数据库的结合，后台管理的数据库信息应该在前台显示，重新编写视图函数\n#FristDjango\\book\\views.py\nfrom django.http import HttpResponse\nfrom django.shortcuts import render\n\n# Create your views here.\nfrom book.models import BookInfo,HeroInfo\n\n\ndef index(request): #django不同于flask，flask默认请求方式是request,而django里面的请求对象必须作为参数接收\n    # return  HttpResponse('ok')\n    books = BookInfo.objects.all()\n    return render(request,'book/index_old.html',context={\n        'books':books,\n    })\ndef detail(request,id):\n    # return HttpResponse('%s is ok' %(id))\n    book = BookInfo.objects.get(id=id)\n    heros = book.heroinfo_set.all()\n    return render(request,'book/detail_old.html',context={\n        'book':book,\n        'heros':heros\n    })\n主页显示的html页面\n# templates/book/index_old.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>主页</title>\n</head>\n<body>\n<ul>\n{% for book in books %}\n    <li>\n    <h1>{{ book.btitle }}</h1>\n        <div>{{ book.bpub_time }}</div>\n    <p>{{ book.bcontent }}</p>\n    </li>\n{% endfor %}\n</ul>\n</body>\n</html>\n\n\n书籍详情页显示的html页面\n# templates/book/detail_old.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>{{ book.btitle}}详情页</title>\n</head>\n<body>\n    <h1>{{ book.btitle }}</h1>\n<ul>\n    {% for hero in heros %}\n    <h2>{{ hero.hname }}</h2>\n        <p>{{ hero.hcontent }}</p>\n    {% endfor %}\n\n</ul>\n</body>\n</html>\n\n\n如何让页面变好看\nstep1: 书籍信息太少，修改书籍数据库表结构，添加图书摘要、图书图片step2:从网上找一些好看的页面文件来做修改\n注意：静态文件(CSS,JS,IMG)单独存放一个目录static/\n样式文件的目录需要修改，主项目settings.py文件修改Static files\n\nstep1操作：修改book/models.py文件中BookInfo表的结构，添加摘要，图片。新建static/uploads/目录用来存放上传的图片。\n    bcontent = models.TextField(default='摘要', verbose_name='书籍摘要')\n    bimg = models.ImageField(default=None, upload_to='static/uploads/')\n终端执行数据库迁移命令\npython manage.py makemigrations\npython manage.py migrate\n使用管理员登陆后台，修改书籍内容\nstep2操作:新建static/目录后，修改主项目settings.py文件\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/1.10/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, \"static\"),\n]\n注意：主页和详情页有大量重复代码，我们创建一个基模板，让应用模板继承于基类可减少代码重复量。最后修改的网页显示如图：项目框架图：\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}