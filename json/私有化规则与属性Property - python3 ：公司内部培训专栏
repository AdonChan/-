{"title": "私有化规则与属性Property - python3 ：公司内部培训专栏 ", "index": "python", "content": "上一篇文章：Python装饰器：python真正入门的鉴定标准下一篇文章：Python垃圾回收详解\n\n1、私有化\n变量定义规则\n\n\n变量形式\n解读\n\n\n\nxx\n公有变量xx\n\n\n_xx\n单前置下划线，私有化属性或方法，from somemodule import *禁止导入，类对象和子类进可以访问。\n\n\n__xx\n双前置下划线，避免与子类中的属性命名冲突，无法再在外部直接访问。\n\n\n__xx__\n双前后下划线，python自定义使用的的属性或者方法名称，例如__init__，不要自定义这种名称的变量\n\n\nx_\n单后置下划线，避免与Python关键词冲突\n\n\n\n2、属性Property\n私有属性添加getter和setter方法\n实例：\nclass Man():\n    def __init__(self):\n        self.__age=18\n    def getAge(self):\n        return self.__age\n    def setAge(self,value):\n        #isinstance用来判断一个对象是不是指定类型\n        #下面语句就是用来判断value是不是int类型\n        if isinstance(value,int):\n            self.__age=value\n        else:\n            print(\"输入的年龄不是整数\")\n\nif __name__==\"__main__\":\n    mark=Man()\n\n    mark.setAge(\"xxx\")\n    print(mark.getAge())\n    mark.setAge(20)\n    print(mark.getAge())\n\n    #下面一句会报错\n    #print(mark.age)\n结果：\n输入的年龄不是整数\n18\n20\n使用property升级getter和setter方法\n实例：\nclass Man():\n    def __init__(self):\n        self.__age = 18\n\n    def getAge(self):\n        return self.__age\n\n    def setAge(self, value):\n        # isinstance用来判断一个对象是不是指定类型\n        # 下面语句就是用来判断value是不是int类型\n        if isinstance(value, int):\n            self.__age = value\n        else:\n            print(\"输入的年龄不是整数\")\n    age=property(getAge,setAge)\n\n\nif __name__ == \"__main__\":\n    mark = Man()\n\n    mark.age=\"xxx\"\n    print(mark.age)\n    mark.age=20\n    print(mark.age)\n结果：\n输入的年龄不是整数\n18\n20\n使用property取代getter和setter方法\n实例：\nclass Man():\n    def __init__(self):\n        self.__age = 18\n\n    @property\n    def age(self):\n        return self.__age\n    @age.setter\n    def age(self,value):\n        # isinstance用来判断一个对象是不是指定类型\n        # 下面语句就是用来判断value是不是int类型\n        if isinstance(value, int):\n            self.__age = value\n        else:\n            print(\"输入的年龄不是整数\")\n\n\nif __name__ == \"__main__\":\n    mark = Man()\n\n    mark.age=\"xxx\"\n    print(mark.age)\n    mark.age=20\n    print(mark.age)\n结果：\n输入的年龄不是整数\n18\n20\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "1"}