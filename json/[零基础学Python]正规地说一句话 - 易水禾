{"title": "[零基础学Python]正规地说一句话 - 易水禾 ", "index": "零基础,python", "content": "小孩子刚刚开始学说话的时候，常常是一个字一个字地开始学，比如学说“饺子”，对他/她来讲，似乎有点难度，大人也聪明，于是就简化了，用“饺饺”来代替，其实就是让孩子学会一个字就能表达。当然，从教育学的角度，有人不赞成这种方法。这个此处不讨论了。如果对比学习编程，就好像是前面已经学习过的那些各种类型的数据（对应这自然语言中的单个字、词），要表达一个完整的意思，或者让计算机完成一个事情（动作），不得不通过一句话，这句话就是语句，它是按照一定规则组织起来的。自然语言中的一句话，按照主谓宾的语法方式组织，计算机编程中的语句，也是按照一定的语法要求进行组织。\n\n虽然在第一部分中，已经零星涉及到语句问题，并且在不同场合也进行了一些应用。毕竟不那么系统。本部分，就比较系统地介绍python中的语句。\n\n为了有总括的印象，先看看python中都包括哪些语句：\n\n\n赋值语句\nif语句，当条件成立时运行语句块。经常与else, elif（相当于else if）配合使用。\nfor语句，遍列列表、字符串、字典、集合等迭代器，依次处理迭代器中的每个元素。\nwhile语句，当条件为真时，循环运行语句块。\ntry语句。与except, finally, else配合使用处理在程序运行中出现的异常情况。\nclass语句。用于定义类型。\ndef语句。用于定义函数和类型的方法。\npass语句。表示此行为空，不运行任何操作。\nassert语句。用于程序调适阶段时测试运行条件是否满足。\nwith语句。Python2.6以后定义的语法，在一个场景中运行语句块。比如，运行语句块前加锁，然后在语句块运行退出后释放锁。\nyield语句。在迭代器函数内使用，用于返回一个元素。\nraise语句。抛出一个异常。\nimport语句。导入一个模块或包。常用写法：from module import name, import module as name, from module import name as anothername\n\n特别说明，以上划分也不是很严格，有的内容，有的朋友不认为属于语句。这没关系，反正就是那个东西，在编程中使用。不纠结于名词归类上。总之这些都是要掌握的，才能顺利编程呢。\n\n再谈赋值语句\n\n还记得赋值，简单也不简单那一讲中所提到的赋值语句吗？既然谈语句，就应该从这个开始，一方面复习，另外一方面，希望能够深点，深点的感觉总是很好的（我说的是理解python，思无邪。前面有一个关于list的内容：再深点，更懂list，就有喜欢看玩笑的看官思邪了。哈哈。）\n\n>>> qiwsir = 1\n>>> python = 2\n>>> x, y = qiwsir, python   #相当于x=qiwsir,y=python\n>>> x\n1\n>>> y\n2\n>>> x, y                    #输出的是tuple\n(1, 2)\n>>> [x, y]                  #这就是一个list\n[1, 2]\n\n>>> [a, b] = [qiwsir, python]\n>>> a\n1\n>>> b\n2\n>>> a, b\n(1, 2)\n>>> [a, b]\n[1, 2]\n\n\n换一种方式，以上两种赋值方法交叉组合一下：\n\n>>> [c, d] = qiwsir, python\n>>> c\n1\n>>> d\n2\n>>> c, d\n(1, 2)\n>>> f, g = [qiwsir, python]\n>>> f\n1\n>>> g\n2\n>>> f, g\n(1, 2)\n\n\n居然也行。其实，从这里我们就看出来了，赋值，就是对应着将左边的变量和右边的对象关联起来。\n\n有这样一个有趣的问题，如果a=3,b=4，想把这两个变量的值调换一下，也就是a=4，b=3。在有的高级语言中，是要先引入另外一个变量c做为中间中专，就是这样：\n\na = 3\nb = 4\nc = a   #即c=3\na = b   #a=4\nb = c   #b=3\n\n\n初学者可能有点糊涂。就是我和你两只手都托着一个箱子，现在我们两个要换一下箱子，但是两个手都被占用了，无法换（当然，要求箱子不能落地，也不要放在桌子上之类的）。于是再找一个名曰张三的人来，他空着两只手，那么我先把箱子给张三，我就空出来了，然后接你的箱子，你的箱子就到我手里了。我的那个箱子现在张三手里呢，你接过来，于是我们两个就换了箱子了。\n\n只所以这么啰嗦，就是因为我们两个没有更多的手。但是，这不是python，python有更多的手。她可以这样：\n\n>>> qiwsir = 100\n>>> python = 200\n>>> qiwsir, python = python, qiwsir\n>>> qiwsir\n200\n>>> python\n100\n\n\n有点神奇，python是三头六臂的。\n\n序列赋值\n\n其实上面实验的赋值，本质上就是序列赋值。只不过这里再强化一番罢了。如果左边的变量是序列，右边的对象也是序列，两者将一一对应地进行赋值。\n\n>>> [a, b, c] = (1, 2, 3)   #左右序列一一对应，左边是变量，右边是对象\n>>> a\n1\n>>> b\n2\n>>> c\n3\n>>> (a,b,c) = [1,2,3]\n>>> a\n1\n>>> b\n2\n>>> c\n3\n>>> [a,b,c] = \"qiw\"     #不要忘记了，str也是序列类型的数据\n>>> a\n'q'\n>>> b\n'i'\n>>> c\n'w'\n>>> (a,b,c) = \"qiw\"\n>>> a,c\n('q', 'w')\n>>> a,b,c = 'qiw'       #与前面等价\n>>> a,b\n('q', 'i')\n>>> a,b = 'qiw'         #报错了，因为左边和右边不是一一对应\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: too many values to unpack\n\n>>> (a,b),c = \"qi\",\"wei\"    #注意观察，这样的像是是如何对应的\n>>> a,b,c\n('q', 'i', 'wei')\n>>> string = \"qiwsir\"\n>>> a,b,c = string[0],string[1],string[2]   #取切片也一样\n>>> a,b,c\n('q', 'i', 'w')\n>>> (a,b),c = string[:2],string[2:]\n>>> a,b,c\n('q', 'i', 'wsir')\n\n\n从实验中，可以看出，要搞清楚这种眼花缭乱的赋值，就仅仅扣住“一一对应”这个命脉即可。\n\n如果看官用python3，在赋值上还有更多有意思的东西呢。不过，本讲座用的还是python2。\n\n恭请到github上浏览及时更新的教程：零基础学python\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}