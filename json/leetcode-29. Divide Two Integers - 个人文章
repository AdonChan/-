{"title": "leetcode-29. Divide Two Integers - 个人文章 ", "index": "python", "content": "题目解析：\n用加减法实现除法\n用减法，每次累加被减部分，累加商， 以一个固定的倍数递增\n坑： 注意 while循环的跳出便捷，= 的情况要注意。应用：累加思想，可以用在提速上，效率提高\n\"\"\"\n\nGiven two integers dividend and divisor, divide two integers without using multiplication, division and mod operator.\n\nReturn the quotient after dividing dividend by divisor.\n\nThe integer division should truncate toward zero.\n\nExample 1:\n\nInput: dividend = 10, divisor = 3\nOutput: 3\n\nExample 2:\n\nInput: dividend = 7, divisor = -3\nOutput: -2\n\nNote:\n\n    Both dividend and divisor will be 32-bit signed integers.\n    The divisor will never be 0.\n    Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 231 − 1 when the division result overflows.\n\n\"\"\"\nimport time\nimport math\nclass Solution:\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        sign=(dividend>0)^(divisor>0)  #如果 ==1，则是 负的 ==0，则是正的\n        dividend_current=int(math.fabs(dividend))\n        divisor_current=int(math.fabs(divisor))\n        quotient=0\n        quotient_base=1\n\n        while dividend_current>0:\n            print(dividend_current,divisor_current,quotient)\n            while dividend_current>=divisor_current:\n                quotient+=quotient_base\n                dividend_current-=divisor_current\n                divisor_current*=2   #\n                quotient_base*=2\n                # time.sleep(1)\n            while divisor<=dividend_current<divisor_current:\n                divisor_current/=2\n                quotient_base/=2\n            # time.sleep(1)\n            if dividend_current<divisor:\n                break\n        # print(sign*quotient)\n        ans=int(quotient) if not sign else (-1)*int(quotient)\n        if ans >= 2 ** 31:\n            return 2 ** 31 - 1\n        elif ans <= -2 ** 31 - 1:\n            return -2 ** 31\n        else:\n            return ans\nif __name__=='__main__':\n    st=Solution()\n    dividend=128\n    dividend=-2147483648\n    divisor=1\n    # out=st.divide(-128,3)\n    out=st.divide(dividend,divisor)\n    print(out)\n\n\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}