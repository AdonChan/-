{"title": "python学习笔记-错误处理 - helloword ", "index": "python", "content": "程序中的错误处理有多种方式，一类是约定好错误码，然后根据返回的错误码来判断是否发生错误，以及错误的原因。\n但是这么做容易将正确的返回值和错误码混在一起，必须要写很多代码来区分，非常不方便。另外一旦出错，还需要一级一级往上报，知道有一级可以处理它。\n比较成熟的做法是try...except...finally...这一套错误处理机制。该机制不会干扰正常的返回值。同时也无需一级一级手动上报，而是只需要有一级捕获并处理即可。\n代码：\ntry:\n    print open(\"Demo.py\", 'r')\n    n = 1 / 0\nexcept ZeroDivisionError, e:\n    print \"zeroDivisionError\", e\nexcept ValueError, e:\n    print \"ValueError\", e\nelse:\n    print \"No Error catched\"\nfinally:\n    print \"finally\"\n\n使用错误处理有几个点需要注意：\n\n可以写多个except用于捕获多个exception\n父类exception可以捕获子类的exception，已经被捕获的exception不会再被传递给其他exception。\n可以用else来处理没有exeption的情况\nfinally是无论有无错误都会执行。\n\nBuild-in Exception的种类\nPython(2.x)内置Exception的继承关系见下图：\nThe class hierarchy for built-in exceptions is:\nBaseException\n +-- SystemExit\n +-- KeyboardInterrupt\n +-- GeneratorExit\n +-- Exception\n      +-- StopIteration\n      +-- StandardError\n      |    +-- BufferError\n      |    +-- ArithmeticError\n      |    |    +-- FloatingPointError\n      |    |    +-- OverflowError\n      |    |    +-- ZeroDivisionError\n      |    +-- AssertionError\n      |    +-- AttributeError\n      |    +-- EnvironmentError\n      |    |    +-- IOError\n      |    |    +-- OSError\n      |    |         +-- WindowsError (Windows)\n      |    |         +-- VMSError (VMS)\n      |    +-- EOFError\n      |    +-- ImportError\n      |    +-- LookupError\n      |    |    +-- IndexError\n      |    |    +-- KeyError\n      |    +-- MemoryError\n      |    +-- NameError\n      |    |    +-- UnboundLocalError\n      |    +-- ReferenceError\n      |    +-- RuntimeError\n      |    |    +-- NotImplementedError\n      |    +-- SyntaxError\n      |    |    +-- IndentationError\n      |    |         +-- TabError\n      |    +-- SystemError\n      |    +-- TypeError\n      |    +-- ValueError\n      |         +-- UnicodeError\n      |              +-- UnicodeDecodeError\n      |              +-- UnicodeEncodeError\n      |              +-- UnicodeTranslateError\n      +-- Warning\n           +-- DeprecationWarning\n           +-- PendingDeprecationWarning\n           +-- RuntimeWarning\n           +-- SyntaxWarning\n           +-- UserWarning\n           +-- FutureWarning\n       +-- ImportWarning\n       +-- UnicodeWarning\n       +-- BytesWarning\n当然我们也可以自定义一个类，例如：\nclass MyException(StandardException):\n    pass\n当然，推荐使用Build-in的Exception。在Build-in的Exception中找不到我们所需要的Exception的时候，我们才自定义Exception。\n抛出自定义Exception使用以下语法：\nraise MyException(\"this is my Exception\")\nException的记录\n在测试代码中，我们对Exception的处理中可以直接print exception。但是实际生产代码中直接打印log可能不是很妥。我们可以通过简单的配置使用logging.exception(msg)将错误打印到日志中。如何正确使用python内置的logging模块，可以另开一篇文章介绍。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}