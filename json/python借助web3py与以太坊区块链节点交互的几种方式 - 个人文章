{"title": "python借助web3py与以太坊区块链节点交互的几种方式 - 个人文章 ", "index": "程序员,交互,以太坊,区块链,python", "content": "通信服务提供接口是web3如何与区块链交互的关键。接口接受JSON-RPC请求并返回响应。这通常通过将请求提交给基于HTTP或IPC套接字的服务器来完成。\n如果你已经愉快地连接到你的以太坊节点，那么你可以跳过这部分内容。\n选择如何连接到你的节点\n大多数节点都有多种连接方式。如果你尚未确定要使用哪种节点，请转到如何选择要使用的节点？\n连接节点的最常用方法是：\n\n1.IPC（使用本地文件系统：最快，最安全）\n2.Websockets（远程工作，比HTTP更快）\n3.HTTP（更多节点支持它）\n\n如果你不确定如何决定，请选择以下方式：\n\n如果你可以选择在与节点相同的计算机上运行Web3.py，请选择IPC。\n如果必须连接到其他计算机上的节点，请使用Websockets。\n如果你的节点不支持Websockets，请使用HTTP。\n\n大多数节点都有“关闭”连接选项的方法。我们建议你关闭所有未使用的连接选项。这提供了更安全的设置：它减少了恶意黑客可以试图窃取你的以太币的方式。\n确定连接后，可以使用通信服务提供接口Provider指定详细信息。通信服务提供接口Provider程序是为所需类型的连接配置的Web3.py类。\n看这几个：\n\nIPCProvider\nWebsocketProvider\nHTTPProvider\n\n配置通信服务提供接口程序后，如：\nfrom web3 import Web3\nmy_provider = Web3.IPCProvider('/my/node/ipc/path')\n然后你就可以初始化Web3实例了，如下所示：\nw3 = Web3(my_provider)\n这样，你就已准备好开始使用Web3.py.\n自动与手动通信服务提供接口\n如果未指定通信服务提供接口程序，Web3对象将在几个标准位置查找以太坊节点。初始化时会发生自动检测：\nfrom web3.auto import w3\n\n# which is equivalent to:\n\nfrom web3 import Web3\nw3 = Web3()\n有时，web3无法自动检测节点的位置。\n\n如果你不确定使用哪种连接方法，请看上文。\n如果你知道连接方法，但不知道连接所需的其他信息（如IPC文件的路径），则需要在节点的配置中查找该信息。\n如果你不确定使用的是哪个节点，请参阅如何选择要使用的节点？。\n\n要深入了解自动检测的工作原理，请接着看：\n自动检测如何工作\nWeb3尝试按以下顺序连接到节点，使用它可以进行的第一个成功连接：\n\n由环境变量指定的连接。\n\nIPCProvider，它查找几个IPC文件位置。\n\nHTTPProvider，尝试连接到http://localhost:8545。\n\n如果没有提供者成功，你仍然可以使用不需要连接的Web3 API，例如：\n\n类型转化(Type Conversions)。\n货币单位转换(Currency Conversions)。\n地址相关(Addresses)。\n使用本地私钥(Local Private Keys)。\n等等。\n\n\n\n使用自动检测的示例\n一些节点提供超出标准的API。有时，跨节点以不同方式提供相同的信息。如果要编写跨多个节点工作的代码，可能需要查找连接到的节点类型。\n例如，以下内容检索geth和parity的客户端enode端点：\nfrom web3.auto import w3\n\nconnected = w3.isConnected()\n\nif connected and w3.version.node.startswith('Parity'):\n    enode = w3.parity.enode\n\nelif connected and w3.version.node.startswith('Geth'):\n    enode = w3.admin.nodeInfo['enode']\n\nelse:\n    enode = None\n通过环境变量\n或者，你可以在启动脚本之前设置环境变量WEB3_PROVIDER_URI，web3将首先查找这种方式。\n此环境变量的有效格式为：\n\nfile:///path/to/node/rpc-json/file.ipc\nhttp://192.168.1.2:8545\nhttps://node.ontheweb.com\nws://127.0.0.1:8546\n\n自动初始化的快捷方式\n常见方法中有几个自动初始化的快捷方式。\nInfura Mainnet\n要轻松连接到Infura Mainnet远程节点，如果你没有https://infura.io/signup，请先注册免费的API密钥。\n然后使用你的API密钥设置环境变量INFURA_API_KEY：\n$ export INFURA_API_KEY=YourApiKey\n>>> from web3.auto.infura import w3\n\n# confirm that the connection succeeded\n>>> w3.isConnected()\nTrue\nGeth dev PoA\n要使用默认值连接到geth --dev PoA(Proof-of-authority)实例：\n>>> from web3.auto.gethdev import w3\n\n# confirm that the connection succeeded\n>>> w3.isConnected()\nTrue\n内置通信服务提供接口\nWeb3附带以下通信服务提供接口程序，这些通信服务提供接口程序适用于连接到本地和远程JSON-RPC服务器。\nHTTPProvider\n class web3.providers.rpc.HTTPProvider(endpoint_uri[, request_kwargs])\n此通信服务提供接口程序处理与基于HTTP或HTTPS的JSON-RPC服务器的交互。\n\n\nendpoint_uri应该是RPC端点的完整URI，例如'https://localhost:8545'。对于在端口80上运行的HTTP连接后面的RPC服务器和在端口443上运行的HTTPS连接，可以从URI中省略该端口。\n\nrequest_kwargs这应该是关键字参数的字典，它将被传递到http/https请求。\n\n>>> from web3 import Web3\n>>> web3 = Web3(Web3.HTTPProvider(\"http://127.0.0.1:8545\"))\n请注意，每个python进程只应创建一个HTTPProvider，因为HTTPProvider会回收底层TCP/IP网络连接，以获得更好的性能。\nHTTPProvider使用python请求库来发出请求。如果你想修改请求的方式，可以使用request_kwargs来执行此操作。一个常见的用例是增加每个请求的超时。\n>>> from web3 import Web3\n>>> web3 = Web3(Web3.HTTPProvider(\"http://127.0.0.1:8545\", request_kwargs={'timeout': 60}))\nIPCProvider\nweb3.providers.ipc.IPCProvider(ipc_path=None, testnet=False, timeout=10)\n此通信服务提供接口程序处理与基于IPC Socket的JSON-RPC服务器的交互。\n\nipc_path是IPC套接字的文件系统路径。:56\n>>> from web3 import Web3\n>>> web3 = Web3(Web3.IPCProvider(\"~/Library/Ethereum/geth.ipc\"))\n如果没有指定ipc_path，它将使用它可以从下表中找到的第一个IPC文件：\n\n\nOn Linux and FreeBSD:\n\n~/.ethereum/geth.ipc\n~/.local/share/io.parity.ethereum/jsonrpc.ipc\n\n\n\nOn Mac OS:\n\n~/Library/Ethereum/geth.ipc\n~/Library/Application Support/io.parity.ethereum/jsonrpc.ipc\n\n\n\nOn Windows:\n\n\\.pipegeth.ipc\n\\.pipejsonrpc.ipc\n\n\n\nWebsocketProvider\n class web3.providers.websocket.WebsocketProvider(endpoint_uri[, websocket_kwargs])\n此通信服务提供接口程序处理与基于WS或WSS的JSON-RPC服务器的交互。\n\n\nendpoint_uri应该是RPC端点的完整URI，例如ws://localhost:8546。\n\nwebsocket_kwargs应该是关键字参数的字典，它将被传递到ws/wss websocket连接。\n\n>>> from web3 import Web3\n>>> web3 = Web3(Web3.WebsocketProvider(\"ws://127.0.0.1:8546\"))\nWebsocketProvider使用python websockets库来发出请求。如果你想修改请求的方式，可以使用websocket_kwargs来执行此操作。一个常见的用例是增加每个请求的超时。\n>>> from web3 import Web3\n>>> web3 = Web3(Web3.WebsocketProvider(\"http://127.0.0.1:8546\", websocket_kwargs={'timeout': 60}))\n分享个的交互式在线编程实战教程：\npython以太坊，主要是针对python工程师使用web3.py进行区块链以太坊开发的详解。\n这里是原文\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}