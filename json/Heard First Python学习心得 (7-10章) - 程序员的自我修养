{"title": "Heard First Python学习心得 (7-10章) - 程序员的自我修养 ", "index": "python", "content": "前六章主要是对python的基础知识有一个大致的了解，后面这几章主要是python在web和android上的应用，会涉及HTML和sqlite3数据库方面的知识，很多人（包括我）都在这里面有很多疑惑，成功完成这里面的部分例子之外，我会更多把我的体会和困惑提出来，一方面可能会解决大家共同的问题，一方面希望大家或者以后自己深入学习之后能够解答这些遗留的问题。两篇文章并不是对Heard First Python的抄写，因此也不对所解决的问题进行描述，更适用于学习过此书有困惑，希望讨论的人阅读。\n第七章 web开发\n采用MVC设计web应用，MVC即model-View-Controller,这样有助于将web应用的代码分解为易于管理的功能模块。\n为数据建模\n构建athletemodel.py函数用于对数据的存储和调用（包括pickle的应用），这个模块更多是对前6章基础知识的复习。\nget_coach_data()\nput_to_store()\nget_from_store()\n\n三个函数的定义分别代表了获取（处理）原始数据，存储数据，提取数据的作用。\n设计网页界面\nyate函数是Heard First Pyhon资源网站可以下载的代码，这部分代码已经部分超出了python的学习范围，主要用于生成用户界面的HTML，对的，就是应用python通过模板自动生成HTML文件。我们现在的目标是读懂代码，并可以修改关键信息，这里不在贴出代码。\n控制器代码\n书中推荐使用web应用的结构：\n这样的结构可以让我们更简单的管理自己代码和文件，其实我们随便打开一个软件的安装文件夹都可以看见类似的结构。\n其次我们需要使用CGI（通用网关接口）脚本使网页运行，这类文件通常放在cgi-bin文件夹中：generate_list.py文件用于生成选择选手名称界面HTML：\nimport athletemodel\nimport yate\nimport glob\n\ndata_files = glob.glob(\"data/*.txt\")\nathletes = athletemodel.put_to_store(data_files)\n\nprint(yate.start_response())\nprint(yate.include_header(\"Coach Kelly's List of Athletes\"))\nprint(yate.start_form(\"generate_timing_data.py\"))\nprint(yate.para(\"Select an athlete from the list to work with:\"))\n\nfor each_athlete in athletes:\n    print(yate.radio_button(\"which_athlete\",athletes[each_athlete].name))\nprint(yate.end_form(\"Select\"))\nprint(yate.include_footer({\"Home\":\"/index.html\"}))\ngenerate_timing_data.py 文件用于生成 用户在选择选手后，响应返回该选手最快速度的三个时间:\nimport cgitb\ncgitb.enable()\n\nimport cgi\n\nimport athletemodel\nimport yate\n\nathletes = athletemodel.get_from_store() #从储存的数据中提取所需数据\n\nform_data = cgi.FieldStorage()\nathlete_name = form_data['which_athlete'].value\n\nprint(yate.start_response())\nprint(yate.include_header(\"Coach Kelly's Timing DAta\"))\nprint(yate.header(\"Athlete:\"+athlete_name+\",DOB:\"+athletes[athlete_name].dob+\".\"))\nprint(yate.para(\"THe top times for this athlete are:\"))\nprint(yate.u_list(athletes[athlete_name].top3))\nprint(yate.include_footer({\"Home\":\"/index.html\",\"Select another athlete\":\"generate_list.py\"}))\n\n创建服务器\n利用python创建自己的服务器：在webapp文件夹中打开cmd终端输入：python simple_httpd.py（打开此文件）即可以创建，就可以利用浏览器网址：http://localhost：8080 打开自己设计的网页。下面是simple_httpd.py的代码：\nfrom http.server import HTTPServer, CGIHTTPRequestHandler\n\nport = 8080\n\nhttpd = HTTPServer(('', port), CGIHTTPRequestHandler)\nprint(\"Starting simple_httpd on port: \" + str(httpd.server_port))\nhttpd.serve_forever()\nTips：\n1.glob函数可以方便的处理相同文件列表2.\nimport cgitb\ncgitb.enable()\n用于追踪错误并显示在浏览器上，这对于寻找并修改错误有重要作用。3.如果想要更好的理解本章内容，需要深入学习python在web开发方面的知识，如有错误或问题关系探讨，共同进步。\n第8章 移动端开发(略)\nandroid软件开发包书中的链接已经失效或者可能有墙，自己尝试安装了visual android开发，但很多配置和环境设置也是搞的自己晕头转向，最后模拟器最低支持android4.0版本，不过这也很正常，android开发本来就发展迅速，技术更新换代日新月异。这本书的一些资源和知识已经过时也是可以理解。因此我这里跳过了本书中关于Android开发的内容，在未来的学习中如果涉及android开发，我会寻找更好的资料或者项目进行学习。\n第9章 处理输入（web部分）\n本章是希望数据能够随着教练不断地方便地更新自己的数据，直接在网页中输入。\n传建一个表单\n首先创建一个HTML模板   templates/form.html\n<form action = $cgi_name method = $http_method> #这里'$'后面的参数是通过另外程序可修改的\nEnter a timing value: $list_of_inputs<br/>\n<input type = \"Submit\" value = $submit_text>\n</form>\n\n接着，生成我们需要的html，在yate.py后增加代码：\ndef create_inputs(inputs_list):#取一个或多个字符串，为各个字符串创建HTML标记（不是很懂）\n    html_inputs=''\n    for each_input in inputs_list:\n        html_inputs = html_inputs + '<input type = \"Text\" name=\"'+each_input+'\"size=40>' \n    return(html_inputs)\n\ndef do_form(name,the_inputs,method=\"POST\",text = \"Submit\"): #生成表单\n    with open('templates/form.html') as formf:\n        form_text = formf.read()\n    inputs = create_inputs(the_inputs)\n    form = Template(form_text)\n    return (form.substitute(cgi_name=name,http_method = method,list_of_inputs=inputs,submit_text=text))\ncgi-bin/test-form.py调用函数生成表单：\nimport yate\n\nprint(yate.start_response('text/html'))\nprint(yate.do_form ('add_timing_data.py',['TimeValue'],text='Send'))\nadd_timing_data.py  用于处理表单输入的数据：\nimport cgi\nimport os\nimport time\nimport sys\nimport yate\n\nprint(yate.start_response('text/plain'))\nadd = os.environ['REMOTE_ADDR']\nhost = os.environ['REMOTE_HOST']\nmethod = os.environ['REQUEST_METHOD']\ncur_time = time.asctime(time.localtime())\nprint(host + \",\"+ cur_time + \":\"+ method+\":\",end='',file=sys.stderr)\n\nform = cgi.FieldStorage()\nfor each_form_item in form.keys():\n    print(each_form_item + '->'+form[each_form_item].value,end='',file=sys.stderr)\nprint(file=sys.stderr)\nprint('OK.')\n输入数据的功能就完成了。Tips：1.我是在第7章开启服务器之后，输入网址http://localhost：8080/cgi-bin/test-form.py进入网站:2.在编写这个代码时，换了一个纯代码编辑器notpad++（之前用的vs）tab和space出现了混用报错：Tab Space Error 耽误了很多时间，提醒像我一样的在换新的编辑器时，记得设置tab=四个空格就好了。\n数据库系统\n使用Python预装sqlite3让我们很方便的使用数据库首先编写创建空的数据库：\nimport sqlite3\nconnection = sqlite3.connect('coachdata.sqlite')\ncursor = connection.cursor()\ncursor.executescript(\"\"\"\n        CREATE TABLE athletes(\n                  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE,\n                  name TEXT NOT NULL,\n                  dob DATE NOT NULL);\n                  \"\"\")\ncursor.executescript(\"\"\"\n        CREATE TABLE timing_data(\n                  athlete_id INTEGER NOT NULL,\n                  value TEXT NOT NULL,\n                  FOREIGN KEY (athlete_id) REFERENCES athletes)\n                  \"\"\")\nconnection.commit()\nconnection.close()\n其次通过initDBtables.py将data文件夹中的数据导入数据库：\nimport sqlite3\n\nconnection = sqlite3.connect('coachdata.sqlite')\ncursor = connection.cursor()\n\nimport glob\nimport athletemodel\n\ndata_files = glob.glob(\"../data/*.txt\")\nathletes = athletemodel.put_to_store(data_files)\n\nfor each_ath in athletes:\n    name = athletes[each_ath].name\n    dob  = athletes[each_ath].dob\n    cursor.execute(\"INSERT INTO athletes (name,dob) VALUES (?,?)\",(name,dob))\n    connection.commit()\n    cursor.execute(\"SELECT id from athletes WHERE name=? AND dob=?\",(name,dob))\n    the_current_id=cursor.fetchone()[0]\n    for each_time in athletes[each_ath].clean_data:\n        cursor.execute(\"INSERT INTO timing_data (athlete_id,value) VALUES (?,?)\",(the_current_id,each_time))\n    connection.commit()\nconnection.close()\n先将两文件放在cgi-bin文件夹中，然后在webapp中开启终端cmd，输入'py '然后将这两个文件拖入终端运行（或者输入位置和文件名达到同样效果），会在webapp文件夹中生成一个coachdata.sqlite文件，安装SQLiteManager进行查看：\n但不幸的是第二个文件并不能将数据传输到数据库中：这我卡住了好久未找到原因，代码中的提取数据部分应该没有问题，更多的是在和空数据库链接的问题上，但我并不知道怎么修改（自学数据库+1），于是这个问题就卡在这！我先把后面的流程走完。\n数据库与第7章web应用进行集成\n修改代码：athletemodel.py:\nimport sqlite3\n\ndb_name = 'coachdata.sqlite'\n\ndef get_names_from_store():\n    connection = sqlite3.connect(db_name)\n    cursor = connection.cursor()\n    \n    results = cursor.execute(\"\"\"SELECT name FROM athletes\"\"\")\n    response = [row[0] for row in results.fetchall()]\n    connection.close() \n    return(response)\n    \ndef get_athlete_from_id(athlete_id):\n    connection = sqlite3.connect(db_name)\n    cursor = connection.cursor()\n    \n    results = cursor.execute(\"\"\"SELECT NAME,dob FRCM athletes WHERE id=?\"\"\",(athlete_id,))\n    (name,dob) = results.fetchone()\n    results = cursor.execute(\"\"\"SELECT value FROM timing data WHERE athlete id=?\"\"\",(athlete_id,))\n    data = [row[0] for row in result.fetchall()]\n    response = {    'name': name,\n                    'DOB' : dob,\n                    'data': data,\n                    'top3':data[0:3]}\n    connection.close()\n    return(response)\n    \n    \ndef get_namesID_fromstore():\n    connection = sqlite3.connect(db_name)\n    cursor = connection.cursor()\n    results = cursor.execute(\"\"\"SELECT name,id FROM athletes\"\"\")\n    response = results.fetchall()\n    connection.close() \n    return(response)\n修改generate_list。py代码，适应sqlite3数据库：\nimport athletemodel\nimport yate\n\n\n\nathletes = athletemodel.get_namesID_from_store()\n\nprint(yate.start_response())\nprint(yate.include_header(\"NUAC's List of Athletes\"))\nprint(yate.start_form(\"generate_timing_data.py\"))\nprint(yate.para(\"Select an athlete from the list to work with:\"))\n\nfor each_athlete in athletes:\n    print(yate.radio_button_id(\"which_athlete\",each_athlete[0],each_athlete[1]))#注意这里增加了一个radio_button_id()函数。\nprint(yate.end_form(\"Select\"))\nprint(yate.include_footer({\"Home\":\"/index.html\"}))\n修改generate_timing_data代码：\nimport cgi\n\nimport athletemodel\nimport yate\n\n\nform_data = cgi.FieldStorage()\nathlete_name = form_data['which_athlete'].value\nathlete = athletemodel.get_athlete_from_id(athlete_id)\n\nprint(yate.start_response())\nprint(yate.include_header(\"NUAC's Timing DAta\"))\nprint(yate.header(\"Athlete:\"+athlete['name']+\",DOB:\"+athlete['DOB']+\".\"))\nprint(yate.para(\"THe top times for this athlete are:\"))\nprint(yate.u_list(athlete['top3']))\nprint(yate.para(\"The entire set of timing data is:\"+str(athlete['data'])+\"(duplicates removed).\"))\nprint(yate.include_footer({\"Home\":\"/index.html\",\"Select another athlete\":\"generate_list.py\"}))\n在yate中增加新的radio_button_id按钮：\ndef radio_button_id(rb_name, rb_value, rb_id):\n    return('<input type=\"radio\" name=\"'+ rb_name +'\"value=\"'+str(rb_id)+'\">' + rb_value + '<br/>')\n这样新的数据库就与第7章的web项目集成到一起了，通过书上的讲解理解应该不成问题，但因为我的数据库问题没法解决，所以在尝试新web应用时，得到了死亡空白，感觉这里也是有问题的，看来能通过后面的学习，再回来修改了（有同学发现解决方案希望留言探讨，感激不尽！）。\n第10章  利用google app Engine 开发web应用：\n需要翻墙，暂时不研究。\n第11章 总结\n结合书中最后的附录,总结一些我在这期间学到的一些小知识\n\n我开始用的是IDLE编写和调试代码，后来使用的是notepad++，vscode和pychram编写和调试这也是我调查了资料和亲自上手测试认为最适合两款软件。\n全局变量无法正常修改，除非增加语句'global xxxx '其中xxx为全局变量。\n匿名函数，生成器，定义异常，元类，正则表达式 GUI编程，全局解释器锁在后面的学习中如果有涉及，我会回来添加。\n关于这本书的评价，这是一部极好的python入门学习书籍，但要熟练的使用python不能仅限于此，在学习完这部书之后，我会继续学习其他python的书籍或者follow一些开源项目，使自己对着门语言更加熟悉，但请对我有些信心，掌握这门语言没有想象的那么难。这里贴出这本书的资源网站：http://python.itcarlow.ie/res... 如果需要关于这本书的源代码或者有任何问题都可以留言私信，欢迎探讨大家共同进步。\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}