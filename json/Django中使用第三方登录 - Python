{"title": "Django中使用第三方登录 - Python ", "index": "第三方登录,django,python", "content": "OAuth2.0是什么\n OAuth的英文全称是Open Authorization，它是一种开放授权协议。OAuth目前共有2个版本，2007年12月的1.0版（之后有一个修正版1.0a）和2010年4月的2.0版，1.0版本存在严重安全漏洞，而2.0版解决了该问题。OAuth简单说就是一种授权的协议，只要授权方和被授权方遵守这个协议去写代码提供服务，那双方就是实现了OAuth模式。\n\nOAuth2.0实现第三方登录的流程\n例如你想登录豆瓣去看看电影评论，但你丫的从来没注册过豆瓣账号，又不想新注册一个再使用豆瓣，怎么办呢？不用担心，豆瓣已经为你这种懒人做了准备，用你的qq号可以授权给豆瓣进行登录。流程如下：\n第一步：在豆瓣官网点击用qq登录\n当你点击用qq登录的小图标时，实际上是向豆瓣的服务器发起了一个 http://www.douban.com/leadToAuthorize 的请求，豆瓣服务器会响应一个重定向地址，指向qq授权登录。\n浏览器接到重定向地址 http://www.qq.com/authorize?callback=www.douban.com/callback ，再次访问。并注意到这次访问带了一个参数是callback，以便qq那边授权成功再次让浏览器发起这个callback请求。不然qq怎么知道你让我授权后要返回那个页面啊，每天让我授权的像豆瓣这样的网站这么多。\n第二步：跳转到qq登录页面输入用户名密码，然后点授权并登录\nqq的服务器接收到了豆瓣访问的authorize，在此例中所给出的回应是跳转到qq的登录页面，用户输入账号密码点击授权并登录按钮后，一定还会访问qq服务器中校验用户名密码的方法，若校验成功，该方法会响应浏览器一个重定向地址，并附上一个code（授权码）。由于豆瓣只关心像qq发起authorize请求后会返回一个code，并不关心qq是如何校验用户的，并且这个过程每个授权服务器可能会做些个性化的处理，只要最终的结果是返回给浏览器一个重定向并附上code即可。\n第三步：跳回到豆瓣页面，成功登录\n 这一步背后的过程其实是最繁琐的，但对于用户来说是完全感知不到的。用户在QQ登录页面点击授权登陆后，就直接跳转到豆瓣首页了，但其实经历了很多隐藏的过程。\n首先接上一步，QQ服务器在判断登录成功后，使页面重定向到之前豆瓣发来的callback并附上code授权码，即 callback=www.douban.com/callback 。\n页面接到重定向，发起 http://www.douban.com/callback 请求。\n豆瓣服务器收到请求后，做了两件再次与QQ沟通的事，即模拟浏览器发起了两次请求。\n一个是用拿到的code去换token，另一个就是用拿到的token换取用户信息。最后将用户信息储存起来，返回给浏览器其首页的视图。到此OAuth2.0授权结束。\n使用微博进行第三方登录\n\n进入微博开放平台申请应用。\n正常情况下，必须经过审核才可以让第三方登录，我们可以先用测试模式来完成。\n进入应用中的控制台记下App Key和App Secret。\n应用信息中的高级信息中设置授权回调页，测试的时候可以写本地ip，上线一定要写服务器的ip，取消授权回调页选项不填。测试信息中可以添加自己的微博账号用作测试用户。\n\n根据微博的接口写的微博登录的一个demo\n#第一步生成一个网页地址，访问后是微博第三方登录的页面，登录会返回一个code（授权码）\ndef get_auth_url():\n    \"\"\"\n        client_id   必填  string  申请应用时分配的App Key。\n        redirect_uri    必填  string  授权回调地址，站外应用需与设置的回调地址一致。\n    \"\"\"\n    weibo_auth_url = 'https://api.weibo.com/oauth2/authorize'\n    redirect_uri = \"http://127.0.0.1:8000/complete/weibo/\"\n    client_id = '29447*****'\n    auth_url = weibo_auth_url + \"?client_id={client_id}&redirect_uri={re_url}\".format(client_id=client_id,re_url=redirect_uri)                                                                 \n    print(auth_url)\n\n#第二步 拿着这个code（授权码）去获得access_token\n#第二步运行得到的结果\n#'{\"access_token\":\"***********c62892e8c6shqQsB\",\"remind_in\":\"157679999\",\"expires_in\":157679999,\"uid\":\"5020302235\",\"isRealName\":\"true\"}'\ndef get_access_token(code):\n    access_token_url = \"https://api.weibo.com/oauth2/access_token\"\n    import requests\n    re_dict = requests.post(access_token_url, data={\n        \"client_id\": \"29447*****\",\n        # App Secret\n        \"client_secret\": \"3500dfe8e580c20dfec9828*********\",\n        \"grant_type\": \"authorization_code\",\n        \"code\": code,\n        \"redirect_uri\": \"http://127.0.0.1:8000/complete/weibo/\",\n\n    })\n    pass\n\n\n# 第三步 拿到access_token后就可以获得这个用户的信息了\ndef get_user_info(access_token):\n    user_url = \"https://api.weibo.com/2/users/show.json\"\n    uid = \"5020302235\"\n    get_url = user_url+\"?access_token={at}&uid={uid}\".format(at=access_token,uid=uid)\n    print(get_url)\n\nif __name__ == '__main__':\n    # get_auth_url()\n    # get_access_token(code='cef2817996ed1c8f65cebbd69d6378a3')\n    get_user_info(access_token='**********2892e8c6shqQsB')\n用social_django第三方库来实现第三方登录\ngithub地址，上面有使用说明\nhttps://github.com/python-social-auth/social-app-django\n（1） 安装\npip install social-auth-app-django\n （2）INSTALL_APP中配置\n'social_django',\n（3）生成表\n只需要做migrate，因为migration的文件已经生成好了，数据库中多了五张表，存储第三方登录的信息。\n python manage.py migrate\n\n（4） 添加到AUTHENTICATION_BACKENDS中\n# settings.py\nAUTHENTICATION_BACKENDS = (\n    'social_core.backends.weibo.WeiboOAuth2',\n    'social_core.backends.qq.QQOAuth2',\n    'social_core.backends.weixin.WeixinOAuth2',\n    'django.contrib.auth.backends.ModelBackend',\n)\n（5）配置url\n# 第三方登录\n    path('', include('social_django.urls', namespace='social'))\n （6）settings里面context_processors\n对于template中的用法，向context_processors中加入下面两个\n 　'social_django.context_processors.backends',\n  'social_django.context_processors.login_redirect',\n（7）接口\n  在微博开放平台里面设置回调url，调试的时候设置成本地的就可以了，上线的时候改成服务器的ip地址\n\n （8）APP Secret和App key配置，settings里面\n# 第三方登录，里面的值是你的开放平台对应的值\nSOCIAL_AUTH_WEIBO_KEY = 'xxxxxxx'\nSOCIAL_AUTH_WEIBO_SECRET = 'xxxxxx'\n\nSOCIAL_AUTH_QQ_KEY = 'xxxxxxx'\nSOCIAL_AUTH_QQ_SECRET = 'xxxxxxx'\n\nSOCIAL_AUTH_WEIXIN_KEY = 'xxxxxxx'\nSOCIAL_AUTH_WEIXIN_SECRET = 'xxxxxxx'\n现在浏览器访问：http://127.0.0.1:8000/login/weibo,就可以登录了，我们还需要设置用户微博登录成功后跳转到首页\n#登录成功后跳转到首页\nSOCIAL_AUTH_LOGIN_REDIRECT_URL = '/index/'\n（9）修改源码\n登录成功跳到首页，发现还处于未登录状态，我们需要对源码做修改，将social_core拷贝到extra_apps下\nsocial_core/actions.py中100行左右\nreturn backend.strategy.redirect(url)\n修改为\n# 修改源码适配drf\n    response = backend.strategy.redirect(url)\n    payload = jwt_payload_handler(user)\n    response.set_cookie(\"name\",user.name if user.name else user.username, max_age=24*3600)\n    response.set_cookie(\"token\", jwt_encode_handler(payload), max_age=24*3600)\n    return response\n现在就登录后就正常了。qq和微信的登录，一样的操作，只要去开放平台注册应用，其它跟微博登录一样设置就可以了。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}