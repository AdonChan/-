{"title": "python大佬养成计划----Web框架(Flask) - python太阳花 ", "index": "html5,python", "content": "flask\nflask是一个Python编写的Web 微框架，让我们可以使用Python语言快速实现一个网站或Web服务。\n\n使用flask\n当你编写一个函数时，要想每个人都可以使用，需要用到flask来实现这个目标。\n\n导入falsk.Flask类\n实例化一个Flask对象\n绑定路由\n运行flask应用\n\n# 1. 导入Flask类；\nfrom flask import  Flask\n\n# 2. 实例化一个Flask对象；\n#     __name__是模块的名称或者包的名称\n#     作用: 根据这个参数确定flask应用的路径， 从而快速查找模板和html文件的默认路径；\n#     模块就是python文件; 包就是目录(跟普通目录多加一个__init__.py);\n#\napp = Flask(__name__)\n\n# 3-1.基本路由:通过路由绑定一个视图函数\n#   @app.route('/'): 告诉Flask哪个URL才能出发对应的函数， 又称为路由;\n#   对应定义了一个视图函数， 也就是返回给用户浏览器显示的内容;\n@app.route('/')\ndef index():\n    return  \"<h1>hello world</h1>\"\n\n@app.route('/login/')\ndef login():\n    return  \"login\"\n\n# 4. 运行Flask应用， 可以指定ip和端口；\n# '0.0.0.0' 所有的IP都可以访问到;\napp.run('0.0.0.0', 9000)\n\n\n路由及变量规则\n在flask框架中，路由表示用户请求的URL找出其对应的处理函数常见路由的规则\n\nurl的一部分可以标记为变量<变量名>\n\nflask中路由里面的变量常见类型:\n     int, string, float, path, uuid\n\n\n\nfrom flask import Flask, request\n\napp = Flask(__name__)\n@app.route('/<int:id>/comments/')\ndef comment1(id):\n    return \"Comment id: %s\" %(id)\n\n@app.route('/welcome/<string:user>/')\ndef welcome(user):\n    app.logger.debug('this is a debug')\n    app.logger.warning('this is a warn')\n    return user + \"用户，欢迎来到SheenStar的主页\"\n\n# 特殊的url地址: http://www.baidu.com/query?id=13&name=clotho\n@app.route('/query')\ndef query():\n    # 获取url地址里面key值对应的value值;\n    id = request.args.get('id')\n    name = request.args.get('name')\n    return \"id: %s, name: %s\" %(id, name)\napp.run()\n\n反向URL\n获取HTTP请求数据\n客户端通过URL访问服务端程序，会发送给服务端两类消息，一类是HTTP请求头，另一类是请求数据。\n1. 常见HTTP请求方法:\nGET: 1). 获取信息 2). 提交的信息会展示在url: http://www.wewtos.org/login?user=sheen&passwd=star\nPOST:1). 提交信息, 不在url里面展示, 有利于数据的安全性;\n\n2. 默认路由接受的请求方法为_____get____?\n如何指定接收多个HTTP请求方法?\n路由: @app.route('/login/', methods=['GET', 'POST'])\n视图函数: def login():\n\n3. 如何判断用户请求的HTTP方法?   request.method\n 如何获取用户POST请求提交的表单数据? request.form['user']\n \n4. 模板渲染(jinja2):\nwhy?    python中生成html不易修改与维护, 所以将html的内容独立到templates目录中;\nhow?\n1). 去当前项目目录下寻找templtes是否存在?再去判断templates目录下是否有login.html文件?\n2). 读取这个login.html文件的内容, 作为render_template的返回值;\n3). 最终返回给用户浏览器;\nrender_template('login.html')\n\n5. 重定向和错误?\nredirect\nreturn  render_template('login.html', message=\"用户名或者密码错误\")\n\n示例：登陆跳转\n#这里的index.html、login.html、404.html是需要自己提前写好的可访问网页\n#所有的模板需要放在templates目录下\nfrom flask import Flask, request, render_template, redirect, url_for, abort\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/login/', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        print(request.form)\n        # 1. 如何获取到用户提交的信息呢?\n        user = request.form['user']\n        passwd = request.form['passwd']\n\n        # 2. 判断用户名和密码是否正确\n        if user == 'root' and passwd =='sheen':\n            # 如果登陆成功, 跳转到主页;\n            return redirect(url_for('index'))\n        else:\n            # 如果登陆失败, 重新登陆;\n            return  render_template('login.html', message=\"用户名或者密码错误\")\n    else:\n        # 用户是GET请求, 返回登陆的html页面\n        # 1. 读取login.html文件的内容\n        # 2. 将读取的内容返回给用户界面\n        return render_template('login.html')\n\n# 404异常处理： 类似于捕获异常\n@app.errorhandler(404)\ndef not_found(e):\n    return  render_template('404.html')\n\n# 抛出异常\n@app.route('/user/<int:user_id>/')\ndef user(user_id):\n    if 0<int(user_id)<=100:\n        return  \"欢迎访问: %s\" %(user_id)\n    else:\n        abort(404)\n\napp.run()\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}