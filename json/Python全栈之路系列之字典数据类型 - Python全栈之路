{"title": "Python全栈之路系列之字典数据类型 - Python全栈之路 ", "index": "python2.7,python3.x,python", "content": "字典(dict)在基本的数据类型中使用频率也是相当高的，而且它的访问方式是通过键来获取到对应的值，当然存储的方式也是键值对了，属于可变类型。\n创建字典的两种方式\n第一种\n>>> dic = {\"k1\":\"123\",\"k2\":\"456\"}\n>>> dic\n{'k1': '123', 'k2': '456'}\n>>> type(dic)\n<class 'dict'>\n第二种\n>>> dic = dict({\"k1\":\"123\",\"k2\":\"456\"})\n>>> dic\n{'k1': '123', 'k2': '456'}\n>>> type(dic)\n<class 'dict'>\n在创建字典的时候，__init__初始化的时候还可以接受一个可迭代的变量作为值\n>>> li = [\"a\",\"b\",\"c\"]\n>>> dic = dict(enumerate(li))\n>>> dic\n{0: 'a', 1: 'b', 2: 'c'}\n默认dict再添加元素的时候会把li列表中的元素for循环一边，添加的时候列表中的内容是字典的值，而键默认是没有的，可以通过enumerate方法给他加一个序列，也就是键。\n与其变量不同的是，字典的键不仅仅支持字符串，而且还支持其他数据类型，譬如：\n# 数字\n>>> D = {1:3}\n>>> D[1]\n3\n# 元组\n>>> D = {(1,2,3):3}\n>>> D[(1,2,3)]\n3\n字典解析\n>>> D = {x: x*2 for x in range(10)}\n>>> D\n{0: 0, 1: 2, 2: 4, 3: 6, 4: 8, 5: 10, 6: 12, 7: 14, 8: 16, 9: 18}\n# 可以使用zip\n>>> D = {k:v for (k, v) in zip(['a','b','c'],[1,2,3])}\n>>> D\n{'a': 1, 'c': 3, 'b': 2}\n字典所提供的常用方法\n删除字典中的所有元素\nclear(self):\n>>> person = dict({\"name\": \"ansheng\", 'age': 18})\n>>> person\n{'age': 18, 'name': 'ansheng'}\n>>> person.clear()\n# 清空字典的内容之后字典会变成一个空字典\n>>> person\n{}\n返回一个字典的浅复制\ncopy(self):\n>>> person = dict({\"name\": \"ansheng\", 'age': 18})\n>>> person.copy()\n{'age': 18, 'name': 'ansheng'}\n创建一个新字典，以序列seq中元素做字典的键，value为字典所有键对应的初始值\nfromkeys(S, v=None):\n\n\n属性\n描述\n\n\n\nS\n字典键值列表\n\n\nv\n可选参数, 设置键序列（seq）的值\n\n\n\n>>> seq = ('name', 'age', 'sex')\n>>> dict = dict.fromkeys(seq)\n>>> dict\n{'age': None, 'name': None, 'sex': None}\nfromkeys方法就是把一个字典的key更新到另外一个字典中，默认的值可以设置\n>>> dic={\"k1\":123,\"k2\":456,\"k4\":111}\n>>> dic\n{'k1': 123, 'k4': 111, 'k2': 456}\n# 创建一个新的字典，默认值是`123`\n>>> dic.fromkeys([\"k1\",\"k2\",\"k3\"],\"123\")\n{'k1': '123', 'k3': '123', 'k2': '123'}\n返回指定键的值，如果值不在字典中返回默认值\nget(self, k, d=None):\n\n\n属性\n描述\n\n\n\nkey\n字典中要查找的键\n\n\ndefault\n如果指定键的值不存在时，返回该默认值值\n\n\n\n>>> person = {\"name\": \"ansheng\", 'age': 18}\n>>> person.get(\"name\")\n'ansheng'\n成员运算符in可以判断键是否存在于字典中，如果键在字典dict里返回true，否则返回false\n>>> person = {\"name\": \"mr\", 'age': 18}\n>>> 'name' in person\nTrue\n>>> 'aname' in person\nFalse\n以列表返回可遍历的(键, 值)元组数组\nitems(self):\n>>> person = {\"name\": \"mr.wu\", 'age': 18}\n# 以元组的方式输出出来\n>>> person.items()\n[('age', 18), ('name', 'mr.wu')]\n以迭代器的方式返回字典的键和值\niteritems(self):\n>>> person.iteritems()\n<dictionary-itemiterator object at 0x000000000297FEF8>\n迭代key\niterkeys(self):\n>>> person = {\"name\": \"ansheng\", 'age': 18}\n>>> person.iterkeys()\n<dictionary-keyiterator object at 0x000000000297FF98>\n迭代value\nitervalues(self):\n>>> person = {\"name\": \"ansheng\", 'age': 18}\n>>> person.itervalues()\n<dictionary-valueiterator object at 0x000000000297FF48>\n以列表的形式返回一个字典所有的键\nkeys(self):\n>>> person = {\"name\": \"ansheng\", 'age': 18}\n>>> person.keys()\n['age', 'name']\n删除指定给定键所对应的值，返回这个值并从字典中把它移除\npop(self, k, d=None):\n>>> person = {\"name\": \"ansheng\", 'age': 18}\n>>> person\n{'age': 18, 'name': 'ansheng'}\n# 返回删除键对应的值\n>>> person.pop(\"age\")\n18\n>>> person\n{'name': 'ansheng'}\n随机返回并删除字典中的一对键和值，因为字典是无序的，没有所谓的\"最后一项\"或是其它顺序。\npopitem(self):\n>>> person = {\"name\": \"ansheng\", 'age': 18}\n# 随即删除并显示所删除的键和值\n>>> person.popitem()\n('age', 18)\n>>> person\n{'name': 'ansheng'}\n如果key不存在，则创建，如果存在，则返回已存在的值且不修改\nsetdefault(self, k, d=None):\n\n\n属性\n描述\n\n\n\nkey\n查找的键值\n\n\ndefault\n键不存在时，设置的默认键值\n\n\n\n>>> person = {\"name\": \"ansheng\", 'age': 18}\n# 如果字典中有这个键，那么就输出这个键的值\n>>> person.setdefault(\"name\")\n'ansheng'\n# 如果没有则不输出，但是会创建一个键，值为默认的'None'，值是可以指定的\n>>> person.setdefault(\"sex\")\n>>> person\n{'age': 18, 'name': 'ansheng', 'sex': None}\n\n把字典dic2的键/值对更新到dic1里\nupdate(self, E=None, **F):\n>>> dic1 = {\"name\":\"ansheng\"}\n>>> dic2 = {\"age\":\"18\"}\n>>> dic1\n{'name': 'ansheng'}\n>>> dic2\n{'age': '18'}\n>>> dic1.update(dic2)\n>>> dic1\n{'age': '18', 'name': 'ansheng'}\n显示字典中所有的值\nvalues(self):\n>>> person = {\"name\": \"ansheng\", 'age': 18}\n>>> person.values()\n[18, 'ansheng']\n所有项，只是将内容保存至view对象中\nviewitems(self):\n>>> person = {\"name\": \"ansheng\", 'age': 18}\n>>> person.viewitems()\ndict_items([('age', 18), ('name', 'ansheng')])\nviewkeys(self):\n>>> person = {\"name\": \"ansheng\", 'age': 18}\n>>> person.viewkeys()\ndict_keys(['age', 'name'])\nviewvalues(self):\n>>> person = {\"name\": \"ansheng\", 'age': 18}\n>>> person.viewvalues()\ndict_values([18, 'ansheng'])\n对字典的键进行排序，其原理就是把key转换为列表，然后使用sort对列表排序，最后根据列表循环字典中的值\n>>> D = {'a':1,'b':2,'c':3}\n>>> D\n{'a': 1, 'c': 3, 'b': 2}\n>>> Ks = list(D.keys())\n>>> Ks\n['a', 'c', 'b']\n>>> Ks.sort()\n>>> Ks\n['a', 'b', 'c']\n>>> for k in Ks: print(k, D[k])\n... \na 1\nb 2\nc 3\n\n原文链接\nPython全栈之路系列文章\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "2"}