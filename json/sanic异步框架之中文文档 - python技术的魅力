{"title": "sanic异步框架之中文文档 - python技术的魅力 ", "index": "高并发,异步编程,python,async,web框架", "content": "\ntypora-copy-images-to: ipic\n\n[TOC]\n快速开始\n在安装Sanic之前，让我们一起来看看Python在支持异步的过程中，都经历了哪些比较重大的更新。\n首先是Python3.4版本引入了asyncio，这让Python有了支持异步IO的标准库，而后3.5版本又提供了两个新的关键字async/await，目的是为了更好地标识异步IO，让异步编程看起来更加友好，最后3.6版本更进一步，推出了稳定版的asyncio，从这一系列的更新可以看出，Python社区正迈着坚定且稳重的步伐向异步编程靠近。\n安装\nSanic是一个支持 async/await 语法的异步无阻塞框架，这意味着我们可以依靠其处理异步请求的新特性来提升服务性能，如果你有Flask框架的使用经验，那么你可以迅速地使用Sanic来构建出心中想要的应用，并且性能会提升不少，我将同一服务分别用Flask和Sanic编写，再将压测的结果进行对比，发现Sanic编写的服务大概是Falsk的1.5倍。\n仅仅是Sanic的异步特性就让它的速度得到这么大的提升么？是的，但这个答案并不标准，更为关键的是Sanic使用了uvloop作为asyncio的事件循环，uvloop由Cython编写，它的出现让asyncio更快，快到什么程度？这篇文章中有介绍，其中提出速度至少比 nodejs、gevent 和其他Python异步框架要快两倍，并且性能接近于用Go编写的程序，顺便一提，Sanic的作者就是受这篇文章影响，这才有了Sanic。\n怎么样？有没有激起你学习Sanic的兴趣，如果有，就让我们一起开始学习吧，在开始之前，你只需要有一台安装了Python的电脑即可。\n说明：由于Windows下暂不支持安装uvloop，故在此建议使用Mac或Linux\n虚拟环境\n程序世界一部分是对应着现实的，在生活中，我们会在不同的环境完成不同的任务，比如在厨房做饭、卧室休息，分工极其明确。\n其实用Python编写应用服务也是如此，它们同样希望应用服务与开发环境是一对一的关系，这样做的好处在于，每个独立的环境都可以简洁高效地管理自身对应服务所依赖的第三方库，如若不然，各个服务都安排在同一环境，这样不仅会造成管理上的麻烦，还会使第三方库之间产生冲突。\n通过上面的叙述，我们是不是可以得出这样一个核心观点：应该在不同的环境下做不同的事 ，以此类推，写项目的时候，我们也需要为每个不同的项目构建一个无干扰的的环境，发散思维，总结一下：\n不同的项目，需要为其构建不同的虚拟环境，以免互相干扰\n构建虚拟环境的工具很多，如下：\n\nvirtualenv\npyenv\nanaconda\nvenv\n\n…...\n以上三个工具都可以快速地帮助我们构建当前需要的Python环境，如果你之前没有使用过，可直接点开链接进行下载，如果你正在使用其它的环境管理工具，也不要紧，因为不论你使用哪一种方式，我们最终目的都是针对一个新项目构建一个新的环境。\n安装配置好之后，简单看看官方提供的使用方法，就可以开始了，比如我本机使用的是venv(python3.5以后官方推荐使用这个venv来管理虚拟环境)，安装完成后可以很方便地创建一个虚拟环境，比如这里使用Python3.6来作为本书项目的默认环境：\ncd ~/\n# 新建一个python3.6环境\npython3 -m venv pyenv\n# 安装好之后 输入下面命令进入名为python36的环境\ncd pyenv/\nsource bin/activate\n# 查看版本\npython -V\n若安装速度比较慢，可以考虑换国内源，比如 国内镜像 ，至于为什么选择python3.6作为默认环境，一是因为Sanic只支持Python3.5+，二则是我们构建的项目最终是要在生产环境下运行的，所以建议最好安装Python3.6下稳定版本的asyncio。\n安装Sanic\nPython安装第三方模块都是利用pip工具进行安装，这里也不例外，首先进入上一步我们新建的 python3.6 虚拟环境，然后安装：\n# 安装Sanic，请先使用 source activate python36 进入虚拟环境\npip install sanic\n# 如果不想使用uvloop和ujson 可以这样安装\nSANIC_NO_UVLOOP=true SANIC_NO_UJSON=true pip install sanic\n通过上面的命令，你就可以在 python3.6 虚拟环境中安装Sanic以及其依赖的第三方库了，若想查看Sanic是否已经正确安装，可以进入终端下对应的虚拟环境，启动Python解释器，导入Sanic库：\npython\n>>> \n>>> import sanic\n如果没有出现错误，就说明你已经正确地安装了Sanic，请继续阅读下一节，了解下如何利用Sanic来构建一个Web项目吧。\n开始\n我们将正式使用Sanic来构建一个web项目，让我们踏出第一步，利用Sanic来编写一个返回Hello World!字符串的服务程序。\n新建一个文件夹sanicweb：\n$ mkdir sanicweb\n$ cd sanicweb/\n$ pwd\n/Users/junxi/pyenv/sanicweb\n创建一个sanic例子，保存为 main.py :\nfrom sanic import Sanic\nfrom sanic.response import text\n\napp = Sanic()\n\n\n@app.route(\"/\")\nasync def index(request):\n    return text('Hello World!')\n\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=9000)\n运行main.py，然后访问地址http://127.0.0.1:9000/\n$ curl -X GET http://127.0.0.1:9000/\nHello World!\n这样我们就完成了第一个sanic例子。\n接下来，你将逐渐地了解到Sanic的一些基本用法，如路由的构建、接受请求数据以及返回响应的内容等。\n路由\n路由允许用户为不同的URL端点指定处理程序函数。\n实例:\nfrom sanic.response import json\n@app.route(\"/\")\nasync def index(request):\n    return json({ \"hello\": \"world\" })\nurl http://server.url/ 被访问(服务器的基本url)，最终/被路由器匹配到处理程序函数，测试，然后返回一个JSON对象。\n必须使用async def语法来定义Sanic处理函数，因为它们是异步函数。\n请求参数\n要指定一个参数，可以用像这样的角引号<PARAM>包围它。请求参数将作为关键字参数传递给路线处理程序函数。\n实例：\n@app.router('/tag/<tag>')\nasync def tag_handler(request, tag):\n    return text('Tag - {}'.format(tag))\n重启服务，输入地址http://127.0.0.1:9000/tag/python进行访问\n$ curl -X GET http://127.0.0.1:9000/tag/python\nTag - python\n为参数指定类型，在参数名后面添加（：类型）。如果参数不匹配指定的类型，Sanic将抛出一个不存在的异常，导致一个404页面\n@app.route('/number/<integer_arg:int>')\nasync def integer_handler(request, integer_arg):\n    return text('Integer - {}'.format(integer_arg))\n\n\n@app.route('/number/<number_arg:number>')\nasync def number_handler(request, number_arg):\n    return text('Number - {}'.format(number_arg))\n\n\n@app.route('/person/<name:[A-z]+>')\nasync def person_handler(request, name):\n    return text('Person - {}'.format(name))\n\n\n@app.route('/folder/<folder_id:[A-z0-9]{0,4}>')\nasync def folder_handler(request, folder_id):\n    return text('Folder - {}'.format(folder_id))\n测试结果如下：\n$ curl -X GET http://127.0.0.1:9000/number/1\nInteger - 1\n$ curl -X GET http://127.0.0.1:9000/number/asds\nError: Requested URL /number/asds not found\n$ curl -X GET http://127.0.0.1:9000/number/12.0\nNumber - 12.0\n$ curl -X GET http://127.0.0.1:9000/person/junxi\nPerson - junxi\n$ curl -X GET http://127.0.0.1:9000/person/123\nError: Requested URL /person/123 not found\n$ curl -X GET http://127.0.0.1:9000/folder/img\nFolder - img\n$ curl -X GET http://127.0.0.1:9000/folder/img1\nFolder - img1\n$ curl -X GET http://127.0.0.1:9000/folder/images\nError: Requested URL /folder/images not found\n$ curl -X GET http://127.0.0.1:9000/folder/2018\nFolder - 2018\n请求类型\n路由装饰器接受一个可选的参数，方法，它允许处理程序函数与列表中的任何HTTP方法一起工作。\n实例1:\n@app.route('/post1', methods=['POST'])\nasync def post_handler(request):\n    return text('POST request - {}'.format(request.json))\n\n\n@app.route('/get1', methods=['GET'])\nasync def get_handler(request):\n    return text('GET request - {}'.format(request.args))\n实例2：\n@app.post('/post2')\nasync def post_handler(request):\n    return text('POST request - {}'.format(request.json))\n\n\n@app.get('/get2')\nasync def get_handler(request):\n    return text('GET request - {}'.format(request.args))\n测试结果：\n$ curl -X GET http://127.0.0.1:9000/get1?name=junxi\nGET request - {'name': ['junxi']}\n$ curl -X GET http://127.0.0.1:9000/get2?name=junxi\nGET request - {'name': ['junxi']}\n$ curl -H \"Content-type: application/json\" -X POST -d '{\"name\":\"junxi\", \"gender\":\"male\"}' http://127.0.0.1:9000/post1 \nPOST request - {'name': 'junxi', 'gender': 'male'}\n$ curl -H \"Content-type: application/json\" -X POST -d '{\"name\":\"junxi\", \"gender\":\"male\"}' http://127.0.0.1:9000/post2\nPOST request - {'name': 'junxi', 'gender': 'male'}\n增加路由\n实例：\nasync def handler1(request):\n    return text('ok')\n\n\nasync def handler2(request, name):\n    return text('Folder - {}'.format(name))\n\n\nasync def personal_handler2(request, name):\n    return text('Person - {}'.format(name))\n\n\napp.add_route(handler1, '/test1')\napp.add_route(handler2, '/folder2/<name>')\napp.add_route(personal_handler2, '/personal2/<name:[A-z]>', methods=['GET'])\n测试结果：\n$ curl -X GET http://127.0.0.1:9000/test1 \nok\n$ curl -X GET http://127.0.0.1:9000/folder2/aaa\nFolder - aaa\n$ curl -X GET http://127.0.0.1:9000/personal2/A\nPerson - A\n$ curl -X GET http://127.0.0.1:9000/personal2/a\nPerson - a\nurl_for\nSanic提供了一个urlfor方法，根据处理程序方法名生成url。避免硬编码url路径到您的应用程序\n实例：\n@app.router(\"/\")\nasync def index(request):\n    url = app.url_for('post_handler', post_id=5)\n    return redirect(url)\n\n\n@app.route('posts/<post_id>')\nasync def post_handler(request, post_id):\n    return text('Post - {}'.format(post_id))\n给url_for的关键字参数不是请求参数，它将包含在URL的查询字符串中。例如:\nurl = app.url_for('post_handler', post_id=5, arg_one='one', arg_two='two')\n# /posts/5?arg_one=one&arg_two=two\n所有有效的参数必须传递给url以便构建一个URL。如果没有提供一个参数，或者一个参数与指定的类型不匹配，就会抛出一个URLBuildError\n可以将多值参数传递给url\nurl = app.url_for('post_handler', post_id=5, arg_one=['one', 'two'])\n# /posts/5?arg_one=one&arg_one=two\n经过测试访问/我们会发现，url跳转到了/posts/5 ，并打印出来Post - 5 的结果。\nredirect是从sanic.response导入的方法，用于处理url的重定向。\n网络套接字路由\nWebSocket routes\nwebsocket可以通过装饰路由实现\n实例：\n@app.websocket('/feed')\nasync def feed(request, ws):\n    while True:\n        data = 'hello!'\n        print('Sending：' + data)\n        await ws.send(data)\n        data = await ws.recv()\n        print('Received：', data)\n另外，添加websocket路由方法可以代替装饰器\nasync def feed(request, ws):\n    pass\napp.add_websocket_route(my_websocket_handler, '/feed')\n请求\nrequest\n常用类型\n当一个端点收到一个HTTP请求时，路由功能被传递给一个 Request对象。\n以下变量可作为Request对象的属性访问：\n\njson (any) - JSON body\nfrom sanic.response import json\n\n@app.route(\"/json\")\ndef post_json(request):\n    return json({ \"received\": True, \"message\": request.json })\n\nargs（dict） -  查询字符串变量。查询字符串是类似于URL的部分?key1=value1&key2=value2。如果该URL被解析，则args字典将如下所示：{'key1': ['value1'], 'key2': ['value2']}。请求的query_string变量保存未解析的字符串值。\nfrom sanic.response import json\n\n@app.route(\"/query_string\")\ndef query_string(request):\n    return json({ \"parsed\": True, \"args\": request.args, \"url\": request.url, \"query_string\": request.query_string })\n\n\nraw_args（dict） -  在许多情况下，您需要访问压缩程度较低的字典中的url参数。对于之前的同一个URL ?key1=value1&key2=value2， raw_args字典看起来就像：{'key1': 'value1', 'key2': 'value2'}。​\n\n\nfiles（dictionary of File objects） -  具有名称，正文和类型的文件列表\n\nfrom sanic.response import json\n\n@app.route(\"/files\")\ndef post_json(request):\n    test_file = request.files.get('test')\n\n    file_parameters = {\n        'body': test_file.body,\n        'name': test_file.name,\n        'type': test_file.type,\n    }\n\n    return json({ \"received\": True, \"file_names\": request.files.keys(), \"test_file_parameters\": file_parameters })\n\nform （dict） -  post表单变量。\nfrom sanic.response import json\n\n@app.route(\"/form\")\ndef post_json(request):\n    return json({ \"received\": True, \"form_data\": request.form, \"test\": request.form.get('test') })\n\nbody（bytes） -  发送原始主体。无论内容类型如何，该属性都允许检索请求的原始数据。\nfrom sanic.response import text\n\n@app.route(\"/users\", methods=[\"POST\",])\ndef create_user(request):\n    return text(\"You are trying to create a user with the following POST: %s\" % request.body)\n\n\nheaders （dict） -  包含请求标头的不区分大小写的字典。\n\nip （str） -  请求者的IP地址。\n\nport （str） -  请求者的端口地址。\n\nsocket （tuple） -  请求者的（IP，端口）。\n\napp -  对处理此请求的Sanic应用程序对象的引用。当模块内部的蓝图或其他处理程序无法访问全局app对象时，这非常有用。\nfrom sanic.response import json\nfrom sanic import Blueprint\n\nbp = Blueprint('my_blueprint')\n\n@bp.route('/')\nasync def bp_root(request):\n    if request.app.config['DEBUG']:\n        return json({'status': 'debug'})\n    else:\n        return json({'status': 'production'})\n​\n\n\nurl：请求的完整URL，即： http://localhost:8000/posts/1/?foo=bar\n\n\nscheme：与请求关联的URL方案：http或https\n\n\nhost：与请求关联的主机： localhost:8080\n\n\npath：请求的路径： /posts/1/\n\n\nquery_string：请求的查询字符串：foo=bar或一个空白字符串''\n\n\nuri_template：匹配路由处理程序的模板： /posts/<id>/\n\n\ntoken：授权标头(Authorization)的值： Basic YWRtaW46YWRtaW4=\n\n\n使用get和getlist访问数据\n返回字典的请求属性实际上会返回一个dict被调用的子类 RequestParameters。使用这个对象的关键区别在于get和getlist方法之间的区别。\n\n\nget(key, default=None)按照正常操作，除了当给定键的值是列表时，只返回第一个项目。\n\ngetlist(key, default=None)正常操作，返回整个列表。\n\n响应\nresponse\ntext\nfrom sanic import response\n\n@app.route('/text')\ndef handle_request(request):\n    return response.text('Hello world!')\nHTML\nfrom sanic import response\n\n@app.route('/html')\ndef handle_request(request):\n    return response.html('<p>Hello world!</p>')\nJSON\nfrom sanic import response\n\n@app.route('/json')\ndef handle_request(request):\n    return response.json({'message': 'Hello world!'})\nFile\nfrom sanic import response\n\n@app.route('/file')\nasync def handle_request(request):\n    return await response.file('/srv/www/whatever.png')\nStreaming\n流媒体\nfrom sanic import response\n\n@app.route(\"/streaming\")\nasync def index(request):\n    async def streaming_fn(response):\n        response.write('foo')\n        response.write('bar')\n    return response.stream(streaming_fn, content_type='text/plain')\nFile Streaming\n对于大文件，文件和流的组合\nfrom sanic import response\n\n@app.route('/big_file.png')\nasync def handle_request(request):\n    return await response.file_stream('/srv/www/whatever.png')\nRedirect\nfrom sanic import response\n\n@app.route('/redirect')\ndef handle_request(request):\n    return response.redirect('/json')\nRaw\n没有进行编码的响应\nfrom sanic import response\n\n@app.route('/raw')\ndef handle_request(request):\n    return response.raw('raw data')\nModify headers or status\n要修改头部或状态代码，将头部或状态参数传递给这些函数\nfrom sanic import response\n\n@app.route('/json')\ndef handle_request(request):\n    return response.json(\n        {'message': 'Hello world!'},\n        headers={'X-Served-By': 'sanic'},\n        status=200\n    )\n静态文件\nstatic_files\n静态文件和目录，比如一个图像文件，在Sanic注册时使用。该方法使用一个端点URL和一个文件名。指定的文件将通过指定的端点访问。\nfrom sanic import Sanic\n\napp = Sanic(__name__)\n# Serves files from the static folder to the URL /static\napp.static('/static', './static')\n# Serves the file /home/ubuntu/test.png when the URL /the_best.png\n# is requested\napp.static('/the_best.png', '/home/ubuntu/test.png')\n\napp.run(host=\"0.0.0.0\", port=8000)\nNote：目前，您不能使用url构建一个静态文件的URL\n模版\nhtml templates编写\n编写web服务，自然会涉及到html，sanic自带有html函数，但这并不能满足有些需求，故引入jinja2迫在眉睫。使用方法也很简单：\n# novels_blueprint.py片段\nfrom sanic import Blueprint\nfrom jinja2 import Environment, PackageLoader, select_autoescape\n\n# 初始化blueprint并定义静态文件夹路径\nbp = Blueprint('novels_blueprint')\nbp.static('/static', './static/novels')\n\n# jinjia2 config\nenv = Environment(\n    loader=PackageLoader('views.novels_blueprint', '../templates/novels'),\n    autoescape=select_autoescape(['html', 'xml', 'tpl']))\n\ndef template(tpl, **kwargs):\n    template = env.get_template(tpl)\n    return html(template.render(kwargs))\n    \n@bp.route(\"/\")\nasync def index(request):\n    return template('index.html', title='index')\n这样，就实现了jinja2 模版的引入。\n异常\nExceptions\n抛出异常\n要抛出异常，只需从sanic异常模块中提出相应的异常。\nfrom sanic.exceptions import ServerError\n@app.route('/killme')\ndef i_am_ready_to_die(request):\n    raise ServerError(\"Something bad happened\", status_code=500)\n也可以自定义状态码\nfrom sanic.exceptions import abort\nfrom sanic.response import text\n@app.route('/youshallnotpass')\ndef no_no(request):\n        abort(401)\n        # this won't happen\n        text(\"OK\")\n处理异常\nHandling exceptions\n装饰器一个异常列表作为参数来处理。你可以通过SanicException来捕获它们！装饰异常处理函数必须将请求和异常对象作为参数。\nfrom sanic.response import text\nfrom sanic.exceptions import NotFound\n\n@app.exception(NotFound)\ndef ignore_404s(request, exception):\n    return text(\"Yep, I totally found the page: {}\".format(request.url))\n\n@app.exception(NotFound)\ndef handle_404_redirect(request, exception):\n    uri = app.url_for('index')\n    return redirect(uri)\n有用的异常\nUseful exceptions\n常用\n\nNotFound:在没有找到合适的请求路径时调用\nServerError:当服务器内部出现问题时调用。如果在用户代码中出现异常，通常会出现这种情况。\n\n中间件和监听\nMiddleware And Listeners\n中间件\nMiddleware\n有两种类型的中间件: 请求和响应。两者都是使用@app声明的。中间件装饰器，装饰器的参数是一个代表其类型的字符串:“请求”或“响应”。响应中间件接收请求和响应作为参数。\n最简单的中间件根本不修改请求或响应\n@app.middleware('request')\nasync def print_on_request(request):\n    print(\"I print when a request is received by the server\")\n    \n@app.middleware('response')\nasync def print_on_response(request, response):\n    print(\"I print when a response is returned by the server\")\n修改请求或响应\n中间件可以修改它所提供的请求或响应参数，只要它不返回它\napp = Sanic(__name__)\n\n@app.middleware('response')\nasync def custom_banner(request, response):\n    response.headers[\"Server\"] = \"Fake-Server\"\n    \n@app.middleware('response')\nasync def prevent_xss(request, response):\n    response.headers[\"x-xss-protection\"] = \"1; mode=block\"\n    \napp.run(host=\"0.0.0.0\", port=8000)\n上述代码将按顺序应用这两个中间件。首先，中间件custombanner将把HTTP响应头服务器更改为假服务器，而第二个中间件防止XSS将添加HTTP头来防止跨站点脚本攻击(XSS)攻击。这两个函数是在用户函数返回响应之后调用的。\n监听者\nListeners\n如果想在服务器启动或关闭时执行启动/分解代码，可以使用以下侦听器:\n\nbefore_server_start\nafter_server_start\nbefore_server_stop\nafter_server_stop\n\n这些监听器在函数中实现为修饰符，它们接受应用程序对象和asyncio循环\n@app.listener('before_server_start')\nasync def setup_db(app, loop):\n    app.db = await db_setup()\n    \n@app.listener('after_server_start')\nasync def notify_server_started(app, loop):\n    print('Server successfully started!')\n    \n@app.listener('before_server_stop')\nasync def notify_server_stopping(app, loop):\n    print('Server shutting down!')\n    \n@app.listener('after_server_stop')\nasync def close_db(app, loop):\n    await app.db.close()\n如果你想在循环开始后运行一个后台任务，那么Sanic就提供了addtask方法来轻松地完成这一任务。\nasync def notify_server_started_after_five_seconds():\n    await asyncio.sleep(5)\n    print('Server successfully started!')\n    \napp.add_task(notify_server_started_after_five_seconds())\n蓝图\nBlueprints\n蓝图是可以用于应用程序中的子路由的对象。除了向应用程序实例添加路由，蓝图还定义了类似的添加路由的方法，然后以灵活的可插入的方式在应用程序中注册。\nsimple Blueprint\n假设将该文件保存为myblueprint。py，稍后可以导入到您的主应用程序中。\nfrom sanic.response import json\nfrom sanic import Blueprint\n\nbp = Blueprint('my_blueprint')\n\n@bp.route('/')\nasync def bp_root(request):\n    return json({'my': 'blueprint'})\n注册蓝图\nregistering blueprints\n蓝图必须在应用程序中注册\nfrom sanic import Sanic\nfrom my_blueprint import bp\n\napp = Sanic(__name__)\napp.blueprint(bp)\n\napp.run(host='0.0.0.0', port=8000, debug=True)\n使用蓝图\nUse_blueprint\n网络套接字路由\nWebSocket routes\nWebSocket处理程序可以注册,使用@bp.websocket装饰或bp.add_websocket_route方法\n中间件\nMiddleware\n使用蓝图还可以在全局内注册中间件。\n@bp.middleware\nasync def print_on_request(request):\n    print(\"I am a spy\")\n    \n@bp.middleware('request')\nasync def halt_request(request):\n    return text('I halted the request')\n\n@bp.middleware('response')\nasync def halt_response(request, response):\n    return text('I halted the response')\n异常\nException\n异常情况可以用于全局的蓝图\n@bp.exception(NotFound)\ndef ignore_404s(request, exception):\n    return text(\"Yep, I totally found the page: {}\".format(request.url))\n静态文件\nStatic files\n静态文件可以添加前缀\nbp.static('/folder/to/serve', '/web/path')\nStart and stop\n蓝图可以在服务器的启动和停止过程中运行函数。如果在多处理器模式下运行(超过1个worker)，这些都是在workers fork之后触发的。\n\nbefore_server_start:在服务器开始接受连接之前执行\nafter_server_start:在服务器开始接受连接后执行\nbefore_server_stop:在服务器停止接受连接之前执行\nafter_server_stop:在服务器停止后执行，所有请求都完成了\n\nbp = Blueprint('my_blueprint')\n\n@bp.listener('before_server_start')\nasync def setup_connection(app, loop):\n    global database\n    database = mysql.connect(host='127.0.0.1'...)\n    \n@bp.listener('after_server_stop')\nasync def close_connection(app, loop):\n    await database.close()\n用例：API版本控制\nUse-case: API versioning\n蓝图对于API版本控制是非常有用的，其中一个蓝图可能指向/v1/<route>，另一个指向/v2/<route>。\n当一个蓝图被初始化时，它可以选择一个可选的url_prefix参数，这个参数将被预先定义到蓝图中定义的所有路由。该特性可用于实现我们的API版本控制方案\n# blueprints.py\nfrom sanic.response import text\nfrom sanic import Blueprint\n\nblueprint_v1 = Blueprint('v1', url_prefix='/v1')\nblueprint_v2 = Blueprint('v2', url_prefix='/v2')\n\n@blueprint_v1.route('/')\nasync def api_v1_root(request):\n    return text('Welcome to version 1 of our documentation')\n\n@blueprint_v2.route('/')\nasync def api_v2_root(request):\n    return text('Welcome to version 2 of our documentation')\n当我们在应用程序上注册我们的蓝图时，路径/v1和/v2将指向单个的蓝图，它允许为每个API版本创建子站点。\n# main.py\nfrom sanic import Sanic\nfrom blueprints import blueprint_v1, blueprint_v2\n\napp = Sanic(__name__)\napp.blueprint(blueprint_v1, url_prefix='/v1')\napp.blueprint(blueprint_v2, url_prefix='/v2')\n\napp.run(host='0.0.0.0', port=8000, debug=True)\n用url_for构建url\n如果希望在blueprint内部路由生成一个URL，记住，端点名称采用格式<blueprint_name>.<handler_name>\n@blueprint_v1.route('/')\nasync def root(request):\n    url = app.url_for('v1.post_handler', post_id=5) # --> '/v1/post/5'\n    # url = request.app.url_for('v1.post_handler', post_id=5) # --> '/v1/post/5'\n    return redirect(url)\n\n@blueprint_v1.route('/post/<post_id>')\nasync def post_handler(request, post_id):\n    return text('Post {} in Blueprint V1'.format(post_id))\nNote: 当app和blueprint不在同一个模块内记得加上request\n例如：url = request.app.url_for('v1.post_handler', post_id=5) # --> '/v1/post/5'\n配置\nConfiguration\n任何一个相当复杂的应用程序都需要配置，而不是在实际代码中进行。对于不同的环境或安装，设置可能是不同的。\n基本配置\nSanic在应用程序对象的配置属性中保持配置。配置对象仅仅是一个可以使用点符号或字典来修改的对象。\napp = Sanic('myapp')\napp.config.DB_NAME = 'appdb'\napp.config.DB_USER = 'appuser'\n因为配置对象实际上是一个字典，所以可以使用它的update方法来一次设置几个值:\ndb_settings = {\n    'DB_HOST': 'localhost',\n    'DB_NAME': 'appdb',\n    'DB_USER': 'appuser'\n}\napp.config.update(db_settings)\n一般来说，该约定只具有大写的配置参数。下面描述的加载配置的方法只会查找这些大写的参数。\n载入配置\n如何加载配置有几种方法。\n从环境变量\n使用SANIC_前缀定义的任何变量都将应用于sanic config。例如，设置SANIC_REQUEST_TIMEOUT将由应用程序自动加载并输入REQUEST_TIMEOUT配置变量。你可以通过一个不同的前缀到Sanic:\napp = Sanic(load_env='MYAPP_')\n然后，上面的变量将是MYAPP_REQUEST_TIMEOUT。如果您想要禁用环境变量的加载，您可以将其设置为False:\napp = Sanic(load_env=False)\n从对象\n如果有很多配置值，而且它们有合理的默认值，那么将它们放到一个模块中可能会有帮助:\nimport myapp.default_settings\n\napp = Sanic('myapp')\napp.config.from_object(myapp.default_settings)\n您也可以使用类或任何其他对象。\n从文件\n通常，您需要从一个不属于分布式应用程序的文件中加载配置。可以使用from_pyfile(/path/to/config_file)从文件加载配置。但是，这需要程序知道配置文件的路径。因此，您可以在一个环境变量中指定配置文件的位置，并告诉Sanic使用它来查找配置文件:\napp = Sanic('myapp')\napp.config.from_envvar('MYAPP_SETTINGS')\n然后，您可以使用MYAPP_SETTINGS环境变量集运行您的应用程序:\n$ MYAPP_SETTINGS=/path/to/config_file python3 myapp.py\nINFO: Goin' Fast @ http://0.0.0.0:8000\n配置文件是常规的Python文件，这些文件是为了加载它们而执行的。这允许您使用任意逻辑来构造正确的配置。在配置中只添加了大写的变量。最常见的配置包括简单的键值对：\n# config_file\nDB_HOST = 'localhost'\nDB_NAME = 'appdb'\nDB_USER = 'appuser'\n内置配置值\n在这个框中，只有几个预定义值，在创建应用程序时可以重写。\n| Variable           | Default   | Description                                   |\n| ------------------ | --------- | --------------------------------------------- |\n| REQUEST_MAX_SIZE   | 100000000 | How big a request may be (bytes)              |\n| REQUEST_TIMEOUT    | 60        | How long a request can take to arrive (sec)   |\n| RESPONSE_TIMEOUT   | 60        | How long a response can take to process (sec) |\n| KEEP_ALIVE         | True      | Disables keep-alive when False                |\n| KEEP_ALIVE_TIMEOUT | 5         | How long to hold a TCP connection open (sec)  |\n不同的超时变量\n请求超时度量在新打开的TCP连接被传递给Sanic后端服务器时的时间间隔，以及接收整个HTTP请求的瞬间。如果时间超过了REQUEST_TIMEOUT值(以秒为单位)，那么这将被视为客户端错误，因此Sanic生成一个HTTP 408响应并将其发送给客户端。如果您的客户经常通过非常大的请求负载或者非常缓慢地上传请求，请调整这个值。\n响应超时度量在Sanic服务器将HTTP请求传递到Sanic应用程序的时间之间的时间，以及发送到客户机的HTTP响应的时间。如果时间超过了RESPONSE_TIMEOUT值(以秒为单位)，这被认为是服务器错误，因此Sanic生成一个HTTP 503响应并将其设置为客户机。如果应用程序很可能长时间运行，延迟响应的生成，则将此值调整得更高。\nKeep-Alive是什么?   Keep Alive Timeout value的作用是什么呢?\nKeep-Alive是HTTP 1.1中的一个HTTP特性。发送HTTP请求时，客户端(通常是web浏览器应用程序)可以设置一个keepalive消息头，以指示HTTP服务器(Sanic)在发送响应之后不关闭TCP连接。这允许客户端重用现有的TCP连接来发送后续的HTTP请求，并确保客户机和服务器的网络流量更高效。\n在Sanic中，KEEP_ALIVE配置变量默认设置为True。如果您在应用程序中不需要此功能，则将其设置为False，以便在发送响应后立即关闭所有客户端连接，而不考虑请求上的keepalive消息头。\n服务器保持TCP连接打开的时间量由服务器本身决定。在Sanic中，该值使用KEEP_ALIVE_TIMEOUT值进行配置。默认情况下，它设置为5秒，这是与Apache HTTP服务器相同的默认设置，在允许客户端发送新请求的足够时间和不同时打开太多连接之间保持良好的平衡。不要超过75秒，除非你知道你的客户正在使用支持TCP连接的浏览器。\n供参考:\nApache httpd server default keepalive timeout = 5 seconds\nNginx server default keepalive timeout = 75 seconds\nNginx performance tuning guidelines uses keepalive = 15 seconds\nIE (5-9) client hard keepalive limit = 60 seconds\nFirefox client hard keepalive limit = 115 seconds\nOpera 11 client hard keepalive limit = 120 seconds\nChrome 13+ client keepalive limit > 300+ seconds\nCookie\ncookie是保存在用户浏览器内的数据块。Sanic既可以读写cookie，也可以存储为键-值对。\nWarning\ncookie可以由客户机自由修改。因此，您不能仅在cookie中存储诸如登录信息这样的数据，因为客户机可以随意更改这些数据。为了确保存储在cookie中的数据不会被客户伪造或篡改， use something like itsdangerous to cryptographically sign the data.\n读取cookies\n用户的cookie可以通过请求对象的cookie字典访问。\nfrom sanic.response import text\n\n@app.route(\"/cookie\")\nasync def test(request):\n    test_cookie = request.cookies.get('test')\n    return text(\"Test cookie set to: {}\".format(test_cookie))\n\n写入cookies\n返回响应时，可以在响应对象上设置cookie。\nfrom sanic.response import text\n\n@app.route(\"/cookie\")\nasync def test(request):\n    response = text(\"There's a cookie up in this response\")\n    response.cookies['test'] = 'It worked!'\n    response.cookies['test']['domain'] = '.gotta-go-fast.com'\n    response.cookies['test']['httponly'] = True\n    return response\n删除cookies\ncookie可以通过语义或显式删除。\nfrom sanic.response import text\n\n@app.route(\"/cookie\")\nasync def test(request):\n    response = text(\"Time to eat some cookies muahaha\")\n\n    # This cookie will be set to expire in 0 seconds\n    del response.cookies['kill_me']\n\n    # This cookie will self destruct in 5 seconds\n    response.cookies['short_life'] = 'Glad to be here'\n    response.cookies['short_life']['max-age'] = 5\n    del response.cookies['favorite_color']\n\n    # This cookie will remain unchanged\n    response.cookies['favorite_color'] = 'blue'\n    response.cookies['favorite_color'] = 'pink'\n    del response.cookies['favorite_color']\n\n    return response\n响应cookie可以设置为字典值，并具有以下参数:\n\nexpires (datetime): cookie在客户机浏览器上过期的时间。\npath(string): 此cookie应用的url的子集。默认为/。\ncomment(string): 注释(元数据)。\ndomain(string): 指定cookie有效的域。显式指定的域必须总是以一个点开始。\nmax-age(number): cookie应该存活的秒数。\nsecure (boolean): 指定cookie是否只通过HTTPS发送。\nhttponly (boolean): 指定Javascript是否不能读取cookie。\n\nsession\nsanic对此有一个第三方插件sanic_session，用法非常简单，见官方例子如下：\nimport asyncio_redis\n\nfrom sanic import Sanic\nfrom sanic.response import text\nfrom sanic_session import RedisSessionInterface\n\napp = Sanic()\n\n\n# Token from https://github.com/subyraman/sanic_session\n\nclass Redis:\n    \"\"\"\n    A simple wrapper class that allows you to share a connection\n    pool across your application.\n    \"\"\"\n    _pool = None\n\n    async def get_redis_pool(self):\n        if not self._pool:\n            self._pool = await asyncio_redis.Pool.create(\n                host='localhost', port=6379, poolsize=10\n            )\n\n        return self._pool\n\n\nredis = Redis()\n\n# pass the getter method for the connection pool into the session\nsession_interface = RedisSessionInterface(redis.get_redis_pool, expiry=604800)\n\n\n@app.middleware('request')\nasync def add_session_to_request(request):\n    # before each request initialize a session\n    # using the client's request\n    await session_interface.open(request)\n\n\n@app.middleware('response')\nasync def save_session(request, response):\n    # after each request save the session,\n    # pass the response to set client cookies\n    await session_interface.save(request, response)\n\n\n@app.route(\"/\")\nasync def test(request):\n    # interact with the session like a normal dict\n    if not request['session'].get('foo'):\n        request['session']['foo'] = 0\n\n    request['session']['foo'] += 1\n\n    response = text(request['session']['foo'])\n\n    return response\n\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=8888, debug=True)\nHandler Decorators\n由于Sanic处理程序是简单的Python函数，您可以用类似于Flask的方式向它们应用decorator。一个典型的用例是，当您需要一些代码在处理程序的代码执行之前运行。\nAuthorization Decorator\n假设您想要检查用户是否被授权访问某个特定的端点。您可以创建包装处理函数的decorator，检查客户端是否被授权访问某个资源，并发送适当的响应。\nfrom functools import wraps\nfrom sanic.response import json\n\ndef authorized():\n    def decorator(f):\n        @wraps(f)\n        async def decorated_function(request, *args, **kwargs):\n            # run some method that checks the request\n            # for the client's authorization status\n            is_authorized = check_request_for_authorization_status(request)\n\n            if is_authorized:\n                # the user is authorized.\n                # run the handler method and return the response\n                response = await f(request, *args, **kwargs)\n                return response\n            else:\n                # the user is not authorized. \n                return json({'status': 'not_authorized'}, 403)\n        return decorated_function\n    return decorator\n\n\n@app.route(\"/\")\n@authorized()\nasync def test(request):\n    return json({status: 'authorized'})\nStreaming\n流媒体\nRequest Streaming\nSanic允许您通过流获取请求数据，如下所示。当请求结束时，request.stream.get()返回None。只有post, put和patch decorator 有流参数。\nfrom sanic import Sanic\nfrom sanic.views import CompositionView\nfrom sanic.views import HTTPMethodView\nfrom sanic.views import stream as stream_decorator\nfrom sanic.blueprints import Blueprint\nfrom sanic.response import stream, text\n\nbp = Blueprint('blueprint_request_stream')\napp = Sanic('request_stream')\n\n\nclass SimpleView(HTTPMethodView):\n\n    @stream_decorator\n    async def post(self, request):\n        result = ''\n        while True:\n            body = await request.stream.get()\n            if body is None:\n                break\n            result += body.decode('utf-8')\n        return text(result)\n\n\n@app.post('/stream', stream=True)\nasync def handler(request):\n    async def streaming(response):\n        while True:\n            body = await request.stream.get()\n            if body is None:\n                break\n            body = body.decode('utf-8').replace('1', 'A')\n            response.write(body)\n    return stream(streaming)\n\n\n@bp.put('/bp_stream', stream=True)\nasync def bp_handler(request):\n    result = ''\n    while True:\n        body = await request.stream.get()\n        if body is None:\n            break\n        result += body.decode('utf-8').replace('1', 'A')\n    return text(result)\n\n\nasync def post_handler(request):\n    result = ''\n    while True:\n        body = await request.stream.get()\n        if body is None:\n            break\n        result += body.decode('utf-8')\n    return text(result)\n\napp.blueprint(bp)\napp.add_route(SimpleView.as_view(), '/method_view')\nview = CompositionView()\nview.add(['POST'], post_handler, stream=True)\napp.add_route(view, '/composition_view')\n\n\nif __name__ == '__main__':\n    app.run(host='127.0.0.1', port=8000)\nResponse Streaming\nSanic允许您使用stream 方法将内容流到客户机。该方法接受一个coroutine回调，该回调将传递给写入的StreamingHTTPResponse对象。一个简单的例子如下:\nfrom sanic import Sanic\nfrom sanic.response import stream\n\napp = Sanic(__name__)\n\n@app.route(\"/\")\nasync def test(request):\n    async def sample_streaming_fn(response):\n        response.write('foo,')\n        response.write('bar')\n\n    return stream(sample_streaming_fn, content_type='text/csv')\n在您希望将内容流到来自外部服务(如数据库)的客户端时，这很有用。例如，您可以使用asyncpg提供的异步游标将数据库记录流到客户端:\n@app.route(\"/\")\nasync def index(request):\n    async def stream_from_db(response):\n        conn = await asyncpg.connect(database='test')\n        async with conn.transaction():\n            async for record in conn.cursor('SELECT generate_series(0, 10)'):\n                response.write(record[0])\n\n    return stream(stream_from_db)\n基于类的视图\n基于类的视图只是实现对请求的响应行为的类。它们提供了一种方法，将不同的HTTP请求类型划分到同一端点。与其定义和修饰三个不同的处理函数(每个端点支持的请求类型)，端点可以分配一个基于类的视图。\n定义视图\n基于类的视图应该子类化HTTPMethodView。然后，您可以为希望支持的每个HTTP请求类型实现类方法。如果接收到的请求没有定义的方法，则会生成一个405: Method not allowed 的响应。\n要在端点上注册基于类的视图，将使用app.add_route方法。第一个参数应该是被调用的方法as_view的定义类，第二个参数应该是URL端点。\n可用的方法是get、post、put、patch和delete。使用所有这些方法的类看起来如下所示。\nfrom sanic import Sanic\nfrom sanic.views import HTTPMethodView\nfrom sanic.response import text\n\napp = Sanic('some_name')\n\nclass SimpleView(HTTPMethodView):\n\n  def get(self, request):\n      return text('I am get method')\n\n  def post(self, request):\n      return text('I am post method')\n\n  def put(self, request):\n      return text('I am put method')\n\n  def patch(self, request):\n      return text('I am patch method')\n\n  def delete(self, request):\n      return text('I am delete method')\n\napp.add_route(SimpleView.as_view(), '/')\n你还可以使用async 异步语法。\nfrom sanic import Sanic\nfrom sanic.views import HTTPMethodView\nfrom sanic.response import text\n\napp = Sanic('some_name')\n\nclass SimpleAsyncView(HTTPMethodView):\n\n  async def get(self, request):\n      return text('I am async get method')\n\napp.add_route(SimpleAsyncView.as_view(), '/')\nURL参数\n如果您需要任何URL参数，如路由指南中所讨论的，在方法定义中包含它们。\nclass NameView(HTTPMethodView):\n\n  def get(self, request, name):\n    return text('Hello {}'.format(name))\n\napp.add_route(NameView.as_view(), '/<name>')\n装饰器\n如果您想在类中添加任何装饰器，可以设置decorator类变量。当调用as_view时，这些将被应用到类中。\nclass ViewWithDecorator(HTTPMethodView):\n  decorators = [some_decorator_here]\n\n  def get(self, request, name):\n    return text('Hello I have a decorator')\n\napp.add_route(ViewWithDecorator.as_view(), '/url')\nURL构建\n如果您希望为HTTPMethodView构建一个URL，请记住，类名将是您将传入url_for的端点。例如:\n@app.route('/')\ndef index(request):\n    url = app.url_for('SpecialClassView')\n    return redirect(url)\n\n\nclass SpecialClassView(HTTPMethodView):\n    def get(self, request):\n        return text('Hello from the Special Class View!')\n\n\napp.add_route(SpecialClassView.as_view(), '/special_class_view')\n使用组合视图\nUsing CompositionView\n作为HTTPMethodView的替代方法，您可以使用CompositionView将处理程序函数移到视图类之外。\n每个支持的HTTP方法的处理函数都在源代码的其他地方定义，然后使用CompositionView.add方法添加到视图中。第一个参数是要处理的HTTP方法的列表(例如，['GET'， 'POST'])，第二个参数是处理函数。下面的示例显示了使用外部处理程序函数和内联lambda的CompositionView用法:\nfrom sanic import Sanic\nfrom sanic.views import CompositionView\nfrom sanic.response import text\n\napp = Sanic(__name__)\n\ndef get_handler(request):\n    return text('I am a get method')\n\nview = CompositionView()\nview.add(['GET'], get_handler)\nview.add(['POST', 'PUT'], lambda request: text('I am a post/put method'))\n\n# Use the new view to handle requests to the base URL\napp.add_route(view, '/')\nNote: 当前您不能使用url_for为CompositionView构建一个URL。\n自定义协议\n注意:这是高级用法，大多数读者不需要这样的功能。\n您可以通过指定自定义协议来更改Sanic协议的行为，该协议应该是asyncio.protocol的子类。然后，该协议可以作为sanic.run方法的关键字参数协议传递。\n自定义协议类的构造函数接收来自Sanic的以下关键字参数。\n\n\nloop: 一个异步兼容的事件循环。\n\nconnections: 用于存储协议对象的集合。当Sanic接收SIGINT或SIGTERM时，它执行protocol.close_if_idle关闭此集合中存储的所有协议对象。\n\nsignal: 带有stopped属性的sanic.server.Signal对象。当Sanic收到SIGINT或SIGTERM，signal.stopped分配True。\n\nrequest_handler: 取一个sanic.request.Request对象和response回调作为参数的coroutine。\n\nerror_handler: 在抛出异常时调用的处理程序sanic.exceptions.Handler。\n\nrequest_timeout: 请求超时前的秒数。\n\nrequest_max_size: 指定请求的最大大小的整数，以字节为单位。\n\nExample\n如果处理函数不返回HTTPResponse对象，则默认协议中出现错误。\n通过重写write_response协议方法，如果处理程序返回一个字符串，它将被转换为HTTPResponse对象。\nfrom sanic import Sanic\nfrom sanic.server import HttpProtocol\nfrom sanic.response import text\n\napp = Sanic(__name__)\n\n\nclass CustomHttpProtocol(HttpProtocol):\n\n    def __init__(self, *, loop, request_handler, error_handler,\n                 signal, connections, request_timeout, request_max_size):\n        super().__init__(\n            loop=loop, request_handler=request_handler,\n            error_handler=error_handler, signal=signal,\n            connections=connections, request_timeout=request_timeout,\n            request_max_size=request_max_size)\n\n    def write_response(self, response):\n        if isinstance(response, str):\n            response = text(response)\n        self.transport.write(\n            response.output(self.request.version)\n        )\n        self.transport.close()\n\n\n@app.route('/')\nasync def string(request):\n    return 'string'\n\n\n@app.route('/1')\nasync def response(request):\n    return text('response')\n\napp.run(host='0.0.0.0', port=8000, protocol=CustomHttpProtocol)\nSSL Example\n可以传入SSLContext：\nimport ssl\ncontext = ssl.create_default_context(purpose=ssl.Purpose.CLIENT_AUTH)\ncontext.load_cert_chain(\"/path/to/cert\", keyfile=\"/path/to/keyfile\")\n\napp.run(host=\"0.0.0.0\", port=8443, ssl=context)\n您还可以将证书和密钥的位置传递给字典:\nssl = {'cert': \"/path/to/cert\", 'key': \"/path/to/keyfile\"}\napp.run(host=\"0.0.0.0\", port=8443, ssl=ssl)\n日志\nLogging\nSanic允许您根据python3 logging API对请求进行不同类型的日志记录(访问日志、错误日志)。如果您想创建一个新的配置，您应该对python3 logging有一些基本的了解。\nQuick Start\n使用默认设置的一个简单示例如下:\nfrom sanic import Sanic\n\napp = Sanic('test')\n\n@app.route('/')\nasync def test(request):\n    return response.text('Hello World!')\n\nif __name__ == \"__main__\":\n  app.run(debug=True, access_log=True)\n要使用自己的日志记录配置，只需使用logging.config.dictConfig，或在初始化Sanic应用时传递log_config：\napp = Sanic('test', log_config=LOGGING_CONFIG)\n要关闭日志，只需分配access_log=False:\nif __name__ == \"__main__\":\n  app.run(access_log=False)\n这将跳过在处理请求时调用日志功能。你甚至可以做进一步的生产以获得额外的速度:\nif __name__ == \"__main__\":\n  # disable debug messages\n  app.run(debug=False, access_log=False)\nConfiguration\n默认情况下，log_config参数设置为使用sanic.log.LOGGING_CONFIG_DEFAULTS字典配置。\n在sanic中使用了三个日志记录器loggers，如果您想创建自己的日志配置，则必须定义:\n\nroot: 用于记录内部消息。sanic.error: 用于记录错误日志。\nsanic.access: 用于记录访问日志。\n\nLog format\n除了python提供的默认参数(asctime、levelname、message)， Sanic还提供了用于访问日志记录器logger的其他参数:\n\nhost (str): request.iprequest (str): request.method + \" \" + request.urlstatus (int): response.statusbyte (int): len(response.body)\n\n默认的访问日志格式是：\n%(asctime)s - (%(name)s)[%(levelname)s][%(host)s]: %(request)s %(message)s %(status)d %(byte)d\n测试\nTesting\nSanic端点可以使用test_client对象在本地测试，这取决于附加的aiohttp库。\ntest_client公开get、post、put、delete、patch、head和options方法，以便与应用程序运行。一个简单的例子(使用pytest)如下:\n# Import the Sanic app, usually created with Sanic(__name__)\nfrom external_server import app\n\ndef test_index_returns_200():\n    request, response = app.test_client.get('/')\n    assert response.status == 200\n\ndef test_index_put_not_allowed():\n    request, response = app.test_client.put('/')\n    assert response.status == 405\n在内部，每次调用test_client方法时，Sanic应用程序运行于127.0.0.1:42101，您的测试请求使用aiohttp执行。\ntest_client方法接受以下参数和关键字参数:\n\nuri(default '/') 一个表示测试uri的字符串。gather_request(default  True) 一个布尔值，它决定原始请求是否由函数返回。如果设置为True，返回值是(request, response)的一个元组，如果False仅返回响应。\nserver_kwargs (default {}) 在测试请求运行之前传递给app.run的附加参数。\ndebug(default False)一个布尔值，它决定是否在调试模式下运行服务器。\n\n该函数进一步接受了*request_args和**request_kwargs，它们直接传递给aiohttp ClientSession请求。\n例如，为了向GET请求提供数据，您将执行以下操作:\ndef test_get_request_includes_data():\n    params = {'key1': 'value1', 'key2': 'value2'}\n    request, response = app.test_client.get('/', params=params)\n    assert request.args.get('key1') == 'value1'\n并向JSON POST请求提供数据:\ndef test_post_json_request_includes_data():\n    data = {'key1': 'value1', 'key2': 'value2'}\n    request, response = app.test_client.post('/', data=json.dumps(data))\n    assert request.json.get('key1') == 'value1'\n关于aiohttp的可用参数的更多信息可以在ClientSession的文档中找到。\npytest-sanic\npytest-sanic是一个pytest插件，它可以帮助您异步地测试您的代码。编写测试:\nasync def test_sanic_db_find_by_id(app):\n    \"\"\"\n    Let's assume that, in db we have,\n        {\n            \"id\": \"123\",\n            \"name\": \"Kobe Bryant\",\n            \"team\": \"Lakers\",\n        }\n    \"\"\"\n    doc = await app.db[\"players\"].find_by_id(\"123\")\n    assert doc.name == \"Kobe Bryant\"\n    assert doc.team == \"Lakers\"\npytest-sanic还提供了一些有用的设备，如loop、unused_port、test_server、test_client。\n@pytest.yield_fixture\ndef app():\n    app = Sanic(\"test_sanic_app\")\n\n    @app.route(\"/test_get\", methods=['GET'])\n    async def test_get(request):\n        return response.json({\"GET\": True})\n\n    @app.route(\"/test_post\", methods=['POST'])\n    async def test_post(request):\n        return response.json({\"POST\": True})\n\n    yield app\n\n\n@pytest.fixture\ndef test_cli(loop, app, test_client):\n    return loop.run_until_complete(test_client(app, protocol=WebSocketProtocol))\n\n\n#########\n# Tests #\n#########\n\nasync def test_fixture_test_client_get(test_cli):\n    \"\"\"\n    GET request\n    \"\"\"\n    resp = await test_cli.get('/test_get')\n    assert resp.status == 200\n    resp_json = await resp.json()\n    assert resp_json == {\"GET\": True}\n\nasync def test_fixture_test_client_post(test_cli):\n    \"\"\"\n    POST request\n    \"\"\"\n    resp = await test_cli.post('/test_post')\n    assert resp.status == 200\n    resp_json = await resp.json()\n    assert resp_json == {\"POST\": True}\n部署\nDeploying\n部署Sanic是由内置的webserver简化的。在定义了sanic.Sanic的实例之后。我们可以用以下关键字参数调用run方法:\n\n\nhost (default \"127.0.0.1\"): 地址来托管服务器。\n\nport (default 8000): 开启服务器的端口。\n\ndebug (default False): 启用调试输出(减慢服务器)。\n\nssl (default None): ssl加密的SSLContext。\n\nsock (default None): 用于服务器接受连接的套接字。\n\nworkers (default 1): 生成的工作进程数。\n\nloop (default None): 一个asyncio兼容的事件循环。如果没有指定，Sanic将创建自己的事件循环。\n\nprotocol (default HttpProtocol): asyncio.protocol的子类。\n\n进程\nWorkers\n默认情况下，Sanic只使用一个CPU核心侦听主进程。To crank up the juice，只需在run参数中指定workers的数量。\napp.run(host='0.0.0.0', port=1337, workers=4)\nSanic将会自动启动多个进程，并在它们之间路由流量。我们建议尽可能多的workers拥有可用的核心。\n通过命令行运行\n如果您喜欢使用命令行参数，则可以通过执行模块来启动Sanic服务器。例如，如果您在名为server.py的文件中初始化Sanic作为app，你可以这样运行服务器:\npython -m sanic server.app --host=0.0.0.0 --port=1337 --workers=4\n通过这种运行sanic的方式，无需在Python文件中调用app.run。如果这样做，请确保将其包装起来，以便它只在解释器直接运行时执行。\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=1337, workers=4)\n通过Gunicorn运行\nGunicorn ‘Green Unicorn’ 是UNIX的一个WSGI HTTP服务器。它是一个由Ruby的Unicorn项目移植的预fork worker模型。\n为了使用Gunicorn运行Sanic应用程序，您需要为Gunicornworker-class 参数使用特殊的sanic.worker.GunicornWorker：\ngunicorn myapp:app --bind 0.0.0.0:1337 --worker-class sanic.worker.GunicornWorker\n如果您的应用程序遭受内存泄漏，您可以配置Gunicorn以优雅地重新启动一个worker，因为它处理了给定数量的请求。这可以方便地帮助限制内存泄漏的影响。\n有关更多信息，请参见 Gunicorn 文档。\n异步支持\nAsynchronous support\n如果您需要与其他应用程序共享sanic进程，特别是loop，这是合适的。但是，请注意，该方法不支持使用多进程，并且不是一般运行该应用程序的首选方式。\n这里有一个不完整的示例(请参见run_asyn.py在一些更实用的例子中):\nserver = app.create_server(host=\"0.0.0.0\", port=8000)\nloop = asyncio.get_event_loop()\ntask = asyncio.ensure_future(server)\nloop.run_forever()\n扩展\nExtensions\n由社区创建的Sanic扩展列表。\n\n\nSanic-Plugins-Framework:  方便创建和使用Sanic插件的库。\n\nSessions:  对sessions的支持。允许使用redis、memcache或内存存储。\n\nCORS:  A port of flask-cors.\n\nCompress:  允许您轻松地压缩Sanic响应。Flask-Compress的一个端口。\n\nJinja2: 支 持Jinja2模板。\n\nJWT:  JSON Web令牌(JWT)的身份验证扩展。\n\nOpenAPI/Swagger:  OpenAPI支持，外加Swagger UI。\n\nPagination:  简单的分页的支持。\n\nMotor:  Simple motor wrapper。\n\nSanic CRUD:  与peewee模型的CRUD REST API生成。\n\nUserAgent:  Add user_agent to request。\n\nLimiter:  sanic的速率限制。\n\nSanic EnvConfig:  将环境变量引入到Sanic配置中。\n\nBabel:  在Babel库的帮助下向Sanic应用程序添加i18n/l10n支持。\n\nDispatch:  在werkzeug中由DispatcherMiddleware激发的调度程序。可以充当sanicto - wsgi适配器。\n\nSanic-OAuth:  OAuth库，用于连接和创建您自己的令牌提供者。\n\nSanic-nginx-docker-example:  使用Sanic构建简单易用的骨架项目需要使用nginx，由docker-compose编排。\n\nsanic-graphql:  Graphico与Sanic集成。\n\nsanic-prometheus:  Sanic的Prometheus标准。\n\nSanic-RestPlus:  A port of Flask-RestPlus for Sanic. Full-featured REST API with SwaggerUI generation。\n\nsanic-transmute:  从python函数和类中生成api的Sanic扩展，并自动生成Swagger UI文档。\n\npytest-sanic:  Sanic的一个pytest插件。它帮助您异步地测试代码。\n\njinja2-sanic:  Sanic的jinja2模板渲染器。\n\nAPI Reference\nsanic-官方文档\nsanic-githup\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}