{"title": "Python3中六种标准数据类型的简单说明和理解 - 个人文章 ", "index": "人工智能,python3.x,python", "content": "作者：心叶时间：2018-04-21 09:28\nPython 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。\nPython3 中有六个标准的数据类型：Number（数字） + String（字符串） + List（列表） + Tuple（元组） + Sets（集合） + Dictionary（字典）。\nNumber（数字）\n数字类型是顾名思义是用来存储数值的，需要记住的是，有点和Java的字符串味道差不多，如果改变了数字数据类型的值，将重新分配内存空间。\n可以使用del语句删除一些数字对象的引用：del var1[,var2[,var3[....,varN]]]]。\nPython 支持三种不同的数值类型：\n1.整型(Int) - 通常被称为是整型或整数，是正或负整数，不带小数点。Python3 整型是没有限制大小的，可以当作 Long 类型使用，所以 Python3 没有 Python2 的 Long 类型。\n2.浮点型(float) - 浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）\n3.复数( (complex)) - 复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。\n数字类型转换\n1.int(x) 将x转换为一个整数。2.float(x) 将x转换到一个浮点数。3.complex(x) 将x转换到一个复数，实数部分为 x，虚数部分为 0。4.complex(x, y) 将 x 和 y 转换到一个复数，实数部分为 x，虚数部分为 y。x 和 y 是数字表达式。额外说明\n和别的语言一样，数字类型支持各种常见的运算，不过python的运算比别的大多数常见语言都更加丰富，此外，还有大量丰富的方法，提供更高效的开发。\nString（字符串）\n创建字符串\n创建字符串可以使用单引号、双引号、三单引号和三双引号，其中三引号可以多行定义字符串，有点类似ES6中的反引号。Python 不支持单字符类型，单字符也在Python也是作为一个字符串使用。访问字符串中的值\n和ES一样，可以使用方括号来截图字符串，例子如下：\nval_str='yelloxing'\n\nprint(val_str[0]) #y\n\nprint(val_str[1:3]) #el\n\nprint(val_str[:3]) #yel\n\nprint(val_str[:5]) #yello\n字符串运算符\n除了上面已经说明的方括号，还有一些别的字符串运算，具体查看文档。\n字符串格式化\ntemp=\"我叫 %s 今年 %d 岁!\" % ('心叶', 7)\n\nprint('['+temp+']') #[我叫 心叶 今年 7 岁!]\n如上所示，字符串支持格式化，当然，出来上面用到的%s和%d以外，还有一些别的，具体看文档；是不是感觉有点C语言的味道。\n额外说明\n所有的字符串都是Unicode字符串（针对python3），有很多有用的方法，真的很有ES和C结合体的味道。\nList（列表）\n序列是Python中最基本的数据结构。序列中的每个元素都分配一个数字 - 它的位置，或索引，第一个索引是0，第二个索引是1，依此类推。\nPython有6个序列的内置类型（列表、元组、字符串、Unicode字符串、buffer对象和xrange对象）。\n列表其实类似数组，具体的一些操作就很像字符串（类似ES中数组和字符串的关系）。\n常见运算\n下面用一个例子来展示一些常见的运算：\nval_arr=['Made','in','China']\n\ndel val_arr[1]\n\nprint(val_arr) #['Made', 'China']\n\nprint(len(val_arr)) #2\n\nval_newarr=val_arr+[':information']\n\nprint(val_newarr) #['Made', 'China', ':information']\n\nval_arr=val_arr*2\n\nprint(val_arr) #['Made', 'China', 'Made', 'China']\n\nprint('in' in val_arr) #False\n\nprint('Made' in val_arr) #True\n\nfor row in val_newarr:\n\n    print(row, end=\" - \") #Made - China - :information -\n    \nprint(val_newarr[-1]) #:information\n\nprint(val_newarr[1:]) #['China', ':information']\n再来看一个有用的例子：\ncols=3\n\nrows=2\n\nlist_2d = [[0 for col in range(cols)] for row in range(rows)]\n\nprint(list_2d) #[[0, 0, 0], [0, 0, 0]]\n嵌套列表\n使用嵌套列表即在列表里创建其它列表，例如：\nloop_arr=['yelloxing','心叶']\n\nresult_arr=[loop_arr,'同级别']\n\nprint(result_arr) #[['yelloxing', '心叶'], '同级别']\n列表的嵌套就很灵活，此外随便提一下：和前面说的一样，也有很多方法提供高效的开发。\nTuple（元组）\n元组与列表类似，不同之处在于元组的元素不能修改，元组使用小括号，列表使用方括号。\n创建元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用\ntup1 = ('Google', 'Runoob', 1997, 2000);\n\ntup2 = (1, 2, 3, 4, 5 );\n\ntup3 = \"a\", \"b\", \"c\", \"d\";\n\n\nprint(tup1) #('Google', 'Runoob', 1997, 2000)\n\nprint(tup2) #(1, 2, 3, 4, 5)\n\nprint(tup3) #('a', 'b', 'c', 'd')\n基本操作\n和列表的操作很相似，下面说一个几天特殊的地方：1.del可以删除某个元组，不过不可以删除元组的某个条目。2.不可以修改，或许元组会更快，感觉的，没有实际测试。3.由于元组不可以修改，虽然同样有一些方法，不过和修改相关的方法就没有了。\nSets（集合）\n回想一下数学里面的集合，合、交、差、补等运算是不是一下子回想起来了，这里的集合也有这些方法。\n和Java的集合类似，一个无序不重复元素集（与列表和元组不同，集合是无序的，也无法通过数字进行索引）。更具体的说明，如果必要会在单独说明。\nDictionary（字典）\n字典是另一种可变容器模型，且可存储任意类型对象。\n字典的每个键值(key=>value)对用冒号(:)分割，每个对之间用逗号(,)分割，整个字典包括在花括号({})中，键必须是唯一的，但值则不必。\n和ES中的JSON的差不多，操作也很像，不过区别也很大，内置方法很多，具体还是一样，看文档去。\n删除字典元素\n可以用del删除一个条目或字典，也可以用clear()方法清空字典（比如现在有字段dict，就是：dict.clear()）。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}