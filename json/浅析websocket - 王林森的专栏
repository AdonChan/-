{"title": "浅析websocket - 王林森的专栏 ", "index": "nginx,python,websocket", "content": "Websocket\n背景\n历史上，如果一个web应用程序需要和server进行双向通信(例如，实时聊天和游戏)，需要大量的http请求来检查server的内容是否有更新, 同时也需要很多http请求来发送通知，这种方式有许多问题:\n\nserver端必须使用大量的tcp连接来服务每一个client：一类连接用来发送信息给client, 另一类连接用来接收新的消息。\n有大量不必要网络开销，因为每一次消息通讯都都包含http header。\nclient需要维护一个map来映射发送数据的连接和接受数据的连接。\n\n一个简单的解决方案就是使用一个tcp连接来进行双向通讯，这就是websocket的作用。\nwebsocket使用80和443端口，对HTTP代理和网关友好。\n连接握手过程\nclient发送\nGET /chat HTTP/1.1\nHost: server.example.com\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\nOrigin: http://example.com\nSec-WebSocket-Protocol: chat, superchat\nSec-WebSocket-Version: 13\nserver响应\nHTTP/1.1 101 Switching Protocols\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\nSec-WebSocket-Protocol: chat\n连接握手的目的是兼容基于HTTP的server和代理，所以一个端口可以同时服务HTTP请求和websocket请求。\n请求中Upgrage: websocket表示这是一个websocket请求。服务端收到该请求后会根据请求中携带的Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==通过特定算法生成Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=响应给客户端，客户端校验通过握手成功。\n握手结束后，双方就可以进行双向通讯了，所有的通讯内容都以数据帧格式来传输。\n数据帧\n\nFIN:  1比特\n表示一个message中的最后一个frame。\nRSV1, RSV2, RSV3:  每个1比特\n必须为0，后续扩展使用。\nOptcode:  4比特\n定义负载数据的解析方式。\n\n%x0 表示一个连续帧。\n%x1 表示一个文本帧。\n0x2 表示一个二进制帧。\n0x3-7 保留，以后给非控制帧使用。\n0x8 表示连接关闭。\n0x9 表示ping。\n0xA 表示pong。\n0xB-F 保留，以后给控制帧使用。\n\nMask:  1比特\n表示负载数据是否masked。如果为1，masking-key包含一个key，用来unmask负载数据。所有从客户端方向发送的数据，该位必须置1。\n*Playload length: * 7比特，7+16比特， 或者7+64比特\n\n0-125表示负载数据的长度。\n126，接下来的两个字节为16位无符号整型表示负载数据长度。\n127, 接下来的8个字节为64为无符号整型表示负载数据长度。\n\nMasking key:  0或者4字节\n如果mask标志为1时存在，保存mask key。\nPayload data:  负载数据。\n关闭握手过程\n\n关闭握手比连接握手简单的多，连接的任何一端都可以发送一个close frame，开始关闭握手，收到这个control frame的端发送一个close frame响应, 另一端收到这个close frame后关闭连接。\n一端发送close frame后就表示这个连接将会被关闭并且不会再发送任何数据到另一端， 对端收到close frame后知道这个连接将会被关闭，后续收到的数据都会被丢弃。\nwebsocket关闭握手的目的是完善TCP的关闭握手，因为在端到端的情景TCP的关闭握手并不总是可信赖的，尤其端到端中间有代理或者防火墙的情况下。\n通过发送一个close frame然后等待响应，这种方式避免了不必要的数据丢失。\nwebsocket & nginx\nnginx并没有支持websocket，只是支持websocket的代理。\nhttp {\n    map $http_upgrade $connection_upgrade {\n        default upgrade;\n        '' close;\n    }\n\n    upstream websocket {\n        server 192.168.100.10:8010;\n    }\n\n    server {\n        listen 8020;\n        location / {\n            proxy_pass http://websocket;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection $connection_upgrade;\n        }\n    }\n}\nnginx也有第三方支持websocket的模块nchan,但不是为流媒体设计的。\n哪些服务端支持websocket\n\n\nNode.js\n\nSocket.IO\nWebSocket-Node\nws\n\n\n\nJava\nJetty\n\n\nRubby\nEventMachine\n\n\nPython\n\npywebsocket\nTornado\n\n\n\nErlang\nShirasu\n\n\n.NET\nSuperWebSocket\n\n\n参考资料\nhttp://blog.teamtreehouse.com/an-introduction-to-websockets\nhttp://www.websocket.org/aboutwebsocket.html\nhttps://www.html5rocks.com/en/tutorials/websockets/basics\nhttps://os.alfajango.com/websockets-slides/#/2\nThe WebSocket Protocol\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "9"}