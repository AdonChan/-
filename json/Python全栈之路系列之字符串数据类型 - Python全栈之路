{"title": "Python全栈之路系列之字符串数据类型 - Python全栈之路 ", "index": "python", "content": "字符串(str)\n字符串类型是python的序列类型，他的本质就是字符序列，而且python的字符串类型是不可以改变的，你无法将原字符串进行修改，但是可以将字符串的一部分复制到新的字符串中，来达到相同的修改效果。\n创建字符串类型可以使用单引号或者双引号又或者三引号来创建，实例如下：\n单引号\n>>> string = 'ansheng'\n# type是查看一个变量的数据类型\n>>> type(string)\n<class 'str'>\n双引号\n>>> string = \"ansheng\"\n# type是查看一个变量的数据类型\n>>> type(string) \n<class 'str'>\n三引号\n>>> string = \"\"\"ansheng\"\"\"\n>>> type(string)\n<class 'str'>\n还可以指定类型\n>>> var=str(\"string\")\n>>> var\n'string'\n>>> type(var)\n<class 'str'>\n字符串方法\n每个类的方法其实都是很多的，无论我们在学习的过程中个还是工作的时候，常用的其实没有多少，所以我们没必要去可以得记那么多，有些方法我们只需要对其有个印象就ok了，忘了的时候可以google一下。\n首字母变大写\ncapitalize(self):\n>>> name=\"ansheng\"\n>>> name.capitalize()\n'Ansheng'\n内容居中，width：字符串的总宽度；fillchar：填充字符，默认填充字符为空格。\ncenter(self, width, fillchar=None):\n# 定义一个字符串变量，名为\"string\"，内容为\"hello word\"\n>>> string=\"hello word\"\n# 输出这个字符串的长度，用len(value_name)\n>>> len(string)\n10\n# 字符串的总宽度为10，填充的字符为\"*\"\n>>> string.center(10,\"*\")\n'hello word'\n# 如果设置字符串的总产都为11，那么减去字符串长度10还剩下一个位置，这个位置就会被*所占用\n>>> string.center(11,\"*\")\n'*hello word'\n# 是从左到右开始填充\n>>> string.center(12,\"*\")\n'*hello word*'\n统计字符串里某个字符出现的次数,可选参数为在字符串搜索的开始与结束位置。\ncount(self, sub, start=None, end=None):\n\n\n参数\n描述\n\n\n\nsub\n搜索的子字符串;\n\n\nstart\n字符串开始搜索的位置。默认为第一个字符,第一个字符索引值为0;\n\n\nend\n字符串中结束搜索的位置。字符中第一个字符的索引为 0。默认为字符串的最后一个位置;\n\n\n\n>>> string=\"hello word\"\n# 默认搜索出来的\"l\"是出现过两次的\n>>> string.count(\"l\")\n2\n# 如果指定从第三个位置开始搜索，搜索到第六个位置，\"l\"则出现过一次\n>>> string.count(\"l\",3,6)\n1\n解码\ndecode(self, encoding=None, errors=None):\n# 定义一个变量内容为中文\ntemp = \"中文\"\n# 把变量的字符集转化为UTF-8\ntemp_unicode = temp.decode(\"utf-8\")\n编码，针对unicode\nencode(self, encoding=None, errors=None):\n# 定义一个变量内容为中文,字符集为UTF-8\ntemp = u\"中文\"\n# 编码，需要指定要转换成什么编码\ntemp_gbk = temp_unicode.encode(\"gbk\")\n于判断字符串是否以指定后缀结尾，如果以指定后缀结尾返回True，否则返回False。\nendswith(self, suffix, start=None, end=None):\n\n\n参数\n描述\n\n\n\nsuffix\n后缀，可能是一个字符串，或者也可能是寻找后缀的tuple\n\n\nstart\n开始，切片从这里开始\n\n\nend\n结束，片到此为止\n\n\n\n>>> string=\"hello word\"\n# 判断字符串中是否已\"d\"结尾，如果是则返回\"True\"\n>>> string.endswith(\"d\")\nTrue\n# 判断字符串中是否已\"t\"结尾，不是则返回\"False\"\n>>> string.endswith(\"t\")\nFalse\n# 制定搜索的位置，实则就是从字符串位置1到7来进行判断，如果第七个位置是\"d\"，则返回True，否则返回False\n>>> string.endswith(\"d\",1,7)\nFalse\n把字符串中的tab符号('t')转为空格，tab符号('t')默认的空格数是8。\nexpandtabs(self, tabsize=None):\n\n\n参数\n描述\n\n\ntabsize\n指定转换字符串中的 tab 符号('t')转为空格的字符数\n\n\n>>> string=\"hello       word\"\n# 输出变量\"string\"内容的时候会发现中间有一个\"\\t\"，这个其实就是一个`tab`键\n>>> string\n'hello\\tword'\n# 把`tab`键换成一个空格\n>>> string.expandtabs(1)\n'hello word'\n# 把`tab`键换成十个空格\n>>> string.expandtabs(10)\n'hello     word'\n检测字符串中是否包含子字符串str，如果指定beg(开始)和end(结束)范围，则检查是否包含在指定范围内，如果包含子字符串返回开始的索引值，否则返回-1。\nfind(self, sub, start=None, end=None):\n\n\n参数\n描述\n\n\n\nstr\n指定检索的字符串\n\n\nbeg\n开始索引，默认为0\n\n\nend\n结束索引，默认为字符串的长度\n\n\n\n>>> string=\"hello word\"\n# 返回`o`在当前字符串中的位置，如果找到第一个`o`之后就不会再继续往下面寻找了\n>>> string.find(\"o\")\n4\n# 从第五个位置开始搜索，返回`o`所在的位置\n>>> string.find(\"o\",5)\n7\n字符串格式，后续文章会提到。\nformat(args, *kwargs):\n检测字符串中是否包含子字符串 str ，如果指定 beg（开始） 和 end（结束） 范围，则检查是否包含在指定范围内，该方法与 python find()方法一样，只不过如果str不在 string中会报一个异常。\nindex(self, sub, start=None, end=None):\n\n\n参数\n描述\n\n\n\nstr\n指定检索的字符串\n\n\nbeg\n开始索引，默认为0\n\n\nend\n结束索引，默认为字符串的长度\n\n\n\n>>> string=\"hello word\"\n# 返回字符串所在的位置\n>>> string.index(\"o\")\n4\n# 如果查找一个不存在的字符串那么就会报错\n>>> string.index(\"a\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: substring not found\n法检测字符串是否由字母和数字组成，如果string至少有一个字符并且所有字符都是字母或数字则返回True,否则返回False\nisalnum(self):\n>>> string=\"hes2323\"\n# 如果存在数字或字母就返回`True`，否则返回`False`\n>>> string.isalnum()\nTrue\n# 中间有空格返回的就是False了\n>>> string=\"hello word\"\n>>> string.isalnum()\nFalse\n检测字符串是否只由字母组成。\nisalpha(self):\n# 如果全部都是字母就返回`True`\n>>> string=\"helloword\"\n>>> string.isalpha()\nTrue\n# 否则就返回False\n>>> string=\"hes2323\"\n>>> string.isalpha()\nFalse\n检测字符串是否只由数字组成\nisdigit(self):\n# 如果变量里面都是数字就返回`True`，否则就返回`False`\n>>> string=\"hes2323\"\n>>> string.isdigit()\nFalse\n>>> string=\"2323\"\n>>> string.isdigit()\nTrue\n检测字符串是否由小写字母组成\nislower(self):\n# 如果变量内容全部都是小写字母就返回`True`，否则就返回`False`\n>>> string=\"hesasdasd\"\n>>> string.islower()\nTrue\n>>> string=\"HelloWord\"\n>>> string.islower()\nFalse\n检测字符串是否只由空格组成\nisspace(self):\n# 如果变量内容由空格来组成，那么就返回`True`否则就返回`False`\n>>> string=\" \"\n>>> string.isspace()\nTrue\n>>> string=\"a\"\n>>> string.isspace()\nFalse\n检测字符串中所有的单词拼写首字母是否为大写，且其他字母为小写。\nistitle(self):\n# 如果变量的内容首字母是大写并且其他字母为小写，那么就返回`True`，否则会返回`False`\n>>> string=\"Hello Word\"\n>>> string.istitle()\nTrue\n>>> string=\"Hello word\"\n>>> string.istitle()\nFalse\n检测字符串中所有的字母是否都为大写。\nisupper(self):\n# 如果变量值中所有的字母都是大写就返回`True`，否则就返回`False`\n>>> string=\"hello word\"\n>>> string.isupper()\nFalse\n>>> string=\"HELLO WORD\"\n>>> string.isupper()\nTrue\n将序列中的元素以指定的字符连接生成一个新的字符串。\njoin(self, iterable):\n>>> string=(\"a\",\"b\",\"c\")\n>>> '-'.join(string)\n'a-b-c'\n返回一个原字符串左对齐,并使用空格填充至指定长度的新字符串。如果指定的长度小于原字符串的长度则返回原字符串。\nljust(self, width, fillchar=None):\n\n\n参数\n描述\n\n\n\nwidth\n指定字符串长度\n\n\nfillchar\n填充字符，默认为空格\n\n\n\n>>> string=\"helo word\"\n>>> len(string)\n9\n# 定义的长度减去字符串的长度,剩下的就开始填充\n>>> string.ljust(15,'*')\n'helo word******'\n转换字符串中所有大写字符为小写。\nlower(self):\n# 把变量里的大写全部转换成小写\n>>> string=\"Hello WORD\"\n>>> string.lower()\n'hello word'\n截掉字符串左边的空格或指定字符\nlstrip(self, chars=None):\n\n\n参数\n描述\n\n\nchars\n指定截取的字符\n\n\n# 从左侧开始删除匹配的字符串\n>>> string=\"hello word\"\n>>> string.lstrip(\"hello \")\n'word'\n用来根据指定的分隔符将字符串进行分割，如果字符串包含指定的分隔符，则返回一个3元的tuple，第一个为分隔符左边的子串，第二个为分隔符本身，第三个为分隔符右边的子串。\npartition(self, sep):\n\n\n参数\n描述\n\n\nstr\n指定的分隔符\n\n\n# 返回的是一个元组类型\n>>> string=\"www.ansheng.me\"\n>>> string.partition(\"ansheng\")\n('www.', 'ansheng', '.me')\n把字符串中的 old(旧字符串)替换成new(新字符串)，如果指定第三个参数max，则替换不超过max次\nreplace(self, old, new, count=None):\n\n\n参数\n描述\n\n\n\nold\n将被替换的子字符串\n\n\nnew\n新字符串，用于替换old子字符串\n\n\ncount\n可选字符串, 替换不超过count次\n\n\n\n>>> string=\"www.ansheng.me\"\n# 把就字符串`www.`换成新字符串`https://`\n>>> string.replace(\"www.\",\"https://\")\n'https://blog.ansheng.me'\n# 就字符串`w`换成新字符串`a`只替换`2`次\n>>> string.replace(\"w\",\"a\",2)\n'aaw.ansheng.me'\n返回字符串最后一次出现的位置，如果没有匹配项则返回-1。\nrfind(self, sub, start=None, end=None):\n\n\n参数\n描述\n\n\n\nstr\n查找的字符串\n\n\nbeg\n开始查找的位置，默认为0\n\n\nend\n结束查找位置，默认为字符串的长度\n\n\n\n>>> string=\"hello word\"\n# rfind其实就是反向查找\n>>> string.rfind(\"o\")\n7\n# 指定查找的范围\n>>> string.rfind(\"o\",0,6)\n4\n返回子字符串str在字符串中最后出现的位置，如果没有匹配的字符串会报异常，你可以指定可选参数[beg:end]设置查找的区间。\nrindex(self, sub, start=None, end=None):\n\n\n参数\n描述\n\n\n\nstr\n查找的字符串\n\n\nbeg\n开始查找的位置，默认为0\n\n\nend\n结束查找位置，默认为字符串的长度\n\n\n\n>>> string=\"hello word\"\n# 反向查找索引\n>>> string.rindex(\"o\")\n7\n# 如果没有查找到就报错\n>>> string.rindex(\"a\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: substring not found\n返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串。如果指定的长度小于字符串的长度则返回原字符串。\nrjust(self, width, fillchar=None):\n\n\n参数\n描述\n\n\n\nwidth\n指定填充指定字符后中字符串的总长度\n\n\nfillchar\n填充的字符，默认为空格\n\n\n\n>>> string=\"hello word\"\n>>> len(string)\n10\n>>> string.rjust(10,\"*\")\n'hello word'\n>>> string.rjust(12,\"*\")\n'**hello word'\n从右到左通过指定分隔符对字符串进行切片,如果参数num有指定值，则仅分隔num个子字符串\nrsplit(self, sep=None, maxsplit=None):\n\n\n参数\n描述\n\n\n\nstr\n隔符，默认为空格\n\n\nnum\n分割次数\n\n\n\n>>> string=\"www.ansheng.me\"\n>>> string.rsplit(\".\",1)\n['www.ansheng', 'me']\n>>> string.rsplit(\".\",2)\n['www', 'ansheng', 'me']\n删除string字符串末尾的指定字符（默认为空格）.\nrstrip(self, chars=None):\n\n\n参数\n描述\n\n\nchars\n指定删除的字符\n\n\n# 从尾部开始匹配删除\n>>> string=\"hello word\"\n>>> string.rstrip(\"d\")\n'hello wor'\n从左到右通过指定分隔符对字符串进行切片,如果参数num有指定值，则仅分隔num个子字符串\nsplit(self, sep=None, maxsplit=None):\n\n\n参数\n描述\n\n\n\nstr\n分隔符，默认为空格\n\n\nnum\n分割次数\n\n\n\n>>> string=\"www.ansheng.me\"\n# 指定切一次，以`.`来分割\n>>> string.split(\".\",1)\n['www', 'ansheng.me']\n# 指定切二次，以`.`来分割\n>>> string.split(\".\",2)\n['www', 'ansheng', 'me']\n按照行分隔，返回一个包含各行作为元素的列表，如果num指定则仅切片num个行.\nsplitlines(self, keepends=False):\n\n\n参数\n描述\n\n\nnum\n分割行的次数\n\n\n# 定义一个有换行的变量，`\\n`可以划行\n>>> string=\"www\\nansheng\\nme\"\n# 输出内容\n>>> print(string)\nwww\nansheng\nme\n# 把有行的转换成一个列表\n>>> string.splitlines(1)\n['www\\n', 'ansheng\\n', 'me']\n检查字符串是否是以指定子字符串开头，如果是则返回 True，否则返回 False。如果参数 beg 和 end 指定值，则在指定范围内检查。\nstartswith(self, prefix, start=None, end=None):\n\n\n参数\n描述\n\n\n\nstr\n检测的字符串\n\n\nstrbeg\n可选参数用于设置字符串检测的起始位置\n\n\nstrend\n可选参数用于设置字符串检测的结束位置\n\n\n\n>>> string=\"www.ansheng.me\"\n>>> string.startswith(\"www\")\nTrue\n>>> string.startswith(\"www\",3)\nFalse\n移除字符串头尾指定的字符（默认为空格）\nstrip(self, chars=None):\n\n\n参数\n描述\n\n\nchars\n移除字符串头尾指定的字符\n\n\n>>> string=\" www.ansheng.me \"\n>>> string\n' www.ansheng.me '\n# 删除空格\n>>> string.strip()\n'www.ansheng.me'\n>>> string=\"_www.ansheng.me_\"\n# 指定要把左右两边的\"_\"删除掉\n>>> string.strip(\"_\")\n'www.ansheng.me'\n用于对字符串的大小写字母进行转换，大写变小写，小写变大写\nswapcase(self):\n>>> string=\"hello WORD\"\n>>> string.swapcase()\n'HELLO word'\n返回\"标题化\"的字符串,就是说所有单词都是以大写开始，其余字母均为小写。\ntitle(self):\n>>> string=\"hello word\"\n>>> string.title()\n'Hello Word'\n根据参数table给出的表(包含 256 个字符)转换字符串的字符, 要过滤掉的字符放到 del 参数中。\ntranslate(self, table, deletechars=None):\n\n\n参数\n描述\n\n\n\ntable\n翻译表，翻译表是通过maketrans方法转换而来\n\n\ndeletechars\n字符串中要过滤的字符列表\n\n\n\n将字符串中的小写字母转为大写字母\nupper(self):\n>>> string=\"hello word\"\n>>> string.upper()\n'HELLO WORD'\n返回指定长度的字符串，原字符串右对齐，前面填充0\nzfill(self, width):\n\n\n参数\n描述\n\n\nwidth\n指定字符串的长度。原字符串右对齐，前面填充0\n\n\n>>> string=\"hello word\"\n>>> string.zfill(10)\n'hello word'\n>>> string.zfill(20)\n'0000000000hello word'\n去除值得两端空格\n>>> var=\" ansheng \"\n>>> var\n' ansheng '\n>>> var.strip()\n'ansheng'\nstr类型和bytes类型转换\n以UTF-8编码的时候，一个汉字是三个字节，一个字节是八位\n3.5.x实例\n代码如下：\n#!/usr/bin/env python\n# _*_ coding:utf-8 _*_\n\nvar = \"中文\"\nfor n in var:\n    print(n)\n\nprint(\"================\")\n\nvar2 = \"zhongwen\"\nfor n in var2:\n    print(n)\n执行结果：\nC:\\Python35\\python.exe F:/Python_code/sublime/Day03/str.py\n中\n文\n================\nz\nh\no\nn\ng\nw\ne\nn\n2.7.x实例\n代码如下：\n#!/usr/bin/env python\n# _*_ coding:utf-8 _*_\n\nvar = \"中文\"\nfor n in var:\n    print(n)\n\nprint(\"================\")\n\nvar2 = \"zhongwen\"\nfor n in var2:\n    print(n)\n执行结果\nC:\\Python27\\python.exe F:/Python_code/sublime/Day03/str.py\n�\n�\n�\n�\n�\n�\n================\nz\nh\no\nn\ng\nw\ne\nn\n通过上面的实例可以知道，Python3.5.x在输出中文或者英文的时候是按照一个字符一个字符来输出的，但是在Python2.7.x就不这样了，Python2.7.x是按照字节来进行输出的，可以看到在输出中文的时候是乱码的，而且还输出了六次，因为在UTF-8编码的情况下一个汉字是等于三个字节的，所以输出了六个乱码的字符。\n在Python3.5.x里面是既可以输出汉字，也可以把输出字节的，利用bytes这个方法，bytes可以将字符串转换为字节\nvar=\"中文\"\nfor n in var:\n    print(n)\n    bytes_list = bytes(n, encoding='utf-8')\n    # 十六进制输出\n    print(bytes_list)\n    for x in bytes_list:\n        # 十进制,bin(x)二进制\n        print(x,bin(x))\n输出的结果\n# 字符串\n中\n# 十六进制\nb'\\xe4\\xb8\\xad'\n# 228=十进制，0b11100100=二进制\n228 0b11100100\n184 0b10111000\n173 0b10101101\n文\nb'\\xe6\\x96\\x87'\n230 0b11100110\n150 0b10010110\n135 0b10000111\nb代表十六进制，xe4这样的是一个十六进制的字节\n其他知识点\n索引\n索引是指某个值在列表或别的数据类型中的一个位置\n定义一个列表，查看列表中Linux值对应在列表中的位置\n>>> list_os = [\"Windows\",\"Linux\",\"Mac\",\"Unix\"]\n>>> list_os.index(\"Linux\")\n1\n>>> list_os[1]\n'Linux'\n使用\\转义\nPython允许你对某些字符进行转义，以此来实现一些难以单纯用字符描述的效果\n# 常用的内容也转义也就是`\\n`和`\\t`了，`\\n`是用来换行的，`\\t`是用来代替一个`tab`键\n>>> string=\"My \\n Name  \\t is\"\n>>> print(string)\nMy\n Name    is\n使用+拼接\n你可以使用+号将多个字符串或字符串变量拼接起来\n>>> a=\"my \"\n>>> b=\"name \"\n>>> c=\"is \"\n>>> d=\"ansheng\"\n>>> a+b+c+d\n'my name is ansheng'\n切片\n切片操作符是序列名后跟一个方括号，方括号中有一对可选的数字，并用冒号分割。注意这与你使用的索引操作符十分相似。记住数是可选的，而冒号是必须的，切片操作符中的第一个数表示切片开始的位置，第二个数表示切片到哪里结束，第三个数表示切片间隔数。如果不指定第一个数，Python就从序列首开始。如果没有指定第二个数，则Python会停止在序列尾。注意，返回的序列从开始位置开始 ，刚好在结束位置之前结束。即开始位置是包含在序列切片中的，而结束位置被排斥在切片外。\n>>> os=\"Linux\"\n>>> os\n'Linux'\n>>> os[0:2]\n'Li'\n>>> os[0:4:2]\n'Ln'\n更多实例如下\n\n\n切片符\n说明\n\n\n\n[:]\n提取从开头到结尾的整个字符串\n\n\n[start:]\n从start到结尾的字符串\n\n\n[:end]\n从开头提取到end - 1\n\n\n[start:end]\n从start提取到end - 1\n\n\n[startsetp]\n从start提取到end-1，每setp个字符提取一个\n\n\n\n索引和切片同时适用于字符串、列表与元组\n\n索引通常用于查找某一个字符串或值\n切片通常用于查找某一个范围内的字符串或值\n\n实例：\n# 定义一个列表，列表内有三个元素\n>>> var=[\"Linux\",\"Win\",\"Unix\"]\n# 通过索引取到了一个值\n>>> var[0]\n'Linux'\n# 通过切片取到了多个值\n>>> var[0:2]\n['Linux', 'Win']\n>>> var[1:3]\n['Win', 'Unix']\n\n原文连接\n\nPython全栈之路系列文章\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "3"}