{"title": "Ajax与Flask传值的跨域问题 - 个人文章 ", "index": "python,flask,ajax", "content": "前后端分离时,关于前端Ajax-Post数据时,遇到的一个问题\n在写一个报名提交的页面,前端组写了前端页面但是没有写后端的传值,本来想构建Flask结构目录但是想实现API的形式,可以控制提交时间段-在不招新的时间关闭后端就打算分离开,form表单提交的Post一开始是这样写的\n$(\"form\").submit(function(){\n    var flagname  = isname();\n    var flagphone = isphone();\n    var flagclass = isclass();\n    var flagemail = isemail();\n    var flaggroup = isgroup();\n\n    if(flagname == true && flagphone == true && flagclass == true \n        && flagemail == true && flaggroup == true){\n        var data={\n            InfoNmae:InfoName.value,\n            InfoPho:InfoPho.value,\n            InfoCls:InfoCls.value,\n            InfoEmail:InfoEmail.value,\n            InfoGroup:arr,\n            InfoPower:InfoPower.value\n        };\n        $.ajax({\n            type:'POST',\n            url: \"/joinus\",\n            data: JSON.stringify(data),\n            dataType : 'json',\n            success:function(res){\n                alert(\"提交成功\");\n            },\n            error: function (res){\n                var json_data=JSON.stringify(res);\n                alert(json_data);\n                // alert(\"现在不迎新哦~\");\n            },\n        });\n    }\n    else {\n        return false;\n    }\n})\n后端是这样\n@app.route(\"/joinus\",methods=['POST'])\ndef index():\n    data=request.get_json(force=True)\n    if data:\n        print(data)\n        return jsonify({\"status\":True})\n    else:\n        return jsonify({\"status\":False})\n一开始想的是,直接将url改为后端运行的绝对路径不行了但是修改之后发现,但是一直报500错误,后来才知道是跨域问题......\n在网上找到了这种方法第一种直接修改数据类型为jsonp,采用GET方法,确实可行.....\n        $.ajax({\n            type:'POST',\n            url: \"http://127.0.0.1:5000/joinus\",\n            data: JSON.stringify(data),\n            dataType : 'jsonp',\n            success:function(res){\n                alert(\"提交成功\");\n            },\n            error: function (res){\n                var json_data=JSON.stringify(res);\n                alert(json_data);\n                // alert(\"现在不迎新哦~\");\n            },\n        });\n第二种就是在flask端加上响应头但是上个链接中在用make_reponse()函数形成响应头时没有将数据json化还是报500错误\n@app.route(\"/api\",methods=['POST'])\ndef index():\n    data=request.get_json(force=True)\n    if data:\n        print(data)\n        res = make_response(jsonify(data))\n        res.headers['Access-Control-Allow-Origin'] = '*'\n        res.headers['Access-Control-Allow-Methods'] = 'POST'\n        res.headers['Access-Control-Allow-Headers'] = 'x-requested-with,content-type'\n        return res\n    else:\n        return jsonify({\"error\":False})\n第三种是应用了flask集成的轮子直接pip install flask_cors\nfrom flask_cors import CORS\n\n# r'/*' 是通配符，让本服务器所有的 URL 都允许跨域请求\nCORS(app, resources=r'/*')\n\n@app.route(\"/joinus\",methods=['GET','POST'])\ndef index():\n    data=request.get_json(force=True)\n    if data:\n        print(data)\n        return jsonify({\"status\": True})\n    else:\n        return jsonify({\"status\": False})\n        $.ajax({\n            type:'POST',\n            crossDomain: true,\n            url: \"http://127.0.0.1:5000/joinus\",\n            data: JSON.stringify(data),\n            dataType : 'json',\n            success:function(res){\n                alert(\"提交成功\");\n            },\n            error: function (res){\n                var json_data=JSON.stringify(res);\n                alert(json_data);\n                // alert(\"现在不迎新哦~\");\n            },\n        });\n感觉第三种方便点,第二种也不错原文链接\n\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "2"}