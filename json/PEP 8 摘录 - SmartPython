{"title": "PEP 8 摘录 - SmartPython ", "index": "规范化,python", "content": "前言\nPEP 8 是python代码规范说明，里面规定了一些推荐的python代码的格式与用法。笔者将在本文中做一些总结，不是为了纯粹的翻译PEP 8，而是根据个人习惯与喜好进行的一个整理。如有谬误，欢迎指出。\nPEP 8 官方文档：这里\nA Follish Consistency is the Hobgoblin of Little Minds\n永远不要为了和已有的文档保持一致而特意做出不自然的改变，否则，这只会限制你的思维，降低你的效率。Guido在这里写下的这些规范是处于代码的可读性考虑的，但是如果有的时候这些规范也不一定适用，例如：\n\n如果使用了这些规范会降低可读性；\n如果代码写于规范面世以前；\n如果代码使用到了老版本的依赖库，然而这些老版本的依赖库且兼容新的规范；\n如果已有代码使用了另外的一种风格；\n\n代码规范\n\n\n多参数情况下适当缩进\n# function\ndef long_function_name(  # no argument on the first line\n        var_one, var_two,  # more indentation to distinguish this from the rest\n        var_three, var_four):\n    print(var_one)\n# list\nmy_list = [\n    1, 2, 3,\n    4, 5, 6,\n    7, 8, 9,  # add a comma here to be consistent with the preceding lines\n    ]\n# long if -statement\nif (this_is_one_thing\n        and that_is_another_thing)  # more indentation to distinguish this\n    do_something()\n\n使用4个空格键<space>替代制表键<tab>\n\n每行字符数控制在79个以内，必要的时候可使用\\\nwith open('/path/to/the/file/to/read') as file_1, \\\n     open('/path/to/the/file/to/read') as file_2:\n    file_2.write(file_1.read())\n\n\n多行分别import依赖库，且须放在全局变量和常量之前\nimport os\nimport sys\nimport other_standard_libraries\nimport related_third_parties\nipmort local applications\n\npython不区分双引号\"和单引号'，选一个适合你自己的风格，然后坚持下去\n\n空白符的规则很繁琐，基本上和英文书写的规范一致，下面列举了部分情况\nham[1:9], ham[1:9:3], ham[1::3], ham[1:9:]\nham[lower+offset : upper+offset]  # equal amounts on either side of the operator\n\n\n在分配默认值或者键值对赋值的时候，等号=周围不要用空格\ndef complex(real, imag=0.0):\n    return magic(r=real, i=img)\n\n关于注释，不要添加与代码逻辑相违背的注释，也不要添加显而易见的注释。记住一点，注释是为了增强可读性。\n\n关于命名,不同的对象会有不同的规范：\n\n包：小写，可以使用但是不推荐使用下划线_。一些利用C/C++编写的包的名字可以以下划线开头；\n类：CapWords命名规范，例如CapitalizeWords, HTTPServerError\n异常：其本质是一个类，所以沿用上面的规范，另外需要以Error_开头\n函数：小写，并且用下划线隔开\n方法与变量：沿用函数的命名规范，另外非公有变量需要以_开头\n\n\n\n方法规范\n\n与None作比较的使用，不要使用==，使用is或者is not\n字符串的合并操作不要使用a += b或者a = a + b，使用''.join()\n从Excepetion而不是BaseException库中继承异常\n抛出异常的时候，请使用raise ValueError('message')\n\n在捕捉异常语句中，请尽可能指明捕捉的异常类别。如果需要捕捉所有扰乱程序的异常，可以使用\ntry:\n    some_magic()\nexcept Exception as exc:\n    print(str(exc))\n    raise some_error\nelse:\n    everything_is_good()\nfinally:\n    clean_up()\n\n\n对于不同的输入，函数的返回值类型应该保持一致\ndef foo(x):\n    if x >= 0:\n        return math.sqrt(x)\n    else:\n        return None  # should also be a value or None\n\n\n字符串操作中，尽可能使用字符串类的方法\n''.startswith()\n''.endswith()\n\n判断对象的类别，尽量使用isinstance()\n\n欢迎讨论，欢迎指出问题Weiming25 May 2016\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "3"}