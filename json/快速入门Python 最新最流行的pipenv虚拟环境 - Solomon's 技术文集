{"title": "快速入门Python 最新最流行的pipenv虚拟环境 - Solomon's 技术文集 ", "index": "pycon,virtualenv,python", "content": "2018的PyCon把最新型最先进的Python虚拟环境pipenv吵得火热。看了下介绍感觉真的很好用，它在virtualenv的基础上包装了一些更便捷的功能，解决了很多很多virtualenv欠缺的事情。\n参考pipenv的前世今生：PyCon 2018 之 Python 未来的依赖管理工具 pipenv参考：pipenv 更优雅的管理你的python开发环境直接参考创造者Kenneth的官方说明\n简单说，pipenv就是把pip和virtualenv包装起来的一个便携工具。\n它不会在你的项目文件夹里生成一大堆东西，只有两个文本文件：\n\n\nPipfile, 简明地显示项目环境和依赖包。\n\nPipfile.lock, 详细记录环境依赖，并且利用了hash算法保证了它完整对应关系。只在你使用pipenv lock命令后才出现。\n\n安装\nMac安装很简单，只要用Homebrew：\n$ brew install pipenv\nLinux的话，是用pip安装：\n$ pip install --user pipenv\n安装好后，终端里还调取不了命令，因为它现在只是个包。需要先找到它的真是路径，然后为了方便把它加到bash或zsh等shell里面：\n# 先获取python包的位置\n$ python -m site --user-base\n比如我的显示在/home/pi/.local，那么pipenv就藏在/home/pi/.local/bin里。所以需要打开shell的设置文件，比如bash的话就编辑~/.bash_profile, zsh的话就编辑~/.zshrc，在里面把刚才查到的包路径存进去：\nalias pipenv=\"home/pi/.local/bin/pipenv\"\n注意：我没有像其他人一样整个export进去，因为不知道为什么树莓派里面的zsh使用不来这个。\n创建虚拟环境\n在某个文件夹创建一个Python3环境：\n# 泛指python的版本\n$ pipenv --three\n\n# 或者，特指某个python版本\n$ pipenv --python 3.5\n\n# 或者，特指某个位置的python\n$ pipenv --python <path/to/python>\n然后就会显示如下动态，可以看出来，pipenv调用了virtualenv，从本机把Python3环境拷贝一份到某个本机位置，然后在你的项目文件夹里只创建了两个文件Pipfile和Pipfile.lock，记录了所有你这个项目需要的环境配置，内容极其简单易懂：\n\n显示当前虚拟环境的储存位置\n$ pipenv --venv\n运行环境\n运行虚拟环境(无需进入特定shell即可按照该环境运行脚本)：\n$ pipenv run python xxx.py\n进入环境\n进入虚拟环境：\n# 进入虚拟环境\n$ pipenv shell\n\n# 退出虚拟环境\n$ exit\n其实进入pipenv虚拟环境，本质上就是virtualenv的source ./bin/activate动作，只是使用不一样。进入后，你会发现用deactivate也是能生效的。但是：\n注意：进入pipenv环境后千万不要用deactivate退出，而应该用exit退出。否则你再进去这个环境就会产生错误：\nShell for UNKNOWN_VIRTUAL_ENVIRONMENT already activated. \nNo action taken to avoid nested environments.\n安装packages包\n$ pipenv install <包名>\n你需要知道的是，进入pipenv虚拟环境后，你还是可以用pip install来安装包的，也能正常使用，因为virtualenv就是这样做的。但是，这样你就不算使用了pipenv策略了，如果你要在项目文件夹里的Pipfile记录所有项目需要的依赖环境，就应该放弃使用pip install而使用pipenv install，这样你的Pipfile就会精确记录所有需要的依赖。\n重新安装所有packages：有时候需要冲github上clone项目，下载好后，只需要一句话就可以完成创建环境：\n# 根据Pipfile中的描述安装所有依赖\n$ pipenv install\n\n# 或者，根据Pipfile.lock中的描述安装所有依赖\n$ pipenv install --ignore-pipfile\n\n# 或者，只安装dev组的依赖\n$ pipenv install --dev\n\n# 或者，根据曾经在pip上导出requirements.txt安装依赖\n$ pipenv install -r <path-to-requirements.txt>\n按照树形结构显示当前环境的依赖关系：\n$ pipenv graph\n然后就会显示出如下效果：\n删除虚拟环境：\n# 删除某个包\npipenv uninstall <包名>\n\n# 删除整个环境\n$ pipenv --rm\n\npipenv lock时遇到的SSL Error\n错误反馈如下：\nPipfile.lock not found, creating…\nLocking [dev-packages] dependencies…\nLocking [packages] dependencies…\nusr/local/Cellar/pipenv/2018.5.18/libexec/lib/python3.6/site-packages/pipenv/vendor/requests/sessions.py\", line 508, in request\n    resp = self.send(prep, **send_kwargs)\n  File \"/usr/local/Cellar/pipenv/2018.5.18/libexec/lib/python3.6/site-packages/pipenv/vendor/requests/sessions.py\", line 618, in send\n    r = adapter.send(request, **kwargs)\n  File \"/usr/local/Cellar/pipenv/2018.5.18/libexec/lib/python3.6/site-packages/pipenv/vendor/requests/adapters.py\", line 506, in send\n    raise SSLError(e, request=request)\nrequests.exceptions.SSLError: HTTPSConnectionPool(host='pypi.org', port=443): Max retries exceeded with url: /pypi/pyobjc-framework-netfs/json (Caused by SSLError(SSLError(1, u'[SSL: TLSV1_ALERT_PROTOCOL_VERSION] tlsv1 alert protocol version (_ssl.c:590)'),))\n参考pipenv的issue解答。\n最佳解决方案是：\n$ pip install pyopenssl\n因为这种SSL Error在其他地方也常见，一般都是没有在环境里安装pyopenssl的问题。所以不管你在哪个环境，如果出现这个SSL问题，就先装pyopenssl解决。注意：不要用pipenv install pyopenssl，因为你真的不想在每个环境里都重新装一遍这个，干脆把它撞到本机：$ pip install pyopenssl.\n常见错误操作\n不要在pipenv shell里面运行pipenv install\n\n不要在pipenv shell里面运行deactivate\n\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "2"}