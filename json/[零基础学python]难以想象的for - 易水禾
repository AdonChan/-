{"title": "[零基础学python]难以想象的for - 易水禾 ", "index": "零基础,python", "content": "看这个标题，有点匪夷所思吗？为什么for是难以想象的呢？因为在python中，它的确是很常用而且很强悍，强悍到以至于另外一个被称之为迭代的东西，在python中就有点相形见绌了。在别的语言中，for的地位从来没有如同python中这么高的。\n\n废话少说，上干活。\n\nfor的基本操作\n\nfor是用来循环的，是从某个对象那里依次将元素读取出来。看下面的例子，将已经学习过的数据对象用for循环一下，看看哪些能够使用，哪些不能使用。同时也是复习一下过往的内容。\n\n>>> name_str = \"qiwsir\"\n>>> for i in name_str:  #可以对str使用for循环\n...     print i,\n...                     \nq i w s i r\n\n>>> name_list = list(name_str)\n>>> name_list\n['q', 'i', 'w', 's', 'i', 'r']\n>>> for i in name_list:     #对list也能用\n...     print i,\n... \nq i w s i r\n\n>>> name_set = set(name_str)    #set还可以用\n>>> name_set\nset(['q', 'i', 's', 'r', 'w'])\n>>> for i in name_set:\n...     print i,\n... \nq i s r w\n\n>>> name_tuple = tuple(name_str)\n>>> name_tuple\n('q', 'i', 'w', 's', 'i', 'r')\n>>> for i in name_tuple:        #tuple也能呀\n...     print i,\n... \nq i w s i r\n\n>>> name_dict={\"name\":\"qiwsir\",\"lang\":\"python\",\"website\":\"qiwsir.github.io\"}\n>>> for i in name_dict:             #dict也不例外\n...     print i,\"-->\",name_dict[i]\n... \nlang --> python\nwebsite --> qiwsir.github.io\nname --> qiwsir\n\n\n除了上面的数据类型之外，对文件也能够用for，这在前面有专门的《不要红头文件》两篇文章讲解有关如何用for来读取文件对象的内容。看官若忘记了，可去浏览。\n\nfor在list解析中，用途也不可小觑，这在讲解list解析的时候，业已说明，不过，还是再复习一下为好，所谓学而时常复习之，不亦哈哈乎。\n\n>>> one = range(1,9)         \n>>> one\n[1, 2, 3, 4, 5, 6, 7, 8]\n>>> [ x for x in one if x%2==0 ]\n[2, 4, 6, 8]\n\n\n什么也不说了，list解析的强悍，在以后的学习中会越来越体会到的，佩服佩服呀。\n\n列位如果用python3，会发现字典解析、元组解析也是奇妙的呀。\n\n要上升一个档次，就得进行概括。将上面所说的for循环，概括一下，就是下图所示：\n\n\n\n用一个文字表述：\n\nfor iterating_var in sequence:\n    statements\n\n\niterating_var是对象sequence的迭代变量，也就是sequence必须是一个能够有某种序列的对象，特别注意没某种序列，就是说能够按照一定的脚标获取元素。当然，文件对象属于序列，我们没有用脚标去获取每行，如果把它读取出来，因为也是一个str,所以依然可以用脚标读取其内容。\n\nzip\n\nzip是什么东西？在交互模式下用help(zip),得到官方文档是：\n\n\n  zip(...)\n  zip(seq1 [, seq2 [...]]) -> [(seq1[0], seq2[0] ...), (...)]\n\n\n\n  Return a list of tuples, where each tuple contains the i-th element from each of the argument sequences.  The returned list is truncated in length to the length of the shortest argument sequence.\n\n\n通过实验来理解上面的文档：\n\n>>> a = \"qiwsir\"\n>>> b = \"github\"\n>>> zip(a,b)\n[('q', 'g'), ('i', 'i'), ('w', 't'), ('s', 'h'), ('i', 'u'), ('r', 'b')]\n>>> c = [1,2,3]\n>>> d = [9,8,7,6]\n>>> zip(c,d)\n[(1, 9), (2, 8), (3, 7)]\n>>> e = (1,2,3)\n>>> f = (9,8)\n>>> zip(e,f)\n[(1, 9), (2, 8)]\n\n>>> m = {\"name\",\"lang\"}  \n>>> n = {\"qiwsir\",\"python\"}\n>>> zip(m,n)\n[('lang', 'python'), ('name', 'qiwsir')]\n>>> s = {\"name\":\"qiwsir\"}\n>>> t = {\"lang\":\"python\"}\n>>> zip(s,t)\n[('name', 'lang')]\n\n\nzip是一个内置函数，它的参数必须是某种序列数据类型，如果是字典，那么键视为序列。然后将序列对应的元素依次组成元组，做为一个list的元素。\n\n下面是比较特殊的情况，参数是一个序列数据的时候，生成的结果样子：\n\n>>> a  \n'qiwsir'\n>>> c  \n[1, 2, 3]\n>>> zip(c)\n[(1,), (2,), (3,)]\n>>> zip(a)\n[('q',), ('i',), ('w',), ('s',), ('i',), ('r',)]\n\n\n这个函数和for连用，就是实现了：\n\n>>> c\n[1, 2, 3]\n>>> d\n[9, 8, 7, 6]\n>>> for x,y in zip(c,d):    #实现一对一对地打印\n...     print x,y\n... \n1 9\n2 8\n3 7\n>>> for x,y in zip(c,d):    #把两个list中的对应量上下相加。\n...     print x+y\n... \n10\n10\n10\n\n\n上面这个相加的功能，如果不用zip，还可以这么写：\n\n>>> length = len(c) if len(c)<len(d) else len(d)    #判断c,d的长度，将短的长度拿出来\n>>> for i in range(length):\n...     print c[i]+d[i]\n... \n10\n10\n10\n\n\n以上两种写法那个更好呢？前者？后者？哈哈。我看差不多了。还可以这么做呢：\n\n>>> [ x+y for x,y in zip(c,d) ]\n[10, 10, 10]\n\n\n前面多次说了，list解析强悍呀。当然，还可以这样的：\n\n>>> [ c[i]+d[i] for i in range(length) ]\n[10, 10, 10]\n\n\nfor循环语句在后面还会经常用到，其实前面已经用了很多了。所以，看官应该不感到太陌生。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "6"}