{"title": "兄弟组团搞事情LAMP（一） - 达龙 ", "index": "linux,python,mysql", "content": "博文参考\nhttp://www.178linux.com/51895\nhttp://www.178linux.com/63734\nhttp://www.178linux.com/5187\n人物背景\nLAMP\nLinux Apache Mysql,MariaDB Perl,PHP,Python: \n一组常用来搭建动态网站或者服务器的开源软件，本身都是各自独立的程序，由于常被放在一起使用，因此称之为LAMP，LAMP是最强大的网站解决方案\n特点\nLAMP具有Web资源丰富、轻量、快速开发的特点，其优势在于通用、跨平台、高性能、低价格，因此LAMP无论是性能、质量还是价格都是企业搭建网站的首选方案。\n理解Web资源的概念\n静态资源：原始形式与响应给客户端的结果一致，如jpeg,html,plaintext，占80%\n动态资源：原始形式通常为程序文件，需运行对应环境的子进程返回执行结果，占20%.但需要IO请求的资源大约为20%.\nCGI：Common Gateway Interface\nCGI协议定义了Web服务器程序与后端服务进程进行数据交换的规范，以prefork为例，Browser并行请求多个资源时，httpd为每个请求建立一个子进程，如果请求动态资源时，httpd调用php模块对动态资源进行处理，再返回给Web服务器响应客户端。过程中httpd与php及mysqld之间的通信就使用了CGI接口。\nhttpd\n完整的http请求处理过程\n(1) 建立或处理连接：接收请求或拒绝请求；\n\n(2) 接收请求：接收来自于网络上的主机请求报文中对某特定资源的一次请求的过程；\n\n(3) 处理请求：对请求报文进行解析，获取客户端请求的资源及请求方法等相关信息；\n\n(4) 访问资源：获取请求报文中请求的资源；\n\n(5) 构建响应报文：\n\n(6) 发送响应报文：\n\n(7) 记录日志：\nhttpd所支持的处理模型有哪些，他们的分别使用于哪些环境\n    MPM：Multipath processing Modules (多路处理模块)\n\n    prefork：多进程模型，每个进程响应一个请求；\n\n         一个主进程：负责生成子进程及回收子进程；负责创建套接字；负责接收请求，并将其派发给某子进程进行处理；\n\n         n个子进程：每个子进程处理一个请求；\n\n         工作模型：会预先生成几个空闲进程，随时等待用于响应用户请求；最大空闲和最小空闲；\n\n    worker：多进程多线程模型，每线程处理一个用户请求；\n\n         一个主进程：负责生成子进程；负责创建套接字；负责接收请求，并将其派发给某子进程进行处理；\n\n         多个子进程：每个子进程负责生成多个线程；\n\n    并发响应数量：m*n每个线程：负责响应用户请求；\n\n         m：子进程数量\n\n         n：每个子进程所能创建的最大线程数量；\n\n    event：事件驱动模型，多进程模型，每个进程响应多个请求；\n\n         一个主进程 ：负责生成子进程；负责创建套接字；负责接收请求，并将其派发给某子进程进行处理；\n\n         子进程：基于事件驱动机制直接响应多个请求；\n\n    httpd-2.2: 仍为测试使用模型；\n\n    httpd-2.4：event可生产环境中使用；\n\n请求流程\n一次http事物\n客户端通过浏览器发出http请求，请求当中包含一部分内容，内容不是最关键的，关键的是在内容前面附加一个http请求首部，用来告诉服务器端，客户端是如何请求的，用哪种方法进行请求的，请求哪一个虚拟机等等。\n\n请求发送到服务器端后，服务器端要分析请求，分析这个请求首部用什么url，用什么方法请求，请求哪个主机，用哪个协议等等。然后构建响应报文，响应时还要告诉客户端我是怎么响应你的，给出响应状态码（100-500）。客户端利用这些首部信息完成内容之外的交换信息。则这一次http事务完成。\n\n    报文语法格式：\n        request 报文\n            <method> <request-URL> <version>\n            <headers>\n\n            <entity-body>\n        response 报文\n            <version> <status> <reason-phrase>\n            <headers>\n\n            <entity-body>\n请求流程\n   用户请求先到达内核空间的网络协议栈，内核空间通过web服务所监听的套接字socket，可以将用户请求转发给用户空间的http服务进程。静态资源是http服务进程向内核发请求，去磁盘找到这个资源，没有就显示Not Found，有就把加载的资源返回给进程，先到内核自己的内存中。其中进程把任务交给内核后到内核把资源返回进程之间，进程处于空闲状态，我们把这个状态称为阻塞状态。拿到资源后，进程构建响应报文，把资源的前面加上响应首部，发到内核空间，通过通信子网进行向外发送。即达成了一次http事务吧。\n静态资源：Client -- http 协议--> httpd\n补充：\n如果不阻塞，则注册一个事务，就去做别的事情，等这边的事情好了，提醒一下就好了，这种机制叫做AIO机制。\n\n\n上面的，内核加载完了资源放到了内存中，然后又返给进程，这个时候又浪费了一次用户空间，所以有一种Sendfile机制，可以直接在内核里面添加响应首部，然后传给用户。这样就省去了一回用户空间，提高了效率。\n\n动态资源请求\n从磁盘加载后，进程将资源传给PHP，PHP根据是否用到数据库去调用数据库，都处理好了，传递给进程。\n\n客户端通过http协议将请求传给内核，那么httpd进程通过三种方法与php结合：\n    modules: 把 php 编译成为 httpd 的模块\n    cgi：\n    fastcgi：\nphp要联系mysql。要用PHP代码扮演客户端，经过mysql协议联系。\n\n\nClient -- http --> httpd --> libphp5.so () -- mysql --> MySQL server\n\nPHP\n简介\nphp是可嵌入html中的程序，支持不同的存储、字符、加密解密的功能，这些机制都是模块化(extensions)实现的，如php与MySQL的连接需安装php-mysql模块。php的模块是为了丰富 php 功能的扩展，而php作为httpd的模块是为了让Web服务器支持动态Web资源解析的功能。\nhttpd与php的结合方式主要有三种\nCGI：由php解释器与httpd通过CGI通信\nModule：不同的mpm需要不同的php程序包，无法混用 prefork：libphp程序包 worker, event：libphp-zts程序包\nFastCGI\nfcgi是简装版的CGI协议，httpd只把URL重新封装后通过 FCGI 传递给 fcgi 服务端，动态资源由 fcgi 服务器端从 mysql 加载，处理完成再返回给httpd，此时httpd相当于是一个反向的代理服务器，接收任意客户端的请求，为fcgi Server提供服务。 \n此时php以fpm机制监听在一个套接字上，可运行在另一台主机上，如httpd作为一个反向代理服务器且分发动态资源请求给多个fcgi服务器，以完成更好的动态资源处理，当然需要处理好用户section丢失的问题，一种方式通过ip地址识别用户；另一种方式通过绑定cookie，且同步section给多态服务器；另一种方式是把section放在单独的具有冗余功能的服务器中保存在redis(nosql)数据库中； \nphp-fpm工作模式类似于httpd的prefork，主控进程接收请求，通过创建子进程处理httpd客户端的并发请求。子进程可按需生成，也可动态生成，通过连接池机制管理子进程的数量和状态，有活动、空闲、未激活等几种状态。\nModule形式安装php\nyum -y install php          #作为httpd的modules\nrpm -ql | grep php\nrpm -ql php-common          #公共组件，能够被httpd与php解释器调用\n\n#作为httpd模块的php配置文件：/etc/httpd/conf.d/php.conf\n#php核心的配置文件：/etc/php.ini, /etc/php.d/*.ini\n\nvi /etc/php.ini\n    格式：[section_id]\n    ;;;;;;;;;;;;;;;;;;;\n    ; Quick Reference ;\n    ;;;;;;;;;;;;;;;;;;;\n    ; display_errors\n    ;   Default Value: On           #默认为开发环境\n    ;   Development Value: On       #开发环境\n    ;   Production Value: Off       #生产环境\n\n    date.timezone = Asia/Shanghai   #默认读取系统时区，会有waring\nFastCGI方式安装php\nPHP-FPM 是一个简单可靠的 FastCGI 进程管理器（FastCGI Process Manager），从 PHP 5.3.3 开始就成为了 PHP 的内置管理器。Apache 官方网站也提供了配置 Apache httpd 2.4.x 使用 mod_proxy_fcgi 和 PHP-FPM 运行 php 程序的基本方法和设置运行方式的简单介绍。\n\nphp-fpm(FastCGI Process Manager)作为独立的守护进程，侦听一个套接字，接收并响应来自前端程序的请求，即httpd为FastCGI客户端。对于繁忙的站点能提升并发性能。因为 Apache 可以专心处理除 php 之外的静态网页及元素，反而 httpd 进程本身占用的 CPU 和内存可以显著降低，从而从整体上降低资源消耗。另外一点是方便后期升级为分布式的Web服务器。\n代理服务器\n正向：为有限客户端发送给任意服务器，服务于客户端\n反向：接收来自任意客户端请求，发送给有限服务器，服务于服务端\nphp的配置文件\n官方说明：http://php.net/manual/zh/ini....\nLAMP实验搭建\n\n1. 实验主框架LAMP采用编译安装。\n2. 分离HTTPD，PHP，MARIADB。\n3. 两台服务器能够各自被访问且内容相同。\n程序包准备\napr-1.5.2.tar.gz                apr是apache的运行库，提供了软件允许所需要的库文件。\napr-util-1.5.4.tar.gz            可以理解为apr的扩展，支持更加多的数据接口与封装接口。\nhttpd-2.4.20.tar.bz2              http程序，2.4支持了众多新特性，最为主要的是event模型。\nmariadb-5.6.20.tar.gz              完全开源的关系型数据库，是mysql的一个分支。\nphp-5.6.20.tar.gz                  php程序，负责解析动态请求。\nxcache-3.2.0.tar.gz                PHP的加速器程序，能够通过缓存来加速PHP。\n\nphpMyAdmin-4.6.0-all-languages.zip   图形化数据库管理工具，基于PHP开发，可选。\nwordpress-4.5.zip                  基于PHP开发的开源的blog平台，可选。\nDiscuz_X3.1_SC_GBK.zip          基于PHP开发的论坛，可选。\n软件准备\n[开发包组]\nDevelopment Tools    开发工具包\n\n[apache]\npcre-devel            pcre正则表达式支持库\nopenssl-devel        openssl开发包\n\n[PHP]\nlibxml2-devel        xml的开发包\nbzip2-devel            bzip2的开发包\nlibmcrypt-devel        加密扩展开发包\nmhash-devel            mhash加密开发包\n配置文件预览表\n\nWeb Server 1 (192.168.1.1)\nhttpd编译安装\n编译安装\n[root@host1 ~]# yum groupinstall \"Development Tools\" -y                安装依赖的包组“Development Tools”\n[root@host1 ~]# yum install pcre-devel openssl-devel -y                安装正则表达式的开发包pcre-devel 与 openssl的开发包openssl-devel\n[root@host1 ~]# rpm -q apr-util && yum remove apr-util -y            查询apr-util是否安装，安装了就卸载，是为了防止默认安装了低版本的apr而使得非常混乱。\n[root@host1 ~]# rpm -q apr && yum remove apr -y                        查询apr是否安装，安装了就卸载，是为了防止默认安装了低版本的apr而使得非常混乱。\n[root@host1 ~]# rpm -q httpd && yum remove httpd -y                    查看httpd是否安装，安装了就卸载，是为了防止默认安装了低版本的httpd。\n\n[root@host1 ~]# useradd -s /sbin/nologin -r apache                     创建系统用户并不能登陆，创建用户时会自动创建相同名称的组。    \n\n[root@host1 source]# cd source/                                        cd到存放源码的目录。\n[root@host1 source]# tar xf source/apr-1.5.2.tar.gz                      解压apr\n[root@host1 source]# tar xf source/apr-util-1.5.4.tar.gz            解压apr-util\n[root@host1 source]# tar xf source/httpd-2.4.20.tar.bz2                解压httpd\n\n[root@host1 source]# cd apr-1.5.2                                    cd到apr-1.5.2的目录。\n[root@host1 apr-1.5.2]# ./configure --prefix=/usr/local/apr            编译安装的环境检查，生成编译安装配置清单文件，并制定程序存放位置。\n[root@host1 apr-1.5.2]# make && make install                        编译以及复制文件。\n\n[root@host1 apr-1.5.2]# cd ../apr-util-1.5.4                        cd到apr-util目录\n[root@host1 apr-util-1.5.4]# ./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr        检查环境，生成编译安装配置清单文件，指定程序存放位置以及apr的安装位置。\n[root@host1 apr-util-1.5.4]# make && make install                    编译以及复制文件。\n\n[root@host1 apr-util-1.5.4]# cd ../httpd-2.4.20                    cd到httpd-2.4.20的目录。\n[root@host1 httpd-2.4.20]# ./configure \\                        检查环境，生成编译安装配置清单文件。\n> --prefix=/web/apache \\                                        指定程序存放位置。\n> --sysconfdir=/etc/httpd \\                                     指定配置文件存放位置。\n> --enable-so \\                                                 启用共享对象\n> --enable-ssl \\                                                启用ssl\n> --enable-cgi \\                                                启用cgi\n> --enable-rewrite \\                                            启用rewrite重写\n> --with-zlib \\                                                 启用zlib库\n> --with-pcre \\                                                 启用pcre正则\n> --with-apr=/usr/local/apr \\                                   指定apr位置\n> --with-apr-util=/usr/local/apr-util \\                         指定apr-util位置\n> --enable-modules=most \\                                       启用大部分模块\n> --enable-mpms-shared=all \\                                    启用所有的MPM模型，prefork worker event\n> --with-mpm=event                                              默认启用event模型\n[root@host1 source]# make && make install                       编译以及复制文件。\n\n[root@host1 source]# cd ~\n[root@host1 ~]# echo \"export PATH=/web/apache/bin:$PATH\" > /etc/profile.d/httpd.sh   写入二进制可执行文件路径至$PATH变量。\n[root@host1 ~]# ln -s /web/apache/include /usr/include/httpd                             在/usr/include中创建链接指向httpd的头文件\n[root@host1 ~]# echo \"PidFile  \\\"/var/run/httpd.pid\\\"\" >> /etc/httpd/httpd.conf\\     将PID的路径写入httpd的配置文件\n[root@host1 ~]# echo \"MANPATH /web/apache/man\" >> /etc/man.config                     将httpd的man文件路径写入man的配置文件。\n[root@host1 ~]# vim /etc/rc.d/init.d/httpd                创建启动脚本，并修改一下主要变量的参数的值，脚本在本文最后提供。\n....\napachectl=/web/apache/bin/apachectl                        \nhttpd=${HTTPD-/web/apache/bin/httpd}\nprog=httpd\npidfile=${PIDFILE-/var/run/httpd.pid}\nlockfile=${LOCKFILE-/var/lock/subsys/httpd}\n....\n[root@host1 ~]# chmod +x /etc/rc.d/init.d/httpd                    给予启动脚本执行权限。\n[root@host1 ~]# chkconfig --add httpd                            将httpd添加进开机启动。\n[root@host1 ~]# chkconfig --level 3 httpd on                        将httpd设置为在level 3都启动。\n[root@host1 ~]# service httpd start                                脚本启动httpd。\n配置文件\n[root@host1 ~]# vim /etc/httpd/httpd.conf                        配置httpd.conf\nLoadModule proxy_module modules/mod_proxy.so                    启用代理模块。\nLoadModule proxy_fcgi_module modules/mod_proxy_fcgi.so            启用基于fcgi的传输模块。\nUser apache                                                        指定子进程的属主。\nGroup apache                                                    指定子进程的属组。\nInclude /etc/httpd/extra/httpd-vhosts.conf                        开启此项会自动去读hyyp-vhosts.conf这个配置文件。\nAddType application/x-httpd-php  .php                            增加类型识别PHP。\nAddType application/x-httpd-php-source  .phps                    增加类型识别PHPS。\n\n[root@host1 ~]# vim /etc/httpd/extra/httpd-vhosts.conf            编辑httpd-vhost.conf\n<Virtualhost *:80>                                                增加一个虚拟主机。\n        documentroot \"/web/data\"                                此主机的根目录。\n        servername www.xiao.com                                    此主机的服务器名称即域名。\n        errorlog \"/web/log/error.log\"                            错误日志存放位置。\n        customlog \"/web/log/access.log\" common                    访问日志存放位置已经格式指定为common这个内置配置。\n\n        proxyrequests off                                                        关闭正想代理。\n        ProxyPassMatch ^/(.*\\.php)$ fcgi://192.168.1.3:9000/web/data/$1            将.PHP结尾的文件的请求都通过fcgi转向192.168.1.3:9000/web/data去。\n\n        <directory \"/web/data\">                                    此虚拟主机目录/web/data的属性。\n                options none                                    目录选项为none。\n                DirectoryIndex index.php index.html                默认的主页文件为index.php 次之为index.html\n                allowoverride none                                目录配置检查为none。\n                require all granted                                允许多有主机访问，没有做访问控制。\n        </directory>\n</Virtualhost>\n[root@host1 ~]# mkdir -pv /web/{data,log}                        创建日志文件存放目录。\n[root@host1 ~]# service httpd reload                            重载配置文件。\n网页部署\n[root@host1 ~]# cd source/\n[root@host1 source]# cp Discuz_X3.2_SC_UTF8.zip /web/data        \n[root@host1 data]# unzip Discuz_X3.2_SC_UTF8.zip\n[root@host1 data]# chown -R apache:apache .\n注：需要在fastcgi指定的PHP服务器中的路径下拥有相同的文件才可通过http访问192.168.1.1来调用PHP服务器，也就是说此处服务器只是存放一个对应的文件用来映射访问，真正的操作在PHP服务器上执行。\nWeb Server 2 (192.168.1.2)\n编译安装\n编译安装过程与web sever1相同\n文件配置\n[root@host2 ~]# vim /etc/httpd/httpd.conf                        与web1基本一致，就不做解释了。\nLoadModule proxy_module modules/mod_proxy.so\nLoadModule proxy_fcgi_module modules/mod_proxy_fcgi.so\nUser apache\nGroup apache\nInclude /etc/httpd/extra/httpd-vhosts.conf\nAddType application/x-httpd-php  .php\nAddType application/x-httpd-php-source  .phps\n\n[root@host2 ~]# vim /etc/httpd/extra/httpd-vhosts.conf\n<Virtualhost *:80>\n        documentroot \"/web/data\"\n        servername www.xiao.com\n        errorlog \"/web/log/error.log\"\n        customlog \"/web/log/access.log\" common\n\n        proxyrequests off\n        ProxyPassMatch ^/(.*\\.php)$ fcgi://192.168.1.3:9000/web/data/$1\n\n        <directory \"/web/data\">\n                options none\n                DirectoryIndex index.php index.html\n                allowoverride none\n                require all granted\n        </directory>\n</Virtualhost>\n[root@host2 ~]# mkdir -pv /web/{data,log}\n[root@host2 ~]# service httpd restart\n网页部署\n[root@host2 ~]# cd source/\n[root@host2 source]# cp Discuz_X3.2_SC_UTF8.zip /web/data\n[root@host2 data]# unzip Discuz_X3.2_SC_UTF8.zip\n[root@host2 data]# chown -R apache:apache .\n注：需要在fastcgi指定的PHP服务器中的路径下拥有相同的文件才可通过http访问192.168.1.2来调用PHP服务器，也就是说此处服务器只是存放一个对应的文件用来映射访问，真正的操作在PHP服务器上执行。\nphp server\nphp server (192.168.1.3)\n编译安装\n[root@host3 ~]# yum groupinstall \"Development Tools\" -y            安装依赖包组。\n[root@host3 ~]# yum install \"libxml2-devel\" \"bzip2-devel\" \"libmcrypt-devel\" \"mhash-devel\" -y         安装依赖的包。\n\n[root@host3 ~]# useradd -s /sbin/nologin -r php                    创建php程序的属主。\n\n[root@host3 ~]# cd source/                                            \n[root@host3 source]# tar xf php-5.6.20.tar.gz                    解压php源码包\n[root@host3 source]# cd php-5.6.20                                CD进php-5.6.20目录\n[root@host3 php-5.6.20]# ./configure \\                            检查环境，生成编译安装配置清单文件。\n--prefix=/usr/local/php \\                                        指定php程序安装位置。\n--with-mysql=mysqlnd \\                                            指定mysql为mysqlnd驱动，mysqlnd是新版的mysql的驱动。\n--with-openssl \\                                                启用openssl\n--with-mysqli=mysqlnd \\                                            指定mysqli为mysqlnd驱动，mysqli为php-mysql的进阶扩展。\n--enable-mbstring \\                                                支持Multi-Byte String ，编码库。\n--with-freetype-dir \\                                            启用freetype字体引擎。    \n--with-jpeg-dir \\                                                启用支持jpeg格式的图片。\n--with-png-dir \\                                                启用支持png格式的图片。\n--with-zlib \\                                                    启用支持zlib数据压缩。\n--with-libxml-dir=/usr \\                                        启用xml的支持库，支持xml格式的文件\n--enable-xml  \\                                                    启用xml功能。\n--enable-sockets \\                                                启用套接字。\n--enable-fpm \\                                                    启用fpm，fastcgi管理器。\n--with-mcrypt  \\                                                启用加密扩展库mcrypt。\n--with-config-file-path=/etc \\                                    指定配置文件php.ini路径。\n--with-config-file-scan-dir=/etc/php.d \\                        指定配置文件目录，php.d\n--with-bz2\n[root@host3 php-5.6.20]# make && make install                编译安装，复制文件\n\n[root@host3 php-5.6.20]# cp php.ini-production /etc/php.ini            复制的配置文件php.ini。\n[root@host3 php-5.6.20]# cp lamp/php-5.6.20/sapi/fpm/init.d.php-fpm /etc/rc.d/init.d/php-fpm        复制php-fpm的启动脚本。\n[root@host3 php-5.6.20]# chmod +x /etc/rc.d/init.d/php-fpm            给予启动脚本执行权限。\n[root@host3 php-5.6.20]# echo \"export PATH=/usr/local/php/bin:/usr/local/php/sbin:$PATH\" > /etc/profile.d/php.sh    指定二进制可执行文件。\n[root@host3 php-5.6.20]# echo \"/usr/local/php/lib\" > /etc/ld.so.conf.d/php.conf     写入库文件。\n[root@host3 php-5.6.20]# ln -sv /usr/local/php/include /usr/include/php        写入头文件。\n[root@host3 php-5.6.20]# echo \"MANPATH /usr/local/php/man\" >> /etc/man.config    写入man文件。\n[root@host3 php-5.6.20]# cp etc/php-fpm.conf.default etc/php-fpm.conf    复制php-fpm的配置文件。\n[root@host3 php-5.6.20]# vim etc/php-fpm.conf        编辑php-fpm.conf\npid = /usr/local/php/var/run/php-fpm.pid            PID路径\nuser = php                进程属主\ngroup = php                进程属组\nlisten = 192.168.1.3:9000                监听的IP，端口。\npm = dynamic                            指定进程管理方式为dynamic，动态调整。也可设置为静态static。\npm.max_children = 50                    允许的最大的php-fpm子进程数。\npm.start_servers = 5                    动态模式下，PHP启动时的php-fpm进程数。\npm.min_spare_servers = 2                动态模式下服务器空闲时最小的php-fpm进程数。\npm.max_spare_servers = 8                动态模式下服务器空闲时最大的php-fpm进程数。\n[root@host3 php-5.6.20]# chkconfig --add php-fpm        加入开机自启。\n[root@host3 php-5.6.20]# chkconfig --level 3 php-fpm on        在level 3下开机自启动。\n\n[root@host3 php-5.6.20]# service php-fpm start    脚本启动。\nxcache加速PHP\n[root@host3 source]# tar xf xcache-3.2.0.tar.gz\n[root@host3 source]# cd xcache-3.2.0\n[root@host3 xcache-3.2.0]# /usr/local/php/bin/phpize        启用php的环境检查，通过后生成xcache的configure文件\n[root@host3 xcache-3.2.0]# ./configure --enable-xcache --with-php-config=/usr/local/php/bin/php-config        检查环境，生成编译安装配置清单文件，开启xcache，指定php-config的位置，php-config存放了php的配置信息。\n[root@host3 xcache-3.2.0]# make && make install\n\n[root@host3 xcache-3.2.0]# mkdir /etc/php.d\n[root@host3 xcache-3.2.0]# cp xcache.ini /etc/php.d        复制xcache.ini到php.d目录下。\n[root@host3 xcache-3.2.0]# vim /etc/php.d/xcache.ini        配置xcache.ini\nextension = /usr/local/php5/lib/php/extensions/no-debug-non-zts-20131226/xcache.so        指定共享对象位置。\n网页部署\n[root@host3 ~]# mkdir -pv /web/data\n[root@host3 ~]# cd source/\n[root@host3 source]# cp Discuz_X3.2_SC_UTF8.zip /web/data\n[root@host3 data]# unzip Discuz_X3.2_SC_UTF8.zip\n[root@host3 data]# chown -R php:php .\n注：此处的网页文件才是用户通过httpd访问到的网页文件，也就是说用户在访问192.168.1.1时访问的网页是位于192.168.1.3上的。\nDBserver\nDBserver (192.168.1.4)\n二进制文件安装\n[root@host4 ~]# useradd -s /sbin/nologin -r mysql            创建系统用户musql，不允许登陆。\n\n[root@host4 ~]# cd source/        \n[root@host4 source]# tar xf mariadb-5.5.48-linux-x86_64.tar.gz -C /usr/local/        解压源码文件并且解压至指定目录。\n[root@host4 source]# cd /usr/local                \n[root@host4 local]# ln -sv mariadb-5.5.48-linux-x86_64 mysql        连接目录为mysql目录\n[root@host4 local]# cd mysql            \n[root@host4 mysql]# chown -R mysql:mysql .        将mysql目录下的文件递归的属主属组都改为mysql\n[root@host4 mysql]# bash scripts/mysql_install_db --user=mysql --datadir=/mysql/data      执行安装脚本并且指定进程用户与数据存放路径。\n[root@host4 mysql]# chown -R root .        更改属主为root\n[root@host4 mysql]# cp support-files/my-large.cnf /etc/my.cnf        复制mysql的配置文件\n[root@host4 mysql]# vim /etc/my.cnf        配置my.cnf\nthread_concurrency = 4                    内核数量*2，指定内部并发数量，决定性能。\ndatadir= /mysql/data                    指定数据存放位置。\n[root@host4 mysql]# echo \"export PATH=/usr/local/mysql/bin:$PATH\" > /etc/profile.d/mysql.sh        写入二进制文件路径。\n[root@host4 mysql]# echo \"/usr/local/mysql/lib\" > /etc/ld.so.conf.d/mysql.conf                    写入库文件。\n[root@host4 mysql]# ln -sv /usr/local/mysql/include /usr/include/mysql                            写入头文件。\n[root@host4 mysql]# echo \"MANPATH /usr/local/mysql/man\" >> /etc/man.config                        写入man文件。\n[root@host4 mysql]# cp support-files/mysql.server /etc/rc.d/init.d/mysqld                        复制脚本启动文件至指定目录。\n[root@host4 mysql]#    chmod +x /etc/rc.d/init.d/mysqld                        执行权限给脚本启动文件。\n\n[root@host4 mysql]# chkconfig --add mysqld        添加进开机自启。\n[root@host4 mysql]# chkconfig --level mysqld on   启用开机自启。\n\n[root@host4 mysql]# service mysqld start   启动mysql\n网页部署\n[root@host4 ~]# mysql\nMariaDB [(none)]> create database dz ;\nMariaDB [(none)]> use dz ;\nMariaDB [dz]> create table ;\nMariaDB [dz]> grant all on dz.* to dzadmin@'192.168.1.3' identified by 'redhat' ;\nMariaDB [dz]> flush privileges ; \nMariaDB [dz]> exit\n总结\n\n\n1>    LAMP架构的实验拖了好多天才动手，结果现在进度到nginx了才开始动手实验，实验过程中，编译安装就是不断出错与解决的问题，遇到出错一般都是软件没有安装。\n\n2>    在编译安装前，一定要检查是不是已经默认安装过了程序，不然会非常乱，比如在这次试验中，因为本机已经默认安装了httpd-2.2与apr-1.3.9，apr-util-1.3.X ，所以导致在start httpd的时候启动了2.2的版本，通过rpm -qi才知道。\n\n3>    在编译安装完成后，要完成收尾工作，比如配置文件，链接库，链接二进制文件，链接include文件，加启动脚本等。\n\n4>    最后的网页部署没有仔细列出步骤，但大致以写出，可以通过google等方式自行查询，这里选择使用的php网页为discuz！ 根据喜好也可选择其他如word press等。\n\n5>    此次架构实验为第一步的初步搭建LAMP的基本架构，后续会在学习的基础上进一步迭代添加如日志服务器，DNS服务器,负载均衡服务器，代理服务器等。\n\n6>    由于本次实验PHP是基于FASTCGI来将PHP服务器独立出来的，所以所有网页文件都需要在每一个服务器上存放一份，会非常麻烦，解决方案就是NFS，留在下一次实验来补充完善。\n\nhttpd启动脚本(centos6)\n#!/bin/bash\n#\n# httpd        Startup script for the Apache HTTP Server\n#\n# chkconfig: - 85 15\n# description: Apache is a World Wide Web server.  It is used to serve \\\n#        HTML files and CGI.\n# processname: httpd\n# config: /etc/httpd/conf/httpd.conf\n# config: /etc/sysconfig/httpd\n# pidfile: /var/run/httpd.pid\n\n# Source function library.\n. /etc/rc.d/init.d/functions\n\nif [ -f /etc/sysconfig/httpd ]; then\n        . /etc/sysconfig/httpd\nfi\n\n# Start httpd in the C locale by default.\nHTTPD_LANG=${HTTPD_LANG-\"C\"}\n\n# This will prevent initlog from swallowing up a pass-phrase prompt if\n# mod_ssl needs a pass-phrase from the user.\nINITLOG_ARGS=\"\"\n\n# Set HTTPD=/usr/sbin/httpd.worker in /etc/sysconfig/httpd to use a server\n# with the thread-based \"worker\" MPM; BE WARNED that some modules may not\n# work correctly with a thread-based MPM; notably PHP will refuse to start.\n\n# Path to the apachectl script, server binary, and short-form for messages.\napachectl=/web/apache/bin/apachectl\nhttpd=${HTTPD-/web/apache/bin/httpd}\nprog=httpd\npidfile=${PIDFILE-/var/run/httpd.pid}\nlockfile=${LOCKFILE-/var/lock/subsys/httpd}\nRETVAL=0\n\nstart() {\n        echo -n $\"Starting $prog: \"\n        LANG=$HTTPD_LANG daemon --pidfile=${pidfile} $httpd $OPTIONS\n        RETVAL=$?\n        echo\n        [ $RETVAL = 0 ] && touch ${lockfile}\n        return $RETVAL\n}\n\nstop() {\n  echo -n $\"Stopping $prog: \"\n  killproc -p ${pidfile} -d 10 $httpd\n  RETVAL=$?\n  echo\n  [ $RETVAL = 0 ] && rm -f ${lockfile} ${pidfile}\n}\nreload() {\n    echo -n $\"Reloading $prog: \"\n    if ! LANG=$HTTPD_LANG $httpd $OPTIONS -t >&/dev/null; then\n        RETVAL=$?\n        echo $\"not reloading due to configuration syntax error\"\n        failure $\"not reloading $httpd due to configuration syntax error\"\n    else\n        killproc -p ${pidfile} $httpd -HUP\n        RETVAL=$?\n    fi\n    echo\n}\n\n# See how we were called.\ncase \"$1\" in\n  start)\n  start\n  ;;\n  stop)\n  stop\n  ;;\n  status)\n        status -p ${pidfile} $httpd\n  RETVAL=$?\n  ;;\n  restart)\n  stop\n  start\n  ;;\n  condrestart)\n  if [ -f ${pidfile} ] ; then\n    stop\n    start\n  fi\n  ;;\n  reload)\n        reload\n  ;;\n  graceful|help|configtest|fullstatus)\n  $apachectl $@\n  RETVAL=$?\n  ;;\n  *)\n  echo $\"Usage: $prog {start|stop|restart|condrestart|reload|status|fullstatus|graceful|help|configtest}\"\n  exit 1\nesac\n\nexit $RETVAL\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}