{"title": " Python：Tornado 第二章：实战演练：开发Tornado网站：第六节：异步与协程化 - python3 ：公司内部培训专栏 ", "index": "python", "content": "上一篇文章：Python：Tornado 第二章：实战演练：开发Tornado网站：第五节：RequestHandler：输出相应函数下一篇文章：Python：Tornado 第二章：实战演练：开发Tornado网站：第七节：安全Cookie机制\n\nTornado有两种方式可改变同步的处理流程：\n\n异步化：针对RequestHandler的处理函数使用@tornado.web.asynchronous修饰器，将默认的同步机制改为异步机制。该方法已经过期。\n协程化：针对RequestHandler的处理函数使用@tornado.gen.coroutine修饰器，将默认的同步机制改为协程机制。\n\n1、异步化\n该方法已经过期，不再赘述，直接使用@tornado.gen.coroutine代替。\n2、协程化\nTornado协程结合了同步处理和异步处理的有点，使得代码即清晰易懂，又能够适应海量客户端的高并发请求。\n代码：\nimport tornado.web\nimport tornado.httpclient\nfrom tornado.web import Application\nimport tornado.ioloop\nclass MainHandler(tornado.web.RequestHandler):\n\n\n    @tornado.gen.coroutine\n    def get(self):\n        http=tornado.httpclient.AsyncHTTPClient()\n        response=yield http.fetch(\"http://www.baidu.com\")\n        self.write(response.body)\n\nif __name__ == '__main__':\n    app=Application([\n        (\"/\",MainHandler)\n    ])\n    app.listen(\"8888\")\n    tornado.ioloop.IOLoop.current().start()\n\n协程化的关键技术点如下：\n\n用tornado.gen.coroutine装饰MainHandler的get()、post()等处理函数。\n使用异步对象处理耗时操作，比如本例的AsyncHTTPClient。\n调用yield关键字获取异步对象的处理结果。\n\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "0"}