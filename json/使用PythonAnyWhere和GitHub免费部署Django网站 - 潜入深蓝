{"title": "使用PythonAnyWhere和GitHub免费部署Django网站 - 潜入深蓝 ", "index": "django,python", "content": "在执行部署Django网站之前，应该先处理好前期工作，比如对settings.py文件进行设置以防止私密信息泄露等。本文只是简单的笔记，原文地址为：https://tutorial.djangogirls....\n1, 将Django项目发布到GitHub\n2, 申请免费的PythonAnyWhere账号网址：https://www.pythonanywhere.com/免费的账号只能建一个站。站名只能为XXX.pythonanywhere.com。其中XXX代表注册账户时所用的用户名。站点只能维持2个月，2个月后就会被删除。\n3, 将GitHub上的项目发送至PythonAnyWhere3.1 在PythonAnyWhere中，点击 “Consoles” –> start a “Bash” console这个Bash是类似于Linux系统里的“终端”。3.2 在这个新建的Bash里面输入：注意：如下代码表示需要在PythonAnyWhere的Bash中执行！！\n$ git clone https://github.com/<your-github-username>/my-first-blog.git\n\n这个步骤将GitHub的项目发送到PythonAnyWhere。注意上面的这个链接就是GitHub里项目的仓库地址：\nBash的响应非常慢，需要耐心等候。发送完成后可以使用下面的代码来看被复制到PythonAnyWhere的文件目录结构，需要强调的是，这个my-first-blog即为GitHub里的仓库的项目名字。注意：如下代码表示需要在PythonAnyWhere的Bash中执行！！\ntree my-first-blog\n\n4, 为PythonAnyWhere里的项目创建virtual environment继续在PythonAnyWhere的Bash里执行下面的命令,以创建一个名为myvenv的虚拟环境。注意：如下代码表示需要在PythonAnyWhere的Bash中执行！！\n$ cd my-first-blog\n$ virtualenv --python=python3.5 myvenv\n$ source myvenv/bin/activate\n(myvenv) $ pip install django==1.10.0\n\n上面的python和django版本号仅供参考！\n5, 为PythonAnyWhere里的项目创建数据库并创建超级账户注意：如下代码表示需要在PythonAnyWhere的Bash中执行！！\n(myvenv) $ python manage.py migrate\n(myvenv) $ python manage.py createsuperuser\n\n6, 将Django项目作为Web App发布到这里，我们的Django项目已经在PythonAnyWhere上了，虚拟环境也准备好了，数据库也创建好了，此时就可以将它作为Web App发布了！在PythonAnyWhere里，点击 “Web”选项卡 -> 点击 “Add a new web app”-> 确认域名 -> 选择manual configuration(注意不是选择“Django”哦) -> 选择Python3.5 -> 点击Next以最终完成向导。\n7, 配置Web App的虚拟环境创建好了Web App之后，PythonAnyWhere就会将你带到该Web App的配置界面，点击Virtualenv下面红色的字体来编辑虚拟环境的位置，如下图所示：\n\n将地址修改为：\n/home/<你的PythonAnyWhere的账户名>/my-first-blog/myvenv\n\n注意：上面的my-first-blog为GitHub里的项目的仓库地址。注意：上面的myvenv是该创建的虚拟环境的名字\n8, 配置PythonAnyWhere里的WSGI文件仍然是在Web选项卡，点击WSGI configuration file后面的蓝色字体连接（如下图所示）。 PythonAnyWhere将带我们到一个新的页面（一个代码编辑器），将编辑器的代码全部用下面的代码替换。\nimport os\nimport sys\n\npath = '/home/<你的PythonAnyWhere用户名>/my-first-blog'  # 在这里使用你自己的用户名和GitHub项目的名字。\nif path not in sys.path:\n    sys.path.append(path)\n\nos.environ['DJANGO_SETTINGS_MODULE'] = 'mysite.settings' # 在这里mysite请用settings所在文件夹名，我用的是和GitHub仓库名一样的名字\nfrom django.core.wsgi import get_wsgi_application\nfrom django.contrib.staticfiles.handlers import StaticFilesHandler\napplication = StaticFilesHandler(get_wsgi_application())\n\n点击 “Save”  -> 返回Web选项卡 -> 点击大大的绿色按钮“Reload”。此时我们就可以通过Web选项卡上提供的地址（也就是XXX.pythonanywhere.com）访问了！这样我们的网站就真正在互联网上存在了，虽然只有两个月的有效期:-(\n9, Debug在配置过程中，难免会出错导致站点无法成功发布。首先应该：\n\n查看出错页面显示的error log\n查看Web选项卡页面有无任何错误提示常见的错误包括：\n在PythonAnyWhere的Bash漏了创建virtualenv，激活它，给它安装Django，给它初始化数据库\n第7步设置虚拟环境的路径是时有错误\n第8步配置WSGI时有错误，是否填入正确的path了呢？\n安装虚拟环境时选择的Python版本和创建Web App时选择的Python是否都是同一版本？\n\n10, 如何将GitHub里项目的修改反馈到PythonAnyWhere？项目又要修改的时候，通常是在本地计算机修改，修改好之后发布到GitHub，之后发布到PythonAnyWhere。当GitHub里项目修改好之后，在PythonAnyWhere的Bash里面输入下面两行代码就可以同步了：注意：如下代码表示需要在PythonAnyWhere的Bash中执行！！\ncd my-first-blog\ngit pull\n\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "4"}