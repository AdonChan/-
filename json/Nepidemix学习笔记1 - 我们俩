{"title": "Nepidemix学习笔记1 - 我们俩 ", "index": "dynamic_simulation,python,nepidemix", "content": "转载请注明原出处，谢谢。\n\n标签（空格分隔）： Nepidemix python dynamic_simulation\n\nNepidemix官网\n\n什么是Nepidemix？\n\nNepidemiX是仿真复杂网络动力学过程（process）的python工具包.可以用来仿真SIS，SIR等经典传染病传播模型。NepidemiX通过一系列配置文件(.ini)来仿真传染病传播动力学过程。配置文件由若干个section组成。\n\n\nNepidemix基本概念\n\nini files\nNepidemiX scripts使用.ini文件配置。配置文件由很多section组成，每个section的名字是[]括起。具体每个section是做什么的，下面有介绍。The command line\nNepidemiX scripts是终端程序。没有图形界面，用命令行的方式执行attribute\n属性有name和value。\n当跑一个仿真过程时候，我们会修改属性并关注属性的变化。\n一个属性可以是年龄，HIV 状态或者性别。一个节点可以有一个或者更多的属性。state\n点/边的状态：所有属性值的字典/向量。举个例子说：一个点N的属性name是status. status有三个value:S,I,R\n点/边如果有很多属性，\n举例来说：N还有一个属性是gender，属性value是male或者female.这样点N是有六个状态，(S+female, I+female, R+female, S+male, I+male, R+male)partial state\n在选点/边的时候会用到这个概率。\n举例：gender = male. 结果就会匹配到 S+male, I+male, R+male.\n\n\n安装\n\n下载链接\nNepdidemiX是用python写的，使用大多数第三方函数（NetworkX和numpy）所以使用NepidemiX之前要安装python,NetworkX和numpy。\n下载NepidemiX的安装包之后，在解压文件夹上输入下面命令就安装成功了。\n\n>>python setup.py install\n\n\n测试是否安装成功:\n在python shell下输入（或者cmd python）：\n\n>>import nepidemix\n\n\n如果没报错就说明安装顺利啦...这个工具包比networkx安装简单多了=。=\n测试命令，打开cmd,进入nepidmix_runsimulation存储路径,即YourDir\\NepidemiX-0.2\\scripts,输入命令：\n\n>nepidmix_runsimulation\n\n\n发现错误，此命令未定义。经过分析发现python是识别.py结尾的文件。于是修改此命令的后缀，改为nepidmix_runsimulation.py\n\n>nepidmix_runsimulation.py\n\n\n这回就成功了。\n\n安装成功之后，创建一个文件夹。在新建文件夹中创建conf和output两个文件夹。\nconf存放配置文件。output存放仿真结果。\n\n\n跑一个仿真程序看看\n\n用nepidemix_runsimulation来配置python 程序。\n\nSIS仿真的配置文件\n\n用仿真配置文件（simulation configuration  file）来跑SIS过程。\n\n\nProcess定义函数（类似声明文件）\n创建为SIS_process_def.ini文件.用来存储基本信息。\n具体仿真过程在SIS_example.ini写。\n仿真文件由若干section组成：\n> * [Simulation]\n> * [NetworkParameters]\n> * [Process parameters]\n> * [NodeStateDistribution]\n> * [Output]\n\n\n[simulation]\n存放仿真需要的基本信息iteration 迭代次数process_class 负责决定network上跑的process.（下面有讲怎么写一个process）network_func 负责产生network\n\nnetwork_fuc = barabasi_albert_graph_network  #产生BA preferential attachment 算法的网络\nnetwork_fuc = grid_2d_graph_networkx #产生规则栈格网络;\nnetwork_fuc = fast_gnp_random_graph_networkx #产生ER随机网络\nnetwork_fuc = connected_watts_strogatz_graph_networkx #产生小世界WS网络\nnetwork_fuc = load_network # 从文件中load进去一个网络\n\n\n[NetworkParameters]\n在这个section指定network_fuc 的输入参数。\n以BA preferntial attachment为例，需要两个参数：\n\n\n\nn: 网络节点数\n\nm: 一个点引入网络时候，这个点会连多少边。\n\n[process_parameters section]\n这个section负责指定两个问题\n1. 指定哪个process script仿真会使用file参数指定process定义文件名称。\n\nfile = SIS_process_def.ini\n\n\n\n定义仿真process参数\n在仿真process模型中使用的参数，在这里定义。比如SIS模型中的δ,β。\n\n[State distribution section]\n这个section负责网络中节点状态的分布。比如S状态的点有95%，I状态的点有5%\n\n[output section]\n这个setction负责输出配置。\n\n最后在YourDir\\NepidemiX-0.2\\scripts\\\n文件夹下需要有三个文件，一个文件夹。nepidemix_runsimulation.py，SIS_example.ini和SIS_process_def.ini还有output文件夹\n\n这样想跑一下程序 只需要在cmd相应路径下 nepidemix_runsimulation.py SIS_example.ini\n\n结果保存在output 文件夹\n\nSIS_example.ini文件源代码\n\n# This is the simulation section.\n[Simulation]\n# Run the simulation this many iterations.\niterations = 500\n\n# The time step taken each iteration.\ndt = .1\n# This is the name of the process object.\nprocess_class = ScriptedProcess\n\n# This is the name of the network generation function.\nnetwork_func = barabasi_albert_graph_networkx\n\n# Network settings.\n[NetworkParameters]\n# Number of nodes.\nn = 1000\n# Number of edges to add in each iteration.\nm = 2\n\n# Defining the process parameter values.\n# The contents of this section is dependent on\n# the parameters of the process class as specified by\n# the option process_class in the Simulation section.\n[ProcessParameters]\n# File name of the process description.\nfile = SIS_process_def.ini\n# Infection rate.\nbeta = .9e-2\n# Death rate.\ndelta = 0.0076\n\n# The fraction of nodes, alternatively the number of nodes, that will be  assigned to each state initially.\n# The state names must match those specified by the network process class.\n[NodeStateDistribution]\n# 95% S\n{status:S} = 0.95\n# 5% I\n{status:I} = 0.05\n\n# Result output settings.\n[Output]\n\n# Output directory:\noutput_dir = YourDir\\NepidemiX-0.2\\scripts\\\n\n# This is the base name of all files generated by the run.\nbase_name = test_SIS\n\n# If unique is defined as true, yes, 1, or on, unique file names will be created (time stamp added)\nunique = yes\n\n# If this is true, yes, 1, or on, a copy of the full program config, plus an Info\n# section will be saved.\nsave_config = yes\n\n# If this is true/yes/on, the network node states will be counted and saved as a csv file.\n# Default value True.\n# Note only valid if the current process support updates. If not nothing will be saved.\nsave_state_count = yes\n\n# Count nodes every ... iterations. Value should be integer >= 1.\n# Default value 1.\nsave_state_count_interval = 1\n\n# If this is true, yes, 1, or on, a copy of the network will be saved.\n# Save interval may be set using the save_network_interval key.\nsave_network = yes\n\n# This control how often the network will be saved.\n# A value <= 0 means only the initial network will be saved. A positive value\n# n> 0, results in the initial network being saved plus every n:th iteration\n# thereafter, as well as the last network.\n# Default value 0.\nsave_network_interval = 0\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "2"}