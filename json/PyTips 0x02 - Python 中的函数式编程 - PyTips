{"title": "PyTips 0x02 - Python 中的函数式编程 - PyTips ", "index": "python3.5,pytips,python", "content": "项目地址：https://git.io/pytips\nPython 中的函数式编程\n函数式编程（英语：functional programming）或称函数程序设计，又称泛函编程，是一种编程范型，它将电脑运算视为数学上的函数计算，并且避免使用程序状态以及易变对象。函数编程语言最重要的基础是λ演算（lambda calculus）。而且λ演算的函数可以接受函数当作输入（引数）和输出（传出值）。(维基百科：函数式编程)\n所谓编程范式（Programming paradigm）是指编程风格、方法或模式，比如面向过程编程（C语言）、面向对象编程（C++）、面向函数式编程（Haskell），并不是说某种编程语言一定属于某种范式，例如 Python 就是多范式编程语言。\n函数式编程\n函数式编程具有以下特点：\n\n避免状态变量\n函数也是变量（一等公民，First-Class Citizen）\n高阶函数\n面向问题描述而不是面向问题解决步骤\n\n值得一提的是，函数式编程的这些特点在实践过程中可能并不是那么 Pythonic，甚至与0x00中提到的 The Zen of Python 相悖。例如函数式编程面向问题描述的特点可能让你更快地写出更简洁的代码，但可读性却也大打折扣（可参考这一段Haskell代码）。不过，虽然 Pythonic 很重要但并不是唯一的准则，_The Choice Is Yours_。\n\nmap(function, iterable, ...)/filter(function, iterable)\n\n# map 函数的模拟实现\ndef myMap(func, iterable):\n    for arg in iterable:\n        yield func(arg)\n\nnames = [\"ana\", \"bob\", \"dogge\"]\n\nprint(map(lambda x: x.capitalize(), names)) # Python 2.7 中直接返回列表\nfor name in myMap(lambda x: x.capitalize(), names):\n    print(name)\n<map object at 0x11185c9b0>\nAna\nBob\nDogge\n\n# filter 函数的模拟实现\ndef myFilter(func, iterable):\n    for arg in iterable:\n        if func(arg):\n            yield arg\n            \nprint(filter(lambda x: x % 2 == 0, range(10))) # Python 2.7 中直接返回列表\nfor i in myFilter(lambda x: x % 2 == 0, range(10)):\n    print(i)\n<filter object at 0x11185cbe0>\n0\n2\n4\n6\n8\n\nfunctools.reduce(function, iterable[, initializer])\nPython 3.5 中reduce 被降格到标准库functools，reduce 也是遍历可迭代对象元素作为第一个函数的参数，并将结果累计：\nfrom functools import reduce\n\nprint(reduce(lambda a, b: a*b, range(1,5)))\n24\n\nfunctools.partial(func, *args, **keywords)\n偏应用函数（Partial Application）让我们可以固定函数的某些参数：\nfrom functools import partial\n\nadd = lambda a, b: a + b\nadd1024 = partial(add, 1024)\n\nadd1024(1)\n1025\n\n这里简单介绍了一些常用函数式编程的方法和概念，实际上要传达的一个最重要的观念就是函数本身也可以作为变量被返回、传递给高阶函数，这使得我们可以更灵活地运用函数解决问题。但是这并不意味着一定要使用上面这些方法来简化代码，例如更 Pythonic 的方法推荐尽可能使用 List Comprehension 替代map/filter（关于 List Comprehension 后面会再单独介绍）。如果一定想要用函数式编程的方法来写 Python，也可以尝试Fn.py，或者，试试 Haskell。\n参考\n\n维基百科：函数式编程\nbyvoid：APIO讲稿——函数式编程\n\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "8"}