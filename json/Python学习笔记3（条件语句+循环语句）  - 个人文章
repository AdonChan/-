{"title": "Python学习笔记3（条件语句+循环语句）  - 个人文章 ", "index": "python", "content": "5.Python条件语句\n转载：python菜鸟教程例1：if基本用法\nflag= False\nname = 'awe'\nif name == 'Python':    # 判断变量否为'python';注意if语句后面的冒号：！！！\n    flag= True    # 条件成立时设置标志为真\n    print('Hello python')\nelse:\n    print(name)    # 条件不成立时输出变量名称\n\nif 语句的判断条件可以用>（大于）、<(小于)、==（等于）、>=（大于等于）、<=（小于等于）来表示其关系。当判断条件为多个值时，可以使用以下形式：\nif 判断条件1:\n    执行语句1……\nelif 判断条件2:\n    执行语句2……\nelif 判断条件3:\n    执行语句3……\nelse:\n    执行语句4…… \n例2：elif用法\nnum = 5     \nif num == 3:            # 判断num的值\n    print 'boss'        \nelif num == 2:\n    print 'user'\nelif num == 1:\n    print 'worker'\nelif num < 0:           # 值小于零时输出\n    print 'error'\nelse:\n    print 'roadman'     # 条件均不成立时输出\n\n例3：if语句多个条件\n由于 python 并不支持 switch 语句，所以多个条件判断，只能用 elif 来实现，如果判断需要多个条件需同时判断时，可以使用 or （或），表示两个条件有一个成立时判断条件成功；使用 and （与）时，表示只有两个条件同时成立的情况下，判断条件才成功。\n也可以在同一行的位置上使用if条件判断语句，如下实例：\nvar = 100 \nif ( var  == 100 ) : print \"变量 var 的值为100\" \nprint \"Good bye!\"\n\n输出结果：变量 var 的值为100Good bye!\n6.Python 循环语句\n循环语句，程序在一般情况下是按顺序执行的。编程语言提供了各种控制结构，允许更复杂的执行路径。循环语句允许我们执行一个语句或语句组多次。Python提供了for循环和while循环（在Python中没有do..while循环）:6.1while 循环在给定的判断条件为 true 时执行循环体，否则退出循环体。http://www.runoob.com/wp-cont...![图片上传中...]\nwhile 判断条件：\n    执行语句……\n\n执行语句可以是单个语句或语句块。判断条件可以是任何表达式，任何非零、或非空（null）的值均为true。当判断条件假false时，循环结束。例2：\ncount = 0\nwhile (count < 9):\n    print('The count is:',count)\n    count = count +1\nprint(\"Good Bye!\")\n\nwhile 语句时还有另外两个重要的命令 continue，break 来跳过循环，continue 用于跳过该次循环，break 则是用于退出循环，此外\"判断条件\"还可以是个常值，表示循环必定成立，具体用法如下：\n例2：continue 和 break 用法\ni = 1\nwhile i < 10:\n    i += 1\n    if i % 2 > 0:  # 非双数时跳过输出\n        continue\n    print(i)    # 输出双数2、4、6、8、10\n\ni = 1\nwhile 1:  # 循环条件为1必定成立\n    print(i)    # 输出1~10\n    i += 1\n    if i > 10:  # 当i大于10时跳出循环\n        break\n注：while 1:  # 循环条件为1必定成立\n无限循环如果条件判断语句永远为 true，循环将会无限的执行下去，如下实循环\n使用 else 语句在 python 中，while … else 在循环条件为 false 时执行 else 语句块：\ncount = 0\nwhile count <5:\n    print (count,\"is less than 5\")\n    count= count+1\nelse:\n    print(count,\"is not less than 5\")\n\n类似 if 语句的语法，如果你的 while 循环体中只有一条语句，你可以将该语句与while写在同一行中：例：无线循环\nflag = 1\nwhile (flag): print('Given flag is really true!')\nprint(\"Good bye!\")\n\n\n\n\n\n6.2for 循环重复执行语句\nfor letter in 'Python':\n    print('当前字母：',letter)\n\nfruits = ['banana','apple','mango']\nfor fruit in fruits:\n    print(fruit)\n\nprint \"Good bye!\"\n\n通过序列索引迭代另外一种执行循环的遍历方式是通过索引。\n例：\nfruits = ['banana','apple','mango']\nfor index in range(len(fruits)):\n    print('当前水果：',fruits[index])\n\nprint(\"Good Bye!\")\n其中，内置函数 len() 和 range(),函数 len() 返回列表的长度，即元素的个数。 range返回一个序列的数。\n循环使用 else 语句在 python 中，for … else 表示这样的意思，for 中的语句和普通的没有区别，else 中的语句会在循环正常执行完（即 for 不是通过 break 跳出而中断的）的情况下执行，while … else 也是一样。\n例1：\nfor num in range(10,20):  # 迭代 10 到 20 之间的数字\n   for i in range(2,num): # 根据因子迭代\n      if num%i == 0:      # 确定第一个因子\n         j=num/i          # 计算第二个因子\n         print '%d 等于 %d * %d' % (num,i,j)\n         break            # 跳出当前循环\n   else:                  # 循环的 else 部分\n      print num, '是一个质数'\n\n\n6.3 嵌套循环你可以在while循环体中嵌套for循环\n6.4 循环控制语句循环控制语句可以更改语句执行的顺序。Python支持以下循环控制语句：break 语句在语句块执行过程中终止循环，并且跳出整个循环continue 语句在语句块执行过程中终止当前循环，跳出该次循环，执行下一次循环。pass 语句pass是空语句，是为了保持程序结构的完整性。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}