{"title": "Flask 插件系列 - Flask-SQLAlchemy - Keep Going ", "index": "flask,python", "content": "简介\nWeb 开发中，一个重要的组成部分便是数据库了。Web 程序中最常用的莫过于关系型数据库了，也称 SQL 数据库。另外，文档数据库（如 mongodb）、键值对数据库（如 redis）近几年也逐渐在 web 开发中流行起来，我们习惯把这两种数据库称为 NoSQL 数据库。\n大多数的关系型数据库引擎（比如 MySQL、Postgres 和 SQLite）都有对应的 Python 包。在这里，我们不直接使用这些数据库引擎提供的 Python 包，而是使用对象关系映射（Object-Relational Mapper, ORM）框架，它将低层的数据库操作指令抽象成高层的面向对象操作。也就是说，如果我们直接使用数据库引擎，我们就要写 SQL 操作语句，但是，如果我们使用了 ORM 框架，我们对诸如表、文档此类的数据库实体就可以简化成对 Python 对象的操作。\nPython 中最广泛使用的 ORM 框架是 SQLAlchemy，它是一个很强大的关系型数据库框架，不仅支持高层的 ORM，也支持使用低层的 SQL 操作，另外，它也支持多种数据库引擎，如 MySQL、Postgres 和 SQLite 等。\nFlask-SQLAlchemy\n在 Flask 中，为了简化配置和操作，我们使用的 ORM 框架是 Flask-SQLAlchemy，这个 Flask 扩展封装了 SQLAlchemy 框架。在 Flask-SQLAlchemy 中，数据库使用 URL 指定，下表列出了常见的数据库引擎和对应的 URL。\n\n\n数据库引擎\nURL\n\n\n\nMySQL\nmysql://username:password@hostname/database\n\n\nPostgres\npostgresql://username:password@hostname/database\n\n\nSQLite (Unix)\nsqlite:////absolute/path/to/database\n\n\nSQLite (Windows)\nsqlite:///c:/absolute/path/to/database\n\n\n\n上面的表格中，username 和 password 表示登录数据库的用户名和密码，hostname 表示 SQL 服务所在的主机，可以是本地主机（localhost）也可以是远程服务器，database 表示要使用的数据库。有一点需要注意的是，SQLite 数据库不需要使用服务器，它使用硬盘上的文件名作为 database。\n一个最小的应用\n创建数据库\n首先，我们使用 pip 安装 Flask-SQLAlchemy:\n$ pip install flask-sqlalchemy\n接下来，我们配置一个简单的 SQLite 数据库：\n$ cat app.py\n# -*- coding: utf-8 -*-\n\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///db/users.db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = True\ndb = SQLAlchemy(app)\n\n\nclass User(db.Model):\n    \"\"\"定义数据模型\"\"\"\n    __tablename__ = 'users'\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True)\n    email = db.Column(db.String(120), unique=True)\n\n    def __init__(self, username, email):\n        self.username = username\n        self.email = email\n\n    def __repr__(self):\n        return '<User %r>' % self.username\n这里有几点需要注意的是：\n\napp 应用配置项 SQLALCHEMY_DATABASE_URI 指定了 SQLAlchemy 所要操作的数据库，这里我们使用的是 SQLite，数据库 URL 以 sqlite:/// 开头，后面的 db/users.db 表示数据库文件存放在当前目录的 db 子目录中的 users.db 文件。当然，你也可以使用绝对路径，如 /tmp/users.db 等。\ndb 对象是 SQLAlchemy 类的实例，表示程序使用的数据库。\n我们定义的 User 模型必须继承自 db.Model，这里的模型其实就对应着数据库中的表。其中，类变量__tablename__  定义了在数据库中使用的表名，如果该变量没有被定义，Flask-SQLAlchemy 会使用一个默认名字。\n\n接着，我们创建表和数据库。为此，我们先在当前目录创建 db 子目录和新建一个 users.db 文件，然后在交互式 Python shell 中导入 db 对象并调用 SQLAlchemy 类的 create_all() 方法：\n$ mkdir db\n$ python\n>>> from app import db\n>>> db.create_all()\n我们验证一下，\"users\" 表是否创建成功：\n$ sqlite3 db/users.db    # 打开数据库文件\nSQLite version 3.8.10.2 2015-05-20 18:17:19\nEnter \".help\" for usage hints.\n\nsqlite> .schema users   # 查看 \"user\" 表的 schema\nCREATE TABLE users (\n        id INTEGER NOT NULL,\n        username VARCHAR(80),\n        email VARCHAR(120),\n        PRIMARY KEY (id),\n        UNIQUE (username),\n        UNIQUE (email)\n);\n插入数据\n现在，我们创建一些用户，通过使用 db.session.add()来添加数据：\n@app.route('/adduser')\ndef add_user():\n    user1 = User('ethan', 'ethan@example.com')\n    user2 = User('admin', 'admin@example.com')\n    user3 = User('guest', 'guest@example.com')\n    user4 = User('joe', 'joe@example.com')\n    user5 = User('michael', 'michael@example.com')\n\n    db.session.add(user1)\n    db.session.add(user2)\n    db.session.add(user3)\n    db.session.add(user4)\n    db.session.add(user5)\n\n    db.session.commit()\n\n    return \"<p>add succssfully!\"\n这里有一点要注意的是，我们在将数据添加到会话后，在最后要记得调用 db.session.commit() 提交事务，这样，数据才会被写入到数据库。\n查询数据\n查询数据主要是用 query 接口，例如 all() 方法返回所有数据，filter_by() 方法对查询结果进行过滤，参数是键值对，filter 方法也可以对结果进行过滤，但参数是布尔表达式，详细的介绍请查看这里。\n>>> from app import User\n>>> users = User.query.all()\n>>> users\n[<User u'ethan'>, <User u'admin'>, <User u'guest'>, <User u'joe'>, <User u'michael'>]\n>>>\n>>> user = User.query.filter_by(username='joe').first()\n>>> user\n<User u'joe'>\n>>> user.email\nu'joe@example.com'\n>>>\n>>> user = User.query.filter(User.username=='ethan').first()\n>>> user\n<User u'ethan'>\n如果我们想查看 SQLAlchemy 为查询生成的原生 SQL 语句，只需要把 query 对象转化成字符串：\n>>> str(User.query.filter_by(username='guest'))\n'SELECT users.id AS users_id, users.username AS users_username, users.email AS users_email \\nFROM users \\nWHERE users.username = :username_1'\n分页方法\n分页方法可以采用 limit() 和 offset() 方法，比如从第 3 条记录开始取(注意是从 0 开开始算起)，并最多取 1 条记录，可以这样：\nusers = User.query.limit(1).offset(3)\n更新数据\n更新数据也用 add() 方法，如果存在要更新的对象，SQLAlchemy 就更新该对象而不是添加。\n>>> from app import db\n>>> from app import User\n>>>\n>>> admin = User.query.filter_by(username='admin').first()\n>>>\n>>> admin.email = 'admin@hotmail.com'\n>>> db.session.add(admin)\n>>> db.session.commit()\n>>>\n>>> admin = User.query.filter_by(username='admin').first()\n>>> admin.email\nu'admin@hotmail.com'\n删除数据\n删除数据用 delete() 方法，同样要记得 delete 数据后，要调用 commit() 提交事务：\n>>> from app import db\n>>> from app import User\n>>>\n>>> admin = User.query.filter_by(username='admin').first()\n>>> db.session.delete(admin)\n>>> db.session.commit()\n本文完整的代码可在这里下载。\n本文由 funhacks 发表于个人博客，采用 Creative Commons BY-NC-ND 4.0（自由转载-保持署名-非商用-禁止演绎）协议发布。非商业转载请注明作者及出处。商业转载请联系作者本人。本文标题为: Flask 插件系列 - Flask-SQLAlchemy本文链接为: https://funhacks.net/2016/11/...\n更多阅读\nFlask-SQLAlchemy\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "8"}