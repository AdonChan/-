{"title": "Amazon DynamoDB 入门8：删除项目 - 古寺比的寺 ", "index": "nosql,数据库,amazon-web-services,python", "content": "上一篇介绍了DynamoDB 的更新，这一篇将会介绍项目删除操作和dynamoab-py\n从表中删除数据\n在 SQL 中，DELETE 语句从表中删除一个或多个行。DynamoDB 使用 DeleteItem 操作一次删除一个项目。\nSQL\n在 SQL 中，可使用 DELETE 语句删除一个或多个行。WHERE 子句确定要修改的行。示例如下：\nDELETE FROM MusicWHERE Artist = 'The Acme Band' AND SongTitle = 'Look Out, World';我们可以修改 WHERE 子句以删除多个行。例如，删除某个特殊艺术家的所有歌曲，如下所示：\nDELETE FROM Music WHERE Artist = 'The Acme Band'\nNote\n如果省略 WHERE 子句，则数据库会尝试从表中删除所有行。\nDynamoDB\n在 DynamoDB 中，可使用 DeleteItem 操作修改单个项目。\n(http://docs.aws.amazon.com/zh... 语法如下]：\n{\n   \"ConditionExpression\": \"string\",\n   \"ExpressionAttributeNames\": {\n      \"string\" : \"string\"\n   },\n   \"ExpressionAttributeValues\": {\n      \"string\" : {\n         \"B\": blob,\n         \"BOOL\": boolean,\n         \"BS\": [ blob ],\n         \"L\": [\n            \"AttributeValue\"\n         ],\n         \"M\": {\n            \"string\" : \"AttributeValue\"\n         },\n         \"N\": \"string\",\n         \"NS\": [ \"string\" ],\n         \"NULL\": boolean,\n         \"S\": \"string\",\n         \"SS\": [ \"string\" ]\n      }\n   },\n   \"Key\": {\n      \"string\" : {\n         \"B\": blob,\n         \"BOOL\": boolean,\n         \"BS\": [ blob ],\n         \"L\": [\n            \"AttributeValue\"\n         ],\n         \"M\": {\n            \"string\" : \"AttributeValue\"\n         },\n         \"N\": \"string\",\n         \"NS\": [ \"string\" ],\n         \"NULL\": boolean,\n         \"S\": \"string\",\n         \"SS\": [ \"string\" ]\n      }\n   },\n   \"ReturnConsumedCapacity\": \"string\",\n   \"ReturnItemCollectionMetrics\": \"string\",\n   \"ReturnValues\": \"string\",\n   \"TableName\": \"string\"\n}\n参数说明：\n\nKey: 主键，用于定位项目\nTableName：表名 （最小 3. 最大 255）\nConditionExpression：条件表达式（仅在特定 ConditionExpression 的计算结果为 true 时成功完成）\nExpressionAttributeNames：条件表达式的名称的别名，比如 date 为保留字，可用别名定义为 #d\nExpressionAttributeValues：条件表达式的值\n\nReturnConsumedCapacity：显示使用的写入容量单位数\n\nTOTAL 会返回由表及其所有global secondary index占用的写入容量；\nINDEXES 仅返回由global secondary index占用的写入容量；\nNONE 表示您不需要返回任何占用容量统计数据。\n\n\n\nReturnValues: 更新后返回的数据.\n\nNONE - 如果没有特别说明，返回None (这个是默认值)\nALL_OLD - 按在进行更新之前的情况，返回整个项目。\n\n\nReturnItemCollectionMetrics： Determines whether item collection metrics are returned. If set to SIZE , the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to NONE (the default), no statistics are returned.\n\n(http://boto3.readthedocs.io/e...语法如下]\nresponse = table.delete_item(\n    Key={\n        'string': 'string'|123|Binary(b'bytes')|True|None|set(['string'])|set([123])|set([Binary(b'bytes')])|[]|{}\n    },\n    ConditionalOperator='AND'|'OR',\n    ReturnValues='NONE'|'ALL_OLD'|'UPDATED_OLD'|'ALL_NEW'|'UPDATED_NEW',\n    ReturnConsumedCapacity='INDEXES'|'TOTAL'|'NONE',\n    ReturnItemCollectionMetrics='SIZE'|'NONE',\n    ConditionExpression=Attr('myattribute').eq('myvalue'),\n    ExpressionAttributeNames={\n        'string': 'string'\n    },\n    ExpressionAttributeValues={\n        'string': 'string'|123|Binary(b'bytes')|True|None|set(['string'])|set([123])|set([Binary(b'bytes')])|[]|{}\n    }\n)\n在 DynamoDB 中，可使用 DeleteItem 操作从表中删除数据（一次删除一个项目）。必须指定项目的主键值。示例如下：\n{\n    TableName: \"Music\",\n    Key: {\n        Artist: \"The Acme Band\",\n        SongTitle: \"Look Out, World\"\n    }\n}\nNote\n除了 DeleteItem 之外，Amazon DynamoDB 还支持同时删除多个项目的 BatchWriteItem 操作。\nDeleteItem 支持条件写入，在此情况下，操作仅在特定 ConditionExpression 的计算结果为 true 时成功完成。例如，以下 DeleteItem 操作仅在项目具有 RecordLabel 属性时删除项目：\n{\n    TableName: \"Music\",\n    Key: {\n        Artist: \"The Acme Band\",\n        SongTitle: \"Look Out, World\"\n    },\n   ConditionExpression: \"attribute_exists(RecordLabel)\"\n}\n删除操作就这么简单，下边是福利时间。\n是不是每次用boto3 操作DynamoDB 都有种痛不欲生的感觉，下边我们介绍一个新工具。\ndynamodb-py\ndynamodb-py  是模仿sqlalchemy 编写的DynamoDB ORM 它的使用方法特别简单，下边来看几个示例：\n表的操作\nfrom dynamodb.model import Model\nfrom dynamodb.fields import CharField, IntegerField, FloatField, DictField\nfrom dynamodb.table import Table\n\nclass Movies(Model):\n\n    __table_name__ = 'Movies'\n\n    ReadCapacityUnits = 10\n    WriteCapacityUnits = 10\n\n    year = IntegerField(name='year', hash_key=True)\n    title = CharField(name='title', range_key=True)\n    rating = FloatField(name='rating', indexed=True)\n    rank = IntegerField(name='rank', indexed=True)\n    release_date = CharField(name='release_date')\n    info = DictField(name='info', default={})\n\n# create_table\nTable(Movies()).create()\n\n# update_table\nTable(Movies()).update()\n\n# delete_table\nTable(Movies()).delete()\n\n查询项目\n# query without index\nitems = Movies.query().where(Movies.year.eq(year)).all()\nitems = Movies.query().where(Movies.year.eq(1985)).limit(10).all()\nitems = (Movies.query()\n        .where(Movies.year.eq(1992),\n               Movies.title.between('A', 'L'))\n        .all())\n\n# query with index\nitems = (Movies.query()\n        .where(Movies.year.eq(1992),\n               Movies.title.between('A', 'L'))\n        .order_by(Movies.rating, asc=False)\n        .all())\n更新项目\nitem = Movies.get(year=year, title=title)\n\nitem.update(rank=2467, rating=7.1)\n删除项目\nitem = Movies.get(year=year, title=title)\n\nitem.delete()\n就是这么方便。\n不过dynamodb-py 还在开发中，欢迎试用，也欢迎贡献自己的力量。\n终于，下一节介绍索引的查询\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}