{"title": "译-Python中的类属性与实例属性的区别 - everfighting's notebook ", "index": "python", "content": "以下的区别有意义么？\nclass A(object):\n    foo = 5   # some default value\n\nVs\nclass B(object):    def __init__(self, foo=5):\n             self.foo = foo\n\n如果你需要创建很多实例，这两种风格在表现和空间要求上有什么区别么？当你阅读代码的时候，你是否会考虑这两种风格的重要区别？\n除了表现上的考虑，这边有一个重要的语义上的不同。在类属性的那个例子中，只有一个对象被引用。用实例属性设置的实例中，实例有可能被多个对象引用。比如说：\n>>> class A: foo =[ ]\n>>> a, b = A(), A()\n>>> a.foo.append(5)\n>>> b.foo\n[5]\n>>> class A:\n...  def __init__(self): self.foo = [ ]\n>>> a, b = A(), A()\n>>> a.foo.append(5)\n>>> b.foo   \n[]\n\n来源：Python: Difference between class and instance attributes\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}