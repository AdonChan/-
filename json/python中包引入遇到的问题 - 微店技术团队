{"title": "python中包引入遇到的问题 - 微店技术团队 ", "index": "flask,python", "content": "最近在用python的flask时候发现一点问题，代码组织如下\n|-app\n    |-__init__.py\n    |-views.py\n    |-operations.py\n    |-xxx.py\n|-run.py\n\n按照python的约定，app作为一个包（package），引入到run.py当中\nfrom app import app\n在app/__init__.py中加入需要引入的包\nfrom app import views,operations,xxx\n按照这样的结构运行整个项目是ok的\noperations.py 写了一些后台任务的逻辑，其中有一些对象是从__init__.py当中引入的\nfrom app import app, db_session, alarm_user, logger\n单独运行operations.py来调试一部分代码时候发现了问题\nif __name__ == \"__main__\":\n    #print get_password()\n    #print get_replication()\n    print refresh_instance()\n在PyCharm当中运行正常，但在命令行环境下无法运行，会出现如下错误：\n#python operations.py\nTraceback (most recent call last):\n  File \"operations.py\", line 3, in <module>\n    from app import app, db_session, alarm_user, logger\nImportError: No module named app\n思索之后发现了玄机，PyCharm运行是以项目的根目录作为程序运行环境的。当进入命令行之后，我们运行operations.py时的运行环境实际是在app/目录下,因此解析app包就失败了。解决方法，扩展python运行环境，把根目录引入运行环境\n#!/bin/env python\n# -*- coding: utf-8 -*-\nimport sys\nsys.path.append(\"../\")\n\nfrom app import app, db_session, alarm_user, logger\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}