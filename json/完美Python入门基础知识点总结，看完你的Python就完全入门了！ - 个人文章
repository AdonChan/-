{"title": "完美Python入门基础知识点总结，看完你的Python就完全入门了！ - 个人文章 ", "index": "python", "content": "完美Python入门基础知识点总结，看完你的Python就完全入门了！\nPython标识符\n在 Python 里，标识符有字母、数字、下划线组成。\n在 Python 中，所有标识符可以包括英文、数字以及下划线(_)，但不能以数字开头。\nPython 中的标识符是区分大小写的。\n以下划线开头的标识符是有特殊意义的。以单下划线开头 _foo 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 from xxx import * 而导入；\n以双下划线开头的 foo 代表类的私有成员；以双下划线开头和结尾的 __foo 代表 Python 里特殊方法专用的标识，如 __init__() 代表类的构造函数。\n如果你在学习Python的过程中遇见了很多疑问和难题，可以加-q-u-n   227 -435-450里面有软件视频资料免费\nPython有五个标准的数据类型\nNumbers（数字）\nString（字符串）\nList（列表）\nTuple（元组）\nDictionary（字典）\nPython支持四种不同的数字类型\nint（有符号整型）\nlong（长整型[也可以代表八进制和十六进制]）\nfloat（浮点型）\ncomplex（复数）\npython的字串列表有2种取值顺序\n从左到右索引默认0开始的，最大范围是字符串长度少1\n从右到左索引默认-1开始的，最大范围是字符串开头\nList（列表） 是 Python 中使用最频繁的数据类型\n列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（即嵌套）。\n列表用 [ ] 标识，是 python 最通用的复合数据类型。\n列表中值的切割也可以用到变量 [头下标:尾下标] ，就可以截取相应的列表，从左到右索引默认 0 开始，从右到左索引默认 -1 开始，下标可以为空表示取到头或尾。\n加号 + 是列表连接运算符，星号 * 是重复操作。\n元组是另一个数据类型，类似于List（列表）\n元组用\"()\"标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表。\n字典(dictionary)是除列表以外python之中最灵活的内置数据结构类型\n列表是有序的对象结合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。\n字典用\"{ }\"标识。字典由索引(key)和它对应的值value组成。\nPython数据类型转换\n有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。\n以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。\n函数描述\nint(x [,base])将x转换为一个整数\nlong(x [,base] )将x转换为一个长整数\nfloat(x)将x转换到一个浮点数\ncomplex(real [,imag])创建一个复数\nstr(x)将对象 x 转换为字符串\nrepr(x)将对象 x 转换为表达式字符串\neval(str)用来计算在字符串中的有效Python表达式,并返回一个对象\ntuple(s)将序列 s 转换为一个元组\nlist(s)将序列 s 转换为一个列表\nset(s)转换为可变集合\ndict(d)创建一个字典。d 必须是一个序列 (key,value)元组。\nfrozenset(s)转换为不可变集合\nchr(x)将一个整数转换为一个字符\nunichr(x)将一个整数转换为Unicode字符\nord(x)将一个字符转换为它的整数值\nhex(x)将一个整数转换为一个十六进制字符串\noct(x)将一个整数转换为一个八进制字符串\nPython 运算符\n算术运算符\n比较（关系）运算符\n赋值运算符\n逻辑运算符\n位运算符\n成员运算符\n身份运算符\n运算符优先级\npython算术运算符\n运算符描述实例\n+加 - 两个对象相加a + b 输出结果 30\n-减 - 得到负数或是一个数减去另一个数a - b 输出结果 -10\n乘 - 两个数相乘或是返回一个被重复若干次的字符串a  b 输出结果 200\n/除 - x除以yb / a 输出结果 2\n%取模 - 返回除法的余数b % a 输出结果 0\n幂 - 返回x的y次幂ab 为10的20次方， 输出结果 100000000000000000000\n//取整除 - 返回商的整数部分9//2 输出结果 4 , 9.0//2.0 输出结果 4.0\npython比较运算符\n以下假设变量a为10，变量b为20：\n运算符描述实例\n==等于 - 比较对象是否相等(a == b) 返回 False。\n!=不等于 - 比较两个对象是否不相等(a != b) 返回 true.\n<>不等于 - 比较两个对象是否不相等(a <> b) 返回 true。这个运算符类似 != 。\n大于 - 返回x是否大于y(a > b) 返回 False。\n<小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。(a < b) 返回 true。\n=大于等于 - 返回x是否大于等于y。(a >= b) 返回 False。\n<=小于等于 - 返回x是否小于等于y。(a <= b) 返回 true。\nPython赋值运算符\n以下假设变量a为10，变量b为20：\n运算符描述实例\n=简单的赋值运算符c = a + b 将 a + b 的运算结果赋值为 c\n+=加法赋值运算符c += a 等效于 c = c + a\n-=减法赋值运算符c -= a 等效于 c = c - a\n=乘法赋值运算符c = a 等效于 c = c * a\n/=除法赋值运算符c /= a 等效于 c = c / a\n%=取模赋值运算符c %= a 等效于 c = c % a\n=幂赋值运算符c = a 等效于 c = c ** a\n//=取整除赋值运算符c //= a 等效于 c = c // a\nPython位运算符\n下表中变量 a 为 60，b 为 13，二进制格式如下：\na = 0011 1100b = 0000 1101-----------------a&b = 0000 1100a|b = 0011 1101a^b = 0011 0001~a = 1100 0011\n运算符描述实例\n&按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0(a & b) 输出结果 12 ，二进制解释： 0000 1100\n|按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。(a | b) 输出结果 61 ，二进制解释： 0011 1101\n^按位异或运算符：当两对应的二进位相异时，结果为1(a ^ b) 输出结果 49 ，二进制解释： 0011 0001\n~按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。\n<<左移动运算符：运算数的各二进位全部左移若干位，由\"<<\"右边的数指定移动的位数，高位丢弃，低位补0。a << 2 输出结果 240 ，二进制解释： 1111 0000\n右移动运算符：把\">>\"左边的运算数的各二进位全部右移若干位，\">>\"右边的数指定移动的位数a >> 2 输出结果 15 ，二进制解释： 0000 1111\nPython逻辑运算符\nPython语言支持逻辑运算符，以下假设变量 a 为 10, b为 20:\n运算符逻辑表达式描述实例\nandx and y布尔\"与\" - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。(a and b) 返回 20。\norx or y布尔\"或\" - 如果 x 是非 0，它返回 x 的值，否则它返回 y 的计算值。(a or b) 返回 10。\nnotnot x布尔\"非\" - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。not(a and b) 返回 False\nPython成员运算符\n除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。\n运算符描述实例\nin如果在指定的序列中找到值返回 True，否则返回 False。x 在 y 序列中 , 如果 x 在 y 序列中返回 True。\nnot in如果在指定的序列中没有找到值返回 True，否则返回 False。x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。\nPython身份运算符\n身份运算符用于比较两个对象的存储单元\n运算符描述实例\nisis 是判断两个标识符是不是引用自一个对象x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False\nis notis not 是判断两个标识符是不是引用自不同对象x is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。\n注：is 与 == 区别：\nis 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。\nPython 循环语句\nPython提供了for循环和while循环（在Python中没有do..while循环）:\n循环类型描述\nwhile 循环在给定的判断条件为 true 时执行循环体，否则退出循环体。\nfor 循环重复执行语句\n嵌套循环你可以在while循环体中嵌套for循环\n循环控制语句可以更改语句执行的顺序。Python支持以下循环控制语句：\n控制语句描述\nbreak 语句在语句块执行过程中终止循环，并且跳出整个循环\ncontinue 语句在语句块执行过程中终止当前循环，跳出该次循环，执行下一次循环。\npass 语句pass是空语句，是为了保持程序结构的完整性。\nPython Number(数字)\nPython 支持四种不同的数值类型：\n整型(Int) - 通常被称为是整型或整数，是正或负整数，不带小数点。\n长整型(long integers) - 无限大小的整数，整数最后是一个大写或小写的L。\n浮点型(floating point real values) - 浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）\n复数(complex numbers) - 复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。\n注：长整型也可以使用小写\"L\"，但是还是建议您使用大写\"L\"，避免与数字\"1\"混淆。Python使用\"L\"来显示长整型。\nPython还支持复数，复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型\nPython Number类型转换\nint(x [,base])将x转换为一个整数\nlong(x [,base])将x转换为一个长整数\nfloat(x )将x转换到一个浮点数\ncomplex(real [,imag ])创建一个复数\nstr(x )将对象 x 转换为字符串\nrepr(x )将对象 x 转换为表达式字符串\neval(str ) 用来计算在字符串中的有效Python表达式,并返回一个对象\ntuple(s )将序列 s 转换为一个元组\nlist(s )将序列 s 转换为一个列表\nchr(x )将一个整数转换为一个字符\nunichr(x )将一个整数转换为Unicode字符\nord(x )将一个字符转换为它的整数值\nhex(x )将一个整数转换为一个十六进制字符串\noct(x )将一个整数转换为一个八进制字符串\npython数学函数\n函数返回值 ( 描述 )\nabs(x)返回数字的绝对值，如abs(-10) 返回 10\nceil(x)返回数字的上入整数，如math.ceil(4.1) 返回 5\ncmp(x, y)如果 x < y 返回 -1, 如果 x == y 返回 0, 如果 x > y 返回 1\nexp(x)返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045\nfabs(x)返回数字的绝对值，如math.fabs(-10) 返回10.0\nfloor(x)返回数字的下舍整数，如math.floor(4.9)返回 4\nlog(x)如math.log(math.e)返回1.0,math.log(100,10)返回2.0\nlog10(x)返回以10为基数的x的对数，如math.log10(100)返回 2.0\nmax(x1, x2,...)返回给定参数的最大值，参数可以为序列。\nmin(x1, x2,...)返回给定参数的最小值，参数可以为序列。\nmodf(x)返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。\npow(x, y)x**y 运算后的值。\nround(x [,n])返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。\nsqrt(x)返回数字x的平方根，数字可以为负数，返回类型为实数，如math.sqrt(4)返回 2+0j\nPython随机函数\n随机数可以用于数学，游戏，安全等领域中，还经常被嵌入到算法中，用以提高算法效率，并提高程序的安全性。\nPython包含以下常用随机数函数\n函数描述\nchoice(seq)从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。\nrandrange ([start,] stop [,step])从指定范围内，按指定基数递增的集合中获取一个随机数，基数缺省值为1\nrandom()随机生成下一个实数，它在[0,1)范围内。\nseed([x])改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。\nshuffle(lst)将序列的所有元素随机排序\nuniform(x, y)随机生成下一个实数，它在[x,y]范围内。\nPython三角函数\nPython包括以下三角函数\n函数描述\nacos(x)返回x的反余弦弧度值。\nasin(x)返回x的反正弦弧度值。\natan(x)返回x的反正切弧度值。\natan2(y, x)返回给定的 X 及 Y 坐标值的反正切值。\ncos(x)返回x的弧度的余弦值。\nhypot(x, y)返回欧几里德范数 sqrt(xx + yy)。\nsin(x)返回的x弧度的正弦值。\ntan(x)返回x弧度的正切值。\ndegrees(x)将弧度转换为角度,如degrees(math.pi/2) ， 返回90.0\nradians(x)将角度转换为弧度\nPython数学常量\n常量描述\npi数学常量 pi（圆周率，一般以π来表示）\ne数学常量 e，e即自然常数（自然常数）。\nPython字符串\nPython转义字符\n在需要在字符中使用特殊字符时，python用反斜杠()转义字符。\n如下表：\n转义字符描述\n(在行尾时)续行符\n反斜杠符号\n'单引号\n\"双引号\na响铃\n退格(Backspace)\ne转义\n空\n换行\n纵向制表符\n横向制表符\n回车\n换页\noyy八进制数，yy代表的字符，例如：o12代表换行\nxyy十六进制数，yy代表的字符，例如：x0a代表换行\nother其它的字符以普通格式输出\nPython字符串运算符\n下表实例变量 a 值为字符串 \"Hello\"，b 变量值为 \"Python\"\n操作符描述实例\n+字符串连接>>>a + b'HelloPython'\n重复输出字符串>>>a  2'HelloHello'\n[]通过索引获取字符串中字符>>>a[1]'e'\n[ : ]截取字符串中的一部分>>>a[1:4]'ell'\nin成员运算符 - 如果字符串中包含给定的字符返回 True>>>\"H\"inaTrue\nnot in成员运算符 - 如果字符串中不包含给定的字符返回 True>>>\"M\"notinaTrue\nr/R原始字符串 - 原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。 原始字符串除在字符串的第一个引号前加上字母\"r\"（可以大小写）以外，与普通字符串有着几乎完全相同的语法。>>>printr' ' >>> printR' '\n%格式字符串请看下一章节\nPython字符串格式化\nPython 支持格式化字符串的输出 。尽管这样可能会用到非常复杂的表达式，但最基本的用法是将一个值插入到一个有字符串格式符 %s 的字符串中。\n在 Python 中，字符串格式化使用与 C 中 sprintf 函数一样的语法。\n如下实例：\n!/usr/bin/pythonprint \"My name is %s and weight is %d kg!\" % ('Zara', 21)\n以上实例输出结果：\nMy name is Zara and weight is 21 kg!\npython字符串格式化符号：\n符号描述\n%c 格式化字符及其ASCII码\n%s 格式化字符串\n%d 格式化整数\n%u 格式化无符号整型\n%o 格式化无符号八进制数\n%x 格式化无符号十六进制数\n%X 格式化无符号十六进制数（大写）\n%f 格式化浮点数字，可指定小数点后的精度\n%e 用科学计数法格式化浮点数\n%E 作用同%e，用科学计数法格式化浮点数\n%g %f和%e的简写\n%G %f 和 %E 的简写\n%p 用十六进制数格式化变量的地址\nPython列表\nPython包含以下函数:\n序号函数\n1cmp(list1, list2)\n比较两个列表的元素\n2len(list)\n列表元素个数\n3max(list)\n返回列表元素最大值\n4min(list)\n返回列表元素最小值\n5list(seq)\n将元组转换为列表\nPython包含以下方法\n序号方法\n1list.append(obj)\n在列表末尾添加新的对象\n2list.count(obj)\n统计某个元素在列表中出现的次数\n3list.extend(seq)\n在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）\n4list.index(obj)\n从列表中找出某个值第一个匹配项的索引位置\n5list.insert(index, obj)\n将对象插入列表\n6list.pop(obj=list[-1])\n移除列表中的一个元素（默认最后一个元素），并且返回该元素的值\n7list.remove(obj)\n移除列表中某个值的第一个匹配项\n8list.reverse()\n反向列表中元素\n9list.sort([func])\n对原列表进行排序\nPython元组\nPython的元组(tuple)与列表类似，不同之处在于元组的元素不能修改。\n元组使用小括号，列表使用方括号。\n元组内置函数：\nPython元组包含了以下内置函数\n序号方法及描述\n1cmp(tuple1, tuple2)\n比较两个元组元素。\n2len(tuple)\n计算元组元素个数。\n3max(tuple)\n返回元组中元素最大值。\n4min(tuple)\n返回元组中元素最小值。\n5tuple(seq)\n将列表转换为元组。\nPython字典（dictionary）\n字典是另一种可变容器模型，且可存储任意类型对象。\n字典的每个键值(key=>value)对用冒号(:)分割，每个对之间用逗号(,)分割，整个字典包括在花括号({})中\n字典内置函数及方法：\nPython字典包含了以下内置函数：\n序号函数及描述\n1cmp(dict1, dict2)\n比较两个字典元素。\n2len(dict)\n计算字典元素个数，即键的总数。\n3str(dict)\n输出字典可打印的字符串表示。\n4type(variable)\n返回输入的变量类型，如果变量是字典就返回字典类型。\nPython字典包含了以下内置方法：\n序号函数及描述\n1dict.clear()\n删除字典内所有元素\n2dict.copy()\n返回一个字典的浅复制\n3dict.fromkeys(seq[, val]))\n创建一个新字典，以序列 seq 中元素做字典的键，val 为字典所有键对应的初始值\n4dict.get(key, default=None)\n返回指定键的值，如果值不在字典中返回default值\n5dict.has_key(key)\n如果键在字典dict里返回true，否则返回false\n6dict.items()\n以列表返回可遍历的(键, 值) 元组数组\n7dict.keys()\n以列表返回一个字典所有的键\n8dict.setdefault(key, default=None)\n和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default\n9dict.update(dict2)\n把字典dict2的键/值对更新到dict里\n10dict.values()\n以列表返回字典中的所有值\n11pop(key[,default])\n删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。\n12popitem()\n随机返回并删除字典中的一对键和值。\n匿名函数lambda\npython 使用 lambda 来创建匿名函数。\nlambda只是一个表达式，函数体比def简单很多。\nlambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。\nlambda函数拥有自己的命名空间，且不能访问自有参数列表之外或全局命名空间里的参数。\n虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。\n如：\nsum =lambda arg1, arg2: arg1 + arg2;print\"相加后的值为 : \", sum(10,20) //输出30\npython import语句\nFrom...import语句\nPython 的 from 语句让你从模块中导入一个指定的部分到当前命名空间中。语法如下：\nfrom modname import name1[, name2[, ... nameN]]\n例如，要导入模块 fib 的 fibonacci 函数，使用如下语句：\nfrom fib import fibonacci\n这个声明不会把整个 fib 模块导入到当前的命名空间中，它只会将 fib 里的 fibonacci 单个引入到执行这个声明的模块的全局符号表。\nFrom...import*语句\n把一个模块的所有内容全都导入到当前的命名空间也是可行的，只需使用如下声明：\nfrom modname import *\n这提供了一个简单的方法来导入一个模块中的所有项目。然而这种声明不该被过多地使用。\n例如我们想一次性引入 math 模块中所有的东西，语句如下：\nfrom math import*\nPython文件操作\n打开和关闭文件\n现在，您已经可以向标准输入和输出进行读写。现在，来看看怎么读写实际的数据文件。\nPython 提供了必要的函数和方法进行默认情况下的文件基本操作。你可以用 file 对象做大部分的文件操作。\nopen函数\n你必须先用Python内置的open()函数打开一个文件，创建一个file对象，相关的方法才可以调用它进行读写。\n语法：\nfile object = open(file_name , access_mode)\n各个参数的细节如下：\nfile_name：file_name变量是一个包含了你要访问的文件名称的字符串值。\naccess_mode：access_mode决定了打开文件的模式：只读，写入，追加等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。\nbuffering:如果buffering的值被设为0，就不会有寄存。如果buffering的值取1，访问文件时会寄存行。如果将buffering的值设为大于1的整数，表明了这就是的寄存区的缓冲大小。如果取负值，寄存区的缓冲大小则为系统默认。\n不同模式打开文件的完全列表：\n模式描述\nr以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。\nrb以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。\nr+打开一个文件用于读写。文件指针将会放在文件的开头。\nrb+以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。\nw打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。\nwb以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。\nw+打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。\nwb+以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。\na打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。\nab以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。\na+打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。\nab+以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。\nFile对象的属性\n一个文件被打开后，你有一个file对象，你可以得到有关该文件的各种信息。\n以下是和file对象相关的所有属性的列表：\n属性描述\nfile.closed返回true如果文件已被关闭，否则返回false。\nfile.mode返回被打开文件的访问模式。\nfile.name返回文件的名称。\nfile.softspace如果用print输出后，必须跟一个空格符，则返回false。否则返回true。\nclose()方法\nFile 对象的 close（）方法刷新缓冲区里任何还没写入的信息，并关闭该文件，这之后便不能再进行写入。\n当一个文件对象的引用被重新指定给另一个文件时，Python 会关闭之前的文件。用 close（）方法关闭文件是一个很好的习惯。\n语法：\nfileObject.close();\nwrite()方法\nwrite()方法可将任何字符串写入一个打开的文件。需要重点注意的是，Python字符串可以是二进制数据，而不是仅仅是文字。\nwrite()方法不会在字符串的结尾添加换行符(' ')：\n语法：\nfileObject.write(string);\nread()方法\nread（）方法从一个打开的文件中读取一个字符串。需要重点注意的是，Python字符串可以是二进制数据，而不是仅仅是文字。\n语法：\nfileObject.read([count]);\n文件定位\ntell()方法告诉你文件内的当前位置；换句话说，下一次的读写会发生在文件开头这么多字节之后。\nseek（offset [,from]）方法改变当前文件的位置。Offset变量表示要移动的字节数。From变量指定开始移动字节的参考位置。\n如果from被设为0，这意味着将文件的开头作为移动字节的参考位置。如果设为1，则使用当前的位置作为参考位置。如果它被设为2，那么该文件的末尾将作为参考位置。\n重命名和删除文件\nPython的os模块提供了帮你执行文件处理操作的方法，比如重命名和删除文件。\n要使用这个模块，你必须先导入它，然后才可以调用相关的各种功能。\nremove方法\n你可以用remove()方法删除文件，需要提供要删除的文件名作为参数。\nPython里的目录\n所有文件都包含在各个不同的目录下，不过Python也能轻松处理。os模块有许多方法能帮你创建，删除和更改目录。\nmkdir()方法\n可以使用os模块的mkdir()方法在当前目录下创建新的目录们。你需要提供一个包含了要创建的目录名称的参数。\n语法：\nos.mkdir(\"newdir\")\nchdir()方法\n可以用chdir()方法来改变当前的目录。chdir()方法需要的一个参数是你想设成当前目录的目录名称。\n语法：\nos.chdir(\"newdir\")\nrmdir()方法\nrmdir()方法删除目录，目录名称以参数传递。\n在删除这个目录之前，它的所有内容应该先被清除。\n语法：\nos.rmdir('dirname')\n文件、目录相关方法\n三个重要的方法来源能对Windows和Unix操作系统上的文件及目录进行一个广泛且实用的处理及操控，如下：\nFile 对象方法: file对象提供了操作文件的一系列方法。\nOS 对象方法: 提供了处理文件及目录的一系列方法。\nPython File(文件)方法\nfile 对象使用 open 函数来创建，下表列出了 file 对象常用的函数：\n序号方法及描述\n1file.close()\n关闭文件。关闭后文件不能再进行读写操作。\n2file.flush()\n刷新文件内部缓冲，直接把内部缓冲区的数据立刻写入文件, 而不是被动的等待输出缓冲区写入。\n3file.fileno()\n返回一个整型的文件描述符(file descriptor FD 整型), 可以用在如os模块的read方法等一些底层操作上。\n4file.isatty()\n如果文件连接到一个终端设备返回 True，否则返回 False。\n5file.next()\n返回文件下一行。\n6file.read([size])\n从文件读取指定的字节数，如果未给定或为负则读取所有。\n7file.readline([size])\n读取整行，包括 \" \" 字符。\n8file.readlines([sizehint])\n读取所有行并返回列表，若给定sizeint>0，返回总和大约为sizeint字节的行, 实际读取值可能比sizhint较大, 因为需要填充缓冲区。\n9file.seek(offset[, whence])\n设置文件当前位置\n10file.tell()\n返回文件当前位置。\n11file.truncate([size])\n截取文件，截取的字节通过size指定，默认为当前文件位置。\n12file.write(str)\n将字符串写入文件，没有返回值。\n13file.writelines(sequence)\n向文件写入一个序列字符串列表，如果需要换行则要自己加入每行的换行符。\nPython内置函数\n内置函数\nabs()divmod()input()open()staticmethod()\nall()enumerate()int()ord()str()\nany()eval()isinstance()pow()sum()\nbasestring()execfile()issubclass()print()super()\nbin()file()iter()property()tuple()\nbool()filter()len()range()type()\nbytearray()float()list()raw_input()unichr()\ncallable()format()locals()reduce()unicode()\nchr()frozenset()long()reload()vars()\nclassmethod()getattr()map()repr()xrange()\ncmp()globals()max()reversed()zip()\ncompile()hasattr()memoryview()round()__import__()\ncomplex()hash()min()set()\ndelattr()help()next()setattr()\ndict()hex()object()slice()\ndir()id()oct()sorted()exec 内置表达式\n喜欢的朋友可以加QQ群813622576，群内有免费资料供大家一起交流学习哦！！！\n\n                ", "mainLikeNum": ["16 "], "mainBookmarkNum": "14"}