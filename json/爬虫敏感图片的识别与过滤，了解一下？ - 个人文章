{"title": "爬虫敏感图片的识别与过滤，了解一下？ - 个人文章 ", "index": "python", "content": "爬虫敏感图片的识别与过滤，了解一下？\n需求\n我们需要识别出敏感作者的avatar头像,把”皮卡丘“换成”优雅的python“。\n敏感图片样本属性:\n\n爬虫获取的图片属性：\n\n替换成：\n原理\n检查两个图片的相似度，一个简单而快速的算法：感知哈希算法(Perceptual Hash)，通过某种提取特征的方式为每个图片计算一个指纹（哈希），这样对比两个图片相似与否就变成了对比两个指纹异同的问题。\n实现\n\nStep1.缩小尺寸\n将图片缩小到8*8的大小，这样做可以去除图片的细节，只保留结构和明暗等基本信息，同时摒弃不同尺寸和比例带来的图片差异。\nStep2.灰度处理\n把缩小后的图片转化为64级灰度图（每个像素只有64种颜色）。\nStep3.计算平均值\n计算所有64个像素的灰度平均值。\nStep4.计算哈希\n这里哈希的计算方法是：上面说的64个像素的灰度与平均值进行比较，大于或等于平均值记为1，小于记为0。\n将每个像素的比较结果组合在一起成为一个64位的二进制整数，这个整数就是此图片的指纹。\nStep5.对比哈希\n不同图片对比的方法，就是对比它们的64位哈希中，有多少位不一样（汉明距离）。一般来说如果不同的位数不超过5，就说明两张图片很相似，如果大于10，就很可能是两张不同的图片。\n\n代码(python3)\n先来安装pillow、requests:\npip3 install pillow requests\n导入包:\nfrom functools import reduce\nfrom PIL import Image\nimport requests\n实现图片相似度算法:\n# 计算pHash（只需要三行）:\ndef phash(img):\n    img = img.resize((8, 8), Image.ANTIALIAS).convert('L')\n    avg = reduce(lambda x, y: x + y, img.getdata()) / 64.\n    return reduce(\n        lambda x, y: x | (y[1] << y[0]),\n        enumerate(map(lambda i: 0 if i < avg else 1, img.getdata())),\n        0\n    )\n\n# 计算汉明距离:\ndef hamming_distance(a, b):\n    return bin(a^b).count('1')\n\n# 计算两个图片是否相似:\ndef is_imgs_similar(img1,img2):\n    return True if hamming_distance(phash(img1),phash(img2)) <= 5 else False\n结合爬虫:\n# 打开本地存放一张敏感图片;\n# 本次为了方便演示，从新浪图床拉下一张1024X1024的图片，保存命名为sensitive.jpg\nsensitive_url=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fwttj7bi36j30sg0sgwm0.jpg\"\nheaders = {\n        \"User-Agent\": \"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.5 (KHTML, like Gecko) Chrome/4.0.249.0 Safari/532.5\"}\npic = requests.get(sensitive_url, headers=headers, timeout=300)\nif pic.status_code == 200:\n    with open(\"sensitive.jpg\", 'wb') as f:\n        f.write(pic.content)\nsensitive_pic = Image.open(\"sensitive.jpg\")\n\n# 爬虫获取的图片\ntarget_url=\"https://ws3.sinaimg.cn/large/006tNbRwgy1fwttsauo6jj30h80han0y.jpg\"\npic = requests.get(target_url, headers=headers, timeout=300)\nif pic.status_code == 200:\n    with open(\"target.jpg\", 'wb') as f:\n        f.write(pic.content)\ntarget_pic = Image.open(\"target.jpg\")\n\n# 判断爬虫获取的图片和敏感图片是否相似\nif is_imgs_similar(target_pic, sensitive_pic):\n    print(\"2张图片相似,替换敏感图片为”优雅的python“:{}\".format(\"https://segmentfault.comhttps://ws2.sinaimg.cn/large/006tNbRwgy1fw9yjmot3uj30y60y6q40.jpg\"))\nelse:\n    print(\"不相似\")\n运行结果：\n\ngithub源码\nhttps://gist.github.com/luzih...\n参考文章\n\n相似图片检测？三行代码就够了 - 掘金\n此 Python2 脚本怎么修改为 Python3 运行 - V2EX\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}