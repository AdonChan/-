{"title": "三元组相加获得target - leetcode ", "index": "leetcode,算法,python", "content": "三元组相加获得target\n3Sum\n\n给定一个数组，选择三个元素相加，结果为target，找出所有符合的三元组\nGiven an array S of n integers, are there elements a, b, c in S such that a + b + c = 0\nFind all unique triplets in the array which gives the sum of zero.\n\nNote: The solution set must not contain duplicate triplets.\nFor example, given array S = [-1, 0, 1, 2, -1, -4]\nexample 1\ninput: [-1, 0, 1, 2, -1, -4]\nA solution set is:\n[\n  [-1, 0, 1],\n  [-1, -1, 2]\n]\n思路\n\n乱序数组，需要找到所有组合，需要三层循环，复杂度为O(n³)。\n可以先排序，排序后只需要两层循环，复杂度为O(n²)。第一层循环遍历所有元素，第二层循环由于数组已经排序，只需要头尾两个指针像中间靠拢，一但三个元素相加为target，则添加此三元组，然后继续像中间靠拢扫描。\n需要避免重复的三元组被加入\n\n代码\nclass Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        nums.sort()\n        ret = []\n        for i in range(len(nums) - 2):\n            # 避免重复\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            j, k = i + 1, len(nums) - 1\n            while j < k:\n                if nums[i] + nums[j] + nums[k] == 0:\n                    ret.append([nums[i], nums[j], nums[k]])\n                    j += 1\n                    k -= 1\n                    # 避免重复\n                    while j < k and nums[j] == nums[j - 1]:\n                        j += 1\n                    while j < k and nums[k] == nums[k + 1]:\n                        k -= 1\n                elif nums[i] + nums[j] + nums[k] < 0:\n                    j += 1\n                else:\n                    k -= 1\n        return ret\n本题以及其它leetcode题目代码github地址: github地址\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}