{"title": "python异常机制个人理解（参考网上资料） - 沉思录 ", "index": "python", "content": "当你的程序中出现异常情况时就需要异常处理。比如当你打开一个不存在的文件时。当你的程序中有一些无效的语句时，Python会提示你有错误存在。下面是一个拼写错误的例子，print写成了Print。Python是大小写敏感的，因此Python将引发一个错误：\n Print 'Hello World'\n File \"\", line 1\n      Print 'Hello World'\n                        ^\nSyntaxError: invalid syntax\n\n>>> print 'Hello World'\nHello World\n\n1、try...except语句try...except语句可以用于捕捉并处理错误。通常的语句放在try块中，错误处理语句放在except块中。示例如下：\n#!/usr/bin/python\n# Filename: try_except.py\n\nimport sys\ntry:\n    s = raw_input('Enter something --> ')\nexcept EOFError:#处理EOFError类型的异常\n    print '/nWhy did you do an EOF on me?'\n    sys.exit() # 退出程序\nexcept:#处理其它的异常\n    print '/nSome error/exception occurred.'\n    \nprint 'Done'\n运行输出如下：\n$ python try_except.py\nEnter something -->\nWhy did you do an EOF on me?\n\n$ python try_except.py\nEnter something --> Python is exceptional!\nDone\n\n说明：每个try语句都必须有至少一个except语句。如果有一个异常程序没有处理，那么Python将调用默认的处理器处理，并终止程序且给出提示。2、引发异常你可以用raise语句来引发一个异常。异常/错误对象必须有一个名字，且它们应是Error或Exception类的子类。下面是一个引发异常的例子：\n#!/usr/bin/python\n#文件名: raising.py\n\nclass ShortInputException(Exception):\n    '''你定义的异常类。'''\n    def __init__(self, length, atleast):\n        Exception.__init__(self)\n        self.length = length\n        self.atleast = atleast\n\ntry:\n    s = raw_input('请输入 --> ')\n    if len(s) < 3:\n        raise ShortInputException(len(s), 3)\n    # raise引发一个你定义的异常\nexcept EOFError:\n    print '/n你输入了一个结束标记EOF'\nexcept ShortInputException, x:#x这个变量被绑定到了错误的实例\n    print 'ShortInputException: 输入的长度是 %d, /\n        长度至少应是 %d' % (x.length, x.atleast)\nelse:\n    print '没有异常发生.'\n\n运行输出如下：\n$ python raising.py\n请输入 -->\n你输入了一个结束标记EOF\n\n$ python raising.py\n请输入 --> --> ab\nShortInputException: 输入的长度是 2, 长度至少应是 3\n\n$ python raising.py\n请输入 --> abc\n没有异常发生.\n\n3、try...finally语句当你正在读文件或还未关闭文件时发生了异常该怎么办呢？你应该使用try...finally语句以释放资源。示例如下：\n#!/usr/bin/python\n# Filename: finally.py\n\nimport time\n\ntry:\n    f = file('poem.txt')\n    while True: # 读文件的一般方法\n        line = f.readline()\n        if len(line) == 0:\n            break\n        time.sleep(2)#每隔两秒输出一行\n        print line,\nfinally:\n    f.close()\n    print 'Cleaning up...closed the file'\n\n运行输出如下：\n$ python finally.py\nProgramming is fun\nWhen the work is done\nCleaning up...closed the file\nTraceback (most recent call last):\n  File \"finally.py\", line 12, in ?\n    time.sleep(2)\nKeyboardInterrupt\n\n说明：我们在两秒这段时间内按下了Ctrl-c，这将产生一个KeyboardInterrupt异常，我们并没有处理这个异常，那么Python将调用默认的处理器，并终止程序，在程序终止之前，finally块中的语句将执行。\n参考资料：CSDN\n凌风技术站pythoon异常机制讲解\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}