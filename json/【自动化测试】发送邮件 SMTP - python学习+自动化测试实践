{"title": "【自动化测试】发送邮件 SMTP - python学习+自动化测试实践 ", "index": "python", "content": "\n如何使用Python将生成的测试报告以邮件附件的形式进行发送呢？\n 一、概要\nSMTP（Simple Mail Transfer Protocol）即简单邮件传输协议,它是一组用于由源地址到目的地址传送邮件的规则，由它来控制信件的中转方式。\npython的smtplib提供了一种很方便的途径发送电子邮件，它对smtp协议进行了简单的封装。Python对SMTP支持有smtplib和email两个模块。其中email负责构造邮件，smtplib则负责发送邮件。\n来理一理Python发送一个未知MIME类型的文件附件基本思路：\n0、前提：导入邮件发送模块\n        from email.mime.text import MIMEText\n        from email.mime.multipart import MIMEMultipart\n        import smtplib\n1、构造MIMEMultipart对象作为根容器\n2、构造MIMEText对象作为邮件显示内容并附加到根容器\n    a、读入文件内容并格式化\n    b、设置附件头\n3、设置根容器属性\n4、得到格式化后的完整文本\n5、用smtp发送邮件\n6、封装成sendEmail类。\n\n二、邮件发送要素\n同时想想我们要发送邮件的几个要素：\n1、服务器。以QQ邮箱举例，则为smtp.qq.com\n2、端口号。有465和587，请使用587\n3、发送者。\n4、密码。密码总不能直接写在文件里吧？哈哈，这里需要使用qq邮箱获取授权码。\n5、收件人。（可能还不止一个）\n6、发送邮件的主题subject。\n7、邮件文本内容。\n8、附件。\n\n\n因为之前写过如何读取.ini配置文件，所以此部分，将发送邮件的一些要素放在了配置文件中，配置文件如下：\n\n对应读取配置文件脚本为：（readConfig.py部分）\nimport os\nimport configparser\n\n# config\ncur_path = os.path.dirname(os.path.relpath(__file__))\nconfigPath = os.path.join(cur_path,'config.ini')\nconf = configparser.ConfigParser()\nconf.read(configPath)\n\ndef get_smtpServer(smtpServer):\n    smtp_server = conf.get('email',smtpServer)\n    return smtp_server\n# \n......\n三、邮件部分\n构建MIMEMultipart()邮件根容器对象后，需要借助根容器来定义邮件的各个要素，比如邮件主题subject、发送人from、接收人to、邮件正文body、邮件附件等。\n如何给邮件定主题、收发人呢？\n# 构建根容器\nmsg = MIMEMultipart()\n\n# 邮件主题、发送人、收件人、内容，此部分可以来自配置文件，也可以直接填入\nmsg['Subject'] = self.mail_subject  # u'自动化测试报告'\nmsg['from'] = self.mail_sender\nmsg['to'] = self.mail_pwd\n如何定义邮件正文body部分呢？\n# 邮件正文部分body，1、可以用HTML自己自定义body内容；2、读取其他文件的内容为body\n# body = \"您好，<p>这里是使用Python登录邮箱，并发送附件的测试<\\p>\"\nwith open(reportFile,'r',encoding='UTF-8') as f:\n     body = f.read()\nmsg.attach(MIMEText(_text=body, _subtype='html', _charset='utf-8'))  # _charset 是指Content_type的类型\n如何给邮件添加附件呢？\n# 添加附件\nattachment = MIMEText(_text=open(reportFile, 'rb').read(), _subtype='base64',_charset= 'utf-8')\nattachment['Content-Type'] = 'application/octet-stream'\nattachment['Content-Disposition'] = 'attachment;filename = \"result.html\"'\nmsg.attach(attachment)\n如何发送？\n发送四部曲：取得服务器连接、再登录邮箱、发送邮件、退出。大致如下啦：\ntry:\n      smtp = smtplib.SMTP_SSL(host=self.mail_smtpserver, port=self.mail_port)  # 继承自SMTP\nexcept:\n      smtp = smtplib.SMTP()\n      smtp.connect(self.mail_smtpserver, self.mail_port)\n\n# smtp.set_debuglevel(1)\n# 创建安全连接，加密SMTP\nsmtp.starttls()     # Puts the connection to the SMTP server into TLS mode.\n# 用户名和密码\nsmtp.login(user=self.mail_sender, password=self.mail_pwd)\n\n# 函数：sendmail(self, from_addr, to_addrs, msg, mail_options=[],rcpt_options=[]):\nsmtp.sendmail(self.mail_sender, self.mail_receiverList, msg.as_string())\nsmtp.quit()\n在里面添加了一句smtp.starttls()。这一句是用来加密SMTP会话，保证邮件安全发送不被窃听的。在创建完SMTP对象后，立刻调用starttls()方法即可。其实整个下来邮件发送模块也就完成了。\n四、问题\n在这个过程中有遇见几个问题，也贴上来跟大家一起分享一下。\n\n抛错535 抛错：smtplib.SMTPAuthenticationError: (535, b'Error: xc7xebxcaxb9xd3xc3xcaxdaxc8xa8xc2xebxb5xc7xc2xbcxa1xa3xcfxeaxc7xe9xc7xebxbfxb4: http://service.mail.qq.com/cg...')解决办法：点击最后的链接，其实是因为授权码问题\n替换授权码后继续报错，535     解决办法：替换端口。因为qq邮箱ssl协议端口有两个：465/587。\n报错：smtplib.SMTPAuthenticationError: (530, b'Must issue a STARTTLS command first.')解决方法：在login()之前，添加一句：smtp.starttls()\n\n五、代码all\n下面贴上整个文件，这个文件是依赖于其他文件的的，所以仅供参考，但是方法是一样的。\nimport smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.base import MIMEBase\n\nclass SendEmail(object):\n    '''\n    发送邮件模块封装，属性均从config.ini文件获得\n    '''\n    def __init__(self, smtpServer, mailPort, mailSender, mailPwd, mailtoList, mailSubject):  \n        self.mail_smtpserver = smtpServer\n        self.mail_port = mailPort\n        self.mail_sender = mailSender\n        self.mail_pwd = mailPwd\n        # 接收邮件列表\n        self.mail_receiverList = mailtoList\n        self.mail_subject = mailSubject\n        # self.mail_content = mailContent\n\n    def sendFile(self, reportFile):\n        '''\n        发送各种类型的附件\n        '''\n        # 构建根容器\n        msg = MIMEMultipart()\n        \n        # 邮件正文部分body，1、可以用HTML自己自定义body内容；2、读取其他文件的内容为body\n        # body = \"您好，<p>这里是使用Python登录邮箱，并发送附件的测试<\\p>\"\n        with open(reportFile,'r',encoding='UTF-8') as f:\n            body = f.read()\n            \n        # _charset 是指Content_type的类型\n        msg.attach(MIMEText(_text=body, _subtype='html', _charset='utf-8'))  \n\n        # 邮件主题、发送人、收件人、内容\n        msg['Subject'] = self.mail_subject  # u'自动化测试报告'\n        msg['from'] = self.mail_sender\n        msg['to'] = self.mail_pwd\n\n        # 添加附件\n        attachment = MIMEText(_text=open(reportFile, 'rb').read(), _subtype='base64',_charset= 'utf-8')\n        attachment['Content-Type'] = 'application/octet-stream'\n        attachment['Content-Disposition'] = 'attachment;filename = \"result.html\"'\n        msg.attach(attachment)\n\n        try:\n            smtp = smtplib.SMTP_SSL(host=self.mail_smtpserver, port=self.mail_port)  # 继承自SMTP\n        except:\n            smtp = smtplib.SMTP()\n            smtp.connect(self.mail_smtpserver, self.mail_port)\n\n        # smtp.set_debuglevel(1)\n        # 创建安全连接，加密SMTP\n        smtp.starttls()     # Puts the connection to the SMTP server into TLS mode.\n        # 用户名和密码\n        smtp.login(user=self.mail_sender, password=self.mail_pwd)\n\n        # 函数：sendmail(self, from_addr, to_addrs, msg, mail_options=[],rcpt_options=[]):\n        smtp.sendmail(self.mail_sender, self.mail_receiverList, msg.as_string())\n        smtp.quit()\n\n# 调试代码\nif __name__ == \"__main__\":\n    mail_smtpserver = 'smtp.qq.com'\n    mail_port = 587\n    mail_sender = '@qq.com'\n    mail_pwd = ''  \n    mail_receiverList = ['@qq.com', '@163.com']\n    mail_subject = u'自动化测试报告'\n    s = SendEmail(mail_smtpserver, mail_port, mail_sender, mail_pwd, mail_receiverList, mail_subject)\n    s.sendFile('F:\\Python_project\\PythonLearnning_2018\\send_email\\sendEmail_Test.html.tar.gz')\n    print('--- test end --- ')\n\n如果觉得文章有丢丢用处，动动小指，点个赞吧！如果哪里写的有问题，或者有更好的方式，cue我一下❤ thanks for watching, keep on updating...\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "1"}