{"title": "在Windows平台使用IIS部署Flask网站 - Python测试开发 ", "index": "python,flask,iis", "content": "在 Windows 平台部署基于 Python 的网站是一件非常折腾的事情，Linux/Unix 平台下有很多选择，本文记录了 Flask 部署到 IIS 的主要步骤，希望对你有所帮助。\n涉及工具和平台\n\nWindows 7 x64\nPython 3.4+\nFlask\n\n完成 Hello Flask 网站\n这是一个最简单的 Flask 网站：\n# hello.py\nfrom flask import Flask\napp=Flask(__name__)\n\n@app.route('/',methods=['GET'])\ndef index():\n    return \"Hello Flask!\"\n\nif __name__=='__main__':\n    app.run(debug=True)\n运行python hello.py后没有错误说明你的 Python 环境一切正常，可以继续后面的步骤。\n安装 IIS，启用 CGI\n在控制面板中找到打开或者关闭 Windows 功能，安装 IIS 和 CGI，如下图。\n\n安装 URL 重写组件\nIIS 需要安装 URL 重写组件，这个可以通过Microsoft Web Platform Installer来安装。下载Microsoft Web Platform Installer后运行，搜索url，分别安装。\n\n注：据说 Windows10 上的 IIS 10 现在不支持 url 重写？待验证\n安装 wfastcgi\n通过pip就可以安装：\npip install wfastcgi\n启用 wfastcgi\n剩下的事情就只有一些配置了。首先以管理员身份运行wfastcgi-enable来在IIS上启用wfastcgi，这个命令位于c:\\python_dir\\scripts，也就是你需要确保此目录在系统的PATH里，或者你需要cd到这个目录后再执行。\n# cd to python_dir\\scripts if it is not in PATH\nwfastcgi-enable\n记住命令执行成功后返回的信息：\nC:\\Python34\\Scripts> wfastcgi-enable\nApplied configuration changes to section \"system.webServer/fastCgi\" for \"MACHINE/WEBROOT/APPHOST\" at configuration commit path \"MACHINE/WEBROOT/APPHOST\"\n\"C:\\Python34\\python.exe|C:\\Python34\\lib\\site-packages\\wfastcgi.py\" can now be used as a FastCGI script processor\n\"C:Python34python.exe|C:Python34libsite-packageswfastcgi.py\" 在下文的配置文件中需要使用。\nTips: 使用命令 wfastcgi-disable 可以将其移除。\n创建 web.config 文件\n下面是一个web.config文件的例子，你只需要修改对应部分就可以使用。\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n  <system.webServer>\n    <handlers>\n      <!-- scriptProcessor 的值来自命令行工具 wfastcgi-enable -->\n      <add name=\"FlaskFastCGI\" path=\"*\" verb=\"*\" modules=\"FastCgiModule\" scriptProcessor=\"C:\\Python34\\python.exe|C:\\Python34\\lib\\site-packages\\wfastcgi.py\" resourceType=\"Unspecified\" requireAccess=\"Script\" />\n    </handlers>\n    <security> \n        <!-- URL 重写中的特殊字符，比如加号+等等 -->\n        <requestFiltering allowDoubleEscaping=\"true\"></requestFiltering> \n    </security> \n  </system.webServer>\n\n  <appSettings>\n    <!-- Required settings -->\n    <!-- 在这里指定Falsk app在模块中的具体位置 -->\n    <add key=\"WSGI_HANDLER\" value=\"hello.app\" />\n    <add key=\"PYTHONPATH\" value=\"~/\" />\n\n    <!-- Optional settings -->\n    <!-- 需要先创建日志目录，否则报错 -->\n    <add key=\"WSGI_LOG\" value=\"C:\\logs\\oboeqa_web.log\" />\n    <add key=\"WSGI_RESTART_FILE_REGEX\" value=\"\" />\n  </appSettings>\n</configuration>\n配置 IIS 目录及权限\n假设你的 Flask 程序将部署在 C:websitehello 下面，那么你的目录结构大致如此。\nC:\\WEBSITE\n└───hello\n        hello.py\n        web.config\n现在你需要让IIS用户拥有访问和执行你的网站脚本的权限，进入 C:website 目录，执行下面两条命令：\ncd C:\\website\nicacls . /grant \"NT AUTHORITY\\IUSR:(OI)(CI)(RX)\"\nicacls . /grant \"Builtin\\IIS_IUSRS:(OI)(CI)(RX)\"\n创建并访问你的网站\n现在你离成功只差一步之遥，打开 IIS 管理面板，新建一个网站。\n\n你只需要填上网站名称，物理地址和相应的端口号，点击确认。\n\n打开浏览器，就可以访问你配置好的网站。如果有错误，可以去检查 web.config 中配置的日志文件。\n\n简单总结\n写完之后发现其实要完成的步骤并不是特别复杂，但是从摸索到实践的过程确实不易。本文仅讨论了部署的主要步骤，其实真正的生产环境你要考虑的问题可能更多，比如使用virtualenv 对网站进行隔离，安全问题，静态文件解析等等。\n最后的惊喜\n据说部署Python 网站到 IIS 还有更简单的办法，那就是安装宇宙最强的IDE - Visual Studio 2015 （VS2017 暂不支持 Python 开发），个人开发者可以免授权使用社区版。在 VS 中你可以使用 PTVS 来快捷开发并部署Python 程序，真正让你一键无忧。\n\nPTVS 支持了常见的 Python Web 框架，比如 Flask，Django，Bottle，Jade 等等，调试的时候只需要按 F5，部署右键选择 publish，跟着向导一步两步你就可以完成魔鬼的步伐。\n参考链接\n\nhttp://stackoverflow.com/ques...\nhttp://stackoverflow.com/ques...\nhttp://blog.csdn.net/firefox1...\nhttp://www.cnblogs.com/liulix...\nhttp://www.cnblogs.com/xiaole...\n\n\n关于作者：Python技术爱好者，目前从事测试开发相关工作，转载请注明原文出处。\n欢迎关注我的博客 https://betacat.online，你可以到我的公众号中去当吃瓜群众。\n\n\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "9"}