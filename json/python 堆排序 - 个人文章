{"title": "python 堆排序 - 个人文章 ", "index": "python", "content": "堆排序\n堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点（但是不保证所有左子树比右子树小反之亦然）。堆排序可以说是一种利用堆的概念来排序的选择排序。分为两种方法：\n大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列；\n小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列；\n堆排序的平均时间复杂度为 Ο(nlogn)。\n算法步骤\n创建一个堆 H[0……n-1]；（**对非叶子节点的子节点进行调节，构建堆**）\n\n把堆首（最大值）和堆尾互换；\n\n把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置；\n\n重复步骤 2，直到堆的尺寸为 1。\nPython 代码实现\ndef buildMaxHeap(arr):\n    import math\n    for i in range(math.floor(len(arr)/2),-1,-1):#构建堆由下往上构建所以用-1\n        heapify(arr,i)\n\ndef heapify(arr, i):\n    left = 2*i+1\n    right = 2*i+2\n    largest = i\n    if left < arrLen and arr[left] > arr[largest]:\n        largest = left\n    if right < arrLen and arr[right] > arr[largest]:\n        largest = right\n\n    if largest != i:\n        swap(arr, i, largest)\n        heapify(arr, largest)\n\ndef swap(arr, i, j):\n    arr[i], arr[j] = arr[j], arr[i]\n\ndef heapSort(arr):\n    global arrLen\n    arrLen = len(arr)\n    buildMaxHeap(arr)\n    for i in range(len(arr)-1,0,-1):\n        swap(arr,0,i)\n        arrLen -=1 #每次踢掉求出的最大值\n        heapify(arr, 0)\n    return arr\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}