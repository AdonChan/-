{"title": "opencv python 直方图 - 个人文章 ", "index": "opencv-python,opencv,python", "content": "Histograms - 1 : Find, Plot, Analyze !!! \n理论\n可以将直方图视为图形或绘图，它可以从中全面了解图像的强度分布. 它是在X轴上具有像素值（范围从0到255，并非总是）的图和在Y轴上的图像中的对应像素数.\n查找直方图\nBINS：像素值区间的像素数.例如将整个直方图分成16个子部分，每个子部分的值是其中所有像素数的总和，每个子部分称为“BIN”.\nDIMS：收集数据的参数数量，在这种情况下，我们只收集有关一件事，强度值的数据，所以这里是1.\nRANGE ：要测量的强度值范围.通常，它是[0,256]，即所有强度值.\n1 OpenCV中的直方图计算\ncv.calcHist（images，channels，mask，histSize，ranges [，hist [，accumulate]]）\n\nimages：它是uint8或float32类型的源图像。它应该用方括号表示，即“[img]”;\nchannels：它也在方括号中给出.它是我们计算直方图的通道索引.例如，如果输入是灰度图像，则其值为[0].对于彩色图像，您可以通过[0]，[1]或[2]分别计算蓝色，绿色或红色通道的直方图.\nmask：蒙版图像.要查找完整图像的直方图，它将显示为“无”.但是，如果要查找图像特定区域的直方图，则必须为其创建蒙版图像并将其作为蒙版.\nhistSize：这代表我们的BIN计数.需要在方括号中给出.对于满量程，我们通过[256].\nranges：这是我们的范围。通常，它是[0,256].\n\n代码：\nimport cv2\nimport numpy as np\n\nimg = cv2.imread('img.jpg')\nhist = cv2.calcHist([img],[0],None,[256],[0,256])\nhist是256x1数组，每个值对应于该图像中具有相应像素值的像素数\n2 Numpy中的直方图计算\nhist，bins = np.histogram（img.ravel（），256，[0,256]）\nhist与我们之前计算的相同. 但是bins将有257个元素，因为Numpy计算bins为0-0.99,1-1.99,2-2.99等.所以最终范围是255-255.99. 为了表示这一点，他们还在箱柜末尾添加256. 但我们不需要256.高达255就足够了.\nNumpy还有另一个函数np.bincount（），它比（大约10倍）np.histogram（）快得多。 因此，对于一维直方图，您可以更好地尝试. 不要忘记在np.bincount中设置minlength = 256. 例如，hist = np.bincount（img.ravel（），minlength = 256）\nNote:OpenCV函数比np.histogram（）快（大约40倍）\n绘制直方图\n1 使用Matplotlib\nMatplotlib附带直方图绘图功能：matplotlib.pyplot.hist（）\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('img.jpg',0)\nplt.hist(img.ravel(),256,[0,256])\nplt.show()\n原图：\n直方图：\n或者可以使用matplotlib的正常图，这对BGR图有好处.需要首先找到直方图数据.代码：\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('img.jpg')\n\ncolor = ('b','g','r')\nfor i,col in enumerate(color):\n    histr = cv2.calcHist([img],[i],None,[256],[0,256])\n    plt.plot(histr,color = col)\n    plt.xlim([0,256])\nplt.show()\n\n掩模的应用\n我们使用cv.calcHist（）来查找完整图像的直方图. 如果要查找图像某些区域的直方图， 只需在要查找直方图的区域上创建一个白色的蒙版图像，否则创建黑色. 然后将其作为掩模传递.\n代码：\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('img.jpg',0)\n\n# create a mask\nmask = np.zeros(img.shape[:2], np.uint8)\nmask[100:300, 100:400] = 255\nmasked_img = cv2.bitwise_and(img,img,mask = mask)\n\n# Calculate histogram with mask and without mask\n# Check third argument for mask\nhist_full = cv2.calcHist([img],[0],None,[256],[0,256])\nhist_mask = cv2.calcHist([img],[0],mask,[256],[0,256])\n\nplt.subplot(221), plt.imshow(img, 'gray')\nplt.subplot(222), plt.imshow(mask,'gray')\nplt.subplot(223), plt.imshow(masked_img, 'gray')\nplt.subplot(224), plt.plot(hist_full), plt.plot(hist_mask)\nplt.xlim([0,256])\n\nplt.show()\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}