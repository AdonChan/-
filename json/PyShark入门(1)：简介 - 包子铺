{"title": "PyShark入门(1)：简介 - 包子铺 ", "index": "pyshark,wireshark,python", "content": "原文地址：http://zodiacg.net/2016/07/in...\n本系列文章译自thePacketGeek的系列文章。原创翻译，转载请注明出处。\n文章作者以PyShark为基础开发了Cloud-Pcap，一个类似CloudShark的pcap在线存储、分析工具。\n你可以使用PyShark在网络接口上进行嗅探，或者打开存储的pcap文件进行分析。如PyShark主页文档中展示的：\nimport pyshark\n\n# 打开存储的捕获文件\ncap = pyshark.FileCapture('/tmp/mycapture.cap')\n\n# 从网络接口上进行捕获\ncapture = pyshark.LiveCapture(interface='eth0')\ncapture.sniff(timeout=10)\n<LiveCapture (5 packets)>\n使用 LiveCapture 或者 FileCapture 方法建立 Capture 对象后，在捕获（capture）和数据包（packet）层面就会有多个方法和属性可用。PyShark的强大在于可以调用tshark内建的所有数据包解码器。我这里只简单展示一下你可以做的一些事情，后续的文章中会展开更深入的说明。\n\n\n获取数据包摘要（类似于tshark捕获的输出）\n>>> for pkt in cap:\n...:     print pkt\n...:\n2 0.512323 0.512323 fe80::f141:48a9:9a2c:73e5 ff02::c SSDP 208 M-SEARCH * HTTP/\n3 1.331469 0.819146 fe80::159a:5c9f:529c:f1eb ff02::c SSDP 208 M-SEARCH * HTTP/\n4 2.093188 0.761719 192.168.1.1 239.255.255.250 SSDP 395 NOTIFY * HTTP/1.  0x0000 (0)\n5 2.096287 0.003099 192.168.1.1 239.255.255.250 SSDP 332 NOTIFY * HTTP/1.  0x0000 (0)\n\n\n按层深入获取数据包属性\n>>> pkt.   #(tab auto-complete)\npkt.captured_length     pkt.highest_layer       pkt.ip                  pkt.pretty_print        pkt.transport_layer\npkt.eth                 pkt.http                pkt.layers              pkt.sniff_time          pkt.udp\npkt.frame_info          pkt.interface_captured  pkt.length              pkt.sniff_timestamp\n>>>\n>>> pkt[pkt.highest_layer].    #(tab auto-complete)\npkt_app.                 pkt_app.get_field_value  pkt_app.raw_mode         pkt_app.request_version\npkt_app.DATA_LAYER       pkt_app.get_raw_value    pkt_app.request\npkt_app.chat             pkt_app.layer_name       pkt_app.request_method\npkt_app.get_field        pkt_app.pretty_print     pkt_app.request_uri\n\n\n遍历数据包，对每个数据包使用给定函数处理\n>>> cap = pyshark.FileCapture('test.pcap', keep_packets=False)\n>>> def print_highest_layer(pkt)\n...: print pkt.highest_layer\n>>> cap.apply_on_packets(print_highest_layer)\nHTTP\nHTTP\nHTTP\nHTTP\nHTTP\n... (truncated)\n\n\n这些只算是管中窥豹！ 谁能想到在Python脚本中使用tshark/Wireshark的强大力量会如此容易呢！我现在发现的唯一缺陷是性能。一旦你开始处理几千个数据包，PyShark就开始变慢了。后续文章中会说明需要那些措施来保留内存。\n\n下一篇：PyShark入门(2): FileCapture和LiveCapture模块\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}