{"title": "[零基础学python]用Python操作数据库（3） - 易水禾 ", "index": "零基础,python", "content": "通过python操作数据库的行为，除了能够完成前面两讲中的操作之外（当然，那是比较常用的），其实任何对数据库进行的操作，都能够通过python-mysqldb来实现。\n\n建立数据库\n\n在《用python操作数据库（1）》中，我是通过mysql>写SQL语句，建立了一个名字叫做qiwsirtest的数据库，然后用下面的方式跟这个数据库连接\n\n>>> import MySQLdb\n>>> conn = MySQLdb.connect(host=\"localhost\",user=\"root\",passwd=\"123123\",db=\"qiwsirtest\",charset=\"utf8\")\n\n\n在上面的连接中，参数db=\"qiwsirtest\"其实可以省略，如果省略，就是没有跟任何具体的数据库连接，只是连接了mysql。\n\n>>> import MySQLdb\n>>> conn = MySQLdb.connect(\"localhost\",\"root\",\"123123\",port=3306,charset=\"utf8\")\n\n\n这种连接没有指定具体数据库，接下来就可以用类似mysql>交互模式下的方式进行操作。\n\n>>> conn.select_db(\"qiwsirtest\")\n>>> cur = conn.cursor()\n>>> cur.execute(\"select * from users\")\n7L\n>>> cur.fetchall()\n((1L, u'qiwsir', u'123123', u'qiwsir@gmail.com'), (2L, u'mypython', u'123456', u'python@gmail.com'), (3L, u'google', u'111222', u'g@gmail.com'), (4L, u'facebook', u'222333', u'f@face.book'), (5L, u'github', u'333444', u'git@hub.com'), (6L, u'docker', u'444555', u'doc@ker.com'), (7L, u'\\u8001\\u9f50', u'9988', u'qiwsir@gmail.com'))\n\n\n用conn.select_db()选择要操作的数据库，然后通过指针就可以操作这个数据库了。其它的操作跟前两讲一样了。\n\n如果不选数据库，而是要新建一个数据库，如何操作？\n\n>>> cur = conn.cursor()\n>>> cur.execute(\"create database newtest\")\n1L\n\n\n建立数据库之后，就可以选择这个数据库，然后在这个数据库中建立一个数据表。\n\n>>> cur.execute(\"create table newusers (id int(2) primary key auto_increment, username varchar(20), age int(2), email text)\")\n0L\n\n\n括号里面是引号，引号里面就是创建数据表的语句，看官一定是熟悉的。这样就在newtest这个数据库中创建了一个名为newusers的表\n\n>>> cur.execute(\"show tables\")\n1L\n>>> cur.fetchall()\n((u'newusers',),)\n\n\n这是查看表的方式。当然，看官可以在mysql>交互模式下查看是不是存在这个表。如下：\n\nmysql> use newtest;\nReading table information for completion of table and column names\nYou can turn off this feature to get a quicker startup with -A\n\nDatabase changed\nmysql> show tables;\n+-------------------+\n| Tables_in_newtest |\n+-------------------+\n| newusers          |\n+-------------------+\n1 row in set (0.00 sec)\n\nmysql> desc newusers;\n+----------+-------------+------+-----+---------+----------------+\n| Field    | Type        | Null | Key | Default | Extra          |\n+----------+-------------+------+-----+---------+----------------+\n| id       | int(2)      | NO   | PRI | NULL    | auto_increment |\n| username | varchar(20) | YES  |     | NULL    |                |\n| age      | int(2)      | YES  |     | NULL    |                |\n| email    | text        | YES  |     | NULL    |                |\n+----------+-------------+------+-----+---------+----------------+\n4 rows in set (0.00 sec)\n\n\n以上就通过python-mysqldb实现了对数据库和表的建立。\n\n当然，能建就能删除。看官可以自行尝试，在这里就不赘述，原理就是在cur.execute()中写SQL语句。\n\n关闭一切\n\n当进行完有关数据操作之后，最后要做的就是关闭游标（指针）和连接。用如下命令实现：\n\n>>> cur.close()\n>>> conn.close()\n\n\n注意关闭顺序，和打开的顺序相反。\n\n为什么要关闭？这个问题有点那个了。你把房子里面都收拾好了，如果离开房子，不关门吗？不要以为自己生活在那个理想社会。树欲静而风不止，小偷在行动。更何况，如果不关闭，服务器的内容总塞着那些东西而没有释放，早晚就满了。所以，必须关闭。必须的。\n\n关于乱码问题\n\n这个问题是编写web时常常困扰程序员的问题，乱码的本质来自于编码格式的设置混乱。所以，要特别提醒诸位注意。在用python-mysqldb的时候，为了放置乱码，可以做如下统一设置：\n\n\nPython文件设置编码 utf-8（文件前面加上 #encoding=utf-8)\nMySQL数据库charset=utf8（数据库的设置方法，可以网上搜索）\nPython连接MySQL是加上参数 charset=utf8（在前面教程中都这么演示了，很重要）\n设置Python的默认编码为 utf-8 (sys.setdefaultencoding(utf-8)，这个后面会讲述）\n\n代码示例：\n\n#encoding=utf-8\n\nimport sys\nimport MySQLdb\n\nreload(sys)\nsys.setdefaultencoding('utf-8')\n\ndb=MySQLdb.connect(user='root',charset='utf8') \n\n\nMySQL的配置文件设置也必须配置成utf8 设置 MySQL 的 my.cnf 文件，在 [client]/[mysqld]部分都设置默认的字符集（通常在/etc/mysql/my.cnf)：\n\n[client] default-character-set = utf8\n[mysqld] default-character-set = utf8\n\n\nwindows操作系统请看官自己google。\n\n\n在我的网站上，有完整的本教程目录，邀请您光临，并不吝赐教: www.itdiffer.com\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "20"}