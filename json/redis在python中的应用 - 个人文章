{"title": "redis在python中的应用 - 个人文章 ", "index": "python,redis", "content": "Redis常用的数据结构\n\nstring\n最简单的结构，key-value形式\nlist\n一个key对应一个链表\nhash:\n记录一个对象\nset\n无重复的数据集合\nsorted set (zset)\n有序无重复的数据集合\n在python中的应用\nredis会默认生成0-15的库，推荐使用StrictRedis连接方式import redispool = redis.ConnectionPool(host='localhost', port= 6379, db= 0)client = redis.StrictRedis(connection_pool=pool)统一操作client.exists(key)  #是否存在keyclient.delete(key)  #删除keyclient.type(key)   #返回key类型client.keys(pattern)  #返回匹配pattern的keyclient.randomkey()  #随机返回一个keyclient.rename(key1, key2) #更改key1名字为key2client.dbsize()  #当前库中key数量client.expire(key, time)  #设置key存在时间client.ttl(key)  #获取key的存在时间client.flushdb()  #删除当前库中所有keyclient.flushall() #删除所有库中的所有keystring类型操作client.set(key, val)client.get(key)client.getset(key, val) #返回旧valueclient.mget(key1, key2, ...) #返回多个key的valclient.setnx(key, value) #设置不存在的keyclient.setex(key, time, value)client.mset(key1, value1, key2, value2,...)#批量设置key,valueclient.msetnx(key, value, key1,value1)client.incr(key) # value + 1client.incrby(key,integer) # value + integerclient.decr(key) # value - 1client.decrby(key, integer)  #value - integerclient.appent(key, value)  #附加valueclient.substr(key, start, end) #返回子串list类型操作client.rpush(key, value) #尾部添加client.lpush(key, value) #头部添加client.llen(key) #长度client.lrange(key, start, end) #client.ltrim(key, start, end)client.lindex(key, index)client.lset(key, index, value)client.lrem(key, count, value)client.lpop(key)client.rpop(key)client.blpop(key1, key2, ...)client.brpop(key1, key2, ...)client.rpoplpush(srckey, dstkey)set类型操作client.sadd(key, value)client.srem(key, value)client.spop(key)client.smove(skey, dkey, value)client.scard(key)client.sismember(key, member)client.sinter(key1, key2,...)client.sinterstore(dstkey, key1, key2, ...)client.sunion(key1, key2, ...)client.sunionstore(dstkey, key1, key2, ...)client.sdiff(key1, key2, ...)client.sdiffstore(dstkey, key1, key2, ...)client.smembers(key)client.srandmember(key)zset类型操作client.zadd(key, score, value)client.zrem(key,value)client.zincrby(key, increment, member)client.zrank(key, value)client.zrevrank(key, value)client.zrange(key, start, end)client.zrevrange(key, start, end)client.zrangebyscore(key, min, max)client.zcard(key)client.zscore(key, element)client.zremrangebyrank(key, min, max)client.zremrangebyscore(key, min, max)client.zunionstore(dstkeyN, key1,…,keyN, WEIGHTS w1,…wN, AGGREGATE SUM|MIN|MAX)hash类型操作client.hset(key, field, value)client.hget(key, field)client.hmget(key, field1, …,field N)client.hmset(key, field1, value1,…,field N, value N)client.hincrby(key, field, integer)client.hexists(key, field)client.hdel(key, field)client.hlen(key)client.hkeys(key)client.hvals(key)client.hgetall(key)\n\n                ", "mainLikeNum": ["3 "], "mainBookmarkNum": "2"}