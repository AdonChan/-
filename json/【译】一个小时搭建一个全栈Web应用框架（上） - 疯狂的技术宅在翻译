{"title": "【译】一个小时搭建一个全栈Web应用框架（上） - 疯狂的技术宅在翻译 ", "index": "react.js,webpack,npm,python,javascript", "content": "翻译：疯狂的技术宅英文标题：Creating a full-stack web application with Python, NPM, Webpack and React英文原文：https://codeburst.io/creating...本文首发微信公众号：充实的脑洞 。转载需注明出处！\n把想法变为现实的能力是空想家与实干家的区别。不管你是在一家跨国公司工作，还是正在为自己的创业公司而努力，那些有能力将创意转化为真正产品的人，都具有宝贵的技能并拥有明显的实力。如果你能在不到一个小时的时间里创建一个全栈的Web应用，那么你就有能力为自己下一个伟大的想法迅速的的创建一个简单的MVP，或者在工作中快速构建一个新的应用程序。\n本文介绍了创建一个简单的全栈Web应用所需的步骤，其中包括一个Python服务器和一个React前端。你可以轻松的在其基础上进行构建，根据你的实际需求进行修改，或是添加一些其他技术特性，例如Redux。\n世界在互联网的驱动下，计算机的基本技术和简单工具已经成为现代商业人士的必备技能。本文适合想要学习怎样制作一个简单的基于web的应用程序，并且具备基本编程技能的人。\n尽管你可以在我的GitHub上找到本文所有的源代码，但是如果你能够从头开始创建这个程序，将会得到最好的学习成果。\n初始项目设置\n.\n├── README.md\n└── fullstack_template/\n    ├── server/\n    └── static/\n        ├── css/\n        ├── dist/\n        ├── images/\n        └── js/\n我们将使用npm包管理器来处理Javascript依赖项。Npm是非常棒的，因为它易于使用，有良好的文档支持，有将近50万个包可供使用，以及合理的默认项目设置方案。\n使用包管理器可以使您的项目依赖项保持最新状态，并能够获取和安装最新的包。\n让我们初始化项目：\n$ cd fullstack_template/static\n$ npm init\n在初始化的过程中可以接受默认设置，但是你最好填写自己的程序名称和Git库等参数，结束后会自动在你的static目录下生成一个名为package.json 的文件。\npackage.json文件有如下几个作用：\n\n跟踪所有的依赖项及其版本。\n它可是使其他开发人员了解你的项目，比如应用的名称、说明、所有者和所在存储库的位置。\n可以非常容易的通过npm进行自动化安装、运行和更新。\n\n安装和配置Webpack\nWebpack是一个模块打包器。它可以处理你所有的模块依赖，并生成静态资源。 使用模块打包器可以减少浏览器需要加载的模块数量，从而大大缩短了网页的加载时间。\n演示了Webpack是怎样工作的\n安装Webpack：\n$ npm i webpack --save-dev\n要使用Webpack，我们需要添加一个 Webpack 配置文件。这个配置告诉 Webpack 在哪里可以找到 JavaScript 和 React 文件，以及在哪里放置生成的JavaScript包。\n在static目录中添加一个名为webpack.config.js的文件，下面的内容如下:\nconst webpack = require('webpack');\nconst config = {\n    entry:  __dirname + '/js/index.jsx',\n    output: {\n        path: __dirname + '/dist',\n        filename: 'bundle.js',\n    },\n    resolve: {\n        extensions: ['.js', '.jsx', '.css']\n    },\n};\nmodule.exports = config;\n添加运行命令\n向package.json文件中添加一些运行命令会是你的开发过程更加顺畅。我总是在自己的package.json 文件中添加一些build, dev-build 和 watch 命令。\nbuild用于构建生产环境版本, dev-build用于开发时的构建版本，watch的作用和dev-build类似，只不过可以自动监视项目文件是否修改，并且自动重新构建被修改的部分，你只需要刷新浏览器就可以看到改动后的结果。\n自动化构建你的项目还有一个好处，那就是你不会耗费时间去思考为什么修改了代码却看不到效果，一般遇到这种情况纯粹是因为你忘记了构建它们！\n以下是我的 package.json 文件内容：\n{\n  \"name\": \"FullStackTemplate\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A Template for creating a Full Stack Web Application using Python, NPM, Webpack and React\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"build\": \"webpack -p --progress --config webpack.config.js\",\n    \"dev-build\": \"webpack --progress -d --config webpack.config.js\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"watch\": \"webpack --progress -d --config webpack.config.js --watch\"\n  },\n  \"keywords\": [\n    \"fullstack\",\n    \"template\",\n    \"python\",\n    \"react\",\n    \"npm\",\n    \"webpack\"\n  ],\n  \"author\": \"Angela Branaes\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"webpack\": \"^3.0.0\"\n  }\n}\n添加Babel支持\nBabel能够允许我们使用最新的JavaScript特性编码，即便是浏览器还没有支持它们。通过安装ES2015和react presets，Babel能够把使用 Javascript 新特性和 React jsx 的代码转换为与当前浏览器兼容的 JavaScript 语法。\nBabel转换JavaScript代码的示例\n安装Babel：\n$ npm i babel-core babel-loader babel-preset-es2015 babel-preset-react --save-dev\n添加Babel presets到package.json文件中：\n\"babel\": {\n  \"presets\": [\n    \"es2015\",\n    \"react\"\n  ]\n},\n在 Webpack 的配置中添加一条 babel-loader 规则。注意，我们在规则中排除了node_modules。这可以保证 Babel 不会尝不会对 node 模块进行转换，从而不会影响到node程序的加载速度。\nmodule: {\n  rules: [\n    {\n      test: /\\.jsx?/,\n      exclude: /node_modules/,\n      use: 'babel-loader'\n    }\n  ]\n}\n创建 index.jsx 和 index.html \n为了能在浏览器中看到一些东西，我们将创建一个简单的index.html页面，这个页面只显示一个由JavaScript弹出的“Hello World!”对话框，以此来证明设置是正确的。\n在static目录中创建一个index.html文件，并填写下面的代码：\n<!— index.html —>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <!-- Latest compiled and minified bootstrap CSS -->\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/latest/css/bootstrap.min.css\">\n    <title>Creating a Full-Stack Python Application with NPM, React.js and Webpack</title>\n  </head>\n  <body>\n    <div id=\"content\" />\n    <script src=\"dist/bundle.js\" type=\"text/javascript\"></script>\n  </body>\n</html>\n在static/js目录下创建一个index.jsx文件，并添加下面的代码：\nalert(“Hello World!”);\n启动一个独立的终端窗口来运行前面创建的 Webpack watch 命令，这样当我们在工作时，它可以在后台一直运行。它会在没有编码错误的前提下自动构建你的包。\n$ npm run watch\n打开浏览器并访问index.html，应该能够看到弹出一个写着“Hello World!”的提示窗口。\n\n创建一个简单的 React 应用\n首先需要安装React：\n$ npm i react react-dom --save-dev\n下一步让我们用一个简单的 React 应用替换掉前面的index.jsx，并让它加载一个创建在单独的 App.js 文件中的 React 类。\n// index.jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nReactDOM.render(<App />, document.getElementById(\"content\"));\nReact 类需要在不同的React源码文件中做导出，以方便后面的使用。通常每个文件中只写一个类，并且导出。\n// App.jsx\nimport React from “react”;\nexport default class App extends React.Component {\n  render () {\n    return <p> Hello React!</p>;\n  }\n}\n如果我们现在刷新浏览器，页面上将会显示“Hello React!”，而不再是“Hello World!”提示框。\n\n配置Python服务\n关于Python服务器我们将会使用Flask。Flask是小型Python应用的最佳选择之一。“微框架（microframework）”可以使你在短短几分钟内轻松快速的使一个服务跑起来。对于大型应用和某些专业领域，企业通常会使用 Pyramid 或 Django。如果你想在自己的环境中拥有很大的灵活性和能够自定义配置的特性，Pyramid是一个不错的选择。Django则提供了一个全功能的Web框架，同时使你不必为应用的配置花费太多的时间，比如在数据库配置等方面。\n创建一个新的virtualenv并安装Flask\n在server目录中创建Flask服务源码文件，添加一个用来返回返回“Hello World!”的端点路由“/hello”，再添加一个主页面端点路由 “/“ 用来渲染index.html 模版。\n# server.py\nfrom flask import Flask, render_template\n\napp = Flask(__name__, static_folder=\"../static/dist\", template_folder=\"../static\")\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\")\n\n@app.route(\"/hello\")\ndef hello():\n    return \"Hello World!”\n\nif __name__ == \"__main__\":\napp.run()\n运行python服务：\n$ python server.py\n接下来访问http://localhost:5000/就可以看到 react 应用提供的的“Hello React!”提示。访问http://localhost:5000/hello 将会看到由Python端点路由返回的“Hello World!” \n恭喜，现在你已经有了一个基本的全栈应用\n如果你想要学习如何与服务器进行通信，以及怎样使自己的程序更加美观，请等待本文的下半部分：《一个小时搭建一个全栈Web应用框架——界面美化与功能实现》\n\n本文首发于公众号：充实的脑洞\n\n\n\n欢迎扫码关注，一个技术宅的保留地\n\n\n\n                ", "mainLikeNum": ["11 "], "mainBookmarkNum": "89"}