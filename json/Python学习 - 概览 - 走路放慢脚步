{"title": "Python学习 - 概览 - 走路放慢脚步 ", "index": "python", "content": "最近空了些，学习一些有意思的东东。主要是看网上的教材，这篇也是边看编写的。\n\nPython教程\n\n输入和输出\n\n输入：raw_input()，输入形式为字符串格式\n\n>>> name = raw_input('input sth:')\ninput sth:Michael\n>>>name\n'Michael'\n\n\n>>>birth = int(raw_input('birth: '))\nbirth: 1485\n>>> birth\n1485\n\n\n这样就把输入的字符串转换为整型了。\n\n输出：print\n\nprint 'The quick brown fox', 'jumps over', 'the lazy dog'\n>>> The quick brown fox jumps over the lazy dog\n\n\n数据类型和变量\n\nPython可以没有大括号{}和分号，用缩进替代{}，程序区分大小写。\n\n比如：\n\nname = raw_input('enter a number:')\nif name >= 0:\n    print name \nelif name < 0:\n    print -name\nelse:\n    print 'not a number'\n\n\n包括了整数(ox表示十六进制)，浮点数(1.23e9＝1.23 x 10的9次方)，字符串(\\为转义字符)，布尔值(True,False，可以用and,or,not运算)，空值(None)\n\n数据类型包括变量和常量。常量通常用大写字母表示(类似C++的define)。\n\nPython的变量赋值类似指针\n\na = 'ABC'\nb = a\na = 'XYZ'\nprint b\n\n\n最后结果是XYZ\n\n字符串和编码\n\n计算机能处理的是二进制文件，就需要把字符串转化为二进制数字进行保存。最早时采用的是ASCII编码方式，用一个字节(8位)把字母编码到计算机里，比如A对应数字65，z对应122。其他语言也需要进行相应的编码，比如GB2312编码中文(两个字节)。在不同语言采用不同编码保存时，读取字符串就成了问题。\n\n因此有了Unicode，把所有语言用一种方式编码。但有时Unicode占用内存较浪费，比如A只需要一个字节的内存，事实上多过一个字节，就又有了UTF-8编码，智能化字符串的编码方式，节省内存。\n\nUnicode转换为UTF-8保存到文件：:\n\n浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器：:\n\n文件保存的是UTF-8的编码方式，打开时变为Unicode编码方式。\n\nPython的出现比Unicode早，普通的字符串用ASCII编码\n\n>>> ord('A')\n65\n>>> chr(65)\n'A'\n\n\n后来增加了对Unicode的支持\n\n>>> print u'中文'\n中文\n>>> u'中'\nu'\\u4e2d'\n\n\nUnicode编码转换未utf-8编码\n\n>>> u'ABC'.encode('utf-8')\n'ABC'\n>>> u'中文'.encode('utf-8')\n'\\xe4\\xb8\\xad\\xe6\\x96\\x87'\n\n\nutf-8转换为unicode\n\n>>> 'abc'.decode('utf-8')\nu'abc'\n>>> '\\xe4\\xb8\\xad\\xe6\\x96\\x87'.decode('utf-8')\nu'\\u4e2d\\u6587'\n>>> print '\\xe4\\xb8\\xad\\xe6\\x96\\x87'.decode('utf-8')\n中文\n\n\n在代码中包含中文时，就需要用UTF-8编码读取，在文件头加一行\n\n# -*- coding: utf-8 -*-\n\n\nPython也可以使用格式化输出。\n\n>>> 'Hello, %s' % 'world'\n'Hello, world'\n>>> 'Hi, %s, you have $%d.' % ('Michael', 1000000)\n'Hi, Michael, you have $1000000.'\n\n\n使用list和tuple\n\nlist类似objective-c下的NSMutableArray，\n\n>>> classmates = ['Michael', 'Bob', 'Tracy']\n>>> classmates\n['Michael', 'Bob', 'Tracy']\n\n\n可以使用len(classmates)计算list元素个数，classmates[-1]获取list最后一个\n元素。\n\n在list最后增加一个元素\n\n>>> classmates.append('Adam')\n>>> classmates\n['Michael', 'Bob', 'Tracy', 'Adam']\n\n\n在某个index插入一个元素\n\n>>> classmates.insert(1, 'Jack')\n>>> classmates\n['Michael', 'Jack', 'Bob', 'Tracy', 'Adam']\n\n\n删除list的最后一个元素classmates.pop()，删除某个index的元素classmates.pop(i)。\n\ntuple是另一种有序元祖，与list类似，但是tuple一旦初始化后就不能修改了。\n\n>>> t = (1, 2)\n>>> t\n(1, 2)\n\n\n如果只定义一个元素，采用t = (1)，则t不是一个tuple，而是一个整形数字，因为()也可以认为是数学公式中的小括号。可以通过加上,来区分tuple和单个数字t = (1, ),python在显示只有一个元组的tuple时，也会加上,。\n\ntuple也可以是可变的，比如：\n\n>>> t = ('a', 'b', ['A', 'B'])\n>>> t[2][0] = 'X'\n>>> t[2][1] = 'Y'\n>>> t\n('a', 'b', ['X', 'Y'])\n\n\ntuple有一个元素是list，而list是可变的。这段代码的两幅图：\n\n\n\n条件判断\n\n两段代码就可以大概知道Python下的if else了。\n\nPython省去了{},使用缩进代替。\n\nage = 3\nif age >= 18:\n    print 'your age is', age\n    print 'adult'\nelse:\n    print 'your age is', age\n    print 'teenager'\n\n\nage = 20\nif age >= 6:\n    print 'teenager'\nelif age >= 18:\n    print 'adult'\nelse:\n    print 'kid'\n\n\n#如果只要x是非零数值、非空字符串、非空list等，就判断为True，否则为False\nif x:\n    print 'True';\n\n\nPython下的for循环\n\nnames = ['Michael', 'Bob', 'Tracy']\nfor name in names:\n    print name\n\n\nsum = 0\nfor x in range(101):\n    sum = sum + x\nprint sum\n\n\nrange(101) = [0,1,2,3....100]\n\n还有一种是while循环\n\nsum = 0\nn = 99\nwhile n > 0:\n    sum = sum + n\n    n = n - 1\nprint sum\n\n\n使用dict和set\n\ndict是一种key-value数据存储格式。\n\n>>> d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}\n>>> d['Michael']\n95\n\n\n判断某dict中是否存在某个键值。\n\n>>> d.get('Thomas')\n>>> d.get('Thomas', -1)//-1为自定义返回值\n-1\n\n\n>>> 'Thomas' in d\nFalse\n\n\n用pop(key)删除dic中的某个特定键值对，比如d.pop('Bob')\n\nstring对象在Python中是不可变的。\n\n>>> a = 'abc'\n>>> b = a.replace('a', 'A')\n>>> b\n'Abc'\n>>> a\n'abc'\n\n\na.replace('a','A')，返回一个新的字符串Abc，原来的a并没有改变。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}