{"title": "Matplotlib库基础分析——绘图机制和方式介绍 - Python量化交易 ", "index": "python", "content": "前言\n绘图是数据可视化最直接的方法，也是直观分析数据所必不可少的步骤。Matplotlib是Python中专门用于数据可视化的第三方库，也是最为流行的绘图库。但在Matplotlib绘图中由于方法太多往往容易混淆不同的绘图方式，本文对Matplotlib绘图机制进行分析，并且通过例程对函数式和对象式这两种绘图方式进行介绍。\n\n绘图机制分析\nMatplotlib中面向用户的程序可视为前端代码，通常由Artist对象处理图表、文字和曲线等的绘制和布局，每个元素都由Artist对象表示。底层的绘图操作由Matplotlib后端(backend)程序处理，后端针对不同的输出选择在对应的界面显示图像或者作为图像文件进行保存。因此后端的输出即包括PyGTK、wxPython、Tkinter、Qt4或MacOSX等界面类的“互动后台”，也包括PNG，SVG，PDF，PS等图像类的“非交互式的后台”。用户绘图程序主要与Artist相关，Artist分为简单类型和容器类型两种。简单类型的Artist为标准的绘图元素，例如Line2D、 Rectangle、Text、AxesImage 等。而容器类型则将许多简单类型的Artist组织成一个整体，例如Axis、 Axes、Figure等。每个Artist对象都有一系列属性控制其显示效果，可通过相应的get_ 和 set_函数进行读写。例如Figure对象和Axes对象有patch属性作为其背景，它的值是一个Rectangle对象。通过set_color函数设置patch的color属性可以修改Figrue图表的背景颜色，修改之后调用fig.canvas.draw()函数更新显示。\nfig = plt.figure()\nfig.show()\nfig.patch.set_color(\"g\")\nfig.canvas.draw()\n\n\nAxes容器是整个matplotlib库的核心，这里以Axes容器为例详细介绍容器类型的内容。Axes容器包含了组成图表的众多Artist对象，并且有许多方法函数帮助我们创建、修改这些对象。和Figure一样，它有一个patch属性作为背景，当它是笛卡尔坐标时，patch属性是一个Rectangle对象，而当它是极坐标时，patch属性则是Circle对象。例如以下语句设置Axes对象的背景颜色为绿色：\nfig = plt.figure()\nax1 = fig.add_subplot(211)\nax1.patch.set_facecolor(\"green\")\n\n\n当调用Axes的绘图方法（例如plot）时，将创建一组Line2D对象，将所有的关键字参数传递给这些Line2D对象，然后将它们添加进Axes.lines属性中，最后返回所创建的Line2D对象列表：\nline = ax1.plot(x_value,y_value,label=u\"随机误差\",ls='-',c='r',lw=1)  \n\n一般并不直接对Axes.lines或者Axes.patches属性进行操作，而是调用add_line或者add_patch等方法完成许多属性设置工作，以下例子通过add_patch方法设置了rect的axes和transform属性：\nfig = plt.figure()\nax = fig.add_subplot(111)\nrect = matplotlib.patches.Rectangle((1,1), width=5, height=12)\nprint \"rect.get_axes:\",rect.get_axes() # rect的axes属性为空\nprint \"rect.get_transform:\",rect.get_transform() #rect的transform属性为缺省值\nprint \"ax.add_patch(rect):\",ax.add_patch(rect) #将rect添加进ax\nprint \"rect.get_axes:\",rect.get_axes() #于是rect的axes属性就是ax\n# rect的transform属性和ax的transData相同\nprint \"rect.get_transform\",rect.get_transform()\nprint \"ax.transData:\",ax.transData\nprint \"ax.get_xlim:\",ax.get_xlim() #ax的X轴范围为0到1，无法显示完整的rect\nprint \"ax.dataLim._get_bounds:\",ax.dataLim._get_bounds() # 数据的范围和rect的大小一致\nprint \"ax.autoscale_view:\",ax.autoscale_view() # 自动调整坐标轴范围\nprint \"ax.get_xlim:\",ax.get_xlim() # 于是X轴可以完整显示rect\nplt.show()\n\n\n函数式绘图\nMATLAB是数据绘图领域广泛使用的语言和工具，调用函数命令可以轻松绘制图形。Matplotlib受MATLAB的启发而构建，有一套完全仿照MATLAB函数形式的绘图API，调用API即可绘制高质量的图形。下面以一个基本的绘图例程来介绍函数式绘图的方法。\n1.1 导入Matplotlib库中的pyplot模块，该模块集合了类似MATLAB的绘图API\nimport matplotlib.pyplot as plt\n\n1.2  xlim(min,max)和ylim(min,max)函数分别调节X轴和Y轴的范围\n1.3  xticks(location,labels)和yticks(location,labels)函数分别设定X轴和Y轴的坐标标签，location为浮点数或整数组成的列表，表示坐标的位置；labels为location等长的字符串列表，表示坐标的标签。Rotation参数可旋转调节坐标标签，当坐标密集时避免标签重叠。\n1.4  title()函数添加标题，参数loc可调整标题显示的位置，分别为center、left、right\n1.5  xlabel()和yticks()函数添加X轴、Y轴的标签\n1.6  grid(b=None, which='major', axis='both', **kwargs)函数增加并设定图形背景，便于更直观地读取线条中点的坐标取值及线条整体分布范围。参数b设定是否显示grid；参数which设定坐标轴分割线类型；参数axis制定绘制grid的坐标轴。\n1.7  legend()函数增加图例显示，当多条曲线显示在同一张图中时，便于识别不同的曲线。参数loc用于设定图例在图中的显示位置，包括best（最适宜位置）、upper right（右上角）等。注：在绘制图形时需设定label，label值即为图例显示的文本内容。\n1.8  plot()函数用于绘制线条，linestyle参数设定线条类型，color参数指定线条的颜色，market参数设置数据点的形状，linewidth参数设定线条的宽度，\nplt.plot(x_value,y_value,label=u\"随机误差\",ls='-',c='r',lw=1)    \nplt.plot(x_line,y_sin,label=u\"sin\",ls='dashed',c='k',lw=2)    \nplt.plot(x_line,y_cos,label=u\"cos\",marker='v',c='y',lw=2)  \n\n\nPython中的函数式编程是通过封装对象实现的，Matplotlib中的函数式调用也是如此。Matplotlib本质上还是以构建对象方式来绘制图像，函数式编程将构建对象的过程封装在函数中，从而让我们觉得很方便。\n\n对象式绘图\nMatplotlib库是由一系列有组织有隶属关系的对象构成的，函数式绘图在原有的对象上增加了一层调用接口，不仅降低了效率，而且掩盖原有的隶属关系，无法体现对象体系中细节功能。为此本文引入Figure和FigureCanvas两个类，将以上的绘图过程更改为面向对象式(OO, object-oriented)绘图。\n1.1 图像中对象隶属关系在Matplotlib中，整个图像为一个Figure对象，所有元素依附于Figure对象中。在Figure对象中可以包含一个或者多个Axes对象。每个Axes对象各自拥有坐标系统的绘图区域，包含各自的Title（标题）、Axis（坐标轴）、Label（坐标轴标注）、Tick（刻度线）、Tick Label（刻度注释）等对象元素。对象隶属关系如下所示：\n\n1.2  pyplot模块中的figure()函数创建名为fig的Figure对象。\nfig = plt.figure()\n\n1.3  在Figure对象中创建两个Axes对象，每个Axes对象即为一个绘图区域。add_axes()和add_subplot()方法都返回一个 matplotlib.axes.Axes 对象。add_axes(rect)中 rect 表示图坐标 [x0, y0, width, height] 中新区域左下角的坐标(x0,y0) 及其宽度和高度，即为画布上的绝对坐标。add_subplot根据三个整数自动分配子区域在栅格的坐标位置。add_subplot(221)表示图像为2*2排列，当前选中的是第一个图像。\nax1 = fig.add_axes([0.1, 0.1, 0.4, 0.3])\nax2 = fig.add_axes([0.5, 0.5, 0.4, 0.3])\nax1 = fig.add_subplot(211)\nax2 = fig.add_subplot(212)\n\n\n1.4  在Axes对象中增加坐标轴标签label对象、tick对象、ticklabel对象和标题title对象，也可以对坐标轴的取值范围xlim和ylim进行设定。\nax1 = fig.add_subplot(211)\nax1.plot(x_value,y_value,label=u\"随机误差\",ls='-',c='r',lw=1)  \nax1.set_xlim(0,len(x_value))#调节X轴范围\nax1.set_ylim(ylim_min,ylim_max)#调节Y轴范围\nax1.set_xticks(np.arange(0,len(x_value),20))\nax1.set_yticks(np.arange(yticks_min,yticks_max,ylim_setp))\nax1.set_xticklabels(['2015-02-01','2015-03-01','2015-04-02','2015-05-02','2015-06-02','2015-07-02','2015-08-02','2015-09-02','2015-10-02','2015-11-02'],fontsize='small')\nax1.set_yticklabels([u'上限预警值',u'标准值',u'下限预警值'])\nax1.set_title(u\"面向对象绘图子图1\")\nax1.set_xlabel(u\"日期\")\nax1.set_ylabel(u\"数值\")\n\n1.5  plt.subplot()方法可更为方便地创建Figure和subplot，在创建新的Figure同时返回一个含有已创建的subplot对象的Numpy数组，因此可以对axes数组进行索引。其中sharex参数为True时所有subplot使用相同的X轴刻度，sharey参数为True时所有subplot使用相同的Y轴刻度。\nfig_ps,axes_ps = plt.subplots(2,3)\n\n\nfor i in range(2):\n    for j in range(3):\n        axes_ps[i,j].hist(np.random.randn(500),bins=50,color='k',alpha=0.5)\n\n\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "2"}