{"title": "WSGI server - Gunicorn worker调度--timeout问题分析 - 心随风扬 ", "index": "gunicorn,python,wsgi", "content": "前一段时间遇到一个问题，gunicorn在启动之后worker一直报timeout的错误，并且一直不断地重启。开始以为是worker内部遇到什么错误才导致gunicorn不断地重启worker。先说一下配置，worker_class我们采用的是gevent，数据库连接采用的mysql+sqlalchemy。因为在app启动时需要连接很多个数据库，遇到这个问题就一直在纠结是不是程序的bug，数据库连接太多会有问题，但程序没有任何日志打出来啊！？但是将连接数据库的数量改小一点，就不会再出现worker重启的现象了。为什么数据库连接数变小就不会timeout了呢？是不是master觉得worker的启动时间太长了，过了一定时间就直接干掉并重启？后来将配置中的timeout改大，数据库连接数改为原来的值，问题解决！\n为什么会这样？\n看gunicorn源码：\n    def run(self):\n        servers = []\n        ssl_args = {}\n\n        if self.cfg.is_ssl:\n            ssl_args = dict(server_side=True, **self.cfg.ssl_options)\n\n        for s in self.sockets:\n            s.setblocking(1)\n            pool = Pool(self.worker_connections)\n            if self.server_class is not None:\n                environ = base_environ(self.cfg)\n                environ.update({\n                    \"wsgi.multithread\": True,\n                    \"SERVER_SOFTWARE\": VERSION,\n                })\n                **server = self.server_class(\n                    s, application=self.wsgi, spawn=pool, log=self.log,\n                    handler_class=self.wsgi_handler, environ=environ,\n                    **ssl_args)**\n            else:\n                hfun = partial(self.handle, s)\n                server = StreamServer(s, handle=hfun, spawn=pool, **ssl_args)\n\n            server.start()\n            servers.append(server)\n\n        while self.alive:\n            **self.notify()**\n            gevent.sleep(1.0)\n重点在server初始化的过程中，由于数据库连接数量过多，这里耗费时间过久，self.notify在timeout时间内一直没有执行，导致主进程master在timeout时间过后立即回收并重启worker进程，所以会导致上面的问题。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}