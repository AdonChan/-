{"title": "简明python教程读书记录 - istory85 ", "index": "python", "content": "@author :  istory85\n\n第九章  数据结构\n\n1.字符串的方法\n\nname = 'Swaroop'\nif name.startswith('Swa'):\n    print 'Yes, the string starts with \"Swa\"'\nif 'a' in name:\n    print 'Yes, it contains the string \"a\"'\nif name.find('war') != -1:\n    print 'Yes, it contains war'\ndelimiter = '_*_'\nmylist = ['Brazil', 'Russia', 'Japan', 'China']\nprint delimiter.join(mylist)\n\n\n第十章 编写一个python脚本\n\n1. 备份脚本 版本4.0\n\nimport os\nimport time\nsource = ['/root/a.txt', '/root/b.txt']\ntarget_dir = '/root/backup/'\ntoday = target_dir + time.strftime('%Y%m%d')\nnow = time.strftime('%H%M%S')\ncomment = raw_input('Enter a comment --> ')\nif len(comment)== 0:\n    target = today + os.sep + now + '.zip'\nelse:\n    target = today + os.sep + now + '_' + \\\n             comment.replace(' ', '_') + '.zip'\nif not os.path.exists(today):\n    os.mkdir(today)\n    print 'Successfully created directory', today\nzip_command = \"zip -qr '%s' %s\" %(target, ' '.join(source))\nif os.system(zip_command) == 0:\n    print 'Successful backup to', target\nelse:\n    print 'Backup Failed'\n\n\n第十一章  面向对象的编程\n\n1.定义一个简单的人 类\n\nclass Person:\n    def __init__(self, name):\n        self.name = name\n    def sayHi(self):\n        print 'Hello, my name is', self.name\np = Person('Swaroop')\np.sayHi()\n\n\n2.测试一个类\n\nclass Person:\n    population = 0\n    def __init__(self, name):\n        self.name = name\n        print '(Initializing %s)' % self.name\n        Person.population += 1\n    def __del__(self):\n        print '%s says bye.' % self.name\n        Person.population -= 1\n        if Person.population == 0:\n            print 'I am the last one.'\n        else:\n            print 'there are still %d people left.' % Person.population\n    def sayHi(self):\n        print 'Hi, my name is %s.' % self.name\n    def howMany(self):\n        if Person.population == 1:\n            print 'I am the only person here.'\n        else:\n            print 'We have %d persons here.' % Person.population\nswaroop = Person('Swaroop')\nswaroop.sayHi()\nswaroop.howMany()\nkalam = Person('Abdul Kalam')\nkalam.sayHi()\nkalam.howMany()\nswaroop.sayHi()\nswaroop.howMany()\nkalam.__del__()\nkalam.howMany()\nswaroop.__del__()\nswaroop.howMany()\n\n\n3.继承 ,由学校成员类继承出老师类和学生类\n\nclass SchoolMember:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n        print '(Initialized SchoolMemeber: %s)' % self.name\n    def tell(self):\n        print 'Name:\"%s\" Age:\"%s\"' % (self.name, self.age)\nclass Teacher(SchoolMember):\n    def __init__(self, name, age, salary):\n        SchoolMember.__init__(self, name, age)\n        self.salary = salary\n        print '(Initialized Teacher: %s)' % self.name\n    def tell(self):\n        SchoolMember.tell(self)\n        print 'Salary: \"%d\"' % self.salary\n\nclass Student(SchoolMember):\n    def __init__(self, name, age, marks):\n        SchoolMember.__init__(self, name, age)\n        self.marks = marks\n        print '(Initialized Student: %s)' % self.name\n    def tell(self):\n        SchoolMember.tell(self)\n        print 'Marks: \"%d\"' % self.marks\nt = Teacher('Mrs. Shrividya', 40, 3000)\ns = Student('Swaroop', 22, 75)\nprint   #prints a blank line\nmembers = [t, s]\nfor member in members:\n    member.tell()\n\n\n第十二章  文件的输入，输出\n\n1.一首简单小诗歌的打印\n\npoem = '''\\\nPrograming is fun\nwhen the work is done\nif you wanna makeyour work also fun:\n        use Python!\n'''\nf = file('poem.txt', 'w')\nf.write(poem)\nf.close()\nf = file('poem.txt')\nwhile True:\n    line = f.readline()\n    if len(line) == 0:\n        break\n    print line,\nf.close()\n\n\n2.储存器\n\nimport cPickle as p\nshoplistfile = 'shoplist.data' #name\nshoplist = ['apple', 'mango', 'carrot'] #thing\nf = file(shoplistfile, 'w') #read\np.dump(shoplist, f) #store\nf.close() #close\ndel shoplist  #del thin\nf = file(shoplistfile) #read\nstoredlist = p.load(f) #load and read\nprint storedlist #show\n\n\n第十三章  异常\n\n1.处理异常\n\nimport sys\ntry:\n    s = raw_input('Enter something --> ')\nexcept EOFError:\n    print '\\nWhy did you do an EOF on me?'\n    sys.exit()\nexcept:\n    print '\\nSome error/exception occurred.'\nprint 'Done'\n\n\n2.如何引发异常\n\nclass ShortInputException(Exception):\n    '''A user-defined exception class.'''\n    def __init__(self, length, atleast):\n        Exception.__init__(self)\n        self.length = length\n        self.atleast = atleast\ntry:\n    s = raw_input('Enter something --> ')\n    if len(s) < 3:\n        raise ShortInputException(len(s), 3)\nexcept EOFError:\n    print '\\nWhy did you do an EOF on me？'\nexcept ShortInputException, x:\n    print 'ShortInputException: The input was of length %d, \\\nwas expecting at least %d' % (x.length, x.atleast)\nelse:\n    print 'No exception was raised'\n\n\n3.运行过程中手动中止，ctr-c，会发生键盘中断异常\n\nimport time\ntry:\n    f = file('poem.txt')\n    while True:\n        line = f.readline()\n        if len(line) == 0:\n            break\n        time.sleep(2)\n        print line,\nfinally:\n    f.close()\n    print 'Cleaning up...closed the file'\n\n\n第十四章 python标准库 \n\n1.sys模块 -- 命令行参数\n\nimport sys\ndef readfile(filename):\n    '''Print a file to the standard output.'''\n    f = file(filename)\n    while True:\n        line = f.readline()\n        if len(line) == 0:\n            break\n        print line,\n    f.close()\nif len(sys.argv) < 2:\n    print 'No action specified.'\n    sys.exit()\nif sys.argv[1].startswith('--'):\n    option = sys.argv[1][2:]\n    if option == 'version':\n        print 'Version 1.2'\n    elif option == 'help':\n        print '''\\\nThis program prints files to the standard output.\nAny number of files can be specified.\nOptions include:\n  --version  :  Prints the version number\n  --help     :  Display this help'''\n    else:\n        print 'Unkown option.'\n    sys.exit()\nelse:\n    for filename in sys.argv[1:]:\n        readfile(filename)\n\n\n2.os 模块\n\nos.name --指示当前使用平台  对windows, 返回'nt'，对于linux等，返回'posix'.\nos.getcwd()得到当前工作目录 os.getenv()/putenv()  读取和设置环境变量\nos.listdir()返回指定目录下的所有文件和目录名    os.remove()\nos.system()运行shell脚本    os.sep取代了当前系统的路径分隔符\nos.linesep给出当前平台的行终止符   os.path.split()返回一个路径的目录名和文件名\nos.path.isfile()/isdir()判断给出的路径是一个文件还是一个目录\nos.path.existe()检验给出的路径是否真实的存在\n\n\n第十五章  更多python的内容 \n\n1.特殊的方法\n\n__init__    __del__     __str__     __lt__\n__getitem__ __len__\n\n\n2.单语句块 / 列表综合\n\nlistone = [2, 3, 4,100]\nlisttwo = [2*i for i in listone if i > 2]\nprint listtwo\n\n\n3.在函数中接受元组和列表，*前缀存储为一个元组，**前缀则存储为一个字典的键值对\n\ndef powersum(power, *args):\n    '''Return the sum of each argument raised to\nspecified power.'''\n    total = 0\n    for i in args:\n        total += pow(i, power)\n    return total\nprint powersum(2, 3, 4)\nprint powersum(2, 10)\n\n\n4.lambda 形式  lambda参数:表达式\n\ndef make_repeater(n):\n    return lambda s: s*n\ntwice = make_repeater(2)\nprint twice('word')\nprint twice(5)\n\n\n5.exec和eval语句  exec来执行储存在字符串和文件中的python语句。  \n  eval来计算存储在字符串中的有效python表达式\n\nexec 'print \"Hello World\"'\nprint eval ('2*3')\n\n\n6.assert语句  用来声明某个条件是真的\n\nmylist = ['item']\nassert len(mylist) >= 1\nmylist.pop()\nassert len(mylist) >= 1\n\n\n7.repr函数，用来取得对象的规范字符串表示\n\ni = []\ni.append('item')\nprint `i`\nprint repr(i)\n\n\n                ", "mainLikeNum": ["3 "], "mainBookmarkNum": "1"}