{"title": "用buildout来构建python项目 - 后端开发那点事儿 ", "index": "python,构建工具", "content": "buildout是什么\nBuildout是一个基于Python的构建工具, 通过一个配置文件，可以从多个部分创建、组装并部署你的应用，即使应用包含了非Python的组件，Buildout也能够胜任. Buildout不但能够像setuptools一样自动更新或下载安装依赖包，而且还能够像virtualenv一样，构建一个封闭隔离的开发环境.\nbuildout 的中文文档非常稀少，这里有篇blog,抄一些东西过来\ndemo\n步骤\n假设你有一个项目newproject，从来用过buildout，安装什么的就不说了\ncd newproject\nbuildout init\nwget -O bootstrap.py https://bootstrap.pypa.io/bootstrap-buildout.py\npython bootstrap.py\n此时你可以看到生成了一些目录:eggs, develop-eggs,bin,parts等，先不管\nvim buildout.cfg\n将下面的东西加到 [buildout] 段, 可以新建一个versions.cfg来做以前pip时requirements.txt的作用\nshow-picked-versions=true\nextends = versions.cfg\nupdate-versions-file = versions.cfg\nversions = versions\n例如项目依赖为ipython，vim versions.cfg\n[versions]\nipython = 5.1.0\nvim buildout.cfg，添加一个develop = 的玩意儿，假设开发的东西是个包，那么目录为.，并且需要写一个setup.py,否则执行bin/buildout会报错\n[buildout]\ndevelop = .\n随便先写一个简单的setup.py, 其中package_dir={'': 'src'}必写，src为你项目的代码根目录,当然如果有依赖包的话需要些install_requires\n# -*- coding: utf-8 -*-\nfrom setuptools import find_packages, setup\n\nsetup(\n    name='buildout_demo',\n    version='0.0.1',\n    license='MIT',\n    author='',\n    author_email='',\n    description='buildout demo',\n    url='',\n    packages=find_packages(exclude=['tests']),\n    package_data={'buildout_demo': ['README.md']},\n    package_dir={'': 'src'},\n)\nvim buildout.cfg, 注意这里面一定要有一个part = 的东西\n然后执行 bin/buildout, 你就会看到buildout会自动下载一些包（例如这里的ipython）丢到eggs目录下\n添加part\n[buildout]\nparts = tools\n\n[tools]\nrecipe = zc.recipe.egg\ninterpreter = ipython\neggs = ipython\n\n[ls_root]\nrecipe = plone.recipe.command\ncommand = ls -al /\nupdate-command = ${:command}\n其中，每个part都必须有recipe这个玩意儿,而recipe则可以认为是buildout一些工作流的命令，例如 zc.recipe.egg是把包装到egg目录， plone.recipe.command 是在buildout时可以执行的某些命令， 可以在 pypi 搜索 buildout recipe列表\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "2"}