{"title": "Deploy Django Project of local MySQL DB using Docker - 前端、后台、机器学习 in 私有云 ", "index": "docker,python,django", "content": "Docker in Windows\nNormally, those kinds of things will be much more troublesome when you want to run them in Windows compare to in Linux. However, Docker has made quite user-friendly for Windows. You just need to run the Docker installer and to enable below two things, then Docker will work like a charm.\n\nHyper-V\nVirtualization in BIOS\n\nDocker Files\nCreate this file with the name Dockerfile and put into your Django project root folder.\n# Use an official Python runtime as a parent image\nFROM python:2.7-slim\n\n# Set the working directory to /app\nWORKDIR /app\n\n# Copy the current directory contents into the container at /app \nADD . /app\n\n# Install any needed packages specified in requirements.txt\nRUN pip install -r requirements.txt\n\n# Make port 80 available to the world outside this container\nEXPOSE 80\n\n# Define environment variable\nENV NAME MySite\n\n# Run manage.py when the container launches\nCMD [\"python\", \"manage.py\", \"runserver\", \"0.0.0.0:80\"]\nYou can define any required modules in requirements.txt, and you don’t need Python or anything in requirements.txt on your system, nor will building or running this image install them on your system.\nmysqlclient\nBuild it\ndocker build -t mysite .\nRun the app, mapping your machine’s port 8000 to the container’s EXPOSED port 80 using -p:\ndocker run -p 8000:80 mysite\nDocker-Compose (To be completed)\nCreate a file called docker-compose.yml in your project directory and paste the following:\nversion: '3'\n\nservices:\n  mariadb:\n    image: mariadb\n    environment:\n       - MYSQL_ROOT_PASSWORD=password\n       - MYSQL_DATABASE=docker\n       - MYSQL_USER=user\n       - MYSQL_PASSWORD=password\n  web:\n    build: .\n    command: python manage.py runserver 0:80\n    volumes:\n      - .:/app\n    ports:\n      - \"8000:80\"\n    depends_on:\n      - mariadb\nDocker Useful Commands\nList dangling images:\ndocker images -f dangling=true\nRemove dangling images:\ndocker rmi -f $(docker images -f dangling=true -q)\nRunning an empty container:\ndocker run -it mysite /bin/bash\nRemove a container:\ndocker rm -f <container-id>\nRemove all stopped containers\ndocker rm $(docker ps -a -q)\nImportant for Windows Users and Using MySQL\nYou may use either docker or docker-compose to bring up your Django application, however, when in Windows and if you are using MySQL as DB, there will be an error 'No modeul named MySQLdb' and when you want to install mysqlclient or libmysqlclient-dev, there will be another error of mysql_config() not found. So in the end, I need to install the packages manually.\n\n\nRun the image as container and then get into the container\ndocker run -p 8000:8000 mysite\ndocker exec -i -t <image name> /bin/bash\n\n\nRun apt-get update in order to get all the packages\napt-get update\n\n\ninstall mysql-server for mysql_config()\napt-get install mysql-server\n\n\ninstall libmysqlclient-dev and gcc in order to install mysqlclient for MySQLdb\napt-get install libmysqlclient-dev\napt-get install gcc\npip install mysqlclient\n\n\nIf you need to import pycurl then you need to install the prerequisite packages\napt-get install libcurl4-gnutls-dev librtmp-dev\npip install pycurl\n\n\nFinally, You can run the application and access it in your browser!\npython manager.py runserver 0.0.0.0:8000\n\n\nYou could also save the changes to an image.\ndocker commit <container-id> <image-name>:<tag>\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}