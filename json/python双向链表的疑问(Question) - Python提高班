{"title": "python双向链表的疑问(Question) - Python提高班 ", "index": "python", "content": "问题\n\n在看 collections.OrderedDict 的源码时，对于它如何构造有序的结构这一部分不是很理解，代码如下:\nclass OrderedDict(dict):\n    'Dictionary that remembers insertion order'\n    # An inherited dict maps keys to values.\n    # The inherited dict provides __getitem__, __len__, __contains__, and get.\n    # The remaining methods are order-aware.\n    # Big-O running times for all methods are the same as regular dictionaries.\n\n    # The internal self.__map dict maps keys to links in a doubly linked list.\n    # The circular doubly linked list starts and ends with a sentinel element.\n    # The sentinel element never gets deleted (this simplifies the algorithm).\n    # Each link is stored as a list of length three:  [PREV, NEXT, KEY].\n\n    def __init__(*args, **kwds):\n        '''Initialize an ordered dictionary.  The signature is the same as\n        regular dictionaries, but keyword arguments are not recommended because\n        their insertion order is arbitrary.\n\n        '''\n        if not args:\n            raise TypeError(\"descriptor '__init__' of 'OrderedDict' object \"\n                            \"needs an argument\")\n        self = args[0]\n        args = args[1:]\n        if len(args) > 1:\n            raise TypeError('expected at most 1 arguments, got %d' % len(args))\n        try:\n            self.__root\n        except AttributeError:\n            self.__root = root = []                     # sentinel node\n            root[:] = [root, root, None]\n            self.__map = {}\n        self.__update(*args, **kwds)\n\n    def __setitem__(self, key, value, dict_setitem=dict.__setitem__):\n        'od.__setitem__(i, y) <==> od[i]=y'\n        # Setting a new item creates a new link at the end of the linked list,\n        # and the inherited dictionary is updated with the new key/value pair.\n        if key not in self:\n            root = self.__root\n            last = root[0]\n            last[1] = root[0] = self.__map[key] = [last, root, key]\n        return dict_setitem(self, key, value)\n\n    def __delitem__(self, key, dict_delitem=dict.__delitem__):\n        'od.__delitem__(y) <==> del od[y]'\n        # Deleting an existing item uses self.__map to find the link which gets\n        # removed by updating the links in the predecessor and successor nodes.\n        dict_delitem(self, key)\n        link_prev, link_next, _ = self.__map.pop(key)\n        link_prev[1] = link_next                        # update link_prev[NEXT]\n        link_next[0] = link_prev                        # update link_next[PREV]\n\n    def __iter__(self):\n        'od.__iter__() <==> iter(od)'\n        # Traverse the linked list in order.\n        root = self.__root\n        curr = root[1]                                  # start at the first node\n        while curr is not root:\n            yield curr[2]                               # yield the curr[KEY]\n            curr = curr[1]                              # move to next node\n\n    def __reversed__(self):\n        'od.__reversed__() <==> reversed(od)'\n        # Traverse the linked list in reverse order.\n        root = self.__root\n        curr = root[0]                                  # start at the last node\n        while curr is not root:\n            yield curr[2]                               # yield the curr[KEY]\n            curr = curr[0]                              # move to previous node\n\n    def clear(self):\n        'od.clear() -> None.  Remove all items from od.'\n        root = self.__root\n        root[:] = [root, root, None]\n        self.__map.clear()\n        dict.clear(self)\n\n主要是对于初始化里和set方法里的做法不清楚, wtf doing here…:\n            self.__root = root = []                     # sentinel node\n            root[:] = [root, root, None]\n            self.__map = {}\n# 和\n            root = self.__root\n            last = root[0]\n            last[1] = root[0] = self.__map[key] = [last, root, key]\n\n后来在网上提问并且自己查询了相关资料后明白这是个带哨兵的双向链表的实现，关于双向链表的知识自己补了下，可以参见这里 和 这里。\n然而对于它为什么要这样实现我还不是很清楚，留待以后继续探究。\n这里 是我在v2ex上关于这个问题的提问。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}