{"title": "获取百度贴吧头像的爬虫 - veve的极客之路 ", "index": "图片存储,网页爬虫,python", "content": "在上一篇文章的基础上增加获取百度贴吧的头像图片的功能，使用到的技术为XPath，Requests，具体实现如下：\n1. 查看网页源代码测试网页链接：http://tieba.baidu.com/p/3522395718?pn=1 通过Chrome定位头像的HTML的代码\n\n每一楼层的标签是：\nclass=\"l_post j_l_post l_post_bright  \"\n\n从楼层开始，直到定位到照片顺序应该是\n\n2. 提取XPath信息通过XPath一步步获取到<img>这一层，提取到这个标签中的src就可以获取到图片的url\nImgLink = ImgFilter.xpath('//div[@class=\"l_post j_l_post l_post_bright  \"]')[0]\nlinks = ImgLink.xpath('//div[@class=\"d_author\"]/ul/li/div[@class=\"icon_relative j_user_card\"]/a/img/@data-tb-lazyload')\n\n这里会遇到一个问题，如果第二个XPath的条件是/img/@src则会遇到一个问题：使用requests获取到的html会有很多空白的头像\n'http://tb2.bdstatic.com/tb/static-pb/img/head_80.jpg'\n\n这是因为网页是分步加载的，首先使用默认的头像展示，再逐步下载自定义头像替换，因此还要得到自定义头像的地址，通过分析网页代码，可以发现：\n<img username=\"Loveyqiang7\" class=\"\" src=\"http://tb2.bdstatic.com/tb/static-pb/img/head_80.jpg\" data-tb-lazyload=\"http://tb.himg.baidu.com/sys/portrait/item/07c44c6f7665797169616e67372941\">\n\n“data-tb-lazyload”这个才是真正的自定义头像的链接地址\n3. 去掉获取到的链接中的重复值由于贴吧的不同的楼层是有可能是同一个人，即同一个头像的；为了节省空间，我们要去除掉重复的图像，在Python中可以通过函数set()去除列表重复值\nlinks = list(set(links))\n测试一下：\nprint(\"before set list:{0}\".format(len(links)))\nlinks = list(set(links))\nprint(\"after set list:{0}\".format(len(links)))\n测试结果：\nbefore set list:27\nafter set list:21\n成功消除掉了重复的链接\n4.将链接存储到jpeg文件Requests库中包含了获取数据的方法get()，可以使用该方法将链接存储到文件中\nwith open(\"img{0}.jpeg\".format(i),\"wb\") as code:\n            code.write(graphic.content)\n            \n完整程序（可直接使用）\n#-*-coding:utf8-*-\nfrom lxml import etree\nimport requests\nimport re\n\ndef GetImgLink(url):\n    html = requests.get(url)\n    html = re.sub(r'charset=(/w*)', 'charset=UTF-8', html.text)\n    ImgFilter = etree.HTML(html)\n    ImgLink = ImgFilter.xpath('//div[@class=\"l_post j_l_post l_post_bright  \"]')[0]\n    links = ImgLink.xpath('//div[@class=\"d_author\"]/ul/li/div[@class=\"icon_relative j_user_card\"]/a/img/@data-tb-lazyload')\n    #links = ImgLink.xpath('//div[@class=\"d_author\"]/ul/li/div[@class=\"icon_relative j_user_card\"]/a/img/@src')\n    print(links)\n    print(\"before set list:{0}\".format(len(links)))\n    links = list(set(links))\n    print(\"after set list:{0}\".format(len(links)))\n    i = 0\n    for each_link in links:\n        graphic = requests.get(each_link)\n        with open(\"img{0}.jpeg\".format(i),\"wb\") as code:\n            code.write(graphic.content)\n        i = i + 1\n\n\npagelink = 'http://tieba.baidu.com/p/3522395718?pn=1'\nGetImgLink(pagelink)\n\n测试结果：\n\n\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "1"}