{"title": "从0开始用python写一个命令行小游戏（11） - 个人文章 ", "index": "python,python3.x", "content": "第11篇！第11篇！第11篇！！！说实话，我真没想过文章会更新到10以上。但是，来都来了，我们的编程还是要继续的嘛！今天的主题：配置文件！首先，上篇链接：从0开始用python写一个命令行小游戏（十）\n配置文件\n匹配植物\n首先，我要强调一点：所有需要变量匹配的地方(类似别的语言中的switch)，都可以用配置文件(主要是字典)。比如，我的游戏里面种植植物时匹配植物名称。既然这个配置文件需要与植物的类交互，所以要使用Python格式，而非JSON或别的语言。试试看：\n# config.py\nimport game_obj as o\n\nconfig = {\n    \"plant_name\": {\n        's': o.Sunflower,\n        'p': o.Peashooter,\n    }\n}\n然后把game.Game.process_command()的try-except-else中的else改为：\nfrom config import config\nif plant_type in config[\"plant_name\"].keys():\n    config[\"plant_name\"][plant_type](x, y)            # 获取类型并调用构造方法\n怎么样，是不是优雅很多呢？但别忘了，我们还有一个地方有急需switch语句：僵尸配置。\n匹配僵尸\n将config.py改为：\nimport game_obj as o\n\nconfig = {\n    \"plant_name\": {}        # 同前\n    \"zombie_name\": {\n        \"zombie\": o.Zombie,\n        \"kicker\": o.KickerZombie,\n    }\n}\n然后将game.Game.step()改为：\ndef step(self, commands):\n    # 其余同前\n    if str(self.step_num) in self.steps.keys():\n        action = self.steps[str(self.step_num)]\n        from config import config\n        from random import randint\n        action_list = action.split()\n        if action_list[-1] in config[\"zombie_name\"].keys():\n            config[\"zombie_name\"][action_list[-1]](9, randint(0, 4), action_list[0] == 'exit')\n好了，今天就这样吧。\n下集预告\n下次···对了，多关卡！敬请继续关注！\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "1"}