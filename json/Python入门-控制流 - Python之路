{"title": "Python入门-控制流 - Python之路 ", "index": "python", "content": "< 返回索引页\n\n\n控制流\n\n\n分支结构\nif/elif/else\n\n\n循环结构\n\nfor\nwhile\nbreak 和 continue\npass\n\n\n\n\n总结\n练习\n参考\n\n控制流\n上一张我们了解了Python的基本语法和数据结构。到目前位置，我们编写的代码都是一行一行的由上往下一次执行的。我们叫这种形式的代码为顺序结构。但是在真正的编码环境中，这种顺序结构实现的场景有限。下面我们来看下Python编程中的一些其他复杂控制结构。\n分支结构\n试想，一个简单的计算器的计算过程，当我们按下加号键的时候，它会执行相加操作；当我们按下减号的时候，它则会执行减法操作。这并产生了2个分支，它根据我们的输入这个未知的条件来决定该走那个分支。像这种根据某条件来判断走那个分支的结构叫做分支结构。\nif/elif/else\nPython 中使用关键字if、 else 和 elif 来实现分支结构。下面我们来看下它们的语法：\n# -*- coding:utf-8 -*- \n# calculator.py\n\na, b = 2, 3 \nsign = input('请输入运算符：')\nif sign == '+':  # 判断条件\n    print(a+b)   # 逻辑代码块\nelif sign == '-':\n    print(a-b)\nelse:\n    print('暂不支持该符号！')\n\n语法说明：\n\nPython 中分支结构中判断条件以英文冒号 : 结尾；\n分支结构中的逻辑代码块，以相对于条件语句向右4个空格或1个tab为分隔符，建议使用4个空格，tab在不同系统表现不一致可能引起混了，影响代码的跨平台性。\n\nif 和 elif 后必须加判断表达式，一般表达式返回值为布尔型，当非布尔型时，表示该值是否存在。\n我们在输入运算符时，需要使用引号引起来，因为单独的一个运算符是会报错的。\n\nif 可单独使用，也可单独和elif 或 else 配合使用。\n\n# if 单独使用\nif '1':\n    print('这是真的')\n# if 和 else 配合使用\nif False:\n    print('这是假的')\nelse:\n    print('这是真的')\n# if 和 elif 配合使用\nif False:\n    print('这是假的')\nelif True:\n    print('这是真的')\n条件语句可嵌套使用。\n# -*- coding:utf-8 -*- \n# nesting_if.py \na = int(input('请输入：'))\n\nif a > 4:\n    if a < 10:\n        print('大于4，小于10')\n    else:\n        print('大于10')\nelse:\n    print('小于4')\n条件语句有一种简便的写法，被称为三元操作符。\na = '上午好' if now_time < 12 else '下午好' \n循环结构\n上一章我们还学习了列表，那当我们要想依次去除列表中的元素时，便需要来循环依次取出，这种循环操作的结构叫做循环结构。\nfor\nPython 中使用关键字 for 来实现已知长度的循环。用法如下：\nl = [1,2,3,4,5]\nsum = 0 \nfor i in l :\n    sum += i\nprint(sum)\n语法说明：\n\n\nfor 使用关键字in 来遍历序列，获取其元素，有变量i 来表示，以便在之下的逻辑代码块中使用。\n\nfor 语句以英文冒号结尾\n逻辑代码块以4个空格或tab分隔。\n\nfor 循环也是可以嵌套使用的。\n\nfor 还可遍历成组元素的序列，如下：\n\nl = [(1,2),(1,3),(1,4)]\nfor i, j in l:\n    print(i)\n    print(j)\n在Python中提供了一个内置函数 range(start,length,step)来专门生成用来遍历的整数序列，其返回值为迭代器（可理解为列表对象，后边会讲解）。start为开始整数，可省略，省略时默认为0；length为结束整数，但不包含自己；step 为步长，及2个整数之间的间隔，可省略，省略时默认为1。使用range函数来改写上边的代码为：\nsum = 0\nfor i in range(1,6):\n    sum += i \nprint(sum)\nwhile\nPython 中还提供了另一种循环语句关键字 while 用来实现满足条件下的一个循环操作。\n# loop_while.py\ni = 0 \nsum = 0\nwhile i <= 5:\n    sum += i\n    i += 1 \nprint(sum)\nbreak 和 continue\n我们试想，当while的条件永远为真时，会发生什么？while下的逻辑块会被一直执行下去，如果该逻辑段耗费计算机资源的话。计算机资源会被他很快的消耗殆尽。这种情况，我们把它叫做死循环或无限循环。这种循环，大多数情况下都是不对的，除非你明确的知道，你就是要使用一个这样的无限循环。Python 中提供了2个关键字break和continue，让我们的操作可以跳出无限循环。\nbreak 用法\n# while 中使用\nsum = 0\nwhile True:\n    if sum > 10:\n        print('sum已大于10')\n        break\n    sum += 1 \n    print(sum)\n\n# for 中使用\nsum = 0 \nfor i in range(100):\n    if sum > 10:\n        print('sum已大于10')\n        break;\n    sum += 1 \n    print(sum)\n语法说明：\n\nbreak 语句执行后，直接退出循环，不再循环\ncontinue用法\nsum = 0 \nfor i in range(100):\n    if sum > 10:\n        print('sum已大于10')\n        continue;\n    sum += 1 \n    print(sum)\n语法说明：\n\ncontinue 语句执行后，当前循环语句之后的语句不再执行，直接跳入下一次的循环继续执行。\npass\n有时候，我们的代码块想直接跳过，可使用关键字 pass。它常被用来占位使用。\nfor i in range(5):\n    pass # 占位\n总结\n本章我们学习了Python的代码逻辑控制流，我们来总结下：\n\nPython代码结构有顺序结构、分支结构和循环结构；\n分支结构可使用if/elif/else 实现；\n循环结构可使用for/while 实现；\n可使用break和continue来截断循环结构；\n\n练习\n1、 输出乘法口诀表(九九表)\nfor i in range(1, 10):\n    for j in range(1, i + 1):\n        print('%d*%d=%d' % (i, j, i * j), end='\\t')\n    print()\n2、实现一个简易计算器， 支持 +、-、*、/的运算。\nfirst = int(input('请输入一个数值：'))\nsign = input('请输入运算符：')\nsecond = int(input('请输入一个数值：'))\nif sign == '+':\n    print('%s+%s=%s' % (first, second, first+second))\nelif sign == '-':\n    print('%s-%s=%s' % (first, second, first-second))\nelif sign == '*':\n    print('%s*%s=%s' % (first, second, first*second))\nelif sign == '/':\n    print('%s/%s=%s' % (first, second, first/second))\nelse:\n    print('不支持该运算符')\n3、 打印如下三角形图案。\n\"\"\"\n*\n**\n***\n****\n*****\n\n    *\n   **\n  ***\n ****\n*****\n\n    *\n   ***\n  *****\n *******\n*********\n\n\"\"\"\nrow = int(input('请输入行数: '))\nfor i in range(row):\n    for _ in range(i + 1):\n        print('*', end='')\n    print()\n\n\nfor i in range(row):\n    for j in range(row):\n        if j < row - i - 1:\n            print(' ', end='')\n        else:\n            print('*', end='')\n    print()\n\nfor i in range(row):\n    for _ in range(row - i - 1):\n        print(' ', end='')\n    for _ in range(2 * i + 1):\n        print('*', end='')\n    print()\n\n4、实现猜数字游戏, 要求：\n\n计算机出一个1~100之间的随机数由人来猜\n计算机根据人猜的数字分别给出提示大一点/小一点/猜对了\n\n\nimport random\n\nanswer = random.randint(1, 100)\ncounter = 0\nwhile True:\n    counter += 1\n    number = int(input('请输入: '))\n    if number < answer:\n        print('大一点')\n    elif number > answer:\n        print('小一点')\n    else:\n        print('恭喜你猜对了!')\n        break\nprint('你总共猜了%d次' % counter)\nif counter > 7:\n    print('你的智商余额明显不足')\n\n参考\n\nhttps://docs.python.org/3.6/tutorial/index.html\nhttps://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/Day02/%E8%AF%AD%E8%A8%80%E5%85%83%E7%B4%A0.md\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}