{"title": "【module】json - 运维、开发技术分享 ", "index": "python", "content": "json and picle\n​    JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式。JSON的数据格式其实就是python里面的字典格式，里面可以包含方括号括起来的数组，也就是python里面的列表。\n在python中，有专门处理json格式的模块—— json 和 picle模块\n\nJson   模块提供了四个方法： dumps、dump、loads、load\npickle 模块也提供了四个功能：dumps、dump、loads、load\n\njson 总结：\n\n\njson 序列化操作方法：\n\ndumps：无文件操作\ndump：序列化+写入文件\n\n\n\njson反序列话方法：\n\nloads：无文件操作\nload：读文件+反序列化\n\n\njson模块序列化的数据更通用\npicle模块序列化的数据仅Python可用，但功能强大，可以序列化函数\njson模块可以序列化和反序列化的数据类型见Python对象（obj）与json对象的对应关系表\n格式化写入文件利用 indent = 4\n\ndumps and dump\ndumps and dump 序列化方法\n\ndumps 只完成了序列化str\ndump必须传文件描述符，将序列化的str保存到文件中\n\n代码：\n>>> import json\n>>> json.dumps([]) # dumps可以格式化所有的基本数据类型为字符串\n'[]'\n>>> json.dumps(1) # 数字\n'1'\n>>> json.dumps('1') # 字符串\n'\"1\"'\n>>> dict = {'name':'tom','age':23}\n>>> json.dumps(dict) # 字典\n'{\"name\": \"tom\", \"age\": 23}'\na = {\"name\":\"Tom\", \"age\":23}\nwith open(\"test.json\", \"w\", encoding='utf-8') as f:\n    f.write(json.dumps(a,indent=4))\n# indent 格式化保存字典，默认为None，小于0为零个空格\n# json.dump(a,f,indent=4) #和上面的效果一样    \nloads and load\nloads and load 反序列化方法\n\nloads 只完成了反序列化\nload 只接受文件描述符，完成了读取文件和反序列化\n\n代码：\n>>> json.loads('{\"name\":\"Tom\", \"age\":23}')\n{'age': 23, 'name': 'Tom'}\n\nwith open('test.json','r',encoding='utf-8') as f:\n    aa = json.load(f.read())\n    f.seek(0)\n    bb = json.load(f)\nprint(aa)\nprint(bb)\njson  and  picle 模块\n\njson模块和picle模块都有  dumps、dump、loads、load四种方法，而且用法一样。\njson模块序列化出来的是通用格式，其它编程语言都认识，就是普通的字符串\npicle模块序列化出来的只有python可以认识，其他编程语言不认识的，表现为乱码\npicle可以序列化函数，但是其他文件想用该函数，在该文件中需要有该文件的定义（定义和参数必须相同，内容可以不同）\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}