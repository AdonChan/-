{"title": "python 正则表达式 - Python学习笔记 ", "index": "python", "content": "正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的。\n\n因为正则表达式也是用字符串表示的，所以，我们要首先了解如何用字符来描述字符。\n正则表达式匹配：\n如果直接给出字符，就是精确匹配。\nd 可以匹配一个数字\nw 可以匹配一个字母或数字\n. 可以匹配任意字符\n要匹配变长的字符，在正则表达式中：\n用 * 表示任意个字符（包括0个）\n用 + 表示至少一个字符\n用 ? 表示0个或1个字符\n用 {n} 表示n个字符\n用 {n,m} 表示n-m个字符\n特殊字符 要用''转义\n正则表达式实例：\n实例1：\nd{3}s+d{3,8}\nd{3} 表示匹配3个数字  例如010\ns 匹配一个空格或tab，s+表示至少有一个空格 例如 ‘ ’\nd{3，8} 表示3-8个数字，例如‘1234567’\n实例2：\n‘0574-65972291’\nd{4}-d{4,8}\nw\n正则表达式进阶：\n要做更精确地匹配，可以用 [ ] 表示范围\nA|B 可以匹配A或B，所以(P|p)ython可以匹配'Python'或者'python'\n^表示行的开头，^d表示必须以数字开头，$表示行的结束，d$表示必须以数字结束。\nre模块\nPython提供re模块，包含所有正则表达式的功能。由于Python的字符串本身也用  转义，因此使用Python的r前缀，就不用考虑转义的问题了。\n例如： s = r ' ABC-001 '\n案例：\nmatch( )方法 判断是否匹配，如果匹配成功，返回Match对象，否则返回None。\n正则切分字符串\n用正则表达式切分字符串比用固定的字符更灵活，请看正常的切分代码\n'a b  c'.split(' ')\n['a', 'b', '', '', 'c']\nre.split(r's+','a b  c')\n['a','b','c']\n如果用户输入了一组标签，下次记得用正则表达式来把不规范的输入转化成正确的数组。\n分组\n除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。用 ( ) 表示的就是要提取的分组（Group）\n贪婪匹配\n正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。\n由于d+采用贪婪匹配，直接把后面的0全部匹配了，结果0*只能匹配空字符串了。\n必须让d+采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，加个?就可以让d+采用非贪婪匹配：\n编译\n当我们在Python中使用正则表达式时，re模块内部会干两件事情：\n\n编译正则表达式，如果正则表达式的字符串本身不合法，会报错；\n用编译后的正则表达式去匹配字符串。\n\n如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式，接下来重复使用时就不需要编译这个步骤了，直接匹配：\n编译后生成Regular Expression对象，由于该对象自己包含了正则表达式，所以调用对应的方法时不用给出正则字符串。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "6"}