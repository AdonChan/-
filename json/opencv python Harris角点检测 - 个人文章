{"title": "opencv python Harris角点检测 - 个人文章 ", "index": "opencv-python,opencv,python", "content": "Harris Corner Detection \n角点\n角点所具有的特征：\n\n轮廓之间的交点\n对于同一场景，即使视角发生变化，通常具备稳定性质的特征\n该点附近区域的像素点无论在梯度方向上还是其梯度幅值上有着较大变化\n\n角点检测基本原理\n使用一个固定窗口在图像上进行任意方向上的滑动，比较滑动前与滑动后两种情况，窗口中的像素灰度变化程度，如果存在任意方向上的滑动，都有着较大灰度变化，那么我们可以认为该窗口中存在角点.\nOpenCV中的Harris角点检测器\ncv2.cornerHarris(src, blockSize, ksize, k[, dst[, borderType]])\nimport numpy as np\nimport cv2\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('img5.png')\ngray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n\ngray = np.float32(gray)\ndst = cv2.cornerHarris(gray,2,3,0.04)\n\n#result is dilated for marking the corners, not important\ndst = cv2.dilate(dst,None)\n\n# Threshold for an optimal value, it may vary depending on the image.\nimg[dst>0.01*dst.max()]=[0,0,255]\n\ncv2.imshow('dst',img)\nif cv2.waitKey(0) & 0xff == 27:\n    cv2.destroyAllWindows()\n\n亚像素级的角点\n有时需要以最高精度找到角落，cv2.cornerSubPix(image, corners, winSize, zeroZone, criteria)\nimport numpy as np\nimport cv2\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('img5.png')\ngray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n\n# find Harris corners\ngray = np.float32(gray)\ndst = cv2.cornerHarris(gray,2,3,0.04)\ndst = cv2.dilate(dst,None)\nret, dst = cv2.threshold(dst,0.01*dst.max(),255,0)\ndst = np.uint8(dst)\n\n# find centroids\nret, labels, stats, centroids = cv2.connectedComponentsWithStats(dst)\n\n# define the criteria to stop and refine the corners\ncriteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)\ncorners = cv2.cornerSubPix(gray,np.float32(centroids),(5,5),(-1,-1),criteria)\n\n# Now draw them\nres = np.hstack((centroids,corners))\nres = np.int0(res)\nimg[res[:,1],res[:,0]]=[0,0,255]\nimg[res[:,3],res[:,2]] = [0,255,0]\n\n\ncv2.imshow('dst',img)\nif cv2.waitKey(0) & 0xff == 27:\n    cv2.destroyAllWindows()\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}