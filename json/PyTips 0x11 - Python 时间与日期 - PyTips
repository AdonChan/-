{"title": "PyTips 0x11 - Python 时间与日期 - PyTips ", "index": "pytips,python3.5,python", "content": "项目地址：https://git.io/pytips\n时间和日期可能涉及到不同的时区、格式，同时又经常需要作为时间戳保存，有时候还需要进行一些加减操作，因此处理起来通常会因为方法太多而无从下手。Python 中与时间和日期相关的标准库有3个：time、datetime 和 calendar。其中 time 模块更偏向于系统相关的时间数据，最常用的可能就是获取当前时间的秒数 time.time()，此外该模块中的很多方法都是与 C 语言中的时间方法相同的，如果习惯了使用 C 的人可以很方便地继续使用这些方法。calendar 则是在时间与日期之上，它的作用真的就是“日历”：\nfrom calendar import TextCalendar, HTMLCalendar\n\ntc = TextCalendar(firstweekday=6)\ntc.prmonth(2016, 3)\n     March 2016\nSu Mo Tu We Th Fr Sa\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19\n20 21 22 23 24 25 26\n27 28 29 30 31\n \n\ndatetime 模块解决了绝大部分时间与日期相关的操作问题，其中包含了：\n\ntimedelta 与时间计算相关的类；\ntime 时间相关的类；\ndate 日期相关的类；\ndatetime 时间和日期；\ntzinfo/timezone 与时区相关的类（timezone 是 Python 3.2 之后新加入的）；\n\n它们的继承关系如下：\n\"\"\"\nobject\n    timedelta\n    tzinfo\n        timezone\n    time\n    date\n        datetime\n\"\"\"\npass\nimport time as _time\nfrom datetime import date, time, datetime\nDate\ndate 由年、月、日组成，有下面几种方式创建一个 date 对象（strptime 是通用方法，将在后面介绍）：\nd1 = date(2016, 3, 29)\nd2 = date.today()\nd3 = date.fromtimestamp(_time.time())\n\nprint(d1)\nprint(d2)\nprint(d3)\n2016-03-29\n2016-03-30\n2016-03-30\n\n获得 date 对象之后，可以分别获取年、月、日等属性（strftime也是通用的格式化方法，将在后面介绍）：\nprint(\"{}/{}/{}\".format(d2.day, d2.month, d2.year))\n\n# date.timetuple() 返回 time 模块中的 struct_time 结构，可以直接转换成 Tuple\nprint(\"time.struct_time: {}\".format(tuple(d2.timetuple()))) \n\n# 星期数\nprint(\"Monday is 0: {}\\nMonday is 1: {}\".format(d2.weekday(), d2.isoweekday()))\n30/3/2016\ntime.struct_time: (2016, 3, 30, 0, 0, 0, 2, 90, -1)\nMonday is 0: 2\nMonday is 1: 3\n\nTime\ndatetime.time 由小时、分钟、秒、微秒（百万分之一秒）组成，和 date 相似的创建方式，但是由于和 time 模块有所重叠，因此并不经常直接用于创建时间对象，如果需要可以从 datetime.datetime 分割出来：\nt1 = time(22, 57, 6, 6)\nt2 = datetime.now().time()\nprint(t1)\nprint(t2)\n22:57:06.000006\n23:56:12.495372\n\ndatetime.datetime\ndatetime.datetime 继承自 date，同时将精度精确到时间，创建方式有：\ndt1 = datetime(2016, 3, 30, 22, 2)\ndt2 = datetime.now()\ndt3 = datetime.fromtimestamp(_time.time())\nprint(dt1)\nprint(dt2)\nprint(dt3)\n2016-03-30 22:02:00\n2016-03-30 23:56:13.800861\n2016-03-30 23:56:13.800924\n\n从 datetime.datetime 中我们可以获取 date 和 time，同样也可以通过 date 和 time 组合得来：\ndt = datetime.now()\ndt = datetime.fromtimestamp(_time.time())\n\nd = dt.date()\nt = dt.time()\n\nprint(\"Date: {}\\nTime: {}\".format(d, t))\n\nprint(\"Datetime: {}\".format(datetime.combine(date.today(), time(2,3,3))))\nDate: 2016-03-30\nTime: 23:56:15.078349\nDatetime: 2016-03-30 02:03:03\n\n时间与日期的运算\n如果把 date、time 和 datetime 看作是时间轴上的点，那么 timedelta 就是时间轴上的线段（时间段，时间间隔）。\nfrom datetime import timedelta\n\ntd = timedelta(weeks=1, days=2, hours=3,minutes=4, seconds=0, microseconds=0, milliseconds=0)\n\nprint(\"Time duration: {}\".format(td))\nTime duration: 9 days, 3:04:00\n\n既然是时间段，那就可以通过两个时间点相减得到：\ncurrent = datetime.now()\ntoday = datetime.combine(date.today(), time(0,0,0))\n\ntd = current - today\nprint(\"{:.0f}s of Today\".format(td.total_seconds()))\n\ntoday = date.today()\nlastyear = today.replace(year=today.year-1)\nprint(today - lastyear)\n\nt1 = current.time()\nt2 = time(0, 0, 0)\ntry:\n    print(t1 - t2)\nexcept TypeError as err:\n    print(err)\n86178s of Today\n366 days, 0:00:00\nunsupported operand type(s) for -: 'datetime.time' and 'datetime.time'\n\n时间段还支持一些算术+、-、*、/、//、%、abs 等，这里就不一一举例了。\nstrftime & strptime\nstrftime（String from Time）和 strptime（String parsed Time）分别是字符串和时间日期之间的转换方法，只不过遵循一定的格式：\nprint(datetime.strftime.__doc__)\nprint(datetime.strptime.__doc__)\nformat -> strftime() style string.\nstring, format -> new datetime parsed from a string (like time.strptime()).\n\nfmat = \"%y-%m-%d\"\ndt = datetime.now()\n\ns = dt.strftime(fmat)\nprint(s)\nprint(datetime.strptime(s, fmat))\n16-03-30\n2016-03-30 00:00:00\n\n可以通过 strftime() and strptime() Behavior 查看转换格式表，Python 使用的格式与 C standard(1989)是一致的，不过需要注意的是，所有格式都是 zero-padded，也就是自动补零的，如果想要去掉补零，可以用 %-m 等方式，但据说在 Windows 系统上是不能用的:D\nfmat = \"%y/%-m/%-d\"\ndt = datetime.now()\ndt = dt - timedelta(days=22)\n\nprint(dt.strftime(fmat))\n\n# 当然也可以用\nprint(\"{}/{}/{}\".format(dt.strftime(\"%y\"), dt.month, dt.day))\n16/3/8\n16/3/8\n\n\n\n欢迎关注公众号 PyHub 每日推送\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "7"}