{"title": "命令行神器 Click 简明笔记 - Keep Going ", "index": "python", "content": "Click\nClick 是用 Python 写的一个第三方模块，用于快速创建命令行。我们知道，Python 内置了一个 Argparse 的标准库用于创建命令行，但使用起来有些繁琐，Click 相比于 Argparse，就好比 requests 相比于 urllib。\n快速使用\nClick 的使用大致有两个步骤：\n\n使用 @click.command() 装饰一个函数，使之成为命令行接口；\n使用 @click.option() 等装饰函数，为其添加命令行选项等。\n\n它的一种典型使用形式如下：\nimport click\n\n@click.command()\n@click.option('--param', default=default_value, help='description')\ndef func(param):\n    pass\n下面，让我们看一下官方文档的入门例子：\nimport click\n\n@click.command()\n@click.option('--count', default=1, help='Number of greetings.')\n@click.option('--name', prompt='Your name', help='The person to greet.')\ndef hello(count, name):\n    \"\"\"Simple program that greets NAME for a total of COUNT times.\"\"\"\n    for x in range(count):\n        click.echo('Hello %s!' % name)\n\nif __name__ == '__main__':\n    hello()\n在上面的例子中，函数 hello 有两个参数：count 和 name，它们的值从命令行中获取。\n\n@click.command() 使函数 hello 成为命令行接口；\n@click.option 的第一个参数指定了命令行选项的名称，可以看到，count 的默认值是 1；\n使用 click.echo 进行输出是为了获得更好的兼容性，因为 print 在 Python2 和 Python3 的用法有些差别。\n\n看看执行情况：\n$ python hello.py\nYour name: Ethan           # 这里会显示 'Your name: '(对应代码中的 prompt)，接受用户输入\nHello Ethan!\n\n$ python hello.py --help   # click 帮我们自动生成了 `--help` 用法\nUsage: hello.py [OPTIONS]\n\n  Simple program that greets NAME for a total of COUNT times.\n\nOptions:\n  --count INTEGER  Number of greetings.\n  --name TEXT      The person to greet.\n  --help           Show this message and exit.\n\n$ python hello.py --count 3 --name Ethan    # 指定 count 和 name 的值\nHello Ethan!\nHello Ethan!\nHello Ethan!\n\n$ python hello.py --count=3 --name=Ethan    # 也可以使用 `=`，和上面等价\nHello Ethan!\nHello Ethan!\nHello Ethan!\n\n$ python hello.py --name=Ethan              # 没有指定 count，默认值是 1\nHello Ethan!\nclick.option\noption 最基本的用法就是通过指定命令行选项的名称，从命令行读取参数值，再将其传递给函数。在上面的例子，我们看到，除了设置命令行选项的名称，我们还会指定默认值，help 说明等，option 常用的设置参数如下：\n\ndefault: 设置命令行参数的默认值\nhelp: 参数说明\ntype: 参数类型，可以是 string, int, float 等\nprompt: 当在命令行中没有输入相应的参数时，会根据 prompt 提示用户输入\nnargs: 指定命令行参数接收的值的个数\n\n下面，我们再看看相关的例子。\n指定 type\n我们可以使用 type 来指定参数类型：\nimport click\n\n@click.command()\n@click.option('--rate', type=float, help='rate')   # 指定 rate 是 float 类型\ndef show(rate):\n    click.echo('rate: %s' % rate)\n\nif __name__ == '__main__':\n    show()\n执行情况：\n$ python click_type.py --rate 1\nrate: 1.0\n$ python click_type.py --rate 0.66\nrate: 0.66\n可选值\n在某些情况下，一个参数的值只能是某些可选的值，如果用户输入了其他值，我们应该提示用户输入正确的值。在这种情况下，我们可以通过 click.Choice() 来限定：\nimport click\n\n@click.command()\n@click.option('--gender', type=click.Choice(['man', 'woman']))    # 限定值\ndef choose(gender):\n    click.echo('gender: %s' % gender)\n\nif __name__ == '__main__':\n    choose()\n执行情况：\n$ python click_choice.py --gender boy\nUsage: click_choice.py [OPTIONS]\n\nError: Invalid value for \"--gender\": invalid choice: boy. (choose from man, woman)\n\n$ python click_choice.py --gender man\ngender: man\n多值参数\n有时，一个参数需要接收多个值。option 支持设置固定长度的参数值，通过 nargs 指定。\n看看例子就明白了：\nimport click\n\n@click.command()\n@click.option('--center', nargs=2, type=float, help='center of the circle')\n@click.option('--radius', type=float, help='radius of the circle')\ndef circle(center, radius):\n    click.echo('center: %s, radius: %s' % (center, radius))\n\nif __name__ == '__main__':\n    circle()\n在上面的例子中，option 指定了两个参数：center 和 radius，其中，center 表示二维平面上一个圆的圆心坐标，接收两个值，以元组的形式将值传递给函数，而 radius 表示圆的半径。\n执行情况：\n$ python click_multi_values.py --center 3 4 --radius 10\ncenter: (3.0, 4.0), radius: 10.0\n\n$ python click_multi_values.py --center 3 4 5 --radius 10\nUsage: click_multi_values.py [OPTIONS]\n\nError: Got unexpected extra argument (5)\n输入密码\n有时，在输入密码的时候，我们希望能隐藏显示。option 提供了两个参数来设置密码的输入：hide_input 和 confirmation_promt，其中，hide_input 用于隐藏输入，confirmation_promt 用于重复输入。\n看看例子：\nimport click\n\n@click.command()\n@click.option('--password', prompt=True, hide_input=True, confirmation_prompt=True)\ndef input_password(password):\n    click.echo('password: %s' % password)\n\n\nif __name__ == '__main__':\n    input_password()\n执行情况：\n$ python click_password.py\nPassword:                         # 不会显示密码\nRepeat for confirmation:          # 重复一遍\npassword: 666666\n由于上面的写法有点繁琐，click 也提供了一种快捷的方式，通过使用 @click.password_option()，上面的代码可以简写成：\nimport click\n\n@click.command()\n@click.password_option()\ndef input_password(password):\n    click.echo('password: %s' % password)\n\nif __name__ == '__main__':\n    input_password()\n改变命令行程序的执行\n有些参数会改变命令行程序的执行，比如在终端输入 python 是进入 python 控制台，而输入 python --version 是打印 python 版本。Click 提供 eager 标识对参数名进行标识，如果输入该参数，则会拦截既定的命令行执行流程，跳转去执行一个回调函数。\n让我们看看例子：\nimport click\n\ndef print_version(ctx, param, value):\n    if not value or ctx.resilient_parsing:\n        return\n    click.echo('Version 1.0')\n    ctx.exit()\n\n@click.command()\n@click.option('--version', is_flag=True, callback=print_version,\n              expose_value=False, is_eager=True)\n@click.option('--name', default='Ethan', help='name')\ndef hello(name):\n    click.echo('Hello %s!' % name)\n\nif __name__ == '__main__':\n    hello()\n其中：\n\nis_eager=True 表明该命令行选项优先级高于其他选项；\nexpose_value=False 表示如果没有输入该命令行选项，会执行既定的命令行流程；\ncallback 指定了输入该命令行选项时，要跳转执行的函数；\n\n执行情况：\n$ python click_eager.py\nHello Ethan!\n\n$ python click_eager.py --version                   # 拦截既定的命令行执行流程\nVersion 1.0\n\n$ python click_eager.py --name Michael\nHello Michael!\n\n$ python click_eager.py --version --name Ethan      # 忽略 name 选项\nVersion 1.0\nclick.argument\n我们除了使用 @click.option 来添加可选参数，还会经常使用 @click.argument 来添加固定参数。它的使用和 option 类似，但支持的功能比 option 少。\n入门使用\n下面是一个简单的例子：\nimport click\n\n@click.command()\n@click.argument('coordinates')\ndef show(coordinates):\n    click.echo('coordinates: %s' % coordinates)\n\nif __name__ == '__main__':\n    show()\n看看执行情况：\n$ python click_argument.py                     # 错误，缺少参数 coordinates\nUsage: click_argument.py [OPTIONS] COORDINATES\n\nError: Missing argument \"coordinates\".\n\n$ python click_argument.py --help              # argument 指定的参数在 help 中没有显示\nUsage: click_argument.py [OPTIONS] COORDINATES\n\nOptions:\n  --help  Show this message and exit.\n\n$ python click_argument.py --coordinates 10    # 错误用法，这是 option 参数的用法\nError: no such option: --coordinates\n\n$ python click_argument.py 10                  # 正确，直接输入值即可\ncoordinates: 10\n多个 argument\n我们再来看看多个 argument 的例子：\nimport click\n\n@click.command()\n@click.argument('x')\n@click.argument('y')\n@click.argument('z')\ndef show(x, y, z):\n    click.echo('x: %s, y: %s, z:%s' % (x, y, z))\n\nif __name__ == '__main__':\n    show()\n执行情况：\n$ python click_argument.py 10 20 30\nx: 10, y: 20, z:30\n\n$ python click_argument.py 10\nUsage: click_argument.py [OPTIONS] X Y Z\n\nError: Missing argument \"y\".\n\n$ python click_argument.py 10 20\nUsage: click_argument.py [OPTIONS] X Y Z\n\nError: Missing argument \"z\".\n\n$ python click_argument.py 10 20 30 40\nUsage: click_argument.py [OPTIONS] X Y Z\n\nError: Got unexpected extra argument (40)\n不定参数\nargument 还有另外一种常见的用法，就是接收不定量的参数，让我们看看例子：\nimport click\n\n@click.command()\n@click.argument('src', nargs=-1)\n@click.argument('dst', nargs=1)\ndef move(src, dst):\n    click.echo('move %s to %s' % (src, dst))\n\nif __name__ == '__main__':\n    move()\n其中，nargs=-1 表明参数 src 接收不定量的参数值，参数值会以 tuple 的形式传入函数。如果 nargs 大于等于 1，表示接收 nargs 个参数值，上面的例子中，dst 接收一个参数值。\n让我们看看执行情况：\n$ python click_argument.py file1 trash    # src=('file1',)  dst='trash'\nmove (u'file1',) to trash\n\n$ python click_argument.py file1 file2 file3 trash   # src=('file1', 'file2', 'file3')  dst='trash'\nmove (u'file1', u'file2', u'file3') to trash\n彩色输出\n在前面的例子中，我们使用 click.echo 进行输出，如果配合 colorama 这个模块，我们可以使用 click.secho 进行彩色输出，在使用之前，使用 pip 安装 colorama：\n$ pip install colorama\n看看例子：\nimport click\n\n@click.command()\n@click.option('--name', help='The person to greet.')\ndef hello(name):\n    click.secho('Hello %s!' % name, fg='red', underline=True)\n    click.secho('Hello %s!' % name, fg='yellow', bg='black')\n\nif __name__ == '__main__':\n    hello()\n其中:\n\nfg 表示前景颜色（即字体颜色），可选值有：BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE 等；\nbg 表示背景颜色，可选值有：BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE 等；\nunderline 表示下划线，可选的样式还有：dim=True，bold=True 等；\n\n小结\n\n使用 click.command() 装饰一个函数，使其成为命令行接口。\n使用 click.option() 添加可选参数，支持设置固定长度的参数值。\n使用 click.argument() 添加固定参数，支持设置不定长度的参数值。\n\n本文由 funhacks 发表于个人博客，采用 Creative Commons BY-NC-ND 4.0（自由转载-保持署名-非商用-禁止演绎）协议发布。非商业转载请注明作者及出处。商业转载请联系作者本人。本文标题为: 命令行神器 Click 简明笔记本文链接为: https://funhacks.net/2016/12/...\n参考资料\n\nClick Documentation (6.0)\nPython Click 学习笔记\nclick模块 - cdwanze\n\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "21"}