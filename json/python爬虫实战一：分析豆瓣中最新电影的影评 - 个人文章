{"title": "python爬虫实战一：分析豆瓣中最新电影的影评 - 个人文章 ", "index": "python,搜索引擎,nlp", "content": "简介\n  刚接触python不久，做一个小项目来练练手。前几天看了《战狼2》，发现它在最新上映的电影里面是排行第一的，如下图所示。准备把豆瓣上对它的影评(短评)做一个分析。\n目标总览\n主要做了三件事：\n\n抓取网页数据\n清理数据\n用词云进行展示\n\n使用的python版本是3.5.运行环境：jupyer notebook，如在其他环境下运行报错了，请查看评论区的讨论，里面有一些解决办法。\n一、抓取网页数据\n第一步要对网页进行访问，python中使用的是urllib库。代码如下：\nfrom urllib import request\nresp = request.urlopen('https://movie.douban.com/nowplaying/hangzhou/')\nhtml_data = resp.read().decode('utf-8')\n其中https://movie.douban.com/nowp...，可以在浏览器中输入该网址进行查看。html_data是字符串类型的变量，里面存放了网页的html代码。输入print(html_data)可以查看，如下图所示：\n\n第二步，需要对得到的html代码进行解析，从里面提取我们需要的数据。在python中使用BeautifulSoup库进行html代码的解析。（注：如果没有安装此库，则使用pip install BeautifulSoup进行安装即可！）BeautifulSoup使用的格式如下：\nBeautifulSoup(html,\"html.parser\")\n第一个参数为需要提取数据的html，第二个参数是指定解析器，然后使用find_all()读取html标签中的内容。\n但是html中有这么多的标签，该读取哪些标签呢？其实，最简单的办法是可以打开我们爬取网页的html代码，然后查看我们需要的数据在哪个html标签里面，再进行读取就可以了。如下图所示：\n\n从上图中可以看出在div id=\"nowplaying\"标签开始是我们想要的数据，里面有电影的名称、评分、主演等信息。所以相应的代码编写如下：\nfrom bs4 import BeautifulSoup as bs\nsoup = bs(html_data, 'html.parser')    \nnowplaying_movie = soup.find_all('div', id='nowplaying')\nnowplaying_movie_list = nowplaying_movie[0].find_all('li', class_='list-item') \n其中nowplaying_movie_list 是一个列表，可以用print(nowplaying_movie_list[0])查看里面的内容，如下图所示：\n\n在上图中可以看到data-subject属性里面放了电影的id号码，而在img标签的alt属性里面放了电影的名字，因此我们就通过这两个属性来得到电影的id和名称。（注：打开电影短评的网页时需要用到电影的id，所以需要对它进行解析），编写代码如下：\nnowplaying_list = [] \nfor item in nowplaying_movie_list:        \n        nowplaying_dict = {}        \n        nowplaying_dict['id'] = item['data-subject']       \n        for tag_img_item in item.find_all('img'):            \n            nowplaying_dict['name'] = tag_img_item['alt']            \n            nowplaying_list.append(nowplaying_dict)  \n其中列表nowplaying_list中就存放了最新电影的id和名称，可以使用print(nowplaying_list)进行查看，如下图所示：\n\n可以看到和豆瓣网址上面是匹配的。这样就得到了最新电影的信息了。接下来就要进行对最新电影短评进行分析了。例如《战狼2》的短评网址为：https://movie.douban.com/subject/26363254/comments?start=0&limit=20其中26363254就是电影的id，start=0表示评论的第0条评论。\n接下来接对该网址进行解析了。打开上图中的短评页面的html代码，我们发现关于评论的数据是在div标签的comment属性下面，如下图所示：\n\n因此对此标签进行解析，代码如下：\nrequrl = 'https://movie.douban.com/subject/' + nowplaying_list[0]['id'] + '/comments' +'?' +'start=0' + '&limit=20' \nresp = request.urlopen(requrl) \nhtml_data = resp.read().decode('utf-8') \nsoup = bs(html_data, 'html.parser') \ncomment_div_lits = soup.find_all('div', class_='comment') \n此时在comment_div_lits 列表中存放的就是div标签和comment属性下面的html代码了。在上图中还可以发现在p标签下面存放了网友对电影的评论，如下图所示:\n\n因此对comment_div_lits 代码中的html代码继续进行解析，代码如下：\neachCommentList = []; \nfor item in comment_div_lits: \n        if item.find_all('p')[0].string is not None:     \n            eachCommentList.append(item.find_all('p')[0].string)\n使用print(eachCommentList)查看eachCommentList列表中的内容，可以看到里面存里我们想要的影评。如下图所示：\n\n好的，至此我们已经爬取了豆瓣最近播放电影的评论数据，接下来就要对数据进行清洗和词云显示了。\n二、数据清洗\n为了方便进行数据进行清洗，我们将列表中的数据放在一个字符串数组中，代码如下：\ncomments = ''\nfor k in range(len(eachCommentList)):\n    comments = comments + (str(eachCommentList[k])).strip()\n使用print(comments)进行查看，如下图所示：\n\n可以看到所有的评论已经变成一个字符串了，但是我们发现评论中还有不少的标点符号等。这些符号对我们进行词频统计时根本没有用，因此要将它们清除。所用的方法是正则表达式。python中正则表达式是通过re模块来实现的。代码如下：\nimport re\n\npattern = re.compile(r'[\\u4e00-\\u9fa5]+')\nfilterdata = re.findall(pattern, comments)\ncleaned_comments = ''.join(filterdata)\n继续使用print(cleaned_comments)语句进行查看，如下图所示：\n我们可以看到此时评论数据中已经没有那些标点符号了，数据变得“干净”了很多。\n因此要进行词频统计，所以先要进行中文分词操作。在这里我使用的是结巴分词。如果没有安装结巴分词，可以在控制台使用pip install jieba进行安装。（注：可以使用pip list查看是否安装了这些库）。代码如下所示：\nimport jieba    #分词包\nimport pandas as pd  \n\nsegment = jieba.lcut(cleaned_comments)\nwords_df=pd.DataFrame({'segment':segment})\n因为结巴分词要用到pandas，所以我们这里加载了pandas包。可以使用words_df.head()查看分词之后的结果，如下图所示：\n从上图可以看到我们的数据中有“看”、“太”、“的”等虚词（停用词），而这些词在任何场景中都是高频词，并且没有实际的含义，所以我们要将他们清除。\n我把停用词放在一个stopwords.txt文件中，将我们的数据与停用词进行比对即可（注：只要在百度中输入stopwords.txt，就可以下载到该文件）。去停用词代码如下：\nstopwords=pd.read_csv(\"stopwords.txt\",index_col=False,quoting=3,sep=\"\\t\",names=['stopword'], encoding='utf-8')#quoting=3全不引用\nwords_df=words_df[~words_df.segment.isin(stopwords.stopword)]\n继续使用words_df.head()语句来查看结果，如下图所示，停用词已经被除去了。\n\n接下来就要进行词频统计了，代码如下：\nimport numpy    #numpy计算包\nwords_stat=words_df.groupby(by=['segment'])['segment'].agg({\"计数\":numpy.size})\nwords_stat=words_stat.reset_index().sort_values(by=[\"计数\"],ascending=False)\n用words_stat.head()进行查看，结果如下：\n\n由于我们前面只是爬取了第一页的评论，所以数据有点少，在最后给出的完整代码中，我爬取了10页的评论，所以数据还是有一定参考价值的。\n三、用词云进行显示\n代码如下：\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport matplotlib\nmatplotlib.rcParams['figure.figsize'] = (10.0, 5.0)\nfrom wordcloud import WordCloud#词云包\n\nwordcloud=WordCloud(font_path=\"simhei.ttf\",background_color=\"white\",max_font_size=80) #指定字体类型、字体大小和字体颜色\nword_frequence = {x[0]:x[1] for x in words_stat.head(1000).values}\nword_frequence_list = []\nfor key in word_frequence:\n    temp = (key,word_frequence[key])\n    word_frequence_list.append(temp)\n\nwordcloud=wordcloud.fit_words(word_frequence_list)\nplt.imshow(wordcloud)\n其中simhei.ttf使用来指定字体的，可以在百度上输入simhei.ttf进行下载后，放入程序的根目录即可。显示的图像如下：\n\n到此为止，整个项目的介绍就结束了。由于自己也还是个初学者，接触python不久，代码写的并不好。而且第一次写技术博客，表达的有些冗余，请大家多多包涵，有不对的地方，请大家批评指正。以后我也会将自己做的小项目以这种形式写在博客上和大家一起交流！最后贴上完整的代码。\n完整代码\n#coding:utf-8\n__author__ = 'hang'\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport jieba    #分词包\nimport numpy    #numpy计算包\nimport codecs   #codecs提供的open方法来指定打开的文件的语言编码，它会在读取的时候自动转换为内部unicode \nimport re\nimport pandas as pd  \nimport matplotlib.pyplot as plt\nfrom urllib import request\nfrom bs4 import BeautifulSoup as bs\n%matplotlib inline\nimport matplotlib\nmatplotlib.rcParams['figure.figsize'] = (10.0, 5.0)\nfrom wordcloud import WordCloud#词云包\n\n#分析网页函数\ndef getNowPlayingMovie_list():   \n    resp = request.urlopen('https://movie.douban.com/nowplaying/hangzhou/')        \n    html_data = resp.read().decode('utf-8')    \n    soup = bs(html_data, 'html.parser')    \n    nowplaying_movie = soup.find_all('div', id='nowplaying')        \n    nowplaying_movie_list = nowplaying_movie[0].find_all('li', class_='list-item')    \n    nowplaying_list = []    \n    for item in nowplaying_movie_list:        \n        nowplaying_dict = {}        \n        nowplaying_dict['id'] = item['data-subject']       \n        for tag_img_item in item.find_all('img'):            \n            nowplaying_dict['name'] = tag_img_item['alt']            \n            nowplaying_list.append(nowplaying_dict)    \n    return nowplaying_list\n\n#爬取评论函数\ndef getCommentsById(movieId, pageNum): \n    eachCommentList = []; \n    if pageNum>0: \n         start = (pageNum-1) * 20 \n    else: \n        return False \n    requrl = 'https://movie.douban.com/subject/' + movieId + '/comments' +'?' +'start=' + str(start) + '&limit=20' \n    print(requrl)\n    resp = request.urlopen(requrl) \n    html_data = resp.read().decode('utf-8') \n    soup = bs(html_data, 'html.parser') \n    comment_div_lits = soup.find_all('div', class_='comment') \n    for item in comment_div_lits: \n        if item.find_all('p')[0].string is not None:     \n            eachCommentList.append(item.find_all('p')[0].string)\n    return eachCommentList\n\ndef main():\n    #循环获取第一个电影的前10页评论\n    commentList = []\n    NowPlayingMovie_list = getNowPlayingMovie_list()\n    for i in range(10):    \n        num = i + 1 \n        commentList_temp = getCommentsById(NowPlayingMovie_list[0]['id'], num)\n        commentList.append(commentList_temp)\n\n    #将列表中的数据转换为字符串\n    comments = ''\n    for k in range(len(commentList)):\n        comments = comments + (str(commentList[k])).strip()\n\n    #使用正则表达式去除标点符号\n    pattern = re.compile(r'[\\u4e00-\\u9fa5]+')\n    filterdata = re.findall(pattern, comments)\n    cleaned_comments = ''.join(filterdata)\n\n    #使用结巴分词进行中文分词\n    segment = jieba.lcut(cleaned_comments)\n    words_df=pd.DataFrame({'segment':segment})\n\n    #去掉停用词\n    stopwords=pd.read_csv(\"stopwords.txt\",index_col=False,quoting=3,sep=\"\\t\",names=['stopword'], encoding='utf-8')#quoting=3全不引用\n    words_df=words_df[~words_df.segment.isin(stopwords.stopword)]\n\n    #统计词频\n    words_stat=words_df.groupby(by=['segment'])['segment'].agg({\"计数\":numpy.size})\n    words_stat=words_stat.reset_index().sort_values(by=[\"计数\"],ascending=False)\n\n    #用词云进行显示\n    wordcloud=WordCloud(font_path=\"simhei.ttf\",background_color=\"white\",max_font_size=80)\n    word_frequence = {x[0]:x[1] for x in words_stat.head(1000).values}\n\n    word_frequence_list = []\n    for key in word_frequence:\n        temp = (key,word_frequence[key])\n        word_frequence_list.append(temp)\n\n    wordcloud=wordcloud.fit_words(word_frequence_list)\n    plt.imshow(wordcloud)\n\n#主函数\nmain()\n结果显示如下：\n\n上图基本反映了《战狼2》这部电影的情况。PS:我本人并不喜欢这部电影，内容太空洞、太假，为了爱国而爱国，没意思。哎，这两年真是国产电影的低谷啊，没有一部拿得出手的国产电影，看看人家印度拍的《摔跤吧，爸爸》那才是拍的有深度，同样是表现爱国，国产电影还是需要向别的国家好好学学。\n\n                ", "mainLikeNum": ["10 "], "mainBookmarkNum": "22"}