{"title": "进程与线程 - 个人文章 ", "index": "python", "content": "进程与线程\n进程(process)和线程(thread)是操作系统的基本概念,但是它们比较抽象,不容易掌握。\n有一个很好的类比,可以把它们解释地清晰易懂。\nCPU\n\n计算机的核心是CPU,它承担了所有的计算任务。它就像一座工厂,时刻在运行。\n假定工厂的电力有限,一次只能供给一个车间使用。也就是说,一个车间开工的时候,其他车间都必须停工。背后的含义就是,单个CPU一次只能运行一个任务。\n\n进程\n进程就好比工厂的车间,它代表CPU所能处理的单个任务。任一时刻,CPU总是运行一个进程,其他进程处于非运行状态。\n线程\n一个车间里,可以有很多工人。他们协同完成一个任务。\n线程就好比车间里的工人。一个进程可以包括多个线程。\n车间的空间是工人们共享的,比如许多房间是每个工人都可以进出的。这象征一个进程的内存空间是共享的,每个线程都可以使用这些共享内存。\n可是,每间房间的大小不同,有些房间最多只能容纳一个人,比如厕所。里面有人的时候,其他人就不能进去了。这代表一个线程使用某些共享内存时,其他线程必须等它结束,才能使用这一块内存。\n一个防止他人进入的简单方法,就是门口加一把锁。先到的人锁上门,后到的人看到上锁,就在门口排队,等锁打开再进去。这就叫\"互斥锁\"(Mutual exclusion,缩写 Mutex),防止多个线程同时读写某一块内存区域。\n还有些房间,可以同时容纳n个人,比如厨房。也就是说,如果人数大于n,多出来的人只能在外面等着。这好比某些内存区域,只能供给固定数目的线程使用。\n这时的解决方法,就是在门口挂n把钥匙。进去的人就取一把钥匙,出来时再把钥匙挂回原处。后到的人发现钥匙架空了,就知道必须在门口排队等着了。这种做法叫做\"信号量\"(Semaphore),用来保证多个线程不会互相冲突。\n进程与线程关系\n\n\n一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。\n资源分配给进程，同一进程的所有线程共享该进程的所有资源。\nCPU分给线程，即真正在CPU上运行的是线程。\n\n专业总结\n\n进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。\n线程，有时被称为轻量进程(Lightweight Process，LWP），是程序执行流的最小单元。是被系统独立调度和分派的基本单位。\n\n多进程与多线程\n多进程情景分析\n浏览器，网易云音乐以及pycharm 三个软件只能顺序执行是怎样一种场景呢？本来在python编程时想要听个古典音乐来点灵感， 结果发现，对于CPU来说， 一次只能执行一个程序， 太崩溃，  另外，假如有两个程序A和B，程序A在执行到一半的过程中，需要读取大量的数据输入（I/O操作），而此时CPU只能静静地等待任务A读取完数据才能继续执行，这样就白白浪费了CPU资源。你是不是已经想到在程序A读取数据的过程中，让程序B去执行，当程序A读取完数据之后，让程序B暂停。聪明，这当然没问题，但这里有一个关键词：切换。\n\n多线程情景分析\n假设，一个文本程序，需要接受键盘输入，将内容显示在屏幕上，还需要保存信息到硬盘中。若只有一个进程，势必造成同一时间只能干一样事的尴尬（当保存时，就不能通过键盘输入内容）。若有多个进程，每个进程负责一个任务，进程A负责接收键盘输入的任务，进程B负责将内容显示在屏幕上的任务，进程C负责保存内容到硬盘中的任务。这里进程A，B，C间的协作涉及到了进程通信问题，而且有共同都需要拥有的东西——-文本内容，不停的切换造成性能上的损失。若有一种机制，可以使任务A，B，C共享资源，这样上下文切换所需要保存和恢复的内容就少了，同时又可以减少通信所带来的性能损耗，那就好了。是的，这种机制就是线程。\n\n串行，并行和并发\n串行处理是当一个程序执行结束， 下一个程序才可以继续执行, 否则一直处于等待状态.\n并行处理（Parallel Processing）是计算机系统中能同时执行两个或更多个处理的一种计算方法。并行处理可同时工作于同一程序的不同方面。并行处理的主要目的是节省大型和复杂问题的解决时间。\n并发处理(concurrency Processing)：指一个时间段中有几个程序都处于已启动运行到运行完毕之间，且这几个程序都是在同一个处理机(CPU)上运行，但任一个时刻点上只有一个程序在处理机(CPU)上运行\n并发的关键是你有处理多个任务的能力，不一定要同时。并行的关键是你有同时处理多个任务的能力(也就是多个CPU处理器)。所以说，并行是并发的子集.\n\n同步与异步\n在计算机领域，同步就是指一个进程在执行某个请求的时候，若该请求需要一段时间才能返回信息，那么这个进程将会一直等待下去，直到收到返回信息才继续执行下去；异步是指进程不需要一直等下去，而是继续执行下面的操作，不管其他进程的状态。当有消息返回时系统会通知进程进行处理，这样可以提高执行的效率。举个例子，打电话时就是同步通信，发短息时就是异步通信。\n总结\n操作系统的设计，因此可以归结为三点：（1）以多进程形式，允许多个任务同时运行；（2）以多线程形式，允许单个任务分成不同的部分运行；（3）提供协调机制，一方面防止进程之间和线程之间产生冲突，另一方面允许进程之间和线程之间共享资源。\n参考资料: 阮一峰的网络日志之进程与线程的一个简单解释\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "1"}