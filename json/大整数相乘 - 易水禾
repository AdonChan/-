{"title": "大整数相乘 - 易水禾 ", "index": "乘法,大整数,算法,python", "content": "问题\n\n大整数相乘\n\n思路说明\n\n对于大整数计算，一般都要用某种方法转化，否则会溢出。但是python无此担忧了。\n\nPython支持“无限精度”的整数，一般情况下不用考虑整数溢出的问题，而且Python Int类型与任意精度的Long整数类可以无缝转换，超过Int 范围的情况都将转换成Long类型。\n\n例如：\n\n>>> 2899887676637907866*1788778992788348277389943\n\n5187258157415700236034169791337062588991638L\n\n\n注意：前面的“无限精度”是有引号的。事实上也是有限制的，对于32位的机器，其上限是：2^32-1。真的足够大了。\n\n为什么Python能够做到呢？请有兴趣刨根问底的去看Python的有关源码。本文不赘述。\n\n在其它语言中，通常用“分治法”解决大整数相乘问题。\n\n但是，这里提供一个非常有意思的计算两个整数相乘的方法，算是做为大整数相乘的演示。\n\n两个整数相乘：阿拉伯乘法。关于这个乘法的详细描述，请看：http://ualr.edu/lasmoller/medievalmult.html\n\n解决（Python）\n\n#!/usr/bin/env python\n#coding:utf-8\n\n#阿拉伯乘法\ndef arabic_multiplication(num1,num2):\n    num_lst1 = [int(i) for i in str(num1)]  #将int类型的123，转化为list类型的[1,2,3]，每个元素都是int类型\n    num_lst2 = [int(i) for i in str(num2)]\n\n    #两个list中整数两两相乘\n    int_martix = [[i*j for i in num_lst1] for j in num_lst2]\n\n    #将上述元素为数字的list转化为元素类型是str，主要是将9-->'09'\n    str_martix = [map(convert_to_str,int_martix[i]) for i in range(len(int_martix))]\n\n    #将上述各个list中的两位数字分开：['01','29','03']-->[0,2,0],[1,9,3]\n    martix = [[int(str_martix[i][j][z]) for j in range(len(str_martix[i]))] for i in range(len(str_martix)) for z in range(2)]\n\n    #计算阿拉伯乘法表的左侧开始各项和\n    sum_left = summ_left(martix)\n\n    #计算阿拉伯乘法表的底部开始各项和\n    sum_end = summ_end(martix)\n\n    #将上述两个结果合并后翻转\n    sum_left.extend(sum_end)\n    sum_left.reverse()\n\n    #取得各个和的个位的数字（如果进位则加上）\n    result = take_digit(sum_left)\n\n    #翻转结果并合并为一个结果字符串数值\n    result.reverse()\n    int_result = \"\".join(result)\n    print \"%d*%d=\"%(num1,num2)\n    print int_result\n\n\n#将int类型转化为str类型，9-->'09'\n\ndef convert_to_str(num):\n    if num<10:\n        return \"0\"+str(num)\n    else:\n        return str(num)\n\n\n#计算阿拉伯乘法表格左侧开始的各项之和\n\ndef summ_left(lst):\n    summ = []\n    x = [i for i in range(len(lst))]\n    y = [j for j in range(len(lst[0]))]\n    sx = [i for i in x if i%2==0]\n    for i in sx:\n        s=0\n        j=0\n        while i>=0 and j<=y[-1]:\n            s = s+ lst[i][j]\n            if i%2==1:\n                j = j+1\n            else:\n                j = j\n            i = i-1\n        summ.append(s)\n    return summ\n\n\n\n#计算阿拉伯乘法表格底部开始的各项之和\n\ndef summ_end(lst):\n    summ=[]\n    y = [j for j in range(len(lst[0]))]\n    ex = len(lst)-1\n    for m in range(len(y)):\n        s = 0\n        i=ex\n        j=m\n        while i>=0 and j<=y[-1]:\n            s= s+lst[i][j]\n            if i%2==1:\n                j = j+1\n            else:\n                j=j\n            i = i-1\n        summ.append(s)\n\n    return summ\n\n#得到各个元素的个位数，如果是大于10则向下一个进位\n\ndef take_digit(lst):\n    tmp = 0\n    digit_list = []\n    for m in range(len(lst)):\n        lstm = 0\n        lstm = lst[m]+tmp\n        if lstm<10:\n            tmp = 0\n            digit_list.append(str(lstm))\n        else:\n            tmp = lstm/10\n            mm = lstm-tmp*10\n            digit_list.append(str(mm))\n    return digit_list\n\n\nif __name__==\"__main__\":\n    arabic_multiplication(469,37)\n\n\n联系方法\n\n\nqiwsir#gmail.com\nhttps://qiwsir.github.io\nhttp://weibo.com/qiwsir\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "2"}