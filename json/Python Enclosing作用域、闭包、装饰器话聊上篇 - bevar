{"title": "Python Enclosing作用域、闭包、装饰器话聊上篇 - bevar ", "index": "python", "content": "Python Enclosing作用域、闭包、装饰器话聊上篇\nJaglawz: 听讲Python一切都是对象，是吗？\nPylego: 是的，像函数也是对象。\nJaglawz: 那么函数也可以有自己的属性了？\nPylego： 当然，像下面这样写是可以的：\ndef foo():\n    print('I am foo')\n    \ndef bar():\n    print('I am bar')\n    \nfoo.bar = bar\nfoo.bar()\nJaglawz: 这都行，那是不是函数也可以像普通对象一样当作参数传递也可以当作对象来返回？\nPylego: 是的，比如下面的用法:\ndef deco(func):\n    string = 'I am deco'\n    def wrapper():\n        print(string)\n        func()\n    return wrapper\n    \n\ndef foo():\n    print('I am foo')\n    \n    \nfoo = deco(foo)\nfoo()  \n\"\"\"\n输出:\nI am deco\nIam foo\n\"\"\"\nJaglawz: 好吧，当作参数传递和返回我理解了，但是我对wrapper函数的print(string)这个string的查找感到迷惑。\nPylego: 不错嘛！这都被你看出来了，那你知道Python作用域的LEGB原则吗？\nJaglawz: 我知道是知道可以我就是对那个E（Enclosing）作用域不是很理解。\nPylego: 那就对了，你可以在刚才代码的基础上运行下面的代码:\nprint(foo.__closure__)\n# 输出:(<cell at 0x7fc50f45afd8: function object at 0x7fc50f4168c0>, <cell at 0x7fc50f45aec0: str object at 0x7fc50c065fc0>)\nJaglawz: 咦，这两个内存地址是啥家伙？\nPyelgo: 这就是wrapper函数引用的外层函数（就是deco函数啦）的两个变量：string和func啊！\nJaglawz: 也就是说内层函数（在本例中就是wrapper啦）会把外层函数（在本例用就是deco啦）作用域里面的对象放到__closure__属性里，以供自己查找？\nPylego: 是的，但是不是所有外层函数作用域的对象都会放到内层函数的__closure__属性里，仅限自己用到的，这个__closure__就是enclosing作用域啦！\nJaglawz: 原来enclosing作用域是这样的，明白了。\nPyelgo: 如果内部函数引用到外层函数作用域的对象，这个内部函数就称为闭包。\nJaglawz: 原来闭包就是这家伙，很简单嘛！\nJaglawz: 咦，我想到内部函数有一个妙用，你看看是不是这样啊，比如说我想输出一个函数的运行时间又不想去破坏这个函数的代码，是不是可以这样写:\nimport time\n\n\ndef time_machine(func):\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        func(*args, **kwargs)\n        print(u'共耗时: %s秒' % (time.time()-start_time))\n    return wrapper\n    \n    \ndef foo():\n    time.sleep(3)\n    \n    \nfoo = time_machine(foo)\nfoo()\nPylego: 你这智商要冲出宇宙的节奏啊！但是Python的开发者早就想到每次foo = time_machine(foo)很麻烦，特地为你准备了语法糖，来接糖:\nimport time\n\n\ndef time_machine(func):\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        func(*args, **kwargs)\n        print(u'共耗时: %s秒' % (time.time()-start_time))\n    return wrapper\n    \n\n@time_machine\ndef foo():\n    time.sleep(3)\n\n\"\"\"\n也就是说:\n@time_machine\ndef foo():\n    pass\n相当于: foo = time_machine(foo)，这里是重点，这里是重点，这里是重点，以后的谈话能不能理解就看你对这个语句可理解！\n\"\"\"\n\nfoo()\nPylego: time_machine就是装饰器(decorator)，名字起得多形象啊，装饰函数嘛！\nJaglawz: 你这么一说，我就觉得装饰器咋这么简单呢！问题是我看到很多人的装饰器还带参数，还有人用类当装饰器，这又是咋回事呢？\nPylego: 你问题咋恁些？我先吃个饭，下次有空再聊哈！\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "5"}