{"title": "【Python】Python正则表达式使用指导 - 个人文章 ", "index": "flask,express,django,python", "content": "1. 正则表达式基础\n1.1. 简单介绍\n正则表达式并不是Python的一部分。正则表达式是用于处理字符串的强大工具，拥有自己独特的语法以及一个独立的处理引擎，效率上可能不如str自带的方法，但功能十分强大。得益于这一点，在提供了正则表达式的语言里，正则表达式的语法都是一样的，区别只在于不同的编程语言实现支持的语法数量不同；但不用担心，不被支持的语法通常是不常用的部分。如果已经在其他语言里使用过正则表达式，只需要简单看一看就可以上手了。\n下图展示了使用正则表达式进行匹配的流程： \n正则表达式的大致匹配过程是：依次拿出表达式和文本中的字符比较，如果每一个字符都能匹配，则匹配成功；一旦有匹配不成功的字符则匹配失败。如果表达式中有量词或边界，这个过程会稍微有一些不同，但也是很好理解的，看下图中的示例以及自己多使用几次就能明白。\n下图列出了Python支持的正则表达式元字符和语法：   \n1.2. 数量词的贪婪模式与非贪婪模式\n正则表达式通常用于在文本中查找匹配的字符串。Python里数量词默认是贪婪的（在少数语言里也可能是默认非贪婪），总是尝试匹配尽可能多的字符；非贪婪的则相反，总是尝试匹配尽可能少的字符。例如：正则表达式\"ab\"如果用于查找\"abbbc\"，将找到\"abbb\"。而如果使用非贪婪的数量词\"ab?\"，将找到\"a\"。\n1.3. 反斜杠的困扰\n与大多数编程语言相同，正则表达式里使用\"\"作为转义字符，这就可能造成反斜杠困扰。假如你需要匹配文本中的字符\"\"，那么使用编程语言表示的正则表达式里将需要4个反斜杠\"\\\\\"：前两个和后两个分别用于在编程语言里转义成反斜杠，转换成两个反斜杠后再在正则表达式里转义成一个反斜杠。Python里的原生字符串很好地解决了这个问题，这个例子中的正则表达式可以使用r\"\\\"表示。同样，匹配一个数字的\"\\d\"可以写成r\"d\"。有了原生字符串，你再也不用担心是不是漏写了反斜杠，写出来的表达式也更直观。\n1.4. 匹配模式\n正则表达式提供了一些可用的匹配模式，比如忽略大小写、多行匹配等，这部分内容将在Pattern类的工厂方法re.compile(pattern[, flags])中一起介绍。\n2. re模块\n2.1. 开始使用re\nPython通过re模块提供对正则表达式的支持。使用re的一般步骤是先将正则表达式的字符串形式编译为Pattern实例，然后使用Pattern实例处理文本并获得匹配结果（一个Match实例），最后使用Match实例获得信息，进行其他的操作。\n# encoding: UTF-8\nimport re\n\n# 将正则表达式编译成Pattern对象\npattern = re.compile(r'hello')\n\n# 使用Pattern匹配文本，获得匹配结果，无法匹配时将返回None\nmatch = pattern.match('hello world!')\n\nif match:\n   # 使用Match获得分组信息\n   print match.group()\n\n### 输出 ###\n# hello\n<pre style=\"margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important; font-size: 12px !important;\"># encoding: UTF-8import re # 将正则表达式编译成Pattern对象pattern = re.compile(r'hello') # 使用Pattern匹配文本，获得匹配结果，无法匹配时将返回Nonematch = pattern.match('hello world!') if match: # 使用Match获得分组信息\nprint match.group() ### 输出 ### # hello</pre>\na = re.compile(r\"\"\"\\d +  # the integral part\n                   \\.    # the decimal point\n                   \\d *  # some fractional digits\"\"\", re.X)\nb = re.compile(r\"\\d+\\.\\d*\")\nre.compile(strPattern[, flag]):\n这个方法是Pattern类的工厂方法，用于将字符串形式的正则表达式编译为Pattern对象。 第二个参数flag是匹配模式，取值可以使用按位或运算符'|'表示同时生效，比如re.I | re.M。另外，你也可以在regex字符串中指定模式，比如re.compile('pattern', re.I | re.M)与re.compile('(?im)pattern')是等价的。 可选值有：\n\nre.I(re.IGNORECASE): 忽略大小写（括号内是完整写法，下同）\n\nM(MULTILINE): 多行模式，改变'^'和'$'的行为（参见上图）\n\nS(DOTALL): 点任意匹配模式，改变'.'的行为\n\nL(LOCALE): 使预定字符类 w W b B s S 取决于当前区域设定\n\nU(UNICODE): 使预定字符类 w W b B s S d D 取决于unicode定义的字符属性\n\nX(VERBOSE): 详细模式。这个模式下正则表达式可以是多行，忽略空白字符，并可以加入注释。以下两个正则表达式是等价的：\n\nre提供了众多模块方法用于完成正则表达式的功能。这些方法可以使用Pattern实例的相应方法替代，唯一的好处是少写一行re.compile()代码，但同时也无法复用编译后的Pattern对象。这些方法将在Pattern类的实例方法部分一起介绍。如上面这个例子可以简写为：\nre模块还提供了一个方法escape(string)，用于将string中的正则表达式元字符如*/+/?等之前加上转义符再返回，在需要大量匹配元字符时有那么一点用。\n2.2. Match\nMatch对象是一次匹配的结果，包含了很多关于此次匹配的信息，可以使用Match提供的可读属性或方法来获取这些信息。\n属性：\n\n\nstring: 匹配时使用的文本。\n\nre: 匹配时使用的Pattern对象。\n\npos: 文本中正则表达式开始搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。\n\nendpos: 文本中正则表达式结束搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。\n\nlastindex: 最后一个被捕获的分组在文本中的索引。如果没有被捕获的分组，将为None。\n\nlastgroup: 最后一个被捕获的分组的别名。如果这个分组没有别名或者没有被捕获的分组，将为None。\n\n方法：\n\n\ngroup([group1, …]): 获得一个或多个分组截获的字符串；指定多个参数时将以元组形式返回。group1可以使用编号也可以使用别名；编号0代表整个匹配的子串；不填写参数时，返回group(0)；没有截获字符串的组返回None；截获了多次的组返回最后一次截获的子串。\n\ngroups([default]): 以元组形式返回全部分组截获的字符串。相当于调用group(1,2,…last)。default表示没有截获字符串的组以这个值替代，默认为None。\n\ngroupdict([default]): 返回以有别名的组的别名为键、以该组截获的子串为值的字典，没有别名的组不包含在内。default含义同上。\n\nstart([group]): 返回指定的组截获的子串在string中的起始索引（子串第一个字符的索引）。group默认值为0。\n\nend([group]): 返回指定的组截获的子串在string中的结束索引（子串最后一个字符的索引+1）。group默认值为0。\n\nspan([group]): 返回(start(group), end(group))。\n\nexpand(template): 将匹配到的分组代入template中然后返回。template中可以使用id或g<id>、g<name>引用分组，但不能使用编号0。id与g<id>是等价的；但10将被认为是第10个分组，如果你想表达1之后是字符'0'，只能使用g<1>0。\n\nimport re\nm = re.match(r'(\\w+) (\\w+)(?P<sign>.*)', 'hello world!')\n \nprint \"m.string:\", m.string\nprint \"m.re:\", m.re\nprint \"m.pos:\", m.pos\nprint \"m.endpos:\", m.endpos\nprint \"m.lastindex:\", m.lastindex\nprint \"m.lastgroup:\", m.lastgroup\n \nprint \"m.group(1,2):\", m.group(1, 2)\nprint \"m.groups():\", m.groups()\nprint \"m.groupdict():\", m.groupdict()\nprint \"m.start(2):\", m.start(2)\nprint \"m.end(2):\", m.end(2)\nprint \"m.span(2):\", m.span(2)\nprint r\"m.expand(r'\\2 \\1\\3'):\", m.expand(r'\\2 \\1\\3')\n \n### output ###\n# m.string: hello world!\n# m.re: <_sre.SRE_Pattern object at 0x016E1A38>\n# m.pos: 0\n# m.endpos: 12\n# m.lastindex: 3\n# m.lastgroup: sign\n# m.group(1,2): ('hello', 'world')\n# m.groups(): ('hello', 'world', '!')\n# m.groupdict(): {'sign': '!'}\n# m.start(2): 6\n# m.end(2): 11\n# m.span(2): (6, 11)\n# m.expand(r'\\2 \\1\\3'): world hello!\n  在这里还是要推荐下我自己建的Python开发学习群：725479218，群里都是学Python开发的，如果你正在学习Python ，小编欢迎你加入,大家都是软件开发党，不定期分享干货（只有Python软件开发相关的），包括我自己整理的一份2018最新的Python进阶资料和高级开发教程，欢迎进阶中和进想深入Python的小伙伴\n2.3. Pattern\nPattern对象是一个编译好的正则表达式，通过Pattern提供的一系列方法可以对文本进行匹配查找。\nPattern不能直接实例化，必须使用re.compile()进行构造。\nPattern提供了几个可读属性用于获取表达式的相关信息：\n\npattern: 编译时用的表达式字符串。\nflags: 编译时用的匹配模式。数字形式。\ngroups: 表达式中分组的数量。\ngroupindex: 以表达式中有别名的组的别名为键、以该组对应的编号为值的字典，没有别名的组不包含在内。\n\nimport re\np = re.compile(r'(\\w+) (\\w+)(?P<sign>.*)', re.DOTALL)\n \nprint \"p.pattern:\", p.pattern\nprint \"p.flags:\", p.flags\nprint \"p.groups:\", p.groups\nprint \"p.groupindex:\", p.groupindex\n \n### output ###\n# p.pattern: (\\w+) (\\w+)(?P<sign>.*)\n# p.flags: 16\n# p.groups: 3\n# p.groupindex: {'sign': 3}\n　　实例方法[ | re模块方法]：\n\n\nmatch(string[, pos[, endpos]]) | re.match(pattern, string[, flags]): 这个方法将从string的pos下标处起尝试匹配pattern；如果pattern结束时仍可匹配，则返回一个Match对象；如果匹配过程中pattern无法匹配，或者匹配未结束就已到达endpos，则返回None。 pos和endpos的默认值分别为0和len(string)；re.match()无法指定这两个参数，参数flags用于编译pattern时指定匹配模式。 注意：这个方法并不是完全匹配。当pattern结束时若string还有剩余字符，仍然视为成功。想要完全匹配，可以在表达式末尾加上边界匹配符'$'。 示例参见2.1小节。\n\nsearch(string[, pos[, endpos]]) | re.search(pattern, string[, flags]): 这个方法用于查找字符串中可以匹配成功的子串。从string的pos下标处起尝试匹配pattern，如果pattern结束时仍可匹配，则返回一个Match对象；若无法匹配，则将pos加1后重新尝试匹配；直到pos=endpos时仍无法匹配则返回None。 pos和endpos的默认值分别为0和len(string))；re.search()无法指定这两个参数，参数flags用于编译pattern时指定匹配模式。 \n\n# encoding: UTF-8 \nimport re \n \n# 将正则表达式编译成Pattern对象 \npattern = re.compile(r'world') \n \n# 使用search()查找匹配的子串，不存在能匹配的子串时将返回None \n# 这个例子中使用match()无法成功匹配 \nmatch = pattern.search('hello world!') \n \nif match: \n    # 使用Match获得分组信息 \n    print match.group() \n \n### 输出 ### \n# world\n3.   split(string[, maxsplit]) | re.split(pattern, string[, maxsplit]): 　　　　　　按照能够匹配的子串将string分割后返回列表。maxsplit用于指定最大分割次数，不指定将全部分割。 \nimport re\n \np = re.compile(r'\\d+')\nprint p.split('one1two2three3four4')\n \n### output ###\n# ['one', 'two', 'three', 'four', '']\n4.   findall(string[, pos[, endpos]]) | re.findall(pattern, string[, flags]): 　　　　　　搜索string，以列表形式返回全部能匹配的子串。 \nimport re\n \np = re.compile(r'\\d+')\nprint p.findall('one1two2three3four4')\n \n### output ###\n# ['1', '2', '3', '4']\n\n5.  finditer(string[, pos[, endpos]]) | re.finditer(pattern, string[, flags]): 　　　　　　搜索string，返回一个顺序访问每一个匹配结果（Match对象）的迭代器。 \nimport re\n \np = re.compile(r'\\d+')\nfor m in p.finditer('one1two2three3four4'):\n    print m.group(),\n \n### output ###\n# 1 2 3 4\n\n6.   sub(repl, string[, count]) | re.sub(pattern, repl, string[, count]): 　　　　　　使用repl替换string中每一个匹配的子串后返回替换后的字符串。 　　　　　　当repl是一个字符串时，可以使用id或g<id>、g<name>引用分组，但不能使用编号0。 　　　　　　当repl是一个方法时，这个方法应当只接受一个参数（Match对象），并返回一个字符串用于替换（返回的字符串中不能再引用分组）。 　　　　　　count用于指定最多替换次数，不指定时全部替换。 \nimport re\n \np = re.compile(r'(\\w+) (\\w+)')\ns = 'i say, hello world!'\n \nprint p.sub(r'\\2 \\1', s)\n \ndef func(m):\n    return m.group(1).title() + ' ' + m.group(2).title()\n \nprint p.sub(func, s)\n \n### output ###\n# say i, world hello!\n# I Say, Hello World!\n\n　　　　7.  subn(repl, string[, count]) |re.sub(pattern, repl, string[, count]): 　　　　　　返回 (sub(repl, string[, count]), 替换次数)。 \n以上就是Python对于正则表达式的支持。熟练掌握正则表达式是每一个程序员必须具备的技能，这年头没有不与字符串打交道的程序了。笔者也处于初级阶段，与君共勉，^_^\n另外，图中的特殊构造部分没有举出例子，用到这些的正则表达式是具有一定难度的。有兴趣可以思考一下，如何匹配不是以abc开头的单词，^_^\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "0"}