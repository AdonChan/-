{"title": "NumPy快餐教程(2) - 多维数组进阶 - 个人文章 ", "index": "python", "content": "NumPy快餐教程(2) - 多维数组进阶\n上一讲我们介绍了ndarray的形状变化和生成方法，这一节我们继续讨论多维数组的使用方法。\n访问元素\nNumPy中使用[]方括号来访问元素。如果是一维数组，就用下标数字，例如a[1]，如果是多维数组，就在方括号中使用元组tuple，例如a[(2,3,4)]\n例：\nIn [1]: import numpy as np\n\nIn [2]: a20 = np.linspace(1,100,27)\n\nIn [3]: a20\nOut[3]: \narray([   1.        ,    4.80769231,    8.61538462,   12.42307692,\n         16.23076923,   20.03846154,   23.84615385,   27.65384615,\n         31.46153846,   35.26923077,   39.07692308,   42.88461538,\n         46.69230769,   50.5       ,   54.30769231,   58.11538462,\n         61.92307692,   65.73076923,   69.53846154,   73.34615385,\n         77.15384615,   80.96153846,   84.76923077,   88.57692308,\n         92.38461538,   96.19230769,  100.        ])\n\nIn [4]: a21 = a20.reshape(3,3,3)\n\nIn [5]: a21\nOut[5]: \narray([[[   1.        ,    4.80769231,    8.61538462],\n        [  12.42307692,   16.23076923,   20.03846154],\n        [  23.84615385,   27.65384615,   31.46153846]],\n\n       [[  35.26923077,   39.07692308,   42.88461538],\n        [  46.69230769,   50.5       ,   54.30769231],\n        [  58.11538462,   61.92307692,   65.73076923]],\n\n       [[  69.53846154,   73.34615385,   77.15384615],\n        [  80.96153846,   84.76923077,   88.57692308],\n        [  92.38461538,   96.19230769,  100.        ]]])\n\nIn [6]: print(a21[(1,1,1)])\n50.5\n\n切片\n用一个值采用方括号下标方式引用，而如果想要引用多个值的话，可以考虑做一个切片。比如s[1:3]就是由s[1]和s[2]组成的列表：例：\nIn [10]: a22 = np.linspace(1,10,5)\n\nIn [11]: a22\nOut[11]: array([  1.  ,   3.25,   5.5 ,   7.75,  10.  ])\n\nIn [12]: print(a22[2:4])\n[ 5.5   7.75]\n\n多维的切片也是同理，比如我们从一个3x3x3的立方体中切出一个2x2x2的小立方体：\nIn [5]: a21\nOut[5]: \narray([[[   1.        ,    4.80769231,    8.61538462],\n        [  12.42307692,   16.23076923,   20.03846154],\n        [  23.84615385,   27.65384615,   31.46153846]],\n\n       [[  35.26923077,   39.07692308,   42.88461538],\n        [  46.69230769,   50.5       ,   54.30769231],\n        [  58.11538462,   61.92307692,   65.73076923]],\n\n       [[  69.53846154,   73.34615385,   77.15384615],\n        [  80.96153846,   84.76923077,   88.57692308],\n        [  92.38461538,   96.19230769,  100.        ]]])\n\nIn [8]: slice1 = a21[1:3,1:3,1:3]\n\nIn [9]: slice1\nOut[9]: \narray([[[  50.5       ,   54.30769231],\n        [  61.92307692,   65.73076923]],\n\n       [[  84.76923077,   88.57692308],\n        [  96.19230769,  100.        ]]])\n\n请注意，切片的语法不用元组，直接在方括号里切就好了。\n另外，切片可以使用负数做下标，-1就是右数第一个元素。最左和最右都可以不写，比如从1到最右，可以写成a[1:]\n例：\nIn [11]: a22\nOut[11]: array([  1.  ,   3.25,   5.5 ,   7.75,  10.  ])\n\nIn [12]: print(a22[2:4])\n[ 5.5   7.75]\n\nIn [13]: a22[1:]\nOut[13]: array([  3.25,   5.5 ,   7.75,  10.  ])\n\nIn [14]: a22[1:-1]\nOut[14]: array([ 3.25,  5.5 ,  7.75])\n\n多维数组的数据类型\n在前面的学习中，我们并不在意数据类型，一样也可以使用多维数组。但是，有了类型之后，数组可以更方便和更快速的操作。我们前面所学习的生成数组的方法，其实都可以默认带一个dtype参数。类型值常用的有int32, int64, uint32, uint64, float32, float64, complex64, complex128等。因为NumPy是个数学库，精确的类型对于提高计算速度是很有益的。\n例：\nIn [18]: a23 = np.logspace(1,10,5,base=2,dtype=np.float64)\n\nIn [19]: a23\nOut[19]: \narray([    2.        ,     9.51365692,    45.254834  ,   215.2694823 ,\n        1024.        ])\n\n对数组的每个元素都进行计算\n数据只有可以计算才有价值。我们学会了生成数组，访问数组，下一步就是如何对数组进行计算。NumPy提供了大量的针对数组进行运算的函数，比如X是一个数组，np.sin(X)可以对数组中每一个元素都进行sin运算。例：\nIn [20]: a24 = np.linspace(0, np.pi/2, 10, dtype=np.float64)\n\nIn [21]: a24\nOut[21]: \narray([ 0.        ,  0.17453293,  0.34906585,  0.52359878,  0.6981317 ,\n        0.87266463,  1.04719755,  1.22173048,  1.3962634 ,  1.57079633])\n\nIn [22]: a25 = np.sin(a24)\n\nIn [23]: a25\nOut[23]: \narray([ 0.        ,  0.17364818,  0.34202014,  0.5       ,  0.64278761,\n        0.76604444,  0.8660254 ,  0.93969262,  0.98480775,  1.        ])\n\n这是一行的，多行的也照样管用，我们看个例子：\nIn [24]: a26 = np.linspace(0, np.pi*2, 16, dtype=np.float32)\n\nIn [25]: a26\nOut[25]: \narray([ 0.        ,  0.41887903,  0.83775806,  1.2566371 ,  1.67551613,\n        2.09439516,  2.51327419,  2.93215322,  3.35103226,  3.76991129,\n        4.18879032,  4.60766935,  5.02654839,  5.44542742,  5.86430645,\n        6.28318548], dtype=float32)\n\nIn [27]: a27 = np.sin(a26.reshape(4,4))\n\nIn [28]: a27\nOut[28]: \narray([[  0.00000000e+00,   4.06736642e-01,   7.43144870e-01,\n          9.51056540e-01],\n       [  9.94521916e-01,   8.66025388e-01,   5.87785184e-01,\n          2.07911611e-01],\n       [ -2.07911789e-01,  -5.87785363e-01,  -8.66025448e-01,\n         -9.94521916e-01],\n       [ -9.51056480e-01,  -7.43144751e-01,  -4.06736493e-01,\n          1.74845553e-07]], dtype=float32)\n\n数组之间支持加减乘除，乘方，取余。\n例：给一个数组的每个元素都乘以2\nIn [31]: a28 = np.array([1,2,3,4]).reshape(2,-1)\n\nIn [32]: a28\nOut[32]: \narray([[1, 2],\n       [3, 4]])\n\nIn [33]: a28*2\nOut[33]: \narray([[2, 4],\n       [6, 8]])\n\n两个数组之间做加法：\nIn [35]: a29 = np.ones((2,2))\nIn [36]: a29Out[36]: array([[ 1.,  1.],\n   [ 1.,  1.]])\n\nIn [37]: a28+a29Out[37]: array([[ 2.,  3.],\n   [ 4.,  5.]])\n不但算术运算可以做，也可以针对整个数组做比较大小运算。\n例：\nIn [38]: a29>a28\nOut[38]: \narray([[False, False],\n       [False, False]], dtype=bool)\n\n汇总类的运算\n除了对每个元素进行计算，我们还可以对这些元素进行汇总，比如求和sum，求平均值mean等。\n例：\nIn [40]: np.sum(a28)\nOut[40]: 10\n\nIn [41]: np.mean(a28)\nOut[41]: 2.5\n\n矩阵matrix\n除了前面所讲的多维数组，NumPy还提供了矩阵类matrix. matrix的默认运算都是矩阵运算。例:\nIn [45]: a30 = np.matrix(np.linspace(1,10,9,dtype=np.float64).reshape(3,-1))\n\nIn [46]: a30\nOut[46]: \nmatrix([[  1.   ,   2.125,   3.25 ],\n        [  4.375,   5.5  ,   6.625],\n        [  7.75 ,   8.875,  10.   ]])\nIn [48]: a31 = np.matrix(np.ones((3,3)))\n\nIn [49]: a31\nOut[49]: \nmatrix([[ 1.,  1.,  1.],\n        [ 1.,  1.,  1.],\n        [ 1.,  1.,  1.]])\n\nIn [50]: np.dot(a30,a31)\nOut[50]: \nmatrix([[  6.375,   6.375,   6.375],\n        [ 16.5  ,  16.5  ,  16.5  ],\n        [ 26.625,  26.625,  26.625]])\n\n矩阵的逆阵，就可以直接用X**-1来表示。\n例：\nIn [52]: a30 ** -1\nOut[52]: \nmatrix([[  9.38565300e+14,  -1.87713060e+15,   9.38565300e+14],\n        [ -1.87713060e+15,   3.75426120e+15,  -1.87713060e+15],\n        [  9.38565300e+14,  -1.87713060e+15,   9.38565300e+14]])\n\nIn [53]: a30\nOut[53]: \nmatrix([[  1.   ,   2.125,   3.25 ],\n        [  4.375,   5.5  ,   6.625],\n        [  7.75 ,   8.875,  10.   ]])\n\nIn [54]: a30 * (a30 ** -1)\nOut[54]: \nmatrix([[ 0.8125 , -0.125  ,  0.     ],\n        [ 0.15625, -1.0625 ,  1.     ],\n        [ 0.     ,  0.     ,  2.     ]])\n        \n\n本文作者：lusing \n原文链接\n本文为云栖社区原创内容，未经允许不得转载。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}