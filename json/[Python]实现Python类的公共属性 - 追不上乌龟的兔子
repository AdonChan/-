{"title": "[Python]实现Python类的公共属性 - 追不上乌龟的兔子 ", "index": "python", "content": "背景\n今天看到有人问Python的类有没有类似公共属性的特性，就是修改了某个实例的对应属性，该类的所有实例的对应属性都随之修改，想了想用了一个辅助的单例模式的类解决了问题。\n思路\n修改一个实例另一个实例也跟着修改，听起来很像单例模式的特性，但又只针对一个属性，所以可以借用一个辅助的类。\n代码\nclass Attr():\n    attr = {}\n    def __init__(self):\n        self.__dict__ = self.attr\nclass Myclass():\n    def __init__(self):\n        self.attr = Attr()\n    @property\n    def value(self):\n        return self.attr.value\n    @value.setter\n    def value(self, value):\n        self.attr.value = value\n演示\nIn [47]: a = Myclass()\n\nIn [48]: b = Myclass()\n\nIn [49]: a.value = 1\n\nIn [50]: b.value\nOut[50]: 1\n\nIn [51]: b.value = 2\n\nIn [52]: a.value, b.value\nOut[52]: (2, 2)\n感想\n要活用设计模式和它们的组合。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}