{"title": "[零基础学python]类的细节 - 易水禾 ", "index": "零基础,python", "content": "前面对类的有关内容已经描述不少了，其实话题远远没有结束，不过对于初学者，掌握这些已经算是入门，在以后的实践中，还需要进行体会和感悟。\n\n这几天和几个朋友以各种途径讨论过OOP的相关问题，他们是：令狐虫、Frank、晋剑、小冯\n\n大家对OOP有不同看法，所谓工程派和学院派看法不一致。从应用的角度看，工程派的观点是值得推荐的，那就是：不用太在意内部是怎么工作的，只要能够解决眼下的问题即可。但是，对于学习者而言，如果仅仅停留在工程派的层面（特别提醒，上述几位朋友都是工程派的大侠，他们可不是简单地能够使用，其实是更高层次的“无招胜有招”），学习者可能感觉有点不透彻。所以，学习者，特别是初学者，要知道一些内部原因，但是也别为了钻研内部原因而忘记了应用的目的。看来两者协调还是一个难办的事情。不用着急，随着实践的深入，就逐渐有体会了。\n\n下面我根据MARK Lutz的《Learning Python》中的“大师眼中的OOP”，列一些使用OOP的常见原因。\n\n\n代码重用。这是很简单（并且是使用OOP的最主要原因）。通过支持继承，类允许通过定制来编程，而不是每次都从头开始一个项目。\n封装。在对象接口后包装其实现的细节，从而隔离了代码的修改对用户产生的影响。\n结构。类提供了一个新的本地作用域，最小化了变量名冲突。他们还提供了一种编写和查找实现代码，以及去管理对象状态的自然场所。\n维护性。类自然而然地促进了代码的分解，这让我们减少了冗余。对亏支持类的结构以及代码重用，这样每次只需要修改代码中一个拷贝就可以了。\n一致性。类和继承可以实现通用的接口。这样代码不仅有了统一的外表和观感，还简化了代码的调试、理解以及维护。\n多态。多态让代码更灵活和有了广泛的适用性。（这似乎是OOP的属性，不是使用它的理由）\n\n不管怎么样，类是一个非常重要的东西，看官在学习的时候，一定要多加运用。\n\n此外，对于python2来说，还有一个叫做“新式类”(new-style)的东西，这个对应于前面讲过的类，那么前面讲过的类就称为“经典”(classic)类。但是，对于Python3来讲，没有这种区别，二者融合。只是在Python2中，两个是有区别的。本教程在基础部分，依然不讲授新式类的问题，如果看官有兴趣，可以自己在GOOGLE中查找有关资料，也可以随着本课程深入，到下一个阶段来学习。\n\n绑定和无绑定方法\n\n看官是否还记得，在学习类的方法的时候，提到过，类的方法就是函数，只不过这个函数的表现有点跟前面学过的函数不一样，比如有个self。当然，也不是必须要有的，下面看官就会看到没有self的。既然方法和函数一样，本质上都是函数，那么，函数那部分学习的时候已经明确了：函数是对象，所以，类方法也是对象。正如刚才说的，类的方法中，有的可以有self，有的可以没有。为了进行区别，进一步做了这样的定义：\n\n\n无绑定类方法对象：无self\n绑定实例方法对象：有self\n\n调用绑定实例方法对象\n\n>>> class MyClass:\n...     def foo(self,text):\n...         print text\n... \n\n\n可以用下面的方式调用实例方法\n\n>>> a = MyClass()       #创建类实例\n>>> a.foo('qiwsir.github.io')       #调用实例方法\nqiwsir.github.io\n>>> a.foo\n<bound method MyClass.foo of <__main__.MyClass instance at 0xb74495ac>>\n\n\n在这个实例方法调用的时候，其数据传递流程，在《编写类之二方法》中有一张图，图中显示了，上述的调用方法中，其实已经将实例名称a传给了self，这就是调用绑定实例方法对象，有self。\n\n上面的调用过程，还可以这样来实现：\n\n>>> a = MyClass()\n>>> x = a.foo       #把实例a和方法函数foo绑定在一起\n>>> x\n<bound method MyClass.foo of <__main__.MyClass instance at 0xb74495ac>>\n>>> x(\"qiwsir.github.io\")\nqiwsir.github.io\n\n\n在上面的调用中，其实相当于前面的调用过程的分解动作。即先将实例a和方法函数foo绑定在一起，然后赋值给x，这时候x就相当于一个简单函数一样，可以通过上述方式传入参数。这里将实例和方法函数绑定的方式就是运用点号运算（object.method_function）\n\n调用无绑定类方法对象\n\n所谓类方法对象，就是不通过实例，而是用类进行点号运算来获得方法函数（ClassName.method_function）\n\n>>> a = MyClass()\n>>> y = MyClass.foo     #这里没有用类调用\n>>> y\n<unbound method MyClass.foo>\n\n\n这样的调用，就得到了无绑定方法对象，但是，调用的时候必须传入实例做为第一参数，如下\n\n>>> y(a,\"qiwsir.github.io\")\nqiwsir.github.io\n\n\n否则，就报错。请看官特别注意报错信息\n\n>>> y(\"qiwsir.github.io\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: unbound method foo() must be called with MyClass instance as first argument (got str instance instead)\n>>> \n\n\n在编程实践中，似乎用实例方法调用更多一下。\n\n文档字符串\n\n在写程序的时候，必须要写必要的文字说明，没别的原因，除非你的代码写的非常容易理解，特别是各种变量、函数和类等的命名任何人都能够很容易理解，否则，文字说明是不可缺少的。\n\n在函数、类或者文件开头的部分写文档字符串说明，一般采用三重引号。这样写的最大好处是能够用help()函数看。\n\n\"\"\"This is python lesson\"\"\"\n\ndef start_func(arg):\n    \"\"\"This is a function.\"\"\"\n    pass\n\nclass MyClass:\n    \"\"\"Thi is my class.\"\"\"\n    def my_method(self,arg):\n        \"\"\"This is my method.\"\"\"\n        pass\n\n\n这样的文档是必须的。\n\n当然，在编程中，有不少地方要用“#”符号来做注释。一般用这个来注释局部。\n\n类其实并没有结束，不过本讲座到此对类暂告一段。看官要多实践。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "4"}