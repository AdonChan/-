{"title": "Python编程入门基础语法详解 经典 - 个人文章 ", "index": "python", "content": "一、基本概念\n1.内置的变量类型：\nPython是有变量类型的，而且会强制检查变量类型。内置的变量类型有如下几种：\n浮点\nfloat_number = 2.3\n复数\ncomplex_number = 1 + 5j\n整型\ninteger_number = 1\nlist 序列\nsample_list = [2,52,36,'abc']\n嵌套\nsample_nest = [(2,4,6),{5:7,9:11,'key':[2,5]},6]\ndictionary 字典\nsample_dic = {\"key\":value, 5:10}\ntuple 只读的序列\nsample_tuple = (3,9,\"ab\")\n从上面的示例可以看出，python的变量无需声明，可直接给变量赋值。\n2.字符串\npython中声明一个字符串通常有三种方法，''、\" \"和''' '''，这三种方法在声明普通字符串时的效果是完全一样的，区别在于字符串本身中存在引号的情况，举例如下：\nword = 'good'\nsentence = \"hello world\"\nparagraph = '''good noon:\"nice to meet you.\"'''\npython中单行注释采用#开头。\n!/usr/bin/python\nFirst comment\nprint \"Hello, world!\"; # second comment\n上述内容输出：hello,Python!。注释可以在语句或表达式行末。\n多行注释可采用三引号，比如：\n'''This is a comment.\nThis is a comment, too.\nThis is a comment, too.\nI said that already.'''\n转义符 ''；\n自然字符串， 通过在字符串前加r或R。 如 r\"this is a line with \" 则 会显示，并不是换行。\npython允许处理unicode字符串，加前缀u或U， 如 u\"this is an unicode string\"。\n3.Python标识符\n在python里，标识符有字母、数字、下划线组成。\n在python中，所有标识符可以包括英文、数字以及下划线（_），但不能以数字开头。\npython中的标识符是区分大小写的。\n以下划线开头的标识符是有特殊意义的。以单下划线开头（_foo）的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用\"from xxx import *\"而导入；\n以双下划线开头的（__foo）代表类的私有成员；以双下划线开头和结尾的（__foo__）代表python里特殊方法专用的标识，如__init__（）代表类的构造函数。\n4.Python保留字符\n下面的列表显示了在Python中的保留字。这些保留字不能用作常数或变数，或任何其他标识符名称。\n所有Python的关键字只包含小写字母。\n如果你在学习Python的过程中遇见了很多疑问和难题，可以加-q-u-n   227 -435-450里面有软件视频资料免费\n5.行和缩进\n学习Python与其他语言最大的区别就是，Python的代码块不使用大括号（{}）来控制类，函数以及其他逻辑判断。python最具特色的就是用缩进来写模块。\n缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行。如下所示：\nif True:\nprint \"True\"\nelse:\nprint \"False\"\n上述，if与else的缩进空白数量相同。以下代码将会报错：\nif True:\nprint \"Answer\"\nprint \"True\"\nelse:\nprint \"Answer\"\nprint \"False\"\npython中分号;标识一个逻辑行的结束，但是实际中一般每个物理行只写一个逻辑行，可以避免使用分号。这样书写便于阅读。注意：不要混合使用空格和制表符来缩进，因为在跨越不同的平台时无法正常工作。\n多个物理行中可以写一个逻辑行，使用行连接符，如下：\ns = \"peter is\nwriting this article\"\n二、运算符与表达式\n运算符与其用法\n\n\n\n运算符优先级（从低到高）\n三.控制流\n条件语句\n1.1 if语句\n例子， 执行if语句内的程序\na = input(\"a:\")\nb = input(\"b:\")\nif(a > b):\nprint a, \" > \", b\nif else语句：\na = input(\"a:\")\nb = input(\"b:\")\nif(a > b):\nprint a, \" > \", b\nelse:\nprint a, \" < \", b\n1.2 if…elif…else语句\n例子：根据输入的分数，输出分数等级：\nscore = raw_input(\"score:\")\nscore=int(score)\nif(score >= 90) and (score <= 100):\nprint \"A\"\nelif(score >= 80) and (score < 90):\nprint \"B\"\nelif(score >= 60) and (score < 80):\nprint \"C\"\nelse:\nprint \"D\"\nraw_input() 读取输入值。\nPython编程入门——基础语法详解（经典）\n1.3 if语句的嵌套\n编写条件语句时，应该尽量避免使用嵌套语句。嵌套语句不便于阅读，而且可能会忽略一些可能性。\nx = -1\ny = 99\nif(x >= 0):\nif(x > 0): #嵌套的if语句\ny = 1\nelse:\ny = 0\nelse:\ny = -1\nprint \"y =\", y\n1.4 实现switch语句的功能\npython中没有switch特殊字，Python可以通过字典实现switch语句的功能。\n实现方法分两步。首先，定义一个字典。字典是由键值对组成的集合。其次，调用字典的get()获取相应的表达式。\nfrom future import division\nx = 1\ny = 2\noperator = \"/\"\nresult = {\n\"+\" : x + y,\n\"-\" : x - y,\n\"\" : x  y,\n\"/\" : x / y\n}\nprint result.get(operator)\n输出为0.5；\n另一种使用switch分支语句的方案是创建一个switch类，处理程序的流程。\na) 创建一个switch类，该类继承自Python的祖先类object。调用构造函数init( )初始化需要匹配的字符串，并需要定义两个成员变量value和fall。Value用于存放需要匹配的字符串，fall用于记录是否匹配成功，初始值为false，标识匹配不成功。如果匹配成功，程序往后执行。\nb) 定义一个match( )方法，该方法用于用于匹配case子句。这里需要考虑三种情况：首先是匹配成功的情况，其次是匹配失败的默认case子句，最后是case子句中没有使用break中断的情况。\nc) 重写__iter__( )方法，定义该方法后才能使switch类用于循环语句中。__iter__( )调用match( )方法进行匹配。通过yield保留字，使函数可以在循环中迭代。此外，调用StopIteration异常中断循环。\nd) 编写调用代码，在for…in…循环中使用switch类。\n!/usr/bin/python\n-- coding: UTF-8 --\nclass switch(object):\ndef __init__(self, value): # 初始化需要匹配的值value\nself.value = value\nself.fall = False # 如果匹配到的case语句中没有break，则fall为true。\ndef __iter__(self):\nyield self.match # 调用match方法 返回一个生成器\nraise StopIteration # StopIteration 异常来判断for循环是否结束\ndef match(self, *args): # 模拟case子句的方法\nif self.fall or not args: # 如果fall为true，则继续执行下面的case子句\n或case子句没有匹配项，则流转到默认分支。\nreturn True\nelif self.value in args: # 匹配成功\nself.fall = True\nreturn True\nelse: # 匹配失败\nreturn False\noperator = \"+\"\nx = 1\ny = 2\nfor case in switch(operator): # switch只能用于for in循环中\nif case('+'):\nprint x + y\nbreak\nif case('-'):\nprint x - y\nbreak\nif case('*'):\nprint x * y\nbreak\nif case('/'):\nprint x / y\nbreak\nif case(): # 默认分支\nprint \"\"\n2.while...语句\n只要在一个条件为真的情况下，while语句允许你重复执行一块语句。while语句是所谓 循环 语句的一个例子。while语句有一个可选的else从句。\nwhile True:\npass\nelse:\npass\nelse语句可选，当while为False时，else语句被执行。 pass是空语句。\n3.for 循环\nfor i in range(0, 5):\nprint i\nelse:\npass\n打印0到4\n注：当for循环结束后执行else语句；range(a, b)返回一个序列，从a开始到b为止，但不包括b，range默认步长为1，可以指定步长，range(0,10,2)；\nPython编程入门——基础语法详解（经典）\n四、函数\n函数通过def定义。def关键字后跟函数的标识符名称，然后跟一对圆括号，括号之内可以包含一些变量名，该行以冒号结尾；接下来是一块语句，即函数体。\ndef sumOf(a, b):\nreturn a + b\n4.1 局部变量\n在函数内定义的变量与函数外具有相同名称的其他变量没有任何关系，即变量名称对于函数来说是局部的。这称为变量的作用域。global语句， 为定义在函数外的变量赋值时使用global语句。\ndef func():\nglobal x\nprint \"x is \", x\nx = 1\nx = 3\nfunc()\nprint x\n以上代码，输出的结果为：\n3\n1\n4.2 默认参数\n通过使用默认参数可以使函数的一些参数是‘可选的’。\ndef say(msg, times = 1):\nprint msg * times\nsay(\"peter\")\nsay(\"peter\", 3)\n注意：只有在形参表末尾的那些参数可以有默认参数值，即不能在声明函数形参的时候，先声明有默认值的形参而后声明没有默认值的形参，只是因为赋给形参的值是根据位置而赋值的。\n4.3 关键参数\n如果某个函数有很多参数，而现在只想指定其中的部分，那么可以通过命名为这些参数赋值（称为‘关键参数’）。\n优点：不必担心参数的顺序，使函数变的更加简单；假设其他参数都有默认值，可以只给我们想要的那些参数赋值。\ndef func(a, b=2, c=3):\nprint \"a is %s, b is %s, c is %s\" % (a, b, c)\nfunc(1) #输出a is 1, b is 2, c is 3\nfunc(1, 5) #输出a is 1, b is 5, c is 3\nfunc(1, c = 10) #输出a is 1, b is 2, c is 10\nfunc(c = 20, a = 30) #输出a is 30, b is 2, c is 20\n4.3 return语句\nreturn语句用来从一个函数返回，即跳出函数。可从函数返回一个值。\n没有返回值的return语句等价于return None。None表示没有任何东西的特殊类型。\n\n                ", "mainLikeNum": ["3 "], "mainBookmarkNum": "2"}