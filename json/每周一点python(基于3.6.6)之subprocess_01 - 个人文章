{"title": "每周一点python(基于3.6.6)之subprocess_01 - 个人文章 ", "index": "subprocess,python", "content": "subprocess模块可以用于创建子进程，连接到子进程的标准输入/输出/错误管道中去，并获得子进程执行的返回状态码\nsubprocess.run()\nsubprocess.run(args, *, stdin=None, input=None, stdout=None, stderr=None, shell=False, cwd=None, timeout=None, check=False, encoding=None, errors=None, env=None)\n调用subprocess模块推荐使用run()函数(在它能够处理的应用场景下)。对于更高级的应用场景，直接使用Popen接口。需要注意的是run()函数在Python3.5版本引入。\n该函数运行args参数中的命令，命令执行完成后，返回一个CompletedProcess实例。\n上面仅列出了一些常用的参数。实际上，run()函数的参数包括Popen构造器中所有的参数，以及timeout, input和check。这些参数都将传入Popen接口。  \n默认不捕获stdout或stderr。除非显式地指定stdout=subprocess.PIPE或stderr=subprocess.PIPE\ntimeout参数被传入到Popen.communicate()。如果超时，子进程会被杀死并等待(waited for)。子进程终止后，抛出TimeoutExpired异常。\ninput参数被传入到Popen.communicate()并作为subprocess的标准输入。该参数值必须是字节序列或字符串(作为字符串时，必须指定encoding或errors，或设置universal_newlines=True)。使用input参数后，stdin自动设置为subprocess.PIPE，即使设置了其他值也不会生效。\n如果设置了check=True，且子进程以非0状态码退出，将会抛出CalledProcessError异常。该异常的属性保存了执行指令，退出状态码，标准输出和错误输出信息  \n如果指定了encoding或errors，或设置了universal_newlines=True，标准输入/输出/错误将作为文件对象，以文本模式打开。否则将以二进制模式打开。\nenv参数指定子进程的环境变量并传递到Popen接口。值不为None时，必须是映射对象显式地定义子进程的环境变量；值为None表示继承父进程的环境变量。\nsubprocess.CompletedProcess\nrun()函数的返回值，表示子进程执行完成。\n\n\nargs：启动子进程的参数。值是一个列表或字符串。\n\nreturncode：子进程的返回状态码。0表示进程正常执行，-N表示进程被信号N终止。\n\nstdout：子进程的标准输出。值是None或字节序列或字符串(需要调用进程时指定了encoding或errors)。如果指定了stderr=subprocess.STDOUT，那么stdout和stderr的值都会绑定到stdout属性，且stderrr的值变为None\n\nstderr：子进程的错误输出。值是None或字节序列或字符串(需要调用进程时指定了encoding或errors)。\n\ncheck_returncode()：如果返回状态码非0，则抛出CalledProcessError异常\n\nsubprocess.DEVNULL\n一个可以设置给stdin/stdout/stderr参数的特殊值。类似shell中的/dev/null\nsubprocess.PIPE\n一个可以设置给stdin/stdout/stderr参数的特殊值。类似shell中的管道符|。常用于Popen.communicate()\nsubprocess.STDOUT\n一个可以设置给stderr参数的特殊值。类似shell中的错误输出重定向到标准输出2>&1\nsubprocess.SubprocessError\nsubprocess模块中异常的基类\nsubprocess.TimeoutExpired\nSubprocessError异常的子类，子进程执行超时时抛出\n\n\ncmd：派生出子进程的指令\n\ntimeout：超时值\n\noutput：run()或check_output()捕获到的子进程标准输出\n\nstdout：output属性的别名\n\nstderr：run()捕获到的子进程错误输出\n\nsubprocess.CalledProcessError\nSubprocessError异常的子类，通过check_call()或check_output()派生的子进程返回非0状态码时抛出\n\n\nreturncode：子进程的返回状态码。如果进程由于某个signal退出，则该属性为该signal值的负数\n\ncmd：派生出子进程的指令\n\noutput：run()或check_output()捕获到的子进程标准输出\n\nstdout：output属性的别名\n\nstderr：run()捕获到的子进程错误输出\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}