{"title": "Flask二之快速入门 - 个人文章 ", "index": "sqlite,centos,linux,flask,python", "content": "一.一个最小的Flask应用\nfrom flask import Flask\napp = Flask(__name__)\n#app是程序实例，一个项目只能有一个程序实例\n@app.route('/')\n#路由装饰器\ndef hello_world():\n#视图函数\n    return 'Hello World!'    \n    #返回一个字符串\nif __name__ == '__main__':\n    app.run()\n把程序保存为hello.py  用Python解释器运行\n$ python hello.py\n    * Running on  http://127.0.0.1:5000/\n访问 http://127.0.0.1:5000/ ，会看见 Hello World 问候。欲关闭服务器，按 Ctrl+C。\n这段代码做了什么？\n首先，我们导入了 Flask 类。这个类的实例将会是我们的 WSGI 应用程序2.接下来，我们创建一个该类的实例，第一个参数是应用模块或者包的名称。 如果你使用单一的模\n块（如本例），你应该使用 name ，因为模块的名称将会因其作为单独应用启动还是作为模块导入而有不同（ 也即是 '__main__' 或实际的导入名）。这是必须的，这样 Flask 才知道到哪去找模板、静态文件等等。 详情见 Flask的文档。\n然后，我们使用 route() 装饰器告诉 Flask 什么样的URL 能触发我们的函数。4.这个函数的名字也在生成 URL 时被特定的函数采用，这个函数返回我们想要显示在用户浏览器中\n的信息。5.最后我们用 run() 函数来让应用运行在本地服务器上。 其中 if name =='__main__': 确保服务器只会在该脚本被 Python 解释器直接执行的时候才会运行，而不是作为模块导入的时候。\n(1)调试模式\n如果你启用了调试支持，服务器会在代码修改后自动重新载入,并在发生错误时提供一个相当有用的调试器。有两种途径来启用调试模式：一种是直接在应用对象上设置:\napp.debug = True\napp.run()\n另一种是作为 run 方法的一个参数传入:\napp.run(debug=True)\n两种方法的效果完全相同。【注意】\n交互式调试器绝对不能用于生产环境。\n(2)路由装饰器\n@app.route('/')\ndef index():\n    return 'Index'\n    \n@app.route('/hello/')\ndef hello():\n    return '<h1>Hello world!</h1>'\n这个函数的返回值称为响应，是客户端接收到的内容。像 index() 这样的函数称为视图函数（view function）。视图函数返回的响应可以是包含HTML 的简单字符串，也可以是复杂的表单。\n(3)变量规则\n@app.route('/user/<name>')\ndef showUserName(name):\n    return \"User %s\" %name\n    \n@app.route('/post/<int:post_id>')\ndef showPostId(post_id):\n    return \"Post %d\" %post_id\nFlask 支持在路由中使用 int、 float 和 path 类型。path 类型也是字符串，但不把斜线视作分隔符，而将其当作动态片段的一部分。int     |  接受整数float     |  接受浮点数path    |  和默认的相似，但也接受斜线变量规则的意义：处理动态信息。 【注意】 \n\napp.route()函数中中括号里的是变量名，必须与视图函数的形参名一致！\n如果是int或float类型，不能直接return！必须要转换为字符串格式才可以，否则会报错：TypeError: 'int' object is not callable\n\n(4)唯一 URL / 重定向行为\n@app.route('/about/') # 建议用法\n# @app.route('/about') # 不建议用法\ndef about():\n    return 'The about page'\n虽然它们看起来着实相似，但它们结尾斜线的使用在 URL 定义 中不同：\n- 第一种情况中，指向 about的规范 URL 尾端有一个斜线。这种感觉很像在文件系\n统中的文件夹。访问一个结尾不带斜线的 URL 会被 Flask 重定向到带斜线的规范\nURL 去。因此， 强烈建议统一加上斜线！\n- 第二种情况的 URL 结尾不带斜线，类似 UNIX-like 系统下的文件的路径名。访问\n结尾带斜线的URL 会产生一个 404 “Not Found” 错误。\n这个行为使得在遗忘尾斜线时，允许关联的 URL 接任工作，与 Apache 和其它的服务器的行为并无二异。此外，也保证了 URL 的唯一，有助于避免搜索引擎索引同一个页面两次。\n(5)重定向和错误\n\n用 redirect() 函数把用户重定向到其它地方。\n用 abort() 函数放弃请求并返回错误代码。例如:\n\n@app.route('/redir/')\ndef redir():\n    return redirect('/login/')\n@app.route('/login/')\ndef login():\n    abort(401)\n用户会从/redir/重定向到一个不能访问的页面 （401 意味着禁止访问）。\n(6)构造URL\n用 url_for()来给指定的函数生成（构造） URL。它接受函数名作为第一个参数，也接受对应 URL 规则的变量部分的命名参数。例如:\n@app.route('/world/')\ndef world():\n    # return redirect('/hello/')\n    # return redirect(url_for('hello'))\n    # return redirect(url_for('showUserName',name = 'liusheng'))\n    return redirect(url_for('showPostId', post_id = 100)) \n    # 注意这里的100可以是字符串也可以是整型\n使用url_for()生成 URL 而非在模板中硬编码的好处：\n1. 反向构建通常比硬编码的描述性更好。允许一次性修改 URL，而不用到处边找边改。\n2. URL 构建会转义特殊字符和 Unicode 数据，免去你很多麻烦。\n\n(7)使用Flask-Script支持命令行选项\nFlask-Script 是一个 Flask 扩展，为 Flask 程序添加了一个命令行解析器。 Flask-Script 自带了一组常用选项，而且还支持自定义命令。\nFlask-Script 扩展使用 pip 安装：\n(venv) $ pip install flask-script\n把命令行解析功能添加到 hello.py 程序中时需要修改的地方：\nfrom flask_script import Manager\nmanager = Manager(app)\nif __name__ == '__main__':\n    manager.run()\n修改之后程序可以使用一组基本命令行选项来启动 Web 服务器。:\npython hello.py runserver\n--host HOST  |设置host为 HOST\n--port PORT  |设置port为 PORT\n-d           |设置以debug模式运行而非run模式\n-r           |设置自动重新载入（app.debug为True）\n\n标准命令：\npython hello.py runserver -d -r --host 0.0.0.0\npython hello.py runserver -d -r --port:5001\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}