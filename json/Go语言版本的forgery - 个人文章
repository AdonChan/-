{"title": "Go语言版本的forgery - 个人文章 ", "index": "python,golang", "content": "使用过Python语言的朋友们可能使用过forgery_py，它是一个伪造数据的工具。能伪造一些常用的数据。在我们开发过程和效果展示是十分有用。但是没有Go语言版本的，所以就动手折腾吧。\n从源码入手\n在forgery_py的PyPi有一段的实例代码：\n>>> import forgery_py\n>>> forgery_py.address.street_address()\nu'4358 Shopko Junction'\n>>> forgery_py.basic.hex_color()\n'3F0A59'\n>>> forgery_py.currency.description()\nu'Slovenia Tolars'\n>>> forgery_py.date.date()\ndatetime.date(2012, 7, 27)\n>>> forgery_py.internet.email_address()\nu'brian@zazio.mil'\n>>> forgery_py.lorem_ipsum.title()\nu'Pretium nam rhoncus ultrices!'\n>>> forgery_py.name.full_name()\nu'Mary Peters'\n>>> forgery_py.personal.language()\nu'Hungarian'\n从以上的方法调用我们可以看出forgery_py下有一系列的*.py文件，里面有各种方法，实现各种功能，我们在来通过分析下Python版本的forgery_py的源码来看看它的实现原理。\n# ForgeryPy 包的一级目录\n├── dictionaries  # 伪造内容和来源目录，目录下存放的都是一些文本文件\n├── dictionaries_loader.py # 加载文件脚本\n├── forgery       # 主目录，实现各种数据伪造功能，目录下存放的都是python文件\n├── __init__.py   \n我们在来看下forgery目录下的脚本\n$ cat name.py\nimport random\n\nfrom ..dictionaries_loader import get_dictionary\n\n__all__ = [\n    'first_name', 'last_name', 'full_name', 'male_first_name',\n    'female_first_name', 'company_name', 'job_title', 'job_title_suffix',\n    'title', 'suffix', 'location', 'industry'\n]\n\n\ndef first_name():\n    \"\"\"Random male of female first name.\"\"\"\n    _dict = get_dictionary('male_first_names')\n    _dict += get_dictionary('female_first_names')\n\n    return random.choice(_dict).strip()\n\n__all__设置能被调用的方法。first_name()方法是forgery_py中一个典型伪造数据方法，我们只要来分析它就可以知道forgery_py的工作原理了。这个方法代码很少，能容易就看出_dict = get_dictionary('male_first_names')和_dict += get_dictionary('female_first_names')获取的数据合并，在最后的return random.choice(_dict).strip()返回随机的数据。它的重点在于get_dictionary(),所以我们需要来看它的所在位置dictionaries_loader.py文件。\n$ cat dictionaries_loader\nimport random\n\nDICTIONARIES_PATH = abspath(join(dirname(__file__), 'dictionaries'))\n\ndictionaries_cache = {}\n\n\ndef get_dictionary(dict_name):\n    \"\"\"\n    Load a dictionary file ``dict_name`` (if it's not cached) and return its\n    contents as an array of strings.\n    \"\"\"\n    global dictionaries_cache\n\n    if dict_name not in dictionaries_cache:\n        try:\n            dictionary_file = codecs.open(\n                join(DICTIONARIES_PATH, dict_name), 'r', 'utf-8'\n            )\n        except IOError:\n            None\n        else:\n            dictionaries_cache[dict_name] = dictionary_file.readlines()\n            dictionary_file.close()\n\n    return dictionaries_cache[dict_name]\n\n以上就是dictionaries_loader.py文件去掉注释后的所以要内容。它的主要实现就是：定义一个全局的字典参数dictionaries_cache作为缓存，然后定义方法get_dictionary()获取源数据，get_dictionary()中每次forgery目录底下方法调用时先查看缓存，缓存字典中存在数据就直接输出，不存在就读取dictionaries底下的对应文件，并存入缓存。最后是返回数据。总的来说forgery_py的原理就是：一个方法调用，去读内存中的缓存，存在就直接返回，不存在就到对应的文本文件中读取并写入缓存并返回。返回来的数据再随机选取输出结果。\n使用Go语言实现\n在了解了forgery_py的工作原理之后，我们就可以来使用Go语言来实现了。\n# forgery的基本目录\n$ cat forgery\n├── dictionaries # 数据源\n│   ├── male_first_names\n├── name.go   # 具体功能实现\n└── loader.go # 加载数据\n根据python版本的我们也来创建对应的目录。实现数据的读取的缓存：\n// forgery/loader.go\npackage forgery\n\nimport (\n    \"os\"\n    \"io\"\n    \"bufio\"\n    \"math/rand\"\n    \"time\"\n    \"strings\"\n)\n\n// 全局的缓存map\nvar dictionaries map[string][]string = make(map[string][]string)\n\n// 在获取数据之后随机输出\nfunc random(slice []string) string {\n    rand.Seed(time.Now().UnixNano())\n    n := rand.Intn(len(slice))\n    return strings.TrimSpace(slice[n])\n}\n\n// 主要的数据加载方法\nfunc loader(name string) (slice []string, err error) {\n    slice, ok := dictionaries[name]\n    // 缓存中存在数据，直接返回\n    if ok {\n        return slice, nil\n    }\n    // 读取对应文件\n    file, err := os.Open(\"./dictionaries/\" + name)\n    if err != nil {\n        return slice, err\n    }\n    defer file.Close()\n    rd := bufio.NewReader(file)\n    for {\n        line, err := rd.ReadString('\\n')\n        slice = append(slice, line)\n        if err != nil || io.EOF == err {\n            break\n        }\n    }\n    dictionaries[name] = slice\n    return slice, nil\n}\n\n// 统一的错误处理\nfunc checkErr(err error) (string, error) {\n    return \"\", err\n}\n实现具体的功能：\n// forgery/name.go\n// Random male of female first name.\nfunc FirstName() (string, error) {\n    slice, err := loader(\"male_first_names\")\n    checkErr(err)\n    slice1, err := loader(\"female_first_names\")\n    checkErr(err)\n    slice = append(slice, slice1...)\n    return random(slice), nil\n}\n这样就将python语言版本的forgery_py使用Go来实现了。\n最后\n上面只是提及了一些工作原理，具体的源代码可以看https://github.com/xingyys/fo...,也十分感谢https://github.com/tomekwojci...，具体的思路和里面的数据源都是他提供的。本人就是做了一些翻译的的工作。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}