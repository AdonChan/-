{"title": "爬取豆瓣电影top250提取电影分类进行数据分析 - python大法好 ", "index": "数据分析,python3.x,网页爬虫,python爬虫,python", "content": "标签（空格分隔）：python爬虫\n一、爬取网页，获取需要内容\n我们今天要爬取的是豆瓣电影top250页面如下所示：\n我们需要的是里面的电影分类，通过查看源代码观察可以分析出我们需要的东西。直接进入主题吧！\n知道我们需要的内容在哪里了，接下来就使用我们python强大的request库先获取网页内容下来吧！获取内容后，再使用一个好用的lxml库来分析网页内容，然后获取我们的内容就可以做下一步操作了。先贴出使用request库和lxml分析的代码\n\n    def get_page(i):\n            url = 'https://movie.douban.com/top250?start={}&filter='.format(i)\n                \n            html = requests.get(url).content.decode('utf-8')    # 使用request库获取网页内容\n        \n            selector = etree.HTML(html)    # 使用lxml库提取内容\n            '''\n                通过观察页面就能发现内容在<div class=\"info\">下的一部分\n            '''\n            content = selector.xpath('//div[@class=\"info\"]/div[@class=\"bd\"]/p/text()')\n            print(content)\n        \n            for i in content[1::2]:\n                print(str(i).strip().replace('\\n\\r', ''))\n                # print(str(i).split('/'))\n                i = str(i).split('/')  \n                i = i[len(i) - 1]\n                key = i.strip().replace('\\n', '').split(' ') # 这里的strip和replace的使用目的是去除空格和空行之类\n                print(key)\n\n通过获取下来的内容我们发现一部电影的各项内容都是用'/'分隔着，我们只需要提取电影分类中的东西，所以我们需要使用\ni = str(i).split('/')\n来把内容分隔成几项内容，因为电影分类排在最后，所以我们通过\ni = i[len(i) - 1]\n来获取分隔后的最后一项也就是我们需要的电影分类，还有最后一步我们需要完成的，因为一部电影里面一般都有多个电影分类的标签，所以我们还要继续分隔获取到的电影分类，并且观察可以知道电影分类之间只是用一个空格隔开，所以我们使用下面一行代码就可以分离出各个分类：\nkey = i.strip().replace('\\n', '').split(' ')\n二、接下来就是保存到mysql数据库\n把电影分类保存在mysql数据库以便下面进行数据分析，这里我们使用到pymysql来连接mysql数据库,首先我们需要在mysql数据库建好表：\n\n然后我们通过pymysql把数据保存到数据库中，代码如下：首先要连接数据库：\n# 连接mysql数据库\nconn = pymysql.connect(host = 'localhost', user = 'root', passwd = '2014081029', db = 'mysql', charset = 'utf8')  # user为数据库的名字，passwd为数据库的密码，一般把要把字符集定义为utf8，不然存入数据库容易遇到编码问题\ncur = conn.cursor()  # 获取操作游标\ncur.execute('use douban')  # 使用douban这个数据库\n在保存到数据库之前，我们还有一个需要做得，那就是把250部电影的分类汇总数量，所以我们定义了一个字典来统计电影分类的个数，这里的代码是get_page函数的一部分,代码如下：\n    for i in content[1::2]:\n        print(str(i).strip().replace('\\n\\r', ''))\n        # print(str(i).split('/'))\n        i = str(i).split('/')\n        i = i[len(i) - 1]\n        key = i.strip().replace('\\n', '').split(' ')\n        print(key)\n        for i in key:\n            if i not in douban.keys():\n                douban[i] = 1\n            else:\n                douban[i] += 1\n然后定义一个保存函数，执行插入操作，如果出现插入失败，就执行回滚操作，还有记得在操作完成之后，使用conn.close()和cur.close()来关闭数据库连接,代码如下：\n\n    def save_mysql(douban):\n        print(douban)  # douban在主函数中定义的字典\n        for key in douban:\n            print(key)\n            print(douban[key])\n            if key != '':\n                try:\n                    sql = 'insert douban(类别, 数量) value(' + \"\\'\" + key + \"\\',\" + \"\\'\" + str(douban[key]) + \"\\'\" + ');'\n                    cur.execute(sql)\n                    conn.commit()\n                except:\n                    print('插入失败')\n                    conn.rollback()\n\n三、使用matplotlib进行数据可视化操作\n首先，从数据库中把电影分类和每个分类的数量分别存入一个列表中，然后使用matplotlib进行可视化操作，具体如下：\n\n    def pylot_show():\n        sql = 'select * from douban;'  \n        cur.execute(sql)\n        rows = cur.fetchall()   # 把表中所有字段读取出来\n        count = []   # 每个分类的数量\n        category = []  # 分类\n    \n        for row in rows:\n            count.append(int(row[2]))   \n            category.append(row[1])\n    \n        y_pos = np.arange(len(category))    # 定义y轴坐标数\n        plt.barh(y_pos, count, align='center', alpha=0.4)  # alpha图表的填充不透明度(0~1)之间\n        plt.yticks(y_pos, category)  # 在y轴上做分类名的标记\n    \n        for count, y_pos in zip(count, y_pos):\n            # 分类个数在图中显示的位置，就是那些数字在柱状图尾部显示的数字\n            plt.text(count, y_pos, count,  horizontalalignment='center', verticalalignment='center', weight='bold')  \n        plt.ylim(+28.0, -1.0) # 可视化范围，相当于规定y轴范围\n        plt.title(u'豆瓣电影250')   # 图表的标题\n        plt.ylabel(u'电影分类')     # 图表y轴的标记\n        plt.subplots_adjust(bottom = 0.15) \n        plt.xlabel(u'分类出现次数')  # 图表x轴的标记\n        plt.savefig('douban.png')   # 保存图片\n\n下面说明一下matplotlib的一些简单使用，首先我们要导入matplotlib和numpy的包\nimport numpy as np\nimport matplotlib.pyplot as plt\n这次可视化是柱状图，这里给出brah()函数的定义：\nbarh()主要功能：做一个横向条形图，横向条的矩形大小为: left, left + width, bottom, bottom + height参数：barh ( bottom , width , height =0.8, left =0, **kwargs )返回类型：一个 class 类别， matplotlib.patches.Rectangle**实例参数说明：\n\nbottom: Bars 的垂直位置的底部边缘\nwidth: Bars 的长度可选参数：\nheight: bars 的高度\nleft: bars 左边缘 x 轴坐标值\ncolor: bars 颜色\nedgecolor: bars 边缘颜色\nlinewidth: bar 边缘宽度;None 表示默认宽度;0 表示不 i 绘制边缘\nxerr: 若不为 None,将在 bar 图上生成 errobars\nyerr: 若不为 None,将在 bar 图上生成 errobars\necolor: 指定 errorbar 颜色\ncapsize: 指定 errorbar 的顶部(cap)长度\nalign: ‘edge’ (默认) | ‘center’:‘edge’以底部为准对齐;‘center’以 y 轴作为中心\nlog: [False|True] False (默认),若为 True,使用 log 坐标\n\n然后就可以显示出图片来了\n\n源码在这里：\n# -*- coding: utf-8 -*-\n# !/usr/bin/env python\n\nfrom lxml import etree\nimport requests\nimport pymysql\nimport matplotlib.pyplot as plt\nfrom pylab import *\nimport numpy as np\n\n# 连接mysql数据库\nconn = pymysql.connect(host = 'localhost', user = 'root', passwd = '2014081029', db = 'mysql', charset = 'utf8')\ncur = conn.cursor()\ncur.execute('use douban')\n\ndef get_page(i):\n    url = 'https://movie.douban.com/top250?start={}&filter='.format(i)\n\n    html = requests.get(url).content.decode('utf-8')\n\n    selector = etree.HTML(html)\n\n    content = selector.xpath('//div[@class=\"info\"]/div[@class=\"bd\"]/p/text()')\n    print(content)\n\n    for i in content[1::2]:\n        print(str(i).strip().replace('\\n\\r', ''))\n        # print(str(i).split('/'))\n        i = str(i).split('/')\n        i = i[len(i) - 1]\n        # print('zhe' +ｉ)\n        # print(i.strip())\n        # print(i.strip().split(' '))\n        key = i.strip().replace('\\n', '').split(' ')\n        print(key)\n        for i in key:\n            if i not in douban.keys():\n                douban[i] = 1\n            else:\n                douban[i] += 1\n\ndef save_mysql():\n    print(douban)\n    for key in douban:\n        print(key)\n        print(douban[key])\n        if key != '':\n            try:\n                sql = 'insert douban(类别, 数量) value(' + \"\\'\" + key + \"\\',\" + \"\\'\" + str(douban[key]) + \"\\'\" + ');'\n                cur.execute(sql)\n                conn.commit()\n            except:\n                print('插入失败')\n                conn.rollback()\n\n\ndef pylot_show():\n    sql = 'select * from douban;'\n    cur.execute(sql)\n    rows = cur.fetchall()\n    count = []\n    category = []\n\n    for row in rows:\n        count.append(int(row[2]))\n        category.append(row[1])\n    print(count)\n    y_pos = np.arange(len(category))\n    print(y_pos)\n    print(category)\n    colors = np.random.rand(len(count))\n    # plt.barh()\n    plt.barh(y_pos, count, align='center', alpha=0.4)\n    plt.yticks(y_pos, category)\n    for count, y_pos in zip(count, y_pos):\n        plt.text(count, y_pos, count,  horizontalalignment='center', verticalalignment='center', weight='bold')\n    plt.ylim(+28.0, -1.0)\n    plt.title(u'豆瓣电影250')\n    plt.ylabel(u'电影分类')\n    plt.subplots_adjust(bottom = 0.15)\n    plt.xlabel(u'分类出现次数')\n    plt.savefig('douban.png')\n\n\nif __name__ == '__main__':\n    douban = {}\n    for i in range(0, 250, 25):\n        get_page(i)\n    # save_mysql()\n    pylot_show()\n    cur.close()\n    conn.close()\n\n                ", "mainLikeNum": ["4 "], "mainBookmarkNum": "23"}