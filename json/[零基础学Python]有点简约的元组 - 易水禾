{"title": "[零基础学Python]有点简约的元组 - 易水禾 ", "index": "python", "content": "关于元组，上一讲中涉及到了这个名词。本讲完整地讲述它。\n\n先看一个例子：\n\n>>>#变量引用str\n>>> s = \"abc\"\n>>> s\n'abc'\n\n>>>#如果这样写，就会是...\n>>> t = 123,'abc',[\"come\",\"here\"]\n>>> t\n(123, 'abc', ['come', 'here'])\n\n\n上面例子中看到的变量t，并没有报错，也没有“最后一个有效”，而是将对象做为一个新的数据类型：tuple（元组），赋值给了变量t。\n\n元组是用圆括号括起来的，其中的元素之间用逗号隔开。（都是英文半角）\n\ntuple是一种序列类型的数据，这点上跟list/str类似。它的特点就是其中的元素不能更改，这点上跟list不同，倒是跟str类似；它的元素又可以是任何类型的数据，这点上跟list相同，但不同于str。\n\n>>> t = 1,\"23\",[123,\"abc\"],(\"python\",\"learn\")   #元素多样性，近list\n>>> t\n(1, '23', [123, 'abc'], ('python', 'learn'))\n\n>>> t[0] = 8　                                  #不能原地修改，近str\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: 'tuple' object does not support item assignment\n\n>>> t.append(\"no\")  \nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: 'tuple' object has no attribute 'append'\n    >>> \n\n\n从上面的简单比较似乎可以认为，tuple就是一个融合了部分list和部分str属性的杂交产物。此言有理。\n\n像list那样访问元素和切片\n\n先复习list中的一点知识：\n\n>>> one_list = [\"python\",\"qiwsir\",\"github\",\"io\"]\n>>> one_list[2]\n'github'\n>>> one_list[1:]         \n['qiwsir', 'github', 'io']\n>>> for word in one_list:\n...     print word\n... \npython\nqiwsir\ngithub\nio\n>>> len(one_list)\n4\n\n\n下面再实验一下，上面的list如果换成tuple是否可行\n\n>>> t\n(1, '23', [123, 'abc'], ('python', 'learn'))\n>>> t[2]\n[123, 'abc']\n>>> t[1:]\n('23', [123, 'abc'], ('python', 'learn'))\n>>> for every in t:\n...     print every\n... \n1\n23\n[123, 'abc']\n('python', 'learn')\n>>> len(t)\n4\n\n>>> t[2][0]     #还能这样呀，哦对了，list中也能这样\n123\n>>> t[3][1]\n'learn'\n\n\n所有在list中可以修改list的方法，在tuple中，都失效。\n\n分别用list()和tuple()能够实现两者的转化:\n\n>>> t         \n(1, '23', [123, 'abc'], ('python', 'learn'))\n>>> tls = list(t)                           #tuple-->list\n>>> tls\n[1, '23', [123, 'abc'], ('python', 'learn')]\n\n>>> t_tuple = tuple(tls)                    #list-->tuple\n>>> t_tuple\n(1, '23', [123, 'abc'], ('python', 'learn'))\n\n\ntuple用在哪里？\n\n既然它是list和str的杂合，它有什么用途呢？不是用list和str都可以了吗？\n\n在很多时候，的确是用list和str都可以了。但是，看官不要忘记，我们用计算机语言解决的问题不都是简单问题，就如同我们的自然语言一样，虽然有的词汇看似可有可无,用别的也能替换之,但是我们依然需要在某些情况下使用它们.\n\n一般认为,tuple有这类特点,并且也是它使用的情景:\n\n\nTuple 比 list 操作速度快。如果您定义了一个值的常量集，并且唯一要用它做的是不断地遍历它，请使用 tuple 代替 list。\n如果对不需要修改的数据进行 “写保护”，可以使代码更安全。使用 tuple 而不是 list 如同拥有一个隐含的 assert 语句，说明这一数据是常量。如果必须要改变这些值，则需要执行 tuple 到 list 的转换 (需要使用一个特殊的函数)。\nTuples 可以在 dictionary 中被用做 key，但是 list 不行。实际上，事情要比这更复杂。Dictionary key 必须是不可变的。Tuple 本身是不可改变的，但是如果您有一个 list 的 tuple，那就认为是可变的了，用做 dictionary key 就是不安全的。只有字符串、整数或其它对 dictionary 安全的 tuple 才可以用作 dictionary key。\nTuples 可以用在字符串格式化中，后面会用到。\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}