{"title": "Python语法糖——遍历列表时删除元素 - Geek情怀 ", "index": "语法糖,python,List", "content": "Python的for可以遍历一个List，但是在遍历的过程中删除元素常常会得到意想不到的结果甚至程序出现异常，例如：\nlst = [1, 1, 0, 2, 0, 0, 8, 3, 0, 2, 5, 0, 2, 6]\n\nfor item in lst:\n    if item == 0:\n        lst.remove(item)\nprint lst\n\n输出： [1, 1, 2, 8, 3, 2, 5, 0, 2, 6]\n这段代码的本意是想删除列表中元素为 0 的项，但实际跑起来并不是那个结果。\n再看下面这个例子，利用索引来遍历删除列表中的元素：\nfor item in range(len(lst)):\n    if lst[item] == 0:\n        del lst[item]\nprint lst\n\n输出： IndexError: list index out of range\n这时候就报错了，抛出了数组下标越界的异常。原因是用for发起任何形式的遍历时，它的遍历顺序都是从最初就确定的，而在遍历中删除了元素会导致当前索引的变化，这样一是会导致漏删元素，二是会导致遍历超过链表的长度。\n所以遍历一个List时要删除其中的部分元素就需要其他的解决方案。\n方法一：可以使用filter过滤返回新的List\nlst = [1, 1, 0, 2, 0, 0, 8, 3, 0, 2, 5, 0, 2, 6]\n\nlst = filter(lambda x: x != 0, lst)\nprint lst\n\n这样可以安全删除列表中值为 0 的元素了，filter包括两个参数，分别是function和list，filter把传入的函数依次作用于每个元素，然后根据返回值是True还是False来决定是保留还是丢弃该元素。\n方法二：列表解析\nlst = [x for x in lst if x != 0]\nprint lst\n\n方法三：或者遍历拷贝的List，操作原始的List\nfor item in lst[:]:\n    if item == 0:\n        lst.remove(item)\nprint lst\n\n方法四：用while循环来搞定，每次循环都先会判断 0 是否在列表中\nwhile 0 in lst:\n    lst.remove(0)\nprint lst\n\n方法五：倒序循环遍历\nfor item in range(len(lst) - 1, -1, -1):\n    if lst[item] == 0:\n        del lst[item]\nprint lst\n\n倒序是最geek的解决办法，但是倒序的代码可读性差，推荐用filter，这样写出来的代码更Pythonic。\n\n                ", "mainLikeNum": ["3 "], "mainBookmarkNum": "7"}