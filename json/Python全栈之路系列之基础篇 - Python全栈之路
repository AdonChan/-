{"title": "Python全栈之路系列之基础篇 - Python全栈之路 ", "index": "python", "content": "Python的诞生\nPython是著名的\"龟叔\"Guido van Rossum(吉多·范罗苏姆)在1989年圣诞节期间，为了打发无聊的圣诞节而编写的一个编程语言。\n\nPython语法很多来自C，但又受到ABC语言的强烈影响，来自ABC语言的一些规定直到今天还富有争议，比如强制缩进，但这些语法规定让Python变得更易读。\nGuido van Rossum著名的一句话就是Life is short, you need Python，译为：人生苦短，我用Python，一直到现在，无论在任何介绍Python这门强大的语言时，都会有提到。\n截至到目前2017年1月6日，Python在Tiobe的排名还是很靠前的，而且近几年来说Python上升的趋势还是特别稳定的，这两年一直保持在第四位，甚至已经超越PHP和C#。\n\n查询网站：http://www.tiobe.com/tiobe_in...\n我们还可以再解释下下通过import this查看Python语言的设计哲学：\n>>> import this\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\nPython唯一的缺点就是他的性能，它达不到像C和C++这种编译性语言运行的那么快，但是我们通常都不需要考虑这个问题，因为有PYPY，它的运行速度比默认的Cpython要快很多。\n在Win10下安装Python3\n下载Python解释器\n64位下载地址：https://www.python.org/ftp/py...32位下载地址：https://www.python.org/ftp/py...\n安装Python解释器\n下载下来之后双击安装，在安装的时候稍微需要注意一下就是需要修改默认的安装路径和和自动注册到系统环境变量勾选上。\n\n\n然后就可以点击Install按钮进行安装了。\n\n因为我们已经勾选自动注册环境变量，所以在这里就不需要修改环境变量，直接运行即可；\nDOS测试\n右键开始菜单选择命令提示符，打开CMD窗口，\n\n\n在cmd窗口中输入python -V指令查看安装的Python版本：\n\n如果你得到的结果和我一样，那么你就安装好了windows下的python环境。\n因为在Mac os和其他unix和Linux版本下都已经自带了Python，这里我就不做太多介绍了。\nPython实现方式\nPython身为一门编程语言，但是他是有多种实现方式的，这里的实现指的是符合Python语言规范的Python解释程序以及标准库等。\nPython的实现方式主要分为三大类\n\nCpython\nJpython\nIronPython\n\nCPython\nCpython是默认的Python解释器，这个名字根据它是可移植的ANSI C语言代码编写而成的这事实而来的。\n当执行Python执行代码的时候，会启用一个Python解释器，将源码(.py)文件读取到内存当中，然后编译成字节码(.pyc)文件，最后交给Python的虚拟机(PVM)逐行解释并执行其内容，然后释放内存，退出程序。\n\n当第二次在执行当前程序的时候，会先在当前目录下寻找有没有同名的pyc文件，如果找到了，则直接进行运行，否则重复上面的工作。\npyc文件的目的其实就是为了实现代码的重用，为什么这么说呢？因为Python认为只要是import导入过来的文件，就是可以被重用的，那么他就会将这个文件编译成pyc文件。\npython会在每次载入模块之前都会先检查一下py文件和pyc文件的最后修改日期，如果不一致则重新生成一份pyc文件，否则就直接读取运行。\nJython\nJython是个Python的一种实现方式，Jython编译Python代码为Java字节码，然后由JVM（Java虚拟机）执行，这意味着此时Python程序与Java程序没有区别，只是源代码不一样。此外，它能够导入和使用任何Java类像Python模块。\nIronPython\nIronPython是Python的C#实现，并且它将Python代码编译成C#中间代码（与Jython类似），然后运行，它与.NET语言的互操作性也非常好。\nPython简单入门\nHello Word\n一般情况下程序猿的第一个小程序都是简单的输出Hello Word!，当然Python也不例外，下面就让我们来用Python输出一句Hello Word!吧！\n创建一个以py结尾的文件\n[root@ansheng python_code]# touch hello.py\n其内容为\n#!/usr/vin/env python\n\nprint \"Hello Word!\"\n用Python执行\n[root@ansheng python_code]# python hello.py\nHello Word!\n输出的内容为Hello Word!，OK，你的第一次一句木有了^_^\n指定Python解释器\n在Python文件的开头加入以下代码就制定了解释器。\n第一种方式\n#!/usr/bin/python\n告诉shell这个脚本用/usr/bin/python执行\n第二种方式\n#!/usr/bin/env python\n在操作系统环境不同的情况下指定执行这个脚本用python来解释。\n执行Python文件\n执行Python文件的方式有两种\n例如hello.py的文件内容为\n#!/usr/bin/env python\nprint \"Life is short, you need Pytho\"\n第一种执行方式\n[root@ansheng python_code]# python my.py\nLife is short, you need Pytho\n如果使用python my.py这种方式执行，那么#!/usr/bin/python会被忽略，等同于注释。\n第二种执行方式\n[root@ansheng python_code]# chmod +x my.py \n[root@ansheng python_code]# ./my.py \nLife is short, you need Pytho\n如果使用./my.py 来执行，那么#!/usr/bin/python则是指定解释器的路径，在执行之前my.py这个文件必须有执行权限。\npython my.py 实则就是在my.py文件顶行加入了#!/usr/bin/python\n指定字符编码\npython制定字符编码的方式有多种，而编码格式是要写在解释器的下面的，常用的如下面三种:\n第一种\n#!/usr/bin/env python\n# _*_ coding:utf-8 _*_\n第二种\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n第三种\n#!/usr/bin/env python\n# coding:utf-8\n代码注释\n单行注释\n单行注释只需要在代码前面加上#号\n# 注释内容\n多行注释\n多行注释用三个单引号或者三个双引号躲起来\n\"\"\"\n注释内容\n\"\"\"\n实例\npy脚本原文件内容\n#!/usr/bin/env python\n# _*_ coding:utf-8 _*_\n\nprint \"My name is Ansheng\"\nprint \"I'm a Python developer\"\nprint \"My blog URL: https://blog.ansheng.me\"\nprint \"Life is short, you need Pytho\"\n源文件输出的内容\n[root@ansheng python_code]# python note.py \nMy name is Ansheng\nI'm a Python developer\nMy blog URL: https://blog.ansheng.me\nLife is short, you need Pytho\n单行注释演示\n代码改为\n#!/usr/bin/env python\n# _*_ coding:utf-8 _*_\n\nprint \"My name is Ansheng\"\nprint \"I'm a Python developer\"\nprint \"My blog URL: https://blog.ansheng.me\"\n#print \"Life is short, you need Pytho\"\n执行结果\n[root@ansheng python_code]# python note.py \nMy name is Ansheng\nI'm a Python developer\nMy blog URL: https://blog.ansheng.me\n结果Life is short, you need Pythoprint出来\n多行注释演示\n代码改为\n#!/usr/bin/env python\n# _*_ coding:utf-8 _*_\n\nprint \"My name is Ansheng\"\n\"\"\"\nprint \"I'm a Python developer\"\nprint \"My blog URL: https://blog.ansheng.me\"\nprint \"Life is short, you need Pytho\"\n\"\"\"\n执行结果\n[root@ansheng python_code]# python note.py \nMy name is Ansheng\n结果I'm a Python developer、My blog URL: https://blog.ansheng.me、Life is short, you need Pytho都没有print出来\nprint输出多行\n既然用单个单引号或者多引号可以注释多行，那么能不能print多行呢？\n代码\n#!/usr/bin/env python\n# _*_ coding:utf-8 _*_\n\nprint \"\"\"\nMy name is Ansheng\nI'm a Python developer\nMy blog URL: https://blog.ansheng.me\nLife is short, you need Python.\n\"\"\"\n执行结果\n[root@ansheng python_code]# python note.py \n\nMy name is Ansheng\nI'm a Python developer\nMy blog URL: https://blog.ansheng.me\nLife is short, you need Python.\n\n显然这是可以得 ^_^\n变量\n变量的命名规则:\n\n变量名只能包含数字、字幕、下划线\n不能以数字开头\n变量名不能使python内部的关键字\n\nPython内部已占用的关键字\n['and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'exec', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'not', 'or', 'pass', 'print', 'raise', 'return', 'try', 'while', 'with', 'yield']\n定义变量\n>>> name = \"ansheng\"\n>>> print name\nansheng\n基本的数据类型\n字符串(str)\n定义字符串类型是需要用单引号或者双引号包起来的\n>>> name = \"ansheng\"\n>>> print(type(name))\n<type 'str'>\n或者\n>>> name = 'ansheng'\n>>> print(type(name))\n<type 'str'>\n数字(int)\n整数类型定义的时候变量名后面可以直接跟数字，不要用双引号包起来。\n>>> age = 20\n>>> print(type(age))\n<type 'int'>\n布尔值\n布尔值就只有True(真)，Flash(假)\n>>> if True:\n...  print(\"0\")\n... else:\n...  print(\"1\")\n...\n0\n解释：如果为真则输出0，否则输出1\n流程控制\nif语句\nif语句是用来检查一个条件：如果条件为真(true)，我们运行一个语句块（你为if块），否则(else)，我们执行另一个语句块（称为else块），else子语句是可选的。\n单条件\n例题：如果num变量大于1，那么就输出num大，否则就输出num小，num值为5。\n代码\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\nnum = 5\n\nif num > 1:\n print(\"num大\")\nelse:\n print(\"num小\")\n结果\n[root@ansheng python_code]# python num.py\nnum大\n多条件\n例题：如果num变量大于5，那么就输出num大于5，如果num变量小于5，那么就输出num小于5，否则就输出num等于5，num值为5。\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\nnum = 5\n\nif num > 5:\n print(\"num大于5\")\nelif num < 5:\n print(\"num小于5\")\nelse:\n print(\"num等于5\")\n结果\n[root@ansheng python_code]# python num.py\nnum等于5\nwhile循环\nwhile语句用于循环执行程序，即在某条件下，循环执行某段程序，以处理需要重复处理的相同任务。执行流程图如下\n\n实例：\n定义一个变量count，默认值为1，然后进去while循环，让其输出1-10，如果大于10则退出。\n#!/usr/bin/env python\n# _*_ coding:utf-8 _*_\n\ncount = 1\n\nprint \"Start....\"\n\nwhile count < 11:\n print \"The count is:\",count\n count += 1\n\nprint \"End....\"\n执行结果如下\n[root@ansheng python_code]# python while.py\nStart....\nThe count is: 1\nThe count is: 2\nThe count is: 3\nThe count is: 4\nThe count is: 5\nThe count is: 6\nThe count is: 7\nThe count is: 8\nThe count is: 9\nThe count is: 10\nEnd....\nbreak\n跳出当前循环体，下面代码不再执行，继续执行循环后面的代码\n实例\n#!/usr/bin/env python\n# _*_ coding:utf-8 _*_\n\ncount = 1\n\nprint \"Start....\"\n\nwhile count < 11:\n if count == 5:   #如果count等于5，那么我就退出当前循环体\n  break\n print \"The count is:\",count\n count += 1\n\nprint \"End....\"\n输出结果\n[root@ansheng python_code]# python while.py\nStart....\nThe count is: 1\nThe count is: 2\nThe count is: 3\nThe count is: 4\nEnd....\ncontinue\n跳出本次循环，继续下一次循环\n代码\n#!/usr/bin/env python\n# _*_ coding:utf-8 _*_\n\ncount = 1\n\nprint \"Start....\"\n\nwhile count < 11:\n if count == 5:        #如果count等于5，那么我就让其+1，然后不执行下面的代码，继续下一次循环\n  count += 1\n  continue\n print \"The count is:\",count\n count += 1\n\nprint \"End....\"\n输出结果\n[root@ansheng python_code]# python while.py\nStart....\nThe count is: 1\nThe count is: 2\nThe count is: 3\nThe count is: 4\nThe count is: 6\nThe count is: 7\nThe count is: 8\nThe count is: 9\nThe count is: 10\nEnd....\n条件判断\n条件判断适用于if、while等。\n等于\nif 1 == 1:\n不等于\nif 1 != 2:\n小于\nif 1 < 1\n大于\nif 1 > 1:\n并且\nif 1 == 1 and 1 > 0:\n或者\nif 2 > 1 or 2 = 2:\n永远为真\nif True:\n永远为假\nif False:\n交互式输入\nPython的交互式输入使用的是input()函数实现的，注意在Python2.7.x版本的时候可以使用raw_input()和input()函数，但是在Python3.5.x版本的时候就没有raw_input()函数了,只能够使用input()\n例题：用户在执行脚本的时候，让他输入自己的名字，然后打印出来。\n代码\n#!/usr/bin/env python\n# _*_ coding:utf-8 _*_\n\nusername = input(\"请输入你的名字：\")\nprint(\"你的名字是：\", username)\n执行结果\n[root@ansheng python_code]# python input.py\n请输入你的名字：安生   # 输入你的名字\n你的名字是： 安生      # 打印出你的名字\n练习题\n使用while循环输入1 2 3 4 5 6   8 9 10\n思路： 首先定义一个变量num,值为1,然后用while循环输出1-10的内容,在while循环内加入if语句,判断当前的值如果是7,那么就让7+1,加完之后跳出本次循环,不执行下面的print,7跳出本次循环之后,第二轮的时候num就是8了,而不是7.\n代码\n#!/use/bin/env python\n# _*_ coding:utf-8 _*_\n\nnum = 1\nwhile num < 11:\n    if num == 7:\n        num += 1\n        continue\n    print(num)\n    num += 1\n输出内容为：\n1\n2\n3\n4\n5\n6\n8\n9\n10\n求1-100的所有数的和\n思路：定义两个变量，分别是count和num，利用while语句循环输出1-100，然后每次就让count+num，这样循环一百次之后相加的结果就是1到100的和了。\n代码\n#!/use/bin/env python\n# _*_ coding:utf-8 _*_\n\ncount = 1\nnum = 0\nwhile count < 101:\n    num = num + count\n    count += 1\n\nprint(num)\n输出结果\n5050\n输出 1-100 内的所有奇数\n思路： 利用%整数相除的余，如果余数是1那么当前的count就是奇数，如果余0，那么当前的count就是偶数。\n代码\n#!/use/bin/env python\n# _*_ coding:utf-8 _*_\n\ncount = 1\n\nwhile count < 101:\n    num = count % 2\n    if num == 1:\n        print(count)\n    count += 1\n结果自己执行看\n输出 1-100 内的所有偶数\n代码\n#!/use/bin/env python\n# _*_ coding:utf-8 _*_\n\ncount = 1\n\nwhile count < 101:\n    num = count % 2\n    if num == 0:\n        print(count)\n    count += 1\n结果自己执行看\n求1-2+3-4+5 ... 99的所有数的和\n#!/use/bin/env python\n# _*_ coding:utf-8 _*_\n\ncount = 1\n\nwhile count < 100:\n    if count == 1:\n        num = count\n    elif count % 2 == 1:\n        num = num + count\n    elif count % 2 == 0:\n        num = num - count\n    count += 1\n\nprint(num)\n结果\n50 \n用户登陆\n需求：写一个脚本，用户执行脚本的时候输入用户名和密码，如果用户米或者密码连续三次输入错误则退出，如果输入正确则显示登陆成功，然后退出。\n用户名和密码自己定义\n图解用户登录流程\n\n代码\n#!/use/bin/env python\n# _*_ coding:utf-8 _*_\nimport getpass\n\n# username：ansheng\n# userpass：666666\n\ncount = 3\n\nwhile count > 0:\n    username = input(\"User Name:\")\n    userpass = getpass.getpass(\"pass:\")\n    if username == \"ansheng\" and userpass == \"666666\":\n        print \"User:\", username, \",login successful!\"\n        break\n    else:\n        count -= 1\n        if count != 0:\n            print \"Login failed\", count\n        else:\n            print(\"The maximum number of login!\")\n登陆成功演示\nUser Name:ansheng  #输入用户名\npass:              #输入密码，密码是看不到的，因为调用了getpass模块\nUser: ansheng ,login successful!  #显示用户ansheng，登陆成功\n登陆失败演示\nUser Name:as\npass:\nLogin failed 2\nUser Name:an\npass:\nLogin failed 1\nUser Name:ansea\npass:\nThe maximum number of login!\n账号或密码连续三次输入错误则退出程序，并且每次提醒用户升序多少次登陆的机会。\n原文链接Python全栈之路系列文章\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "12"}