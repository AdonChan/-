{"title": "设计模式--抽象模式 - 个人文章 ", "index": "python", "content": "\n1.子类 class， 工厂子类class， 调用工厂class\n2.子类需要抽象类定义子类模式， 工厂类需要定义抽象类规范模式。 每一个工厂类管理    \n 管理类管理工厂类。\n3.应用：最复杂的模式：一个接口有很多的调用实例，   调用实例可以分为不同情况，不> >      同的工厂进行管理。\n4.总起来看，出口要简洁统一，内部分别管理。\n class类的功能要单一，每个只做一种功能，管理一类数据，定义class要不怕>多，通过\n上级管理起来  5.提升：所有的子class，工厂class，需要定义抽象类，规范格式。\n\nimport random\n\"\"\"\n\n    \n                         \n\"\"\"\n\nclass Dog:\n    def speak(self):\n        return 'whoof'\n    def __str__(self):\n        return 'dog'\n\nclass Cat:\n    def speak(self):\n        return 'meow'\n    def __str__(self):\n        return 'cat'\n\nclass DogFactory:\n    def get_pet(self):\n        return Dog()\n    def get_food(self):\n        return 'dog food'\n\nclass CatFactory:\n    def get_pet(self):\n        return Cat()\n    def get_food(self):\n        return 'cat food'\n\nclass PetFactory:\n    def __init__(self,pet_factory=None):\n        self.pet_factory=pet_factory\n    def show_pet(self):\n        pet=self.pet_factory.get_pet()\n        print(\"This is a lovely\", pet)\n        print('speak   ==>',pet.speak())\n        print('get_food==>',self.pet_factory.get_food())\n\n# Show pets with various factories\n\ndef get_factory():\n\n    \"\"\"Let's be dynamic!\"\"\"\n\n    return random.choice([DogFactory, CatFactory])()\n\n\n\nshop = PetFactory()\n\nfor i in range(3):\n\n    shop.pet_factory = get_factory()\n\n    shop.show_pet()\n\n    print(\"=\" * 10)\n\n\n\n\n\n\n\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}