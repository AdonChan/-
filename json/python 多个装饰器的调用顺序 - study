{"title": "python 多个装饰器的调用顺序 - study ", "index": "python,装饰器", "content": "前言\n装饰器是程序开发中经常会用到的一个功能，也是python语言开发的基础知识，如果能够在程序中合理的使用装饰器，不仅可以提高开发效率，而且可以让写的代码看上去显的高大上^_^\n使用场景\n可以用到装饰器的地方有很多，简单的举例如以下场景\n\n引入日志\n函数执行时间统计\n执行函数前预备处理\n执行函数后清理功能\n权限校验等场景\n缓存\n\n装饰器案例\ndef user_login(fun):\n    def islogin(request,*args,**kwargs):\n        context = {}\n        if request.session.has_key('uname'):\n            context['uname'] = request.session.get('uname')\n        else:\n            context['uname'] = 'None'\n        return fun(request,context,*args,**kwargs)\n    return islogin\n\n@user_login\ndef ucOrder(request,context,pIndex):\n    '''\n    获取数据\n    处理数据\n    传递到页面上去\n以上是一个简单电商应用中使用装饰器的案例，其中 ucOrder函数是是用户需要登录后才能被执行到的。如果不使用装饰器的话，普通的做法可能是在 ucOrder中写一堆校验代码来判断用户是否登录，然后决定后面的执行逻辑，这样比较麻烦。\n那么使用装饰器之后就比较简单了，只需要按照装饰器的使用格式，在ucOrder函数上面加上@user_login，那么python解释器在运行的时候，就会从上到下解释代码，先执行user_login函数，并且将ucOrder作为user_login函数的参数传入进去，即等价于user_login(ucOrder),这样就起到了一个校验用户是否登录，从而决定是否执行ucOrder函数的功能\n多个装饰器使用的调用顺序\ndef one(func):\n    print('----1----')\n    def two():\n        print('----2----')\n        func()\n    return two\n\ndef a(func):\n    print('----a----')\n    def b():\n        print('----b----')\n        func()\n    return b\n\n@one\n@a\ndef demo():\n    print('----3----')\n\ndemo()\n执行结果：\n/usr/bin/python2.7 /home/python/Desktop/tornadoProject/one.py\n----a----\n----1----\n----2----\n----b----\n----3----\n可以从执行结果中看到，如果是使用多个装饰器，它的执行顺序还是有点怪异的的，为什么会这样呢？\n关于这个问题，有更好的文章可以解释，具体见以下链接\nPython 装饰器执行顺序迷思\n其他参考文章：理解 Python 装饰器看这一篇就够了\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "6"}