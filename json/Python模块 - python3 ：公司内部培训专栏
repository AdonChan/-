{"title": "Python模块 - python3 ：公司内部培训专栏 ", "index": "python", "content": "Python模块\n上一篇文章：Python类的定义与操作下一篇文章：Python设计模式\n\n1、导入\n导入整个模块：import 模块名导入特定的函数：from 模块名 import 特定函数\n使用as给函数重命名：from 模块名 import 特定函数 as 新名称\n使用ad给模块冲命名 import 模块名 as 新名词\n导入模块的所有函数：from 模块名 import *\n\n2、Python解析器对模块位置的搜索顺序\n1.当前目录。2.搜索在shell变量PYTHONPATH下的所有目录\n3.Python默认路径，例如UNIX下：，默认路径一般为：/usr/local/lib/python/\n\n提示：模块搜索路径存储在system模块的sys.path变量中，该变量包含当前目录、PYTHONPATH、安装过程决定的默认路径\n实例：\nimport sys\nfor item in sys.path:\n    print(item)\n结果：\n/Users/zhaolixiang/Desktop/python/test1/模块\n/Users/zhaolixiang/Desktop/python/test1\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python37.zip\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/lib-dynload\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages\n/Applications/PyCharm.app/Contents/helpers/pycharm_matplotlib_backend\n3、自定义模块、__name__\n自定义模块：就是自己写一个py文件啦，别紧张，没那么复杂__name__:通过判断这个变量是否等于__main__，来判断该模块（py文件）是被别否认模块引用，还是自己直接调用，通过该方法可以在开发阶段进行单个模块测试。\n\n实例：\nMarkA.py\ndef funA():\n    print(\"MarkA---funA\")\n\n#用来进行测试\nif __name__=='__main__':\n    print(\"MarkA测试调用\")\n    funA()\nMarkB.py\nimport MarkA as markA\n\ndef funB():\n    print(\"MarkB--funB\")\n    markA.funA()\n\nif __name__==\"__main__\":\n    funB()\n运行MarkB的结果：\nMarkB--funB\nMarkA---funA\n4、__all__\n当该变量列表存在时，只有在该列表中存在的属性或者方法才能被引用访问\n实例：\nAllA.py\n__all__=[\"A\",\"testA\"]\n__all__=[\"A\",\"testA\"]\nclass A:\n    def testA(self):\n        print(\"A---testA\")\nclass B:\n    def testB(self):\n        print(\"B---testB\")\ndef testA():\n    print(\"testA\")\ndef testB():\n    print(\"testB\")\n\nAllB.py\nfrom AllA import *\na=A()\na.testA()\n\ntestA()\n\n'''\n下面调用会出现异常，因为只有在__init__中的元素才能被导入\nb=B()\nb.testB()\n\ntestB()\n\n'''\n\n运行AllB.py，结果为：\nA---testA\ntestA\n5、包\n在包含多个.py文件的文件夹中，新建一个__init__.py文件，此时这个文件夹就成了包。可以在这个文件中定义__all__来决定包中哪些可以被其它模块导入。\n\n6.模块发布\n打包前项目概况：\nmakeA.py:\ndef testA():\n    print(\"testA\")\nmakeB.py:\ndef testB():\n    print(\"testB\")\nsetup.py:\nfrom distutils.core import setup\n#打包的详细信息\nsetup(name=\"mark\",version=\"1.0\",description=\"mark's module\",\n      author=\"mark\",py_modules=[\"makeA\",\"makeB\"])\n\n构建模块\npython setup.py build\n构建后的目录结构：\n\n生成发布压缩包\npython setup.py sdist\n执行后的目录结构：\n\ndist目录下的mark-1.0.tar.gz就是打包后的文件\n7、模块安装与使用\n1、找到模块安装包2、解压\n3、进入文件夹\n4、执行：python setup.py install\n也可以指定安装路径：python setup.py install --prefix=安装路径\n5、s会用from import就可以完成引用使用了\n\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "1"}