{"title": "Python 数据库骚操作 -- MongoDB - 个人文章 ", "index": "redis,mysql,mongodb,python", "content": "\n前言\nMongoDB GUI 工具\nPyMongo（同步）\nMotor（异步）\n后记\n\n前言\n最近这几天准备介绍一下 Python 与三大数据库的使用，这是第一篇，首先来介绍 MongoDB 吧，，走起！！\nMongoDB GUI 工具\n首先介绍一款 MongoDB 的 GUI 工具 Robo 3T，初学 MongoDB 用这个来查看数据真的很爽。可以即时看到数据的增删改查，不用操作命令行来查看。\n\nPyMongo（同步）\n可能大家都对 PyMongo 比较熟悉了，这里就简单介绍它的增删改查等操作。\n连接\n# 普通连接\nclient = MongoClient('localhost', 27017)\nclient = MongoClient('mongodb://localhost:27017/')\n#\n# 密码连接\nclient = MongoClient('mongodb://username:password@localhost:27017/dbname')\ndb = client.zfdb\n# db = client['zfdb']\n\ntest = db.test\n增\n# 增加一条记录\nperson = {'name': 'zone','sex':'boy'}\nperson_id = test.insert_one(person).inserted_id\nprint(person_id)\n# 批量插入\npersons = [{'name': 'zone', 'sex': 'boy'}, {'name': 'zone1', 'sex': 'boy1'}]\nresult = test.insert_many(persons)\nprint(result.inserted_ids)\n删\n# 删除单条记录\nresult1 = test.delete_one({'name': 'zone'})\npprint.pprint(result1)\n# 批量删除\nresult1 = test.delete_many({'name': 'zone'})\npprint.pprint(result1)\n改\n# 更新单条记录\nres = test.update_one({'name': 'zone'}, {'$set': {'sex': 'girl girl'}})\nprint(res.matched_count)\n# 更新多条记录\ntest.update_many({'name': 'zone'}, {'$set': {'sex': 'girl girl'}})\n查\n# 查找多条记录\npprint.pprint(test.find())\n\n# 添加查找条件\npprint.pprint(test.find({\"sex\": \"boy\"}).sort(\"name\"))\n聚合\n如果你是我的老读者，那么你肯定知道我之前的骚操作，就是用爬虫爬去数据之后，用聚合统计结合可视化图表进行数据展示。\naggs = [\n    {\"$match\": {\"$or\" : [{\"field1\": {\"$regex\": \"regex_str\"}}, {\"field2\": {\"$regex\": \"regex_str\"}}]}}, # 正则匹配字段\n    {\"$project\": {\"field3\":1, \"field4\":1}},# 筛选字段 \n    {\"$group\": {\"_id\": {\"field3\": \"$field3\", \"field4\":\"$field4\"}, \"count\": {\"$sum\": 1}}}, # 聚合操作\n]\n\nresult = test.aggregate(pipeline=aggs)\n例子：以分组的方式统计 sex 这个关键词出现的次数，说白了就是统计有多少个男性，多少个女性。\ntest.aggregate([{'$group': {'_id': '$sex', 'weight': {'$sum': 1}}}])\n聚合效果图：（秋招季，用Python分析深圳程序员工资有多高？)文章配图）\nMotor（异步）\nMotor 是一个异步实现的 MongoDB 存储库 Motor 与 Pymongo 的配置基本类似。连接对象就由 MongoClient 变为 AsyncIOMotorClient 了。下面进行详细介绍一下。\n连接\n# 普通连接\nclient = motor.motor_asyncio.AsyncIOMotorClient('mongodb://localhost:27017')\n# 副本集连接\nclient = motor.motor_asyncio.AsyncIOMotorClient('mongodb://host1,host2/?replicaSet=my-replicaset-name')\n# 密码连接\nclient = motor.motor_asyncio.AsyncIOMotorClient('mongodb://username:password@localhost:27017/dbname')\n# 获取数据库\ndb = client.zfdb\n# db = client['zfdb']\n# 获取 collection\ncollection = db.test\n# collection = db['test']\n增加一条记录\n添加一条记录。\nasync def do_insert():\n     document = {'name': 'zone','sex':'boy'}\n     result = await db.test_collection.insert_one(document)\n     print('result %s' % repr(result.inserted_id))\nloop = asyncio.get_event_loop()\nloop.run_until_complete(do_insert())\n\n批量增加记录\n添加结果如图所暗示。\nasync def do_insert():\n    result = await db.test_collection.insert_many(\n        [{'name': i, 'sex': str(i + 2)} for i in range(20)])\n    print('inserted %d docs' % (len(result.inserted_ids),))\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(do_insert())\n\n\n查找一条记录\nasync def do_find_one():\n    document = await db.test_collection.find_one({'name': 'zone'})\n    pprint.pprint(document)\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(do_find_one())\n\n查找多条记录\n查找记录可以添加筛选条件。\nasync def do_find():\n    cursor = db.test_collection.find({'name': {'$lt': 5}}).sort('i')\n    for document in await cursor.to_list(length=100):\n        pprint.pprint(document)\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(do_find())\n\n# 添加筛选条件，排序、跳过、限制返回结果数\nasync def do_find():\n    cursor = db.test_collection.find({'name': {'$lt': 4}})\n    # Modify the query before iterating\n    cursor.sort('name', -1).skip(1).limit(2)\n    async for document in cursor:\n        pprint.pprint(document)\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(do_find())\n\n统计\nasync def do_count():\n    n = await db.test_collection.count_documents({})\n    print('%s documents in collection' % n)\n    n = await db.test_collection.count_documents({'name': {'$gt': 1000}})\n    print('%s documents where i > 1000' % n)\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(do_count())\n\n替换\n替换则是将除 id 以外的其他内容全部替换掉。\nasync def do_replace():\n    coll = db.test_collection\n    old_document = await coll.find_one({'name': 'zone'})\n    print('found document: %s' % pprint.pformat(old_document))\n    _id = old_document['_id']\n    result = await coll.replace_one({'_id': _id}, {'sex': 'hanson boy'})\n    print('replaced %s document' % result.modified_count)\n    new_document = await coll.find_one({'_id': _id})\n    print('document is now %s' % pprint.pformat(new_document))\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(do_replace())\n\n更新\n更新指定字段，不会影响到其他内容。\nasync def do_update():\n    coll = db.test_collection\n    result = await coll.update_one({'name': 0}, {'$set': {'sex': 'girl'}})\n    print('更新条数： %s ' % result.modified_count)\n    new_document = await coll.find_one({'name': 0})\n    print('更新结果为： %s' % pprint.pformat(new_document))\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(do_update())\n\n删除\n删除指定记录。\nasync def do_delete_many():\n    coll = db.test_collection\n    n = await coll.count_documents({})\n    print('删除前有 %s 条数据' % n)\n    result = await db.test_collection.delete_many({'name': {'$gte': 10}})\n    print('删除后 %s ' % (await coll.count_documents({})))\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(do_delete_many())\n\n后记\n在微信公众号后台回复「MongoDB」获取源码。MongoDB 的骚操作就介绍到这里，后面会继续写 MySQL 和 Redis 的骚操作。尽请期待。\n本文首发于公众号「zone7」，关注获取最新推文！\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}