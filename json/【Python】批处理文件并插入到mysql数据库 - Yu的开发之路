{"title": "【Python】批处理文件并插入到mysql数据库 - Yu的开发之路 ", "index": "python", "content": "问题\n最近在项目的时候遇到一个头大的问题，客户手中有份人员名单和人员照片。需要把人员信息数据库表照片信息补全，就是说要将人员照片和数据库人员一一对应。起初项目小伙伴说要手动录入写一个头像上传的程序一个个上传人员照片。几百号人的数据说多也不多说少也不少，如果全部手动录入不说麻烦的问题，可能中途还容易出错。我看了一眼人员照片文件是以人名命名，正好和数据库人员数据REALNAME字段相对应。其次重复人名并不多大概几个而已，可以之后做单独处理。人生苦短我用python，何必自找苦吃呢\n需要做什么\n\nt_users表中REALNAME和照片命名是对应关系\n照片需要重命名为当时的时间戳\nt_users表IMGURL存入图片所在地址以及图片名称\n\npython酸爽初体验\n开始前需要先下载Image和Mysql支持库,Image库是需要下载安装PIL PS:使用python2.7 pip安装mysql.connector库失败 最后去Oracle官网直接下载安装mysql.connector 瞬间爬坑 未知命令行安装为何失败\n遍历文件执行代码(参考度娘)\n#!/usr/bin/python\n#coding=utf-8\nimport os\nimport os.path\nimport time\nimport mysql.connector\nimport time\nrootdir = '/Users/julyyu/imgs/pics'    # 指明被遍历的文件夹\n\nconn=mysql.connector.connect(user='root',password='xxx',host='xxx',database='xxx')\nc = conn.cursor()\nfor parent,dirnames,filenames in os.walk(rootdir):    #三个参数：分别返回1.父目录 2.所有文件夹名字（不含路径） 3.所有文件名字\n    for filename in filenames:                        #输出文件信息\n        (name,extension) = filename.split(\".\")\n        print \"filenameonly is:\" + name  #输出图片名\n        if name:\n            newname = str(int(time.time())) + \".jpg\"  #时间戳命名\n            print \"newname is:\" + newname \n            os.rename(rootdir+\"/\"+filename , rootdir+\"/\"+newname) #对图片进行重命名\n            tempname = \"/lzgl/\" +  newname #数据库存入的图片路径\n            query = \"update  t_users set IMGURL = '\" + tempname +  \"' where REALNAME = '\" + name + \"'\"      \n            c.execute(query)\n            conn.commit()\n            time.sleep(2)  #防止时间戳重复 睡两秒 也可以睡0.5 这样处理会更快一些 \nc.close()\nconn.close()\n之后又对图片进行了压缩操作 原图每张10+M的一寸照无法忍, 代码如下\n#!/usr/bin/python\n#coding:utf-8\nfrom PIL import Image \nimport os\n\n#图片压缩批处理  \ndef compressImage(srcPath,dstPath):  \n    for filename in os.listdir(srcPath):  \n        #如果不存在目的目录则创建一个，保持层级结构\n        if not os.path.exists(dstPath):\n                os.makedirs(dstPath)        \n\n        #拼接完整的文件或文件夹路径\n        srcFile=os.path.join(srcPath,filename)\n        dstFile=os.path.join(dstPath,filename)\n        print srcFile\n        print dstFile\n\n        #如果是文件就处理\n        if os.path.isfile(srcFile):     \n            #打开原图片缩小后保存，可以用if srcFile.endswith(\".jpg\")或者split，splitext等函数等针对特定文件压缩\n            sImg=Image.open(srcFile)  \n            w,h=sImg.size  \n            print w,h\n            dImg=sImg.resize((w/2,h/2),Image.ANTIALIAS)  #设置压缩尺寸和选项，注意尺寸要用括号\n            dImg.save(dstFile) #也可以用srcFile原路径保存,或者更改后缀保存，save这个函数后面可以加压缩编码选项JPEG之类的\n            print dstFile+\" compressed succeeded\"\n\n        #如果是文件夹就递归\n        if os.path.isdir(srcFile):\n            compressImage(srcFile,dstFile)\n\nif __name__=='__main__':  \n    compressImage(\"/Users/julyyu/imgs/tempa\",\"/Users/julyyu/imgs/temps\") #压缩前的文件路径和压缩后的文件路径\n参考资料\nhttp://blog.csdn.net/u012234115/article/details/50248409\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}