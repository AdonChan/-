{"title": "零基础微信机器人实践-云技术对个人开发者的影响 - 个人文章 ", "index": "nginx,负载均衡,mysql,linux,python", "content": "推荐理由：\n之前我对搭建微信机器人挺感兴趣的，心血来潮就做了一个图灵机器人，感觉自己长见识了，今天无意间发现了这篇文章，才发现自己已经out了，原来还有这么叼的微信机器人，可以在微信与我们聊天的机器人，它完全不同于图灵机器人那种API完成一些看似很好玩的聊天功能，真正可以为我们所用；所以小编这次特意给大家推荐下，来帮助大家更好地认识如何借助腾讯云快速实现微信机器人的思路。\n前言\n我是一名产品经理，平时对技术比较感兴趣，也正是因为对技术有所了解也让我的工作非常轻松，平时也看过很多技术文章，我认为技术文章要么就是给纯技术写的，要么就是给那些没有很深的编程基础但是热爱编程或者抱有期待的人看的，这篇文章是写给后者的，但是不代表内容非常基础，依然使用了目前比较热门的技术。\n这次我们要做一个微信机器人，就是可以在微信与我们聊天的机器人，当然目的不是用图灵机器人那种API完成一些看似很好玩的聊天功能，好歹要让这个机器人有所作用。\n那么来说说我的需求吧，我和朋友做了一个航模视频的自媒体，作为一个产品经理，我需要了解我发布的视频的实时播放量，但是完成这个操作需要进入优酷主页查看，包括还有每个视频的播放量数据都要自己去打开网页看，这样非常不方便，比如我们在群里聊到了播放量的话，那么就会有一个机器人告诉我们播放了多少，这样多么方便，而且看起来还很装逼，并且，想实现出来真的不难。\n\n前提是我们已经站在巨人的肩膀上。\n技术路径和实现思路\n首先编程语言使用了Python，Python语法简洁、第三方扩展丰富，也因为这里采用的微信消息框架itchat是基于Python的。服务器当然使用腾讯云服务器，这里我使用的是单核1G内存的最低配置，因为作为个人用的这个配置绰绰有余了，并且以后有更多用途的时候可以直接升级服务器配置和存储，这就是云服务器的巨大优势。\n因为对于大部分人来说，拿到一台崭新的服务器要部署服务是非常麻烦的，所以我也不喜欢，于是乎想到了使用docker容器来运行我的代码，这样不用手动去配置服务器的运行环境，我只需要创建一个docker镜像就可以了，但是这样感觉还是挺麻烦的，还要安装docker，还要上传镜像。然后我发现了daocloud，它可以帮助我完成容器管理和镜像生成的工作。所以我们部署路径是这样的：编写代码->提交代码到github上->daocloud自动生成docker镜像并部署到我们的云服务器上->自动运行\n也就是提交代码到分支，然后，然后自动更新发布，服务就这么运行成功了具体过程\n所以对云服务器的配置而言，我只需要为其安装daocloud的被控端程序即可，然后就可以再也不用管这台服务器了，太爽了吧~\n恰好发现腾讯云也支持了daocloud的系统，在为云服务器安装系统的时候选择服务市场-Docker容器-Daocloud混合式容器管理平台即可。\n哇，那这样岂不是爽上加爽，不用登录服务器做任何配置~拿来即用，真刺激。\n安装过程就不多说了，他们也提供了文档，非常简单，两行命令而已，然后我们可以在daocloud后台添加我们的主机了。\n\n然后我们去创建一个项目\n\n需要我们设置代码源，可以选择github和coding，确实比较人性化，那么我们就需要自己去github创建好git项目了，这里省略过，选择好后就可以创建了。项目创建成功后我们只需要选择我们的代码分支构建一下就好了，这时容器镜像就创建好了，下来就是部署。\n创建一个应用，会提示我们选择镜像来源，这里选择之前构建的镜像\n\n点击部署最新版本就好了\n然后我们分别在项目设置和应用设置里配置自动构建和自动部署，这样以后我们只要提交了代码，daocloud会帮我们自动构建镜像然后部署，不需要我们自己手动操作，只需要专注代码逻辑，不用再操心部署了。\n\n\n过程就是这么简单，腾讯云服务器作为基础，我们全程不用手动配置自己的服务器，多么轻松惬意。程序实现\n前面重点讲了服务器配置和程序部署，但是实际上部署的程序我们还没讲。\n\n容器打包必须要有一个Dockerfile来告诉容器如何构建镜像，为了构建方便我们采用的daocloud提供的python镜像，以下是dockerfile的内容：\nFROM daocloud.io/python:3-onbuildENTRYPOINT [\"python\"]CMD [\"run.py\"]可以看到，我们启动服务的文件是run.py\nrun.py\n!/usr/bin/env python3\nimport bot.xiaoweiwei as wechatdef main():\nwechat.run()\nif name == \"__main__\":\nmain()\nxiaoweiwei.py\nimport itchat\nfrom target.youku import YoukuData\nfrom target.qqvideo import QQVideoData\nfrom plugins.tuling import get_response\n@itchat.msg_register('Text')\ndef text_reply(msg):\nitchat.send('/抠鼻',msg['FromUserName'])\nreturn u'你好，请在群聊里面撩我/微笑'\n\n@itchat.msg_register('Text', isGroupChat=True)\ndef group_reply(msg):\nif msg['isAt']:\nif u'播放量' in msg['Text']:\ndata = YoukuData()\nif not data.check:\nreturn '查询失败！'\nnum = data.get_play_num()\nitchat.send(u'优酷目前累计播放量为：%s' % num, msg['FromUserName'])\ndata = QQVideoData()\nif not data.check:\nreturn '查询失败！'\nnum = data.get_play_num()\nreturn u'腾讯视频目前累计播放量为：%s' % num\nelif u'订阅' in msg['Text']:\ndata = YoukuData()\nif not data.check:\nreturn '查询失败！'\nnum = data.get_sub_num()\nreturn '目前优酷订阅人数为：%s' % num\nelif '详细播放' in msg['Text']:\nitchat.send('查询中...', msg['FromUserName'])\ndata = YoukuData()\nif not data.check:\nreturn '查询失败！'\nd = data.get_play_num_more()\nitchat.send(d, msg['FromUserName'])\ndata = QQVideoData()\nif not data.check:\nreturn '查询失败！'\nd = data.get_play_num_more()\nreturn d\nelse:\nreturn get_response(msg['Text'][5:])\n\ndef run():\nitchat.auto_login(True,enableCmdQR=2)\nitchat.run()\n>youku.py\nimport util\nhomepage = 'http://i.youku.com/i/UMzg0ODQ...'\nclass YoukuData(object):\ndef __init__(self,url=homepage):\n    self.ulr = url\n    self.check = True\n    self.soup = util.get_soup(url)\n    if self.soup is None:\n        self.check = False\n\n#获得播放量\ndef get_play_num(self):\n    vnum = self.soup.select('.vnum')\n    if vnum is not None:\n        x = vnum[0]\n        n = x.get('title')\n        num = n\n    else:\n        num = '**找不到播放量**'\n    return num\n\n#获得订阅数\ndef get_sub_num(self):\n    snum = self.soup.select('.snum')\n    if snum is not None:\n        x = snum[0]\n        n = x.get('title')\n        num = n\n    else:\n        num = '**找不到订阅数**'\n    return num\n\n#详细播放量\ndef get_play_num_more(self):\n    titles = self.soup.select('.v-meta-title')\n    nums = self.soup.select('.v-num')\n    times = self.soup.select('.v-publishtime')\n\n    s = ' 优酷视频-最新%d个视频：\\n' % len(titles)\n    for x in range(len(titles)):\n        s += str(x+1) + '.'+titles[x].string+'\\n 播放量：'+nums[x].string+'\\n'\n    return s\n这里程序实现很简单，使用的是itchat提供的方法，具体可以参考itchat项目https://github.com/littlecode...总结\n以上就是快速实现微信机器人的思路，其实主要想表达的就是现在的云技术对于开发者、对于编程初学者都是非常友好的，我们完全不必要投入过多精力在运维和发布维护上，只需要专注代码就可以。这也是云为我们生活带来的另一个方面的改变吧。文章出自腾讯云技术社区 （埋文字链 https://www.qcloud.com/commun...）\n推荐大家关注腾讯云技术社区微信公众号：QcloudCommunity \n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "5"}