{"title": "python装饰器案例 - Python全栈玩起来 ", "index": "python", "content": "普通装饰器函数\n计算函数的运行时间\nimport requests\nimport time\nimport re\n\n# 黑名单\nfilter_urls = ['www.hao123.com', 'www.baidu.com', 'www.jd.com']\n\n\ndef filter_url(url):  # 过滤url\n    print(url)\n    host = re.findall(r'http[s]?://(.*?)/', url)[0]\n    return host in filter_urls\n\n\n# 测试网络请求的响应时间\ndef check_runtime(func):\n    print('--初始装饰--', func.__name__)\n\n    def wrapper(url, *args, **kwargs):  # 闭包函数\n        # 判断url的 / path路径是否存在，如果不存在，则追加/\n        if url[7:].find('/') == -1 or url[8:].find('/') == -1:\n            url += '/'\n\n        if filter_url(url):\n            print('---已取消下载--：此url已在黑名单中')\n            return\n        # 获取开始请求的时间\n        start_time = time.time()\n        # result = func(*args, **kwargs)\n        result = func(url, *args, **kwargs)\n        delta_seconds = round(time.time() - start_time, 5)\n        print('[执行时间%.5f]' % delta_seconds)\n        return result\n\n    return wrapper  # 返回一个包装函数(包装被装饰函数的参数列表)\n\n\n@check_runtime\ndef request(url):\n    print('--开始请求--', url)\n    resp = requests.get(url)\n    print('--响应--', resp.status_code)\n    print(resp.content)\n    print('---完成请求---')\n\n\nrequest('http://www.hao123.com')\n\n带参数装饰器函数\n带参数装饰器设定权限（表）  8 查询(QUERY)  4 增加(ADD) 2 删除(DELETE) 1 修改(UPDATE) 0 无(NOSET)设定角色——权限  admin 15(8421)  |  default, 8设置用户-角色  disen: admin   |  cici: default\n假如当前session中登录的用户是cici，其权限值为8\nimport time\n\ncurrent_rights = 8  # 当前登录用户的权限值\nPERMISSION = (('QUERY', 8), ('ADD', 4), ('DELETE', 2), ('UPDATE', 1), ('NOSET', 0))\n\n\ndef get_permission(permission):  # 根据权限名，返回权限值\n    for item in PERMISSION:\n        if permission in item:\n            return item[1]\n\n\ndef check_permission(permission):\n    print('--验证权限--', permission)\n\n    def wrapper1(func):\n        print('--初始化装饰函数--')\n\n        def wrapper2(*args, **kwargs):\n            # 检查当前用户的权限\n            permission_value = get_permission(permission)\n            # print(permission_value)\n            if current_rights & permission_value != permission_value:\n                print('当前用户没有权限')\n                return\n            result = func(*args, **kwargs)\n\n            return result\n\n        return wrapper2\n\n    return wrapper1\n\n\n@check_permission('DELETE')\ndef delete_order(id):\n    print('当前用户 cici 正在删除订单:', id)\n    time.sleep(2)\n    print('删除成功！')\n\n\ndef add_permission(permission):  # 添加权限\n    global current_rights\n    current_rights |= get_permission(permission)\n\n\n# add_permission('DELETE')\ndelete_order(1010111)\n\n不带参数的装饰器类\nclass Check():\n    def __init__(self, func):\n        self.func = func\n\n    def __call__(self, *args):\n        self.func(*args)\n\n@Check\ndef login(uid):\n       print(uid)\n被装饰的方法会传递给装饰器的构造器(__init__)，然后在被装饰的函数被调用的时候，装饰器的__call__()方法就会执行注意: 在装饰阶段，__init__ 函数执行,在被装饰的方法被调用的时候，__call__ 执行\n带参数的装饰器类\nclass Check():\n    def __init__(self, name):\n        self.name = name\n\n    def __call__(self, func):\n        def wrapper(*args, **kwargs):\n            return func(*args, **kwargs)\n\n        return wrapper\n\n\n@Check('log')\ndef login(uid):\n    print(uid)\n__call__()会在装饰阶段被调用\n带参数装饰器实现爬虫超时处理\nimport time\nimport requests\nRETRY_TIME = 3\nDOWNLOAD_DELAY = 2\nclass Retry(object):\n    def __init__(self,retries = 3,delay=0):\n        self.retries = retries\n        self.delay=delay\n\n    def __call__(self,func):\n        def wrapper(*args, **kwargs):\n            for i in range(self.retries):\n                try:\n                    result=func(*args,**kwargs)\n                except Exception as e:\n                    print(e)\n                    time.sleep(self.delay)\n                    continue\n                else:\n                    return result\n        return wrapper\n\n\n@Retry(RETRY_TIME,DOWNLOAD_DELAY)\ndef fetch(url):\n    print(f'Start fetch {url}')\n    resp = requests.get(url,timeout=5)\n    print(resp.status_code)\n\n\nfetch('http://www.baidu.com')\n\n                ", "mainLikeNum": ["7 "], "mainBookmarkNum": "6"}