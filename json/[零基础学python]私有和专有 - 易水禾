{"title": "[零基础学python]私有和专有 - 易水禾 ", "index": "零基础,python", "content": "在任何语言中，都会规定某些对象(属性、方法、函数、类等)只能够在某个范围内访问，出了这个范围就不能访问了。这是“公”、“私”之分。此外，还会专门为某些特殊的东西指定一些特殊表示，比如类的名字就不能用class，def等，这就是保留字。除了保留字，python中还为类的名字做了某些特殊准备，就是“专有”的范畴。\n\n私有函数\n\n在某些时候，会看到有一种方法命名比较特别，是以“__”双划线开头的，将这类命名的函数/方法称之为“私有函数”。\n\n所谓私有函数，就是：\n\n\n私有函数不可以从它们的模块外面被调用\n私有类方法不能够从它们的类外面被调用\n私有属性不能够从它们的类外面被访问\n\n跟私有对应的，就是所谓的公有啦。有的编程语言用特殊的关键词来说明某函数或方法或类是私有还是公有。但是python仅仅用名字来说明，因为python深刻理解了2k年前孔先生丘所说的“名不正言不顺”的含义。\n\n如果一个 Python 函数,类方法,或属性的名字以两个下划线开始 (但不是结束),它是私有的;其它所有的都是公有的。类方法或者是私有 (只能在它们自已的类中使用) 或者是公有 (任何地方都可使用)。例如：\n\nclass Person:\ndef __init__(self,name):\n    self.name = name\n\ndef __work(self,salary):\n    print \"%s salary is:%d\"%(self.name,salary)\n\n\n这里边定义的方法__work()就是一个私有方法。\n\n下面把上面的类进行完善，然后运行，通过实例来调用这个私有方法\n\n#!/usr/bin/env python\n#coding:utf-8\n\nclass Person:\n    def __init__(self,name):\n        self.name = name\n        print self.name\n\n    def __work(self,salary):\n        print \"%s salary is: %d\"%(self.name,salary)\n\nif __name__==\"__main__\":\n    officer = Person(\"Tom\")\n    officer.__work(1000)\n\n#运行结果\n\nTom\nTraceback (most recent call last):\n  File \"225.py\", line 14, in <module>\n    officer.__work(1000)\nAttributeError: Person instance has no attribute '__work'\n\n\n从运行结果中可以看出，当运行到officer.__work(1000)的时候，报错了。并且从报错信息中说，没有该方法。这说明，这个私有方法，无法在类意外调用（其实类意外可以调用私有方法，就是太麻烦，况且也不提倡，故本教程滤去）。\n\n下面将上述代码进行修改，成为：\n\n#!/usr/bin/env python\n#coding:utf-8\n\nclass Person:\n    def __init__(self,name):\n        self.name = name\n        print self.name\n\n    def __work(self,salary):\n        print \"%s salary is: %d\"%(self.name,salary)\n\n    def worker(self):\n        self.__work(500)        #在类内部调用私有方法\n\nif __name__==\"__main__\":\n    officer = Person(\"Tom\")\n    #officer.__work(1000)\n    officer.worker()\n\n#运行结果\n\nTom\nTom salary is: 500\n\n\n结果正是要得到的。看官是否理解私有方法的用法了呢？\n\n专有方法\n\n如果是以双划线开头，但不是以它结尾，所命名的方法是私有方法；\n\n如果以双划线开头，并且以双划线结尾，所命名的方法就是专有方法。\n\n这是python规定的。所以在写程序的时候要执行，不执行就是跟python过不去，过不去就报错了。\n\n比如前面反复提到的__init__(),就是一个典型的专有方法。那么自己在写别的方法时，就不要用__开头和结尾了。虽然用了也大概没有什么影响，但是在可读性上就差很多了，一段程序如果可读性不好，用不了多长时间自己就看不懂了，更何况别人呢？\n\n关于专有方法，出了__init__()之外，还有诸如：__str__,__setitem__等等，要向看，可以利用dir()函数在交互模式下看看某个函数里面的专有东西。当然，也可以自己定义啦。\n\n因为__init__用的比较多，所以前面很多例子都是它。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "4"}