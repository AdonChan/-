{"title": "发送Django error log 到企业微信，python+微信实现即时告警 - 个人文章 ", "index": "python,django,运维", "content": "发送Django error log 到企业微信，python+微信实现即时告警\nDjango的logging系统十分好用，使用file，mail_admins之类的handlers可以快捷地实现保存日志到文件，发送错误日志给管理员的功能。但是，如果能直接将应用的错误日志发送到手机上，实现即时告警，岂不是更好？\n\n注册企业微信1\n\n首先需要注册一个企业微信账号，地址是：https://work.weixin.qq.com/we...\n**注意**：\n注册过程如果是为企业使用要选择企业，然后上传企业的资质证明，如果是个人注册，选择团队，然后输入自己的身份证号即可完成注册.\n然后进入企业应用页面，添加一个应用，添加完成后，进入应用页面：\n\n这里的agentid和secret需要留意， 后续的发送信息api需要它们。\n另外我们还需要corpid，在我的企业-企业信息中可以找到。\n\n使用企业微信API发送消息\n测试使用企业微信API发送消息：企业微信API：发送消息\n例子：\n#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport requests\nimport json\n\n\ndef get_token():\n\n   url = 'https://qyapi.weixin.qq.com/cgi-bin/gettoken'\n   values = {\n       'corpid': '<YOUR　CORPID>',\n       'corpsecret': '<YOUR SECRET>',\n      }\n   req = requests.post(url, params=values)\n   data = json.loads(req.text)\n   return data[\"access_token\"]\n\n\ndef send_msg():\n   url = (\"https://qyapi.weixin.qq.com/cgi-bin/message/send\"\n          \"?access_token={}\").format(get_token())\n   values = {\n       # \"touser\": \"@all\",\n       \"toparty\": \"2\",\n       \"msgtype\": \"text\",\n       \"agentid\": \"<YOUR AGENTID>\",\n       \"text\": {\n           \"content\": u\"报警测试，toparty: 2\"\n       },\n       }\n\n   req = requests.post(url, json.dumps(values))\n   print(values, req)\n\n\nif __name__ == '__main__':\n   send_msg()\n其中toparty：2，意为向id为2的部门的所有成员发送消息。\n使用touser：@all, 可以向所有人发送信息。\n\n发送django的log到企业微信\n配置Django的logging系统接下来我们需要配置一下django的logging系统，来发送ERROR级别的log到企业微信。\n我的思路是可以参照django自带的AdminEmailHandler写一个WechatAlarmHandler。代码如下：\nimport logging\nimport requests\nimport json\nfrom copy import copy\n\n\nfrom django.core.cache import cache\nfrom django.views.debug import ExceptionReporter\n\n\nclass WechatAlarmHandler(logging.Handler):\n    \"\"\"An exception log handler that sends log entries to wechat alarm bot.\n    \"\"\"\n\n    def __init__(self):\n        logging.Handler.__init__(self)\n\n    def emit(self, record):\n        try:\n            request = record.request\n            subject = '%s (%s IP): %s' % (\n                record.levelname,\n                ('internal' if request.META.get('REMOTE_ADDR') in settings.INTERNAL_IPS # NOQA\n                 else 'EXTERNAL'),\n                record.getMessage()\n            )\n        except Exception:\n            subject = '%s: %s' % (\n                record.levelname,\n                record.getMessage()\n            )\n            request = None\n        subject = self.format_subject(subject)\n        message = self.format(record)\n        self.send_msg(subject, message)\n        \n    def send_msg(self, subject, message=None, *args, **kwargs):\n        WechatAlarm().send_msg('{}\\n\\n{}'.format(subject, message))\n\n\n    def format_subject(self, subject):\n        \"\"\"\n        Escape CR and LF characters.\n        \"\"\"\n        return subject.replace('\\n', '\\\\n').replace('\\r', '\\\\r')\n\n\nclass WechatAlarm:\n    def __init__(self, corpid='<YOUR CORPID>',\n                 corpsecret='<YOUR SECRET>',\n                 agentid='<YOUR AGENTID>', partyid='<YOUR PARTYID>'):\n        self.corpid = corpid\n        self.partyid = partyid\n        self.key = 'wechat_send_alarm_key'\n        self.corpsecret = corpsecret\n        self.agentid = agentid\n\n    def get_token(self):\n        token = cache.get(self.key)\n        if token:\n            return token\n        else:\n            url = 'https://qyapi.weixin.qq.com/cgi-bin/gettoken'\n            values = {\n                'corpid': self.corpid,\n                'corpsecret': self.corpsecret,\n               }\n            req = requests.post(url, params=values)\n            data = json.loads(req.text)\n            cache.set(self.key, data[\"access_token\"], 7200)\n            return data[\"access_token\"]\n\n    def send_msg(self, content=None):\n        url = (\"https://qyapi.weixin.qq.com/cgi-bin/message/send\"\n               \"?access_token={}\").format(self.get_token())\n        values = {\n            # \"touser\": \"@all\",\n            \"toparty\": self.partyid,\n            \"msgtype\": \"text\",\n            \"agentid\": self.agentid,\n            \"text\": {\n                \"content\": content,\n            },\n            }\n\n        return requests.post(url, json.dumps(values))\n\n再配置一下django的settings里的LOGGING：\nGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'formatters': {\n        'verbose': {\n            'format': '[%(asctime)s](%(levelname)s)<%(name)s.%(funcName)s>{%(process)d/%(thread)d} : %(message)s'\n        },\n        'simple': {\n            'format': '%(levelname)s %(message)s'\n        },\n    },\n    'filters': {\n        'require_debug_false': {\n            '()': 'django.utils.log.RequireDebugFalse'\n        }\n    },\n    'handlers': {\n        'null': {\n            'level': 'DEBUG',\n            'class': 'django.utils.log.NullHandler',\n        },\n        'console': {\n            'level': 'DEBUG',\n            'class': 'logging.StreamHandler',\n            'formatter': 'simple'\n        },\n        'mail_admins': {\n            'level': 'ERROR',\n            'class': 'django.utils.log.AdminEmailHandler',\n            'filters': ['require_debug_false'],\n        },\n        'send_wechat': {\n            'level': 'ERROR',\n            'class': 'utils.log.WechatAlarmHandler',   # your handler path\n        },\n        'file': {\n            'level': 'INFO',\n            'class': 'logging.handlers.TimedRotatingFileHandler',\n            'formatter': 'verbose',\n            'filename': webservice_logfile,\n            'when': 'D'\n        },\n    },\n    'loggers': {\n        '': {\n            'handlers': ['file', 'mail_admins', 'send_wechat'],\n            'propagate': True,\n            'level': 'ERROR',\n        },\n        'django': {\n            'handlers': ['file', 'mail_admins'],\n            'propagate': True,\n            'level': 'ERROR',\n        },\n        'django.request': {\n            'handlers': ['file', 'mail_admins', ],\n            'level': 'ERROR',\n            'propagate': True,\n        },\n    }\n}\n\n即，在handler里增加了一个send_wechat, 在loggers里的handers里增加了send_wechat。\n\n这样django的error log就会通过企业微信发送到手机了。\n\n Python+微信接口实现运维报警 ↩\n\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "4"}