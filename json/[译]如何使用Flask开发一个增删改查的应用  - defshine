{"title": "[译]如何使用Flask开发一个增删改查的应用  - defshine ", "index": "sqlalchemy,python,flask", "content": "\n教程译文首发自我的博客:Defshine's Blog   \n我们将创建一个简单的数据库驱动的笔记本应用。本教程面向想学习如何使用Flask开发网站或者web应用的初学者。在学习本教程之前，请先安装好Python和SQLite。如果你还没有在电脑上安装，请先安装。如果你安装的Python版本为2.5或者更高，那么你就无需安装SQLite了，Python 2.5之后的版本都已经内置了SQLite。  Python: https://www.python.org/  SQLite: https://www.sqlite.org/download.html\n本教程主要包含的内容：\n\n使用模板\n保存一条记录到数据库中\n从数据库中获取一条记录\n更新数据库中的一条记录\n删除数据库中的一条记录\n\n应用的功能：\n\n用户可以创建一篇笔记（一篇笔记包含题目和内容）\n用户可以浏览笔记列表\n用户可以编辑一篇笔记\n用户可以删除一篇笔记\n\nOK，我们开始开发。首先，我们需要安装Flask和Flask-SQLAlchemy。  打开一个控制台窗口（Windows中的命令行工具），然后逐一运行以下命令：\npip install Flask\npip install Flask-SQLAlchemy\n现在，创建一个文件夹，用于存放应用的源代码，我们将这个文件夹命名为note_app。在刚创建的文件中，创建一个名为main.py的文件。\n在本教程中，我们将使用模板，所以，我们继续创建一个文件夹，用于存放模板。使用templates作为它的名字，它应该位于note_app文件夹下面。当我们使用模板时，Flask会自动找到templates文件夹下面的模板，这也是我们将这个文件夹命名为templates的原因。\n参考： http://flask.pocoo.org/docs/0.10/quickstart/#rendering-templates\n下面，我们开始写代码，在main.py文件中\nfrom flask import Flask, render_template, redirect, request\nfrom flask_sqlalchemy import SQLAlchemy\nimport os\n然后,我们创建实际的应用，同时创建SQLAlchemy对象，并把它传递给应用。\napp = Flask(__name__)\nbasedir = os.path.abspath(os.path.dirname(__file__))\napp.config['SQLALCHEMY_DATAB+4ASE_URI'] = 'sqlite:///' + os.path.join(basedir, 'app.sqlite')\ndb = SQLAlchemy(app)\n获取成为Python开发专家的技巧。访问: http://treehouse.7eer.net/c/245500/245646/3944\n下面，我们将创建一个模型：\nclass Note(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(80))\n    body = db.Column(db.Text)\n    def __init__(self, title, body):\n        self.title = title\n        self.body = body\n上面的这个Note模型将用于对数据库中的笔记进行创建，获取，更新和删除的操作。我们的Note模型有一个Integer类型的id属性，它作为主键。title字段是String类型，它最多可以包含80个字符（你可以把字符串的最大值改成你想要的，这里我们只是把它设置为80），最后是一个Text类型的body属性。  Integer，String，Text都是数据类型，你可以在SQLAlchemy的官方文档查看到一系列的你可以使用的数据类型：http://docs.sqlalchemy.org/en/latest/core/type_basics.html#generic-types  \n去你的终端窗口，逐一输入以下命令：\npython\nfrom main import db\ndb.create_all()\n上面的命令会初始化数据库，它将创建数据库和一个名为note的表。  现在，我们将创建一个函数，并且使用route()装饰器将它绑定到一个URL上。\n@app.route(\"/\")\ndef home():\n    return render_template(\"home.html\")\n大致说来,当用用户访问我们网站的主页（例如：http://mywebsite.com）时，flask就会调用我们在上面定义的home()函数。在home()函数里，我们渲染了一个名为home.html的模板。\n参考: http://flask.pocoo.org/docs/0.10/quickstart/#routing\n现在，打开home.html，然后复制下面的内容:\n<h3>Note Taking App</h3>\n<a href=\"/notes\">View all notes</a>\n<br>\n<a href=\"/notes/create\">Create a note</a>\n回到main.py文件中，然后复制下面的代码到文件底部：\nif __name__ == \"__main__\":\n    app.run(debug=True)\n你的main.py文件的内容应该类似下面这样：\nfrom flask import Flask, render_template, redirect, request\nfrom flask_sqlalchemy import SQLAlchemy\nimport os\n\napp = Flask(__name__)\nbasedir = os.path.abspath(os.path.dirname(__file__))\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///' + os.path.join(basedir, 'app.sqlite')\ndb = SQLAlchemy(app)\n\nclass Note(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(80))\n    body = db.Column(db.Text)\n\n    def __init__(self, title, body):\n        self.title = title\n        self.body = body\n\n@app.route(\"/\")\ndef home():\n    return render_template(\"home.html\")\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n现在，让我们通过命令在终端窗口中（确保在note_app目录下运行下面的命令）运行这个应用：\npython main.py\n现在，在浏览器里访问http://127.0.0.1:5000/。  你应该会看到这个主页：  \n我们现在这个应用的功能还不完善，在第二部分，我们将开发笔记页面的创建，笔记列表等功能。    \n教程的源代码放在Github上：https://github.com/basco-johnkevin/note-taking-app/tree/master/part1  \n原文地址：How to build a CRUD application using Flask (Python Framework)\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "18"}