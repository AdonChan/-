{"title": "python的logging模块 - 个人文章 ", "index": "python", "content": "引言\n具体实践\n#!/usr/bin/env python\n# -*- coding=utf-8 -*-\nimport logging\nappname = \"com.thebingo.mhtt\"\n#创建一个logging的实例logger\nlogger = logging.getLoggger(appname)\n#设定全局日志级别为DEBUG\nlogger.setLevel(logging.DEBUG)\n#创建一个屏幕的handler，并且设定级别为DEBUG\nch = logging.StreamingHandler()\nch.setLevel(logging.DEBUG)\n#创建一个文件的handler，并且设定级别为DEBUG\nfh= logging.FileHandler(\"toMyself.log\")\nfh.setLevel(logging.CRITICAL)\n#设置日志的格式\nformatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n#add formatter to ch and fh\nch.setFormatter(formatter)\nfh.setFormatter(formatter)\n#add ch and fh to logger\nlogger.addHandler(ch)\nlogger.addHandler(fh)\n#'application' code\nlogger.debug(\"debug message\")\nlogger.info(\"info message\")\nlogger.warn(\"warn message\")\nlogger.error(\"error message\")\nlogger.critical(\"critical message\")\nlogging模块\nlogging模块提供logger，handler，filter,formatter.logger:可以通过logging.getLogger(name)获取logger对象，如果不指定name则返回root对象。handler：将日志记录（log record）发送到合适的目的地（destination），比如文件，socket等。一个logger对象可以通过addHandler方法添加多个handler，每个handler又可以定义不同日志级别，以实现日志分级过滤显示。\n全局日志的权力大于局部日志。全局日志级别为CRITICAL的话，局部变量想设置为INFO或者DEBUG都会失效。\n关于formatter的配置，采用的是%(<dict key>)s的形式，就是字典的关键字替换。https://docs.python.org/3.5/l...\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}