{"title": "使用Python处理文本，整理信息 - 个人文章 ", "index": "python", "content": "处理思科网络设备show ip int brief的输出内容\n任务目标\n通过Python将上述的命令输出从一整个文件中取出来，并转换成表格。否则，我需要分别打开每一个文件，找到对应的输出，拷贝到Ecxel，再进行数据分列动作，操作繁琐而且重复性很大，因此考虑用Python尝试自动化完成此项工作。\nshow ip int brief 输出内容示例\n：\nRP/0/RSP0/CPU0:a9k-1-new#sh ip int brief\nWed Jul 26 16:19:04.551 PRC\n\nInterface                      IP-Address      Status          Protocol Vrf-Name\nLoopback0                      106.53.15.80   Up              Up       default \nLoopback10                     10.53.135.87    Up              Up       vpn-1   \nMgmtEth0/RSP0/CPU0/0           unassigned      Shutdown        Down     default \nMgmtEth0/RSP0/CPU0/1           unassigned      Shutdown        Down     default \nMgmtEth0/RSP1/CPU0/0           unassigned      Shutdown        Down     default \nMgmtEth0/RSP1/CPU0/1           unassigned      Shutdown        Down     default \nGigabitEthernet0/0/0/0         106.53.3.26    Down            Down     default \nGigabitEthernet0/0/0/1         unassigned      Shutdown        Down     default \nGigabitEthernet0/0/0/2         106.53.3.230   Shutdown        Down     default \nRP/0/RSP0/CPU0:a9k-1-new#\n\na9k-1-new的配置文件存在a9k-1-new.log文件中。\nPython代码及注释\n# 引入re模块\nimport re\nimport csv\n# 使用一个变量，方便进行批量处理\nconfig_file = 'a9k-1-new.log'\n# 将配置文件整个读入，形成一个大的data_buffer\nwith open(config_file) as file_obj:\ndata_buff = file_obj.read()\n\n# 查找的关键，使用一个正则表达式，这个正则表达式经过反复尝试出来的。\nmixRegex = re.compile(r'^Interface\\s+IP-Address\\s+Status.*\\n'\n                          r'(^[A-Z]\\w+\\d+.*\\n)+'\n                          r'^RP.*#'\n                          ,re.MULTILINE)\n\n# “r” 是为了告诉编译器这个string是个raw string，不要转意backslash '\\'。\n# 第一行匹配show ip int brief 输出的首行（表头）\n# “^Interface”匹配以Interface开头\n# “\\s+”表示后面跟着一个或多个空白\n# 后续继续匹配IP-Address和Status，就可以匹配到首行了\n# “.*”表示后面任意字符重复零次或任意次\n# “\\n”表示最后的换行符\n# 第二行匹配接口的信息项，因为信息类别比较多，如果要考虑周全，需要复杂的正则表达式，此处是一个较简单的写法\n# 用“()”括号括起来，表示一组，后面的“+”表示对整组进行重复；\n# “^[A-Z]\\w+\\d+.*\\n”表示以大写字母开头，后面跟着数字，接口名称都是大写字母开头，后面跟着数字，基本可以匹配接口的输出了；\n# 第三行匹配结束信息，如果有条件，可以构造一个特殊的结束行；\n# 此处匹配RP开头，以#结尾。\n\n# 调用search()方法，完成搜索\nmix_match = mixRegex.search(data_buff)\n\n# 搜索完成后，返回的值是一个大的字符串。\nprint(mix_match.group())\n\n# 按照换行符，将字符串进行分割，分割为一个列表；\nsplit_lines = mix_match.split('\\n')\n\n# 将分割完成的列表做进一步处理，形成一个二维列表。\nintf_status_list = []\n# sub_list = re.split(r’\\s{2,}’, line) 表示分割间隔要求在两个字符以上，否则，像admin shutdown也会被分开。\nfor line in split_lines:\n    sub_list = []\n    # sub_list = line.split()\n    sub_list = re.split(r'\\s{2,}', line)\n    intf_status_list.append(sub_list)\n\n# 用pop()函数删除列表的最后一个单元，结束行。\nintf_status_list.pop()\n\n# 以下代码将上述生成的二维列表写入到CSV文件中。\ncsv_output = config_file + '-int_status.csv'\n\nwith open(csv_output,'w') as file_obj:\n    wr = csv.writer(file_obj)\n        for list in intf_status_list:\n            wr.writerow(list)\n\n生成的csv文件，可以用Excel直接打开，如下：图片上传失败，以下是CVS cat的输出：\nInterface,IP-Address,Status,Protocol Vrf-Name\nLoopback0,106.53.15.80,Up,Up,default \nLoopback10,10.53.135.87,Up,Up,vpn-1,\nMgmtEth0/RSP0/CPU0/0,unassigned,admin Shutdown,Down,default \nMgmtEth0/RSP0/CPU0/1,unassigned,Shutdown,Down,default \nMgmtEth0/RSP1/CPU0/0,unassigned,Shutdown,Down,default \nMgmtEth0/RSP1/CPU0/1,unassigned,Shutdown,Down,default \n\n如果程序其他地方需要使用该数据，也可以对列表进行遍历访问。\n对文件进行批处理\n有两个办法：一、通过Shell脚本，批量处理。在代码中做如下修改：\n# 引入sys模块，通过命令行传入文件名。\nimport sys\n\nconfig_file = sys.argv[1]\n# config_file = ‘a9k-1-new.log’\n\n在目录下运行ls 命令，将所有需要处理的文件列出，然后编辑Shell 脚本如下，保存为\nbatch_process.sh\npython3 config_process.py a9k-1-new.log\npython3 config_process.py a9k-2-new.log\npython3 config_process.py a9k-3-new.log\npython3 config_process.py a9k-4-new.log\nchmod +x batch_process.sh\n\n然后运行./batch_process.sh几秒钟时间，转换就完成了。\n二、将程序本身修改为批处理类型\n#引入os模块，列出整个目录，仅处理包含“a9k”的文件\nimport os\n\nfiles = os.listdir('.')\nfor filename in files:\n    if 'a9k' in filename:\n        config_file = filename\n下一篇文章处理show inventory输出。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "4"}