{"title": "Python学习 - 个人文章 ", "index": "python", "content": "Python　学习\n函数式编程\n高阶函数 Higher-order function\n变量可以指向函数\n以Python内置的求绝对值的函数abs()为例\n>>> f\n<built-in function abs>\n>>> f(-10)\n10\n函数名也是变量\n>>> abs = 10\n>>> abs(-10)\n注：由于abs函数实际上是定义在import builtins模块中的，所以要让修改abs变量的指向在其它模块也生效，要用import builtins; builtins.abs = 10。\n传入函数\ndef add(x, y, f):\n    return f(x) + f(y)\nadd(1,2,abs)    \nmap函数\nmap()函数接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回。\n比如有一个函数f(x)=x2，要把这个函数作用在一个list [1, 2, 3, 4, 5, 6, 7, 8, 9]上\ndef f(x):\n  return x * x\nr = map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])\nlist(r)\n[1, 4, 9, 16, 25, 36, 49, 64, 81]\nmap()传入的第一个参数是f，即函数对象本身。由于结果r是一个Iterator，Iterator是惰性序列，因此通过list()函数让它把整个序列都计算出来并返回一个list。\nmap()作为高阶函数，事实上它把运算规则抽象了，因此，我们不但可以计算简单的f(x)=x2，还可以计算任意复杂的函数，比如，把这个list所有数字转为字符串：\nlist(map(str, [1, 2, 3, 4, 5, 6, 7, 8, 9]))['1', '2', '3', '4', '5', '6', '7', '8', '9']只需要一行代码。\nreduce函数\n把一个函数作用在一个序列[x1, x2, x3, ...]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算，其效果就是：\nreduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)比方说对一个序列求和，就可以用reduce实现：\n>>> from functools import reduce\n>>> def add(x, y):\n...     return x + y\n...\n>>> reduce(add, [1, 3, 5, 7, 9])\n25\n当然求和运算可以直接用Python内建函数sum()，没必要动用reduce。\n但是如果要把序列[1, 3, 5, 7, 9]变换成整数13579，reduce就可以派上用场：\n>>> from functools import reduce\n>>> def fn(x, y):\n...     return x * 10 + y\n...\n>>> reduce(fn, [1, 3, 5, 7, 9])\n13579\n如果考虑到字符串str也是一个序列，对上面的例子稍加改动，配合map()，我们就可以写出把str转换为int的函数：\n>>> from functools import reduce\n>>> def fn(x, y):\n...     return x * 10 + y\n...\n>>> def char2num(s):\n...     digits = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}\n...     return digits[s]\n...\n>>> reduce(fn, map(char2num, '13579'))\n13579\n整理成一个str2int的函数就是：\nfrom functools import reduce\n\nDIGITS = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}\n\ndef str2int(s):\n    def fn(x, y):\n        return x * 10 + y\n    def char2num(s):\n        return DIGITS[s]\n    return reduce(fn, map(char2num, s))\n还可以用lambda函数进一步简化成：\nfrom functools import reduce\n\nDIGITS = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}\n\ndef char2num(s):\n    return DIGITS[s]\n\ndef str2int(s):\n    return reduce(lambda x, y: x * 10 + y, map(char2num, s))\n假设Python没有提供int()函数，你完全可以自己写一个把字符串转化为整数的函数，而且只需要几行代码\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "0"}