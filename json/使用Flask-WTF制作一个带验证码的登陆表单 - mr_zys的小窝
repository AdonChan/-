{"title": "使用Flask-WTF制作一个带验证码的登陆表单 - mr_zys的小窝 ", "index": "flask-wtf,flask,python", "content": "Flask-WTF遇到的坑\n在使用Flask-WTF的时候，使用qucik_form()快速生成表单的确是很爽，但是生成的表单的样式并不是想要的，这个时候就不能使用qucik_form()了。\nPS：目前还不是很熟悉Flask-WTF的验证表单的原理，比如Require()验证应该是用JS，EqualTo这种就是放在后端处理的。有时间了需要好好读一读官方文档。\n在froms.py中定义了如下的Register表单:\nclass RegisterForm(Form):\n    \"\"\"注册表单\"\"\"\n\n    username = StringField(u'昵称', validators=[Required()])\n    email = StringField(u'邮箱', validators=[Required(), Email()])\n    password = PasswordField(u'密码', validators=[Required(), Length(6, 12, message=u'密码长度在6到12为')])\n    password1 = PasswordField(u'确认密码', validators=[Required(), Length(6, 12, message=u'密码长度在6到12为'), EqualTo('password', message=u'密码必须一致')])\n    verification_code = StringField(u'验证码', validators=[Required(), Length(4, 4, message=u'填写4位验证码')])\n    submit = SubmitField(u'注册')\n在verification_code字段中，需要加载验证码图片，此时在模板中使用qucik_form()就很难处理了。\n此时就需要手动控制表单的生成。\n自定义生成表单\n在模板中，手动渲染很麻烦：\n    <form action=\"\" method=\"post\" class=\"form\" role=\"form\">\n        {{ form.hidden_tag() }}\n        <div class=\"form-group required\">\n            {{ form.username.label(class=\"control-label\") | safe }}\n            {{ form.username(class=\"form-control\", required=True) }}\n        </div>\n        <div class=\"form-group required\">\n            {{ form.email.label(class=\"control-label\") | safe }}\n            {{ form.email(class=\"form-control\", required=True) }}\n        </div>\n        {% if form.errors.password %}\n        <div class=\"form-group has-error required\">\n            {{ form.password.label(class=\"control-label\") | safe }}\n            {{ form.password(class=\"form-control\", required=True) }}\n            {% for error in form.errors.password %}\n                <p class=\"help-block\">{{ error }}</p>\n            {% endfor %}\n        </div>\n        {% else %}\n        <div class=\"form-group required\">\n            {{ form.password.label(class=\"control-label\") | safe }}\n            {{ form.password(class=\"form-control\", required=True) }}\n        </div>\n        {% endif %}\n\n        {% if form.errors.password1 %}\n        <div class=\"form-group has-error required\">\n            {{ form.password1.label(class=\"control-label\") | safe }}\n            {{ form.password1(class=\"form-control\", required=True) }}\n            {% for error in form.errors.password1 %}\n                <p class=\"help-block\">{{ error }}</p>\n            {% endfor %}\n        </div>\n        {% else %}\n        <div class=\"form-group required\">\n            {{ form.password1.label(class=\"control-label\") | safe }}\n            {{ form.password1(class=\"form-control\", required=True) }}\n        </div>\n        {% endif %}\n\n        {% if form.errors.verification_code %}\n        <div class=\"form-group has-error required\">\n            {{ form.verification_code.label(class=\"control-label\") | safe }}\n            {{ form.verification_code(class=\"form-control\", required=True) }}\n            {% for error in form.errors.verification_code %}\n                <p class=\"help-block\">{{ error }}</p>\n            {% endfor %}\n        </div>\n        {% else %}\n        <div class=\"form-group required\">\n            {{ form.verification_code.label(class=\"control-label\") | safe }}\n            <label class=\"control-label\"><img src=\"{{ url_for('static', filename='image/code/'+code_img) }}\"></label>\n            {{ form.verification_code(class=\"form-control\", required=True) }}\n        </div>\n        {% endif %}\n\n        {{ form.submit(class=\"btn btn-info submit\") }}\n    </form>\n    <div class=\"register\">\n        <a type=\"button\" class=\"btn btn-info\" style=\"width: 100%;\" href=\"#\">已有账号？登录</a>\n    </div>\n下面是在编写以上代码时遇到的坑：\n\n\n在模板中需要处理form.errors。如果表单验证失败，失败的消息保存在form.errors中。\n如果表单验证错误，没有处理`form.errors`的话前端就不会有任何提示，给人造成的错觉就是`validate_on_submit`方法没有执行。\n\n不要忘记form.hidden_tag()。这个是加载并隐藏csrf_token。没有csrf_token，一般会报错。\n\n没有银弹上面的代码只实现了非空验证、密码是否相等验证、密码长度验证等功能，不知道不用Flask-WTF改用HTML + JS实现是不是代码量差不多。\n生成验证码\n生成验证码使用PIL来生成图片。廖雪峰有介绍如何生成验证码图片PIL-廖雪峰\n在views.py中处理表单\n处理表单的逻辑：\n\n每次有请求后，就调用generate_verification_code()返回一个验证码图片的url和验证码文本，然后将验证码保存在session中。\n每次验证表单后，验证表单中输入的验证码时候和session中的一致\n按条件返回模板\n\n代码如下：\n@user.route('/register', methods=['GET', 'POST'])\ndef register():\n    form = RegisterForm()\n    if form.validate_on_submit():\n        username = form.username.data\n        print username\n        if get_user(username):\n            print '账号已被注册'\n            flash(u'账号已被注册')\n            code_img, code_text = generate_verification_code()\n            session['code_text'] = code_text\n            return render_template('user/register.html', form=form, code_img=code_img)\n        if 'code_text' in session and session['code_text'] != form.verification_code.data:\n            code_img, code_text = generate_verification_code()\n            session['code_text'] = code_text\n            return render_template('user/register.html', form=form, code_img=code_img)\n        email = form.email.data\n        password = form.password.data\n        user = User(username=username, password=password, email=email)\n        try:\n            db.session.add(user)\n            db.session.commit()\n            return redirect(url_for('.index'))\n        except:\n            print traceback.print_exc()\n            db.session.rollback()\n            flash(u'注册失败')\n            code_img, code_text = generate_verification_code()\n            session['code_text'] = code_text\n            return render_template('user/register.html', form=form, code_img=code_img)\n    code_img, code_text = generate_verification_code()\n    session['code_text'] = code_text\n    return render_template('user/register.html', form=form, code_img=code_img)\n将验证码保存在图片中不是一个号办法，目前也没有想到如何保存。\n最终结果\n\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "24"}