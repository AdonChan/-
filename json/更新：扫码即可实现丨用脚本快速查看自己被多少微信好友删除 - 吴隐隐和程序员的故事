{"title": "更新：扫码即可实现丨用脚本快速查看自己被多少微信好友删除 - 吴隐隐和程序员的故事 ", "index": "python,微信", "content": "重大更新\n懒人扫码即可：这是马坐等软狗啊哈哈哈来更他的整个项目\n\n某日，一同学给小的发了 Github 源码，说是可以轻松查到删除自己的微信好友，于是就开始了作死之路。\nGithub 源码请看：0x5e/wechat-deleted-friends\n前言\n\n相信各位一定有收到过这样的群发短信，据说还被归类为玩转微信的五大技巧之一╮(╯▽╰)╭但，其实，只要跑一下脚本，就轻松找出删除自己的好友（轻松摔碎玻璃心，逃\nGitHub：开源怪我咯？\n原理\n新建群组，如果加不进来就是被删好友了（不要在群组里讲话，别人是看不见的）。\n用的是微信网页版的接口，还有些小问题，不过现在结果好像有疏漏一小部分，原因不明……也没试过被拉黑的情况。最终会遗留下一个只有自己的群组，需要手工删一下。\n方法\n下载 python 脚本，跑一下。windows：改用 python2；MAC：启动 Terminal，切到文件目录下：\npython wdf.py\n\n代码如下\n\n#!/usr/bin/env python\n# coding=utf-8\n\nimport os\nimport urllib, urllib2\nimport re\nimport cookielib\nimport time\nimport xml.dom.minidom\nimport json\nimport sys\nimport math\n\nDEBUG = False\n\nMAX_GROUP_NUM = 35 # 每组人数\n\nQRImagePath = os.getcwd() + '/qrcode.jpg'\n\ntip = 0\nuuid = ''\n\nbase_uri = ''\nredirect_uri = ''\n\nskey = ''\nwxsid = ''\nwxuin = ''\npass_ticket = ''\ndeviceId = 'e000000000000000'\n\nBaseRequest = {}\n\nContactList = []\nMy = []\n\ndef getUUID():\n    global uuid\n\n    url = 'https://login.weixin.qq.com/jslogin'\n    params = {\n        'appid': 'wx782c26e4c19acffb',\n        'fun': 'new',\n        'lang': 'zh_CN',\n        '_': int(time.time()),\n    }\n\n    request = urllib2.Request(url = url, data = urllib.urlencode(params))\n    response = urllib2.urlopen(request)\n    data = response.read()\n\n    # print data\n\n    # window.QRLogin.code = 200; window.QRLogin.uuid = \"oZwt_bFfRg==\";\n    regx = r'window.QRLogin.code = (\\d+); window.QRLogin.uuid = \"(\\S+?)\"'\n    pm = re.search(regx, data)\n\n    code = pm.group(1)\n    uuid = pm.group(2)\n\n    if code == '200':\n        return True\n\n    return False\n\ndef showQRImage():\n    global tip\n\n    url = 'https://login.weixin.qq.com/qrcode/' + uuid\n    params = {\n        't': 'webwx',\n        '_': int(time.time()),\n    }\n\n    request = urllib2.Request(url = url, data = urllib.urlencode(params))\n    response = urllib2.urlopen(request)\n\n    tip = 1\n\n    f = open(QRImagePath, 'wb')\n    f.write(response.read())\n    f.close()\n\n    if sys.platform.find('darwin') >= 0:\n        os.system('open %s' % QRImagePath)\n    elif sys.platform.find('linux') >= 0:\n        os.system('xdg-open %s' % QRImagePath)\n    else:\n        os.system('call %s' % QRImagePath)\n\n    print '请使用微信扫描二维码以登录'\n\ndef waitForLogin():\n    global tip, base_uri, redirect_uri\n\n    url = 'https://login.weixin.qq.com/cgi-bin/mmwebwx-bin/login?tip=%s&uuid=%s&_=%s' % (tip, uuid, int(time.time()))\n\n    request = urllib2.Request(url = url)\n    response = urllib2.urlopen(request)\n    data = response.read()\n    \n    # print data\n\n    # window.code=500;\n    regx = r'window.code=(\\d+);'\n    pm = re.search(regx, data)\n\n    code = pm.group(1)\n\n    if code == '201': #已扫描\n        print '成功扫描,请在手机上点击确认以登录'\n        tip = 0\n    elif code == '200': #已登录\n        print '正在登录...'\n        regx = r'window.redirect_uri=\"(\\S+?)\";'\n        pm = re.search(regx, data)\n        redirect_uri = pm.group(1) + '&fun=new'\n        base_uri = redirect_uri[:redirect_uri.rfind('/')]\n    elif code == '408': #超时\n        pass\n    # elif code == '400' or code == '500':\n\n    return code\n\ndef login():\n    global skey, wxsid, wxuin, pass_ticket, BaseRequest\n\n    request = urllib2.Request(url = redirect_uri)\n    response = urllib2.urlopen(request)\n    data = response.read()\n\n    # print data\n\n    '''\n        <error>\n            <ret>0</ret>\n            <message>OK</message>\n            <skey>xxx</skey>\n            <wxsid>xxx</wxsid>\n            <wxuin>xxx</wxuin>\n            <pass_ticket>xxx</pass_ticket>\n            <isgrayscale>1</isgrayscale>\n        </error>\n    '''\n\n    doc = xml.dom.minidom.parseString(data)\n    root = doc.documentElement\n\n    for node in root.childNodes:\n        if node.nodeName == 'skey':\n            skey = node.childNodes[0].data\n        elif node.nodeName == 'wxsid':\n            wxsid = node.childNodes[0].data\n        elif node.nodeName == 'wxuin':\n            wxuin = node.childNodes[0].data\n        elif node.nodeName == 'pass_ticket':\n            pass_ticket = node.childNodes[0].data\n\n    # print 'skey: %s, wxsid: %s, wxuin: %s, pass_ticket: %s' % (skey, wxsid, wxuin, pass_ticket)\n\n    if skey == '' or wxsid == '' or wxuin == '' or pass_ticket == '':\n        return False\n\n    BaseRequest = {\n        'Uin': int(wxuin),\n        'Sid': wxsid,\n        'Skey': skey,\n        'DeviceID': deviceId,\n    }\n\n    return True\n\ndef webwxinit():\n\n    url = base_uri + '/webwxinit?pass_ticket=%s&skey=%s&r=%s' % (pass_ticket, skey, int(time.time()))\n    params = {\n        'BaseRequest': BaseRequest\n    }\n\n    request = urllib2.Request(url = url, data = json.dumps(params))\n    request.add_header('ContentType', 'application/json; charset=UTF-8')\n    response = urllib2.urlopen(request)\n    data = response.read()\n\n    if DEBUG == True:\n        f = open(os.getcwd() + '/webwxinit.json', 'wb')\n        f.write(data)\n        f.close()\n\n    # print data\n\n    global ContactList, My\n    dic = json.loads(data)\n    ContactList = dic['ContactList']\n    My = dic['User']\n\n    ErrMsg = dic['BaseResponse']['ErrMsg']\n    if len(ErrMsg) > 0:\n        print ErrMsg\n\n    Ret = dic['BaseResponse']['Ret']\n    if Ret != 0:\n        return False\n        \n    return True\n\ndef webwxgetcontact():\n    \n    url = base_uri + '/webwxgetcontact?pass_ticket=%s&skey=%s&r=%s' % (pass_ticket, skey, int(time.time()))\n\n    request = urllib2.Request(url = url)\n    request.add_header('ContentType', 'application/json; charset=UTF-8')\n    response = urllib2.urlopen(request)\n    data = response.read()\n\n    if DEBUG == True:\n        f = open(os.getcwd() + '/webwxgetcontact.json', 'wb')\n        f.write(data)\n        f.close()\n\n    # print data\n\n    dic = json.loads(data)\n    MemberList = dic['MemberList']\n\n    # 倒序遍历,不然删除的时候出问题..\n    SpecialUsers = ['newsapp', 'fmessage', 'filehelper', 'weibo', 'qqmail', 'fmessage', 'tmessage', 'qmessage', 'qqsync', 'floatbottle', 'lbsapp', 'shakeapp', 'medianote', 'qqfriend', 'readerapp', 'blogapp', 'facebookapp', 'masssendapp', 'meishiapp', 'feedsapp', 'voip', 'blogappweixin', 'weixin', 'brandsessionholder', 'weixinreminder', 'wxid_novlwrv3lqwv11', 'gh_22b87fa7cb3c', 'officialaccounts', 'notification_messages', 'wxid_novlwrv3lqwv11', 'gh_22b87fa7cb3c', 'wxitil', 'userexperience_alarm', 'notification_messages']\n    for i in xrange(len(MemberList) - 1, -1, -1):\n        Member = MemberList[i]\n        if Member['VerifyFlag'] & 8 != 0: # 公众号/服务号\n            MemberList.remove(Member)\n        elif Member['UserName'] in SpecialUsers: # 特殊账号\n            MemberList.remove(Member)\n        elif Member['UserName'].find('@@') != -1: # 群聊\n            MemberList.remove(Member)\n        elif Member['UserName'] == My['UserName']: # 自己\n            MemberList.remove(Member)\n\n    return MemberList\n\ndef createChatroom(UserNames):\n    MemberList = []\n    for UserName in UserNames:\n        MemberList.append({'UserName': UserName})\n\n\n    url = base_uri + '/webwxcreatechatroom?pass_ticket=%s&r=%s' % (pass_ticket, int(time.time()))\n    params = {\n        'BaseRequest': BaseRequest,\n        'MemberCount': len(MemberList),\n        'MemberList': MemberList,\n        'Topic': '',\n    }\n\n    request = urllib2.Request(url = url, data = json.dumps(params))\n    request.add_header('ContentType', 'application/json; charset=UTF-8')\n    response = urllib2.urlopen(request)\n    data = response.read()\n\n    # print data\n\n    dic = json.loads(data)\n    ChatRoomName = dic['ChatRoomName']\n    MemberList = dic['MemberList']\n    DeletedList = []\n    for Member in MemberList:\n        if Member['MemberStatus'] == 4: #被对方删除了\n            DeletedList.append(Member['UserName'])\n\n    ErrMsg = dic['BaseResponse']['ErrMsg']\n    if len(ErrMsg) > 0:\n        print ErrMsg\n\n    return (ChatRoomName, DeletedList)\n\ndef deleteMember(ChatRoomName, UserNames):\n    url = base_uri + '/webwxupdatechatroom?fun=delmember&pass_ticket=%s' % (pass_ticket)\n    params = {\n        'BaseRequest': BaseRequest,\n        'ChatRoomName': ChatRoomName,\n        'DelMemberList': ','.join(UserNames),\n    }\n\n    request = urllib2.Request(url = url, data = json.dumps(params))\n    request.add_header('ContentType', 'application/json; charset=UTF-8')\n    response = urllib2.urlopen(request)\n    data = response.read()\n\n    # print data\n\n    dic = json.loads(data)\n    ErrMsg = dic['BaseResponse']['ErrMsg']\n    if len(ErrMsg) > 0:\n        print ErrMsg\n\n    Ret = dic['BaseResponse']['Ret']\n    if Ret != 0:\n        return False\n        \n    return True\n\ndef addMember(ChatRoomName, UserNames):\n    url = base_uri + '/webwxupdatechatroom?fun=addmember&pass_ticket=%s' % (pass_ticket)\n    params = {\n        'BaseRequest': BaseRequest,\n        'ChatRoomName': ChatRoomName,\n        'AddMemberList': ','.join(UserNames),\n    }\n\n    request = urllib2.Request(url = url, data = json.dumps(params))\n    request.add_header('ContentType', 'application/json; charset=UTF-8')\n    response = urllib2.urlopen(request)\n    data = response.read()\n\n    # print data\n\n    dic = json.loads(data)\n    MemberList = dic['MemberList']\n    DeletedList = []\n    for Member in MemberList:\n        if Member['MemberStatus'] == 4: #被对方删除了\n            DeletedList.append(Member['UserName'])\n\n    ErrMsg = dic['BaseResponse']['ErrMsg']\n    if len(ErrMsg) > 0:\n        print ErrMsg\n\n    return DeletedList\n\ndef main():\n\n    opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookielib.CookieJar()))\n    urllib2.install_opener(opener)\n    \n    if getUUID() == False:\n        print '获取uuid失败'\n        return\n\n    showQRImage()\n    time.sleep(1)\n\n    while waitForLogin() != '200':\n        pass\n\n    os.remove(QRImagePath)\n\n    if login() == False:\n        print '登录失败'\n        return\n\n    if webwxinit() == False:\n        print '初始化失败'\n        return\n\n    MemberList = webwxgetcontact()\n\n    MemberCount = len(MemberList)\n    print '通讯录共%s位好友' % MemberCount\n\n    ChatRoomName = ''\n    result = []\n    for i in xrange(0, int(math.ceil(MemberCount / float(MAX_GROUP_NUM)))):\n        UserNames = []\n        NickNames = []\n        DeletedList = ''\n        for j in xrange(0, MAX_GROUP_NUM):\n            if i * MAX_GROUP_NUM + j >= MemberCount:\n                break\n\n            Member = MemberList[i * MAX_GROUP_NUM + j]\n            UserNames.append(Member['UserName'])\n            NickNames.append(Member['NickName'].encode('utf-8'))\n                        \n        print '第%s组...' % (i + 1)\n        print ', '.join(NickNames)\n        print '回车键继续...'\n        raw_input()\n\n        # 新建群组/添加成员\n        if ChatRoomName == '':\n            (ChatRoomName, DeletedList) = createChatroom(UserNames)\n        else:\n            DeletedList = addMember(ChatRoomName, UserNames)\n\n        DeletedCount = len(DeletedList)\n        if DeletedCount > 0:\n            result += DeletedList\n\n        print '找到%s个被删好友' % DeletedCount\n        # raw_input()\n\n        # 删除成员\n        deleteMember(ChatRoomName, UserNames)\n\n    # todo 删除群组\n\n\n    resultNames = []\n    for Member in MemberList:\n        if Member['UserName'] in result:\n            NickName = Member['NickName']\n            if Member['RemarkName'] != '':\n                NickName += '(%s)' % Member['RemarkName']\n            resultNames.append(NickName.encode('utf-8'))\n\n    print '---------- 被删除的好友列表 ----------'\n    print '\\n'.join(resultNames)\n    print '-----------------------------------'\n\n# windows下编码问题修复\n# http://blog.csdn.net/heyuxuanzee/article/details/8442718\nclass UnicodeStreamFilter:  \n    def __init__(self, target):  \n        self.target = target  \n        self.encoding = 'utf-8'  \n        self.errors = 'replace'  \n        self.encode_to = self.target.encoding  \n    def write(self, s):  \n        if type(s) == str:  \n            s = s.decode('utf-8')  \n        s = s.encode(self.encode_to, self.errors).decode(self.encode_to)  \n        self.target.write(s)  \n          \nif sys.stdout.encoding == 'cp936':  \n    sys.stdout = UnicodeStreamFilter(sys.stdout)\n\nif __name__ == '__main__' :\n\n    print '本程序的查询结果可能会引起一些心理上的不适,请小心使用...'\n    print '回车键继续...'\n    raw_input()\n\n    main()\n\n    print '回车键结束'\n    raw_input()\n友尽\n亲测有效，有 11 个删除我的「好友」，默默归类为 11 个相亲男，还有比我伤的更深的么？\n\n                ", "mainLikeNum": ["10 "], "mainBookmarkNum": "64"}