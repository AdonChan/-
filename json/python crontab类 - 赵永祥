{"title": "python crontab类 - 赵永祥 ", "index": "python", "content": "#/usr/bin/env python\n#-*- coding:utf-8 -*-\n \n\"\"\"\n1.解析 crontab 配置文件中的五个数间参数(分 时 日 月 周)，获取他们对应的取值范围\n2.将时间戳与crontab配置中一行时间参数对比，判断该时间戳是否在配置设定的时间范围内\n\"\"\"\n \n#$Id $\n \nimport re, time, sys\n#from Core.FDateTime.FDateTime import  FDateTime\n \ndef get_struct_time(time_stamp_int):\n    \"\"\"\n    按整型时间戳获取格式化时间 分 时 日 月 周\n    Args:\n        time_stamp_int 为传入的值为时间戳(整形)，如：1332888820\n        经过localtime转换后变成\n        time.struct_time(tm_year=2012, tm_mon=3, tm_mday=28, tm_hour=6, tm_min=53, tm_sec=40, tm_wday=2, tm_yday=88, tm_isdst=0)\n    Return:\n        list____返回 分 时 日 月 周\n    \"\"\"\n \n    st_time = time.localtime(time_stamp_int)\n    return [st_time.tm_min, st_time.tm_hour, st_time.tm_mday, st_time.tm_mon, st_time.tm_wday]\n \n \ndef get_strptime(time_str, str_format):\n    \"\"\"从字符串获取 整型时间戳\n    Args:\n        time_str 字符串类型的时间戳 如 '31/Jul/2013:17:46:01'\n        str_format 指定 time_str 的格式 如 '%d/%b/%Y:%H:%M:%S'\n    Return:\n        返回10位整型(int)时间戳，如 1375146861\n    \"\"\"\n    return int(time.mktime(time.strptime(time_str, str_format)))\n \ndef get_str_time(time_stamp, str_format='%Y%m%d%H%M'):\n    \"\"\"\n    获取时间戳,\n    Args:\n        time_stamp 10位整型(int)时间戳，如 1375146861\n        str_format 指定返回格式，值类型为 字符串 str\n    Rturn:\n        返回格式 默认为 年月日时分，如2013年7月9日1时3分 :201207090103\n    \"\"\"\n    return time.strftime(\"%s\" % str_format, time.localtime(time_stamp))\n \ndef match_cont(patten, cont):\n    \"\"\"\n    正则匹配(精确符合的匹配)\n    Args:\n        patten 正则表达式\n        cont____ 匹配内容\n    Return:\n        True or False\n    \"\"\"\n    res = re.match(patten, cont)\n    if res:\n        return True\n    else:\n        return False\n \ndef handle_num(val, ranges=(0, 100), res=list()):\n    \"\"\"处理纯数字\"\"\"\n    val = int(val)\n    if val >= ranges[0] and val <= ranges[1]:\n        res.append(val)\n    return res\n \ndef handle_nlist(val, ranges=(0, 100), res=list()):\n    \"\"\"处理数字列表 如 1,2,3,6\"\"\"\n    val_list = val.split(',')\n    for tmp_val in val_list:\n        tmp_val = int(tmp_val)\n        if tmp_val >= ranges[0] and tmp_val <= ranges[1]:\n            res.append(tmp_val)\n    return res\n \ndef handle_star(val, ranges=(0, 100), res=list()):\n    \"\"\"处理星号\"\"\"\n    if val == '*':\n        tmp_val = ranges[0]\n        while tmp_val <= ranges[1]:\n            res.append(tmp_val)\n            tmp_val = tmp_val + 1\n    return res\n \ndef handle_starnum(val, ranges=(0, 100), res=list()):\n    \"\"\"星号/数字 组合 如 */3\"\"\"\n    tmp = val.split('/')\n    val_step = int(tmp[1])\n    if val_step < 1:\n        return res\n    val_tmp = int(tmp[1])\n    while val_tmp <= ranges[1]:\n        res.append(val_tmp)\n        val_tmp = val_tmp + val_step\n    return res\n \ndef handle_range(val, ranges=(0, 100), res=list()):\n    \"\"\"处理区间 如 8-20\"\"\"\n    tmp = val.split('-')\n    range1 = int(tmp[0])\n    range2 = int(tmp[1])\n    tmp_val = range1\n    if range1 < 0:\n        return res\n    while tmp_val <= range2 and tmp_val <= ranges[1]:\n        res.append(tmp_val)\n        tmp_val = tmp_val + 1\n    return res\n \ndef handle_rangedv(val, ranges=(0, 100), res=list()):\n    \"\"\"处理区间/步长 组合 如 8-20/3 \"\"\"\n    tmp = val.split('/')\n    range2 = tmp[0].split('-')\n    val_start = int(range2[0])\n    val_end = int(range2[1])\n    val_step = int(tmp[1])\n    if (val_step < 1) or (val_start < 0):\n        return res\n    val_tmp = val_start\n    while val_tmp <= val_end and val_tmp <= ranges[1]:\n        res.append(val_tmp)\n        val_tmp = val_tmp + val_step\n    return res\n \ndef parse_conf(conf, ranges=(0, 100), res=list()):\n    \"\"\"解析crontab 五个时间参数中的任意一个\"\"\"\n    #去除空格，再拆分\n    conf = conf.strip(' ').strip(' ')\n    conf_list = conf.split(',')\n    other_conf = []\n    number_conf = []\n    for conf_val in conf_list:\n        if match_cont(PATTEN['number'], conf_val):\n            #记录拆分后的纯数字参数\n            number_conf.append(conf_val)\n        else:\n            #记录拆分后纯数字以外的参数，如通配符 * , 区间 0-8, 及 0－8/3 之类\n            other_conf.append(conf_val)\n    if other_conf:\n        #处理纯数字外各种参数\n        for conf_val in other_conf:\n            for key, ptn in PATTEN.items():\n                if match_cont(ptn, conf_val):\n                    res = PATTEN_HANDLER[key](val=conf_val, ranges=ranges, res=res)\n    if number_conf:\n        if len(number_conf) > 1 or other_conf:\n            #纯数字多于1，或纯数字与其它参数共存，则数字作为时间列表\n            res = handle_nlist(val=','.join(number_conf), ranges=ranges, res=res)\n        else:\n            #只有一个纯数字存在，则数字为时间 间隔\n            res = handle_num(val=number_conf[0], ranges=ranges, res=res)\n    return res\n \ndef parse_crontab_time(conf_string):\n    \"\"\"\n    解析crontab时间配置参数\n    Args:\n        conf_string   配置内容(共五个值：分 时 日 月 周)\n                      取值范围 分钟:0-59 小时:1-23 日期:1-31 月份:1-12 星期:0-6(0表示周日)\n    Return:\n    crontab_range      list格式，分 时 日 月 周 五个传入参数分别对应的取值范围\n    \"\"\"\n    time_limit    = ((0, 59), (1, 23), (1, 31), (1, 12), (0, 6))\n    crontab_range = []\n    clist = []\n    conf_length = 5\n    tmp_list = conf_string.split(' ')\n    for val in tmp_list:\n        if len(clist) == conf_length:\n            break\n        if val:\n            clist.append(val)\n \n    if len(clist) != conf_length:\n        return -1, 'config error whith [%s]' % conf_string\n    cindex = 0\n    for conf in clist:\n        res_conf = []\n        res_conf = parse_conf(conf, ranges=time_limit[cindex], res=res_conf)\n        if not res_conf:\n            return -1, 'config error whith [%s]' % conf_string\n        crontab_range.append(res_conf)\n        cindex = cindex + 1\n    return 0, crontab_range\n \ndef time_match_crontab(crontab_time, time_struct):\n    \"\"\"\n    将时间戳与crontab配置中一行时间参数对比，判断该时间戳是否在配置设定的时间范围内\n    Args:\n        crontab_time____crontab配置中的五个时间（分 时 日 月 周)参数对应时间取值范围\n        time_struct____ 某个整型时间戳，如：1375027200 对应的 分 时 日 月 周\n    Return:\n    tuple 状态码, 状态描述\n    \"\"\"\n    cindex = 0\n    for val in time_struct:\n        if val not in crontab_time[cindex]:\n            return 0, False\n        cindex = cindex + 1\n    return 0, True\n \ndef close_to_cron(crontab_time, time_struct):\n    \"\"\"coron的指定范围(crontab_time)中 最接近 指定时间 time_struct 的值\"\"\"\n    close_time = time_struct\n    cindex = 0\n    for val_struct in time_struct:\n        offset_min = val_struct\n        val_close = val_struct\n        for val_cron in crontab_time[cindex]:\n            offset_tmp = val_struct - val_cron\n            if offset_tmp > 0 and offset_tmp < offset_min:\n                val_close = val_struct\n                offset_min = offset_tmp\n        close_time[cindex] = val_close\n        cindex = cindex + 1\n    return close_time\n \ndef cron_time_list(\n        cron_time,\n        year_num=int(get_str_time(time.time(), \"%Y\")),\n        limit_start=get_str_time(time.time(), \"%Y%m%d%H%M\"),\n        limit_end=get_str_time(time.time() + 86400, \"%Y%m%d%H%M\")\n    ):\n    #print \"\\nfrom \", limit_start , ' to ' ,limit_end\n    \"\"\"\n    获取crontab时间配置参数取值范围内的所有时间点 的 时间戳\n    Args:\n        cron_time 符合crontab配置指定的所有时间点\n        year_num____指定在哪一年内 获取\n        limit_start 开始时间\n    Rturn:\n        List   所有时间点组成的列表(年月日时分 组成的时间，如2013年7月29日18时56分：201307291856)\n    \"\"\"\n    #按小时 和 分钟组装\n    hour_minute = []\n    for minute in cron_time[0]:\n        minute = str(minute)\n        if len(minute) < 2:\n            minute = '0%s' % minute\n        for hour in cron_time[1]:\n            hour = str(hour)\n            if len(hour) < 2:\n                hour = '0%s' % hour\n            hour_minute.append('%s%s' % (hour, minute))\n    #按天 和 小时组装\n    day_hm = []\n    for day in cron_time[2]:\n        day = str(day)\n        if len(day) < 2:\n            day = '0%s' % day\n        for hour_mnt in hour_minute:\n            day_hm.append('%s%s' % (day, hour_mnt))\n    #按月 和 天组装\n    month_dhm = []\n    #只有30天的月份\n    month_short = ['02', '04', '06', '09', '11']\n    for month in cron_time[3]:\n        month = str(month)\n        if len(month) < 2:\n            month = '0%s' % month\n        for day_hm_s in day_hm:\n            if month == '02':\n                if (((not year_num % 4 ) and (year_num % 100)) or (not year_num % 400)):\n                    #闰年2月份有29天\n                    if int(day_hm_s[:2]) > 29:\n                        continue\n                else:\n                    #其它2月份有28天\n                    if int(day_hm_s[:2]) > 28:\n                        continue\n            if month in month_short:\n                if int(day_hm_s[:2]) > 30:\n                    continue\n            month_dhm.append('%s%s' % (month, day_hm_s))\n    #按年 和 月组装\n    len_start = len(limit_start)\n    len_end = len(limit_end)\n    month_dhm_limit = []\n    for month_dhm_s in month_dhm:\n        time_ymdhm = '%s%s' % (str(year_num), month_dhm_s)\n        #开始时间\\结束时间以外的排除\n        if (int(time_ymdhm[:len_start]) < int(limit_start)) or \\\n         (int(time_ymdhm[:len_end]) > int(limit_end)):\n            continue\n        month_dhm_limit.append(time_ymdhm)\n    if len(cron_time[4]) < 7:\n        #按不在每周指定时间的排除\n        month_dhm_week = []\n        for time_minute in month_dhm_limit:\n            str_time = time.strptime(time_minute, '%Y%m%d%H%M%S')\n            if str_time.tm_wday in cron_time[4]:\n                month_dhm_week.append(time_minute)\n        return month_dhm_week\n    return month_dhm_limit\n \n \n#crontab时间参数各种写法 的 正则匹配\nPATTEN = {\n    #纯数字\n    'number':'^[0-9]+$',\n    #数字列表,如 1,2,3,6\n    'num_list':'^[0-9]+([,][0-9]+)+$',\n    #星号 *\n    'star':'^\\*$',\n    #星号/数字 组合，如 */3\n    'star_num':'^\\*\\/[0-9]+$',\n    #区间 如 8-20\n    'range':'^[0-9]+[\\-][0-9]+$',\n    #区间/步长 组合 如 8-20/3\n    'range_div':'^[0-9]+[\\-][0-9]+[\\/][0-9]+$'\n    #区间/步长 列表 组合，如 8-20/3,21,22,34\n    #'range_div_list':'^([0-9]+[\\-][0-9]+[\\/][0-9]+)([,][0-9]+)+$'\n    }\n#各正则对应的处理方法\nPATTEN_HANDLER = {\n    'number':handle_num,\n    'num_list':handle_nlist,\n    'star':handle_star,\n    'star_num':handle_starnum,\n    'range':handle_range,\n    'range_div':handle_rangedv\n}\n \n \ndef  isdo(strs,tips=None):\n    \"\"\"\n    判断是否匹配成功！\n    \"\"\"\n    try:\n        tips = tips==None and \"文件名称格式错误：job_月-周-天-时-分_文件名.txt\" or tips\n        timer = strs.replace('@',\"*\").replace('%','/').split('_')[1]\n        month,week,day,hour,mins = timer.split('-')\n        conf_string = mins+\" \"+hour+\" \"+day+\" \"+month+\" \"+week\n        res, desc = parse_crontab_time(conf_string)\n        if res == 0:\n            cron_time = desc\n        else:\n            return  False\n \n        now  =FDateTime.now()\n        now =  FDateTime.datetostring(now, \"%Y%m%d%H%M00\")\n \n        time_stamp = FDateTime.strtotime(now, \"%Y%m%d%H%M00\")\n \n        #time_stamp = int(time.time())\n        #解析 时间戳对应的 分 时 日 月 周\n        time_struct = get_struct_time(time_stamp)\n        match_res = time_match_crontab(cron_time, time_struct)\n        return match_res[1]\n    except:\n        print tips\n        return False\n \ndef main():\n    \"\"\"测试用实例\"\"\"\n    #crontab配置中一行时间参数\n    conf_string = '*/10 * * * * (cd /opt/pythonpm/devpapps; /usr/local/bin/python2.5 data_test.py>>output_error.txt)'\n    #conf_string = '*/10 * * * *'\n    #时间戳\n    time_stamp = int(time.time())\n \n    #解析crontab时间配置参数 分 时 日 月 周 各个取值范围\n    res, desc = parse_crontab_time(conf_string)\n \n    if res == 0:\n        cron_time = desc\n    else:\n        print desc\n        sys, exit(-1)\n \n    print \"\\nconfig:\", conf_string\n    print \"\\nparse result(range for crontab):\"\n \n    print \" minute:\", cron_time[0]\n    print \" hour: \", cron_time[1]\n    print \" day: \", cron_time[2]\n    print \" month: \", cron_time[3]\n    print \" week day:\", cron_time[4]\n \n    #解析 时间戳对应的 分 时 日 月 周\n    time_struct = get_struct_time(time_stamp)\n    print \"\\nstruct time(minute hour day month week) for %d :\" % \\\n         time_stamp, time_struct\n \n    #将时间戳与crontab配置中一行时间参数对比，判断该时间戳是否在配置设定的时间范围内\n    match_res = time_match_crontab(cron_time, time_struct)\n    print \"\\nmatching result:\", match_res\n \n    #crontab配置设定范围中最近接近时指定间戳的一组时间\n    most_close = close_to_cron(cron_time, time_struct)\n    print \"\\nin range of crontab time which is most colse to struct \", most_close\n \n    time_list = cron_time_list(cron_time)\n    print \"\\n\\n %d times need to tart-up:\\n\" % len(time_list)\n    print time_list[:10], '...'\n \n \nif __name__ == '__main__':\n    #请看 使用实例\n    main()\n    #strs = 'job_@-@-@-@-@_test02.txt.sh'\n    #print isdo(strs)\n \n    #main()0\")\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}