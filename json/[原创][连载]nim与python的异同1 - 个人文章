{"title": "[原创][连载]nim与python的异同1 - 个人文章 ", "index": "python,nim", "content": "nim与python的异同\n名词:方法与函数同义.仅仅是语言规定差异.在本文中不做区别.\n1. python都是指def定义的处理过程\n2. nim的 proc有返回值, func没有返回值(0.19版之后出现)\n3. c++的[方法(method)]专指类中的函数.\n4. pascal的方法(procedure)指无返回值的处理,函数(function)指有返回值的处理\n5. c中的方法(function)指无返回值的处理,函数(function)指有返回值的处理\n\n主模块的判断\npython\n  if __name__ == “__main__”:\n    pass\nnim\n  if isMainModule:\n    discard\n空代码-为保持缩进的占位符\n\npythonpass\n\nnimdiscard\n\n\n缩进:\n\npython用4个空格\nnim用2个空格\n\n文字串的格式化常用形式:\npython:\n\nprint “hello, %s!”%(“ world”) #python2print(“hello, %s!”%(“ world”)) #python3print(“hello, {}!”.format(“ world”)) #python3\nprint(\"hello, {0}! your name is {1}.\".format(\" world\",\"rock\")) #python3\n\nnim也有类似用法:\n\necho(“hello, $1!” % “ world”)或者不加括号也可以echo “hello, $1!” % “ world”\necho \"Hello, $2! your name is $1.\" % [\"rock\",\"world\"]   #输出顺序变化了\n\nnim里文字串的操作符%不是默认操作符,需要在使用前引入strutils包.否则不能使用,在编译时会报错.import strutils这样就会给为文字串增加很多功能, 比如上面的%操作符\n方法调用:\n\npython是传统的[对象.方法]调用写法\nnim 既可以用传统OOP风格的[对象.方法],也可以用[方法(对象)/方法 对象]调用,这被称为UFCS(Uniform Function Call Syntax-通用方法调用语法).后一种风格类似C或pascal等命令/指令编程语言,两者效力与结果相同, 比较灵活.\n\nUFCS\n\n\n要求方法(proc)或函数(func)的第一个参数是要操作的类型.\nproc len2(value:string):int =\n    处理过程省略\nlet a = “” #a的类型自动推导. 等同于 let a:string = \"\"\nlen2(a) == a.len2 #nim可以不写函数调用的括号\n\n类的方法(proc/func/method)要求第一个参数是类的类型.\n\n\n\npython\nclass Person:\n    def makelove(self, spouse)→Person: # python3写法\n        省略\nperson = Person()\nbaby = person.makelove(spouse)\n\n\nnim\ntype\n    Person = object\n\nproc makelove(self:Person, spouse:Spouse):Person =\n    省略\nperson = Person()\nbaby = person.makelove(spouse)\n#或者\nbaby = makelove(person)\n\n\n模块导入\npython\n\n\nimport os\nos.exists(“./testfile”)\n\n\nfrom os import *\n导入该模块下的所有内容exists(“.testfile”) # 这里使用os模块内的函数[exists]不需要加上模块名前缀\n\nimport json as jn #将模块引入后起个别名使用\nfrom os import path\nfrom os import path as syspath\n\nnim\n\n\nfrom os import nil #等同于python的[import os].这里不导入模块内的内容,而只是将模块本身导入.\nos.existsFile(“./testfile”)如果不加上[import nil]那么默认是导入该模块下的所有内容,而不需要在调用之前加上模块名\n\n\n\nimport os\nimport os # 这里导入os模块existsFile(“.testfile”) # 这里直接使用os模块内的函数[existsFile].等同于python的[from os import *]\n\nimport parseutils as pu import nil #将模块引入后起个别名使用\nfrom os import existsFile\nfrom os import existsFile as exfile\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}