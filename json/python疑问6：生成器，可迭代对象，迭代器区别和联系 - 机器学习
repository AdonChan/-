{"title": "python疑问6：生成器，可迭代对象，迭代器区别和联系 - 机器学习 ", "index": "python", "content": "生成器，可迭代对象，迭代器之间究竟是什么关系？用一幅图来概括：\n1.生成器定义生成器方式一：\n//区别于列表生成式 gen = [x*x for x in range(5)]\ngen = (x*x for x in range(5)) \nprint(gen)  //Out:<generator object <genexpr> at 0x00000258DC5CD8E0>\n方式二：\ndef fib():\n    prev, curr = 0, 1\n    while True:\n        yield curr\n        prev, curr = curr, curr + prev\nf = fib()\nprint(f) //Out:<generator object fib at 0x00000258DC5CD150>\n定义成功后，我们可以利用next()访问生成器下一个元素\nprint(next(gen)) //0\nprint(next(gen)) //1\n...\nprint(next(gen)) //16\nprint(next(gen)) //StopIteration\n但一般用for循环遍历\nfor n in gen:\n    print(n) //0  1  4   9  16\n2.迭代器任何实现了__iter__和__next__()方法的对象都是迭代器。__iter__返回迭代器自身，__next__返回容器中的下一个值。所以生成器是特殊的迭代器，她内部具有这两种方法。一个自定义的迭代器如下：\nclass Fib:\n    def __init__(self):\n        self.prev = 0\n        self.curr = 1\n \n    def __iter__(self):\n        return self\n \n    def __next__(self):\n        value = self.curr\n        self.curr += self.prev\n        self.prev = value\n        return value\nf = Fib() \ncount = 1 \nfor n in f:\n    print(n)\n    count = count+1\n    if count>=10:\n        break\n//Out:1 1 2 3 5 8 13 21 34\n3.可迭代对象像list,tuple,set,dict,str等可以直接作用于for循环的对象，称为可迭代对象。可迭代对象实现了__iter__方法,用于返回迭代器。\ndemo = [1,2,3,4]\nprint(isinstance(demo, Iterable)) //True\niter_object = iter(demo)\nprint(iter_object) //<list_iterator object at 0x00000258DC5EF748>\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}