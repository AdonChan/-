{"title": "管理python程序的db schema - pythoner ", "index": "python", "content": "本人是个Pythoner，曾经对ruby嗤之以鼻，但每种语言都有自己的擅长方向，不能一味的否定一门语言。在维护一个采用ruby on rails框架的项目过程中，发现rails很多优点，这些都可以借鉴到python程序中：\n\ndb schema migration\n远程部署到指定环境\n\n本篇主要关注的是 db schema migration，在下一篇中将会介绍远程部署python程序。db migration主要使用rails和rake两个命令，下面的demo是运行在Mac OS上。\n环境准备\n\ngit clone https://github.com/flying-bir...\ncd python-db-schem; sudo gem install bundler\nbundle install\n\nCreate Table\n生成db文件，相当于sql文件\n命令：\n    ./bin/rails generate migration CreateJobTable\n输出：\n    db/migrate文件夹下面生成 {timestamp}_create_job_table.rb\n在上步生成的文件中，写入具体的sql内容\n采用如下格式：\nclass CreateJobTable < ActiveRecord::Migration\n  def change\n    create_table :d_job do |t|\n          t.string :name\n          t.string :path\n          t.string :team\n          t.references :pipeline\n          t.string :function\n          t.text :url\n          t.integer :exclude,default:0\n    end\n    add_foreign_key :d_job, :d_pipeline, column: :pipeline_id\n  end\nend\nApply SQL File\n命令：\n./bin/rake db:migrate\n运行上面的命令之后，将会在本地的db中创建出一个d_job表。使用mysql的show create table来查看d_job的具体信息：\nmysql> show create table d_job \\G\n*************************** 1. row ***************************\n       Table: d_job\nCreate Table: CREATE TABLE `d_job` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `name` text,\n  `path` text,\n  `team` text,\n  `pipeline_id` int(11) DEFAULT NULL,\n  `function` varchar(120) DEFAULT NULL,\n  `exclude` int(11) DEFAULT '0',\n  PRIMARY KEY (`id`),\n  KEY `pipeline_id` (`pipeline_id`),\n  CONSTRAINT `d_job_ibfk_1` FOREIGN KEY (`pipeline_id`) REFERENCES `d_pipeline` (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=186 DEFAULT CHARSET=latin1\n1 row in set (0.00 sec)\nRollback\n运行下面的命令之后，上一步的db命令将会回滚，即drop table d_job\n./bin/rake db:rollback  STEP=1\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}