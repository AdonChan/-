{"title": "Head First Python 学习心得（1-6章） - 程序员的自我修养 ", "index": "python", "content": "写在前面：“吾尝终日而思矣，不如须臾之所学也；吾尝跂而望矣，不如登高之博见也。登高而招，臂非加长也，而见者远；顺风而呼，声非加疾也，而闻者彰。假舆马者，非利足也，而致千里；假舟楫者，非能水也，而绝江河。君子生非异也，善假于物也。”十几年的默默学习，而今希望更多是对自己知识的一个总结反思积累，能够探讨进步更是求之不得。虽然现在coding能力有限，但所幸站在巨人肩膀上，可总有一天，我也能成为巨人。   一篇简单python入门学习开始，作为自己千里之行第一步，sf.gg平台的第一次尝试。\n第一章 对于列表的理解\n\npython中的列表可以实现对各种数据的组织:movies=['The Holy Grail','The life of brain','The meaning of life',2017，['dog','cat','duck']]包括数字,字符串和列表，但数字和字符的组合只能包含在字符串之中。列表中数据项的调用：print(movies[1]) 显示\"The life of brain\"下面列出一些关于list类列表的BIF：len(movies)输出列表中的数据项个数。movies.append('')在列表末尾添加单个数据项。movies.extend(['',''])在列表末尾增加一个数据项集合。movies.pop(n)在指定位置删除并返回这个数据项，注意这里是有返回项的。movies.remove('')移除某一个特定数据项。insert('')在特定位置增加一个数据项。isinstance(name,list)检查某个标识符（name）是否属于某种类型（例如list）。list()产生一个空列表的工厂函数。range() 根据需要生成一个范围的数字，常用于循环次数int()将一个字符串或一个数字转换为整数\n----自己入门一定是从点到面的，因此这里并不是很全面的总结，希望以后更加完善。\n关于python中的逻辑\n迭代语句：：\nfor each_file in movies:\n    print(each_file)         \n其中 each_file 是我们自己为列表中的数据项定义的名字。\ncount = 0\nwhile count < len(movies）：\n    print(movies[1])\n    count = count + 1\n这里建议只要是能用for语句尽量用for语句。\n判断语句：\nif isinstance(each_item,list):\n    print(each_item)\nelse:\n   print('none')   \n这里与c语言并无明显区别，多重判断加入elif。\n创建自定义函数\ndef print_lol(the_list):\n    xxxx\n    xxxxx\n    \n自定义函数还有较多注意地方，在后续内容中有所提及。\n第二章 发布并上传代码到pypi\n在查阅大量资料发布和上传pypi还有很多附属文件需要编写和上传以确保模块能够正常发布和更新。这里只写了文中提到的能够保证发布和上传的最必要的几个步骤，未来可能会专门写一篇关于发布详细文章。\n发布\n1.为模块传建一个与模块文件（.py）相同名字的文件夹(例如：cat)，并把文件放进去。 2.创建setup.py文件\nfrom distutils.core import setup\n\nsetup(\n    name = 'cat', \n    version = '1.0.0',  \n    py_modules = ['cat'], \n    author = 'davystokess',  \n    author_email = 'xxxxx', \n    url = 'http://www.xxxx.com', \n    description = 'A simple example'\n      ) \n\nsetup文件是为你的模块做出说明\n3.发布 在此文件夹空白处 shift+右键 打开命令窗口输入： 4.安装到本地文件： 5.尝试导入并使用模块：\nimport cat\n\ncat.print_lol(xxx)\n其中cat.print_lol涉及命名空间，如果使用\nfrom cat import print_lol\nprint_lol(xx)\n则print_lol可以直接使用。\n上传到pypi\n书中的方法在我使用的3.6.2版本已经无法使用（仅限本人）。这里使用官方推荐方式：\npy -m pip install twine   # 安装twine，必须有py -m 前缀否则无法使用，具体啥意思我也不知道（待改）\n\npy -m twine upload dist/*  #利用twine上传\n小体会:（不保证完全正确）\n\n上传的模块名字不能与已经上传的名字相同，否则会上传失败\n上传本人无法建立有效的.pypirc文件 因此每次上传都需要输入账号密码（待学习）\n再上传更新版本的时候需要模块重新发布。但需要删除dist文件夹的上一个版本的xxx.tar 文件否则会显示上传已经存在\n注释有两种（1）是 # 注释一整行 （2）'''xxx'''注释一段\n对于函数使用具有缺省值的参数例如 def print_lol(the_list,level=0)\n\n\nend=' '作为print函数参数可以关闭默认的自动换行\n列表项目\n\n第三章 文件与异常\n文件\n文件的打开：data = open(sketch.text,'wb')   sketch.text是某一个文件，方式有'r''rb''w''wb''w+''a'分别代表读，二进制读,写二进制写,读和写，追加写入。注意data并不是一个列表，w会清空现有文件再写入，没有文件则会创建一个文件。\n显示python当前工作文件夹，更改工作文件夹：\nimport os\nos.getcwd()\nos chdir(F:\\code\\python)\nxxx.split(','n)将xxx（一个数据项，或者一个列表等)中的数据依据','分为一个个数据项,n为分隔的个数，n=1则意味着在第一个，处将数据分为两半；不设置则有x个，分为x+1项的列表xxx.readline()读取xxx一个数据行（待改）xxx.find('n')寻找xxx数据中是否存在n 是返回参数：个数如10；否返回参数-1xxx.seek()用来是文件恢复到初始位置not将所得结果取反 xxx.close()将文件关闭\n处理异常\n举例：\nman=[]\nother=[]\ntry:\n    data=open('sketch.txt')\n    for each_line in data:\n        try:\n            (role,line_spoken)=each_line.split(':',1)\n            line_spoken= line_spoken.strip\n            if role=='Man':\n                man.append(line_spoken)\n            elif role=='Other Man':\n                other.append(line_spoken)\n        except ValueError:\n            pass\n    data.close()\nexcept IOError:\n    print('The data file is missing!')\ntry:\n    man_file=open('man_data.txt','w')\n    other_file=open('other_data.txt','w')\n\n    print(man,file=man_file)\n    print(other,file=other_file)\nexcept IOError as err:\n    print('File error:'+str(err)) #通过这种方式可以将问题反馈给我们，用来分析错误类型\nfinally：\n    man_file.close()\n    other_file.close()    \ntry语句用来执行正常模块处理功能，except语句用来处理可能出现的错误：例如找不到指定文件或者数据类型不对等等；finally语句用来处理一定要执行语句。\n第四章 将数据保存到文件\nprint('',file = file_name)将数据写入文件\ntry:\n    with open('man_data.txt','w') as man_file:   #注意形式\n        print_lol(man,fh=man_file)\n    with open('other_data.txt','w') as other_file:\n        print_lol(other,fh=other_file) \nexcept IOError as err:\n    print('File error:'+str(err))\n使用with open() as xxx:语句可以妥善文件的开关\nimport pickle\ntry:\n    with open('man_data.txt','wb') as man_file,open('other_data.txt','wb') as other_file:\n    #注意创建储存的文件是xxxx.pickle或xxx.txt格式都可以\n        pickle.dump(man,man_file)\n        pickle.dump(other,other_file)\nexcept IOError as err:\n    print('file error:'+str(err))\nexcept pickle.PickleError as perr:\n    print('Pickleing error:'+ste(perr))\n\nnew_man=[]\n\n\nwith open('man_data.txt','rb') as man_file:\n    new_man=pickle.load(man_file)\nprint_lol(new_man)\n呵呵 使用pickle.dump(数据，文件名)可以将数据压缩保存；使用pickle.load(数据名)可以将数据提取出来。注意写，读打开方式是wb和rb 。\n第五章  处理数据\ndef get_coach_data(filename):\n    with open(filename) as f:\n        data=f.readline()\n        return(data.strip().split(','))  \n#方法串链 从左往右读 特点以点为分隔，（）中无包含关系\n对于第五章的数据（只有计时数据）进行处理 打开-读取（变为列表但只有一项？）-去空格-以'，'为分隔变为多个数据项的列表返回。\ndef sanitize(time_string):\n    if '-' in time_string:\n        splitter='-'\n    elif ':' in time_string:\n        splitter=':'\n    else:\n        return(time_string)\n    (mins,secs)= time_string.split(splitter)\n    return(mins+'.'+secs)\n自定义sanitize函数用于将数据中的'-'':'都变为'.'。\n print(sorted(set([sanitize(t) for t in james]))[0:3])包含函数串链，特点是（）中包含函数。一种写代码的方式：列表推导 自行体会。但其中的set（）函数是将数据（无论是导入的还是列表数据）转换为一个集合，这样就可以去除数据中的重复项。\n第六章  打包代码和数据\n当数据发生改变（增加或者减少类型）时，使用 字典 使用字典会非常方便：\ndef get_coach_data(filename):\n    with open(filename) as f:\n        data=f.readline().strip().split(',')\n        data1={}\n        data1['name']=data.pop(0)\n        data1['DOB'] =data.pop(0)\n        data1['Times']=str(sorted(set([sanitize(t) for t in data]))[0:3])\n    return(data1)\nsarah = get_coach_data('sarah2.txt')\nprint(sarah['name']+\"'s fastest time are:\"+sarah['Times'])\n# 对字典的调用例如sarah['name']，方式简单实用。\n这里面get_coach_data()函数创建并处理数据追中返回一个字典，对字典的调用。\n但将数据与代码打包在一起是更好的，函数与数据关联才有意义，因此引入类的使用:\nclass Athlete:\n    def __init__(self,a_name,a_dob=None,a_times= [ ]): \n    #  __init__这里一定要注意 两个短横线 \n        self.name =a_name\n        self.dob = a_dob\n        self.times=a_times\n    def top3(self):\n        return(sorted(set([sanitize(t) for t in self.times]))[0:3])\n    def add_time(self,time_value):\n        self.times.append(time_value)\n    def add_times(self,list_of_times):\n        self.times.extend(list_of_times)\n这里涉及了‘定制类’的创建例子，注意其中的赋值与扩展方法。\ndef sanitize(time_string):\n    if '-' in time_string:\n        splitter='-'\n    elif ':' in time_string:\n        splitter=':'\n    else:\n        return(time_string)\n    (mins,secs)= time_string.split(splitter)\n    return(mins+'.'+secs)\n#此处是重点  注意观察一定制类的不同\nclass Athletelist(list):\n# 注意（）中的是你将派生的类的类型\n    def __init__(self,a_name,a_dob=None,a_times= []):\n        list.__init__([])\n        self.name =a_name\n        self.dob = a_dob\n        self.extend(a_times)\n    def top3(self):\n        return(sorted(set([sanitize(t) for t in self]))[0:3])\n\n        \ndef get_coach_data(filename):\n    with open(filename) as f:\n        data = f.readline().strip().split(',')\n    return(Athletelist(data.pop(0),data.pop(0),data))\n    #注意观察类的调用方式\n        \nsarah = get_coach_data('sarah2.txt')\nprint(sarah.name+\"'s fastest time are:\"+str(sarah.top3()))\n\nvera= Athletelist('vera vi')\nvera.extend(['1.31','1-21','2:22'])\n\nprint(vera.top3())\n这里涉及了子类的创建方法，不仅包含编写的功能，还包含list本身的功能。\n小结：小小入门。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "4"}