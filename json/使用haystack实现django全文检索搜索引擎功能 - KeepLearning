{"title": "使用haystack实现django全文检索搜索引擎功能 - KeepLearning ", "index": "haystack,django,python", "content": "前言\ndjango是python语言的一个web框架，功能强大。配合一些插件可为web网站很方便地添加搜索功能。\n搜索引擎使用whoosh，是一个纯python实现的全文搜索引擎，小巧简单。\n中文搜索需要进行中文分词，使用jieba。\n直接在django项目中使用whoosh需要关注一些基础细节问题，而通过haystack这一搜索框架，可以方便地在django中直接添加搜索功能，无需关注索引建立、搜索解析等细节问题。\nhaystack支持多种搜索引擎，不仅仅是whoosh，使用solr、elastic search等搜索，也可通过haystack，而且直接切换引擎即可，甚至无需修改搜索代码。\n配置搜索\n1.安装相关包\npip install django-haystack\npip install whoosh\npip install jieba\n\n2.配置django的settings\n修改settings.py文件，添加haystack应用：\nINSTALLED_APPS = (\n    ...\n    'haystack', #将haystack放在最后\n)\n\n在settings中追加haystack的相关配置：\nHAYSTACK_CONNECTIONS = {\n    'default': {\n        'ENGINE': 'haystack.backends.whoosh_cn_backend.WhooshEngine',\n        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),\n    }\n}\n\n# 添加此项，当数据库改变时，会自动更新索引，非常方便\nHAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'\n\n3.添加url\n在整个项目的urls.py中，配置搜索功能的url路径：\nurlpatterns = [\n    ...\n    url(r'^search/', include('haystack.urls')),\n]\n\n4.在应用目录下，添加一个索引\n在子应用的目录下，创建一个名为 search_indexes.py 的文件。\nfrom haystack import indexes\n# 修改此处，为你自己的model\nfrom models import GoodsInfo\n\n# 修改此处，类名为模型类的名称+Index，比如模型类为GoodsInfo,则这里类名为GoodsInfoIndex\nclass GoodsInfoIndex(indexes.SearchIndex, indexes.Indexable):\n    text = indexes.CharField(document=True, use_template=True)\n\n    def get_model(self):\n        # 修改此处，为你自己的model\n        return GoodsInfo\n\n    def index_queryset(self, using=None):\n        return self.get_model().objects.all()\n\n说明：1）修改上文中三处注释即可2）此文件指定如何通过已有数据来建立索引。get_model处，直接将django中的model放过来，便可以直接完成索引啦，无需关注数据库读取、索引建立等细节。3）text=indexes.CharField一句，指定了将模型类中的哪些字段建立索引，而use_template=True说明后续我们还要指定一个模板文件，告知具体是哪些字段\n5.指定索引模板文件\n在项目的“templates/search/indexes/应用名称/”下创建“模型类名称_text.txt”文件。\n例如，上面的模型类名称为GoodsInfo,则创建goodsinfo_text.txt（全小写即可），此文件指定将模型中的哪些字段建立索引，写入如下内容：（只修改中文，不要改掉object）\n{{ object.字段1 }}\n{{ object.字段2 }}\n{{ object.字段3 }}\n\n6.指定搜索结果页面\n在templates/search/下面，建立一个search.html页面。\n<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n</head>\n<body>\n{% if query %}\n    <h3>搜索结果如下：</h3>\n    {% for result in page.object_list %}\n        <a href=\"/{{ result.object.id }}/\">{{ result.object.gName }}</a><br/>\n    {% empty %}\n        <p>啥也没找到</p>\n    {% endfor %}\n\n    {% if page.has_previous or page.has_next %}\n        <div>\n            {% if page.has_previous %}<a href=\"?q={{ query }}&amp;page={{ page.previous_page_number }}\">{% endif %}&laquo; 上一页{% if page.has_previous %}</a>{% endif %}\n        |\n            {% if page.has_next %}<a href=\"?q={{ query }}&amp;page={{ page.next_page_number }}\">{% endif %}下一页 &raquo;{% if page.has_next %}</a>{% endif %}\n        </div>\n    {% endif %}\n{% endif %}\n</body>\n</html>\n7.使用jieba中文分词器\n在haystack的安装文件夹下，路径如“/home/python/.virtualenvs/django_py2/lib/python2.7/site-packages/haystack/backends”，建立一个名为ChineseAnalyzer.py的文件，写入如下内容：\nimport jieba\nfrom whoosh.analysis import Tokenizer, Token\n\n\nclass ChineseTokenizer(Tokenizer):\n    def __call__(self, value, positions=False, chars=False,\n                 keeporiginal=False, removestops=True,\n                 start_pos=0, start_char=0, mode='', **kwargs):\n        t = Token(positions, chars, removestops=removestops, mode=mode,\n                  **kwargs)\n        seglist = jieba.cut(value, cut_all=True)\n        for w in seglist:\n            t.original = t.text = w\n            t.boost = 1.0\n            if positions:\n                t.pos = start_pos + value.find(w)\n            if chars:\n                t.startchar = start_char + value.find(w)\n                t.endchar = start_char + value.find(w) + len(w)\n            yield t\n\n\ndef ChineseAnalyzer():\n    return ChineseTokenizer()\n8.切换whoosh后端为中文分词\n将上面backends目录中的whoosh_backend.py文件，复制一份，名为whoosh_cn_backend.py，然后打开此文件，进行替换：\n# 顶部引入刚才添加的中文分词\nfrom .ChineseAnalyzer import ChineseAnalyzer \n\n# 在整个py文件中，查找\nanalyzer=StemmingAnalyzer()\n全部改为改为\nanalyzer=ChineseAnalyzer()\n总共大概有两三处吧\n\n9.生成索引\n手动生成一次索引：\npython manage.py rebuild_index\n\n10.实现搜索入口\n在网页中加入搜索框：\n<form method='get' action=\"/search/\" target=\"_blank\">\n    <input type=\"text\" name=\"q\">\n    <input type=\"submit\" value=\"查询\">\n</form>\n丰富的自定义\n\n上面只是快速完成一个基本的搜索引擎，haystack还有更多可自定义，来实现个性化的需求。\n参考官方文档：http://django-haystack.readth...\n\n自定义搜索view\n上面的配置中，搜索相关的请求被导入到haystack.urls中，如果想自定义搜索的view，实现更多功能，可以修改。\nhaystack.urls中内容其实很简单，\nfrom django.conf.urls import url  \nfrom haystack.views import SearchView  \n  \nurlpatterns = [  \n    url(r'^$', SearchView(), name='haystack_search'),  \n]  \n\n那么，我们写一个view，继承自SearchView，即可将搜索的url导入到自定义view中处理啦。\nclass MySearchView(SearchView):\n# 重写相关的变量或方法\ntemplate = 'search_result.html'\n\n查看SearchView的源码或文档，了解每个方法是做什么的，便可有针对性地进行修改。比如，上面重写了template变量，修改了搜索结果页面模板的位置。\n高亮\n在搜索结果页的模板中，可以使用highlight标签（需要先load一下）\n{% highlight <text_block> with <query> [css_class \"class_name\"] [html_tag \"span\"] [max_length 200] %}\n\ntext_block即为全部文字，query为高亮关键字，后面可选参数，可以定义高亮关键字的html标签、css类名，以及整个高亮部分的最长长度。\n高亮部分的源码位于 haystack/templatetags/lighlight.py 和 haystack/utils/lighlighting.py文件中，可复制进行修改，实现自定义高亮功能。\nref.\n\nhttp://django-haystack.readth...\nhttp://blog.csdn.net/ac_hell/...\n\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "7"}