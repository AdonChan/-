{"title": "【翻译】用AIML实现的Python人工智能聊天机器人 - 麦芽面包 ", "index": "python", "content": "前言\n用python的AIML包很容易就能写一个人工智能聊天机器人。 AIML是Artificial Intelligence Markup Language的简写， 但它只是一个简单的XML。 下面的代码例子会带你写一个你自己的Python人工智能聊天机器人。\n什么是AIML？\nAIML是Richard Wallace开发的。 他开发了一个叫A.L.I.C.E（Artificial Linguistics Internet Computer Entity）的机器人并且赢了几个人工智能的奖项。 有趣的是， 其中一个图灵测试是让一个人在文本界面跟一个机器人聊几分钟，看看人们是否认为它是个人类。 AIML是一种定义了匹配模式和决定响应的规则的一种XML。\n要看完整的AIML入门，可以看一下 Alice Bot's AIML Primer.你可以在AIML wiki页学更多关于AIML的知识并知道它能做什么。 我们先写一些AIML文件并用Python给它一点生命。\n写标准启动文件\n标准是写一个叫std-startup.xml的启动文件作为载入AIML文件的主入口点。 这个例子里我们会写一个可以匹配一个模式并做一个动作的基本文件。 我们想要匹配模式load aiml b， 然后让它载入我们的aiml大脑。我们会花一分钟写一个basic_chat aiml文件。\n<aiml version=\"1.0.1\" encoding=\"UTF-8\">\n    <!-- std-startup.xml -->\n\n    <!-- Category is an atomic AIML unit -->\n    <category>\n\n        <!-- Pattern to match in user input -->\n        <!-- If user enters \"LOAD AIML B\" -->\n        <pattern>LOAD AIML B</pattern>\n\n        <!-- Template is the response to the pattern -->\n        <!-- This learn an aiml file -->\n        <template>\n            <learn>basic_chat.aiml</learn>\n            <!-- You can add more aiml files here -->\n            <!--<learn>more_aiml.aiml</learn>-->\n        </template>\n        \n    </category>\n\n</aiml>\n写AIML文件\n上面我们写了一个只处理一种模式的AIML文件，load aiml b。当我们输入那条命令给机器人，它会加载basic_chat.aiml。当我们没写这个文件的时候是不会工作的。这里是你可以放到basic_chat.aiml的内容。我们会匹配两个基本模式和响应。\n<aiml version=\"1.0.1\" encoding=\"UTF-8\">\n<!-- basic_chat.aiml -->\n\n    <category>\n        <pattern>HELLO</pattern>\n        <template>\n            Well, hello!\n        </template>\n    </category>\n    \n    <category>\n        <pattern>WHAT ARE YOU</pattern>\n        <template>\n            I'm a bot, silly!\n        </template>\n    </category>\n    \n</aiml>\n随机回复\n我们也可以加一些随机回复。这条在它收到一个以“One time I\"开始的消息时会随机回复。 *是一个占位符代表能匹配任何字符。\n<category>\n    <pattern>ONE TIME I *</pattern>\n    <template>\n        <random>\n            <li>Go on.</li>\n            <li>How old are you?</li>\n            <li>Be more specific.</li>\n            <li>I did not know that.</li>\n            <li>Are you telling the truth?</li>\n            <li>I don't know what that means.</li>\n            <li>Try to tell me that another way.</li>\n            <li>Are you talking about an animal, vegetable or mineral?</li>\n            <li>What is it?</li>\n        </random>\n    </template>\n</category>\n用现成的AIML文件\n写自己的AIML文件很有意思，但会是个很大的工作量。我想它需要大约一万的模式才能看起来真实一点。幸好，ALICE基金提供很多免费的AIML文件。可以在Alice Bot网站看看AIML文件。那有个叫std-65-percent.xml文件包括了常规65%的场景。那也有一个可以让你玩21点（BlackJack）的机器人。\n写Python\n到目前为止，所有的东西都是AIML XML文件。这些是可以构造机器人大脑的重要部分，但这些只是一些信息。机器人需要变活。你需要用一些语言来实现AIML规范，但一些好心人已经用Python做了。\n先用pip装aiml包。\npip install aiml\n记住aiml包只能在Python 2下用。 Python 3可以用GitHub上的Py3kAiml替代。\n简单Python程序\n这是我们能启动的最简单的程序。它建一个aiml对象，学习启动文件，并加载剩下的aiml文件。这之后，就可以聊天了，然后我们进入一个无限循环并持续让用户输入消息。你需要输入一个机器人能识别的模式。模式识别依赖于你之前加载的AIML文件。\n我们写个单独的启动文件，这样我们可以不用动程序源码加载更多的aiml文件。我们可以在启动xml文件加更多的文件来学习。\nimport aiml\n\n# Create the kernel and learn AIML files\nkernel = aiml.Kernel()\nkernel.learn(\"std-startup.xml\")\nkernel.respond(\"load aiml b\")\n\n# Press CTRL-C to break this loop\nwhile True:\n    print kernel.respond(raw_input(\"Enter your message >> \"))\n加速大脑启动\n当你有很多AIML文件，这需要学很长时间。这就要靠机器人大脑文件了。在机器人学习了所有的AIML文件后并可以直接把大脑存到一个文件里，这样在下次启动时就可以直接加速。\nimport aiml\nimport os\n\nkernel = aiml.Kernel()\n\nif os.path.isfile(\"bot_brain.brn\"):\n    kernel.bootstrap(brainFile = \"bot_brain.brn\")\nelse:\n    kernel.bootstrap(learnFiles = \"std-startup.xml\", commands = \"load aiml b\")\n    kernel.saveBrain(\"bot_brain.brn\")\n\n# kernel now ready for use\nwhile True:\n    print kernel.respond(raw_input(\"Enter your message >> \"))\n运行中重载AIML\n你可以在运行时发重载消息给机器人来重载AIML文件。记住如果你使用了之前写的大脑方法，重载不会节省刚对大脑做的改动。你需要删除大脑文件一遍下次启动时可以重建，或者你需要改代码让机器人在下次重载后的一个时间点来保存大脑。看下节写Python命令给机器人。\nload aiml b\n加Python命令\n如果你要给你的机器人加一些命令来运行Python函数，那你需要捕获机器人的输入信息并在发给kernel.respond()前处理它。上个例子我们从raw_input得到了用户的输入。我们可以从很多地方得到输入。比如一个TCP socket，或一个语音转文本的源。在它发给AIML前处理它。你需要在某些消息时跳过AIML。\nwhile True:\n    message = raw_input(\"Enter your message to the bot: \")\n    if message == \"quit\":\n        exit()\n    elif message == \"save\":\n        kernel.saveBrain(\"bot_brain.brn\")\n    else:\n        bot_response = kernel.respond(message)\n        # Do something with bot_response\n会话和断言\n通过一个会话，AIML可以区分不同人的不同的对话。例如，如果一个人告诉机器人她的名字是Alice，另一个人告诉机器人他的名字是Bob，机器人可以区分他们。为了指定你在用哪个会话你可以传给respond()第二个参数。\nsessionId = 12345\nkernel.respond(raw_input(\">>>\"), sessionId)\n这样每个客户都有个性化的聊天，很好。你可以生成你自己的session id（会话id）并跟踪他们。记住保存大脑文件并不会保存所有会话值。\nsessionId = 12345\n\n# Get session info as dictionary. Contains the input\n# and output history as well as any predicates known\nsessionData = kernel.getSessionData(sessionId)\n\n# Each session ID needs to be a unique value\n# The predicate name is the name of something/someone\n# that the bot knows about in your session with the bot\n# The bot might know you as \"Billy\" and that your \"dog\" is named \"Brandy\"\nkernel.setPredicate(\"dog\", \"Brandy\", sessionId)\nclients_dogs_name = kernel.getPredicate(\"dog\", sessionId)\n\nkernel.setBotPredicate(\"hometown\", \"127.0.0.1\")\nbot_hometown = kernel.getBotPredicate(\"hometown\")\n在AIML中我们可以在模板中设置response来设置断言。\n<aiml version=\"1.0.1\" encoding=\"UTF-8\">\n   <category>\n      <pattern>MY DOGS NAME IS *</pattern>\n      <template>\n         That is interesting that you have a dog named <set name=\"dog\"><star/></set>\n      </template>  \n   </category>  \n   <category>\n      <pattern>WHAT IS MY DOGS NAME</pattern>\n      <template>\n         Your dog's name is <get name=\"dog\"/>.\n      </template>  \n   </category>  \n</aiml>\n用上面的AIML你可以告诉机器人：\nMy dogs name is Max\n然后机器人会回复：\nThat is interesting that you have a dog named Max\n如果你问：\nWhat is my dogs name?\n机器人会回答：\nYour dog's name is Max.\n更多资料\nAIML Tag Reference Table\n原文：http://www.devdungeon.com/con...\n\n本文来自微信平台「麦芽面包」微信公众号「darkjune_think」转载请注明。微信扫一扫关注公众号。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "10"}