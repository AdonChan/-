{"title": "Python全栈之路系列之赋值与运算符 - Python全栈之路 ", "index": "python", "content": "在继续下面的文章之前我们先来浏览一下Python为我们提供的几种运算符，定义两个变量，分别是a和b，a的值是10，b的值是20。\n算术运算符\n\n\n运算符\n描述\n实例\n\n\n\n+\n加,两个对象相加\na+b=30\n\n\n-\n减,两个对象相减,可能会得到负数\na-b=-10\n\n\n*\n乘,两数相称或是返回一个被重复若干次的字符串\na*b=200\n\n\n/\n除，两个对象相除\nb/a=2\n\n\n%\n取膜,返回除法的余数\nb%a=0\n\n\n**\n幂,返回x的y次幂\na**b=100000000000000000000L\n\n\n//\n整除余,返回商的整数部分\na//b=0\n\n\n\n比较运算符\n\n\n运算符\n描述\n实例\n\n\n\n==\n等于，比较两个对象是否相等\na==b返回False\n\n\n!=\n不等于，比较两个对象是否不相等\na!=b返回True\n\n\n<>\n不等于，比较两个对象是否不相等\na<>b返回True\n\n\n>\n大于，比较x是否大于y，\na>b返回False\n\n\n<\n小于，比较x是否小于y\na<b返回True\n\n\n>=\n大于等于，比较x是否大于等于y\na>=b返回False\n\n\n<=\n小于等于，比较x是否小于等于y\na<=b返回True\n\n\n\n赋值运算符\n\n\n运算符\n描述\n实例\n\n\n\n=\n赋值运算符\nc=a+b,将a+b的运算结果赋值给c\n\n\n+=\n加法复制运算符\nc += a等效于c = c + a\n\n\n-=\n减法复制运算符\nc -= a等效于c = c - a\n\n\n*=\n乘法复制运算符\nc = a等效于c = c  a\n\n\n/=\n除法复制运算符\nc /= a等效于c = c / a\n\n\n%=\n取模赋值运算符\nc %= a等效于c = c % a\n\n\n**=\n幂赋值运算符\nc = a等效于c = c  a\n\n\n//=\n取整除赋值运算符\nc //= a等效于c = c // a\n\n\n\n逻辑运算符\n\n\n运算符\n描述\n实例\n\n\n\nand\n\"与\"\na and b返回true\n\n\nor\n\"或\"\na or b返回true\n\n\nnot\n\"非\"\nno(a and b)返回false\n\n\n\n成员运算符\n\n\n运算符\n描述\n\n\n\nin\n如果在指定的序列中找到值返回True，否则返回False\n\n\nnot in\n如果在指定的序列中没有找到值返回True，否则返回false\n\n\n\n赋值语句的语法\n\n\n运算\n解释\n\n\n\nspam='Spam'\n基本形式\n\n\nspam, ham='yum', 'YUM'\n元组赋值运算\n\n\n[spam, han]=['yum', 'YUM']\n列表赋值运算\n\n\na,b,c,d='spam'\n序列赋值运算，通用性\n\n\na, *b='spam'\n扩展的序列解包\n\n\nspam = ham = 'hello'\n多目标赋值运算\n\n\nspams += 42\n增强赋值运算\n\n\n\n实例\n序列运算\n>>> nudge = 1\n>>> wink = 2\n>>> A, B = nudge, wink\n>>> A,B\n(1, 2)\n# 嵌套的方式\n>>> ((a, b), c) = ('SP', 'AM')\n>>> a, b, c\n('S', 'P', 'AM')\n扩展的序列解包\n一个列表赋给了带星号的名称，该列表收集了序列中没有赋值给其他名称的所有项。\n先定义一个seq序列用于测试:\n>>> seq = [1, 2, 3, 4]\na匹配序列中的第一项，b匹配剩下的内容\n>>> a, *b = seq\n>>> a, b\n(1, [2, 3, 4])\nb匹配序列中的最后一项，a匹配序列中最后一项之前的所有内容\n>>> *a, b = seq\n>>> a,b\n([1, 2, 3], 4)\n第一项个最后一项分别赋值给了a和c，而b获取了二者之间的所有内容。\n>>> *a, b, c = seq\n>>> a,b,c\n([1, 2], 3, 4)\n带星号的名称可能只匹配单个的项，但是，总会向其复制一个列表，如果没有剩下的内容可以匹配那么会返回一个空列表：\n>>> a,b,c,*d = seq\n>>> print(a,b,c,d)\n1 2 3 [4]\n>>> a,b,c,d,*e = seq\n>>> print(a,b,c,d,e)\n1 2 3 4 []\n多目标赋值语句就是直接把所有提供的变量名都赋值给右侧的对象\n>>> a = b = c = 'As'\n>>> a,b,c\n('As', 'As', 'As')\n# 所引用的值也都是同一个\n>>> id(a),id(b),id(c)\n(4331109208, 4331109208, 4331109208)\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "3"}