{"title": "Python操作mongodb - Python全栈玩起来 ", "index": "mongodb,python", "content": "Python操作Mongodb\n一 导入 pymongo\nfrom pymongo import MongoClient\n二 连接服务器 端口号    27017\n连接MongoDB\n连接MongoDB我们需要使用PyMongo库里面的MongoClient，一般来说传入MongoDB的IP及端口即可，第一个参数为地址host，第二个参数为端口port，端口如果不传默认是27017。\nconn = MongoClient(\"localhost\")\nMongoClient(host='127.0.0.1',port=27017)\nconn = MongoClient(\"mongodb://username:password@ip:port/database_name\")\ndb = conn.database_name\ncollection = db[collection_name]\n三 连接数据库\ndb = conn.数据库名称\n连接集合\ncollection = db[collection_name]\nor\ncollection = db.collection_name\n查看全部聚集名称\ndb.collection_names()\n四 插入数据\n(1) 插入一条数据\ndb.user.insert({\"name\":\"夏利刚\",\"age\":18,\"hobby\":\"学习\"})\n(2) 插入多条数据\ndb.user.insert([{\"name\":\"夏利刚\",\"age\":18,\"hobby\":\"学习\"},{\"name\":\"xxxoo\",\"age\":48,\"hobby\":\"学习\"}]\n(3) 在3.x以上 建议 使用\ninsert_one 插入一条数据\ninsert_many() 插入多条数据\n(4) 返回 id  使用insert_one()\ndata.inserted_id\ndata.inserted_ids\n五 查询数据\n(1) 查询所有\ndb.user.find()\n#带条件的查询\n# data = db.user.find({\"name\":\"周日\"})\n# print(data) #返回result类似一个迭代器  可以使用 next方法 一个一个 的取出来\n# print(next(data))   #取出一条数据\n(2) 查询一条\ndb.user.find_one()\n(3) 带条件查询\ndb.user.find({\"name\":\"张三\"})\n(4) 查询 id\n\nfrom bson.objectid import ObjectId*#用于ID查询\ndata = db.user.find({\"_id\":ObjectId(\"59a2d304b961661b209f8da1\")})\n(5) 模糊查询\n（1）{\"name\":{'$regex':\"张\"}}\n（2）import re      {'xxx':re.compile('xxx')}\n六 sort limit count skip\n(1) sort        排序\n​    年龄 大于10\ndata = db.user.find({\"age\":{\"$gt\":10}}).sort(\"age\",-1) #年龄 升序 查询  pymongo.ASCENDING   --升序\ndata = db.user.find({\"age\":{\"$gt\":10}}).sort(\"age\",1) #年龄 降序 查询    pymongo.DESCENDING --降序\n(2) limit        取值\n​    取三条数据\ndb.user.find().limit(3)\ndata = db.user.find({\"age\":{\"$gt\":10}}).sort(\"age\",-1).limit(3)\n(3) count     统计数据条数\ndb.user.find().count()\n(4) skip         从第几条数据开始取\ndb.user.find().skip(2)\n七 update 修改\n​    update()方法其实也是官方不推荐使用的方法，在这里也分了update_one()方法和update_many()方法，用法更加严格，\n(1) update()\ndb.user.update({\"name\":\"张三\"},{\"$set\":{\"age\":25}})\ndb.user.update({\"name\":\"张三\"},{\"$inc\":{\"age\":25}})\n(2) update_one() 第一条符合条件的数据进行更新\n​    db.user.update_one({\"name\":\"张三\"},{\"$set\":{\"age\":99}})\n(3) update_many() 将所有符合条件的数据都更新\ndb.user.update_many({\"name\":\"张三\"},{\"$set\":{\"age\":91}})\n(4) 其返回结果是UpdateResult类型，然后调用matched_count和modified_count属性分别可以获得匹配的数据条数和影响的数据条数。\nprint(result.matched_count, result.modified_count)没\n八 remove 删除\n删除操作比较简单，直接调用remove()方法指定删除的条件即可，符合条件的所有数据均会被删除，\n(1) 删除 张三\ncollection.remove({\"name\":\"lilei\"})\n(2) 全部删除\ncollection.remove()\n(3) 依然存在两个新的推荐方法，delete_one()和delete_many()方法，示例如下：\ndelete_one()即删除第一条符合条件的数据\ncollection.delete_one({“name”:“ Kevin”})\ndelete_many()即删除所有符合条件的数据，返回结果是DeleteResult类型\ncollection.delete_many({“age”: {$lt:25}})\n(4) 可以调用deleted_count属性获取删除的数据条数。\nresult.deleted_count\n九 关闭连接\nconn.close()\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}