{"title": "Python文件读写保存操作 - Charlie's Road ", "index": "python", "content": "记录下第一次使用Python读写文件的过程，虽然很简单，第一次实现其实也有些注意的事项。\n单个文件的读操作：\n我们先假设一个需求如下：\n\n读取一个test.txt文件\n删除指定字符之前的文本\n\n需求明白之后，下面开始动手写代码，代码很简单。就直接上全部的，细节看注释：\nimport sys\n\nfilePath = \"/Users/xxxxxx/Desktop/test.txt\"\n# 打开文件\nfiles = open(filePath, 'r')\n# 转成list\nf_list = files.readlines()\n\n\ntempIndex = 0\n# 对f_list 循环 每个index对应一行数据\nfor index in range(len(f_list)):\n    # temp是获取一行的数据\n    temp = f_list[index]\n    # 判断\"test\"是不是temp这行数据的首位 如果是首位 result为true\n    result = temp.find(\"test\") == 0\n\n    if result:\n        # 如果是首位 这就是我们要删除的位置 获取他的index\n        tempIndex = index\n        break\n# 存放新数据\ntempContainer = []\n\nfor index in range(len(f_list)):\n    if index > tempIndex:\n        # tempIndex之前的数据我们不处理，把tempindex之后的数据存到新的list里面\n        tempContainer.append(f_list[index])\n# 这就获得了我们需要的新数据\nprint(tempContainer)\n以上代码就完成了需求，非常简单。有几个注意点：\n\n直接用open获取的数据无法进行处理，所以先转成可以处理的数据，比如list或者字典等。\npython的open和C的类似，有r,r+, w, w+等各种状态，见具体介绍\n\n\nopen函数的常见操作方式\n1、r 打开只读文件，该文件必须存在。 \n2、r+ 打开可读写的文件，该文件必须存在。 \n3、w 打开只写文件，若文件存在则文件长度清为0，即该文件内容会消失。若文件不存在则建立该文件。 \n4、w+ 打开可读写文件，若文件存在则文件长度清为零，即该文件内容会消失。若文件不存在则建立该文件。 \n多文件读写保存\n假设一个需求如下：\n\n多个文件都要处理\n和上面的test.txt处理方式类似\n处理完之后保存到一个新文件夹内\n\n其实这个需求实质上只是比单文件读操作只多了一个写操作。其他的就是逻辑稍微绕一下\n\n怎么同时操作多个文件\n然后怎么保存成多个文件\n\n肯定是不能一个文件一个文件的去操作，太麻烦了。说下我的实现思路：\n\n把文件放在一个文件夹内\n获取这个文件夹内所有的文件名，拼接成文件路径\n然后创建一个空的新文件夹，用新的空文件夹加上原始的文件名拼接成新的路径然后写入进去\n\n下面上代码：\n\nimport os\n\n# 初始的文件夹路径\nfilePath = \"/Users/xxxxxxxx/Desktop/fileDocument\"\n# 存放新文件的空白文件夹\nnewFilePath = \"/Users/xxxxxxxx/Desktop/newFileDocument\"\n\n# 获取文件夹下所有文件名\nfileNames = os.listdir(filePath)\n\nfor file in fileNames:\n    # 如果当前的文件名包含了'txt',就当它是正确的文件（并不严谨）\n    if file.find(\"txt\") >= 0:\n        # 拼接成我们要读取的完整路径\n        fileFullPath = filePath + \"/\" + file\n        # open 函数 默认是 'r'类型 ，\n        singleFile = open(fileFullPath)\n        # 转换成list数据\n        singleFile_list = singleFile.readlines()\n\n        tempIndex = 0\n        for index in range(len(singleFile_list)):\n            temp = singleFile_list[index]\n            result = temp.find(\"min\") == 0\n            if result:\n                tempIndex = index\n                break\n\n        # 拼接新的文件路径\n        newSingleFileFullPath = newFilePath + \"/\" + file\n        # 以 w 方式打开新的空白文件\n        newFile = open(newSingleFileFullPath, 'w')\n        for index in range(len(singleFile_list)):\n            if index > tempIndex:\n                # 写入tempindex行之后的数据\n                newFile.writelines(singleFile_list[index])\n\n        newFile.close()\n上面的代码其实没啥要介绍的，就是一个for循环然后逻辑和单个文件读操作一样，只是多了个写操作。\nEnd\n这只是自己因缘巧合写的一些简单的实现，并没有去系统的学习Python，好多API不了解，可能这种处理不是很好，没注重性能，没多线程。等以后深入学习了再优化。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}