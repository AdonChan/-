{"title": "Python生成歌词词云 - 学习分享 ", "index": "python", "content": "对于数据展示这一块有时候会用到词云，python中提供的wordcloud模块可以很灵活的完成生成词云除了使用python提供的wordcloud模块以为还有在线的生成方式https://wordart.com/\n\n安装wordcloud\n安装wordcloud有两种方式，一是直接通过pip install wordcloud如果一直安装失败可以尝试下面的方式，首先在链接中找到对应的版本进行下载https://www.lfd.uci.edu/~gohl... 在命令行中找到下载文件对应的目录进行安装\n了解wordcloud\nwordcloud 提供生成词云方法的使用，其实具体只要看一下参数就可以\nclass wordcloud.WordCloud(font_path=None, width=400, height=200, margin=2, ranks_only=None, prefer_horizontal=0.9,mask=None, scale=1, color_func=None, max_words=200, min_font_size=4, stopwords=None, random_state=None,background_color='black', max_font_size=None, font_step=1, mode='RGB', relative_scaling=0.5, regexp=None, collocations=True,colormap=None, normalize_plurals=True)\n#对应参数的意思\nfont_path : string //字体路径，需要展现什么字体就把该字体路径+后缀名写上，如：font_path = '黑体.ttf'如果不指定字体中文字的显示不出来\nwidth : int (default=400) //输出的画布宽度，默认为400像素\nheight : int (default=200) //输出的画布高度，默认为200像素\nprefer_horizontal : float (default=0.90) //词语水平方向排版出现的频率，默认 0.9 （所以词语垂直方向排版出现频率为 0.1 ）\nmask : nd-array or None (default=None) //如果参数为空，则使用二维遮罩绘制词云。如果 mask 非空，设置的宽高值将被忽略，遮罩形状被 mask 取代。除全白（#FFFFFF）的部分将不会绘制，其余部分会用于绘制词云。如：bg_pic = imread('读取一张图片.png')，背景图片的画布一定要设置为白色（#FFFFFF），然后显示的形状为不是白色的其他颜色。可以用ps工具将自己要显示的形状复制到一个纯白色的画布上再保存，就ok了。\nscale : float (default=1) //按照比例进行放大画布，如设置为1.5，则长和宽都是原来画布的1.5倍。\nmin_font_size : int (default=4) //显示的最小的字体大小\nfont_step : int (default=1) //字体步长，如果步长大于1，会加快运算但是可能导致结果出现较大的误差。\nmax_words : number (default=200) //要显示的词的最大个数\nstopwords : set of strings or None //设置需要屏蔽的词，如果为空，则使用内置的STOPWORDS\nbackground_color : color value (default=”black”) //背景颜色，如background_color='white',背景颜色为白色。\nmax_font_size : int or None (default=None) //显示的最大的字体大小\nmode : string (default=”RGB”) //当参数为“RGBA”并且background_color不为空时，背景为透明。\nrelative_scaling : float (default=.5) //词频和字体大小的关联性\ncolor_func : callable, default=None //生成新颜色的函数，如果为空，则使用 self.color_func\nregexp : string or None (optional) //使用正则表达式分隔输入的文本\ncollocations : bool, default=True //是否包括两个词的搭配\ncolormap : string or matplotlib colormap, default=”viridis” //给每个单词随机分配颜色，若指定color_func，则忽略该方法。\n上面是生成词云的方法封装，还有一些其他方法：\nfit_words(frequencies)  //根据词频生成词云\ngenerate(text)  //根据文本生成词云\ngenerate_from_frequencies(frequencies[, ...])   //根据词频生成词云\ngenerate_from_text(text)    //根据文本生成词云\nprocess_text(text)  //将长文本分词并去除屏蔽词（此处指英语，中文分词还是需要自己用别的库先行实现，使用上面的 fit_words(frequencies) ）\nrecolor([random_state, color_func, colormap])   //对现有输出重新着色。重新上色会比重新生成整个词云快很多。\nto_array()  //转化为 numpy array\nto_file(filename)   //输出到文件，很多时候词云最后都需要保存到图片中\n根据图像生成歌词词云\n首先，词云可以自己指定大小，也可以显示到图像上绘制，图像在选择上，尽量不要选择太复杂的图像，简单的黑白对比它识别的最好，如果没有适合的图片，自己打开画图画一个就是，下面我们来画一个晴天娃娃这个有点丑，但是意思就这个，接下来创建一个文本文件，把歌词放进去test.txt 内容如下\n你的绘画凌乱着\n在这个时刻\n我像气氛纯白的白鸽\n甜蜜散落了\n继续莫名的拉扯\n我还爱你呢\n而你断断续续唱着歌\n假装没事了\n时间过了 走了\n爱情面临选择\n你冷了 倦了 我哭了\n一开始都不快乐\n你用卡片纸写着\n有些爱只给到这 真的痛了\n怎么了 你累了 说好的 幸福呢\n我懂了 不说了 爱淡了 梦远了\n开心与不开心依稀数着你在不舍\n那些爱过的感觉都太深刻\n我都还记得\n你不懂了 说好的 幸福呢\n我错了 泪干了 放手了 后悔了\n只是回忆的音乐盒还旋转着\n要怎么停呢\n你的绘画凌乱着\n在这个时刻\n我像气氛纯白的白鸽\n甜蜜散落了\n继续莫名的拉扯\n我还爱你呢\n而你断断续续唱着歌\n假装没事了\n时间过了 走了\n爱情面临选择\n你冷了 倦了 我哭了\n一开始都不快乐\n你用卡片纸写着\n有些爱只给到这 真的痛了\n怎么了 你累了 说好的 幸福呢\n我懂了 不说了 爱淡了 梦远了\n开心与不开心依稀数着你在不舍\n那些爱过的感觉都太深刻\n我都还记得\n你不懂了 说好的 幸福呢\n我错了 泪干了 放手了 后悔了\n只是回忆的音乐盒还旋转着\n要怎么停呢\n怎么了 你累了 说好的 幸福呢\n我懂了 不说了 爱淡了 梦远了\n我都还记得\n你不懂了 说好的 幸福呢\n我错了 泪干了 放手了 后悔了\n只是回忆的音乐盒还旋转着\n要怎么停呢\n开始生成词云，最后输出一个图片文件\n#导入wordcloud模块\nfrom wordcloud import  WordCloud\nfrom scipy.misc import imread\n\n#读取一个txt文件\ntext = open('C:\\\\Users\\\\Administrator\\\\Desktop\\\\python\\\\test.txt','r', encoding='UTF-8').read()\n#读入背景图片\nbg_pic = imread('C:\\\\Users\\\\Administrator\\\\Desktop\\\\python\\\\3.png')\n#生成词云\nwordcloud = WordCloud(font_path=\"C:\\\\Windows\\\\Fonts\\\\simfang.ttf\",mask=bg_pic,background_color='white',scale=1.5).generate(text)\n#保存图片\nwordcloud.to_file('test.jpg')\n最后文件夹内会多出一个test.jpg文件，打开就是根据这个歌词的文本文件生成好的词云了\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "2"}