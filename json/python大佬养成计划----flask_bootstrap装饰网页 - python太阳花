{"title": "python大佬养成计划----flask_bootstrap装饰网页 - python太阳花 ", "index": "windows,mysql,python,html5", "content": "flask_bootstrap\nBootstrap 是 Twitter 开发的一个开源框架，它提供的用户界面组件可用于创建整洁且具有吸引力的网页，而且这些网页还能兼容所有现代 Web 浏览器.\n\nBootstrap 是客户端框架，因此不会直接涉及服务器。服务器需要做的只是提供引用了 Bootstrap 层叠样式表（CSS）和 JavaScript 文件的 HTML 响应， 并且 HTML、CSS 和 JavaScript 代码中实例化所需组件。这些操作最理想的执行场所就是模版。\n\nFlask-Bootstrap 可以在程序中集成 Bootstrap\n安装：\npip install flask-bootstrap\n使用：\nfrom flask_bootstrap import Bootstrap\n......\nbootstrap = Bootstrap(app)\n\nhtml文件的继承\n初始化 Flask-Bootstrap 之后，就可以在程序中使用一个包含所有Bootstrap 文件的基模版。这个模版利用 Jinja2 的模版继承机制，让程序扩展一个具有基本页面结构的基模版，其中就有用来引入 Bootstrap 的元素。\nbootstrap的base.html文档：\n{% block doc -%}\n<!DOCTYPE html>\n<html{% block html_attribs %}{% endblock html_attribs %}>\n{%- block html %}\n  <head>\n    {%- block head %}\n    <title>{% block title %}{{title|default}}{% endblock title %}</title>\n\n    {%- block metas %}\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    {%- endblock metas %}\n\n    {%- block styles %}\n    <!-- Bootstrap -->\n    <link href=\"{{bootstrap_find_resource('css/bootstrap.css', cdn='bootstrap')}}\" rel=\"stylesheet\">\n    {%- endblock styles %}\n    {%- endblock head %}\n  </head>\n  <body{% block body_attribs %}{% endblock body_attribs %}>\n    {% block body -%}\n    {% block navbar %}\n    {%- endblock navbar %}\n    {% block content -%}\n    {%- endblock content %}\n\n    {% block scripts %}\n    <script src=\"{{bootstrap_find_resource('jquery.js', cdn='jquery')}}\"></script>\n    <script src=\"{{bootstrap_find_resource('js/bootstrap.js', cdn='bootstrap')}}\"></script>\n    {%- endblock scripts %}\n    {%- endblock body %}\n  </body>\n{%- endblock html %}\n</html>\n{% endblock doc -%}\n\n继承Bootstrap 文件的基模版，编写适用于自己项目的基模板。\n{#自己编写一个基类模板#}\n{% extends 'bootstrap/base.html' %}\n\n{% block styles %}\n{{ super() }}\n    <link rel=\"stylesheet\" href=\"../static/css/main.css\">\n{% endblock %}\n{% block navbar %}\n<nav class=\"navbar navbar-default\">\n    <div class=\"container-fluid\">\n        <!-- Brand and toggle get grouped for better mobile display -->\n        <div class=\"navbar-header\">\n            <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\"\n                    data-target=\"#bs-example-navbar-collapse-1\" aria-expanded=\"false\">\n                <span class=\"sr-only\">Toggle navigation</span>\n                <span class=\"icon-bar\"></span>\n                <span class=\"icon-bar\"></span>\n                <span class=\"icon-bar\"></span>\n            </button>\n            <a class=\"navbar-brand\" href=\"index.html\"></a>\n        </div>\n\n        <!-- Collect the nav links, forms, and other content for toggling -->\n        <div class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\">\n            <ul class=\"nav navbar-nav\">\n                <li><a href=\"#\">首页<span class=\"sr-only\">(current)</span></a></li>\n                <li><a href=\"#\">新闻</a></li>\n                <li><a href=\"#\">国际</a></li>\n                <li><a href=\"#\">国内</a></li>\n                <li><a href=\"/sysinfo/\">系统信息</a></li>\n                <li><a href=\"#\">登陆用户</a></li>\n            </ul>\n            <ul class=\"nav navbar-nav navbar-right\">\n\n                {% if 'user' in session %}\n                <li><a href=\"login.html\"><span class=\"glyphicon glyphicon-user\"></span>\n                    &nbsp;&nbsp; {{ session.user }}</a></li>\n                <li><a href=\"/logout/\"><span class=\"glyphicon glyphicon-log-in\"></span>\n                    &nbsp;&nbsp; 注销 </a></li>\n\n\n                {% else %}\n\n                <li><a href=\"/login/\"><span class=\"glyphicon glyphicon-log-in\"></span>\n                    &nbsp;&nbsp;登陆</a></li>\n                {% endif %}\n\n\n                <li><a href=\"/register/\"><span class=\"glyphicon glyphicon-log-out\"></span>\n                    &nbsp;&nbsp;注册</a></li>\n            </ul>\n        </div><!-- /.navbar-collapse -->\n    </div><!-- /.container-fluid -->\n</nav>\n{% endblock %}\n\n{% block content %}\n{#定义属于自己的block#}\n    {% block newcontent %}\n\n\n    {% endblock %}\n\n    {% block footer %}\n<div class=\"footer\">\n\n\n    宇宙大魔王--ZAJ\n\n\n</div>\n{% endblock %}\n{% endblock %}\nJinja2 中的 extends 指令从 Flask-Bootstrap 中导入 bootstrap/base.html，从而实现模版继承。Flask-Bootstrap 中的基模版提供了一个网页框架，引入了 Bootstrap 中的所有 CSS 和 JavaScript 文件。\n上面这个示例重新定义了3个块，分别是对 bootstrap/base.html的styles、navbar和content的改写。这些块都是基模版提供的，可在衍生模版中重新定义。\n如果程序需要向已经有内容的块中添加新内容， 必须使用 Jinja2 提供的 super() 函数。例如，如果要在衍生模版中添加新的 CSS 文件，需要这么定义：\n{% block styles %}\n{{ super() }}\n    <link rel=\"stylesheet\" href=\"../static/css/main.css\">\n{% endblock %}\n使flask_bootstrap和flask_wtf编写一个FLASK项目\n要求:\n实现网页主页显示、登陆页面显示、注册页面显示、用户退出（注销）。并且只有数据库中存在用户可以登陆网页。主要通过表单来实现数据交互。目前，对于用户注册，不返回数据库。\n实现\n模板文件有templates/base.html , templates/index.html , templates/login.html , templates/register.html \nPy文件有 zaj_run.py , zaj_ forms.py , zaj_modles.py , zaj_config.py\n模板文件链接\n链接：https://pan.baidu.com/s/1Uov-i8b2fZMr9fOe32tcgg \n提取码：jrbs\n# zaj_run.py\nfrom flask import Flask,render_template,session,redirect,url_for\nfrom flask_bootstrap import Bootstrap\nfrom zaj_forms import LoginForm,RegisterFrom\nfrom zaj_models import isPasswdOk\nimport  functools\napp = Flask(__name__)\n\napp.config['SECRET_KEY'] = 'SHEEN'\nbootstrap = Bootstrap(app)\n\ndef is_login(f):\n    \"\"\"判断用户是否登陆的装饰器\"\"\"\n    @functools.wraps(f)\n    def wrapper(*args, **kwargs):\n        # 主函数代码里面， 如果登陆， session加入user， passwd两个key值；\n        # 主函数代码里面， 如果注销， session删除user， passwd两个key值；\n        # 如果没有登陆成功， 则跳转到登陆界面\n        if 'user' not in session:\n            return  redirect('/login/')\n        # 如果用户是登陆状态， 则访问哪个路由， 就执行哪个路由对应的视图函数；\n        return  f(*args, **kwargs)\n    return  wrapper\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n@app.route('/login/',methods=['GET','POST'])\ndef login():\n    # session.pop('user',None)\n    # session.pop('passwd',None)\n    form  = LoginForm()\n    print(form.data)    #{'user': 'root123', 'passwd': 'sheen123', 'submit': True,....}\n    if form.validate_on_submit():\n        user = form.data['user']\n        passwd = form.data['passwd']\n        if isPasswdOk(user,passwd):\n            session['user'] = user\n            session['passwd'] = passwd\n            return redirect(url_for('index'))\n        else:\n            return render_template('login.html',form=form,message='密码或用户名错误')\n    else:\n        return render_template('login.html',form=form)\n@app.route('/register/',methods=['GET','POST'])\ndef register():\n    form = RegisterFrom()\n    # 如果是post方法并且表单验证通过的话， 返回True;\n    if form.validate_on_submit():\n        # 用户提交的表单信息\n        print(form.data)\n        return 'ok'\n    return  render_template('register.html', form=form)\n@app.route('/logout/')\ndef logout():\n    session.pop('user', None)\n    session.pop('passwd', None)\n    # 注销即删除用户的session信息， 注销成功， 跳转到首页;\n    return  redirect(url_for('index'))\n    # return  redirect('/')\n\nif __name__ == '__main__':\n    app.run( port = 8900)\n# 报错1：TypeError: __init__() takes from 1 to 2 positional arguments but 3 were given\n# 解决：把输入表单LoginForm,RegisterFrom中的Required去掉\n\n# 问题2：每次重新运行程序，都会显示root123用户已登陆，即session里面有数据\n# 解决：添加判别session内容的函数is_login()。\n# zaj_models.py，存放数据库操作\nimport pymysql\nfrom zaj_config import  DB\n\n\n# 1. 创建连接\nconn  = pymysql.connect(\n        host=DB.HOST,\n        user = DB.USER,\n        passwd = DB.PASSWD,\n        port = DB.PORT,\n        db = DB.DBNAME,\n        )\n\ncur = conn.cursor()\n\n\n\ndef isUserExist(username):\n    \"\"\"判断用户名是否存在\"\"\"\n    sqli = \"select * from user where name='%s'\" %(username)\n    res = cur.execute(sqli)\n    # res返回的是sql语句查询结果的个数；\n    #  如果为0， 没有查到。\n    if res == 0:\n        return  False\n    else:\n        return  True\n\n\ndef isPasswdOk(username, passwd):\n    sqli = \"select * from user where name='%s' and passwd='%s'\" %(\n        username, passwd)\n    res = cur.execute(sqli)\n    if res == 0 :\n        return  False\n    else:\n        return  True\n\n\ndef addUser(username, passwd):\n    \"\"\"用户注册时， 添加信息到数据库中\"\"\"\n    sqli = \"insert into user(name, passwd) values('%s', '%s')\" %(\n        username, passwd)\n    try:\n        res = cur.execute(sqli)\n        conn.commit()\n    except Exception as e:\n        conn.rollback()\n        return e\n#\n# cur.close()\n# conn.close()\nif __name__ == \"__main__\":\n    addUser('root', 'root')\n    print(isUserExist('root'))\n    print(isPasswdOk('root', 'root'))\n\n# zaj_forms.py,存放表单操作\nfrom flask_wtf import FlaskForm\n# 每个Web表单都由一个继承自FlaskForm的类表示\nfrom wtforms import StringField,PasswordField,SubmitField\n# StringField类表示的是属性为type=\"text\"的<input>元素。\n# SubmitField类表示的是是属性为type=\"submit\"的<input>元素\n\n#WTForms内建的验证函数validators,而且是以数组形式，正对应了前面说的一个字段可以有一个或者多个验证函数\nfrom wtforms.validators import Length, Required, EqualTo, Regexp,Email\n\n\nclass LoginForm(FlaskForm):\n    user = StringField(\n        label='用户名',\n        validators=[\n            Length(5,13)\n        ]\n    )\n    passwd = PasswordField(\n        label='密码',\n        validators=[\n            Length(6,12),\n        ]\n    )\n    submit = SubmitField(\n        label='登陆'\n    )\nclass RegisterFrom(FlaskForm):\n    user = StringField(\n        label='用户名/邮箱/手机号',\n        validators=[\n            Length(5,13)\n        ]\n    )\n    passwd = PasswordField(\n        label='密码',\n        validators=[\n            Length(6,12),\n        ]\n    )\n    repasswd = PasswordField(\n        label='确认密码',\n        validators=[\n            EqualTo('passwd',message='密码不一致！')\n        ]\n    )\n    phone = StringField(\n        label='电话号码',\n        validators=[\n            Regexp(r'1\\d{10}', message='手机号码格式错误')\n        ]\n    )\n    email = StringField(\n        label='邮箱',\n        validators=[\n            Email(message='邮箱格式错误！')\n        ]\n    )\n    submit = SubmitField(\n        label='注册'\n    )\n# zaj_config.py , 存放数据库类\nclass DB:\n    HOST = 'localhost'\n    USER= 'root'\n    PASSWD = 'sheen'\n    PORT = 3306\n    DBNAME = 'zaj_form'\n确保数据库zaj_form中已有表user，user有元素name,passwd，添加用户name= ‘python’ , passwd=’1234567’主页：登陆之后，自动跳转主页，显示session的缓存。当注册表单某一项不满足程序定义的规则时当注册成功时，返回'OK'\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}