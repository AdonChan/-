{"title": "《Python基础教程》第三章--读书笔记 - michael翔的IT私房菜 ", "index": "读书笔记,python", "content": "第三章：使用字符串\n本章将会介绍如何使用字符串格式化其他的值（如打印特殊格式的字符串），并简单了解一下利用字符串的分割、连接、搜索等方法能做些什么。\n基本字符串操作\n所有标准的序列操作（索引、分片、乘法、判断成员资格、求长度、取最大最小值）对字符串同样适用。记住：字符串是不可变的！\n字符串格式化：精简版\n字符串格式化使用字符串格式化操作符（这个名字还是很恰当地）即百分号%来实现。注：%也可以用来作模运算（求余）操作符。\n在%左侧放置一个字符串（格式化字符串），而右侧放置希望被格式化的值。可以使用一个值，也可以使用多个值的元祖或者字典。\n>>>fromat = \"hello, %s.%s enough?\"\n>>>values = ('michael','dut')\n>>>print format % values\nhello, michael.dut enough?\n格式化字符串的%s部分称为转换说明符。\n如果要格式化实数（浮点数），可以用f说明转换说明符的类型。因为格式化转换说明符总是以表示类型的字符结束。同时提供所需要的进度：一个句点加上希望保留的小数位数。\n>>>format = \"pi with three decimals: %.3f\"\n>>>form math import pi\n>>>print format % pi\npi with three decimals: 3.142\n字符串格式化：完整版\n格式化操作符的右操作数可以是任意类型，在此，先了解一下元祖。\n如果右操作数是元祖的话，则其中的每一个元素都会被单独格式化，每个值都需要一个对应的转换说明符。一个都不能少！\n如果需要转换的元祖作为转换表达式的一部分存在，元祖必须用圆括号括起来，否则会出错！\n基本的转换说明符包括以下部分。注意，这些项的顺序是至关重要的！\n\n%字符：标记转换说明符的开始\n转换标志（可选）：-表示左对齐，+表示在转换值之前要加上正负号；“”（空白字符）表示正数之前保留空格；0表示转换值至若位数不够则用0填充。\n最小字段宽度（可选）：转换后的字符串至少应该具有该值指定的宽度。如果是*，则宽度会从值元祖中读出。\n点（.）后跟精度值（可选）：如果转换的是实数，精度值表示保留几位小数。如果转换的是字符串，那么该数字就表示最大字段宽度。如果是*，那么进度将会从元祖中读出。\n转换类型：查看表字符串格式转换类型\n\n\n\n格式\n描述\n\n\n\n%c\n字符及其ASCII码\n\n\n%s\n字符串(使用str转换任意Python对象)\n\n\n%r\n字符串(使用repr转换任意Python对象)\n\n\n%d(%i)\n有符号整数(十进制)\n\n\n%u\n无符号整数(十进制)\n\n\n%o\n无符号整数(八进制)\n\n\n%x\n无符号整数(十六进制)\n\n\n%X\n无符号整数(十六进制大写字符)\n\n\n%e\n浮点数字(科学计数法)\n\n\n%E\n浮点数字(科学计数法，用E代替e)\n\n\n%f(%F)\n浮点数字(用小数点符号)\n\n\n%g\n浮点数字(根据值的大小采用%e或%f)\n\n\n%G\n浮点数字(类似于%g)\n\n\n%p\n指针(用十六进制打印值的内存地址)\n\n\n%n\n存储输出字符的数量放进参数列表的下一个变量中\n\n\n\n简单的转换\n>>>'using str:%s'% 42L\n'using str: 42'\n>>>'using repr:%r'% 42L\n'using repr: 42L'\n字段宽度和精度\n这两个参数都是整数（首先是字段宽度，然后是精度），通过点好（.）分隔。虽然两个都是可选的参数，但是如果只给出精度，就必须包含点好：\n>>>'%10.2f'%pi\n'      3.14' #6个空格\n可以使用*（星号）作为字段宽度或者精度（或者两者都用），此时数值会从元祖参数中读出：\n>>>'%.*s'%(5,'michael xiang')\n'micha'\n符号、对齐和用0填充\n在字段宽度和精度之前还可以放置一个“标志”，该标志可以是:\n\n0    0表示将会用0填充\n+    加号表示，不管是正数还是负数，都要标识出正负号\n-    减号表示用来左对齐数值\n空格    空格：表示正数前加上空格，这对需要对齐正负数时会很有用0表示将会用0填充\n\n>>>'%010.2f'%pi    #0填充，并不表示八进制，字段宽度10，精度2\n'0000003.14'\n>>>'%-10.2f'*%pi\n'3.14      '    #看到没，右侧多了空格，数值左对齐了\n>>>print ('% 5d' % 10) + '\\n' + ('% 5d' % -10)\n   10\n  -10\n>>>print ('%+5d' % 10) + '\\n' + ('s%+5d' % -10)\n  +10\n  -10\n字符串方法\n字符串的方法比列表方法还要丰富的多，因为字符串从string模块中“继承”了很多方法。因为字符串的方法太多，这里只介绍一些特别有用的方法。附上：官方模块参考文档——Python Module Index\nfind\nfind方法可以在一个较长的字符串中查找子串，返回子串所在位置的最左端索引。如果没有找到，返回-1。\n>>>'hello michael, i am michael'.find('michael')\n6    #可见，空格也包含在内了\n这个方法还可以接收可选的起始点和结束点参数：\n>>>'hello michael,your name is michael'.find('michael',7,27)\n-1\n注：不包含第二个索引，这在python中是惯例\njoin\njoin方法是非常重要的字符串方法，它是split方法的逆方法，用来连接序列中的元素：\n>>>seq=[1,2,3,4,5]\n>>>sep='+'\n>>>sep.join(seq)    #连接数字列表，不是字符串，你看下面就出错啦！\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-1-966645d088a4> in <module>()\n      1 seq=[1,2,3,4,5]\n      2 sep='+'\n----> 3 sep.join(seq)\n \nTypeError: sequence item 0: expected string, int found\n\n>>>seq=['1','2','3','4']\n>>>sep.join(seq)    #连接字符串列表\n‘1+2+3+4’\n需要被连接的序列元素都必须是字符串。\nlower\nlower方法返回字符串的小写字母版和lower方法相关的是title方法，它会将字符串转换为标题——也就是所有档次的首字母大写，其他小写。但是它使用的单词划分方法可能会得到并不自然的结果。\nreplace\nreplace方法返回某字符串的所有匹配项均被替换之后得到字符串。\n>>>'michael hello michael'.replace('mi','hh')\n'hhchael hello hhchael'\n有点类似word里的“查找替换”功能吧！是不是很有用啊！\nsplit\n这是一个非常重要的字符串方法，它是join方法的逆方法，用来将字符串分隔成序列：\n>>>'1+2+3+4'.split('+')\n['1','2','3','4']\n>>>'using the default'.split()\n['using','the','default']\n注意：如果不提供任何分隔符，程序将会把所有空格作为分隔符（空格、制表、换行等）。\nstrip\nstrip方法返回去除两侧（不包括内部）空格的字符串：\n>>>'     internal whitespace is kept    '.strip()\n'internal whitespace is kept'\ntranslate\ntranslate方法和replace方法一样，可以替换字符串中的某些部分，但是和前者不同的是，translate方法只处理单个字符。它的优势在于可以同时进行多个替换，有些时候比repalce效率搞得多！在使用translate转换之前，需要先完成一张转换表。使用string模块里面的maketrans函数就行。\n>>>from string import maketrans\n>>>table = maketrans('cs','kz')    #c->k,s->z,创建这个表之后，可以将它用做`translate`方法的参数\n>>>'this is an incredible test'.translate(table)\n'thiz iz an inkredible tezt'\n>>>'this is an incredible test'.translate(table,' ')    #`translate`的第二个参数是可选的，这个参数是用来指定需要删除的字符。\n'thizizaninkredibletezt'\n可见，translate和maketrans方法一起更配噢~\n本章小结\n这章内容相对比较少，字符串的方法确实很多，到时候，可以去查找，没必要记那么多，常见的弄熟悉就差不多了吧。\n其实，这章最大的收获应该是字符串格式化时的一个例子：\n>>>'%10f'%pi  #输出结果是'  3.141593'这里没有得到结果'3.14159265'让我产生了疑惑。\n后来各处查询资料，才知道，默认小数保留位数为6。因此，才是得到那样的结果。format可以翻译为格式化吧。\n自己学会查找资料真的很重要！官方文档其实写的很棒的！不要惧怕英文！\n\n官方模块参考文档——Python Module Index\nPython 入门指南\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "4"}