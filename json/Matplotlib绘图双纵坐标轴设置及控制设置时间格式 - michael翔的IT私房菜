{"title": "Matplotlib绘图双纵坐标轴设置及控制设置时间格式 - michael翔的IT私房菜 ", "index": "matplotlib,python", "content": "双y轴坐标轴图\n今天利用matplotlib绘图，想要完成一个双坐标格式的图。\nfig=plt.figure(figsize=(20,15))\nax1=fig.add_subplot(111)\nax1.plot(demo0719['TPS'],'b-',label='TPS',linewidth=2)\nax2=ax1.twinx()#这是双坐标关键一步\nax2.plot(demo0719['successRate']*100,'r-',label='successRate',linewidth=2)\n横坐标设置时间间隔\nimport matplotlib.dates as mdate\nax1.xaxis.set_major_formatter(mdate.DateFormatter('%Y-%m-%d %H:%M:%S'))#设置时间标签显示格式\nplt.xticks(pd.date_range(demo0719.index[0],demo0719.index[-1],freq='1min'))\n纵坐标设置显示百分比\nimport matplotlib.ticker as mtick\nfmt='%.2f%%'\nyticks = mtick.FormatStrFormatter(fmt)\nax2.yaxis.set_major_formatter(yticks)\n知识点\n在matplotlib中，整个图像为一个Figure对象。在Figure对象中可以包含一个，或者多个Axes对象。每个Axes对象都是一个拥有自己坐标系统的绘图区域。其逻辑关系如下：一个Figure对应一张图片。\nTitle为标题。Axis为坐标轴，Label为坐标轴标注。Tick为刻度线，Tick Label为刻度注释。1\nTitle为标题。Axis为坐标轴，Label为坐标轴标注。Tick为刻度线，Tick Label为刻度注释。\nadd_subplot()\n\n官网matplotlib.pyplot.figurepyplot.figure()是返回一个Figure对象的，也就是一张图片。\nadd_subplot(args, *kwargs)\n\nThe Axes instance will be returned.\ntwinx()\nmatplotlib.axes.Axes method2\nax = twinx()\ncreate a twin of Axes for generating a plot with a sharex x-axis but independent y axis. The y-axis of self will have ticks on left and the returned axes will have ticks on the right.意思就是，创建了一个独立的Y轴，共享了X轴。双坐标轴！\n类似的还有twiny()\nax1.xaxis.set_major_formatter\nset_major_formatter(formatter)\nSet the formatter of the major ticker  ACCEPTS: A Formatter instance\nDateFormatter()\nclass matplotlib.dates.DateFormatter(fmt, tz=None)这是一个类，创建一个时间格式的实例。\nstrftime方法（传入格式化字符串）。\nstrftime(dt, fmt=None)\nRefer to documentation for datetime.strftime.\nfmt is a strftime() format string.\nFormatStrFormatter()\nclass matplotlib.ticker.FormatStrFormatter(fmt)\nUse a new-style format string (as used by str.format()) to format the tick. The field formatting must be labeled x定义字符串格式。\nplt.xticks\nmatplotlib.pyplot.xticks(args, *kwargs)\n# return locs, labels where locs is an array of tick locations and\n# labels is an array of tick labels.\nlocs, labels = xticks()\n\n# set the locations of the xticks\nxticks( arange(6) )\n\n# set the locations and labels of the xticks\nxticks( arange(5), ('Tom', 'Dick', 'Harry', 'Sally', 'Sue') )\n代码汇总\n#coding:utf-8\nimport matplotlib.pyplot as plt \nimport matplotlib as mpl\nimport matplotlib.dates as mdate\nimport matplotlib.ticker as mtick\nimport numpy as np\nimport pandas as pd\nimport os\n\n\nmpl.rcParams['font.sans-serif']=['SimHei'] #用来正常显示中文标签\nmpl.rcParams['axes.unicode_minus']=False #用来正常显示负号\nmpl.rc('xtick', labelsize=20) #设置坐标轴刻度显示大小\nmpl.rc('ytick', labelsize=20) \nfont_size=30\n#matplotlib.rcParams.update({'font.size': 60})\n\n%matplotlib inline\nplt.style.use('ggplot')\n\ndata=pd.read_csv('simsendLogConvert_20160803094801.csv',index_col=0,encoding='gb2312',parse_dates=True)\n\ncolumns_len=len(data.columns)\ndata_columns=data.columns\n\nfor x in range(0,columns_len,2):\n    print('第{}列'.format(x))\n    total=data.ix[:,x]\n    print('第{}列'.format(x+1))\n    successRate=(data.ix[:,x+1]/data.ix[:,x]).fillna(0)\n    \n    \n    yLeftLabel=data_columns[x]\n    yRightLable=data_columns[x+1]\n    \n    \n    print('------------------开始绘制类型{}曲线图------------------'.format(data_columns[x]))\n    \n    fig=plt.figure(figsize=(25,20))\n    ax1=fig.add_subplot(111)\n    #绘制Total曲线图\n    ax1.plot(total,color='#4A7EBB',label=yLeftLabel,linewidth=4)\n\n    # 设置X轴的坐标刻度线显示间隔\n    ax1.xaxis.set_major_formatter(mdate.DateFormatter('%Y-%m-%d %H:%M:%S'))#设置时间标签显示格式\n    plt.xticks(pd.date_range(data.index[0],data.index[-1],freq='1min'))#时间间隔\n    plt.xticks(rotation=90)\n    \n    #设置双坐标轴，右侧Y轴\n    ax2=ax1.twinx()\n    \n    #设置右侧Y轴显示百分数\n    fmt='%.2f%%'\n    yticks = mtick.FormatStrFormatter(fmt)\n    \n    # 绘制成功率图像\n    ax2.set_ylim(0,110)\n    ax2.plot(successRate*100,color='#BE4B48',label=yRightLable,linewidth=4)\n    ax2.yaxis.set_major_formatter(yticks)\n\n    ax1.set_xlabel('Time',fontsize=font_size) \n    ax1.set_ylabel(yLeftLabel,fontsize=font_size)\n    ax2.set_ylabel(yRightLable,fontsize=font_size)\n    \n    legend1=ax1.legend(loc=(.02,.94),fontsize=16,shadow=True)\n    legend2=ax2.legend(loc=(.02,.9),fontsize=16,shadow=True)\n    \n    legend1.get_frame().set_facecolor('#FFFFFF')\n    legend2.get_frame().set_facecolor('#FFFFFF')\n    \n    plt.title(yLeftLabel+'&'+yRightLable,fontsize=font_size)\n\n    plt.savefig('D:\\\\JGT\\\\Work-YL\\\\01布置的任务\\\\04绘制曲线图和报告文件\\\\0803\\\\出图\\\\{}-{}'.format(yLeftLabel.replace(r'/',' '),yRightLable.replace(r'/',' ')),dpi=300)\n\n\n参考\n\n\n\nVami-绘图: matplotlib核心剖析 ↩\n\n\nSecondary axis with twinx(): how to add to legend? ↩\n\n\n\n                ", "mainLikeNum": ["4 "], "mainBookmarkNum": "7"}