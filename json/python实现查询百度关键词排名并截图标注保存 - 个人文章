{"title": "python实现查询百度关键词排名并截图标注保存 - 个人文章 ", "index": "python3.x,python爬虫,python", "content": "前言\n项目地址 https://github.com/Ricbet/ran...\n该程序正常运行所需要的插件为phantomjs，建议下载mac版本，然后将下载的整个文件夹放在和.py文件同一级的目录下，若是window系统的话则修改程序中的driver指向的插件目录名称\n实现原理\n百度的搜索排名它选录的都是你所检索的关键词以及目标网址在第几个结果列表当中，但其中并不包括带“广告”标示的结果，例如\n我搜素switch的时候我想知道Nintendo的官网在百度排名中属于第几名，图所示的例子中我在第二页里找到了任天堂的官网nintendo.com，所以switch这个关键词对于任天堂来说在百度的搜索排名是第十二名\n我要做的就是根据关键词搜索模拟一次搜索，然后在搜索的结果集当中找到目标网址，匹配之后我再利用phantomjs截取屏幕并在关键的地方给予红框标注，然后再将该截图保存到本地目录当中\n首先我们还是得先了解下百度搜索的一些常用参数pn： 表示从第pn条结果开始显示rn： 表示每一页要显示多少条结果，默认10条wd： 表示要搜索的词其实我们只需要这三个参数就足够了\n模拟搜索\n首先先记录要请求的url，使用quote处理带中文的url\nr_url = 'http://www.baidu.com/s?rn=%s' % rn + '&pn=%s'%((pn_baidu-1)*rn) + \"&wd=%s\" % wd\nr_url = quote(r_url, safe=string.printable)\n然后我们用BeautifulSoup提取网页的文本内容\nwith requests.get('http://www.baidu.com/s', params={'wd': wd, 'pn': (pn_baidu-1)*rn, 'rn': rn}, timeout=7) as r:\n    soup = BeautifulSoup(r.text, 'html.parser')\n我们观察百度的搜索结果列表页的html结构\n\n发现这些结果集都被包含在了content_left这个id里面，然后只有result这个类的标签才是真正搜索出来的结果，其他的result-op这个类的标签并不算在排名中，因为这是那些最新相关信息呀、贴吧等\np = re.compile(r'^result')\ncontentItem = soup.find(id=\"content_left\").find_all('div', p)\ncontentItem就是我们列出的所有算在排名内的结果集列表然后我们通过for循环遍历正则匹配我们输入的网址，看看在哪个下标的结果里面，就是当前的排名\nfor index, list in enumerate(contentItem):\n    _list = ''.join(re.split(r'\\s+', list.get_text()))\n    # 如果匹配成功\n    if str.search(_list):\n    # xxxxx\n如果找到匹配的结果集了，此时就是PhantomJS派上用场的时候了\n保存为截图并标注\npython的PhantomJS用法可以在谷某或者某度里面查得到，这里就不一一阐述了\n我们通过观察到每一个result类的标签都有一个数字id，然后我们只要用js的方法获取这个id然后给它设置红框的样式就可以了\ndriver.execute_script(\"\"\"\n                      (function(){\n                          var result = document.getElementById(%s)\n                          result.setAttribute('style','border:5px solid red;padding:10px;margin-left:-15px')\n                      })()\n                      \"\"\" %((index + 1)+((pn_baidu-1)*rn)))\n同时根据时间戳来命名图片名称\nout_img_name = 'baidu_' + time_now_rub + \".jpeg\"\ndriver.save_screenshot(out_img_name)\n同时为了减少图片的资源大小，我们用PIL进一步处理图片，并保存为jpeg的格式\n# 打开图片\nim = Image.open(out_img_name)\n# 获取生成的图片宽度和高度\nw, h = im.size\n# 等比例压缩图片\nim.thumbnail((int(w / 1.5), int(h / 1.5)), Image.ANTIALIAS)\n# 保存\nim.convert('RGB').save(out_img_name, 'JPEG', quality=80)\n最后一步我们就是把生成的图片放在一个目录里面了\ndef findDirectory( img_name ):\n    # 查询目录，如果没有就创建目录\n    src_item = ['public','uploads',time_year,time_month,time_day,'']\n    join_src_item = '/'.join(src_item[0:-1])+'/'\n    # 判断当前目录文件是否有uploads\n    if( os.path.exists(join_src_item) == False ):\n        os.makedirs(join_src_item)\n        shutil.move(img_name, join_src_item)\n    else:\n        shutil.move(img_name, join_src_item)\n测试\n\n截图\n\n目录结构\n\n大致思路就是这样子\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "1"}