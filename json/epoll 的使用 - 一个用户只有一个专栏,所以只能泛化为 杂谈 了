{"title": "epoll 的使用 - 一个用户只有一个专栏,所以只能泛化为 杂谈 了 ", "index": "epoll,tornado,python", "content": "#\n\nepoll的应用很多,nginx,tornado,乃至携程,都跟它又关系.所以趁着失业的无聊的事件,从基础学起,了解下epoll的用法\n\nepoll 在python的api\n\nPython包含了访问Linux epoll库的API。这篇文章用几个简单的例子来展示下这个API\n\n常用api\n\nselect.epoll() #返回创建epoll对象\nepoll.register(fd[, eventmask]) #将fd的事件注册到epoll对象中\nepoll.unregister(fd) #去除fd\nepoll.poll([timeout=-1[, maxevents=-1]]) #等待事件\nepoll.modify(fd, eventmask) #更改fd关注的事件\n\n\n更多api文档,可以在dash中查看\n\n常用事件常量\n\nEPOLLIN     可读事件\nEPOLLOUT    可写事件\nEPOLLERR    错误事件\nEPOLLHUP    挂起事件\n\n\n示例代码\n\n以下是简单的helloword 程序,运行程序后,浏览器访问localhost:8080/ 输出helloword\n\n# coding: utf-8\nimport socket, select\nfrom ipdb import set_trace\nEOL1 = b'\\n\\n'\nEOL2 = b'\\n\\r\\n'\nresponse  = b'HTTP/1.0 200 OK\\r\\nDate: Mon, 1 Jan 1996 01:01:01 GMT\\r\\n'\nresponse += b'Content-Type: text/plain\\r\\nContent-Length: 13\\r\\n\\r\\n'\nresponse += b'Hello, world!'\n\nserversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserversocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\nserversocket.bind(('0.0.0.0', 8080))\nserversocket.listen(10240)\nserversocket.setblocking(0)\nserversocket.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n\n#创建epoll对象,epoll对象是个存储\"fd-事件\"的容器,把关注的\"fd-事件\"注册到容器中,\n#接下来就可以监听到fd的事件\nepoll = select.epoll()\n\n#将server的sockect注册到epoll中,因为此示例程序功能是浏览器显示helloword,\n#所以关注接入的客户端fd,当有客户端连接时,出发的一定是server sockect的EPOLLIN\nepoll.register(serversocket.fileno(), select.EPOLLIN)\n\ntry:\n   connections = {}; requests = {}; responses = {}\n   while True:\n      events = epoll.poll(10)\n      # print '=='*10\n      for fileno, event in events:\n         #客户端接入时,注册客户端fd到epoll,第一步需要读取客户端发送到服务端的信息,所以用EPOLLIN\n         if fileno == serversocket.fileno():\n            connection, address = serversocket.accept()\n            connection.setblocking(0)\n            epoll.register(connection.fileno(), select.EPOLLIN)\n            connections[connection.fileno()] = connection\n            requests[connection.fileno()] = b''\n            responses[connection.fileno()] = response\n         #读取客户端信息\n         elif event & select.EPOLLIN:\n            data=connections[fileno].recv(1024)\n\n            requests[fileno] += data\n            #判断客户端信息是否读取完毕\n            if EOL1 in requests[fileno] or EOL2 in requests[fileno]:\n               epoll.modify(fileno, select.EPOLLOUT)\n               print('-'*40 + str(fileno) + '\\n' + requests[fileno].decode()[:-2])\n            #处理客户端关闭请求时的信息,防止服务端程序出现close_wait\n            #使用telnet测试后发现,客户端主动关闭时会发送个空信息到客户端,不处理的话,会出现close_wait,\n            #并且循环中每次都会出现该事件,会严重影响程序处理效率,因此需要把它从epoll重移除\n            if data == b'':\n               print \"receiv client close : %s \"% str(fileno)\n               epoll.unregister(fileno)\n               try :\n                  connections[fileno].close()\n               except Exception, e:\n                  print ' connection was allready closed.....'+e\n         #将此接入返回给客户端\n         elif event & select.EPOLLOUT:\n            byteswritten = connections[fileno].send(responses[fileno])\n            responses[fileno] = responses[fileno][byteswritten:]\n            if len(responses[fileno]) == 0:\n               epoll.modify(fileno, 0)\n               try:\n                  connections[fileno].shutdown(socket.SHUT_RDWR)\n               except Exception, e:\n                  print ' connection was allready closed.....' + e\n         #服务端主动关闭连接时的逻辑处理\n         elif event & select.EPOLLHUP:\n            print \"close fd : %s \"% str(fileno)\n            epoll.unregister(fileno)\n            connections[fileno].close()\n            del connections[fileno]\n         else :\n            print '='*10\n            print fileno,event\nfinally:\n   # set_trace()\n   epoll.unregister(serversocket.fileno())\n   epoll.close()\n   serversocket.close()\n\n\n总结\n\n这段程序大部分摘抄自http://scotdoyle.com/python-epoll-howto.html\n但经过测试发现他的程序有些bug.\n使用telnet测试后发现,客户端主动关闭时会发送个空信息到客户端,不处理的话,会出现close_wait.\n并且循环中每次都会出现该事件,会严重影响程序处理效率,因此需要把它从epoll重移除.\n原因发生tcp协议中四次握手时,客户端的关闭消息没有被处理\n\n理解这些bug对epoll使用很有帮助\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "12"}