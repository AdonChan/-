{"title": "5-django——验证码，中间件 - Python全栈玩起来 ", "index": "python,django", "content": "验证码\n在用户注册、登陆页面为了防止暴力请求，可以加入验证码。如果验证码错误，则不需要继续处理，可以减轻服务器的压力\n使用验证码也是一种有效防止csrf的方法\ndef verifycode(request):\n    #引入绘图模块\n    from PIL import Image, ImageDraw, ImageFont\n    #引入随机函数模块\n    import random\n    #定义变量，用于画面的背景色、宽、高\n    bgcolor = (random.randrange(20, 100), random.randrange(\n        20, 100), random.randrange(20, 100))\n    width = 100\n    height = 50\n    #创建画面对象\n    im = Image.new('RGB', (width, height), bgcolor)\n    #创建画笔对象\n    draw = ImageDraw.Draw(im)\n    #调用画笔的point()函数绘制噪点\n    for i in range(0, 100):\n        xy = (random.randrange(0, width), random.randrange(0, height))\n        fill = (random.randrange(0, 255), 255, random.randrange(0, 255))\n        draw.point(xy, fill=fill)\n    #定义验证码的备选值\n    str = '1234567890QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm'\n    #随机选取4个值作为验证码\n    rand_str = ''\n    for i in range(0, 4):\n        rand_str += str[random.randrange(0, len(str))]\n    #构造字体对象\n    font = ImageFont.truetype(r'C:\\Windows\\Fonts\\AdobeArabic-Bold.otf', 40)\n    #构造字体颜色\n    fontcolor1 = (255, random.randrange(0, 255), random.randrange(0, 255))\n    fontcolor2 = (255, random.randrange(0, 255), random.randrange(0, 255))\n    fontcolor3 = (255, random.randrange(0, 255), random.randrange(0, 255))\n    fontcolor4 = (255, random.randrange(0, 255), random.randrange(0, 255))\n    #绘制4个字\n    draw.text((5, 2), rand_str[0], font=font, fill=fontcolor1)\n    draw.text((25, 2), rand_str[1], font=font, fill=fontcolor2)\n    draw.text((50, 2), rand_str[2], font=font, fill=fontcolor3)\n    draw.text((75, 2), rand_str[3], font=font, fill=fontcolor4)\n    #释放画笔\n    del draw\n\n    #内存文件操作\n    import io\n    buf = io.BytesIO()\n    #将图片保存在内存中，文件类型为png\n    im.save(buf, 'png')\n    #将内存中的图片数据返回给客户端，MIME类型为图片png\n    response = HttpResponse(buf.getvalue(), 'image/png')\n\n    #将验证码的值写入cookie，以被前端浏览器验证验证码\n    # response.set_cookie(\"verifycode\", rand_str)\n\n    # 存入session，用于做进一步验证\n    request.session['verifycode'] = rand_str\n\n    return response\ndef login(request):\n    if request.method == \"GET\":\n        infoStr = \"<h1>sunck is a good man</h1>\"\n        # infoStr = \"<script>alert('sunck good')</script>\"\n        return render(request, \"login.html\", {\"infoStr\":infoStr})\n    else:\n        #判断验证码\n        verifycode = request.POST.get(\"verifycode\")\n        if not verifycode.upper() == request.session.get(\"verifycode\").upper():\n            return redirect(\"/login/\")\n\n        username = request.POST.get(\"username\")\n        password = request.POST.get(\"password\")\n        if username == \"sunck\" and password == \"sunck1999\":\n            return redirect(\"/index/\")\n        else:\n            return redirect(\"/login/\")\n中间件\n概述\n一个轻量级、底层的插件系统，可以介入Django的请求和响应过程，处理Django的输入或输出\n每个中间件组件都是一个独立的Python类\ndjango中间件简单图解\n\n方法\n\n自定义中间件\n在App目录下创建名为middlewares的包\n在包中创建自己的中间件类文件\nverifycodeMiddleware.py\nfrom django.utils.deprecation import MiddlewareMixin\nfrom django.shortcuts import redirect\n\n\nclass VerifycodeMiddleware(MiddlewareMixin):\n    def process_request(self, request):\n        print(\"***************\", request.path)\n        if request.path == \"/login/\" and request.method == \"POST\":\n            # 判断验证码\n            verifycode = request.POST.get(\"verifycode\")\n            if not verifycode.upper() == request.session.get(\"verifycode\").upper():\n                return redirect(\"/login/\")\n在settings.py文件中配阿置MIDDLEWARE\n'myApp.middlewares.verifycodeMiddleware.VerifycodeMiddleware'\n6-django——admin站点管理\n\n                ", "mainLikeNum": ["12 "], "mainBookmarkNum": "6"}