{"title": "Python学习 - 基本函数 - 走路放慢脚步 ", "index": "python", "content": "原文阅读\n\n语句的执行顺序\n\n学C的时候，写函数常会先去找main函数，一级一级的调用看下来，再在适当的一个函数里，调用需要的函数，传入参数，获得数据。Python有点出入，一个.py文件，从上往下执行语句，main函数就是开始语句。比如一个递归的函数\n\ndef fact(n):\n    if n == 1:\n        return 1;\n    return n * n + fact(n - 1)\n\nprint fact(4)\n\n\n这个是计算1 * 1 + 2 * 2 + 3 * 3 + ... + n * n（markDown怎么写平方 - -#），递归调用，假设文件名为a.py，在Terminal下运行python a.py，就输出数据了。当然还能增加另外的函数和执行语句。\n\n也能给函数指定别名（可以理解为函数指针）：\n\ndef fact(n):\n    if n == 1:\n        return 1;\n    return n * n + fact(n - 1)\nz = fact\nprint z(4)\n\n\n函数返回值\n\n看一个函数，输出一个数的绝对值，如果输入的不是数字，则报错：\n\ndef my_abs(x):\n    if not isinstance(x, (int, float)):\n        raise TypeError('bad operand type')\n    if x > 0:\n        return x\n    elif x == 0:\n        pass\n    else:\n        return -x\nprint my_abs(5)\nprint my_abs(0)\nprint my_abs(-5)\nprint my_abs('a')\n\n\n输出：\n\n一个函数也能返回多个值:\n\nimport math\n\ndef move(x, y, step, angle=0):\n    nx = x + step * math.cos(angle)\n    ny = y - step * math.sin(angle)\n    return nx, ny\na,b = move(100, 100, 60, math.pi / 6)\nprint a, b\n\n\n输出:\n\n函数的参数\n\n默认参数\n\n定义一个函数，计算x的n次方：\n\ndef power(x, n):\n    s = 1\n    while n > 0:\n        n = n - 1\n        s = s * x\n    return s\n\n\n调用power(5,2)，就能得到25。如果这个函数主要是为了计算平方，可以写成：\n\ndef power(x, n = 2):\n    s = 1\n    while n > 0:\n        n = n - 1\n        s = s * x\n    return s\n\n\n调用power(5)，也能得到25。计算3次方power(5, 3)，默认参数可以节省输入，预防一些错误。\n\n可变参数\n\nPython中函数的参数个数是可变的。具体是怎么样呢？比如我们要计算a * a, b * b, c * c：\n一、def func(a, b ,c):，函数参数是3个整数，调用时func(a, b, c)\n\n二、def func(numbers):，参数是一个list或者tuple，调用时func([a,b,c])或func((a, b ,c))\n\n而可变参数的函数是def func(*numbers):，调用时候func(a, b, c)，可以写成：\n\ndef func(*numbers):\n    sum = 0\n    for n in numbers:\n        sum = sum + n * n\n    return sum\n\n\n关键字参数\n\n可变参数是传入参数到函数后，函数自动将参数组装成一个tuple，关键字参数则是将参数组装成key-value键值对。比如：\n\ndef person(name, age, **kw):\n    print 'name:', name, 'age:', age, 'other:', kw\n\n\n调用函数：\n\n>>> person('Michael', 30)\nname: Michael age: 30 other: {}\n\n\n>>> person('Adam', 45, gender='M', job='Engineer')\nname: Adam age: 45 other: {'gender': 'M', 'job': 'Engineer'}\n\n\n这样，函数参数就有了list类型的参数。还可以这么调用\n\n>>> kw = {'city': 'Beijing', 'job': 'Engineer'}\n>>> person('Jack', 24, **kw)\nname: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'}\n\n\n参数组合\n\n可以将各种参数组合用，顺序必须是：必选参数、默认参数、可变参数和关键字参数。比如：\n\ndef func(a, b, c=0, *args, **kw):\n    print 'a =', a, 'b =', b, 'c =', c, 'args =', args, 'kw =', kw\n\n\n*args为可变参数，接受的是tuple，**kw是关键字参数，接受的是一个dict。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "3"}