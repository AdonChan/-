{"title": "[Learning Python] Chapter 8 Lists and Dictionaries - 潜入深蓝 ", "index": "python", "content": "Chapter 8 Lists and Dictionaries1, list的concatenation 和 repetition 操作：\n>>> [1, 2, 3] + [4, 5, 6] # Concatenation\n[1, 2, 3, 4, 5, 6]\n>>> ['Ni!'] * 4 # Repetition\n['Ni!', 'Ni!', 'Ni!', 'Ni!']\n\n2，list是mutable sequence，可以做in place assignment.A, 单一赋值：\n>>> L = ['spam', 'Spam', 'SPAM!']\n>>> L[1] = 'eggs' # Index assignment\n>>> L\n['spam', 'eggs', 'SPAM!']\n\nB，用slice给多个item赋值\n>>> L[0:2] = ['eat', 'more'] # Slice assignment: delete+insert\n>>> L # Replaces items 0,1\n['eat', 'more', 'SPAM!']\n\n虽然[0:2]仅包含2个item，但是，重新赋值的时候可以赋给不止2个，或者少于2个，其实应该这样认识slice assignment：Step 1：将slice里面的items删除； Step 2：将要赋值的新的sublist插入。所以删除的item的个数可以和插入的item的个数不一致。\n3，如何extend一个list？方法一：使用slice assignment：\n>>> L\n[2, 3, 4, 1]\n\n>>> L[len(L):] = [5, 6, 7] # Insert all at len(L):, an empty slice at end\n>>> L\n[2, 3, 4, 1, 5, 6, 7]\n\n方法二：使用extend方法\n>>> L.extend([8, 9, 10]) # Insert all at end, named method\n>>> L\n[2, 3, 4, 1, 5, 6, 7, 8, 9, 10]\n\n方法三：使用append方法\n>>> L = ['eat', 'more', 'SPAM!']\n>>> L.append('please') # Append method call: add item at end\n>>> L\n['eat', 'more', 'SPAM!', 'please']\n\n4，sort（）按升序或降序排列\nL = [2, 3, 4, 1]\nL.sort()  #表示升序\nL\n[1, 2, 3, 4]\nL.sort(reverse = True) #表示降序\nL\n[4, 3, 2, 1]\n\nSort和 append会返回None。所以把他们赋给其他变量，否则那个变量将变为None。\n5，有一个sorted函数也可以做这样的事情，并返回一个list：\n>>> L = ['abc', 'ABD', 'aBe']\n>>> sorted([x.lower() for x in L], reverse=True) # Pretransform items: differs!\n['abe', 'abd', 'abc']\n\n6，reverse可以用来倒序：\n>>> L\n[1, 2, 3, 4]\n>>> L.reverse() # In-place reversal method\n>>> L\n[4, 3, 2, 1]\n>>> list(reversed(L)) # Reversal built-in with a result (iterator)\n[1, 2, 3, 4]\n\n7，index, insert, remove, pop, count\n>>> L = ['spam', 'eggs', 'ham']\n>>> L.index('eggs') # Index of an object (search/find)\n1\n>>> L.insert(1, 'toast') # Insert at position\n>>> L\n['spam', 'toast', 'eggs', 'ham']\n>>> L.remove('eggs') # Delete by value \n>> L\n['spam', 'toast', 'ham']\n>>> L.pop(1) # Delete by position\n'toast'\n>>> L\n['spam', 'ham']\n>>> L.count('spam') # Number of occurrences\n1\n\n8, del函数不仅可以删除一个item，还可以删除一个section。\n>>> L = ['spam', 'eggs', 'ham', 'toast']\n>>> del L[0] # Delete one item\n>>> L\n['eggs', 'ham', 'toast']\n>>> del L[1:] # Delete an entire section\n>>> L # Same as L[1:] = []\n['eggs']\n\n而remove仅能删除一个item。\n9，给某个section赋值一个空List，也就相当于删除该section：L[i:j]=[]\n10，dictionary使用key来index：\n>>> D = {'spam': 2, 'ham': 1, 'eggs': 3} # Make a dictionary\n>>> D['spam'] # Fetch a value by key\n2\n>>> D # Order is \"scrambled\"\n{'eggs': 3, 'spam': 2, 'ham': 1}\n\n11，dictionary的keys方法返回dictionary的所有key 值：\n>>> len(D) # Number of entries in dictionary\n3\n>>> 'ham' in D # Key membership test alternative\nTrue\n>>> list(D.keys()) # Create a new list of D's keys\n['eggs', 'spam', 'ham']\n\n#可以不用list（）方法，因为在Python 2.x keys的值本来就是list\n12，在dictionary中，给一个key赋值新的value：\n>>> D\n{'eggs': 3, 'spam': 2, 'ham': 1}\n>>> D['ham'] = ['grill', 'bake', 'fry'] # Change entry (value=list)\n>>> D\n{'eggs': 3, 'spam': 2, 'ham': ['grill', 'bake', 'fry']}\n\n13， 删除某个entry，通过key\n>>> del D['eggs'] # Delete entry\n>>> D\n{'spam': 2, 'ham': ['grill', 'bake', 'fry']}\n\n14，增加一个新的entry：\n>>> D['brunch'] = 'Bacon' # Add new entry\n>>> D\n{'brunch': 'Bacon', 'spam': 2, 'ham': ['grill', 'bake', 'fry']}\n\n15，dictionary的values（）方法返回dictionary的所有values\n>>> D = {'spam': 2, 'ham': 1, 'eggs': 3}\n>>> list(D.values()) #可以不用list（）方法，因为D.values()的值本来就是list\n[3, 2, 1]\n\n16，dictionary的items（）方法返回dictionary的所有key=value tuple，返回的是一个list。\n>>> list(D.items())\n[('eggs', 3), ('spam', 2), ('ham', 1)]\n\n17，有时候不确定dictionary是否有某个key，而如果仍然有之前的index方法来获取，可能引起程序error退出。使用get方法可以避免这样的错误导致程序出现error。如果没有某个key，get会返回None，而如果不想让程序提示None，可以在第二个参数填入想要输出的内容，如下：\n>>> D.get('spam') # A key that is there\n2\n>>> print(D.get('toast')) # A key that is missing\nNone\n>>> D.get('toast', 88)\n88\n\n18，dictionary有一个update方法，可以将一个dictionary加入到另外一个dictionary中，将D2加入到D中。应该注意的是，如果它们有相同的keys，那么D中重复的key所对应的值将被D2的key所对应的值覆盖。\n>>> D\n{'eggs': 3, 'spam': 2, 'ham': 1}\n>>> D2 = {'toast':4, 'muffin':5} # Lots of delicious scrambled order here\n>>> D.update(D2)\n>>> D\n{'eggs': 3, 'muffin': 5, 'toast': 4, 'spam': 2, 'ham': 1}\n\n19，dictionary的pop方法，填入的参数是key，返回的值是value，被pop执行的entry被移除出dictionary。\n20，如何遍历一个dictionary？ 可以用for-in loop：方法一： for key in D方法二： for key in D.keys()\n21, 如果想要根据value来获得key，可以参考下面的例子：\nD = {'spam': 2, 'ham': 1, 'egg': 3}\nE = {'spam': 4, 'toast': 3, 'hamburger': 5}\nD.update(E)\n#print D\n\nsome_food = [key for (key, value) in D.items() if value == 3]\n\nprint some_food\n\n如上面斜体的表达式，将返回list。如果这个value对应多个key，则返回的list将有多个item，如果仅有一个key，那么这个list将只有一个值，此时可以用list[0]来将中括号去除。\n22，作为key的值得类型可以是string、integer、float、tuple等不会改变的值， 用户自己定义的object也能作为key，只要它们是hashable并且不会改变的。像list、set、dictionary等这些会变的type不能作为dictionary的key。\n23，下面这个例子阐述了tuple类型的key在坐标问题中的作用：\n>>> Matrix = {}\n>>> Matrix[(2, 3, 4)] = 88\n>>> Matrix[(7, 8, 9)] = 99\n>>>\n>>> X = 2; Y = 3; Z = 4 # ; separates statements: see Chapter 10\n>>> Matrix[(X, Y, Z)]\n88\n>>> Matrix\n{(2, 3, 4): 88, (7, 8, 9): 99}\n\n24，创建dictionary的几个方法：方法一：传统的方法\n{'name': 'Bob', 'age': 40} # Traditional literal expression\n\n方法二：逐一赋值\nD = {} # Assign by keys dynamically\nD['name'] = 'Bob'\nD['age'] = 40\n\n方法三：通过dict函数创建，注意，使用这种方法，key只能是string\ndict(name='Bob', age=40) # dict keyword argument form\n\n方法四：将key/value作为一个tuple，再用[]括起来，写进dict（）中，这种比较少用到\ndict([('name', 'Bob'), ('age', 40)]) # dict key/value tuples form\n\n方法五：使用zip（）函数\ndict(zip(keyslist, valueslist)) # Zipped key/value tuples form (ahead)\n\n方法六：使用fromkeys函数，很少用到\n>>> dict.fromkeys(['a', 'b'], 0)\n{'a': 0, 'b': 0}\n\n25，使用dictionary comprehensions来创建dictionary的例子：25.1 别忘了冒号。。\n>>> D = {x: x ** 2 for x in [1, 2, 3, 4]} # Or: range(1, 5)\n>>> D\n{1: 1, 2: 4, 3: 9, 4: 16}\n\n25.2\n>>> D = {c: c * 4 for c in 'SPAM'} # Loop over any iterable\n>>> D\n{'S': 'SSSS', 'P': 'PPPP', 'A': 'AAAA', 'M': 'MMMM'}\n\n25.3\n>>> D = {c.lower(): c + '!' for c in ['SPAM', 'EGGS', 'HAM']}\n>>> D\n{'eggs': 'EGGS!', 'spam': 'SPAM!', 'ham': 'HAM!'}\n\n25.4\n>>> D = {k:0 for k in ['a', 'b', 'c']} # Same, but with a comprehension\n>>> D\n{'b': 0, 'c': 0, 'a': 0}\n\n26，在Python 3.x中，dictionary的keys()方法返回的不再是list。而是类似像set一样的结构。不过可以使用list()强迫它们组成一个list。\n>>> D = dict(a=1, b=2, c=3)\n>>> D\n{'b': 2, 'c': 3, 'a': 1}\n>>> K = D.keys() # Makes a view object in 3.X, not a list\n>>> K\ndict_keys(['b', 'c', 'a'])\n>>> list(K) # Force a real list in 3.X if needed\n['b', 'c', 'a']\n\n它们具有交集、并集、等set所具有的运算：\n>>> D = {'a': 1, 'b': 2, 'c': 3}\n>>> D.keys() & D.keys() # Intersect keys views\n{'b', 'c', 'a'}\n>>> D.keys() & {'b'} # Intersect keys and set\n{'b'}\n>>> D.keys() & {'b': 1} # Intersect keys and dict\n{'b'}\n\n27，练习题：用两种方法创建一个list，这个list包含5个0：方法一：[0,0,0,0,0]方法二：[0 for i in range(5)]方法三：[0] * 5方法四：用循环加append的方法\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}