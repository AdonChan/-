{"title": "我用 Python 抓取了 7000 多本电子书 - 喔噢实验室 ", "index": "python", "content": "头两天神游网上，无意间发现个可以免费下载电子书的网站，一下子就勾起了我的收藏癖，心痒痒的要把这些书下载下来，正好前不久 requests 的作者 kennethreitz 出了一个新库 requests-html ，它不仅可以请求网页，还可以解析 HTML 文档，话不多说，咱开始吧。\n安装\n安装很简单，只要执行：\npip install requests-html\n\n就可以了。\n分析页面结构\n通过浏览器审查元素可以发现这个电子书网站是用 WordPress 搭建的，首页列表元素很简单，很规整，\n所以我们可以查找 .entry-title > a 获取所有图书详情页的链接，接着我们进入详情页，来寻找下载链接，由下图\n可以发现  .download-links > a 里的链接就是该书的下载链接，回到列表页可以发现该站一共 700 多页，由此我们便可以循环列表获取所有的下载链接。\nRequests-html 快速指南\n发送一个 GET 请求：\nfrom requests_html import HTMLSession\nsession = HTMLSession()\n\nr = session.get('https://python.org/')\n\nRequests-html 的方便之处就是它解析 html 方式就像使用 jQuery 一样简单，比如：\n# 获取页面的所有链接可以这样写：\nr.html.links\n# 会返回 {'//docs.python.org/3/tutorial/', '/about/apps/'}\n\n# 获取页面的所有的绝对链接：\nr.html.absolute_links\n# 会返回 {'https://github.com/python/pythondotorg/issues', 'https://docs.python.org/3/tutorial/'}\n\n# 通过 CSS 选择器选择元素：\nabout = r.find('.about', first=True)\n# 参数 first 表示只获取找到的第一元素\nabout.text # 获取 .about 下的所有文本\nabout.attrs # 获取 .about 下所有属性像 id, src, href 等等\nabout.html # 获取 .about 的 HTML\nabout.find('a') # 获取 .about 下的所有 a 标签\n\n\n\n构建代码\nfrom requests_html import HTMLSession\nimport requests\nimport time\nimport json\nimport random\nimport sys\n\nsession = HTMLSession()\nlist_url = 'http://www.allitebooks.com/page/'\n\nUSER_AGENTS = [\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20\",\n    \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER\",\n    \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 LBBROWSER\",\n    \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)\",\n    \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)\",\n    \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; 360SE)\",\n    \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)\",\n    \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1\",\n    \"Mozilla/5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8C148 Safari/6533.18.5\",\n    \"Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b13pre) Gecko/20110307 Firefox/4.0b13pre\",\n    \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:16.0) Gecko/20100101 Firefox/16.0\",\n    \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11\",\n    \"Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10\"\n]\n\n# 获取当前列表页所有图书链接\ndef get_list(url):\n    response = session.get(url)\n    all_link = response.html.find('.entry-title a') # 获取页面所有图书详情链接\n    for link in all_link:\n        getBookUrl(link.attrs['href'])\n\n# 获取图书下载链接\ndef getBookUrl(url):\n    response = session.get(url)\n    l = response.html.find('.download-links a', first=True)\n    if l is not None: # 运行后发现有的个别页面没有下载链接，这里加个判断\n        link = l.attrs['href'];\n        download(link)\n\n#下载图书\ndef download(url):\n    # 随机浏览器 User-Agent\n    headers={ \"User-Agent\":random.choice(USER_AGENTS) }\n    # 获取文件名\n    filename = url.split('/')[-1]\n    # 如果 url 里包含 .pdf\n    if \".pdf\" in url:\n        file = 'book/'+filename # 文件路径写死了，运行时当前目录必须有名 book 的文件夹\n        with open(file, 'wb') as f:\n            print(\"正在下载 %s\" % filename)\n            response = requests.get(url, stream=True, headers=headers)\n            \n            # 获取文件大小\n            total_length = response.headers.get('content-length')\n            # 如果文件大小不存在，则直接写入返回的文本\n            if total_length is None: \n                f.write(response.content)\n            else:\n                # 下载进度条\n                dl = 0\n                total_length = int(total_length) # 文件大小\n                for data in response.iter_content(chunk_size=4096): # 每次响应获取 4096 字节\n                    dl += len(data)\n                    f.write(data)\n                    done = int(50 * dl / total_length)\n                    sys.stdout.write(\"\\r[%s%s]\" % ('=' * done, ' ' * (50-done)) ) # 打印进度条   \n                    sys.stdout.flush()\n\n            print(filename + '下载完成！')\n\nif __name__ == '__main__':\n    #从这运行，应为知道列表总数，所以偷个懒直接开始循环\n    for x in range(1,756):\n        print('当前页面: '+ str(x))\n        get_list(list_url+str(x))\n\n\n\n运行效果：\n\n公众号\n我的公众号喔噢实验室，欢迎交流~\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}