{"title": "通过7个Python函数来解释区块链 - 个人文章 ", "index": "后端,程序员,区块链,函数,python", "content": "我想对于那里的很多人来说，区块链就是这种现象，很难不让你头脑发热。我开始观看视频和阅读文章，但对我个人而言，直到我编写自己的简单区块链，我才真正理解它是什么以及它的潜在应用价值。\n我对区块链的看法是它是一个公开的加密数据库。如果你是亚马逊并且你想使用该技术来跟踪库存水平，那么使用区块链是否有意义？可能没有，因为你的客户不想花费资源来验证你的区块链，因为他们只顾看着网站说Only 1 left!。\n我会让你考虑未来的应用。所以不用多说，让我们看看我们的7个函数！\ndef hash_function(k):\n    \"\"\"Hashes our transaction.\"\"\"\n    if type(k) is not str:\n        k = json.dumps(k, sort_keys=True)\n\n    return hashlib.sha256(k).hexdigest()\n区块链的核心是hash函数。如果没有加密，区块链将易于操作，并且交易将能够以欺诈方式写入。\ndef update_state(transaction, state):\n    state = state.copy()\n\n    for key in transaction:\n        if key in state.keys():\n            state[key] += transaction[key]\n        else:\n            state[key] = transaction[key]\n\n    return state\nstate是来记录谁拥有代币交易情况。例如，我有10个代币，我给1到Medium，然后状态state将是下面字典的值。\n{‘transaction’: {‘Tom’: 9, ‘Medium’: 1}}\n值得注意的是，透支不可能存在。如果现有只有10个代币，那么我就不能给某人11个代币。以下函数验证我们尝试进行的交易确实有效。此外，交易总体上必须平衡。我不能给5个代币并让收件人收到4个代币币，因为这样可以销毁和生成代币。\ndef valid_transaction(transaction, state):\n    \"\"\"A valid transaction must sum to 0.\"\"\"\n    if sum(transaction.values()) is not 0:\n        return False\n\n    for key in transaction.keys():\n        if key in state.keys():\n            account_balance = state[key]\n        else:\n            account_balance = 0\n\n        if account_balance + transaction[key] < 0:\n            return False\n\n    return True\n现在，我们可以制作我们的区块。读取前一个区块的信息，并将其用于将其链接到新区块。这也是区块链理念的核心。可以尝试以欺骗性的方式将看似有效的交易插入到区块链中，但是解密所有先前的块在计算上（几乎）是不可能的，这就保留了区块链的完整性。\ndef make_block(transactions, chain):\n    \"\"\"Make a block to go into the chain.\"\"\"\n    parent_hash = chain[-1]['hash']\n    block_number = chain[-1]['contents']['block_number'] + 1\n\n    block_contents = {\n        'block_number': block_number,\n        'parent_hash': parent_hash,\n        'transaction_count': block_number + 1,\n        'transaction': transactions\n    }\n\n    return {'hash': hash_function(block_contents), 'contents': block_contents}\n下面是一个小辅助函数来检查前一个块的哈希值：\ndef check_block_hash(block):\n    expected_hash = hash_function(block['contents'])\n\n    if block['hash'] is not expected_hash:\n        raise\n\n    return\n一旦我们将所有东西组合在一起，就有时间来创建我们的区块。我们现在将更新区块链。\ndef check_block_validity(block, parent, state):\n    parent_number = parent['contents']['block_number']\n    parent_hash = parent['hash']\n    block_number = block['contents']['block_number']\n\n    for transaction in block['contents']['transaction']:\n        if valid_transaction(transaction, state):\n            state = update_state(transaction, state)\n        else:\n            raise\n\n    check_block_hash(block)  # Check hash integrity\n\n    if block_number is not parent_number + 1:\n        raise\n\n    if block['contents']['parent_hash'] is not parent_hash:\n        raise\n\n    return state\n在我们完成之前，必须验证区块链：\ndef check_chain(chain):\n    \"\"\"Check the chain is valid.\"\"\"\n    if type(chain) is str:\n        try:\n            chain = json.loads(chain)\n            assert (type(chain) == list)\n        except ValueError:\n            # String passed in was not valid JSON\n            return False\n    elif type(chain) is not list:\n        return False\n\n    state = {}\n\n    for transaction in chain[0]['contents']['transaction']:\n        state = update_state(transaction, state)\n\n    check_block_hash(chain[0])\n    parent = chain[0]\n\n    for block in chain[1:]:\n        state = check_block_validity(block, parent, state)\n        parent = block\n\n    return state\n最后，需要一个交易功能，它将以上所有内容挂起：\ndef add_transaction_to_chain(transaction, state, chain):\n    if valid_transaction(transaction, state):\n        state = update_state(transaction, state)\n    else:\n        raise Exception('Invalid transaction.')\n\n    my_block = make_block(state, chain)\n    chain.append(my_block)\n\n    for transaction in chain:\n        check_chain(transaction)\n\n    return state, chain\n所以，现在我们有了7个函数。我们如何与它互动？好吧，首先我们需要用Genesis Block启动我们的区块链。这是我们的新代币（或库存等）的开始。出于本文解释说明的目的，我会说我是Tom，将从拥有10个代币开始。\ngenesis_block = {\n    'hash': hash_function({\n        'block_number': 0,\n        'parent_hash': None,\n        'transaction_count': 1,\n        'transaction': [{'Tom': 10}]\n    }),\n    'contents': {\n        'block_number': 0,\n        'parent_hash': None,\n        'transaction_count': 1,\n        'transaction': [{'Tom': 10}]\n    },\n}\n\nblock_chain = [genesis_block]\nchain_state = {'Tom': 10}\n现在，看看当我将一些代币交给Medium时会发生什么：\nchain_state, block_chain = add_transaction_to_chain(transaction={'Tom': -1, 'Medium': 1}, state=chain_state, chain=block_chain)\nstate更新显示谁拥有多少代币：\n{'Medium': 1, 'Tom': 9}\n区块链看起来像这样：\n[{'contents': {'block_number': 0,\n               'parent_hash': None,\n               'transaction': [{'Tom': 10}],\n               'transaction_count': 1},\n  'hash': '064d0b480b3b92761f31831d30ae9f01954efaa62371b4b44f11465ec22abe93'},\n {'contents': {'block_number': 1,\n               'parent_hash': '064d0b480b3b92761f31831d30ae9f01954efaa62371b4b44f11465ec22abe93',\n               'transaction': {'Medium': 1, 'Tom': 9},\n               'transaction_count': 2},\n  'hash': 'b4ae25f0cc0ee0b0caa66b9a3473e9a108652d53b1dc22a40962fef5c8c0f08c'}]\n我们创建了第一个新交易并将其插入到堆栈顶部。现在，我希望我已经激起了你的好奇心，并且有兴趣将代码复制下来并使用它。在我看来，这是学习新技术的最佳方式 ——进入它。\n玩代码并制作自己的代币。如果你试图提供比目前存在的更多代币会怎么样？ 如果你继续创造新的收款人，会发生什么？\n你能想到区块链的未来应用吗？\n======================================================================\n分享一些以太坊、EOS、比特币等区块链相关的交互式在线编程实战教程：\npython以太坊，主要是针对python工程师使用web3.py进行区块链以太坊开发的详解。\n\n\njava以太坊开发教程，主要是针对java和android程序员进行区块链以太坊开发的web3j详解。\n\nphp以太坊，主要是介绍使用php进行智能合约开发交互，进行账号创建、交易、转账、代币开发以及过滤器和交易等内容。\n\n以太坊入门教程，主要介绍智能合约与dapp应用开发，适合入门。\n\n以太坊开发进阶教程，主要是介绍使用node.js、mongodb、区块链、ipfs实现去中心化电商DApp实战，适合进阶。\n\nC#以太坊，主要讲解如何使用C#开发基于.Net的以太坊应用，包括账户管理、状态与交易、智能合约开发与交互、过滤器和交易等。\n\nEOS教程，本课程帮助你快速入门EOS区块链去中心化应用的开发，内容涵盖EOS工具链、账户与钱包、发行代币、智能合约开发与部署、使用代码与智能合约交互等核心知识点，最后综合运用各知识点完成一个便签DApp的开发。\n\njava比特币开发教程，本课程面向初学者，内容即涵盖比特币的核心概念，例如区块链存储、去中心化共识机制、密钥与脚本、交易与UTXO等，同时也详细讲解如何在Java代码中集成比特币支持功能，例如创建地址、管理钱包、构造裸交易等，是Java工程师不可多得的比特币开发学习课程。\n\nphp比特币开发教程，本课程面向初学者，内容即涵盖比特币的核心概念，例如区块链存储、去中心化共识机制、密钥与脚本、交易与UTXO等，同时也详细讲解如何在Php代码中集成比特币支持功能，例如创建地址、管理钱包、构造裸交易等，是Php工程师不可多得的比特币开发学习课程。\n\n这里是原文\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "2"}