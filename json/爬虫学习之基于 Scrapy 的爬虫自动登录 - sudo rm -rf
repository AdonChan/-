{"title": "爬虫学习之基于 Scrapy 的爬虫自动登录 - sudo rm -rf ", "index": "豆瓣,网页爬虫,scrapy,python", "content": "概述\n在前面两篇（爬虫学习之基于Scrapy的网络爬虫和爬虫学习之简单的网络爬虫）文章中我们通过两个实际的案例，采用不同的方式进行了内容提取。我们对网络爬虫有了一个比较初级的认识，只要发起请求获取响应的网页内容，然后对内容进行格式化存储。很多时候我们抓取到的内容可能会发生重复，也有可能是需要计算或者组织过的全新的内容甚至是需要登录后才能访问的内容， 那么这一篇我们来学习一下Scrapy的Item部分以及了解如何使用Scrapy来进行自动登录。\n起步\n首先我们使用Scrapy的命令行创建一个新的项目\nscrapy startproject douban\n运行后，我们就有了下面这样的目录结构\n+ douban                               # 根目录\n    |- douban                          # Python的项目目录\n        |- spiders                     # 爬虫Spider部分，用于提取网页内容\n            |- __init__.py\n        |- __init__.py\n        |- items.py                    # 爬虫item， 用于定义数据结构\n        |- pipelines.py                # 爬虫pipeline，用于处理提取的结构，比如清洗数据、去重等\n        |- settings.py                 # Scrapy框架参数项目参数设置\n    |- scrapy.cfg                      # 爬虫部署相关设置\nScrapy为我们生成了已经组织好的目录结构，上面的注释部分解释了每个文件及目录的作用。\n建立目标\n本篇我们来建立两个目标，这两个目标都是基于豆瓣网：\n\n目标一：抓取豆瓣TOP250的图书信息并保存成csv文件\n目标二：抓取我的第一页豆邮标题（需要登录），并保存成csv文件\n\n分析目标一\n目标一是豆瓣的TOP250图书信息，首先我们进入到TOP250的列表(https://book.douban.com/top250) ，我用图示圈出我们这次要爬取的内容，具体请看图示：\n\n从图上的框线中我们主要圈出了书名、价格、出版年份、出版社、评分，其中出版年份，出版社以及价格是在一行中，这个我们需要进一步处理。\n分页的处理：总记录是250条，每页是25条图书信息，共分了10页。\n实现目标一\n需要用到的概念：\n\nItem\nItem Pipeline\n\n首先建立Scrapy的Item， Scrapy的Item就是我们需要存储的数据结构，先修改items, 然后在spiders目录中新建一个名为bookspider.py的Python文件，由于我们需要在一堆字符串中提取出出版社和价格等信息所以我们这里需要对抓取的内容进一步处理， 在这之前还需要修改settings.py文件：\n\n加入faker的模拟USER_AGENT数据防止被豆瓣屏蔽，\n也可以设置DEFAULT_REQUEST_HEADERS参数。\n修改ITEM_PIPELINES\n\n代码如下所示：\nitems.py\n# -*- coding: utf-8 -*-\n'''by sudo rm -rf http://imchenkun.com'''\nimport scrapy\n\n\nclass DoubanBookItem(scrapy.Item):\n    name = scrapy.Field()            # 书名\n    price = scrapy.Field()           # 价格\n    edition_year = scrapy.Field()    # 出版年份\n    publisher = scrapy.Field()       # 出版社\n    ratings = scrapy.Field()         # 评分\nbookspider.py\n# -*- coding:utf-8 -*-\n'''by sudo rm -rf http://imchenkun.com'''\nimport scrapy\nfrom douban.items import DoubanBookItem\n\n\nclass BookSpider(scrapy.Spider):\n    name = 'douban-book'\n    allowed_domains = ['douban.com']\n    start_urls = [\n        'https://book.douban.com/top250'\n    ]\n\n    def parse(self, response):\n        # 请求第一页\n        yield scrapy.Request(response.url, callback=self.parse_next)\n\n        # 请求其它页\n        for page in response.xpath('//div[@class=\"paginator\"]/a'):\n            link = page.xpath('@href').extract()[0]\n            yield scrapy.Request(link, callback=self.parse_next)\n\n    def parse_next(self, response):\n        for item in response.xpath('//tr[@class=\"item\"]'):\n            book = DoubanBookItem()\n            book['name'] = item.xpath('td[2]/div[1]/a/@title').extract()[0]\n            book['price'] = item.xpath('td[2]/p/text()').extract()[0]\n            book['ratings'] = item.xpath('td[2]/div[2]/span[2]/text()').extract()[0]\n            yield book\npipelines.py\n# -*- coding: utf-8 -*-\n'''by sudo rm -rf http://imchenkun.com'''\n\n\nclass DoubanBookPipeline(object):\n    def process_item(self, item, spider):\n        info = item['price'].split(' / ')  # [法] 圣埃克苏佩里 / 马振聘 / 人民文学出版社 / 2003-8 / 22.00元\n        item['name'] = item['name']\n        item['price'] = info[-1]\n        item['edition_year'] = info[-2]\n        item['publisher'] = info[-3]\n        return item\n最后我们到douban的根目录中执行以下命令来运行爬虫来执行并导出数据到csv文件\nscrapy crawl douban-book -o douban_book_top250.csv\ncsv文件截图如下：\n\n分析目标二\n目标二是建立在理解了目标一的基础上进行的，因为豆瓣登录次数过多会有验证码出现，这里提供一种手工填写验证码的方式，暂时不讨论如何去识别验证码，目标二的核心概念是如何提交POST表单和登录成功后带Cookie的请求。首先我们可以看到页面结构如下图所示：\n\n实现目标二\n定义Item\n# -*- coding: utf-8 -*-import scrapy\n'''by sudo rm -rf  http://imchenkun.com'''\n\n\nclass DoubanMailItem(scrapy.Item):\n    sender_time = scrapy.Field()     # 发送时间\n    sender_from = scrapy.Field()     # 发送人\n    url = scrapy.Field()             # 豆邮详细地址\n    title = scrapy.Field()           # 豆邮标题\n定义doumailspider\n# -*- coding:utf-8 -*-\n'''by sudo rm -rf  http://imchenkun.com'''\nimport scrapy\nfrom faker import Factory\nfrom douban.items import DoubanMailItem\nimport urlparse\n\nf = Factory.create()\n\n\nclass MailSpider(scrapy.Spider):\n    name = 'douban-mail'\n    allowed_domains = ['accounts.douban.com', 'douban.com']\n    start_urls = [\n        'https://www.douban.com/'\n    ]\n    headers = {\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n        'Accept-Encoding': 'gzip, deflate, br',\n        'Accept-Language': 'zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3',\n        'Connection': 'keep-alive',\n        'Host': 'accounts.douban.com',\n        'User-Agent': f.user_agent()\n    }\n\n    formdata = {\n        'form_email': '您的账号',\n        'form_password': '您的密码',\n        # 'captcha-solution': '',\n        # 'captcha-id': '',\n        'login': '登录',\n        'redir': 'https://www.douban.com/',\n        'source': 'None'\n    }\n\n    def start_requests(self):\n        return [scrapy.Request(url='https://www.douban.com/accounts/login',\n                               headers=self.headers,\n                               meta={'cookiejar': 1},\n                               callback=self.parse_login)]\n\n    def parse_login(self, response):\n        # 如果有验证码要人为处理\n        if 'captcha_image' in response.body:\n            print 'Copy the link:'\n            link = response.xpath('//img[@class=\"captcha_image\"]/@src').extract()[0]\n            print link\n            captcha_solution = raw_input('captcha-solution:')\n            captcha_id = urlparse.parse_qs(urlparse.urlparse(link).query, True)['id']\n            self.formdata['captcha-solution'] = captcha_solution\n            self.formdata['captcha-id'] = captcha_id\n        return [scrapy.FormRequest.from_response(response,\n                                                 formdata=self.formdata,\n                                                 headers=self.headers,\n                                                 meta={'cookiejar': response.meta['cookiejar']},\n                                                 callback=self.after_login\n                                                 )]\n\n    def after_login(self, response):\n        print response.status\n        self.headers['Host'] = \"www.douban.com\"\n        return scrapy.Request(url='https://www.douban.com/doumail/',\n                              meta={'cookiejar': response.meta['cookiejar']},\n                              headers=self.headers,\n                              callback=self.parse_mail)\n\n    def parse_mail(self, response):\n        print response.status\n        for item in response.xpath('//div[@class=\"doumail-list\"]/ul/li'):\n            mail = DoubanMailItem()\n            mail['sender_time'] = item.xpath('div[2]/div/span[1]/text()').extract()[0]\n            mail['sender_from'] = item.xpath('div[2]/div/span[2]/text()').extract()[0]\n            mail['url'] = item.xpath('div[2]/p/a/@href').extract()[0]\n            mail['title'] = item.xpath('div[2]/p/a/text()').extract()[0]\n            print mail\n            yield mail\n这里需要注意的有三个地方：\n\n第一个是meta中的cookiejar   Scrapy 通过使用 cookiejar Request meta key来支持单spider追踪多cookie session。默认情况下其使用一个cookie jar(session)，不过您可以传递一个标示符来使用多个。\nstart_requests 我们这里重写了爬虫爬取得第一个页面，这里一开始就进去到登录页面\n当执行爬虫的时候，我们需要把打印出来的验证码地址粘贴到浏览器中，手动输入到控制上完成验证。\n\n同目标一一样需要设置settings中的相关参数，唯一不同的是ITEM_PIPELINES。\n最后我们使用以下命令来启动爬虫\nscrapy crawl douban-mail -o douban_mail_page1.csv\ncsv文件截图如下：\n\nGithub地址：https://github.com/imchenkun/ick-spider/tree/master/douban\n总结\n本篇我们学习了如果定义Item以及如何对Item进行进一步处理(Item Pipeline)， 还通过登录豆瓣的案例来了解了如果使用Scrapy进行表单提交和Cookie追踪，也了解了对于有验证码的情况该如何处理，当然我们这里暂时还不讨论如何识别验证码。关于Scrapy的更高级的一些用法和特性可以进一步阅读Scrapy官网的文档。\n特别申明：本文所提到的豆瓣网只是拿来进行爬虫的技术交流学习，读者涉及到的所有侵权问题都与本人无关，也希望大家在学习实战的过程中不要大量的爬取内容对服务器造成负担\n本文首发在sudo rm -rf 采用署名(BY)-非商业性使用(NC)-禁止演绎(ND) 转载请注明原作者\n--EOF--\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "6"}