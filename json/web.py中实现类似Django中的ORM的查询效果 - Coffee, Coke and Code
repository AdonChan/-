{"title": "web.py中实现类似Django中的ORM的查询效果 - Coffee, Coke and Code ", "index": "web.py,python", "content": "Django中的对象查询\nDjango框架自带了ORM，实现了一些比较强大而且方便的查询功能，这些功能和表无关。比如下面这个例子：\nclass Question(models.Model):\n    question_text = models.CharField(max_length=200)\n    pub_date = models.DateTimeField('date published')\n    \n    \n\nQuestion.objects.all()Question.objects.get(pk=1)\n从例子可以看出，objects.all和objects.get这些功能都不是在class Question中定义的，可能在其父类models.Model中定义，也可能不是。那么我们在web.py中如何实现这样的功能呢？（如果你选择使用SQLAlchemy就不需要自己实现了）。\n\n实现\n思路\n我们注意到Question.objects.all()这样的调用是直接访问了类属性objects，并调用了objects属性的方法all()。这里objects可能是一个实例，也可能是一个类。我个人认为（我没看过Django的实现）这应该是一个实例，因为实例化的过程可以传递一些表的信息，使得类似all()这样的函数可以工作。经过分析之后，我们可以列出我们需要解决的问题：\n\n需要实现一个模型的父类Model，实际的表可以从这个父类继承以获得自己没有定义的功能。\n实际的模型类（比如Question类）定义后，不实例话的情况下就要具备objects.all()这样的查询效果。\n\n从上面的需求可以看出，我们需要在类定义的时候就实现这些功能，而不是等到类实例化的时候再实现这些功能。类定义的时候实现功能？这不就是metaclass（元类）做的事情嘛。因此实现过程大概是下面这样的：\n\n实现一个Model类，其绑定方法和表的增、删、改有关。\n修改Model类的元类为ModelMetaClass，该元类定义的过程中为类增加一个objects对象，该对象是一个ModelDefaultManager类的实例，实现了表的查询功能。\n\n代码\n都说不给代码就是耍流氓，我还是给吧。说明下：使用的数据库操作都是web.py的db库中的接口。\n    # -*- coding: utf-8 -*-\n    \n    import web\n    \n    import config  # 自定义的配置类，可以忽略\n    \n    \n    def _connect_to_db():\n        return web.database(dbn=\"sqlite\", db=config.dbname)\n    \n    \n    def init_db():\n        db = _connect_to_db()\n        for statement in config.sql_statements:\n            db.query(statement)\n    \n    \n    class ModelError(Exception):\n        \"\"\"Exception raised by all models.\n    \n        Attributes:\n            msg: Error message.\n        \"\"\"\n    \n        def __init__(self, msg=\"\"):\n            self.msg = msg\n    \n        def __str__(self):\n            return \"ModelError: %s\" % self.msg\n    \n    \n    class ModelDefaultManager(object):\n        \"\"\"ModelManager implements query functions against a model.\n    \n        Attributes:\n            cls: The class to be managed.\n        \"\"\"\n    \n        def __init__(self, cls):\n            self.cls = cls\n            self._table_name = cls.__name__.lower()\n    \n        def all(self):\n            db = _connect_to_db()\n            results = db.select(self._table_name)\n            return [self.cls(x) for x in results]\n    \n        def get(self, query_vars, where):\n            results = self.filter(query_vars, where, limit=1)\n            if len(results) > 0:\n                return results[0]\n            else:\n                return None\n    \n        def filter(self, query_vars, where, limit=None):\n            db = _connect_to_db()\n            try:\n                results = db.select(self._table_name, vars=query_vars, where=where,\n                                    limit=limit)\n            except (Exception) as e:\n                raise ModelError(str(e))\n    \n            return [self.cls(x) for x in results]\n    \n    \n    class ModelMetaClass(type):\n    \n        def __new__(cls, classname, bases, attrs):\n            new_class = super(ModelMetaClass, cls).__new__(cls, classname,\n                                                           bases, attrs)\n            objects = ModelDefaultManager(new_class)\n            setattr(new_class, \"objects\", objects)\n    \n            return new_class\n    \n    \n    class Model(object):\n        \"\"\"Parent class of all models.\n        \"\"\"\n    \n        __metaclass__ = ModelMetaClass\n    \n        def __init__(self):\n            pass\n    \n        def _table_name(self):\n            return self.__class__.__name__.lower()\n    \n        def insert(self, **kargs):\n            db = _connect_to_db()\n            try:\n                with db.transaction():\n                    db.insert(self._table_name(), **kargs)\n            except (Exception) as e:\n                raise ModelError(str(e))\n    \n        def delete(self, where, using=None, vars=None):\n            db = _connect_to_db()\n            try:\n                with db.transaction():\n                    db.delete(self._table_name(), where, vars=vars)\n            except (Exception) as e:\n                raise ModelError(str(e))\n    \n        def save(self, where, vars=None, **kargs):\n            db = _connect_to_db()\n            try:\n                with db.transaction():\n                    db.update(self._table_name(), where, vars, **kargs)\n            except (Exception) as e:\n                raise ModelError(str(e))\n使用\n首先定义表对应的类：\nclass Users(Model):\n    ...\n    \n使用就和Django的方式一样：\nuser_list = Users.objects.all()\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "2"}