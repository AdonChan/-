{"title": "初识Bottle（二） - 学无止境 ", "index": "bottle,python", "content": "在初识Bottle（一）中，我们了解了Bottle的基本用法在Bottle源码阅读（一）和Bottle源码阅读（二）可以查看个人对bottle源码的相关阅读笔记\n下面继续阅读Bottle的官方文档https://bottlepy.org/docs/dev...\n1.路由静态文件\n在bottle中例如css等的文件是不会被自动加载的，因此需要自己定义callback函数，通过调用使用\nfrom bottle import static_file\n@route('/static/<filename>')\ndef server_static(filename):\n    return static_file(filename, root='/path/to/your/static/files')\n2.错误页\n通过error装饰器可以对相应的错误码自定义对应的应用函数\nfrom bottle import error\n@error(404)\ndef error404(error):\n    return 'Nothing here, sorry'\n3.内容返回\nBottl框架允许应用函数返回如下类型的结果\nDictionaries字典：python的字典通过框架被转换为json字符串，而header中的Content-Type则会被设置为application/json\nEmpty Strings, False, None or other non-true values：header中的Content-Length被设置为0\nUnicode stringsByte stringsInstances of HTTPError or HTTPResponseFile objectsIterables and generators\n4.改变默认编码\n通过在应用函数中改变response的属性可以自定义\nfrom bottle import response\n@route('/iso')\ndef get_iso():\n    response.charset = 'ISO-8859-15'\n    return u'This will be sent with ISO-8859-15 encoding.'\n\n@route('/latin9')\ndef get_latin():\n    response.content_type = 'text/html; charset=latin9'\n    return u'ISO-8859-15 is also known as latin9.'\n5.静态文件的使用\n通过static_file接口，我们可以实现调用和下载\nfrom bottle import static_file\n@route('/images/<filename:re:.*\\.png>')\ndef send_image(filename):\n    return static_file(filename, root='/path/to/image/files', mimetype='image/png')\n\n@route('/static/<filename:path>')\ndef send_static(filename):\n    return static_file(filename, root='/path/to/static/files')\n    \n@route('/download/<filename:path>')\ndef download(filename):\n    return static_file(filename, root='/path/to/static/files', download=filename)\n6.HTTP ERRORS AND REDIRECTS\n通过abort可以快速定义错误码相应的错误页内容redirect实现重定向\nfrom bottle import route, abort\n@route('/restricted')\ndef restricted():\n    abort(401, \"Sorry, access denied.\")\n    \nfrom bottle import redirect\n@route('/wrong/url')\ndef wrong():\n    redirect(\"/right/url\")\n7.RESPONSE\nresponse对象包括了响应的metadata例如状态码，headers，cookie等\nresponse的状态码控制浏览器的行为，默认200okresponse的header可以通过set_header()来设置，对同一个header项，还可以通过add_header添加额外内容cookie是保留在用户浏览器的一些数据，可以通过get_cookie和set_cookie来操作\n@route('/hello')\ndef hello_again():\n    if request.get_cookie(\"visited\"):\n        return \"Welcome back! Nice to see you again\"\n    else:\n        response.set_cookie(\"visited\", \"yes\")\n        return \"Hello there! Nice to meet you\"\ncookie是容易被伪造的，所以Bottle框架提供了cookie的签名机制，只需要提供一个secret的参数作为密钥Bottle会自动持久化和去持久化保存在cookie中的数据，cookie不超过4k。此时cookie仍然能从浏览器中查看到，而且是可以被复制的，所以最好不要将密钥的信息放在用户客户端\n@route('/login')\ndef do_login():\n    username = request.forms.get('username')\n    password = request.forms.get('password')\n    if check_login(username, password):\n        response.set_cookie(\"account\", username, secret='some-secret-key')\n        return template(\"<p>Welcome {{name}}! You are now logged in.</p>\", name=username)\n    else:\n        return \"<p>Login failed.</p>\"\n\n@route('/restricted')\ndef restricted_area():\n    username = request.get_cookie(\"account\", secret='some-secret-key')\n    if username:\n        return template(\"Hello {{name}}. Welcome back.\", name=username)\n    else:\n        return \"You are not logged in. Access denied.\"\n8.REQUEST\nrequest 对象包括了Cookies, HTTP header, HTML <form>等一系列可以操作的对象\nfrom bottle import request, route, template\n\n@route('/hello')\ndef hello():\n    name = request.cookies.username or 'Guest'\n    return template('Hello {{name}}', name=name)\nBottle使用FormsDict存储表单数据和cookie数据，而FormsDict的特定就是既具备了普通字典的操作方法，又能将key作为对象的属性，具体如下name既是字典的key又是cookies的属性\nname = request.cookies.name\n\n# is a shortcut for:\n\nname = request.cookies.getunicode('name') # encoding='utf-8' (default)\n\n# which basically does this:\n\ntry:\n    name = request.cookies.get('name', '').decode('utf-8')\nexcept UnicodeError:\n    name = u''\n同时，FormsDict还能对单个key存储多个值\nfor choice in request.forms.getall('multiple_choice'):\n    do_something(choice)\nrequest的query string会被分解为多个键值对，而通过request.query可以直接获得查询字符串对应键的值\nfrom bottle import route, request, response, template\n@route('/forum')\ndef display_forum():\n    forum_id = request.query.id\n    page = request.query.page or '1'\n    return template('Forum ID: {{id}} (page {{page}})', id=forum_id, page=page)\n上传文件时，我们需要在表单添加enctype=\"multipart/form-data\"， 同时将type设置为file\n<form action=\"/upload\" method=\"post\" enctype=\"multipart/form-data\">\n  Category:      <input type=\"text\" name=\"category\" />\n  Select a file: <input type=\"file\" name=\"upload\" />\n  <input type=\"submit\" value=\"Start upload\" />\n</form>\n文件上传到服务端后\n@route('/upload', method='POST')\ndef do_upload():\n    category   = request.forms.get('category')\n    upload     = request.files.get('upload')\n    name, ext = os.path.splitext(upload.filename)\n    if ext not in ('.png','.jpg','.jpeg'):\n        return 'File extension not allowed.'\n\n    save_path = get_save_path_for_category(category)\n    upload.save(save_path) # appends upload.filename automatically\n    return 'OK'\n通过BaseRequest.body我们可以直接获取原始的请求体，也可以获取environ\n@route('/my_ip')\ndef show_ip():\n    ip = request.environ.get('REMOTE_ADDR')\n    # or ip = request.get('REMOTE_ADDR')\n    # or ip = request['REMOTE_ADDR']\n    return template(\"Your IP is: {{ip}}\", ip=ip)\n9.模板\nBottle内建了前端模板引擎，在官网给出的这个例子中，会加载./views/中的hello_template.tpl\n@route('/hello')\n@route('/hello/<name>')\ndef hello(name='World'):\n    return template('hello_template', name=name)\n或者\n@route('/hello')\n@route('/hello/<name>')\n@view('hello_template')\ndef hello(name='World'):\n    return dict(name=name)\n%if name == 'World':\n    <h1>Hello {{name}}!</h1>\n    <p>This is a test.</p>\n%else:\n    <h1>Hello {{name.title()}}!</h1>\n    <p>How are you?</p>\n%end\n模板在编译后会被缓存到内存中，修改后需要执行bottle.TEMPLATES.clear()清除缓存模板\n10.PLUGINS\nBottle提供了一系列的第三方引擎，这些能够有效地减少重复性工作官网使用SQLitePlugin作为例子，在每一次调用需要与数据库进行交互的callback函数时，该引擎会自动创建连接和关闭连接。而其他的引擎，例如’auth‘能够帮我们进行验证登录\nfrom bottle import route, install, template\nfrom bottle_sqlite import SQLitePlugin\n\ninstall(SQLitePlugin(dbfile='/tmp/test.db'))\n\n@route('/show/<post_id:int>')\ndef show(db, post_id):\n    c = db.execute('SELECT title, content FROM posts WHERE id = ?', (post_id,))\n    row = c.fetchone()\n    return template('show_post', title=row['title'], text=row['content'])\n\n@route('/contact')\ndef contact_page():\n    ''' This callback does not need a db connection. Because the 'db'\n        keyword argument is missing, the sqlite plugin ignores this callback\n        completely. '''\n    return template('contact')\nsqlite_plugin = SQLitePlugin(dbfile='/tmp/test.db')\ninstall(sqlite_plugin)\n\nuninstall(sqlite_plugin) # uninstall a specific plugin\nuninstall(SQLitePlugin)  # uninstall all plugins of that type\nuninstall('sqlite')      # uninstall all plugins with that name\nuninstall(True)          # uninstall all plugins at once\n自此，Bottle官网的tutorial我们已经大致有了了解后续我们可以选择运用该框架实现一些简单的应用，或者可以深入研究其源码，提升自身的编程水平\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}