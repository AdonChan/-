{"title": "初识aiohttp异步框架之服务端用法 - python技术的魅力 ", "index": "python", "content": "\ntypora-copy-images-to: ipic\n\n[TOC]\n配置环境\n\n首先检查你的python版本：\n$ python3 -V\nPython 3.6.3\n安装aiohttp：\n$ pip3 install aiohttp\n查看aiohttp版本号：\n$ python3 -c 'import aiohttp; print(aiohttp.__version__)'\n3.0.7\n项目结构与其他基于python的web项目非常相似：\n.\n├── README.rst\n└── polls\n    ├── Makefile\n    ├── README.rst\n    ├── aiohttpdemo_polls\n    │   ├── __init__.py\n    │   ├── __main__.py\n    │   ├── db.py\n    │   ├── main.py\n    │   ├── routes.py\n    │   ├── templates\n    │   ├── utils.py\n    │   └── views.py\n    ├── config\n    │   └── polls.yaml\n    ├── images\n    │   └── example.png\n    ├── setup.py\n    ├── sql\n    │   ├── create_tables.sql\n    │   ├── install.sh\n    │   └── sample_data.sql\n    └── static\n        └── style.css\n开始第一个aiohttp应用\n这个教程基于Django的投票应用教程。\n应用\n所有的aiohttp服务器都围绕aiohttp.web.Application实例来构建。用于注册startup/cleanup信号，以及连接路由等。\n创建一个项目：\nvote\n├── config\n│   └── __init__.py\n├── models\n│   └── __init__.py\n├── static\n├── template\n└── application\n    └── __init__.py\n目录vote下面分别创建了config、models、application、static、template。\n这里我使用pycharm开发，图示如下：\n\n创建一个应用：\nfrom aiohttp import web\n\napp = web.Application()\nweb.run_app(app, host='0.0.0.0', port=9000)\n保存于vote/main.py并启动服务器：\n$ python3 /Users/junxi/program/vote/main.py\n这里的vote是项目的根目录。\n你将在命令行中看到如下输出：\n======== Running on http://0.0.0.0:9000 ========\n(Press CTRL+C to quit)\n在浏览器中打开http://localhost:9000/或者使用命令\n$ curl -X GET http://localhost:9000\n不过，对于全部请求现在只会返回404: Not Found，让我们创建一个路由和视图来展示一些更有意义的东西。\n视图\n\n让我们从第一个视图开始。创建application/views.py并加入如下代码：\nfrom aiohttp import web\n\n\nasync def hello(request):\n    return web.Response(text='Hello Aiohttp!')\n现在我们应该为这个 index 视图创建一个路由。 将如下代码写入 application/routes.py (分离视图，路由，模型是种很好的做法。 因为你可能拥有很多这些组件，放在不同的地方可以方便地管理代码):\nfrom .views import hello\n\n\ndef setup_routes(app):\n    app.router.add_get('/hello', hello)\n此外，我们应该在某个地方调用 setup_routes 函数，最好是在 main.py 中调用它:\nfrom aiohttp import web\nfrom application.routes import setup_routes\n\napp = web.Application()\nsetup_routes(app)\nweb.run_app(app, host='0.0.0.0', port=9000)\n再次启动服务器. 现在我们打开浏览器就可以看见:\n$ curl -X GET localhost:9000/hello\nHello Aiohttp!\n工作目录应该是像下面这样:\nvote\n├── application\n│   ├── __init__.py\n│   ├── routes.py\n│   └── views.py\n├── config\n│   ├── __init__.py\n│   └── settings.py\n├── main.py\n├── models\n│   ├── __init__.py\n├── static\n└── template\n配置文件\naiohttp 的配置是不可知的。 这意味着这个库不需要任何配置方法，并且也没有内置支持任何配置模式。\n但是请考虑下面这些事实:\n\n99% 的服务器都有配置文件.\n每个产品(除了像 Django 和 Flask 等基于 Python 的解决方案外)都不将配置文件写入源代码。比如 Nginx 默认将自己的配置文件存储在 /etc/nginx 文件夹下。\nMongo 将配置文件存为 /etc/mongodb.conf。\n\n验证配置文件是个好主意，充分的检查可以在产品部署时避免许多愚蠢的错误。\n\n因此，我们 建议 使用以下方法:\n\n将配置存为 yaml 文件(json 或 ini 格式也不错，但是 yaml 格式是最好的).\n从预定位置加载 yaml 配置。例如 ./config/app_cfg.yaml, /etc/app_cfg.yaml。\n保持可以通过命令行参数覆盖配置文件的能力。例如 ./run_app --config=/opt/config/app_cfg.yaml。\n对于加载的字典应用严格的检查。 trafaret, colander or JSON schema 是这类型工作的好候选。\n\n加载配置并在应用中读取:\n# load config from yaml file in current dir\nconf = load_config(str(pathlib.Path('.') / 'config' / 'settings.yaml'))\napp['config'] = conf\n或者使用py文件当作配置文件：\n├── config\n│   ├── __init__.py\n│   └── settings.py\n构建数据库\n\n数据库模式\n操作MySQL数据库的工具，之前django项目一直使用本身自带的orm，tornado项目使用的torndb.py。其他项目则使用的pymysql库，pymysql库的用法在这里。\n本文使用MySQL数据库和aiomysql这个异步操作MySQL的库。\n安装aiomysql\n需要依赖pymysql\n$ pip3 install pymysql\n$ pip3 install aiomysql\n我们使用 aiomysql 来描述数据库模式。 \naiomysql官网连接示例\nimport asyncio\nfrom aiomysql import create_pool\n\n\nloop = asyncio.get_event_loop()\n\nasync def go():\n    async with create_pool(host='127.0.0.1', port=3306,\n                           user='root', password='',\n                           db='mysql', loop=loop) as pool:\n        async with pool.get() as conn:\n            async with conn.cursor() as cur:\n                await cur.execute(\"SELECT 42;\")\n                value = await cur.fetchone()\n                print(value)\n\n\nloop.run_until_complete(go())\naiomysql官网连接池示例\nimport asyncio\nimport aiomysql\n\n\nasync def test_example(loop):\n    pool = await aiomysql.create_pool(host='127.0.0.1', port=3306,\n                                      user='root', password='',\n                                      db='mysql', loop=loop)\n    async with pool.acquire() as conn:\n        async with conn.cursor() as cur:\n            await cur.execute(\"SELECT 42;\")\n            print(cur.description)\n            (r,) = await cur.fetchone()\n            assert r == 42\n    pool.close()\n    await pool.wait_closed()\n\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(test_example(loop))\nSQLAlchemy可选集成的示例\n这里不使用sqlalchemy这个orm，原因：迁移功能不怎么好使，用惯了django的orm，感觉别的不咋好用。写原生sql练习自己的原生sql编写能力。\nimport asyncio\nimport sqlalchemy as sa\n\nfrom aiomysql.sa import create_engine\n\n\nmetadata = sa.MetaData()\n\ntbl = sa.Table('tbl', metadata,\n               sa.Column('id', sa.Integer, primary_key=True),\n               sa.Column('val', sa.String(255)))\n\n\nasync def go(loop):\n    engine = await create_engine(user='root', db='test_pymysql',\n                                 host='127.0.0.1', password='', loop=loop)\n    async with engine.acquire() as conn:\n        await conn.execute(tbl.insert().values(val='abc'))\n        await conn.execute(tbl.insert().values(val='xyz'))\n\n        async for row in conn.execute(tbl.select()):\n            print(row.id, row.val)\n\n    engine.close()\n    await engine.wait_closed()\n\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(go(loop))\n创建数据库表\n查看mysql版本\n$ mysql --version\n/usr/local/mysql/bin/mysql  Ver 14.14 Distrib 5.7.20, for macos10.12 (x86_64) using  EditLine wrapper\n创建一个数据库vote，并增加授权用户\n$ mysql -uroot -p123456\n\nmysql> CREATE DATABASE IF NOT EXISTS vote CHARACTER SET utf8 COLLATE utf8_general_ci;\nmysql> grant all on vote.* to vote identified by '123456';\n创建表user\nCREATE TABLE IF NOT EXISTS `user`(\n   `id` INT(11) NOT NULL AUTO_INCREMENT COMMENT '用户ID',\n   `delete_flag` tinyint(1) NOT NULL DEFAULT 0 COMMENT '删除标志',\n   `name` VARCHAR(40) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '昵称',\n   `phone` VARCHAR(11) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '电话',\n   `email` VARCHAR(40) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '邮箱',\n   `password` VARCHAR(16) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '密码',\n   `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n   PRIMARY KEY ( `id` ),\n   INDEX `email` (`email`) USING BTREE,\n   INDEX `phone` (`phone`) USING BTREE\n)\nENGINE=InnoDB\nDEFAULT CHARACTER SET=utf8 COLLATE=utf8_general_ci\nROW_FORMAT=DYNAMIC\n;\n查看user表结构\n+-------------+-------------+------+-----+-------------------+----------------+\n| Field       | Type        | Null | Key | Default           | Extra          |\n+-------------+-------------+------+-----+-------------------+----------------+\n| id          | int(11)     | NO   | PRI | NULL              | auto_increment |\n| delete_flag | tinyint(1)  | NO   |     | 0                 |                |\n| name        | varchar(40) | NO   |     | NULL              |                |\n| phone       | varchar(11) | NO   | MUL | NULL              |                |\n| email       | varchar(40) | NO   | MUL | NULL              |                |\n| password    | varchar(16) | NO   |     | NULL              |                |\n| create_time | datetime    | NO   |     | CURRENT_TIMESTAMP |                |\n+-------------+-------------+------+-----+-------------------+----------------+\n创建表question\nCREATE TABLE IF NOT EXISTS `question`(\n   `id` INT(11) NOT NULL AUTO_INCREMENT COMMENT '问题ID',\n   `delete_flag` tinyint(1) NOT NULL DEFAULT 0 COMMENT '删除标志',\n   `user_id` INT(11) NOT NULL COMMENT '用户ID',\n   `question_text` VARCHAR(200) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '问题内容',\n   `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n   PRIMARY KEY ( `id` ),\n   FOREIGN KEY (`user_id`) REFERENCES `user` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,\n   INDEX `user_id` (`user_id`) USING BTREE\n)\nENGINE=InnoDB\nDEFAULT CHARACTER SET=utf8 COLLATE=utf8_general_ci\nROW_FORMAT=DYNAMIC\n;\n查看question表结构\n+---------------+--------------+------+-----+-------------------+----------------+\n| Field         | Type         | Null | Key | Default           | Extra          |\n+---------------+--------------+------+-----+-------------------+----------------+\n| id            | int(11)      | NO   | PRI | NULL              | auto_increment |\n| delete_flag   | tinyint(1)   | NO   |     | 0              |                |\n| user_id       | int(11)      | NO   | MUL | NULL              |                |\n| question_text | varchar(200) | NO   |     | NULL              |                |\n| create_time   | datetime     | NO   |     | CURRENT_TIMESTAMP |                |\n+---------------+--------------+------+-----+-------------------+----------------+\n创建表choice\nCREATE TABLE IF NOT EXISTS `choice`(\n   `id` INT(11) NOT NULL AUTO_INCREMENT COMMENT '选择ID',\n   `delete_flag` tinyint(1) NOT NULL DEFAULT 0 COMMENT '删除标志',\n   `choice_text` VARCHAR(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '选择内容',\n   `votes` INT(11) NOT NULL COMMENT '得票数',\n   `question_id` INT(11) NOT NULL COMMENT '问题ID',\n   `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n   PRIMARY KEY ( `id` ),\n   FOREIGN KEY (`question_id`) REFERENCES `question` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,\n   INDEX `question_id` (`question_id`) USING BTREE\n)\nENGINE=InnoDB\nDEFAULT CHARACTER SET=utf8 COLLATE=utf8_general_ci\nROW_FORMAT=DYNAMIC\n;\n查看choice表结构\n+-------------+--------------+------+-----+-------------------+----------------+\n| Field       | Type         | Null | Key | Default           | Extra          |\n+-------------+--------------+------+-----+-------------------+----------------+\n| id          | int(11)      | NO   | PRI | NULL              | auto_increment |\n| delete_flag | tinyint(1)   | NO   |     | 0                 |                |\n| choice_text | varchar(200) | YES  |     | NULL              |                |\n| votes       | int(11)      | NO   |     | NULL              |                |\n| question_id | int(11)      | NO   | MUL | NULL              |                |\n| create_time | datetime     | NO   |     | CURRENT_TIMESTAMP |                |\n+-------------+--------------+------+-----+-------------------+----------------+\n创建连接池\n我们需要创建一个全局的连接池，每个HTTP请求都可以从连接池中直接获取数据库连接。使用连接池的好处是不必频繁地打开和关闭数据库连接，而是能复用就尽量复用。\n缺省情况下将编码设置为utf8，自动提交事务：\nasync def create_pool(loop, **kw):\n    \"\"\"定义mysql全局连接池\"\"\"\n    logging.info('create database connection pool...')\n    global _mysql_pool\n    _mysql_pool = await aiomysql.create_pool(host=DATABASES['host'], port=DATABASES['port'], user=DATABASES['user'],\n                                      password=DATABASES['password'], db=DATABASES['db'], loop=loop,\n                                      charset=kw.get('charset', 'utf8'), autocommit=kw.get('autocommit', True),\n                                      maxsize=kw.get('maxsize', 10), minsize=kw.get('minsize', 1))\n    return _mysql_pool\n封装增删改查\nWeb App里面有很多地方都要访问数据库。访问数据库需要创建数据库连接、游标对象，然后执行SQL语句，最后处理异常，清理资源。这些访问数据库的代码如果分散到各个函数中，势必无法维护，也不利于代码复用。\n所以，我们要首先把常用的SELECT、INSERT、UPDATE和DELETE操作用函数封装起来。\n由于Web框架使用了基于asyncio的aiohttp，这是基于协程的异步模型。在协程中，不能调用普通的同步IO操作，因为所有用户都是由一个线程服务的，协程的执行速度必须非常快，才能处理大量用户的请求。而耗时的IO操作不能在协程中以同步的方式调用，否则，等待一个IO操作时，系统无法响应任何其他用户。\n这就是异步编程的一个原则：一旦决定使用异步，则系统每一层都必须是异步，“开弓没有回头箭”。\n幸运的是aiomysql为MySQL数据库提供了异步IO的驱动。\n要执行SELECT语句，我们用select函数执行，需要传入SQL语句和SQL参数：\nasync def fetchone(sql, args=(), size=None):\n    \"\"\"封装select，查询单个，返回数据为字典\"\"\"\n    log(sql, args)\n    async with _mysql_pool.acquire() as conn:\n        async with conn.cursor(aiomysql.DictCursor) as cur:\n            await cur.execute(sql, args)\n            rs = await cur.fetchone()\n            return rs\n\n\nasync def select(sql, args=(), size=None):\n    \"\"\"封装select，查询多个，返回数据为列表\"\"\"\n    log(sql, args)\n    async with _mysql_pool.acquire() as conn:\n        async with conn.cursor(aiomysql.DictCursor) as cur:\n            await cur.execute(sql, args)\n            if size:\n                rs = await cur.fetchmany(size)\n            else:\n                rs = await cur.fetchall()\n            logging.info('rows returned: %s' % len(rs))\n            return rs\n注意要始终坚持使用带参数的SQL，而不是自己拼接SQL字符串，这样可以防止SQL注入攻击。\n注意到yield from将调用一个子协程（也就是在一个协程中调用另一个协程）并直接获得子协程的返回结果。\n如果传入size参数，就通过fetchmany()获取最多指定数量的记录，否则，通过fetchall()获取所有记录。\nInsert, Update, Delete\n要执行INSERT、UPDATE、DELETE语句，可以定义一个通用的execute()函数，因为这3种SQL的执行都需要相同的参数，以及返回一个整数表示影响的行数：\nasync def execute(sql, args=()):\n    \"\"\"封装insert, delete, update\"\"\"\n    log(sql, args)\n    async with _mysql_pool.acquire() as conn:\n        async with conn.cursor() as cur:\n            try:\n                await cur.execute(sql, args)\n            except BaseException:\n                await conn.rollback()\n                return\n            else:\n                affected = cur.rowcount\n                return affected\nexecute()函数和select()函数所不同的是，cursor对象不返回结果集，而是通过rowcount返回结果数。\n这三个函数定义在models文件夹下的db.py中(db.py是新创建的文件)：\n完整代码如下：\nimport logging\nlogging.basicConfig(level=logging.INFO)\n\nimport aiomysql\nimport aioredis\nfrom config.settings import DATABASES, CACHES\n\n\ndef log(sql, args=()):\n    logging.info('SQL: %s' % sql, *args)\n\n\nasync def create_pool(loop, **kw):\n    \"\"\"定义mysql全局连接池\"\"\"\n    logging.info('create database connection pool...')\n    global _mysql_pool\n    _mysql_pool = await aiomysql.create_pool(host=DATABASES['host'], port=DATABASES['port'], user=DATABASES['user'],\n                                      password=DATABASES['password'], db=DATABASES['db'], loop=loop,\n                                      charset=kw.get('charset', 'utf8'), autocommit=kw.get('autocommit', True),\n                                      maxsize=kw.get('maxsize', 10), minsize=kw.get('minsize', 1))\n    return _mysql_pool\n\n\nasync def fetchone(sql, args=(), size=None):\n    \"\"\"封装select，查询单个，返回数据为字典\"\"\"\n    log(sql, args)\n    async with _mysql_pool.acquire() as conn:\n        async with conn.cursor(aiomysql.DictCursor) as cur:\n            await cur.execute(sql, args)\n            rs = await cur.fetchone()\n            return rs\n\n\nasync def select(sql, args=(), size=None):\n    \"\"\"封装select，查询多个，返回数据为列表\"\"\"\n    log(sql, args)\n    async with _mysql_pool.acquire() as conn:\n        async with conn.cursor(aiomysql.DictCursor) as cur:\n            await cur.execute(sql, args)\n            if size:\n                rs = await cur.fetchmany(size)\n            else:\n                rs = await cur.fetchall()\n            logging.info('rows returned: %s' % len(rs))\n            return rs\n\n\nasync def execute(sql, args=()):\n    \"\"\"封装insert, delete, update\"\"\"\n    log(sql, args)\n    async with _mysql_pool.acquire() as conn:\n        async with conn.cursor() as cur:\n            try:\n                await cur.execute(sql, args)\n            except BaseException:\n                await conn.rollback()\n                return\n            else:\n                affected = cur.rowcount\n                return affected\n把执行SQL的函数导入到models/__init__.py文件中，方便别的模块引用：\nfrom .db import *\n\n__all__ = ['create_pool', 'select', 'execute', 'fetchone']\n把我们创建表的sql语句保存到models/create_table.sql文件中：\nCREATE TABLE IF NOT EXISTS `user`(\n   `id` INT(11) NOT NULL AUTO_INCREMENT COMMENT '用户ID',\n   `delete_flag` tinyint(1) NOT NULL DEFAULT 0 COMMENT '删除标志',\n   `name` VARCHAR(40) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '昵称',\n   `phone` VARCHAR(11) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '电话',\n   `email` VARCHAR(40) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '邮箱',\n   `password` VARCHAR(16) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '密码',\n   `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n   PRIMARY KEY ( `id` ),\n   INDEX `email` (`email`) USING BTREE,\n   INDEX `phone` (`phone`) USING BTREE\n)\nENGINE=InnoDB\nDEFAULT CHARACTER SET=utf8 COLLATE=utf8_general_ci\nROW_FORMAT=DYNAMIC\n;\n\n\nCREATE TABLE IF NOT EXISTS `question`(\n   `id` INT(11) NOT NULL AUTO_INCREMENT COMMENT '问题ID',\n   `delete_flag` tinyint(1) NOT NULL DEFAULT 0 COMMENT '删除标志',\n   `user_id` INT(11) NOT NULL COMMENT '用户ID',\n   `question_text` VARCHAR(200) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '问题内容',\n   `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n   PRIMARY KEY ( `id` ),\n   FOREIGN KEY (`user_id`) REFERENCES `user` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,\n   INDEX `user_id` (`user_id`) USING BTREE\n)\nENGINE=InnoDB\nDEFAULT CHARACTER SET=utf8 COLLATE=utf8_general_ci\nROW_FORMAT=DYNAMIC\n;\n\n\nCREATE TABLE IF NOT EXISTS `choice`(\n   `id` INT(11) NOT NULL AUTO_INCREMENT COMMENT '选择ID',\n   `delete_flag` tinyint(1) NOT NULL DEFAULT 0 COMMENT '删除标志',\n   `choice_text` VARCHAR(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '选择内容',\n   `votes` INT(11) NOT NULL COMMENT '得票数',\n   `question_id` INT(11) NOT NULL COMMENT '问题ID',\n   `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n   PRIMARY KEY ( `id` ),\n   FOREIGN KEY (`question_id`) REFERENCES `question` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,\n   INDEX `question_id` (`question_id`) USING BTREE\n)\nENGINE=InnoDB\nDEFAULT CHARACTER SET=utf8 COLLATE=utf8_general_ci\nROW_FORMAT=DYNAMIC\n;\nmodels目录结构：\nmodels/\n├── __init__.py\n└── db.py\n编写配置文件\n之前我们说过的配置文件，我使用py文件当作配置文件，conf/settings.py内容如下：\nDATABASES = {\n    'engine': 'mysql',\n    'db': 'vote',\n    'user': 'vote',\n    'password': '123456',\n    'host': 'localhost',\n    'port': 3306,\n}\n插入模拟数据\nINSERT INTO user(name, phone, email, password) VALUES('露西', '16666666661', 'luxi@qq.com', '123456'), ('南希', '16666666662', 'nanxi@qq.com', '123456'), ('雪灵', '16666666663', 'xueling@qq.com', '123456');\nINSERT INTO question(question_text, user_id) VALUES('最受欢迎的计算机语言？', 1), ('最受欢迎的水果？', 2), ('男人最喜欢女人什么地方？', 3);\nINSERT INTO choice(choice_text, question_id, votes) VALUES('python', 1, 3), ('java', 1, 2), ('go', 1, 1);\nINSERT INTO choice(choice_text, question_id, votes) VALUES('香蕉', 2, 3), ('苹果', 2, 2), ('草莓', 2, 1);\nINSERT INTO choice(choice_text, question_id, votes) VALUES('漂亮脸蛋', 3, 3), ('大胸', 3, 2), ('大长腿', 3, 1);\n基础视图类\naiohttp.web提供django风格的基础试图类。\n你可以从 View 类中继承，并自定义http请求的处理方法:\nfrom aiohttp import web\nfrom models import select\nimport json\nimport datetime\nimport decimal\n\n\nclass RewriteJsonEncoder(json.JSONEncoder):\n    \"\"\"重写json类，为了解决datetime类型的数据无法被json格式化\"\"\"\n\n    def default(self, obj):\n        if isinstance(obj, datetime.datetime):\n            return obj.strftime('%Y-%m-%d %H:%M:%S')\n        elif isinstance(obj, datetime.date):\n            return obj.strftime(\"%Y-%m-%d\")\n        elif isinstance(obj, decimal.Decimal):\n            return str(obj)\n        elif hasattr(obj, 'isoformat'):\n            # 处理日期类型\n            return obj.isoformat()\n        else:\n            return json.JSONEncoder.default(self, obj)\n\n\ndef json_dumps(obj):\n    return json.dumps(obj, cls=RewriteJsonEncoder)\n\n\nasync def hello(request):\n    return web.Response(text='Hello Aiohttp!')\n\n\nclass QuestionChoices(web.View):\n    \"\"\"查看一个问题的可选答案\"\"\"\n\n    async def get(self):\n        question_id = self.request.match_info.get('question_id')\n        result = await select(self.request.app['db'], 'select * from choice where question_id = %s', (question_id,))\n        return web.json_response(data=result, dumps=json_dumps)\n定义路由：\nfrom .views import hello, QuestionChoices\n\n\ndef setup_routes(app):\n    app.router.add_get('/hello', hello, name='hello')\n    app.router.add_route('*', '/question/{question_id}/choice', QuestionChoices)\n打开浏览器或输入下面命令访问：\n$ curl -X GET http://127.0.0.1:9000/question/1/choice\n[{\"id\": 1, \"delete_flag\": 0, \"choice_text\": \"python\", \"votes\": 3, \"question_id\": 1, \"create_time\": \"2018-04-15 19:47:16\"}, {\"id\": 2, \"delete_flag\": 0, \"choice_text\": \"java\", \"votes\": 2, \"question_id\": 1, \"create_time\": \"2018-04-15 19:47:16\"}, {\"id\": 3, \"delete_flag\": 0, \"choice_text\": \"go\", \"votes\": 1, \"question_id\": 1, \"create_time\": \"2018-04-15 19:47:16\"}]j\n之前使用django比较多，个人喜欢使用类视图。\n装饰器视图\n路由装饰器有点像Flask风格:\nroutes = web.RouteTableDef()\n\n@routes.get('/get')\nasync def handle_get(request):\n    ...\n\n\n@routes.post('/post')\nasync def handle_post(request):\n    ...\n\napp.router.add_routes(routes)\n首先是要创建一个 aiohttp.web.RouteTableDef 对象。\n该对象是一个类列表对象，额外提供aiohttp.web.RouteTableDef.get()，aiohttp.web.RouteTableDef.post()这些装饰器来注册路由。\n最后调用add_routes()添加到应用的路由里。\n静态文件\n处理静态文件( 图片，JavaScripts, CSS文件等)最好的方法是使用反向代理，像是nginx或CDN服务。\n但就开发来说，aiohttp服务器本身可以很方便的处理静态文件。\n只需要通过 UrlDispatcher.add_static()注册个新的静态路由即可:\napp.router.add_static('/static', path_to_static_folder)\n当访问静态文件的目录时，默认服务器会返回 HTTP/403 Forbidden(禁止访问)。 使用show_index并将其设置为True可以显示出索引:\napp.router.add_static('/static', path_to_static_folder, show_index=True)\n当从静态文件目录访问一个符号链接（软链接）时，默认服务器会响应 HTTP/404 Not Found(未找到)。使用follow_symlinks并将其设置为True可以让服务器使用符号链接:\napp.router.add_static('/static', path_to_static_folder, follow_symlinks=True)\n如果你想允许缓存清除，使用append_version并设为True。\n缓存清除会对资源文件像JavaScript 和 CSS文件等的文件名上添加一个hash后的版本。这样的好处是我们可以让浏览器无限期缓存这些文件而不用担心这些文件是否发布了新版本。\napp.router.add_static('/static', path_to_static_folder, append_version=True)\n这里我们添加一个静态文件的路由\n首先在配置文件conf/settings.py中指定项目、静态文件、模版HTML路径：\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))      # 项目路径\nSTATIC_DIR = os.path.join(BASE_DIR, 'static')       # 静态文件路径\nTEMPLATE_DIR = os.path.join(BASE_DIR, 'template')   # 模版HTML路径     \n接下里在application/routes.py文件中添加一个静态文件路由：\ndef setup_static_routes(app):\n    app.router.add_static('/static/', path=STATIC_DIR, name='static')\n下载uikit的静态文件到static目录下：\nstatic\n├── css\n│   ├── uikit-rtl.css\n│   ├── uikit-rtl.min.css\n│   ├── uikit.css\n│   └── uikit.min.css\n└── js\n    ├── uikit-icons.js\n    ├── uikit-icons.min.js\n    ├── uikit.js\n    └── uikit.min.js\n把添加静态路由的函数添加到application/main.py文件的init函数中：\nasync def init(loop):\n    mysql_pool = await create_pool(loop)\n    app = web.Application(loop=loop)\n    app['db'] = mysql_pool\n    setup_routes(app)\n    setup_static_routes(app)\n    return app\n重启服务器访问http://127.0.0.1:9000/static/js/bootstrap.js\n$ curl -X GET http://127.0.0.1:9000/static/js/bootstrap.js\n/*!\n  * Bootstrap v4.0.0 (https://getbootstrap.com)\n  * Copyright 2011-2018 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n  */\n  。。。。。\n  。。。。。\n可以正常访问，静态路由已经添加成功了。\n模版\naiohttp.web并不直接提供模板读取，不过可以使用第三方库 aiohttp_jinja2，该库是由aiohttp作者维护的。使用起来也很简单。首先我们用aiohttp_jinja2.setup()来设置下jinja2环境。\n安装aiohttp_jinja2:\n$ pip3 install aiohttp_jinja2\n在application/routes.py文件中添加一个模版文件路由：\nfrom config.settings import STATIC_DIR, TEMPLATE_DIR\n\ndef setup_template_routes(app):\n    aiohttp_jinja2.setup(app, loader=jinja2.FileSystemLoader(TEMPLATE_DIR))\n把添加模版路由的函数添加到vote/main.py文件的init函数中：\nfrom application.routes import setup_routes, setup_static_routes, setup_template_routes\n\nasync def init(loop):\n    mysql_pool = await create_pool(loop)\n    app = web.Application(loop=loop)\n    app['db'] = mysql_pool\n    setup_routes(app)\n    setup_static_routes(app)\n    setup_template_routes(app)\n    return app\n增加pycharm普通项目对jinja2模版的支持，编辑.idea/vote.iml，在component标签的同级添加如下内容：\n  <component name=\"TemplatesService\">  \n    <option name=\"TEMPLATE_CONFIGURATION\" value=\"Jinja2\" />  \n    <option name=\"TEMPLATE_FOLDERS\">  \n    <list>  \n      <option value=\"$MODULE_DIR$/template\" />  \n    </list>  \n    </option>  \n  </component>  \n新建一个模版HTML文件保存到template/index.html中，内容如下：\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n    {% block title %}\n        <title>首页</title>\n    {% endblock %}\n    <link rel=\"stylesheet\" href=\"/static/css/uikit.min.css\">\n    <link rel=\"stylesheet\" href=\"/static/css/base.css\">\n    <script src=\"/static/js/uikit.min.js\"></script>\n</head>\n<body>\n    <nav class=\"uk-navbar-container uk-margin\" uk-navbar>\n        <div class=\"uk-navbar-left\">\n            <a class=\"uk-navbar-item uk-logo\" href=\"#\">Primumest</a>\n            <ul class=\"uk-navbar-nav\">\n                <li class=\"uk-active\"><a href=\"#\">首页</a></li>\n                <li>\n                    <a href=\"#\">编程语言</a>\n                    <div class=\"uk-navbar-dropdown\">\n                        <ul class=\"uk-nav uk-navbar-dropdown-nav\">\n                            <li class=\"uk-active\"><a href=\"#\">python</a></li>\n                            <li><a href=\"#\">go</a></li>\n                            <li><a href=\"#\">c</a></li>\n                        </ul>\n                    </div>\n                </li>\n                <li><a href=\"#\">问答</a></li>\n            </ul>\n        </div>\n        <div class=\"uk-navbar-right content\">\n            <div class=\"uk-navbar-item\">\n                <form class=\"uk-search uk-search-default\">\n                    <a href=\"\" class=\"uk-search-icon-flip\" uk-search-icon></a>\n                    <input class=\"uk-input uk-form-width-smal\" type=\"search\" placeholder=\"Search\">\n                </form>\n            </div>\n\n            <ul class=\"uk-navbar-nav\">\n                <li class=\"uk-active\"><a href=\"#\">登录</a></li>\n                <li><a href=\"{{ url('register') }}\">注册</a></li>\n            </ul>\n        </div>\n    </nav>\n    {% block content %}\n    {% endblock %}\n</body>\n</html>\n新建注册页面保存到template/register.html中，内容如下：\n{% extends \"index.html\" %}\n\n{% block title %}\n    <title>注册</title>\n{% endblock %}\n\n{% block content %}\n    <div class=\"uk-container content\">\n        <form class=\"uk-form register-box\">\n            <fieldset style=\"width: 30%\">\n                <legend>注册账号</legend>\n                <div class=\"uk-form-row\">\n                    <span class=\"uk-form-label\">昵称 </span>\n                    <input type=\"text\" name=\"name\" placeholder=\"请输入你的名字\" class=\"uk-form-width-medium uk-form-small\">\n                </div>\n                <div class=\"uk-form-row\">\n                    <span class=\"uk-form-label\">邮箱 </span>\n                    <input type=\"text\" name=\"email\" placeholder=\"请输入你的邮箱\" class=\"uk-form-width-medium uk-form-small\">\n                </div>\n                <div class=\"uk-form-row\">\n                    <span class=\"uk-form-label\">手机 </span>\n                    <input type=\"text\" name=\"phone\" placeholder=\"请输入你的手机号\" class=\"uk-form-width-medium uk-form-small\">\n                </div>\n                <div class=\"uk-form-row\">\n                    <span class=\"uk-form-label\">密码 </span>\n                    <input type=\"password\" name=\"password\" placeholder=\"请输入你的密码\" class=\"uk-form-width-medium uk-form-small\">\n                </div>\n                <button type=\"submit\" class=\"uk-button-primary\">提交</button>\n            </fieldset>\n        </form>\n    </div>\n{% endblock %}\n\n页面用到了jinja2模版的语法。\n创建视图函数用来访问这个模版文件：\n@aiohttp_jinja2.template('index.html')\nasync def index(request):\n    return\n\n@aiohttp_jinja2.template('register.html')\nasync def register(request):\n    return\n创建与之对应的路由：\ndef setup_routes(app):\n    app.router.add_get('/hello', hello, name='hello')\n    app.router.add_get('/', index, name='index')\n    app.router.add_get('/register', register, name='register')\n    app.router.add_route('*', '/question/{question_id}/choice', QuestionChoices, name='QuestionChoices')\n重启服务器，浏览器访问http://127.0.0.1:9000\n\n浏览器访问http://127.0.0.1:9000/register\n\n调试工具箱\n开发aiohttp.web应用项目时，aiohttp_debugtoolbar是非常好用的一个调试工具。\n可使用pip进行安装：\n$ pip3 install aiohttp_debugtoolbar\n之后将aiohttp_debugtoolbar中间件添加到aiohttp.web.Applicaiton中并调用aiohttp_debugtoolbar.setup()来部署：\nimport aiohttp_debugtoolbar\nfrom aiohttp_debugtoolbar import toolbar_middleware_factory\n\napp = web.Application(middlewares=[toolbar_middleware_factory])\naiohttp_debugtoolbar.setup(app)\n这里是我们的配置：\nimport asyncio\nimport aiohttp_debugtoolbar\nfrom aiohttp import web\nfrom application.routes import setup_routes, setup_static_routes, setup_template_routes\nfrom models import create_pool\nfrom aiohttp_debugtoolbar import toolbar_middleware_factory\n\n\nasync def init(loop):\n    mysql_pool = await create_pool(loop)\n    app = web.Application(loop=loop, middlewares=[toolbar_middleware_factory])\n    app['db'] = mysql_pool\n    aiohttp_debugtoolbar.setup(app)\n    setup_routes(app)\n    setup_static_routes(app)\n    setup_template_routes(app)\n    return app\n浏览器输入地址http://127.0.0.1:9000/_debugtoolbar可以看到如下页面：\n\n开发工具\naiohttp-devtools提供几个简化开发的小工具。\n可以使用pip安装：\n$ pip3 install aiohttp-devtools\n * ``runserver`` 提供自动重载，实时重载，静态文件服务和aiohttp_debugtoolbar_integration。\n * ``start`` 是一个帮助做繁杂且必须的创建'aiohttp.web'应用的命令。\n这是我们的项目启动的例子：\n$ adev runserver -v main.py --app-factory init -p 9000 --debug-toolbar --host localhost\n这个adev着实难用，我们定义的init函数是个协程函数，但是它命令--app-factory要求必须是个普通函数，并且返回一个aiohttp.web.Application。由于我们要使用数据库连接池，必须使用await协程语法。所以我放弃使用这个东西了。\n创建和运行本地应用的文档和指南请看aiohttp-devtools。\n下面准备编写注册、登录的逻辑了，这里先使用session会话机制。以后使用oauth2.0的token认证机制。\n处理session会话\n你经常想要一个可以通过请求存储用户数据的仓库。一般简称为会话。\naiohttp.web没有内置会话，不过你可以使用第三方库aiohttp_session来提供会话支持。\n官网例子：\nimport asyncio\nimport aioredis\nimport time\n\nfrom aiohttp import web\nfrom aiohttp_session import setup, get_session\nfrom aiohttp_session.redis_storage import RedisStorage\n\n\nasync def handler(request):\n    session = await get_session(request)\n    last_visit = session['last_visit'] if 'last_visit' in session else None\n    session['last_visit'] = time.time()\n    text = 'Last visited: {}'.format(last_visit)\n    return web.Response(text=text)\n\n\nasync def make_redis_pool():\n    redis_address = ('127.0.0.1', '6379')\n    return await aioredis.create_redis_pool(redis_address, timeout=1)\n\n\ndef make_app():\n    loop = asyncio.get_event_loop()\n    redis_pool = loop.run_until_complete(make_redis_pool())\n    storage = RedisStorage(redis_pool)\n\n    async def dispose_redis_pool(app):\n        redis_pool.close()\n        await redis_pool.wait_closed()\n\n    app = web.Application()\n    setup(app, storage)\n    app.on_cleanup.append(dispose_redis_pool)\n    app.router.add_get('/', handler)\n    return app\n\n\nweb.run_app(make_app())\n安装aiohttp_session:\n$ pip3 install aiohttp_session\nsession存储使用redis，这里使用aioredis连接redis。\n安装aioredis:\n$ pip3 install aioredis\n创建redis全局连接池与redis命令简单封装，编辑models/db.py：\nimport aioredis\nfrom config.settings import DATABASES, CACHES\n\nasync def create_redis_pool(loop):\n    \"\"\"定义redis全局连接池\"\"\"\n    logging.info('create redis connection pool...')\n    global _reids_pool\n    _reids_pool = await aioredis.create_pool(address=CACHES['address'], db=CACHES['db'], password=CACHES['password'],\n                                      minsize=CACHES['minsize'], maxsize=CACHES['maxsize'], loop=loop)\n\n    return _reids_pool\n\n\nasync def cache_set(*args, **kwargs):\n    \"\"\"redis set 命令封装\"\"\"\n    with await aioredis.commands.Redis(_reids_pool) as redis:\n        await redis.set(*args, **kwargs)\n\n\nasync def cache_get(*args, **kwargs):\n    \"\"\"redis get 命令封装\"\"\"\n    with await aioredis.commands.Redis(_reids_pool) as redis:\n        return await redis.get(*args, **kwargs)\n\n\nasync def cache_del(*args, **kwargs):\n    \"\"\"redis del 命令封装\"\"\"\n    with await aioredis.commands.Redis(_reids_pool) as redis:\n        return await redis.delete(*args, **kwargs)\nCACHES在我们config/settings.py里面定义：\nCACHES = {\n    'engine': 'redis',\n    'address': ('localhost', 6379),\n    'password': None,\n    'db': None,\n    'minsize': 1,\n    'maxsize': 10\n}\n把执行redis命令的函数导入到models/__init__.py文件中，方便别的模块引用：\nfrom .db import *\n\n__all__ = ['create_pool', 'select', 'execute', 'fetchone', 'create_redis_pool', 'cache_set', 'cache_get', 'cache_del']\n注册页面：\n{% extends \"index.html\" %}\n\n{% block title %}\n    <title>注册</title>\n{% endblock %}\n\n{% block head_js %}\n{% endblock %}\n\n{% block content %}\n    <div class=\"uk-container content\">\n        <form class=\"uk-form register-box\" method=\"post\" action=\"{{ url('Register') }}\">\n            <fieldset style=\"width: 25%; padding: 1rem 0 1rem 5rem\">\n                <legend style=\"text-align: center\">注册账号</legend>\n                <div class=\"uk-form-row\">\n                    <span class=\"uk-form-label\">昵称 </span>\n                    <input type=\"text\" name=\"name\" placeholder=\"请输入你的名字\" class=\"uk-width-1-2 uk-form-small\">\n                </div>\n                <div class=\"uk-form-row\">\n                    <span class=\"uk-form-label\">邮箱 </span>\n                    <input type=\"text\" name=\"email\" placeholder=\"请输入你的邮箱\" class=\"uk-width-1-2 uk-form-small\">\n                </div>\n                <div class=\"uk-form-row\">\n                    <span class=\"uk-form-label\">手机 </span>\n                    <input type=\"text\" name=\"phone\" placeholder=\"请输入你的手机号\" class=\"uk-width-1-2 uk-form-small\">\n                </div>\n                <div class=\"uk-form-row\">\n                    <span class=\"uk-form-label\">密码 </span>\n                    <input type=\"password\" name=\"password\" placeholder=\"请输入你的密码\" class=\"uk-width-1-2 uk-form-small\">\n                </div>\n                <button type=\"submit\" class=\"uk-button-primary\">提交</button>\n            </fieldset>\n        </form>\n    </div>\n{% endblock %}\n\n注册视图函数:\nclass Register(web.View):\n    \"\"\"a view handler for register page\"\"\"\n\n    @aiohttp_jinja2.template('register.html')\n    async def get(self):\n        return\n\n    async def post(self):\n        data = await self.request.post()\n        user = await fetchone('select id from user where email = %s or phone = %s', (data.get('email'), data.get('phone')))\n        # print(await self.request.multipart())\n        if user:\n            msg = {'error_code': 20001, 'error_msg': 'The email or phone has been registered'}\n        else:\n            params = (data.get('name'), data.get('email'), data.get('phone'), data.get('password'))\n            result = await fetchone('INSERT INTO user(name, email, phone, password) VALUES(%s, %s, %s, %s)', params)\n            if result:\n                msg = {'error_code': 0, 'error_msg': 'ok'}\n            else:\n                msg = {'error_code': 20002, 'error_msg': 'Please try again if registration fails'}\n        # return web.json_response(data=msg, dumps=json_dumps)\n        return web.json_response(data=msg, dumps=json_dumps)\n登录页面：\n{% extends \"index.html\" %}\n\n{% block title %}\n    <title>登录</title>\n{% endblock %}\n\n{% block head_js %}\n{% endblock %}\n\n{% block content %}\n    <div class=\"uk-container content\">\n        <form class=\"uk-form register-box uk-text-center\" method=\"post\" action=\"{{ url('Login') }}\" style=\"margin-top: 2rem;\">\n            <div class=\"uk-form-row\">\n                <input type=\"text\" name=\"account\" placeholder=\"请输入邮箱或手机号\" class=\"uk-width-1-5 uk-form-small\">\n            </div>\n            <div class=\"uk-form-row\">\n                <input type=\"password\" name=\"password\" placeholder=\"请输入你的密码\" class=\"uk-width-1-5 uk-form-small\">\n            </div>\n            <button type=\"submit\" class=\"uk-width-1-5 uk-button-primary uk-button-small\">提交</button>\n            {% if msg %}\n                <p class=\"uk-text-danger\">{{ msg.error_msg }}</p>\n            {% endif %}\n        </form>\n    </div>\n{% endblock %}\n\n{% block bottom_js %}\n\n{% endblock %}\n\n登录视图函数：\nclass Login(web.View):\n    \"\"\"a view handler for login page\"\"\"\n\n    async def get(self):\n        return aiohttp_jinja2.render_template('login.html', self.request, locals())\n\n    async def post(self):\n        data = await self.request.post()\n        account = data.get('account')\n        password = data.get('password')\n        columns = 'id, name, email, phone, password'\n        if len(account) == 11 and re.match(r'^1[35678]\\d{9}', account):\n            user = await fetchone('select {} from user where phone = %s'.format(columns), (account,))\n        elif re.match(r'^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$', account):\n            user = await fetchone('select {} from user where email = %s'.format(columns), (account,))\n        else:\n            msg = {'error_code': 20003, 'error_msg': 'User does not exists'}\n            return aiohttp_jinja2.render_template('login.html', self.request, locals())\n        if password != user.get('password'):\n            msg = {'error_code': 20004, 'error_msg': 'Password mismatch'}\n            return aiohttp_jinja2.render_template('login.html', self.request, locals())\n        session = await get_session(self.request)\n        session['uid'] = user.get('id')\n        # sessionid = session.identity\n        return web.Response(status=302, headers={'location': '/'})\n给首页视图函数增加个验证登录到装饰器：\nfrom aiohttp_session import get_session\nfrom functools import wraps\n\ndef login_required(func):  # 用户登录状态校验\n    \"\"\"This function applies only to class views.\"\"\"\n    @wraps(func)\n    async def inner(cls, *args, **kwargs):\n        session = await get_session(cls.request)\n        uid = session.get(\"uid\")\n        if uid:\n            user = await fetchone('select id, name, email, phone from user where id = %s', (uid,))\n            cls.request.app.userdata = user\n            return await func(cls, *args, **kwargs)\n        else:\n            return web.Response(status=302, headers={'location': '/login'})\n\n    return inner\n\n\nclass Index(web.View):\n    \"\"\"a view handler for home page\"\"\"\n\n    @login_required\n    async def get(self):\n        # response.headers['Content-Language'] = 'utf-8'\n        return aiohttp_jinja2.render_template('index.html', self.request, locals())\n这里我把视图处理函数全部改为类视图方式编写了。\n增加路由：\n#!/usr/bin/env python\n# _*_ coding:utf-8 _*_\n__author__ = 'junxi'\n\nimport aiohttp_jinja2\nimport jinja2\nimport uuid\nfrom application.views import Hello, Index, Register, Login, QuestionChoices, Questions, hash_sha256\nfrom config.settings import STATIC_DIR, TEMPLATE_DIR\nfrom aiohttp_session import setup\nfrom aiohttp_session.redis_storage import RedisStorage\n\n\ndef setup_session(app, redis_pool):\n    storage = RedisStorage(redis_pool=redis_pool, cookie_name='sessionid', key_factory=lambda: hash_sha256(uuid.uuid4().hex))\n    setup(app, storage)\n\n\ndef setup_routes(app):\n    app.router.add_view('/hello', Hello, name='Hello')\n    app.router.add_view('', Index, name='Index')\n    app.router.add_view('/register', Register, name='Register')\n    app.router.add_view('/login', Login, name='Login')\n    app.router.add_view('/questions/{question_id}/choice', QuestionChoices, name='QuestionChoices'\nmain.py增加session处理：\nasync def init(loop):\n    mysql_pool = await create_pool(loop)\n    redis_pool = await create_redis_pool(loop)\n    # app = web.Application(loop=loop, middlewares=[toolbar_middleware_factory])\n    # aiohttp_debugtoolbar.setup(app)\n\n    async def dispose_mysql_pool():\n        mysql_pool.close()\n        await mysql_pool.wait_closed()\n\n    async def dispose_redis_pool():\n        redis_pool.close()\n        await redis_pool.wait_closed()\n\n    async def dispose_pool(app):\n        await dispose_mysql_pool()\n        await dispose_redis_pool()\n\n    app = web.Application(loop=loop)\n    setup_session(app, redis_pool)\n    setup_routes(app)\n    setup_static_routes(app)\n    setup_template_routes(app)\n    app.on_cleanup.append(dispose_pool)\n    return app\n重新启动服务器，输入地址http://127.0.0.1:9000/ ， 会跳转到登录页面：\n\n输入账号密码登录：\n\n跳转到首页，可以看到右上角显示昵称，已经登录成功了。\n\n增加问答页面：\n{% extends \"index.html\" %}\n\n{% block title %}\n    <title>问答</title>\n{% endblock %}\n\n{% block head_js %}\n{% endblock %}\n\n{% block content %}\n    <div class=\"uk-container content\">\n        <div class=\"uk-child-width-1-2@s\" uk-grid>\n            {% for question in questions %}\n                <div>\n                    <div class=\"uk-dark uk-background-muted uk-padding\">\n                        <h3 class=\"uk-text-danger\">{{ question.question_text }}</h3>\n                        {% for i in question.question_choice|choice_split %}\n                            <p><label><input class=\"uk-radio\" type=\"radio\" name=\"radio2\" value=\"{{ i.0 }}\"> {{ i.1 }}</label></p>\n                        {% endfor %}\n                        <button class=\"uk-button-primary uk-button-small\">提交</button>\n                    </div>\n                </div>\n            {% endfor %}\n        </div>\n    </div>\n{% endblock %}\n\n{% block bottom_js %}\n\n{% endblock %}\n\n增加问答视图函数：\nclass Questions(web.View):\n    \"\"\"a view handler for look at all questions\"\"\"\n\n    @login_required\n    async def get(self):\n        questions = await select('select q.id as qid, q.question_text, (select group_concat(concat_ws(\"|\", c.id, c.choice_text)) from choice c where c.question_id = q.id) as question_choice from question q;')\n        return aiohttp_jinja2.render_template('questions.html', self.request, locals())\n增加路由以及我们自定义的jinja2模版上下文处理函数：\nimport aiohttp_jinja2\nimport jinja2\nimport uuid\nfrom application.views import Hello, Index, Register, Login, QuestionChoices, Questions, hash_sha256\nfrom config.settings import STATIC_DIR, TEMPLATE_DIR\nfrom aiohttp_session import setup\nfrom aiohttp_session.redis_storage import RedisStorage\n\n\ndef setup_session(app, redis_pool):\n    storage = RedisStorage(redis_pool=redis_pool, cookie_name='sessionid', key_factory=lambda: hash_sha256(uuid.uuid4().hex))\n    setup(app, storage)\n\n\ndef setup_routes(app):\n    app.router.add_view('/hello', Hello, name='Hello')\n    app.router.add_view('', Index, name='Index')\n    app.router.add_view('/register', Register, name='Register')\n    app.router.add_view('/login', Login, name='Login')\n    app.router.add_view('/questions/{question_id}/choice', QuestionChoices, name='QuestionChoices')\n    app.router.add_view('/questions', Questions, name='Questions')\n\n\ndef setup_static_routes(app):\n    app.router.add_static('/static/', path=STATIC_DIR, name='static')\n\n\ndef setup_template_routes(app):\n    aiohttp_jinja2.setup(app, filters={'choice_split': choice_split}, loader=jinja2.FileSystemLoader(TEMPLATE_DIR))\n\n\ndef choice_split(choices):\n    for i in choices.split(','):\n        single = i.split('|')\n        yield single\n重启服务后查看问答页面http://127.0.0.1:9000/questions\n\n项目展示\n这是完整代码：https://github.com/junxi3166/python_study/tree/vote/python_practice\nsupervisor部署项目\n安装supervisor：\nmkdir ~/supervisor\ncd ~/supervisor/\nwget https://files.pythonhosted.org/packages/44/60/698e54b4a4a9b956b2d709b4b7b676119c833d811d53ee2500f1b5e96dc3/supervisor-3.3.4.tar.gz\ntar zxf supervisor-3.3.4.tar.gz \ncd supervisor-3.3.4\nsudo python setup.py install\nsupervisord -v\n生成配置文件：\n$ echo_supervisord_conf > supervisord.conf\n启动：\n$ supervisord -c supervisord.conf\n查看 supervisord 是否在运行：\n$ ps aux|grep supervisord\njunxi             5064   0.0  0.0  4267768    900 s000  S+   10:37上午   0:00.00 grep --color supervisord\njunxi             5059   0.0  0.0  4344312   2196   ??  Ss   10:37上午   0:00.01 /usr/bin/python /usr/local/bin/supervisord -c supervisord.conf\n打开配置文件：\nvim supervisord.conf\n创建aio目录：\nmkdir aio\n在配置文件底部，配置include\n[include]\nfiles = aio/*.conf\n其他参数配置：\n# grep -Ev '^;|^$' supervisord.conf\n[unix_http_server]\nfile=/var/log/supervisor/supervisor.sock   ; the path to the socket file\n[inet_http_server]         ; inet (TCP) server disabled by default\nport=127.0.0.1:9001        ; ip_address:port specifier, *:port for all iface\nusername=user              ; default is no username (open server)\npassword=123               ; default is no password (open server)\n[supervisord]\nlogfile=/var/log/supervisor/supervisord.log ; main log file; default $CWD/supervisord.log\nlogfile_maxbytes=50MB        ; max main logfile bytes b4 rotation; default 50MB\nlogfile_backups=10           ; # of main logfile backups; 0 means none, default 10\nloglevel=info                ; log level; default info; others: debug,warn,trace\npidfile=/var/log/supervisor/supervisord.pid ; supervisord pidfile; default supervisord.pid\nnodaemon=false               ; start in foreground if true; default false\nminfds=1024                  ; min. avail startup file descriptors; default 1024\nminprocs=200                 ; min. avail process descriptors;default 200\nchildlogdir=/var/log/supervisor            ; 'AUTO' child log dir, default $TEMP\n[include]\nfiles = /Users/junxi/supervisor/aio/*.conf\n在aio文件夹下新建vote.conf文件用于启动我们的vote项目，内容如下：\n# vim aio/vote.conf\n[program:vote]\nnumprocs = 4\nnumprocs_start = 1\nprocess_name = vote_910%(process_num)s\n\ncommand=python3 /Users/junxi/program/vote/main.py --port=910%(process_num)s\ndirectory=/Users/junxi/program/vote\nautostart=true\nautorestart=true\nredirect_stderr=true\nstdout_logfile=/var/log/vote/access.log\nloglevel=info\n创建存放日志的文件夹：\n$ sudo mkdir /var/log/supervisor\n$ sudo chown -R junxi:admin /var/log/supervisor\n$ sudo mkdir /var/log/vote/\n$ sudo chown -R junxi:admin /var/log/vote/\n重启supervisor：\n$ kill -Hup `ps -ef|grep supervisord|awk 'NR==1{print $2}'`\n或者手动找到pid重启。\n使用客户端supervisorctl管理进程的启动\n连接到服务端：\n$ supervisorctl -c supervisord.conf \n输入默认的账户user，密码123进入命令行。\n查看状态:\nsupervisor> help\n\ndefault commands (type help <topic>):\n=====================================\nadd    exit      open  reload  restart   start   tail   \navail  fg        pid   remove  shutdown  status  update \nclear  maintail  quit  reread  signal    stop    version\n\nsupervisor> status\nvote:vote_9101                   STOPPED   Apr 17 11:00 PM\nvote:vote_9102                   STOPPED   Apr 17 11:00 PM\nvote:vote_9103                   STOPPED   Apr 17 11:00 PM\nvote:vote_9104  \n启动vote：\nsupervisor> start all\nvote:vote_9101: started\nvote:vote_9102: started\nvote:vote_9103: started\nvote:vote_9104: started\n浏览器输入 http://127.0.0.1:9001/ 打开web页面查看supervisor状态，就是我们配置文件中的inet_http_server。\n\n浏览器输入4个端口(分别为9101、9102、9103、9104)分别进行访问测试：\n\n然后再使用nginx做个负载均衡：\nproxy_next_upstream error;\n\nupstream votes {\n    server 127.0.0.1:9101;\n    server 127.0.0.1:9102;\n    server 127.0.0.1:9103;\n    server 127.0.0.1:9104;\n}\n\nserver {\n    listen 8008;\n    server_name localhost;\n\n\n    access_log /var/log/nginx/vote/access.log;\n    error_log /var/log/nginx/vote/error.log;\n\n    proxy_read_timeout 200;\n\n\n    location /static/ {\n        alias /Users/junxi/program/vote/static/;\n\n    }\n\n    location / {\n        proxy_pass_header Server;\n        proxy_set_header Host $http_host;\n        proxy_redirect off;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Scheme $scheme;\n        proxy_pass http://votes;\n    }\n}\n别忘了设置Nginx的worker_rlimit_nofile、worker_connections、worker_processes。\n访问http://localhost:8008/hello\n\nNice。\n先写到这里了。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}