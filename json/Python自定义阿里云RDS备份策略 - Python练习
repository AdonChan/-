{"title": "Python自定义阿里云RDS备份策略 - Python练习 ", "index": "python", "content": "一、背景\n由于越来越多的客户对应数据安全的重视，目前阿里云RDS提供了备份策略,但是备份策略周期为每天的某一个时间，在日常云运维工作中，有客户提出需要每天在不同的时间节点多备份几次，此时web界面就不能满足此类在一天内多次备份的需求，但是想到了在阿里云web控制台通过手动点击创建备份，是可以在点击后触发创建备份的任务，想到可以利用api来实现，同时提交工单咨询了下，果然此类需求是需要api来做，故写了个调用python实例配合linux系统的crond服务来完成。\n二、代码\ngithub地址\n#!/bin/env python\n# -*- coding:utf-8 -*-\n# _author:kaliarch\n\nfrom aliyunsdkcore import client\nfrom aliyunsdkrds.request.v20140815 import CreateBackupRequest\nimport time\nimport os\nimport logging\n\nclass rdsOper():\n    def __init__(self,logger):\n        self.clentoper = client.AcsClient('LTAIhfXlcjyln****','Gwf****4K2ELmt76184o****gRfAso','cn-shanghai')\n        self.logger = logger\n        self.logger.info(\"------------------------start exec rds backup API log-------------\")\n    def backup_instance(self):\n        # 设置参数\n        request = CreateBackupRequest.CreateBackupRequest()\n        request.set_accept_format('json')\n        request.add_query_param('DBInstanceId', 'rm-uf6xv3**1x842y61y')\n\n        #如果为单库备份，可以添加DBName\n        # request.add_query_param('DBName', 'mydb')\n\n        #BackupMethod为备份方式：Logical：逻辑备份，Physical：物理备份\n        request.add_query_param('BackupMethod', 'Physical')\n        #BackupType为备份类型： Auto：自动计算是全量备份还是增量备份；FullBackup：全量备份。默认值为Auto。\n        request.add_query_param('BackupType', 'Auto')\n\n        response = self.clentoper.do_action_with_exception(request)\n        self.logger.info(\"rdsbackup mission submission successful!\")\n        self.logger.info(response)\n        print(response)\n\n\nclass Rds_Log:\n    def __init__(self,filename):\n        self.filename = filename\n    def createDir(self):\n        _LOGDIR = os.path.join(os.path.dirname(__file__), 'rdsbackuplog')\n        print(_LOGDIR)\n        _TIME = time.strftime('%Y-%m-%d', time.gmtime()) + '-'\n        _LOGNAME = _TIME + self.filename\n        print(_LOGNAME)\n        LOGFILENAME = os.path.join(_LOGDIR, _LOGNAME)\n        print(LOGFILENAME)\n        if not os.path.exists(_LOGDIR):\n            os.mkdir(_LOGDIR)\n        return LOGFILENAME\n\n    def createlogger(self,logfilename):\n        logger= logging.getLogger()\n        logger.setLevel(logging.INFO)\n        handler = logging.FileHandler(logfilename)\n        handler.setLevel(logging.INFO)\n        formater = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n        handler.setFormatter(formater)\n        logger.addHandler(handler)\n        return logger\n\nif __name__ == \"__main__\":\n    glploger = Rds_Log('rdsbackup.log')\n    logfilename = glploger.createDir()\n    logger = glploger.createlogger(logfilename)\n\n    app = rdsOper(logger)\n    app.backup_instance()\n三、配合定时任务\n在随便服务器上传代码安装好相关python的sdk后制作定时任务查看日志查看后天有备份任务已经提交完成举一反三，类似的可以参考阿里云rds的API完成其他需求,如何客户对应rds的备份频率很高的话，可以开通灾备实例，来完成异地的实时备份，如果横向扩展读写操作，可以开通多个只读实例来分摊数据库压力。https://help.aliyun.com/docum...\n目前对应数据库的备份，阿里云新上线了DBS参考链接\n\n\n支持ECS自建数据库的异地备份\n支持RDS数据库的异地备份\n支持本地IDC自建数据库的异地备份\n支持公网数据库的异地备份（还包含部署在AWS、Azure、腾讯云等其他云计算厂商的数据库）\n\n此产品不仅支持众多场景的数据库备份，将其存储在阿里云的OSS，并且可以设置加密存储，上保障了备份数据的安全和可靠性，同时可以设置备份对象精细到表级别并且支持增量备份，同时可以配置备份的生命周期，可随时利用备份数据简单几部就可以进行数据恢复，测试了下，发现很好用，但是目前查看官网没有对应API，对于每天需要超过两次以上的备份发现只能创建多个备份任务。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}