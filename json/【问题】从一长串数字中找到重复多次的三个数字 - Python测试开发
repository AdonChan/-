{"title": "【问题】从一长串数字中找到重复多次的三个数字 - Python测试开发 ", "index": "面试,python", "content": "问题描述\nhttps://stackoverflow.com/que...\n假设给定一个很长的数字，比如PI精确到100万位，找到其中重复出现相邻三个数字。比如给定的数字是1233223332321234323123，那么结果应该是：\n123 repeat 3 times\n233 repeat 2 times\n323 repeat 2 times\n332 repeat 2 times\n解决思路\n如果要统计相邻三个数字的重复次数，那么必然需要将其所有可能都列出来，通过Python的切片我们很容易实现：\nnumber = '1233223332321234323123'\nsplit = [number[position:position + 3] for position in range(len(number) - 2)]\n\nprint(split)\n# ['123', '233', '332', '322', '223', '233', '333', '332', '323', '232', '321', '212', '123', '234', '343', '432', '323', '231', '312', '123']\n接下来我们需要统计切好的序列里各个数字出现的次数，因为需要处理是3位数字，可以考虑新建一个长度为1000的空序列，如果数字出现就在对应下标加一，达到统计的目的。\nseq = [0] * 1000\n\nfor x in split:\n    seq[int(x)] += 1\n最后我们只要把新序列里统计值大于1的打印出来即可。\nfor i in range(1000):\n    if seq[i] > 1:\n        print('{} repeat {} times'.format(i, seq[i]))\n\n# 123 repeat 3 times\n# 233 repeat 2 times\n# 323 repeat 2 times\n# 332 repeat 2 times\n我们可以用更加优雅的方式来呈现以上算法，简洁但不简单。\nseq = [0] * 1000\n\nfor val in [int(number[pos:pos+3]) for pos in range(len(number) - 2)]:\n    seq[val] += 1\n\nprint ([(num, seq[num]) for num in range(1000) if seq[num] > 1])\n以上便是Stack Overflow上原题的最佳答案。\n拓展思考\n如果这个问题给定的不是数字，而是字符串比如abccdbadfdaabc，依然是要找到相邻的3个重复字母，你有没有好办法？\n\n关于作者：Toby Qin, Python 技术爱好者，目前从事测试开发相关工作，转载请注明原文出处。\n欢迎关注我的博客 https://betacat.online，你可以到我的公众号中去当吃瓜群众。\n\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}