{"title": "Regal灰度发布智能分组引擎 - 个人文章 ", "index": "python", "content": "Regal 是一个用于\"灰度发布\"或 A/B Testing的智能分组引擎\n主要功能:\n\n提供发布策略，动态智能分流\n支持多版本分组和优先级\n数据格式化\n同时兼容Python2和Python3\n\nRegal能做什么？\n举个最简单的例子，比如需要针对一个版本进行灰度发布，而这一版本对应的可能是一大堆服务器集群， 如下图:\n\n就像图中描述的一样，无论你的服务器是多还是少，尤其很多中小型企业在进行灰度发布时，通常会遇到所制定的分流策略在实际的技术或开发中如何去实现，是机器直接写死？\n因此让Regal智能分组引擎直接介入，让它来根据你的策略提前进行动态地分组分流。在这里，我再举一个简单的例子，方便大家能够更清楚的明白Regal的主要工作：\n假设有一个版本A，需要针对六台机器进行发布\n\n现在应该已经了解Regal到底是什么干货了吧，当然了，上面的例子是服务器非常少的情况，实际情况中，所面对的服务器集群是非常多，这个时候可以通过提供的combine和schedule两个API进行策略调整。详情可以见下文的使用介绍\n\nFeature：\n\n提供发布策略，动态智能分流\n支持多版本分组和优先级\n数据格式化\n同时兼容Python2.5以上和Python3以上的版本（建议使用Python2.7+或者Python3.5以后的版本）\n\n\n安装和使用\n安装\n pip install regal \n使用说明\n单个版本场景\nIn [1]: from regal import BaseInfo\n\n\n# 初始化信息，请注意一下格式\nIn [6]: ab = BaseInfo(\nversion_host={'app-test-version1.0':'10.1.1.1,10.1.1.2,10.1.1.3,10.1.1.4,10.1.1.1.5'},\ncombine=2    # combine 希望以每组多少台服务器作为一组,进行用户群B的分流\n             # 在这个例子中为2台\n             # 默认：每组1台\n)\n\n# grouping() 进行分组\nIn [11]: smart_grouping = ab.grouping() \n\n\n# result属性 进行分组后的返回结果\nIn [12]: smart_grouping.result\nOut[12]:\n[('app-test-version1.0',\n  [['10.1.1.1'], ['10.1.1.2', '10.1.1.3'], ['10.1.1.4', '10.1.1.1.5']])]\nDemo\n你可以进入项目Github地址，来了解更多Regal引擎的多种运用使用场景及说明\n分流分组之后？\nRegal本身只是一个分组引擎，因此它并不承担直接发布的作用，但是通过Regal分组之后，你所得到数据，是非常容易和其他可以用来发布的组件进行配合；下面是我的一些建议和指导。\nversionA:\n\n  （第一组）    groupA   ip......     用户群A    \n  （第二组）    groupB1  ip...... __ \n  （第三组）    groupB2  ip......   |\n  （第四组）    groupB3  ip......   | --   用户群B   \n   ......                       --|\n关于发布\n分组之后，每一组的所有机器可以看作一个整体，扔进发布组件，进行'组内并发'\n你可以把每一组直接放在ansible、saltstack、pssh或异步IO框架等等进行发布；\n甚至你也可以和前端nginx＋lua进行组合；\n关于停止发布\n每组进行发布，一旦出现异常，你可以利用发布组件，或者你自己写一套异常抓取工具来停止发布，这个时候就不会再针对剩下的组进行发布操作了。\n关于回滚\n把回滚也看作一种发布,就不多说了\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "2"}