{"title": "python字符串处理 - python3 ：公司内部培训专栏 ", "index": "python", "content": "python字符串处理\n上一篇文章：Python判断与循环语句下一篇文章：Python列表处理\n\n1、修改字符串的大小写\n\n\n方法\n含义\n\n\n\ntitle()\n将每个单词首字母大写\n\n\nupper()\n将每个字母都大写\n\n\nlower()\n将每个字母都小写\n\n\ncapitalize()\n将字符串首字母大写,其余字符小写\n\n\n\n实例展示：\nname=\"zhao li Xiang\"\nprint(\"单词首字母大写前：%s\"%name)\nname.title()\nprint(\"单词首字母大写后（不用name接收）：%s\"%name)\nname=name.title()\nprint(\"单词首字母大写后（用name接收）：%s\"%name)\n\nprint(\"*\"*50)\n\nname=\"zhao li Xiang\"\nprint(\"所有字母都大写前：%s\"%name)\nname.upper()\nprint(\"所有字母都大写后（不用name接收）：%s\"%name)\nname=name.upper()\nprint(\"所有字母大写后（用name接收）：%s\"%name)\n\nprint(\"*\"*50)\n\nname=\"zhao li Xiang\"\nprint(\"所有字母都小写前：%s\"%name)\nname.lower()\nprint(\"所有字母都小写后（不用name接收）：%s\"%name)\nname=name.lower()\nprint(\"所有字母都小写后（用name接收）：%s\"%name)\n\nprint(\"*\"*50)\n\nname=\"zhao li Xiang\"\nprint(\"字符串首字母大写，其它字符小写前：%s\"%name)\nname.capitalize()\nprint(\"字符串首字母大写，其它字符小写后（不用name接收）：%s\"%name)\nname=name.capitalize()\nprint(\"字符串首字母大写，其它字符小写后（用name接收）：%s\"%name)\n控制台打印结果\n单词首字母大写前：zhao li Xiang\n单词首字母大写后（不用name接收）：zhao li Xiang\n单词首字母大写后（用name接收）：Zhao Li Xiang\n**************************************************\n所有字母都大写前：zhao li Xiang\n所有字母都大写后（不用name接收）：zhao li Xiang\n所有字母大写后（用name接收）：ZHAO LI XIANG\n**************************************************\n所有字母都小写前：zhao li Xiang\n所有字母都小写后（不用name接收）：zhao li Xiang\n所有字母都小写后（用name接收）：zhao li xiang\n**************************************************\n字符串首字母大写前：zhao li Xiang\n字符串首字母大写后（不用name接收）：zhao li Xiang\n字符串首字母大写后（用name接收）：Zhao li xiang\n不难看出：无论是上面三个方法中的哪一个，都只是返回改变后的结果，对操作的字符串对象没有任何影响！\n将所有字母大写或者小写，可用来判断用户输入是使用，可以做到相应的人性化关怀（大小写都可以）\n2、合并（拼接字符串）\n使用+号来合并\nprint(\"Mark\"+\"帅哥🤗\")\n打印结果：\nMark帅哥🤗\n3、使用制表符或换行符来添加空白\nt:制表符\nn:换行符\nprint(\"Mark\\t帅哥\")\nprint(\"Mark\\n帅哥\")\n控制台打印结果：\nMark 帅哥\nMark\n帅哥\n4、删除空白\nlstrip():删除字符串开头空白\nrstrip()：删除字符串尾部空白\nstrip():删除字符串前后字空白\n注意：上面两个函数都只是返回删除空白后的字符串，对原有字符串没有改变\n实例：\nname=\" Mark \"\nname.lstrip()\nprint(\"*\"+name+\"*\")\nname.rstrip()\nprint(\"*\"+name+\"*\")\nprint(\"*\"+name.lstrip().rstrip()+\"*\")\nprint(\"*\"+name.strip()+\"*\")\n打印结果：\n* Mark *\n* Mark *\n*Mark*\n*Mark*\n5、下标与切片\n下标：字符串可以看出是一个字符数组，而在这个数组的位置就是对应字符的下标\n切片：是对操作对象截取一部分的操作。字符串、列表、元组都支持切片\n切片的语法：[起始下标:结束下标:步长]\n如果有字符串“abcdef”，在内存中实际存储如下：\n\n可以通过下标获取指定字符：\nname=\"abcdef\"\nprint(name[0])\nprint(name[1])\nprint(name[2])\nprint(name[3])\n打印结果：\na\nb\nc\nd\n切片操作：\nname=\"abcdef\"\nprint(name[:3])\nprint(name[1:3])\nprint(name[3:])\nprint(name[1:5:2])\n#从第二个字符到最后第二个字符\nprint(name[1:-1])\n#倒序\nprint(name[::-1])\n打印结果：\nabc\nbc\ndef\nbd\nbcde\nfedcba\n6、find、rfind：查找指定字符串是否存在于目标字符串\n语法：目标字符串.find(需要查询的指定字符串[开始查询的下标,结束查询的下标])：从左边开始查找目标字符串.find(需要查询的指定字符串[开始查询的下标,结束查询的下标：从右边开始查找\n存在就会返回下标，不存在就返回-1\n\n实例：\nname=\"abcdefg\"\nprint(name.find(\"cd\"))\nprint(name.rfind(\"cd\"))\nprint(name.find(\"gg\"))\nprint(name.rfind(\"gg\"))\n控制台打印结果：\n2\n2\n-1\n-1\n7、index、rindex：查找指定字符串是否存在于目标字符串\n与find的不同点是如果没有查询到，index方法会报错\n实例：\nname=\"abcdefg\"\nprint(name.index(\"cd\"))\nprint(name.rindex(\"cd\"))\nprint(name.index(\"gg\"))\nprint(name.rindex(\"gg\"))\n打印结果：\n2\nTraceback (most recent call last):\n2\nFile \"/Users/zhaolixiang/Desktop/python/test1/venv/字符串index.py\", line 4, in <module>\nprint(name.index(\"gg\"))\nValueError: substring not found\n8、count：返回指定字符串在目标字符串出现的次数\n语法：目标字符串.count(指定字符串[,开始下标,结束下标])\n实例：\nname=\"mark mark mark\"\nprint(name.count(\"ar\"))\nprint(name.count(\"ar\",0,5))\nprint(name.count(\"ar\",5))\n打印结果：\n3\n1\n2\n9、replace：替换字符串\n语法：mystr.replace(str1,str2[,count])将mystr中的str1替换为str2，如果count指定，则替换次数不超过count次。\n这个方法也是只影响返回值，不对mystr对象进行改变。\n\n实例：\nname=\"mark mark mark\"\nprint(name.replace(\"ar\",\"br\"))\nprint(name.replace(\"ar\",\"br\",0))\nprint(name.replace(\"ar\",\"br\",1))\n打印结果：\nmark mark mark\nmbrk mbrk mbrk\nmark mark mark\nmbrk mark mark\n10、split分割字符串\n语法：mystr.split(str[,count])把mystr依靠str进行分割，如果count指定，则最多分割count个字符串\n\n实例：\nname=\"mark mark mark\"\nprint(name.split(\"ar\"))\nprint(name.split(\"ar\",0))\nprint(name.split(\"ar\",2))\n打印结果：\n['m', 'k m', 'k m', 'k']\n['mark mark mark']\n['m', 'k m', 'k mark']\n11、startswith、endswith判断是否以指定字符串开发或结束\n实例：\nname=\"Mark 帅哥\"\nprint(name.startswith(\"Mar\"))\nprint(name.startswith(\"mar\"))\nprint(name.endswith(\"哥\"))\nprint(name.endswith(\"帅\"))\n控制台打印结果：\nTrue\nFalse\nTrue\nFalse\n12、ljust、rjust、center：返回一个元字符左对齐或右对齐或居中，用空白填充至指定宽度的字符串\n实例：\nname=\"mark\"\nprint(\"*\"+name.ljust(2)+\"*\")\nprint(\"*\"+name.ljust(6)+\"*\")\nprint(\"*\"+name.rjust(6)+\"*\")\nprint(\"*\"+name.center(6)+\"*\")\n打印结果：\n*mark*\n*mark *\n* mark*\n* mark *\n13、partition、rpartition：将目标字符串安装指定字符串分割为三部分\n实例：\nname=\"hello world world mark\"\nprint(name.partition(\"world\"))\nprint(name.rpartition(\"world\"))\n打印结果：\n('hello ', 'world', ' world mark')\n('hello world ', 'world', ' mark')\n14、splitlines按行分割字符串\n实例：\nname=\"hello\\nworld\\nworld\\nmark\"\nprint(name.splitlines())\n打印结果：\n['hello', 'world', 'world', 'mark']\n15、isalpha：判断字符串是否都是字符\n实例：\nprint(\"mark\".isalpha())\nprint(\"mark123\".isalpha())\nprint(\"mark帅哥\".isalpha())\nprint(\"mark 帅哥\".isalpha())\n打印结果：\nTrue\nFalse\nTrue\nFalse\n16、isdigit：判断字符串是否都是数字\n实例：\nprint(\"mark\".isdigit())\nprint(\"123\".isdigit())\nprint(\"123帅哥\".isdigit())\n打印结果：\nFalse\nTrue\nFalse\n17、isalnum：判断字符串是否都是字符或数字\n实例：\nprint(\"mark\".isalnum())\nprint(\"mark123\".isalnum())\nprint(\"123\".isalnum())\nprint(\"mark 帅哥\".isalnum())\n打印结果：\nTrue\nTrue\nTrue\nFalse\n18、isspace：判断字符串是否只包含空格\n实例：\nprint(\"mark\".isspace())\nprint(\"mark 123\".isspace())\nprint(\" \".isspace())\n打印结果：\nFalse\nFalse\nTrue\n19、join：每个字符后面插入指定字符\n实例：\nlist=[\"my\",\"name\",\"is\",\"mark\"]\nprint(\" \".join(list))\nprint(\"_\".join(list))\n打印 结果：\nmy name is mark\nmy_name_is_mark\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "1"}