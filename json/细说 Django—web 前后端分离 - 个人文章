{"title": "细说 Django—web 前后端分离 - 个人文章 ", "index": "前后端分离,django,python", "content": "所谓的前后端分离\n渊源\n前端发展史\n特点\n\n前端：负责 View 和 Controller 层\n后端：只负责 Model 层，业务处理/数据等\n\n优缺点\n\n优点：解耦，解放前端，职责明确\n缺点：不利 seo 优化\n\nRestful 风格的 API 应该是前后端分离的最佳实践\n\n前后端设计\n前端：Node.js 系\n代表：AngularJS，react，vue\nVue\n技术点\n\n指令\n组件\n生命周期\n前端路由\nVuex\nES6 语法\nnpm & webpack\n\n后端：Restful Api\n一种接口风格，全称表述性状态转移，并无强制\nRepresentational State Transfer（）\n统一资源接口对 URI 的意义?\n统一资源接口要求使用标准的 HTTP 方法对资源进行操作，所以 URI 只应该来表示资源的名称，而不应该包括资源的操作。\n（理解这个统一）\n标准的\n\n不符规范的 （资源没有统一）\n实践\n一个例子\n《图书管理系统》\n技术栈\n\n前端：Vue\n后端：Django REST framework\n\n要点\n\nToken 验证\n前端路由\n统一的 http 请求响应拦截处理\nRestful API\n权限控制（表级 & 对象级）\n\n如下图：\n最后，是否要做前后端分离的开发模式，取决于实际情况的多方位考量，适合的才是更好的。具体详情内容\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}