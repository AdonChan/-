{"title": "1-python 字符串的相关操作 - Python全栈玩起来 ", "index": "python", "content": "字符串截取\n  str = str[0:9:3]\n反转字符串\nstr = str[::-1]\n\n\n格式化字符串\n\n%s : 格式化字符串\n%d : 格式化整数\n%f : 格式化浮点数    如果想要设置精度： %.2f  保留两位小数\n语法格式： 字符串(字符串里面有格式化字符) % (对应的数据)\n\n\n\n内嵌函数\n\neval(str)：将str当有效表达式\nlower()\nupper()\nswapcase() ：将字符串中的大写字母转为小写，小写字母转为大写\ncapitalize()：字符串中的第一个字母大写，其他小写\ntitle():将字符串中的每隔单词的首字母大写\n\n返回一个指定长度width的字符串str这个字符串在中间，其他位置用fillchar补全，默认是空格\n\nstr.center(width, [fillchar])\nstr.ljust(width, [fillchar])\nstr.rjust(width, [fillchar])\nstr.zfill(width)\n\n\n\n\n\nprint(str3.center(15, \"*\"))\nprint(str3.ljust(15, \"*\"))\nprint(str3.rjust(15, \"*\"))\nprint(str3.zfill(15)) #0补充\nstring.count(str, [begin, end]) :返回string里面str出现的次数, 如果begin与end有值，查找该范围内的次数\nstr4 = \"good very well good good very\"\nprint(str4.count(\"good\"))\nprint(str4.count(\"good\", 3, 22))\n检测字符串中有没有另一个字符串 string.find(str [,begin, end]) 检测string中有没有str，如果存在返回第一次出现的下标，如果begin与end有值，查找该范围当找不到时，返回-1 从左向右查找\nprint(str4.find(\"very\"))\nprint(str4.find(\"very\", 10, 31))\nprint(str4.find(\"qwert\")) #返回-1\n\nstring.rfind(str [,begin, end]) 检测string中有没有str，如果存在返回第一次出现的下标，如果begin与end有值，查找该范围当找不到时，返回-1 从右向左查找\nstring.index(str [,begin, end]) 检测string中有没有str，如果存在返回第一次出现的下标，如果begin与end有值，查找该范围当找不到时，返回Error，程序报错从左向右查找 同理rindex\n\nprint(str4.index(\"very\"))\nprint(str4.index(\"qwer\")) #程序报错 Value Error\nprint(str4.rindex(\"very\"))\n截取字符串指定位置的元素，没有影响原始字符串,有返回值，返回更改过的值\nstr5.lstrip()\nstr6.lstrip('#')\nstr7.rstrip()\nstr7.strip()\n\nord() chr() str -> asii asii->str\n切割字符串\n\nstr10 = \"MM*GG*TT*HH*QQ\"\nprint(str10.split(\"*\"))  # ['MM', 'GG', 'TT', 'HH', 'QQ'] list 列表\nprint(str10.split(\"*\", 2)) #切割2次\n\nstring.splitlines([boolean]) 按照行切割（n  r  nr）,返回一个以行为单位的元素列表boolean如果为False，不保留换行符；如果为True，保留换行符；默认为False\n# 10、链接字符串\n# string.join(sep)  以指定的string作为连接符，将sep里面的元素拼接到一起\nstr13 = \"*\"\nlist13 = [\"hello\", \"good\", \"man\"]\nprint(str13.join(list13))\n\n# 11、返回字符中最大的字母或最小的字母\nstr14 = \"aAsdfghjkloiuyt\"\n# max()  返回字符中最大的字母\nprint(max(str14))\n# min() 返回字符中最小的字母\nprint(min(str14))\n\n# 12、替换字符串\n# string.replace(old, new [, num])将string中的old旧字符串替换成new新\n# 字符串，如果num有值，最多替换num次      记住\nstr15 = \"nicegood well good man nice nice good nice man\"\nprint(str15.replace(\"nice\", \"handsome\"))\nprint(str15.replace(\"nice\", \"handsome\", 2))\nprint(str15)\n\n# str.maketrans() 创建一个字符映射表   了解\n# 如果里面写两个参数，第一个参数为字符串，表示即将转换的字符；\n# 第二个参数也要为字符串，表示字符转换的目标字符；\n# 两个字符串的字符个数一定要一致\nt = str.maketrans(\"abc\", \"123\")\n# 如果只有一个参数，参数类型为字典类型，key为即将转换的字符；\n# value为字符转换的目标字符\nt1 = str.maketrans({\"a\" : \"1\", \"b\" : \"5\"})\nstr16 = \"qweawwbuucttabjjcd\"\n# string.translate(t)  根据t给出的映射表，替换string中的字符\nprint(str16.translate(t))\nprint(str16.translate(t1))\n\n    # 例子\n\n    def make_filter(s,filter_word):\n        table = str.maketrans(filter_word, ' '*len(filter_word))\n        return s.translate(table).replace(' ','')\n    \n    if __name__ == '__main__':\n        input = 'study makes me happy '\n        just_vowels = make_filter(input,'aeiou')\n        print(just_vowels)\n\n# 13、用于判断的函数\n# str17 = \"\"\n# print(str17.isalpha())\n# 13.1、isalpha()  字符串中至少有一个字符，并且所有字符都是字母，\n# 返回True，否则返回False   记住\n# print(\"\".isalpha())  # F\n# print(\"abc\".isalpha())  # T\n# print(\"abc123\".isalpha())  # F\n\n# 13.2、isupper()  字符串中至少有一个是区分大小写的字符，并且所有字符都是大写，\n# 返回True，否则返回False\nprint(\"abc\".isupper())  # F\nprint(\"ABC\".isupper())   # T\nprint(\"A123\".isupper())   # T\nprint(\"abcQWE\".isupper())  # F\n\n# 13.3、islower()  字符串中至少有一个是区分大小写的字符，并且所有字符都是小写，\n# 返回True，否则返回False\nprint(\"abc\".islower())  # T\nprint(\"Abc\".islower())  # F\n\n# 13.4、istitle() 字符串中至少有一个是区分大小写的字符，\n# 并且所有字符都是标题化，返回True，否则返回False\nprint(\"qer\".istitle())   # F\nprint(\"Abc sdf\".istitle())  # F\nprint(\"Abs Sdf\".istitle())  # T\n\n# 13.5、isalnum()  字符串中至少有一个字符，并且所有字符都是字母或数字，\n# 返回True，否则返回False   记住\nprint(\"123abc\".isalnum())  # T\nprint(\"123\".isalnum())  # T\nprint(\"abc\".isalnum())  # T\nprint(\"abc!@$$\".isalnum())  # F\n\n# 13.6、isdigit()  字符串中至少有一个字符，并且所有字符都是数字，\n# 返回True，否则返回False   记住\nprint(\"abc\".isdigit())  # F\nprint(\"123\".isdigit())  # T\nprint(\"123abc\".isdigit())  # F\n\n# 13.7、isspace() 字符串中至少有一个字符，并且所有字符都是空格，\n# 返回True，否则返回False\nprint(\"     \".isspace())  # T\nprint(\"   abc\".isspace())  # F\n\n# 13.8、string.startswith(str [, begin, end])   判断string是否以str开头，是返回True，\n# 否则返回False  , begin, end指定范围查找   记住\nstr20 = \"http://www.baidu.com\"\nprint(str20.startswith(\"ht\"))  # T\nprint(str20.startswith(\"http://\"))  # T\nprint(str20.startswith(\"ttp\"))  # F\nprint(str20.startswith(\"ttp\",1, 12))  # T\n\n# 13.9、string.endswith(str [, begin, end])   判断string是否以str开头，是返回True，\n# 否则返回False  , begin, end指定范围查找    记住\nprint(str20.endswith(\"com\"))  # T\nprint(str20.endswith(\".com\"))  # T\nprint(str20.endswith(\"cn\"))  # F\nprint(str20.endswith(\"ttp\",1, 12))  # F\n\n\n# 14、编码解码\nstr21 = \"pyc是好人\"\nprint(str21)\n# string.encode(encoding)  以encoding指定的格式进行编码\nprint(str21.encode(\"utf-8\"))\nprint(str21.encode(\"GBK\"))\n# string.decode(encoding)  以encoding指定的格式进行编码\nstr22 = str21.encode(\"utf-8\")\nprint(str22.decode(\"utf-8\"))\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "0"}