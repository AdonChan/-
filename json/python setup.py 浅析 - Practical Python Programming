{"title": "python setup.py 浅析 - Practical Python Programming ", "index": "setup,setup.py,setuptools,python", "content": "python setup.py 浅析\nsetuptools.setup() 参数说明\npackages\n对于所有 packages 列表里提到的纯 Python 模块做处理  需要在 setup 脚本里有一个包名到目录的映射。  默认对于 setup 脚本所在目录下同名的目录即视为包所在目录。  当你在 setup 脚本中写入 packages = ['foo'] 时， setup 脚本的同级目录下可以找到 foo/__init__.py。如果没有找到对应文件，disutils 不会直接报错，而是给出一个告警然后继续进行有问题的打包流程。\npackage_dir\n阐明包名到目录的映射，见 packages\npackage_dir = {'': 'lib'}\n键: 代表了包的名字，空的包名则代表 root package(不在任何包中的顶层包)。  值: 代表了对于 setup 脚本所在目录的相对路径.\npackages = ['foo']\npackage_dir = {'': 'lib'}\n指明包位于 lib/foo/, lib/foo/__init__.py 这个文件存在\n另一种方法则是直接将 foo 这个包的内容全部放入 lib 而不是在 lib 下建一个 foo 目录\npackage_dir = {'foo': 'lib'}\n一个在 package_dir 字典中的 package: dir 映射会对当前包下的所有包都生效， 所以 foo.bar 会自动生效. 在这个例子当中， packages = ['foo', 'foo.bar'] 告诉 distutils 去寻找 lib/__init__.py 和 lib/bar/__init__.py.\npy_modules\n对于一个相对较小的模块的发布，你可能更想要列出所有模块而不是列出所有的包，尤其是对于那种根目录下就是一个简单模块的类型.这描述了两个包，一个在根目录下，另一个则在 pkg 目录下。默认的“包：目录”映射关系表明你可以在 setup 脚本所在的路径下找到 mod1.py 和 pkg/mod2.py。  当然，你也可以用 package_dir 选项重写这层映射关系就是了。\ncmdclass\n定制化命令，通过继承 setuptools.command 下的命令类来进行定制化\nclass UploadCommand(Command):\n    \"\"\"Support setup.py upload.\"\"\"\n    ...\n\n    def run(self):\n        try:\n            self.status('Removing previous builds…')\n            rmtree(os.path.join(here, 'dist'))\n        except OSError:\n            pass\n\n        self.status('Building Source and Wheel (universal) distribution…')\n        os.system('{0} setup.py sdist bdist_wheel --universal'.format(sys.executable))\n\n        self.status('Uploading the package to PyPI via Twine…')\n        os.system('twine upload dist/*')\n\n        self.status('Pushing git tags…')\n        os.system('git tag v{0}'.format(about['__version__']))\n        os.system('git push --tags')\n\n        sys.exit()\n\nsetup(\n    ...\n    # $ setup.py publish support.\n    cmdclass={\n        'upload': UploadCommand,\n    },\n)\n这样可以通过 python setup.py upload 运行打包上传代码\ninstall_requires\n安装这个包所需要的依赖，列表\ntests_require\n与 install_requires 作用相似，单元测试时所需要的依赖\n虚拟运行环境下安装包\n以 legit 为例\n\n下载 lgit 源码  git clone https://github.com/kennethreitz/legit.git\n\n\n创建虚拟运行环境  virtualenv --no-site-packages venv  运行环境目录结构为：\nvenv/\n├── bin\n├── include\n├── lib\n├── local\n└── pip-selfcheck.json\n\n\n打包工程  python3 setup.py sdist bdist_wheel\n.\n├── AUTHORS\n├── build\n│   ├── bdist.linux-x86_64\n│   └── lib.linux-x86_64-2.7\n├── dist\n│   ├── legit-1.0.1-py2.py3-none-any.whl\n│   └── legit-1.0.1.tar.gz\n在 dist 下生成了安装包\n\n进入虚拟环境  source venv/bin/activate\n\n\n安装包  pip install ./dist/legit-1.0.1.tar.gz\nSuccessfully built legit args clint\nInstalling collected packages: appdirs, args, click, lint, colorama, crayons, smmap2, gitdb2, GitPython, ix, pyparsing, packaging, legit\nSuccessfully installed GitPython-2.1.8 appdirs-1.4.3 rgs-0.1.0 click-6.7 clint-0.5.1 colorama-0.4.0 rayons-0.1.2 gitdb2-2.0.3 legit-1.0.1 packaging-17.1 yparsing-2.2.0 six-1.11.0 smmap2-2.0.3\n\n\n\n安装过程分析\nvenv/lib/python2.7/site-packages/ 下安装了 legit 及依赖包\nlegit/venv/lib/python2.7/site-packages$ tree -L 1\n\n.\n├── appdirs-1.4.3.dist-info\n├── appdirs.py\n├── appdirs.pyc\n├── args-0.1.0.dist-info\n├── args.py\n├── args.pyc\n├── click\n├── click-6.7.dist-info\n├── clint\n├── clint-0.5.1.dist-info\n├── colorama\n├── colorama-0.4.0.dist-info\n├── crayons-0.1.2.dist-info\n├── crayons.py\n├── crayons.pyc\n├── easy_install.py\n├── easy_install.pyc\n├── git\n├── gitdb\n├── gitdb2-2.0.3.dist-info\n├── GitPython-2.1.8.dist-info\n├── legit\n├── legit-1.0.1.dist-info\n├── packaging\n├── packaging-17.1.dist-info\n├── pip\n├── pip-18.1.dist-info\n├── pkg_resources\n├── pyparsing-2.2.0.dist-info\n├── pyparsing.py\n├── pyparsing.pyc\n├── setuptools\n├── setuptools-40.6.2.dist-info\n├── six-1.11.0.dist-info\n├── six.py\n├── six.pyc\n├── smmap\n├── smmap2-2.0.3.dist-info\n├── wheel\n└── wheel-0.32.2.dist-info\nvenv/bin 下新增可执行文件 legit, 内容为\n#!/home/turtlebot/learn/python/legit/venv/bin/python\n\n# -*- coding: utf-8 -*-\nimport re\nimport sys\n\nfrom legit.cli import cli\n\nif __name__ == '__main__':\n    sys.argv[0] = re.sub(r'(-script\\.pyw?|\\.exe)?$', '', sys.argv[0])\n    sys.exit(cli())\n此时，可以直接运行\n>>> legit\nsetup.py 分析\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport sys\nfrom codecs import open  # To use a consistent encoding\n\nfrom setuptools import setup  # Always prefer setuptools over distutils\n\nAPP_NAME = 'legit'\nAPP_SCRIPT = './legit_r'\nVERSION = '1.0.1'\n\n\n# Grab requirements.\nwith open('reqs.txt') as f:\n    required = f.readlines()\n\n\nsettings = dict()\n\n\n# Publish Helper.\nif sys.argv[-1] == 'publish':\n    os.system('python setup.py sdist bdist_wheel upload')\n    sys.exit()\n\n\nif sys.argv[-1] == 'build_manpage':\n    os.system('rst2man.py README.rst > extra/man/legit.1')\n    sys.exit()\n\n\n# Build Helper.\nif sys.argv[-1] == 'build':\n    import py2exe  # noqa\n    sys.argv.append('py2exe')\n\n    settings.update(\n        console=[{'script': APP_SCRIPT}],\n        zipfile=None,\n        options={\n            'py2exe': {\n                'compressed': 1,\n                'optimize': 0,\n                'bundle_files': 1}})\n\nsettings.update(\n    name=APP_NAME,\n    version=VERSION,\n    description='Git for Humans.',\n    long_description=open('README.rst').read(),\n    author='Kenneth Reitz',\n    author_email='me@kennethreitz.com',\n    url='https://github.com/kennethreitz/legit',\n    packages=['legit'],\n    install_requires=required,\n    license='BSD',\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'Natural Language :: English',\n        'License :: OSI Approved :: BSD License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n    ],\n    entry_points={\n        'console_scripts': [\n            'legit = legit.cli:cli',\n        ],\n    }\n)\n\n\nsetup(**settings)\n\n\npackages=['legit'] 引入 legit 目录下的所有默认引入文件\ninstall_requires=required 指明安装时需要额外安装的第三方库\n\n'console_scripts': ['legit = legit.cli:cli',] 生成可执行控制台程序，程序名为 legit, 运行 legit.cli 中的 cli()函数。最终会在 bin/ 下生成 legit 可执行 py 文件，调用制定的函数\n\nsetup.py 实例分析\nkennethreitz/setup.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Note: To use the 'upload' functionality of this file, you must:\n#   $ pip install twine\n\nimport io\nimport os\nimport sys\nfrom shutil import rmtree\n\nfrom setuptools import find_packages, setup, Command\n\n# Package meta-data.\nNAME = 'mypackage'\nDESCRIPTION = 'My short description for my project.'\nURL = 'https://github.com/me/myproject'\nEMAIL = 'me@example.com'\nAUTHOR = 'Awesome Soul'\nREQUIRES_PYTHON = '>=3.6.0'\nVERSION = None\n\n# What packages are required for this module to be executed?\nREQUIRED = [\n    # 'requests', 'maya', 'records',\n]\n\n# What packages are optional?\nEXTRAS = {\n    # 'fancy feature': ['django'],\n}\n\n# The rest you shouldn't have to touch too much :)\n# ------------------------------------------------\n# Except, perhaps the License and Trove Classifiers!\n# If you do change the License, remember to change the Trove Classifier for that!\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\n# Import the README and use it as the long-description.\n# Note: this will only work if 'README.md' is present in your MANIFEST.in file!\ntry:\n    with io.open(os.path.join(here, 'README.md'), encoding='utf-8') as f:\n        long_description = '\\n' + f.read()\nexcept FileNotFoundError:\n    long_description = DESCRIPTION\n\n# Load the package's __version__.py module as a dictionary.\nabout = {}\nif not VERSION:\n    with open(os.path.join(here, NAME, '__version__.py')) as f:\n        exec(f.read(), about)\nelse:\n    about['__version__'] = VERSION\n\n\nclass UploadCommand(Command):\n    \"\"\"Support setup.py upload.\"\"\"\n\n    description = 'Build and publish the package.'\n    user_options = []\n\n    @staticmethod\n    def status(s):\n        \"\"\"Prints things in bold.\"\"\"\n        print('\\033[1m{0}\\033[0m'.format(s))\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        try:\n            self.status('Removing previous builds…')\n            rmtree(os.path.join(here, 'dist'))\n        except OSError:\n            pass\n\n        self.status('Building Source and Wheel (universal) distribution…')\n        os.system('{0} setup.py sdist bdist_wheel --universal'.format(sys.executable))\n\n        self.status('Uploading the package to PyPI via Twine…')\n        os.system('twine upload dist/*')\n\n        self.status('Pushing git tags…')\n        os.system('git tag v{0}'.format(about['__version__']))\n        os.system('git push --tags')\n\n        sys.exit()\n\n\n# Where the magic happens:\nsetup(\n    name=NAME,\n    version=about['__version__'],\n    description=DESCRIPTION,\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    author=AUTHOR,\n    author_email=EMAIL,\n    python_requires=REQUIRES_PYTHON,\n    url=URL,\n    packages=find_packages(exclude=('tests',)),\n    # If your package is a single module, use this instead of 'packages':\n    # py_modules=['mypackage'],\n\n    # entry_points={\n    #     'console_scripts': ['mycli=mymodule:cli'],\n    # },\n    install_requires=REQUIRED,\n    extras_require=EXTRAS,\n    include_package_data=True,\n    license='MIT',\n    classifiers=[\n        # Trove classifiers\n        # Full list: https://pypi.python.org/pypi?%3Aaction=list_classifiers\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy'\n    ],\n    # $ setup.py publish support.\n    cmdclass={\n        'upload': UploadCommand,\n    },\n)\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}