{"title": "puyhon_bomb----字符串补充 - python太阳花 ", "index": "python", "content": "随机字符串\n导入string模块\nctrl+enter :自动导入模块\nimport string\nimport random\n\nget_code = string.ascii_letters +string.digits\n#输出所有字母（大小写）和数字\nprint(get_code)\n\n#ctrl+enter :自动导入模块\n\n\n恺撒加密\n每个英文字母替换为字母表第k个字母text = 'hello'next = 'khoor'\nprint(string.ascii_letters)\n\n#旧的：abcdefghijklmnopqrstuvwxyz   ABCDEFGHIJKLMNOPQRSTUVWXYZ\n#新的：defghijklmnopqrstuvwxyzabc   DEFGHIJKLMNOPQRSTUVWXYZABC\ndef kaisa(text='hello',k=3):\n    #对原有小写字母向右移动k位\n    lower = string.ascii_lowercase[k:]+string.ascii_lowercase[:k]\n    upper = string.ascii_uppercase[k:]+string.ascii_uppercase[:k]\n    #用于创建字符串映射的转换表，这里生成的table是一个字典{旧的ascii：新的ascii}\n    table = str.maketrans(string.ascii_letters,lower+upper)\n    #根据转换表去转换对应字符\n    return text.translate(table)\n\ncrypt = kaisa()\nprint(crypt)\n\nkhoor\n\n暴力破解\n\nimport string\ndef kaisa(text='hello',k=3):\n    #对原有小写字母向右移动k位\n    lower = string.ascii_lowercase[k:]+string.ascii_lowercase[:k]\n    upper = string.ascii_uppercase[k:]+string.ascii_uppercase[:k]\n    #用于创建字符串映射的转换表，这里生成的table是一个字典{旧的ascii：新的ascii}\n    table = str.maketrans(string.ascii_letters,lower+upper)\n    #根据转换表去转换对应字符\n    return text.translate(table)\n    \ndef check(text):\n    \"\"\"\n    思路：测试文本中是否存在至少两个最常见的英文单词，如果有，则代表破解成功\n    \"\"\"\n    mostcommands =('is','and','have','to','not')\n    #[1 for word in mostcommands if word in text]\n    #遍历mostcommand，如果这个单词在破解后的文本里，列表添加‘1’\n    return len([1 for word in mostcommands if word in text])>2\n\n\ndef bruteforce(text):\n    for i in range(26): #所有可能的偏移值,一次次调用kaisa()，直到check()返回值True\n        t = kaisa(text,-i)  #往左移，开始破解\n        if check(t):    #如果满足check返回值是True\n            print(i)\n            print(t)\n            break\n\ntext=\"If not to the sun for smiling, warm is still in the sun there, but wewill laugh more confident calm; if turned to found his own shadow, appropriate escape, the sun will be through the heart,warm each place behind the corner; if an outstretched palm cannot fall butterfly, then clenched waving arms, given power; if I can't have bright smile, it will face to the sunshine, and sunshine smile together, in full bloom.\"\ncryptstr = kaisa(text=text,k=10)\nprint(cryptstr)\n\nbruteforce(cryptstr)\n\nSp xyd dy dro cex pyb cwsvsxq, gkbw sc cdsvv sx dro cex drobo, led gogsvv vkeqr wybo myxpsnoxd mkvw; sp debxon dy pyexn rsc ygx crknyg, kzzbyzbskdo ocmkzo, dro cex gsvv lo drbyeqr dro rokbd,gkbw okmr zvkmo lorsxn dro mybxob; sp kx yedcdbodmron zkvw mkxxyd pkvv leddobpvi, drox mvoxmron gkfsxq kbwc, qsfox zygob; sp S mkx'd rkfo lbsqrd cwsvo, sd gsvv pkmo dy dro cexcrsxo, kxn cexcrsxo cwsvo dyqodrob, sx pevv lvyyw.\n10\nIf not to the sun for smiling, warm is still in the sun there, but wewill laugh more confident calm; if turned to found his own shadow, appropriate escape, the sun will be through the heart,warm each place behind the corner; if an outstretched palm cannot fall butterfly, then clenched waving arms, given power; if I can't have bright smile, it will face to the sunshine, and sunshine smile together, in full bloom.\n\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}