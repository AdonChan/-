{"title": "python大佬养成计划----flask_migrate,flask_script - python太阳花 ", "index": "mysql,windows,python", "content": "flask_migrate\n在使用falsk_sqlalchemy时，采用'db.create_all'在后期修改数据库表字段的时候，不会自动的映射到数据库中，必须删除表，\n然后重新运行'db.create_all' 才会重新映射。这样不符合我们的要求，因此flask-migrate就是为了解决\n这个问题。它可以在每次修改模型（class）后，可以将修改的字段映射到数据库中\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask import Flask\nimport pymysql\nfrom sqlalchemy import desc\nfrom flask_bootstrap import Bootstrap\n\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://root:sheen@localhost/migrate_sql'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = True\ndb = SQLAlchemy(app)\napp.config['SECRET_KEY'] = 'SHEEN'\nbootstrap = Bootstrap(app)\n\nclass User(db.Model):\n    id = db.Column(db.INTEGER,autoincrement=True,primary_key=True)\n    # 用户名唯一且不能为空\n    name = db.Column(db.String(30),unique=True,nullable=False)\n    # 测试：添加gender属性\n    gender = db.Column(db.BOOLEAN,default=True)\n    todos = db.relationship('Todo',backref='user')\n\nclass Todo(db.Model):\n    id = db.Column(db.INTEGER, autoincrement=True, primary_key=True)\n    # unique: 指定该列信息是唯一的;\n    name = db.Column(db.String(50))\n    user_id = db.Column(db.INTEGER,db.ForeignKey('user.id'))\nif __name__ == '__main__':\n    db.create_all()\n\n当已经生成数据库表user和todo时，并且表中包含数据时。此时，要求我们对数据库表添加属性（用户性别），且不影响用户使用，我们使用数据库迁移migrate的方式来处理，在原始数据库操作文件model中加上生成属性的代码\n # 测试：添加gender属性\n    gender = db.Column(db.BOOLEAN,default=True)\nmigrate主要属性\n创建迁移仓库(migrations目录)\npython manager.py  db init\n读取类的内容, 生成版本文件,  并没有真正在数据库中添加或删除;\npython manager.py  db migrate -m \"添加性别\"\n在数据库中曾删改;\npython manager.py  db upgrade\n去查看改变的历史状态;\npython manager.py  db history\n返回指定的版本状态;\npython manager.py  db downgrade  base\n\n管理数据库变更\n新建manage.py文件来管理数据库变更\nfrom flask_script import Manager\nfrom flask_migrate import Migrate, MigrateCommand\nfrom models import app,db\n\n\nmigrate = Migrate(app,db)\nmanager = Manager(app)\nmanager.add_command('db',MigrateCommand)\n\nif __name__ == '__main__':\n    manager.run()\n步骤：\n1. 初始化(自动生成migrations目录)\npython manager.py db init\n\n2. 生成最初的迁移\npython manager.py db migrate -m '添加用户性别'\n出现语句：Detected added column 'user.gender'，表明对model有所改动\n\n3.数据库升级\npython manager.py db upgrade\n生成数据库历史版本的py文件:Running upgrade  -> 202a710ebeb6, '添加用户性别'\nflask_script\nFlask Script扩展提供向Flask插入外部脚本的功能,使得脚本和系统分开\n整体框架\n首先，创建一个Python模板运行命令脚本，可起名为script.py在该文件中，必须有一个Manager实例，Manager类追踪所有在命令行中调用的命令和处理过程的调用运行情况Manager只有一个参数——Flask实例\nfrom flask_script import Command,Manager\nfrom flask import Flask\n\napp = Flask(__name__)\n\nmanager = Manager(app)\nif __name__ == '__main__':\n    manager.run()\n创建命令\n其次，创建并加入命令。有三种创建命令的方式，即创建Command子类、使用@command修饰符、使用@option修饰符\n第一种--创建Command子类子类必须定义一个run方法创建Hello命令，并将Hello命令加入Manager实例\nclass  Hello(Command):\n    \"\"\"欢迎信息\"\"\"\n    def run(self):\n        print('hello,sheen')\n\nmanager.add_command('hello',Hello)\n\n第二种——使用Command实例的@command修饰符\n@manager.command\ndef add_user():\n    \"\"\"添加用户信息\"\"\"\n\n    print('添加用户成功')\n第三种——使用Command实例的@option修饰符建议使用@option；，可以传入有多个参数\n@manager.option('-n','--name',help='删除用户')\ndef del_user(name):\n    \"\"\"删除用户信息\"\"\"\n\n    if name:\n        print('删除用户%s成功' %(name))\n    else:\n        print('用户名为空！')\n完整示例\n# script.py\nfrom flask_script import Command,Manager\nfrom flask import Flask\n\napp = Flask(__name__)\n\nmanager = Manager(app)\n\nclass  Hello(Command):\n    \"\"\"欢迎信息\"\"\"\n    def run(self):\n        print('hello,sheen')\n\nmanager.add_command('hello',Hello)\n\n@manager.command\ndef add_user():\n    \"\"\"添加用户信息\"\"\"\n\n    print('添加用户成功')\n\n@manager.option('-n','--name',help='删除用户')\ndef del_user(name):\n    \"\"\"删除用户信息\"\"\"\n\n    if name:\n        print('删除用户%s成功' %(name))\n    else:\n        print('用户名为空！')\nif __name__ == '__main__':\n    manager.run()\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}