{"title": "类方法 和 外部方法 - python学习+自动化测试实践 ", "index": "python", "content": "\n\n\n类方法：类内部定义的方法\n\n外部方法：定义在类外的方法，但是带上了self参数。\n\n居于动态语言的灵活性，我们知道可以动态的给实例绑定属性，那是否可以给实例绑定一个方法，成为实例方法。例如：\nclass Student(object):\n      pass\n>>>s = Student()\n>>>s.name = 'xlp'          # 动态语言的灵活性：动态给实例绑定一个属性\ndef set_age(self,age)         # 定义一个外部方法：set_age()，不是class里的\nself.age = age\n可以创建一个链接把外部的set_age()方法链接到Student内。具体做法是：通过MethodType给类一个实例绑定外部方法。\nfrom types import MethodType   # ##？？？？\ns.set_age = MethodType (set_age,s)  # 给实例绑定一个方法\ns.set_age(24)   # 调用实例方法\ns.age   #测试结果\n24\n但是该方法对除开实例s，对其他实例是不起作用的。例如：\ns2 = Student()   # 创建新的实例\ns2.set_age(25)   # 尝试调用该方法\n# 报错\n#Traceback (most recent call last):\n#  File \"<stdin>\", line 1, in <module>\n#AttributeError: 'Student' object has no attribute 'set_age'\n\n若要给类的所有实例绑定外部方法，则需要给类动态绑定该方法。\n>>>def set_score(self,score):\n     self.score = score \n>>>Student.set_score = set_score    # 直接用类来创建一个方法\n>>> s.set_score(100)\n>>> s.score\n100\n>>> s2.set_score(59)\n>>> s2.score\n59\n此时实例和类都指向同一个set_score()。\n通常，上面的set_score()方法一般直接定义在class中，但动态绑定允许我们在程序运行的过程中动态地给class加上功能。\n\n❤ thanks for watching, keep on updating...点个赞再走吧\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}