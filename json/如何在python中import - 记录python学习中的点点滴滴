{"title": "如何在python中import - 记录python学习中的点点滴滴 ", "index": "python", "content": "用法\n1.import同一个路径下的.py文件.\n这是import关键字最基本的用法,import moudle1可以理解为直接将module1.py的语句复制到对应的代码段.\n2.import package的基本用法.\n很多时候实现某一个功能的模块的代码需要分在几个.py中文件中写,可以将这些功能写在一个python的package中,所谓package就是一个包含了__init__.py的python路径.文件结构如下\npackage1/\n    __init__.py\n    module_1.py\n    module_2.py\n    module_3.py\ntest_pac.py\n在package1包的module1.py中定义了\"say方法\"在module_1.py\ndef say():\n    print \"this is module1.py\"\n在和package同路径下的test_pac.py中引用module1\nfrom package1 import module_1\nmodule_1.say()\n3.在package中使用相对导入\n很多时候package中各个模块中也需要互相引用.\n例如\npackage1/\n    __init__.py\n    Class/\n        __init__.py\n        class1.py\n        class2.py\n        class3.py\n    Student/\n        __init__.py\n        student1.py\n        student2.py\ntest_package1.py\n在class1.py中写入以下代码\ndef say_class():\n    print \"class1\"\n在class1.py中定义了一个say_student()函数,想在Student路径下的student1.py中引用.\nfrom ..Class.class1 import say_class\ndef say_student():\n    print \"student1\"\n    say_class()\nif __name__==\"__main__\":\n    say_student()\n \n直接运行module_21.py中的代码会报错\nValueError: Attempted relative import in non-package\n在包(package)中使用了相对引用的.py文件只能以模块方式运行\npython -m module_21\n或者在包(package)中的文件引用,比如在test_package1.py实现以下代码\nfrom Student.student1 import *\nsay_student()\nsay_class()\n这个时候\n>>> python test_pac.py\n    student1\n    class1\n代码运行成功\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}