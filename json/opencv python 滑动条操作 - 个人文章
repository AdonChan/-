{"title": "opencv python 滑动条操作 - 个人文章 ", "index": "python,opencv-python,opencv", "content": "Trackbar as the Color Palette \n滑动条操作\ncv2.createTrackbar(trackbarName, windowName, value, count, onChange)cv2.getTrackbarPos(trackbarname, winname)\n\ntrackbarName:轨道栏名称\nwindowName:窗口名称\nvalue：参数的默认值\ncount：参数的最大值\nonChange：执行的回调函数\n\n应用\n创建一个简单的应用程序，显示您指定的颜色。有一个显示颜色的窗口和三个轨道栏，用于指定B，G，R各颜色。可以滑动轨迹栏并相应地窗口颜色更改。默认情况下，初始颜色将设置为黑色。\n代码：\nimport numpy as np\nimport cv2 \n\ndef nothing(x):\n    pass#在我们的例子中，函数什么都不做，所以我们简单地通过。\n\n# Create a black image, a window\nimg = np.zeros((300,512,3), np.uint8)\ncv2.namedWindow('image')\n\n# create trackbars for color change\ncv2.createTrackbar('R','image',0,255,nothing)\ncv2.createTrackbar('G','image',0,255,nothing)\ncv2.createTrackbar('B','image',0,255,nothing)\n\n# create switch for ON/OFF functionality\n# 轨迹栏的另一个重要应用是将其用作按钮或开关。默认情况下，\n# OpenCV没有按钮功能。因此，可以使用跟踪栏来获得此类功能。\n# 在我们的应用程序中，创建了一个开关，其中应用程序仅在开关打开时\n# 有效，否则屏幕始终为黑色\n\nswitch = '0 : OFF \\n1 : ON'\ncv2.createTrackbar(switch, 'image',0,1,nothing)\n\nwhile(1):\n    cv2.imshow('image',img)\n    k = cv2.waitKey(1) & 0xFF\n    if k == 27:\n        break\n\n    # get current positions of four trackbars\n    r = cv2.getTrackbarPos('R','image')\n    g = cv2.getTrackbarPos('G','image')\n    b = cv2.getTrackbarPos('B','image')\n    s = cv2.getTrackbarPos(switch,'image')\n\n    if s == 0:\n        img[:] = 0\n    else:\n        img[:] = [b,g,r]\n\ncv2.destroyAllWindows()\n\n打开开关，滑动滑动条\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}