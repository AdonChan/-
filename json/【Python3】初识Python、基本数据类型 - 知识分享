{"title": "【Python3】初识Python、基本数据类型 - 知识分享 ", "index": "python3.x,python", "content": "1. python介绍\n\n发展史等等....\n减少开发成本\n\n2. python与其他语言对比\n\nC语言：代码-->机器码\n其他高级语言：代码-->字节码-->机器码\n\n3. python种类\ncpython:常用的python就是cpython，python代码-->字节码-->机器码（一行一行读取执行）其他python：python代码-->字节码-->机器码pypy:python代码-->字节码-->机器码（全部转换完再执行）pypy效率会比cpython要高，pypy是cpython的一个分支，关于pypy可参考知乎一篇文章：PyPy 为什么会比 CPython 还要快？\n4. python基础\n4.1  解释器：\n解释规则windows：\npython解释器+文件：c:python3.5python.exe d:s17day01helloworld.pypython解释器内执行：c:python3.5python.exe\nlinux or mac：python解释器+文件：/usr/bin/python /data/s17/day01/helloworld.pypython解释器内执行：/usr/bin/python\n注： 在linux or mac系统上默认安装的是python2.x版本，如在linux or mac系统使用python，需注意下python版本。\n\n潜规则.py 结尾（当然你也可以采用其他的结尾也是可以的，不怕team成员杀了你也可以写。其实主要还是为了规范，python服务器上用的比较多，看见.py也就会知道这是python程序）\n编码编码发展：ASCII-->Unicode(万国码)-->UTF-8\n\n编码种类与区别\n\n\n编码\n支持语言\n字节位数\n缺点\n备注\n\n\n\nASCII\n英语\n8位\n只支持英文\n*\n\n\n万国码\n所有\n至少16位\n字节位数较大\n*\n\n\nUTF-8\n所有\n8+\n*\n对万国码压缩\n\n\nGBK\n中文、英文\n16位\n支持语言少\n*\n\n\n\npython编码相关：\n\n\n文件编码\n文件编码创建文件时定义即可，或者在IDE中定义\n\n\n\n解释器编码\n解释器编码需要在代码中标注，python3.x 版本不标注也是可以的(解释器默认编码为ASCII)，但为了统一规范，在文件第二行标注  `# -*- coding:utf-8 -*-`\n\n\n\n5. IDE\nPyCharm\n\n\n使用\na.创建一个项目，指定代码路径与python解释器路径\nb.创建一个文件夹\nc.创建一个python script 文件\nd.在py文件中右键， run xx.py\n\n\n文件编码在pycharm中首先要设置文件编码，将文件默认文件编码设置为utf-8\n文件模板修改python scripts文件模板，将python环境信息与编码信息定义在模板中\n改变大小配置编辑器中文字大小，设置可以用鼠标滑轮控制文字大小\n\n6. 注释\n\n单行注释: #\n多行注释:   ``` ```\n\n7. .pyc文件\n当一个python文件导入另一个模块时候，会生成一个 .pyc文件，那么这个文件就是导入的那个文件的字节码。\n8. 变量\npython变量规则：\n\n字母\n数字（变量不能以数字开头）\n下划线\n不能以python内置关键字为变量\npython中变量建议使用下划线分割（驼峰式也不会报错）\n\n9. 输入、输出\n\n输入: a = input('请输入xxxx')\n输出: print (a)\n\n10. 条件语句\n例1：\nif 条件:\n    ...\nelse:\n    ...\n应用\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# Author:Chuncheng.Fan <xmzncc@gmail.com>\n\nusername = input(\"请输入用户名：\")\npassword = input(\"请输入密码：\")\n\n\nif username  == 'fcc' and password == '123':\n    print(\"欢迎登陆！\")\nelse:\n    print(\"用户名或密码错误！\")\n\n例2:\nif 条件：\n    ...\nelif 条件:\n    ...\nelse:\n    ...   \n应用：\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# Author:Chuncheng.Fan <xmzncc@gmail.com>\n\nsex = input(\"请输入你的性别：\")\n\nif sex == \"男\":\n    print(\"傻x，自己性别都忘了!\")\nelif sex == \"女\":\n    print(\"...你在想想，你忘了你已经做了手术了吗...\")\nelse:\n    print(\"人妖.......\")\n11. 循环语句\nwhile\nwhile 条件:\n    continue # 开始下一次循环\n    break # 跳出所有循环\n例：\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# Author:Chuncheng.Fan <xmzncc@gmail.com>\n\ni = 0\nwhile i < 3:\n    username = input(\"请输入用户名：\")\n    password = input(\"请输入密码：\")\n    if username == 'fcc' and password == '123':\n        print(\"欢迎登陆！\")\n        break\n    else:\n        print('用户名或密码错误')\n        i += 1\n12. 练习\n使用while循环输入 1 2 3 4 5 6    8 9 10\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# Author:Chuncheng.Fan <xmzncc@gmail.com>\n\ni = 1\nwhile True:\n    if i == 7:\n        i += 1\n        continue\n    print(i)\n    i += 1\n    if i == 11:\n        break\n求1-100的所有数的和\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# Author:Chuncheng.Fan <xmzncc@gmail.com>\n\nvalue = 0\ni = 1\nwhile i < 101:\n    value = value + i\n    i += 1\nprint(value)\n输出 1-100 内的所有奇数\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# Author:Chuncheng.Fan <xmzncc@gmail.com>\n\ni = 1\n\nwhile i < 101:\n    if i % 2 == 1:\n        print(i)\n    i += 1\n输出 1-100 内的所有偶数\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# Author:Chuncheng.Fan <xmzncc@gmail.com>\n\ni = 1\n\nwhile i < 101:\n    if i % 2 == 0:\n        print(i)\n    i += 1\n求1-2+3-4+5 ... 99的所有数的和\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# Author:Chuncheng.Fan <xmzncc@gmail.com>\n\nvalue = 0\ni = 1\n\nwhile i < 100:\n    if i % 2 == 1:\n        value = value + i\n        i += 1\n    elif i % 2 == 0:\n        value = value - i\n        i +=1\nprint(value)\n用户登陆（三次机会重试）\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# Author:Chuncheng.Fan <xmzncc@gmail.com>\n\ni = 0\n\nwhile i < 3:\n    username = input(\"请输入用户名：\")\n    password = input(\"请输入密码：\")\n    if username == 'fcc' and password == '123':\n        print(\"欢迎登陆！\")\n        break\n    else:\n        print(\"用户名或密码错误\")\n        i += 1\n13. 运算符\n13.1 算数运算\n\n\n运算符\n描述\n实例\n\n\n\n+\n加 - 两个对象相加\na+b 输出结果30\n\n\n-\n减 - 得到负数或是一个数减去另一个数\na-b 输出结果-10\n\n\n*\n乘 - 两个数相乘或是返回一个被重复若干次的字符串\na*b 输出结果200\n\n\n/\n除 - x以y\nb/a输出结果2\n\n\n%\n取模 - 返回除法的余数\nb%a输出结果0\n\n\n**\n幂 - 返回x的y次幂\na**b为10的20次方，输出结果100000000\n\n\n//\n取整除 - 返回商的整数部分\n9//2输出结果4，9.0//2.0 输出结果4.0\n\n\n\n13.2 比较运算\n\n\n运算符\n描述\n实例\n\n\n\n==\n等于 - 比较对象是否相等\n（a==b）返回False\n\n\n!=\n不等于 - 比较两个对象是否不相等\n（a!=b）返回True\n\n\n<>\n不等于 - 比较两个对象是否不相等\n(a<>b)返回True，这个运算符类似!=\n\n\n>\n大于 - 返回x是否大于y\n（a>b）返回False\n\n\n<\n小于 - 返回\nb%a输出结果0\n\n\n>=\n幂 - 返回x的y次幂\na**b为10的20次方，输出结果100000000\n\n\n<=\n取整除 - 返回商的整数部分\n9//2输出结果4，9.0//2.0 输出结果4.0\n\n\n\n13.3 赋值运算\n\n\n运算符\n描述\n实例\n\n\n\n=\n简单的赋值运算符\nc=a+b 将 a+b的运算结果赋值为c\n\n\n+=\n加法赋值运算符\nc+=a 等效于c=c+a\n\n\n-=\n减法赋值运算符\nc-=a 等效于c=c-a\n\n\n*=\n乘法赋值运算符\nc=a 等效于c=ca\n\n\n/=\n除法赋值运算符\nc/=a 等效于c=c/a\n\n\n%=\n取模赋值运算符\nc%=a 等效于c=c%a\n\n\n**=\n幂赋值运算符\nc**=a 等效于c=c**a\n\n\n//=\n取整除赋值运算符\nc//=a 等效于c=c//a\n\n\n\n13.4 逻辑运算\n\n\n运算符\n描述\n实例\n\n\n\nand\n布尔“与”-如果x为False，x and y 返回False，否则它返回y的计算值。\n(a abd b) 返回True\n\n\nor\n布尔“或”-如果x是True，它返回True，否则它返回y的计算值。\n(a or b)返回True\n\n\nnot\n布尔“非”-如果x为True，返回False，如果x为False，它返回True。\nnot(a and b)返回False\n\n\n\n13.5\n\n\n运算符\n描述\n实例\n\n\n\nin\n如果在指定的序列中找到值返回True，否则返回False。\nx在y序列，如果x在y序列中返回True。\n\n\nnot in\n如果在指定的序列中没有找到值返回True，否则返回False。\nx不在y序列中，如果x不在y序列中返回False。\n\n\n\n14. python数据类型\n14.1 数字\nint（整型）\n\n在32位机器上，整数的位数为32位，取值范围为-231～231-1，即-2147483648～2147483647\n在64位系统上，整数的位数为64位，取值范围为-263～263-1，即-9223372036854775808～9223372036854775807\n\n14.2 布尔值\n真或假1 或 0\n14.3 字符串\n字符串常用功能:\n\n移除空白\n分割\n长度\n索引\n切片\n\n14.4 列表\nname_list = ['alex', 'seven', 'eric']\n或\nname_list ＝ list(['alex', 'seven', 'eric'])\n基本操作:\n\n索引\n切片\n追加\n删除\n长度\n切片\n循环\n包含\n\n14.5 元祖\n创建元祖：\nages = (11, 22, 33, 44, 55)\n或\nages = tuple((11, 22, 33, 44, 55))\n基本操作：\n\n索引\n切片\n循环\n长度\n包含\n\n14.6 字典（无序）\n创建字典：\nperson = {\"name\": \"mr.wu\", 'age': 18}\n或\nperson = dict({\"name\": \"mr.wu\", 'age': 18})\n常用操作：\n\n索引\n新增\n删除\n键、值、键值对\n循环\n长度\n\n14.7 其他\n14.7.1 for循环\n用户按照顺序循环可迭代对象中的内容，PS：break、continue\nli = [11,22,33,44]\nfor item in li:\n    print item\n14.7.2 enumrate\n为可迭代的对象添加序号\nli = [11,22,33]\nfor k,v in enumerate(li, 1):\n    print(k,v)\n14.7.3 range和xrange\n指定范围，生成指定的数字\nprint range(1, 10)\n# 结果：[1, 2, 3, 4, 5, 6, 7, 8, 9]\n \nprint range(1, 10, 2)\n# 结果：[1, 3, 5, 7, 9]\n \nprint range(30, 0, -2)\n# 结果：[30, 28, 26, 24, 22, 20, 18, 16, 14, 12, 10, 8, 6, 4, 2]　　\n15. 练习题\n元素分类\n有如下值集合\nv1 = [11,22,33,44,55,66,77,88,99,90]，\n将所有大于 66 的值保存至字典的第一个key中，将小于 66 的值保存至第二个key的值中。即：\n{'k1': 大于66的所有值, 'k2': 小于66的所有值}\n            \nv2 = {'k1': [],'k2':[] }\n答案:\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# Author:Chuncheng.Fan <xmzncc@gmail.com>\n\nv1 = [11,22,33,44,55,66,77,88,99,90]\nv2 = {'k1':[],'k2':[]}\n\nfor item in v1:\n    if item > 66:\n        v2['k1'].append(item)\n    elif item < 66:\n        v2['k2'].append(item)\nprint(v2)\n功能要求：\n= 2000\n要求用户输入总资产，例如：2000显示商品列表，让用户根据序号选择商品，加入购物车购买，如果商品总额大于总资产，提示账户余额不足，否则，购买成功。\n            goods = [\n                {\"name\": \"电脑\", \"price\": 1999},\n                {\"name\": \"鼠标\", \"price\": 10},\n                {\"name\": \"游艇\", \"price\": 20},\n                {\"name\": \"美女\", \"price\": 998},\n            ]\n            \n            num = input('>>>') # 1\n            num = int(num)\n            goods[num]['price']\n用户交互，显示省市县三级联动的选择\n        \ndic = {\n    \"河北\": {\n             \"石家庄\": [\"鹿泉\", \"藁城\", \"元氏\"],\n                    \"邯郸\": [\"永年\", \"涉县\", \"磁县\"],\n            }\n    \"河南\": {\n             ...\n                }\n    \"山西\": {\n            ...\n                }\n            }\n            \n            for v in dic.keys():\n                print(v)\n            inp = input('>>>')\n            dic[inp]\n16. 作业\n基于文件存储的用户登录程序（3次登录失败，锁定用户）\n答案：\n #!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# Author:Chuncheng.Fan <xmzncc@gmail.com>\n\nf1 = open('db','r')\ndata = f1.read()\nf1.close()\n\n# 1.格式化数据\n\nuser_info_list = []\nuser_str_list = data.split('\\n')\nfor item in user_str_list:\n    temp = item.split('|')\n    v = {\n        'name': temp[0],\n        'pwd': temp[1],\n        'times': int(temp[2])\n    }\n    user_info_list.append(v)\nprint(user_info_list)\n\n# 2.判断用户输入\ncount = 0\nwhile count < 3:\n    username = input('请输入用户名：')\n    status = 0\n    for user_login_info in user_info_list:\n        if username == user_login_info['name']:\n            if user_login_info['times'] >= 3:\n                print('输入错误3次，用户已锁定，请联系管理员 ~')\n                exit()\n            else:\n                count = 0\n                status = 1\n                pwd = input('请输入密码：')\n                if pwd == user_login_info['pwd']:\n                    print('用户 %s 登录成功！' %username)\n                    user_login_info['times'] = 0\n                    count = 3\n                    break\n                else:\n                    if 0 == 2 - user_login_info['times']:\n                        pass\n                    else:\n                        print('用户名或密码错误，请重新输入。')\n                    user_login_info['times'] += 1\n\n                if user_login_info['times'] >= 3:\n                    print('输入错误3次，用户已锁定，请联系管理员 ~')\n                    count = 3\n                    break\n    if status == 0:\n        print('没有这个用户')\n    count += 1\n\n# 3.格式化并写入文件\nnew_db = \"\"\nfor user_login_info in user_info_list:\n    user_info_str = user_login_info['name'] + \"|\" + user_login_info['pwd'] + '|' + str(user_login_info['times'])\n    new_db = new_db + user_info_str + '\\n'\n\nf2 = open('db','w')\nf2.write(new_db.strip())\nf2.close()\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "4"}