{"title": "用python度过一个温馨的单身七夕节-安利篇 - python3 ：公司内部培训专栏 ", "index": "python", "content": "纽约时间比加州时间早三个小时，New York is 3 hours ahead of California但加州时间并没有变慢。but it does not make California slow.\n有人22岁就毕业了，Someone graduated at the age of 22,\n但等了五年才找到稳定的工作！but waited 5 years before securing a good job!\n有人25岁就当上CEO，Someone became a CEO at 25,\n却在50岁去世。and died at 50.\n也有人直到50岁才当上CEO，While another became a CEO at 50,\n然后活到90岁。and lived to 90 years.\n有人单身，Someone is still single,\n同时也有人已婚，while someone else got married,\n也有人又恢复单身了。someone is single again.\n欧巴马55岁就退休，Obama retires at 55,\n川普70岁才开始当总统 。but Trump starts at 70.\n世上每个人本来就有自己的发展时区。Absolutely everyone in this world works based on their Time Zone.\n身边有些人看似走在你前面，People around you might seem to go ahead of you,\n也有人看似走在你后面。some might seem to be behind you.\n但其实每个人在自己的时区有自己的步程。But everyone is running their own RACE, in their own TIME.\n不用嫉妒或嘲笑他们。Don’t envy them or mock them.\n他们都在自己的时区里，你也是！They are in their TIME ZONE, and you are in yours!\n生命就是等待正确的行动时机。Life is about waiting for the right moment to act\n所以，放轻松。So, RELAX.\n你没有落后。You’re not LATE.\n你没有领先。You’re not EARLY.\n在命运为你安排的属于自己的时区里，一切都准时。You are very much ON TIME, and in your TIME ZONE Destiny set up for you.\n\n七夕到了，作为独自一人的你，是否会有那么一丢丢失落呢，在这个特殊的日子，再好的代码可能也无法挽救你失落的心，但诗和python也许可以。如果你认真读了上面的诗，会有那么一丝丝安慰，别着急，满满来，这一篇，绝对是最温情的Python教程。就像诗中所说，属于每个人的美好，总会到来，而这之前，请过好自己，做好迎接美好的准备，有时候，你不缺遇到美好的机遇，只差抓住美好的能力。让我们来提示能力吧，最后会有安利诗句和视频哦，温馨属于我们每个不放弃自我的人。\n本篇文章启发和代码来源：https://segmentfault.com/a/1190000016048640\n1、代码与解释\n\"\"\"\nTkinter库属于Python的GUI编程部分。\nPython提供了多个图形开发界面的库，\n常用的有Tkinter，xwPython，Jython。Tkinter是Python的标准GUI库，内置在Python中，\n不需要额外安装，对于一些简单的图形界面可以轻松实现。\n\n如果PyCharm安装PIL安装失败的话，请在Pyharm下面的控制台直接命令安装：pip install Pillow\n\"\"\"\nimport tkinter as tk #Tkinter：最终的GUI实现；\nfrom PIL import Image, ImageTk #处理图像，在最后画布背景中使用；\nfrom time import time, sleep #处理时间，完成时间生命周期的更新迭代；\nfrom random import choice, uniform, randint #随机产生数字，定义燃放过程中的随机变量；\nfrom math import sin, cos, radians #数学函数方法，计算燃放移动使用；\n\n# 设置重力参数\nGRAVITY = 0.05\n# 设置随机的颜色列表\ncolors = ['red', 'blue', 'yellow', 'white', 'green', 'orange', 'purple', 'seagreen', 'indigo', 'cornflowerblue']\n\n#定义一个通用的烟花颗粒的类\nclass part:\n    def __init__(self, cv, idx, total, explosion_speed, x=0., y=0., vx=0., vy=0., size=2., color='red', lifespan=2,\n                 **kwargs):\n        self.id = idx #每个烟花中颗粒的标识；\n        self.x = x #烟花的x轴；\n        self.y = y #烟花的y轴；\n        self.initial_speed = explosion_speed\n        self.vx = vx #在x轴中颗粒的速度；\n        self.vy = vy #在y轴中颗粒的速度；\n        self.total = total #每个烟花的颗粒数量；\n        self.age = 0 #颗粒已经在背景度过的时间；\n        self.color = color #颜色；\n        self.cv = cv #背景；\n        self.cid = self.cv.create_oval(\n            x - size, y - size, x + size,\n            y + size, fill=self.color)\n        self.lifespan = lifespan\n\n    #通过判断颗粒状态更新颗粒的生命时间；\n    def update(self, dt):\n        self.age += dt\n\n        # 颗粒爆炸\n        if self.alive() and self.expand():\n            move_x = cos(radians(self.id * 360 / self.total)) * self.initial_speed\n            move_y = sin(radians(self.id * 360 / self.total)) * self.initial_speed\n            self.cv.move(self.cid, move_x, move_y)\n            self.vx = move_x / (float(dt) * 1000)\n\n        # 颗粒降落\n        elif self.alive():\n            move_x = cos(radians(self.id * 360 / self.total))\n\n            self.cv.move(self.cid, self.vx + move_x, self.vy + GRAVITY * dt)\n            self.vy += GRAVITY * dt\n\n        # 如果颗超过最长持续时间，颗粒消失\n        elif self.cid is not None:\n            cv.delete(self.cid)\n            self.cid = None\n\n    # 定义爆炸的时间\n    def expand(self):\n        return self.age <= 1.2\n\n    # 检查颗粒在生命周内是否还存在\n    def alive(self):\n        return self.age <= self.lifespan\n\"\"\"\n上面完成了一个通用的烟花颗粒类的实现，下面就开始烟花燃放的模拟循环过程：通过递归不断循地在背景中产生新的烟花。\n\n首先定义一个 simulate 模拟的函数，在函数中定了一些参数：\n\nt：时间戳；\nexplode_points：烟花爆炸点列表，供后续更新使用；\nnum_explore：随机的烟花数量；\n然后在所有的烟花数量中循环创建所有的烟花颗粒类，当然在每次循环中颗粒类都需要设置一定的属性参数，参数多是随机产生：\n\nobjects：存放所有的颗粒对象；\nx_cordi，y_cordi：随机产生烟花在背景中的x，y坐标位置（50，550）；\nspeed：随机产生颗粒移动速度（0.5，1.5）；\nsize：随机产生颗粒大小（0.5，3）；\ncolor：选择颜色随机列表中的颜色；\ntotal_particles：随机产生每个烟花中所有颗粒的数量；\n有了这些参数，我们就可以定义循环产生每个颗粒对象了，并将每个烟花的所有颗粒对象储存在objects中。也就是说explore_points是列表中套列表，内层列表是每个烟花的所有颗粒对象，外层列表是所有烟花。\n\n所有的颗粒对象完成后，就开始对每个颗粒的生命时间进行更新，且总时间设定在1.8秒以内。最后通过root递归使烟花可以一直在背景中燃放。\n\"\"\"\ndef simulate(cv):\n    t = time()\n    explode_points = []\n    wait_time = randint(10, 100)\n    numb_explode = randint(6, 10)\n    # 循环创建所有的烟花颗粒\n    for point in range(numb_explode):\n        objects = []\n        x_cordi = randint(50, 950)\n        y_cordi = randint(50, 150)\n        speed = uniform(0.5, 1.5)\n        size = uniform(0.5, 3)\n        color = choice(colors)\n        explosion_speed = uniform(0.2, 1)\n        total_particles = randint(10, 50)\n        for i in range(1, total_particles):\n            r = part(cv, idx=i, total=total_particles, explosion_speed=explosion_speed, x=x_cordi, y=y_cordi,\n                     vx=speed, vy=speed, color=color, size=size, lifespan=uniform(0.6, 1.75))\n            objects.append(r)\n        explode_points.append(objects)\n\n    total_time = .0\n    # 保持在1.8秒内进行更新\n    while total_time < 1.8:\n        sleep(0.01)\n        tnew = time()\n        t, dt = tnew, tnew - t\n        for point in explode_points:\n            for item in point:\n                item.update(dt)\n        cv.update()\n        total_time += dt\n    # 通过递归持续不断的在背景中添加新烟花\n    root.after(wait_time, simulate, cv)\n\ndef close(*ignore):\n    \"\"\"停止模拟循环，关闭窗口\"\"\"\n    global root\n    root.quit()\n\n\"\"\"\n以上代码部分均与Tkinter无关，只是定义了颗粒对象以及模拟颗粒生命周期的全过程，下面将使用Tkinter完成最终的效果。\n\nroot：Tkinter类的对象；\ncv：定义了Tkinter中背景画布对象，其中height和width参数可根据实际进行调整；\nimage：打开的图像对象，图像将被作为画布中的背景，图像可根据自己喜好自行选择；\nphoto：使用ImageTk定义了Tkinter中的图像对象；\n然后将在画布对象上创建一个图像（使用定义的photo对象作为参数），最后调用Tkinter对象root进行持续不断地simulate模拟过程。\n\"\"\"\nif __name__ == '__main__':\n    root = tk.Tk()\n    cv = tk.Canvas(root, height=640, width=959)\n    # 自己选择一个好的图像背景填充画布\n    image = Image.open(\"image.jpeg\")\n    photo = ImageTk.PhotoImage(image)\n    cv.create_image(0, 0, image=photo, anchor='nw')\n\n    cv.pack()\n    root.protocol(\"WM_DELETE_WINDOW\", close)\n\n    root.after(100, simulate, cv)\n\n    root.mainloop()\n2、最终效果\n\n3、安利1：《热爱生命》\n我不去想，是否能够成功，既然选择了远方，便只顾风雨兼程。我不去想，能否赢得爱情，既然钟情于玫瑰，就勇敢地吐露真诚。\n我不去想，身后会不会袭来寒风冷雨，既然目标是地平线，留给世界的只能是背影。\n我不去想，未来是平坦还是泥泞，只要热爱生命，一切，都在意料之中。\n\n4、安利2：电影《心灵捕手》\n温馨解读版\n5、如果还感觉有那么一丝丝失落，欢迎在下面留言，可三陪：陪唠嗑、陪吃鸡、陪lol\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "0"}