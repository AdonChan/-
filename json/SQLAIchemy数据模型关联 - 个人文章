{"title": "SQLAIchemy数据模型关联 - 个人文章 ", "index": "mysql,flask,python", "content": "以下为读《深入理解Flask》\n使用SQLAIchemy要建立相应的数据模型而实际中模型之间又有一些不同的关系\n比如一一对应，一对多个，多对多个模型之间建立关系便必不可少了\n用户表示例\n\n\nID\nUsername\nPassword\nUserAvator\nEmail\n\n\n\n1\nbayi\n123456\nupload/avator1jpg\n328588917@qq.com\n\n\n2\nbabai\n123654\nupload/avator2.jpg\n123456@qq.com\n\n\n3\nxiaoming\n654321\nupload/avator3.jpg\n123654@qq.com\n\n\n\n图片表示例\n\n\nID\nuser_id\ndescription\nArddess\n\n\n\n1\n1\n第一张图片\nupload/1.jpg\n\n\n2\n1\n第二张图片\nupload/2.jpg\n\n\n3\n3\n第三张图片\nupload/3.jpg\n\n\n\n标签表示例\n\n\nID\ntag\n\n\n\n1\n人物\n\n\n2\n风景\n\n\n3\n动物\n\n\n\n约束表示例\n\n\nID 1\nID 2\nID 3\n\n\n\npic_id 1\npic_id  2\npic_id  1\n\n\ntag_id 1\ntag_id  1\ntag_id  2\n\n\n\n一对一\n这种关联似乎很少用到，夫妻似乎是很好的生活模型可以在丈夫一方加上外键，并加上唯一参数\nclass husband(db.Model):\n    __tablename__ = 'husband'\n    id = db.Column(db.Integer, primary_key=True)\n    husbandname = db.Column(db.String(80), unique=True)\n    wife = db.relationship('wife', backref='husband', lazy='dynamic',unique=True)\n在妻子一方加上指向husband的值\nclass wife(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    wifename = db.Column(db.String(80), unique=True)\n    husbandId = db.Column(db.Integer, db.ForeignKey('husband.id'))\n一对多\n这个关系算是常用的了，这次的demo里也有这个：user->picture一个用户会上传多张图片，相当于把一对一里的唯一参数删去user.pictures就成了一个列表\nclass User(db.Model):\n    __tablename__ = 'User'\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True)\n    password= db.Column(db.String(128))\n    avator= db.Column(db.String(35), unique=True)\n    email = db.Column(db.String(120), unique=True,index=True)\n    picture = db.relationship('Picture', backref='user', lazy='dynamic')\n\nclass Picture(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    dsepriction= db.Column(db.String(5000), unique=True)\n    address= db.Column(db.String(35), unique=True)\n    userId = db.Column(db.Integer, db.ForeignKey('User.id'))\n多对多\n比如这次用到的图片->标签多对多的建立就需要一个约束表的存在\n#约束表\nrelation = db.Table('relation',\n    db.Column('tags_id', db.Integer, db.ForeignKey('tags.id'),primary_key=True),\n    db.Column('picture_id', db.Integer, db.ForeignKey('picture.id'),primary_key=True)\n)\n\nclass Picture(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    dsepriction= db.Column(db.String(5000), unique=True)\n    address= db.Column(db.String(35), unique=True)\n    userId = db.Column(db.Integer, db.ForeignKey('User.id'))\n    tags = db.relationship(\n        'Tags', secondary=relation,backref=db.backref('picture', lazy='dynamic'))\n\nclass Tags(db.Model):\n    id = db .Column(db.Integer, primary_key=True)\n    tag = db.Column(db.String(50))\n多对多关系一开始写就感觉对操作方面很迷，就实际操作了一下实际操作一下可以体会一下他的这种用法\nC:\\Users\\bayi\\Desktop\\irides (master)\n(venv) λ python manage.py shell\n>>> pic=picture.query.filter_by(id=2).first()\n>>> pic\n<app.models.Picture object at 0x000000625116A6A0>\n>>> tag1=tags.query.first()\n>>> tag1\n<app.models.Tags object at 0x000000625116AD30>\n>>> tag2=tags.query.filter_by(id=2).first()\n>>> tag2\n<app.models.Tags object at 0x0000006251182208>\n>>> pic.tags=[tag1,tag2]\n>>> db.session.add(pic)\n>>> db.session.commit()\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}