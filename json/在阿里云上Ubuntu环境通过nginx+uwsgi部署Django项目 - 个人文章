{"title": "在阿里云上Ubuntu环境通过nginx+uwsgi部署Django项目 - 个人文章 ", "index": "python,django,ubuntu", "content": "年前阿里云打折，1核1G的云服务器一年只要300多块，果断就租了1年的。既然服务器已经到手，怎么能不把自己写的项目部署上去呢，其实网上关于nginx+uwsgi部署Django项目的文章有很多，但是这些文章要不就是很久之前的，要不就是互相抄袭，一路过来都是坑，这里重点吧在部署时候遇到的坑着重介绍一下：\n1.首先部署django项目\n首先是django项目，由于我是使用Anaconda来进行版本控制的，而django项目是在Python2.7环境下开发的，首先是新建一个Python2.7的环境：\n#创建python27环境\nconda create --name python27 python=2.7\n#激活该环境\nsource activate python27\n#通过conda安装django\nconda install django\n环境准备好后，从GitHub上将项目拉取下来\ngit clone https://github.com/sunny0826/xxx\n修改setting.py文件\n#debug模式默认开启，这里要关闭\nDEBUG = False\n#这里将外网IP配置进来\nALLOWED_HOSTS = ['127.0.0.1','xx.xx.xx.xx']\n启动项目：\n#来项目目录下执行\npython manage.py runserver 8000\n然后在外网ip:8000路径下查看项目启动情况\n2.阿里云配置安全组\n由于是服务器在阿里云上，所以直接访问时访问不到的，所以要在阿里云平台配置安全组（类似于防火墙）\n首先打开阿里云平台，登录，点击安全组配置：\n\n点击配置规则\n\n点击添加安全组规则\n\n按要求填写安全组规则\n优先级1位最高优先级，端口可以设置范围，并且可以设置授权访问的对象设置完之后，就可以在公网IP访问到我们的django项目了\n3.安装配置uwsgi\n确定django项目可以正常运行了，ctrl+c停止项目，下面我们来安装uwsgi：在安装uwsgi非常简单，只需要pip安装即可，但是由于之前使用的是Python27环境，这里记得要激活Python27环境，否则就安装到默认的Python路径了\n#uWSGI 是一个(巨大的) C 应用，所以你需要一个 C 编译器(比如 gcc 或者 clang)和 Python 开发版头文件\napt-get install build-essential python-dev\n#安装uwsgi\npip install uwsgi\n按照官网介绍，写已经Python脚本进行测试，test.py（在任意路径都可以，不过测完要记得删掉）\ndef application(env, start_response):\n    start_response('200 OK', [('Content-Type','text/html')])\n    return [\"Hello World\"]\n然后输入命令进行测试\nuwsgi --http :8000 --wsgi-file test.py\n这里是8000端口，因为之前测试django的时候打开的8000端口，这里偷懒就不去配置新的安全组了那么问题就来了，在启动的时候报错了....=。=\n\n出现的这个错误，经过测试只会在Python2.7的环境发生，在Python3+就没有发生了，辗转百度和Google，都没有找到这个问题的解决办法且这个问题一般发生在nginx上...但这个报错问题还是很明显，就是libpcre.so.1这个文件找不到，初步推测为版本问题首先要咱们搜索一下这个文件，看看本机有没有\n\n发现本机是有这个文件的，那就好办了，将他链接到相应位置就好\n\n执行这条语句之后就可以uwsgi就可以正常启动了\n在跳过这个坑之后，就可以正式来配置我们的项目了首先修改自己项目中的wsgi.py文件，添加两行代码\n\n然后在django项目根目录创建uwsgi.ini文件\nuwsgi.ini文件配置\n# uwsgi.ini file\n[uwsgi]\n\n# Django-related settings\n\nsocket = 127.0.0.1:8000            #与nginx通信的地址和端口\n\n# the base directory (full path)\nchdir           = /apps/xxxx        #django项目绝对路径\n\n# Django s wsgi file\nmodule          = xxxx.wsgi    #wsgi文件所在的相对于项目的路径\n\n# the virtualenv (full path)\nhome            =  /root/anaconda3/envs/python27/lib/python2.7/site-packages        #python环境的路径\n\n# process-related settings\n# master\nmaster          = true\n\n# maximum number of worker processes\nprocesses       = 4\n\n# ... with appropriate permissions - may be needed\n# chmod-socket    = 664\n# clear environment on exit\nvacuum          = true\n\nplugins=python\n#log文件\ndaemonize=/apps/uwsgi/uwsgi.log\n#pid文件\npidfile=/apps/uwsgi/uwsgi.pid\n这里配置日志文件和pid文件，方便之后的重启\n关于uwsgi的重启问题：\n每次项目有代码更新的话，都需要重启uwsgi，如果没有配置pid文件的话，重启需要使用：\n#查看uwsgi进程号\nps aux | grep uwsgi\n#关闭进程号为0的进程\nkill -9 主进程号\n\n来停止uwsgi，然后才能重启，注意这里的主进程是pid为1的进程，而配置了pid文件的，只需要进行如下方法来重启即可\n#重载（一般修改参数，或者修改py文件经常用到）\nuwsgi --reload uwsgi.pid\n#重启（一般系统环境变化会用到）\nuwsgi --stop uwsgi.pid\n最后在项目根目录下运行uwsgi命令,载入配置文件\nuwsgi --ini uwsgi.ini\n然后在后面的日志中要注意环境是否为之前配置，如果不是请激活激活之前创建的Python环境再进行操作\n4.安装配置nginx\n最后来安装nginx\nsudo apt-get install nginx  \n修改nginx配置\ncd /etc/nginx/sites-enabled    #Ubuntu中nginx配置文件所在路径\nvim default\n配置文件\nserver {\n        listen 80 default_server;            #监听端口，将来访问的端口\n        listen [::]:80 default_server;\n\n        root /var/www/html;\n\n        # Add index.php to the list if you are using PHP\n        index index.html index.htm index.nginx-debian.html;\n\n\n        server_name _;\n\n        location / {\n                include uwsgi_params;\n                uwsgi_pass 127.0.0.1:8000;    #uwsgi中配置的路径\n        }\n\n        location /static {\n                alias /apps/xxx/static;       #静态资源路径\n        }\n\n        location /resume.ico  {\n                alias /apps/xxx/static/resume.ico;    #网页图标路径\n        }\n}\nuwsgi启动后，再启动nginx\n基础命令\n/etc/init.d/nginx start  #启动\n/etc/init.d/nginx stop  #关闭\n/etc/init.d/nginx restart  #重启\n启动之后，访问外网IP:80,查看是否可以通过nginx访问django\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "1"}