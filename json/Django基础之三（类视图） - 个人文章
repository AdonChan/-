{"title": "Django基础之三（类视图） - 个人文章 ", "index": "mysql,centos,django,python", "content": "类视图\n简介\n视图是一个可调用的对象，它接收一个请求然后返回一个响应，这个可调用对象可以不只是函数，Django提供一些可以用作视图的类基于类的视图使用Python 对象实现视图，它提供除函数视图之外的另外一种方式\nview\n属性\nhttp_method_names：添加未知的请求方法\n方法\nas_view()：将类视图转换成可被调用的函数视图dispatch()： 根据请求去匹配http_method_names下的对应函数去处理请求http_method_not_allowed()：返回405错误\n实例\nfrom django.views import View\nclass IndexView(View):\n    http_method_names = ['get', 'post', 'put', 'patch', 'delete', 'head', 'options', 'trace','list']\n    def get(self,request,*args,**kwargs):\n        return HttpResponse(IndexView)\n\n    def post(self,request,*args,**kwargs):\n        data = request.POST\n        return HttpResponse(data)\n    #需要将list方法加入 http_method_names，否则会经过，dispatch，http_method_not_allowed()：返回405错误\n    def list(self,request,*args,**kwargs):\n        return HttpResponse(\"ListView\")\n请求方式：\nIn [27]: import requests                                                                \nIn [28]: url = 'http://192.168.33.10:8080/dashboard/index/'                             \nIn [29]: res = requests.request('list',url)                                             \nIn [30]: res.content                                                                    \nOut[30]: b'ListView'\n数据分页\n基于sql切片的方式分页\n数据准备\nIn [3]: from django.contrib.auth.models import User\nIn [4]: for n in range(1,101): \n...:     User.objects.create_user('wanghui-{}'.format(n),'wanghui-{}@alibaba.com'.format(n),'123456') \nIn [5]: User.objects.all()[1:10]      \n类视图\nclass UserView(View):\n    #http_method_names = ['get', 'post', 'put', 'patch', 'delete', 'head', 'options', 'trace','list']\n    def get(self,request,*args,**kwargs):\n      #展示数据\n        # queryset = User.objects.all()\n        # return HttpResponse(queryset)\n        try:\n            page = int(request.GET.get('page'))\n        except:\n            page = 1\n        if page < 1:\n            page = 1\n        per = 10\n        end = page * per\n        start = end - per\n        queryset = User.objects.all()[start:end]\n        data = [{\"id\":user.id,\"username\":user.username,\"email\":user.email} for user in queryset]\n        return JsonResponse(data,safe=False)\n基于Paginator对象的分页\nclass Paginator(object_list, per_page, orphans=0, allow_empty_first_page=True)\n属性\n- Paginator.count 所有页面的objects总数\n- Paginator.num_pages 页面总数\n- Paginator.page_range 页码的范围，从1开始，例如[1, 2, 3, 4]\n方法\n- Paginator.page(number) 返回一个page对象,number， 当前显示的是第几页\nPage对象\nclass Page(object_list, number, paginator)\n\n方法\n- Page.has_next() 如果有下一页，返回True\n- Page.has_previous() 如果有上一页，返回 True\n- Page.has_other_pages() 如果有上一面或下一页，返回True\n- Page.next_page_number() 返回下一页的页码.如果不存在,抛出InvalidPage异常\n- Page.previous_page_number() 返回上一页的页码.如果不存在,抛出InvalidPage异常\n- Page.start_index() 返回当前页上的第一个对象，相对于分页列表的所有对象的序号\n- Page.end_index() 返回当前页上的最后一个对象，相对于分页列表的所有对象的序号\n创建用户小例子\nfrom django.core.paginator import Paginator\nclass UserViewV2(View):\n    def get(self,request,*args,**kwargs):\n        queryset = User.objects.all()\n        paginator = Paginator(queryset,10)\n        try:\n            page = int(request.GET.get(\"page\"))\n        except:\n            page = 1\n        if page < 1:\n            page = 1\n        page = paginator.page(page)\n        data = [{\"id\":user.id,\"username\":user.username,\"email\":user.email} for user in page.object_list]\n        return JsonResponse(data,safe=False)\n\n    def post(self,request,*args,**kwargs):\n        username = request.POST.get(\"username\")\n        userpass = request.POST.get(\"userpass\")\n        email = request.POST.get('email')\n        if not username or userpass or not email:\n            return JsonResponse({\"errormsg\":\"参数有误！\"})\n        user = User.objects.create(username,email,userpass)\n        return JsonResponse({\"id\":user.id,\"username\":user.username,\"email\":user.email})\n请求方式\nIn [1]: import requests                                                                     \nIn [2]: url = \"http://192.168.33.10:8080/dashboard/userview/\"                \nIn [3]: data = {}                                                                                         \nIn [4]: data[\"username\"] = \"zhangsan\"                                                     \nIn [5]: data[\"userpass\"] = '123456'                                                           \nIn [6]: data[\"email\"] = \"zhangsan@alibaba.com\"                                     \nIn [7]: requests.post(url,data)                                                                 \nOut[7]: <Response [200]>\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}