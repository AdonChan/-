{"title": "设计模式(python实现)：策略模式 - 个人文章 ", "index": "python,设计模式", "content": "策略模式简单说和小时候我们玩的玩具差不多，一堆零部件通过不同的拼凑构成几个不同的机器人。\n1.举个栗子\n我们买了一个机器人，同时这个机器人配了三把武器，三把武器可以替换使用\n2.Show in Code\n在实例中，我们先创造一个人，天生自带人手\nclass People:\n    def __init__(self, hand = None):\n        self.name = \"人手\"\n        if hand is not None:\n            self.execute = types.MethodType(hand, self)\n    \n    def execute(self): #安装部件的位置\n        print(self.name)\n现在我们再给他创建两个备用的手，一个pighand、一个cathand\n//创造猪手\ndef pighand(self):\n    print(self.name + \" 用猪手\")\n    print(\"拱你\")\n\n//创造猫爪\ndef cathand(self):\n    print(self.name + \" 用猫爪\")\n    print(\"抓你\")\n3.完整代码\nimport types\n\n//创造一个人\nclass People:\n    def __init__(self, hand = None):\n        self.name = \"人手\"\n        if hand is not None:\n            self.execute = types.MethodType(hand, self)\n    \n    def execute(self): #安装部件的位置\n        print(self.name)\n\n\n//创造猪手\ndef pighand(self):\n    print(self.name + \" 用猪手\")\n    print(\"拱你\")\n\n//创造猫爪\ndef cathand(self):\n    print(self.name + \" 用猫爪\")\n    print(\"抓你\")\n\nif __name__ == '__main__':\n    hand0 = People()\n    \n    #用猪手替换人手\n    hand1 = People(pighand)\n    hand1.name = \"猪手\"\n    \n    #用猫爪替换ren'hsou\n    hand2 = People(cathand)\n    hand2.name = \"猫爪\"\n\n    hand0.execute()\n    hand1.execute()\n    hand2.execute()\n4.总结\n将相同提取，将变化拆分\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}