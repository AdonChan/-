{"title": "Hacker News 排名算法工作原理 - SegmentFault 业界资讯 ", "index": "python,arc,算法,hacker-news", "content": "这篇文章我要向大家介绍Hacker News网站的文章排名算法工作原理，以及如何在自己的应用里使用这种算法。这个算法非常的简单，但却在突出热门文章和遴选新文章上表现的异常优秀。\n\n\n\n深入 news.arc 程序代码\n\nHacker News是用Arc语言开发的，这是一种Lisp方言，由Y Combinator投资公司创始人Paul Graham创造。Hacker News的开源的，你可以在arclanguage.org找到它的源代码。深入发掘 news.arc 程序，你会找到这段排名算法代码，就是下面这段：\n\n    ; Votes divided by the age in hours to the gravityth power.\n    ; Would be interesting to scale gravity in a slider.\n\n    (= gravity* 1.8 timebase* 120 front-threshold* 1 \n       nourl-factor* .4 lightweight-factor* .3 )\n\n    (def frontpage-rank (s (o scorefn realscore) (o gravity gravity*))\n      (* (/ (let base (- (scorefn s) 1)\n              (if (> base 0) (expt base .8) base))\n            (expt (/ (+ (item-age s) timebase*) 60) gravity))\n         (if (no (in s!type 'story 'poll))  1\n             (blank s!url)                  nourl-factor*\n             (lightweight s)                (min lightweight-factor* \n                                                 (contro-factor s))\n                                               (contro-factor s))))\n\n\n本质上，这段 Hacker News采用的排名算法的工作原理看起来大概是这个样子：\n\nScore = (P-1) / (T+2)^G\n\n\n其中，\n\n\nP = 文章获得的票数( -1 是去掉文章提交人的票)\nT = 从文章提交至今的时间(小时)\nG = 比重，news.arc里缺省值是1.8\n\n正如你看到的，这个算法很容易实现。在下面的内容里，我们将会看到这个算法是如何工作的。\n\n比重(G)和时间(T)对排名的影响\n\n比重和时间在文章的排名得分上有重大的影响。正常情况下如下面所述：\n\n\n当T增加时文章得分会下降，这就是说越老的文章分数会越底。\n当比重加大时，老的文章的得分会减的更快\n\n为了能视觉呈现这个算法，我们可以把它绘制到Wolfram Alpha。\n\n得分随着时间是如何变化的\n\n\n\n你可以看到，随着时间的流逝，得分骤然下降，例如，24小时前的文章的分数变的非常低——不管它获得了如何多的票数。\n\nPlot语句:\n\n    plot(\n        (30 - 1) / (t + 2)^1.8, \n        (60 - 1) / (t + 2)^1.8,\n        (200 - 1) / (t + 2)^1.8\n    ) where t=0..24\n\n\n比重参数是如何影响排名的\n\n\n\n图中你可以看到，比重越大，得分下降的越快。\n\nPlot语句:\n\n    plot(\n        (p - 1) / (t + 2)^1.8, \n        (p - 1) / (t + 2)^0.5,\n        (p - 1) / (t + 2)^2.0\n    ) where t=0..24, p=10\n\n\nPython语言实现\n\n之前已经说了，这个评分算法很容易实现：\n\ndef calculate_score(votes, item_hour_age, gravity=1.8):\n    return (votes - 1) / pow((item_hour_age+2), gravity)\n\n\n关键是要理解算法中的各个因素对评分的影响，这样你可以在你的应用中进行定制。我希望这篇文章已经向你说明了这些\n\n更新：  Paul Graham 分享了修正后的HN 排名算法：\n\n(= gravity* 1.8 timebase* 120 front-threshold* 1\n nourl-factor* .4 lightweight-factor* .17 gag-factor* .1)\n\n(def frontpage-rank (s (o scorefn realscore) (o gravity gravity*))\n(* (/ (let base (- (scorefn s) 1)\n        (if (> base 0) (expt base .8) base))\n      (expt (/ (+ (item-age s) timebase*) 60) gravity))\n   (if (no (in s!type 'story 'poll))  .8\n       (blank s!url)                  nourl-factor*\n       (mem 'bury s!keys)             .001\n                                      (* (contro-factor s)\n                                         (if (mem 'gag s!keys)\n                                              gag-factor*\n                                             (lightweight s)\n                                              lightweight-factor*\n                                             1)))))\n\n\n\n原文 How Hacker News ranking algorithm works\n翻译 外刊IT评论\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "7"}