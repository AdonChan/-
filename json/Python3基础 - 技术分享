{"title": "Python3基础 - 技术分享 ", "index": "python", "content": "(一)Python概述\n\n\npython的特点\n   Python是一种面向对象的解释性计算机程序设计语言具有丰富且抢答的内置库和第三方库语法简洁灵活开源，而且夸平台，无论在windows、linux、MAC上均可以使用\n\n\nPython的应用\n   Python的应用非常广泛，在以下领域都有着主流地位的应用数据分析\n\n\n\n（二）开始使用python\n\n\nPython解释器下载\n  使用Python，必须首先安装Python解释器，我们可以从官网下载最新的python解释器。[Python下载地址][1]\n\n\npython解释器安装\n   下载python解释器的exe可执行文件之后，双击执行安装即可，附：[python3.6.5的下载地址][2]\n\n\n\npython的源程序文件\n   python程序均为以py结尾的文本文件，我们可以使用任何文本编辑器编辑生成这个文件，然后运行，\n   但为了专业起见，推荐使用专业的IDE，建议使用pycharm进行编辑\n\n\n\n第一个源程序文件\n    - 我们尝试用pycharm编写一个hello world,代码如下\n\n       ```\n       \n       print(\"Hello World!\")\n       ```\n\n\n\n使用注释\n   使用注释，是编写代码的良好习惯，无论对于自己还是他人日后对代码的维护来讲，都是非常重要的。\n   通过简明扼要的语言，描述代码的实现逻辑和功能，可以使得代码维护的工作变得简单而有效，\n   增强代码的可读性 python中的注释主要分为两种\n\n\n    以#开头的单行注释，例如：     \n\n        # 这是一个关于打印hello world的简单例子\n           print(\"Hello World!\")\n\n    以'''或者\"\"\"括起来的多行注释，例如：\n           '''\n           if-elif是python中条件判断语句，它可以让我们根据条件成立与否来决定执行几个代码块中的哪一个\n           不同于C语言，在python中没有switch-case语句，因此必须要通过if-elif来实现类似switch-case的功能\n           当然，用于也可以通过自己创建用户自己的类，来实现类似switch-case这样的功能\n           '''\n           Subject_a_score=10\n           Subject_b_score=20\n           Subject_c_score=30\n           if Subject_a_score>Subject_b_score:\n               print(\"This is a veru good mark\")\n           elif Subject_b_score>Subject_c_score:\n               print(\"That's a not good point\")\n           else:\n               print(\"A bad grade\")\n\n\n\n\n（三）Python中的变量\n\n\n变量的命名规则\npython中的变量命名规则为：\n   变量名不能与保留字相同\n   变量名可以由字母、数字、下划线组成\n   变量名的第一个字符必须为字母或下划线，不能以数字开头\n   变量名大小写敏感\n\n\n\n强类型与弱类型\n   变量为在程序运行过程中存储数据的寄存栈，通常根据变量在使用之前是否需要声明，可以将语言分\n   为强类型编程语言和弱类型编程语言。\n\n\n强类型编程语言在使用变量之前需要显示定义，然后才能使用。例如C语言，以下为C语言的一段变量定义代码：\n#include <stdio.h>\nmain()\n{\n    /*定义了四个整型变量，a,b,c,sum并赋值*/\n    int a=10,b=11,c=12,sum=0;\n    sum+=++a+(b++)+(++c);\n    printf(\"sum=%d\",sum);\n    \n}\n运行结果为：\nsum=35\n弱类型编程语言在使用变量之前无需定义，可以直接赋值使用。Python为弱类型编程语言，例如：\n#定义了四个变量a,b,c,sum，但是无需显示指定类型即可直接使用\na=10\nb=11\nc=12\nsum=0\nsum+=a+b+c\nprint(\"The result is {:d}\".format(sum))\n上例运行结果为：The result is 33\n\npython变量类型\n   Python中的数据类型主要包括：\n   Numbers(数字)\n       int (有符号整数)\n       float（浮点型）\n       complex（附属）\n  Boolean（布尔类型）\n       True\n       False\nString（字符串）\nTuple（元组）\nList（列表）\nDictionary（字典）\n\npython并没有显示指定变量类型，python系统会自动根据用户输入的值进行判断，并将变量设置为对应的类型，查看变量的类型，可以使用type(变量)。 以下为一段关于变量的代码\n#整型变量\ni1=10\ni2=20\n#字符串变量\ns1='a'\ns2=\"abc\"\n#复数变量\nc1=1+3j\nc2=complex(2.5,9.01)\n#布尔型变量\nboo1=True\nboo2=False\n#浮点型变量\nf1=10.98\nf2=3E-2\n#元组\nt1=(\"abc\",\"def\",\"kiss\")\n#列表\nl1=[10,1+3j,True]\n#字典\nd1={\"key1\":\"justice\",\"key2\":120,\"key3\":3+4j,\"key4\":False}\n\n#打印出变量的值以及对应的类型\nprint(\"i1=%d,%s;i2=%d,%s\"% (i1,type(i1),i2,type(i2)))\nprint(\"s1=%s,%s;s2=%s,%s\"% (s1,type(s1),s2,type(s2)))\nprint(\"c1=%r,%s;c2=%s,%s\"% (c1,type(c1),c2,type(c2)))\nprint(\"boo1=%s,%s;boo2=%s,%s\" % (boo1,type(boo1),boo2,type(boo2)))\nprint(\"f1={0:.3f},{1};f2={2:.3f},{3}\".format(f1,type(f1),f2,type(f2)))\nprint(\"t1=%s,%s\"%(t1,type(t1)))\nprint(\"l1=%s,%s\"%(l1,type(l1)))\nprint(\"d1=%s,%s\" % (d1,type(d1)))\n运行结果为：\ni1=10,<class 'int'>;i2=20,<class 'int'>\ns1=a,<class 'str'>;s2=abc,<class 'str'>\nc1=(1+3j),<class 'complex'>;c2=(2.5+9.01j),<class 'complex'>\nboo1=True,<class 'bool'>;boo2=False,<class 'bool'>\nf1=10.980,<class 'float'>;f2=0.030,<class 'float'>\nt1=('abc', 'def', 'kiss'),<class 'tuple'>\nl1=[10, (1+3j), True],<class 'list'>\nd1={'key1': 'justice', 'key2': 120, 'key3': (3+4j), 'key4': False},<class 'dict'>\n\n更新至---->[python基础][3] \n\n\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "3"}