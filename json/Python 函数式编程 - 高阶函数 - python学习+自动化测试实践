{"title": "Python 函数式编程 - 高阶函数 - python学习+自动化测试实践 ", "index": "函数式编程,python", "content": "\nFunctional Programming，函数式编程。Python对函数式编程提供部分支持。对于纯函数编程，对任一函数，只要输入是确定的，输出就是确定的，可称之为无副作用。\n\n一、高阶函数\n 1、变量指向函数\n我们知道函数的计算结果可以赋值给变量，例如x = abs(-5)。同理，变量也可以指向函数，例如f = abs。如果一个变量指向了一个函数，那我们直接调用abs(x)与执行f(x)返回的结果是完全相同。\n2、函数名也是变量\n我们也可以把函数名看成是一个变量，例如abs()函数。执行语句abs=-5，之后调用abs(-5)就会报错，因为此时abs这个变量已经不指向绝对值函数了，而是指向一个整数-5。\n3、函数作为形参\n既然变量可以指向函数，函数也可以充当变量，那么一个函数就可以接收另外一个函数作为它自己的形式参数，即实现高阶函数。例如：\n>>> def add(x , y ,  f ): # 把函数作为参数传入。\n...     return f(x) + f(y)\n>>> add (-5,-2,abs)\n7\n二、函数式编程的内建函数\n1、map(func,seq)\n\n\n语法：map(func,seq)，接收两个参数，一个是函数func，一个是可迭代对象。\n\n作用：将传入的func函数循环作用于seq序列的每个元素上，并返回新的可迭代对象。\n\n注意：map()函数返回的是一个<map object>，我们可以使用list()函数将所获得的结果以list形式返回。\n\n举个栗子：用map()实现f(x)=x*x\n>>> def f(x):\n...     return x*x\n...\n>>> map(f,[1,2,3,4,5])\n<map object at 0x0327F670>\n>>> list(map(f,[1,2,3,4,5]))     # 传入的函数f作用于序列的每个元素调并用list()\n[1, 4, 9, 16, 25]\n当然还可以使用其他方法实现：exp1：list( map((lambda x:x*x),[1,2,3,4,5]))exp2：[x*x for x in [1,2,3,4,5]]\n2、reduce(func,list)\n\n\n语法：reduce(func,list)，必须接受两个参数。\n\n作用：把func函数作用在list序列上[x1,x2,x3,...]。取出序列的头两个元素x1和x2，作用于func，取的一个单一的值，例如a，再将a与序列的下一个元素x3做func运算，依此反复。其效果就相当于reduce(f,x1,x2,x3)=f(f(x1,x2),x3)\n\n\n注意：使用reduce()，必须导入模块from functools import reduce\n\n\n大家可以自己找个栗子玩玩哈~~~\n3、filter()\n\n\n语法：filter(func,[序列])，接收一个“过滤”函数，和一个序列。返回的是一个Iterator可迭代对象。\n\n作用：按照func规则过滤序列，filter()把传入的函数func依此作用于每个元素，然后根据返回值TrueorFalse，来保留为True的对应元素。\n\n注意：跟map()类似，filter()返回的是一个可迭代对象，故需要使用list()来查看所获得结果并返回list类型。\n\n举个栗子：在一个list中，删除偶数，保留奇数。\n>>> def is_odd(n):\n...     return n % 2 == 1  # 返回0(false) 或1(True)\n...\n>>> list( filter(is_odd,[1,2,3,4,5,6,7,8,9]) )\n[1, 3, 5, 7, 9]\n\n恩，写到这吧，给自己一个任务，明天写“闭包”部分。\n\n❤ thanks for watching, keep on updating...\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "0"}