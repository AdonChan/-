{"title": "数据库集群主从架构查询功能设计 - 数据之旅 ", "index": "django,python,集群,数据库", "content": "按照任意一个IP或者域名查找该数据库实例所在集群架构、是否是主库或者从库，是DBA运维中非常常见和必不可少的功能。本文描述的功能实现已经实际应用于某互联网公司内部，目前运行稳定，持续提供服务。这里和大家分享实现方式，和大家一起学习。\n1. 前提条件        为了能够统一查找所有集群架构，这些机器需要有一个统一的能够访问所有机器的账号和密码，这里使用db_admin；另外做主从同步的时候，需要使用统一的账号和密码，这里使用repl。        作为示例，这里使用如下的集群结构：        这里A、B、C是主库的从库，是一级从库，D、E是从库C的从库，是二级从库，如果实际有其他更复杂的结构，以此类推即可。\n2. 搜索查找        平时查找，任意给一个IP或者域名进行查找，由于集群中是无法标示域名的，因此需要将域名转化为IP进行查找。按照任意IP查找，不会知道它在集群所处的位置，为了得到整个集群的结构需要先回溯到整个集群的主库。\n3. 回溯主库       回溯主库使用db_admin账号登录MySQL执行\"SHOW SLAVE STATUS\"命令，查找当前库的主库信息进行整理。针对之前的集群结构常见的回溯类型如下图的三种：\n\n\n最终要获得的都是主库实例，python的实现代码如下：\n# curr_node 当前搜索节点\n# lisense 统一访问的账号，密码\n# sub_node 子节点\ndef traceback_root(curr_node, lisense, sub_node):\n    query_process = 'SHOW SLAVE STATUS'\n    master_row = None\n    conn = None\n    try:\n        # 连接当前数据库，查找主库信息\n        conn = get_connection(\n            curr_node.get('ip'), curr_node.get('port'),\n            lisense.get('account'), lisense.get('passwd'))\n        with open_cursor(conn) as cursor:\n            cursor.execute(query_process)\n            master_row = cursor.fetchone()\n\n    except Exception as e:\n        return None\n\n    if master_row:\n        return curr_node\n    # 读取主库信息\n    io_run = master_row.get('Slave_IO_Running', '')\n    sql_run = master_row.get('Slave_SQL_Running', '')\n    master_ip = master_row.get('Master_Host', '')\n    master_port = master_row.get('Master_Port', '')\n\n    # 检查主库状态，状态不对返回当前节点\n    if io_run.lower() == 'yes' and sql_run.lower() == 'yes':\n        may_master_node = dict()\n        may_master_node['ip'] = master_ip\n        may_master_node['port'] = master_port\n\n        # 检查父节点实例信息是否和子节点一样，\n        # 用来避免双主库回溯陷入无线循环的情况\n        if sub_node and sub_node.get('ip', '') == master_ip  and\\\n                sub_node.get('port', '') == master_port:\n            return None\n\n        # 由于考虑了双主的情况，当前库的父节点只是可能主库，\n        # 使用父节点继续回溯主库实例\n        master_node = traceback_root(\n            may_master_node, lisense, curr_node)\n        \n        # 如果回溯到主库，返回；否则返回当前节点\n        if master_node:\n            return master_node\n        else:\n            return curr_node\n\n    else:\n            return curr_node\n\n4. 遍历从库       找到主库之后，从主库开始，查找主库下的所有从库。查找从库使用db_admin登录MySQL执行\"SHOW PROCESSLIST\"命令，然后从结果里，按照User是否是repl进行筛选，对于用户是repl的从库，连接上去使用回溯主库使用的查看主库的方法，验证从库的主库是否是当前查询的数据库实例，是的话，加入集群；否则放弃。对于查找出来的从库，继续使用上述方式查找从库，知道找到所有从库。\n5. 返回集群结构       查找出来的集群结构，按照json格式组织，可以返回给需要的服务，也可以整理之后显示在页面，下图是对查找出来的整个集群结构的简单显示：\n6. 结束语       整个查询的大致过程如此，这里没有说太多的编码细节。在实际使用的过程中，可以根据需要自行进行调整，如添加多线程提高查询速度等。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "3"}