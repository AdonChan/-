{"title": "Python每日一练0018 - python每日练习 ", "index": "python3.x,python", "content": "问题\n你需要对浮点数执行精确的计算操作，并且不希望有任何小误差的出现。\nPython的float类型是存在误差的\n>>> a = 1.1\n>>> b = 2.2\n>>> a + b == 3.3\nFalse\n>>> a + b\n3.3000000000000003\n解决方案\n使用decimal模块，但要注意参数需要是字符串\n然后其他操作（加法、比较等等）和内置的float类型一样即可\n>>> from decimal import Decimal\n>>> a = Decimal('1.1')\n>>> b = Decimal('2.2')\n>>> a + b == Decimal('3.3')\nTrue\n>>> a + b\nDecimal('3.3')\n讨论\n如果我们的计算对误差要求极高，例如涉及到金融领域的代码，那么可以使用decimal模块\ndecimal模块非常强大，上面的用法只是冰山一角\n例如我们还可以使用decimal来设置保留小数点后几位\n要想设置小数点精度，需要先了解decimal模块的上下文，decimal模块维护了一个上下文对象，存储着关于精度、信号处理等等操作，可以通过getcontext得到这个上下文对象\n>>> import decimal\n>>> decimal.getcontext()\nContext(prec=28, rounding=ROUND_HALF_EVEN, Emin=-999999, Emax=999999, capitals=1, clamp=0, flags=[], traps=[InvalidOperation, DivisionByZero, Overflow])\n其中prec就是小数点精度，我们可以直接对它进行修改看下效果\n>>> import decimal\n>>> a = decimal.Decimal('1')\n>>> b = decimal.Decimal('3')\n>>> a / b\nDecimal('0.3333333333333333333333333333')\n>>> decimal.getcontext().prec = 3\n>>> a / b\nDecimal('0.333')\n这个时候有一个问题是，以后的小数点精度都是3了，会影响到其他不想保存3位精度的计算。\n实际上decimal模块还提供了一个localcontext函数，我们用with把它包裹起来，就创建了一个临时的上下文环境\nimport decimal\ndecimal.getcontext()\na = decimal.Decimal('1')\nb = decimal.Decimal('3')\nprint(a / b)\nwith decimal.localcontext() as ctx:\n    ctx.prec = 3\n    print(a / b)\nprint(a / b)\n这里在with前的小数点精度为默认的28，with块里的临时精度为3，with块后精度又回到外面的28，所以输出为\nDecimal('0.3333333333333333333333333333')\nDecimal('0.333')\nDecimal('0.3333333333333333333333333333')\n来源\nPython Cookbook\n关注\n欢迎关注我的微信公众号：python每日一练\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}