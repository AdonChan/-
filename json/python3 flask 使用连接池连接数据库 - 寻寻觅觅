{"title": "python3 flask 使用连接池连接数据库 - 寻寻觅觅 ", "index": "python,flask,sqlalchemy", "content": "在真实的线上环境连接数据库一般都是要使用连接池的，连接池统一管理数据库连接，可以提高应用性能。python数据库连接池可以使用dbutils和PySQLPool但是这两个库似乎都只支持python2不支持python3，最后折腾了半天，Python3最后我使用的是sqlalchmey里的连接池工具sqlalchemy.pool，把连接池应用到flask，我使用的是下面的方式，个人认为比较合理\nfrom flask import Flask, _app_ctx_stack, current_app\nimport MySQLdb\nimport sqlalchemy.pool as pool\n\napp = Flask(__name__)\napp.config.from_pyfile('config.py')\n\n\n@app.teardown_appcontext\ndef close_database_connection(error=None):\n    con = getattr(_app_ctx_stack, 'database', None)\n    if con:\n        con.close()\n\n\ndef getconn(db_conf=None):\n    if db_conf is None:\n        db_conf = current_app.config['DB_CONFIG']\n    conn = MySQLdb.connect(**db_conf)\n    return conn\n\nmypool = pool.QueuePool(getconn, max_overflow=10, pool_size=5)\napp.db_pool = mypool\n\n\ndef get_db():\n    ctx = _app_ctx_stack.top\n    con = getattr(ctx, 'database', None)\n    if con is None:\n        con = current_app.db_pool.connect()\n        ctx.database = con\n    return con\n\n\n@app.route('/')\ndef index():\n    con = get_db()\n    cursor = con.cursor(cursorclass=MySQLdb.cursors.DictCursor)\n    rv = cursor.execute('select 1')\n    return str(rv)\n\n\nif __name__ == \"__main__\":\n    app.run(host='0.0.0.0', debug=True, port=5001)\n\n\n\n因为sqlalchemy里有连接池模块，直接使用下面的方式在需要的地方导入db我猜测也是连接池的管理方式，未测试\nfrom flask_sqlalchemy import SQLAlchemy\ndb = SQLAlchemy()\ndb.init_app(app)\n....\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "3"}