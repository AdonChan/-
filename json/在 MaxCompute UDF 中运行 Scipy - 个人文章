{"title": "在 MaxCompute UDF 中运行 Scipy - 个人文章 ", "index": "python", "content": "摘要： 新版 MaxCompute Isolation Session 支持 Python UDF。也就是说，Python UDF 中已经可以跑二进制包。刚才以 Scipy 为例踩了一下坑，把相关的过程分享出来。\n新版 MaxCompute Isolation Session 支持 Python UDF。也就是说，Python UDF 中已经可以跑二进制包。刚才以 Scipy 为例踩了一下坑，把相关的过程分享出来。\n下载 Scipy 包并上传资源首先，从 PyPI 或其他镜像下载 Scipy 包。你需要下载后缀为“cp27-cp27m-manylinux1_x86_64.whl”的包，其他的包会无法加载，包括名为“cp27-cp27mu”的包。以下的截图来自 https://pypi.python.org/pypi/... ，仅有打勾的包可以直接使用：\n\n下载 whl 后，将文件名更改为 scipy.zip。此后，在 MaxCompute Console 中执行\nadd archive scipy.zip;此后，scipy.zip 即被创建为 MaxCompute Archive 资源。不建议使用其他类型的资源，因为在执行时，MaxCompute 会自动解压 Archive 类型的资源，从而省去手动解压的步骤。\n从非 Whl 包生成 Whl 包如果列出的包中包含 Whl，则可以直接上传并跳过此步骤。如果列出的包不包含 whl（如手中仅有图中的 scipy-0.19.0.zip），需要在 Linux 环境中手动编译并打包为 whl。打包前，需要确保下列命令返回“cp27m”而不是“cp27mu”：\npython -c \"import pip; print pip.pep425tags.get_abi_tag()\"\n\n如果返回值为“cp27mu”，你需要使用 “--enable-unicode=no\" 选项编译一个可用的 Python 2.7，再使用编译得到的 Python。如果返回值正确，通常可以在该环境下使用\npython setup.py bdist_wheel\n\n完成，具体请参考各个包的编译/安装说明。\n打包完成后，将生成的 whl 包上传。\n编写和创建 UDF我们需要编写一个 UDF 支持计算 psi。编写下列代码：\nfrom odps.udf import annotate\nfrom odps.distcache import get_cache_archive\n\ndef include_package_path(res_name):\n    import os, sys\n    archive_files = get_cache_archive(res_name)\n    dir_names = sorted([os.path.dirname(os.path.normpath(f.name)) for f in archive_files\n                       if '.dist_info' not in f.name], key=lambda v: len(v))\n    sys.path.append(os.path.dirname(dir_names[0]))\n\n@annotate(\"double->double\")\nclass MyPsi(object):\n    def __init__(self):        \n        include_package_path('scipy.zip')\n\n    def evaluate(self, arg0):\n        from scipy.special import psi\n        return float(psi(arg0))\n\n这里有必要解释一下 include_package_path 这个函数。get_cache_archive 返回一个包含包中所有文件的文件对象。我们首先取出所有的文件名，此后获得最短的路径作为包的路径，并加入 sys.path。此后，便可以正常 import scipy 这个包。\n需要注意的是，因为 MaxCompute 会在执行前通过原有的沙箱检查 UDF 的输入/输出，因而 include_package_path 和 import 在函数外调用会报错。\n编写完成后，将代码保存为 my_psi.py，并在 MaxCompute Console 中执行\nadd py my_psi.py;\n\n此后创建函数。在 MaxCompute Console 中输入\ncreate function my_psi as my_psi.MyPsi using my_psi.py,scipy.zip;注意在 create function 时，不要忘记加上刚才上传的包，例如上面的 scipy.zip。\n执行创建 UDF 后，便可以在 MaxCompute Console 中执行查询（暂不支持 pypy，因而需禁用 pypy）：\nset odps.pypy.enabled=false;\nset odps.isolation.session.enable = true;\nselect my_psi(sepal_length) from iris;\n\n其他如果包依赖了其他 Python 包，需要一并上传并同时加入到 UDF 依赖中。\n使用 0.7.4 以上的 PyODPS DataFrame 可以简化使用二进制包的 UDF 的编写，无需手动调用 include_package_path，具体可见 http://pyodps.readthedocs.io/... 。原文链接\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}