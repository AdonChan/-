{"title": "python实现mapreduce模式的例子 - 寻寻觅觅 ", "index": "python", "content": "MapReduce是一种从函数式编程语言借鉴过来的模式，在某些场景下，它可以极大地简化代码。先看一下什么是MapReduce：\nMapReduce是Google提出的一个软件架构，用于大规模数据集（大于1TB）的并行运算。概念“Map（映射）”和“Reduce（归纳）”，及他们的主要思想，都是从函数式编程语言借来的，还有从矢量编程语言借来的特性。当前的软件实现是指定一个Map（映射）函数，用来把一组键值对映射成一组新的键值对，指定并发的Reduce（归纳）函数，用来保证所有映射的键值对中的每一个共享相同的键组。简单来说，MapReduce就是把待处理的问题分解为Map和Reduce两个部分。而待处理的数据作为一个序列，每一个序列里的数据通过Map的函数进行运算，再通过Reduce的函数进行聚合成最终的结果。\n下面使用mapreduce模式实现了一个简单的统计日志中单词出现次数的程序:\nfrom functools import reduce\nfrom multiprocessing import Pool\nfrom collections import Counter\n\ndef read_inputs(file):\n    for line in file:\n        line = line.strip()\n        yield line.split()\n\ndef count(file_name):\n    file = open(file_name)\n    lines = read_inputs(file)\n    c = Counter()\n    for words in lines:\n        for word in words:\n            c[word] += 1\n    return c\n\ndef do_task():\n    job_list = ['log.txt'] * 10000\n    pool = Pool(8)\n    return reduce(lambda x, y: x+y, pool.map(count, job_list))\n\nif __name__ == \"__main__\":\n    rv = do_task()\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "4"}