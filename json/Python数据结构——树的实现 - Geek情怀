{"title": "Python数据结构——树的实现 - Geek情怀 ", "index": "树形结构,数据结构与算法,python", "content": "“嵌套列表”表示树\n在用嵌套列表表示树时，我们使用 Python 的列表来编写这些函数。虽然把界面写成列表的一系列方法与我们已实现其他的抽象数据类型有些不同，但这样做比较有意思，因为它为我们提供一个简单、可以直接查看的递归数据结构。在列表实现树时，我们将存储根节点作为列表的第一个元素的值。列表的第二个元素的本身是一个表示左子树的列表。这个列表的第三个元素表示在右子树的另一个列表。为了说明这个存储结构，让我们来看一个例子。图 1 展示出一个简单的树以及相应的列表实现。\n\n图 1: 简单树\nmyTree = ['a',   #root\n      ['b',  #left subtree\n       ['d' [], []],\n       ['e' [], []] ],\n      ['c',  #right subtree\n       ['f' [], []],\n       [] ]\n     ]\n\n请注意，我们可以使用索引来访问列表的子树。树的根是myTree[0]，根的左子树是myTree[1]，和右子树是myTree[2]。下面的代码说明了如何用列表创建简单树。一旦树被构建，我们可以访问根和左、右子树。嵌套列表法一个非常好的特性就是子树的结构与树相同，本身是递归的。子树具有根节点和两个表示叶节点的空列表。列表的另一个优点是它容易扩展到多叉树。在树不仅仅是一个二叉树的情况下，另一个子树只是另一个列表。\nmyTree = ['a', ['b', ['d',[],[]], ['e',[],[]] ], ['c', ['f',[],[]], []] ]\nprint(myTree)\nprint('left subtree = ', myTree[1])\nprint('root = ', myTree[0])\nprint('right subtree = ', myTree[2])\n\n让我们定义一些函数，使我们很容易像使用列表一样操作树。请注意，我们不会去定义一个二叉树类。我们将编写的函数将只是操作列表使之类似于树。\ndef BinaryTree(r):\n    return [r, [], []]\n\n该二叉树只是构建一个根节点和两个空子节点的列表。左子树添加到树的根，我们需要插入一个新的列表到根列表的第二个位置。我们必须注意，如果列表中已经有值在第二个位置，我们需要跟踪它，将新节点插入树中作为其直接的左子节点。Listing 1 显示了插入左子节点。\nListing 1\ndef insertLeft(root,newBranch):\n    t = root.pop(1)\n    if len(t) > 1:\n        root.insert(1,[newBranch,t,[]])\n    else:\n        root.insert(1,[newBranch, [], []])\n    return root\n\n请注意，插入一个左子节点，我们首先获取对应于当前左子节点的列表（可能是空的）。然后，我们添加新的左子节点，将原来的左子节点作为新节点的左子节点。这使我们能够将新节点插入到树中的任何位置。对于insertRight的代码类似于insertLeft，如Listing 2 中。 \nListing 2\ndef insertRight(root,newBranch):\n    t = root.pop(2)\n    if len(t) > 1:\n        root.insert(2,[newBranch,[],t])\n    else:\n        root.insert(2,[newBranch,[],[]])\n    return root\n\n为了完善树的实现（参见Listing3），让我们写几个用于获取和设置根值的函数，以及获得左边或右边子树的函数。 \nListing 3\ndef getRootVal(root):\n    return root[0]\n\ndef setRootVal(root,newVal):\n    root[0] = newVal\n\ndef getLeftChild(root):\n    return root[1]\n\ndef getRightChild(root):\n    return root[2]\n\n以下是完整的嵌套列表表示树的代码\ndef BinaryTree(r):\n    return [r, [], []]\n\ndef insertLeft(root,newBranch):\n    t = root.pop(1)\n    if len(t) > 1:\n        root.insert(1,[newBranch,t,[]])\n    else:\n        root.insert(1,[newBranch, [], []])\n    return root\n\ndef insertRight(root,newBranch):\n    t = root.pop(2)\n    if len(t) > 1:\n        root.insert(2,[newBranch,[],t])\n    else:\n        root.insert(2,[newBranch,[],[]])\n    return root\n\ndef getRootVal(root):\n    return root[0]\n\ndef setRootVal(root,newVal):\n    root[0] = newVal\n\ndef getLeftChild(root):\n    return root[1]\n\ndef getRightChild(root):\n    return root[2]\n\nr = BinaryTree(3)\ninsertLeft(r,4)\ninsertLeft(r,5)\ninsertRight(r,6)\ninsertRight(r,7)\nl = getLeftChild(r)\nprint(l)\n\nsetRootVal(l,9)\nprint(r)\ninsertLeft(l,11)\nprint(r)\nprint(getRightChild(getRightChild(r)))\n\n节点和引用\n我们第二种表示树的方式——节点和引用。在这种情况下，我们将定义具有根，以及左右子树属性的类。由于这种表示更紧密地结合了面向对象的方式，我们将继续使用这种表示完成本章的其余部分。 \n使用节点和引用，我们认为该树的结构类似于图 2 所示。 \n\n图 2：使用节点和引用表示简单树\n我们将开始用简单的节点和引用的类定义如Listing 4 所示。重要的是要记住这种表示的是左右子树引用的是其他二叉树的实例。例如，当我们插入一个新的左子节点到树上时，我们创建了二叉树的另一个实例，修改了根节点的self leftChild使之指向新的树。\nListing 4\nclass BinaryTree:\n    def __init__(self,rootObj):\n        self.key = rootObj\n        self.leftChild = None\n        self.rightChild = None\n\n注意Listing 4 中，构造函数需要得到一些类型的对象存储在根中。就像你可以在列表中存储你喜欢的任何一种类型，树的根对象可以指向任何一种类型。对于我们之前的例子中，我们将存储节点设为根值的名称。使用节点和引用来表示图 2 中的树，我们将创建二叉树类的 6 个实例。 \n接下来让我们看一下我们需要构建的根节点以外的函数。为了添加左子节点，我们将创建一个新的二叉树，并设置根的左属性以指向这个新对象。insertLeft的代码Listing 5 所示。 \nListing 5\ndef insertLeft(self,newNode):\n    if self.leftChild == None:\n        self.leftChild = BinaryTree(newNode)\n    else:\n        t = BinaryTree(newNode)\n        t.leftChild = self.leftChild\n        self.leftChild = t\n\n我们必须考虑两种情况进行插入。第一种情况是，没有左子节点。当没有左子节点时，将新节点添加即可。第二种情况的特征是，当前存在左子节点。在第二种情况下，我们插入一个节点并将之前的子节点降一级。第二种情况是由else语句在Listing 5的第 4 行进行处理。 \n对于insertRight的代码必须考虑一个对称的情况。要么没有右子节点，要么我们必须插入根和现有的右子节点之间。插入代码Listing 6 所示。 \nListing 6\ndef insertRight(self,newNode):\n    if self.rightChild == None:\n        self.rightChild = BinaryTree(newNode)\n    else:\n        t = BinaryTree(newNode)\n        t.rightChild = self.rightChild\n        self.rightChild = t\n\n为了完成一个简单的二叉树数据结构的定义，我们写出访问（参见Listing 7）左右子节点和根值的方法。 \nListing 7\ndef getRightChild(self):\n    return self.rightChild\n\ndef getLeftChild(self):\n    return self.leftChild\n\ndef setRootVal(self,obj):\n    self.key = obj\n\ndef getRootVal(self):\n    return self.key\n\n既然我们已经有了所有创建和操作二叉树的方法，让我们再进一步检查它的结构。让我们把每一个节点比作一个简单的树的根，并添加节点 B 和 C 作为子节点。 下面的代码就是创建树，并存储一些键值，为左右子节点赋值。注意，左右子节点和根都是同一个二叉树类的不同对象。正如我们之前树的定义中说的，我们能够把一个二叉树的任何子节点当成二叉树来做处理。\nclass BinaryTree:\n    def __init__(self,rootObj):\n        self.key = rootObj\n        self.leftChild = None\n        self.rightChild = None\n\n    def insertLeft(self,newNode):\n        if self.leftChild == None:\n            self.leftChild = BinaryTree(newNode)\n        else:\n            t = BinaryTree(newNode)\n            t.leftChild = self.leftChild\n            self.leftChild = t\n\n    def insertRight(self,newNode):\n        if self.rightChild == None:\n            self.rightChild = BinaryTree(newNode)\n        else:\n            t = BinaryTree(newNode)\n            t.rightChild = self.rightChild\n            self.rightChild = t\n\n    def getRightChild(self):\n        return self.rightChild\n\n    def getLeftChild(self):\n        return self.leftChild\n\n    def setRootVal(self,obj):\n        self.key = obj\n\n    def getRootVal(self):\n        return self.key\n\n\nr = BinaryTree('a')\nprint(r.getRootVal())\nprint(r.getLeftChild())\nr.insertLeft('b')\nprint(r.getLeftChild())\nprint(r.getLeftChild().getRootVal())\nr.insertRight('c')\nprint(r.getRightChild())\nprint(r.getRightChild().getRootVal())\nr.getRightChild().setRootVal('hello')\nprint(r.getRightChild().getRootVal())\n\n\n                ", "mainLikeNum": ["6 "], "mainBookmarkNum": "44"}