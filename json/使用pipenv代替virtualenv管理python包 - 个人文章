{"title": "使用pipenv代替virtualenv管理python包 - 个人文章 ", "index": "python", "content": "前言\n第一次接触到 pipenv 是因为看到@董明伟大神的《使用pipenv管理你的项目》，之前可能和大家的选择类似使用 virtualenv 或者 pyenv 来管理 python 的包环境。virtualenv 是针对python的包的多版本管理，通过将python包安装到一个模块来作为python的包虚拟环境，通过切换目录来实现不同包环境间的切换。pyenv 是针对 python 版本的管理，通过修改环境变量的方式实现；虽然我自己对pipenv的掌握程度还不深，但是我自己能感受到更加简单而清晰的python包管理方式，并且pipenv还是Python官方正式推荐的python包管理工具。原文如下：\nPipenv — the officially recommended Python packaging tool from Python.org, free (as in freedom).\nPipenv 官方推荐的 Python 包管理工具\n更新历史\n2017年04月25日 - 初稿\n阅读原文 - https://wsgzao.github.io/post...\n扩展阅读\nPipenv - https://docs.pipenv.org/Pipenv & 虚拟环境 - http://pythonguidecn.readthed...\n\n推荐阅读\n使用pipenv管理你的项目 @董伟明http://www.dongwm.com/archive...\n【 python 基础系列 】 - pipenv 试用过程分享http://pylixm.cc/posts/2018-0...\nPipenv 官方简介\nPipenv: Python Development Workflow for Humans\nPipenv — the officially recommended Python packaging tool from Python.org, free (as in freedom).\nPipenv is a tool that aims to bring the best of all packaging worlds (bundler, composer, npm, cargo, yarn, etc.) to the Python world. Windows is a first–class citizen, in our world.\nIt automatically creates and manages a virtualenv for your projects, as well as adds/removes packages from your Pipfile as you install/uninstall packages. It also generates the ever–important Pipfile.lock, which is used to produce deterministic builds.\n\nThe problems that Pipenv seeks to solve are multi-faceted:\nYou no longer need to use pip and virtualenv separately. They work together.Managing a requirements.txt file can be problematic, so Pipenv uses the upcoming Pipfile and Pipfile.lock instead, which is superior for basic use cases.Hashes are used everywhere, always. Security. Automatically expose security vulnerabilities.Give you insight into your dependency graph (e.g. $ pipenv graph).Streamline development workflow by loading .env files.\nPipenv 安装和使用\n我的使用深度不高，就以目前我实际使用pipenv的方式为例\n# pip 离线下载\n# pip install --download DIR -r requirements.txt\nmkdir pipenv\npip install -d ~/pipenv/ pipenv\n\n# pip 离线安装pipenv\npip install --no-index --find-links=pipenv/ pipenv\n\n# 使用pipenv创建虚拟环境\nmkdir win_ansible\ncd win_ansible\npipenv shell\npip install --no-index --find-links=pip-ansible-2.4.3.0/ -r requirements.txt\n\n# 升级ansible版本\npip install --no-index --find-links=pip-ansible-2.5.0/ -r requirements.txt -U\n\n# 退出虚拟环境\nexit\n\n# 对不同开发用户自动创建python虚拟环境\nvim ~/.bash_profile\npipenv shell\n\n# 虚拟环境会在当前用户家目录自动创建\ntest101@JQ/root#su - wangao\nSpawning environment shell (/bin/bash). Use 'exit' to leave.\ntest101@JQ/home/wangao$. /home/wangao/.local/share/virtualenvs/wangao-iOSX51hl/bin/activate\n\n# 沿用pip创建requirements.txt，该方法相对Pipfile来说不是最佳\n(wangao-iOSX51hl) test101@JQ/home/wangao/git/ansible$cat requirements.txt \n--index-url=http://172.31.96.201:8081/simple/\n--trusted-host=172.31.96.201\nansible\nansible-cmdb\npywinrm\n\n# 通过gitlab同步控制python包环境\ngit checkout develop\ngit pull origin develop\npip install -r requirements.txt -U\n\n推荐参考的文章\nPython 2.6 升级至 Python 2.7 的实践心得 - https://wsgzao.github.io/post...使用pypiserver快速搭建内网离线pypi仓库实践 - https://wsgzao.github.io/post...RHEL7/CentOS7在线和离线安装GitLab配置使用实践 - https://wsgzao.github.io/post...\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}