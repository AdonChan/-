{"title": "elasticsearch-python-sdk - mugbya ", "index": "python,elasticsearch", "content": "前言\n这里声明： elasticsearch -> es\n漫谈\n我们都知道Python 下 有es的sdk包的，我们也知道java 下有封装更好的es包。为什么说python 下的就封装不好呢? 其实这个也两说，有人就喜欢这样呢\nPython下的es包首先什么都能做，实现功能完全没问题。但是对于 DSL 的话，Python下的es就没有封装了，完全按照es的语法写查询语句。当然这种也是优点，但是如果用了Java下的es 的sdk的话，你会会发现对于DSL 都封装的很好。\n至于封不封装DSL，其实也看业务复不复杂，简单的业务，几行的DSL 直接写也没什么，但是如果很长的呢，比如我这样业务的DSL：\n{\n    \"size\": 1000,\n    \"query\": {\n        \"bool\": {\n            \"must\": [\n                {\n                    \"term\": {\n                        \"prod_code\": {\n                            \"value\": \"JDB\"\n                        }\n                    }\n                },\n                {\n                    \"bool\": {\n                        \"must\": [],\n                        \"must_not\": [],\n                        \"should\": [\n                            {\n                                \"bool\": {\n                                    \"must\": [],\n                                    \"must_not\": [],\n                                    \"should\": [\n                                        {\n                                            \"query_string\": {\n                                                \"default_field\": \"rp_content\",\n                                                \"query\": \"*下了*\"\n                                            }\n                                        },\n                                        {\n                                            \"query_string\": {\n                                                \"default_field\": \"rp_content\",\n                                                \"query\": \"*下款*\"\n                                            }\n                                        }\n                                    ],\n                                    \"filter\": []\n                                }\n                            },\n                            {\n                                \"nested\": {\n                                    \"path\": \"rp_data\",\n                                    \"query\": {\n                                        \"bool\": {\n                                            \"must\": [],\n                                            \"must_not\": [],\n                                            \"should\": [\n                                                {\n                                                    \"query_string\": {\n                                                        \"default_field\": \"rp_data.rp_content\",\n                                                        \"query\": \"*下了*\"\n                                                    }\n                                                },\n                                                {\n                                                    \"query_string\": {\n                                                        \"default_field\": \"rp_data.rp_content\",\n                                                        \"query\": \"*下款*\"\n                                                    }\n                                                }\n                                            ],\n                                            \"filter\": []\n                                        }\n                                    }\n                                }\n                            }\n                        ],\n                        \"filter\": []\n                    }\n                }\n            ]\n        }\n    }\n}\n\n如果是这样的DSL 直接写在代码中，这个也太长了吧，而且这还不是全部，只是一部分，对于这种动态而且复杂的DSL，直接写，会显得太长。\n故此，我对Python 下的es包进行了增强 —— 对DSL进行封装。项目请点击：# elasticsearch-python\n对于上面DSL 的封装调用结果是这样的：\n\n    prod_code = 'JDB'\n    key = \"下了\"\n    value = '下了 | 下款'\n    bq = bool_query()\n    bq.must(term_query('prod_code', prod_code)) \\\n        .must(bool_query()\n              .should(multi_query_string('rp_content', value))\n              .should(nested_query('rp_data', multi_query_string('rp_data.rp_content', value)))\n              )\n\n    print(bq)\n    print(QueryBuilders(bq).size(1000))\n这下清爽了很多是吧！\n当然这个没写完，对于聚合还没写，而且query也没全部支持，只是把自己用到的给简单封装了下，其实不知道到底有没有人用，没人用自己写再多也就自己玩玩了。这里我的实现也很简单，其实希望有人能有更好的实现。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}