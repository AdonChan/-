{"title": "Python socket编程 - 人生苦短 ", "index": "python", "content": "Python 提供了两个基本的 socket 模块\n\nSocket，它提供了标准的 BSD Sockets API。\nSocketServer，它提供了服务器中心类，可以简化网络服务器的开发。\n\nSocket 类型\n套接字格式：socket(family,type[,protocal]) 使用给定的地址族、套接字类型、协议编号（默认为0）来创建套接字。\nSocket 函数\n注意点:\n\nTCP发送数据时，已建立好TCP连接，所以不需要指定地址。UDP是面向无连接，每次发送要指定是发给谁。\n服务端与客户端不能直接发送列表，元组，字典。需要字符串化repr(data)。\n\n\n\n\nSocekt编程思路\nTCP服务端：\n创建套接字，绑定套接字到本地IP与端口\nsocket.socket(socket.AF_INET,socket.SOCK_STREAM)，s.bind()\n开始监听连接\ns.listen()\n进入循环，不断接受客户端的连接请求\ns.accept()\n然后接收传来的数据，并发送给对方数据\ns.recv() , s.sendall()\n传输完毕后，关闭套接字\ns.close()\nTCP客户端:\n创建套接字，连接远端地址\nsocket.socket(socket.AF_INET,socket.SOCK_STREAM)，s.connect()\n连接后发送数据和接收数据\ns.sendall(), s.recv()\n传输完毕后，关闭套接字\ns.close()\n服务端实例代码\n#!/usr/bin/python\nimport socket   # socket模块\nimport commands   # 执行系统命令模块\nHOST = '192.168.4.37'\nPORT = 50007\ns = socket.socket(socket.AF_INET,socket.SOCK_STREAM)   # 定义socket类型，网络通信，TCP\ns.bind((HOST,PORT))   # 套接字绑定的IP与端口\ns.listen(1)         # 开始TCP监听\nwhile 1:\n    conn,addr=s.accept()   # 接受TCP连接，并返回新的套接字与IP地址\n    print'Connected by',addr    # 输出客户端的IP地址\n    while 1:\n        data=conn.recv(1024)    # 把接收的数据实例化\n        cmd_status,cmd_result = commands.getstatusoutput(data)   # commands.getstatusoutput执行系统命令（即shell命令），返回两个结果，第一个是状态，成功则为0，第二个是执行成功或失败的输出信息\n        if len(cmd_result.strip()) ==0:   # 如果输出结果长度为0，则告诉客户端完成。此用法针对于创建文件或目录，创建成功不会有输出信息\n            conn.sendall('Done.')\n        else:\n            conn.sendall(cmd_result)   # 否则就把结果发给对端（即客户端）\nconn.close()     # 关闭连接\n客户端示例代码\n#!/usr/bin/python\nimport socket\nHOST = '192.168.4.37'\nPORT = 50007\ns = socket.socket(socket.AF_INET,socket.SOCK_STREAM)      # 定义socket类型，网络通信，TCP\ns.connect((HOST,PORT))       # 要连接的IP与端口\nwhile 1:\n    cmd=raw_input(\"Please input cmd:\")       # 与人交互，输入命令\n    s.sendall(cmd)      # 把命令发送给对端\n    data=s.recv(1024)     # 把接收的数据定义为变量\n    print data         # 输出变量\ns.close()   # 关闭连接\n\n                ", "mainLikeNum": ["3 "], "mainBookmarkNum": "19"}