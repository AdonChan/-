{"title": "Python 通过字符串调用函数或方法 - 个人文章 ", "index": "python", "content": "先看一个例子：\n>>> def foo():\n        print \"foo\"\n\n>>> def bar():\n        print \"bar\"\n\n>>> func_list = [\"foo\",\"bar\"]\n>>> for func in func_list:\n        func()\nTypeError: 'str' object is not callable\n我们希望遍历执行列表中的函数，但是从列表中获得的函数名是字符串，所以会提示类型错误，字符串对象是不可以调用的。如果我们想要字符串变成可调用的对象呢？或是想通过变量调用模块的属性和类的属性呢？以下有三种方法可以实现。\neval()\n>>> for func in func_list:\n        eval(func)()\nfoo\nbar\neval() 通常用来执行一个字符串表达式，并返回表达式的值。在这里它将字符串转换成对应的函数。eval() 功能强大但是比较危险（eval is evil），不建议使用。\nlocals()和globals()\n>>> for func in func_list:\n        locals()[func]()\nfoo\nbar\n\n>>> for func in func_list:\n        globals()[func]()\nfoo\nbar\nlocals() 和 globals() 是python的两个内置函数，通过它们可以一字典的方式访问局部和全局变量。\ngetattr()\ngetattr() 是 python 的内建函数，getattr(object,name) 就相当于 object.name，但是这里 name 可以为变量。\n返回 foo 模块的 bar 方法\n>>> import foo\n>>> getattr(foo, 'bar')() \n返回 Foo 类的属性\n>>> class Foo:\n    def do_foo(self):\n        ...\n\n    def do_bar(self):\n        ...\n\n>>> f = getattr(foo_instance, 'do_' + opname)\n>>> f()\n参考\nCalling a function of a module from a string with the function's name in Python\nHow do I use strings to call functions/methods?\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "2"}