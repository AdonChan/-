{"title": "flask之二 - Flask入门到放弃 ", "index": "html,python", "content": "flask之二\n预热\n\n在渲染模板的时候，默认会从项目根路径下的templates目录下查找模板\n如果想要指定模板路径的时候，就在初始化APP的时候，这样操作即可：\n\napp = Flask(__name__,template_folder='C:/templates') #template_folder可以指定模板位置\n模板传参\n\n在使用render_template渲染模板的时候，可以传递关键字参数，以后直接在模板中使用就可以了\n如果参数过多的话，那么就可以将所有的参数放到一个字典中，然后再传这个参数的时候使用**将字典打散成关键字参数。\n\n小例子：\nmy_template.py\nfrom flask import Flask,render_template\napp = Flask(__name__)\napp.debug = True\n@app.route('/')\ndef hello_world():\n    context = {\n        'username': 'wanghui',\n        'age':19,\n        'children':{\n            'user':'ccc',\n            'type':'stu',\n        }\n    }\n    return render_template('index.html', **context)\n    # return render_template('index.html',context=context)\n    # return render_template('index.html',username='wanghui',age=19)\nif __name__ == '__main__':\n    app.run()\ntemplates/index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>my blog</title>\n</head>\n<body>\n<h1>这是模板渲染的数据</h1>\n{#<p>{{ username }}</p>#}\n{#<p>{{ age }}</p>#}\n{{ context.username }}\n{{ context.age }}\n<p>{{ username }}</p>\n<p>{{ children.user }}</p>\n</body>\n</html>\n模板中的url_for\n模板中的url_for和视图函数中的url_for是类似的，也是传递视图函数的名字，也可以传递参数。使用的时候，需要在url_for两边加上一个{{ url_for('func_name'),ref='/',id='1'}}\n\ntemplates.py\nfrom flask import Flask,render_template,url_for\napp = Flask(__name__)\napp.debug = True\n@app.route('/')\ndef hello_world():\n    return render_template('index.html')\n@app.route('/accounts/login/<id>/')\ndef login(id):\n    return render_template('login.html')\nif __name__ == '__main__':\n    app.run(port=8888)\ntemplates/index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>my blog</title>\n</head>\n<body>\n<h1>这是从模板中渲染的</h1>\n<p><a href=\"{{ url_for('login',ref='/',id='1') }}\">登陆</a></p>\n</body>\n</html>\ntemplates/login.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Login page</title>\n</head>\n<body>\n<h1>这是登录页面</h1>\n{#{{ 用来存放变量 }}#}\n{#{% 用来执行函数或者逻辑代码 %}#}\n</body>\n</html>\n过滤器\n有时候我们需要在模板中对一些变量进行处理，那么就必须要类似于python中的函数一样，可以将这个值传到函数中，然后做一些操作。在模板中过滤器相当于是一个函数，把当前的变量传入到过滤器中，然后过滤器会根据自己的功能，再返回相应的值，之后再将结果渲染到页面上。\n基本语法：{{ variable |过滤器的名字 }}\n\nguo\n\nabs(value)：返回一个数值的绝对值。 例如：-1|abs。\ndefault(value,default_value,boolean=false)：如果当前变量没有值，则会使用参数中的值来代替。name|default('xiaotuo')——如果name不存在，则会使用xiaotuo来替代。boolean=False默认是在只有这个变量为undefined的时候才会使用default中的值，如果想使用python的形式判断是否为false，则可以传递boolean=true。也可以使用or来替换。\nescape(value)或e：转义字符，会将<、>等符号转义成HTML中的符号。例如：content|escape或content|e。\nfirst(value)：返回一个序列的第一个元素。names|first。\nformat(value,arags,*kwargs)：格式化字符串。例如以下代码：\n\n  {{ \"%s\" - \"%s\"|format('Hello?',\"Foo!\") }}\\\n  将输出：Helloo? - Foo!\n\nlast(value)：返回一个序列的最后一个元素。示例：names|last。\nlength(value)：返回一个序列或者字典的长度。示例：names|length。\njoin(value,d=u'')：将一个序列用d这个参数的值拼接成字符串。\nsafe(value)：如果开启了全局转义，那么safe过滤器会将变量关掉转义。示例：\n\ncontent_html|safe。\nint(value)：将值转换为int类型。\nfloat(value)：将值转换为float类型。\nlower(value)：将字符串转换为小写。\nupper(value)：将字符串转换为小写。\nreplace(value,old,new)： 替换将old替换为new的字符串。\ntruncate(value,length=255,killwords=False)：截取length长度的字符串。\nstriptags(value)：删除字符串中所有的HTML标签，如果出现多个空格，将替换成一个空格。\ntrim：截取字符串前面和后面的空白字符。\nstring(value)：将变量转换成字符串。\nwordcount(s)：计算一个长字符串中单词的个数。\ndefault过滤器详解：\n如果某个变量使用方式是{{ value|default('默认值')}}，如果value这个key不存在的话就使用过滤器提供的默认值；如果类似于python中判断一个值是否为False（例如：空字典，空字符串，空列表的话）那么久必须要传递另外一个参数{{ value | default('默认值'，boolean=True)}};可以使用or来替换default('默认值'，boolean=True)（例如{{ siginature or '此人很懒没有留下任何说明'}}）例子：\ndefaulte_falter.py\nfrom flask import Flask,render_template\napp = Flask(__name__)\n@app.route('/')\ndef index():\n    context = {\n        'position':-9,\n        'signature':'',\n        #'signature':'this ismy blog'\n    }\n    return render_template('index.html',**context)\nif __name__ == '__main__':\n    app.run(debug=True)\ntemplates/index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>MyBlog</title>\n</head>\n<body>\n{#<p>个性签名：{{ signature|default('此人很懒没有留下任何说明！',boolean=True) }}</p>#}\n<p>个性签名：{{ signature or '此人很懒没有留下任何说明！'}}</p>\n</body>\n</html>\nesacape：转义过滤器\n\n\nsafe过滤器：可以关闭一公分字符串的自动转义\n\nescape过滤器：对某个字符串进行转义\n\nautoescape过滤器：可以对其代码框内的代码块关闭自动转义\nfirst：返回序列中的第一个元素\n\n\nlast：返回序列中的最后一个元素\nformat：格式化输出\nlength：长度计算\nint：转换成整数\nreplase：旧字符串换成新的\n\ntruncate：指定长度截取（结合striptags去除掉html字段之后截取纯净字符串然后按字数去做预览页填充）\n\nstriptags：去除标签中的html字段\nworldcount(s)：统计一个长字符串中的单词数\n\n小例子：\nescape.py\nfrom flask import Flask,render_template\napp = Flask(__name__)\n@app.route('/')\ndef hello_world():\n    context = {\n        'position':-9,\n        'signature':'<script>alert(\"Hello world!\")</script>',\n        'persons':['abc','def'],\n        'age':\"18\",\n        'article':'hello hello xxooo xxooo!!'\n    }\n    return render_template('index.html',**context)\nif __name__ == '__main__':\n    app.run(debug=True,port=8080)\ntemplates/index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>MyBlog</title>\n</head>\n<body>\n{#{% autoescape off %}#}\n{#<p>个性签名：{{ signature }}</p>#}\n{#{% endautoescape %}#}\n<p>{{ signature|safe }}</p>\n<p>{{ persons|first }}</p>\n<p>{{ persons[0] }}</p>\n<p>{{ persons|last }}</p>\n<p>{{ persons[-1] }}</p>\n<p>{{ \"我的名字是%s\"|format(\"hello word!\") }}</p>\n<p>{{ \"人数是 %d\"|format(persons|length) }}</p>\n{% if age|int == 18 %}\n    <p>年龄是18岁</p>\n{% else %}\n    <p>年龄不是18岁</p>\n{% endif %}\n<p>{{ article|replace('hello','sssssz') }}</p>\n<p>{{ article|truncate(length=5) }}</p>\n<p>{{ signature|striptags }}</p>\n</body>\n</html>\n自定义模板过滤器\n\n在python文件中写好自己的过滤器（本质上就是一个函数）\n如果要在模板中调用这个过滤器，那就需要在这个函数上加一个装饰器@app.template_filter('过滤器名称')\n\n自动加载的话就在app下添加\n\napp.config['TEMPLATES_AUTO_RELOAD'] = True\n\n小例子：\ndefine_filter.py\n\nfrom flask import Flask,render_template\napp = Flask(__name__)\napp.config['TEMPLATES_AUTO_RELOAD'] = True\n@app.route('/')\ndef hello_world():\n    context={\n        'article':'anyway hello anyway hello abccc'\n    }\n    return render_template('index.html',**context)\n@app.template_filter('cut')\ndef cut(value):\n    vaule = value.replace(\"hello\",\"sbsb\")\n    return value\nif __name__ == '__main__':\n    app.run(debug=True,port=9090)**\ntemplates/index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>myblog</title>\n</head>\n<body>\n<p>{{ article|cut }}</p>\n</body>\n</html>\n实战自定义过滤器\n\n时间处理（从现在到发帖的时间差）\nshizhan.py\n\nfrom flask import Flask,render_template\nfrom datetime import datetime\napp = Flask(__name__)\napp.config['TEMPLATES_AUTO_RELOAD'] = True\n@app.route('/')\ndef index():\n    context={\n        'article':'aaa bbb ccc',\n        'create_time':datetime(2018,02,23,10,12,11)\n    }\n    return render_template('index.html',**context)\n@app.template_filter('handle_time')\ndef handle_time(time):\n    '''\n    1.距离现在的时间多久，如果间隔在一分钟以内就表示刚刚\n    2.在一小时以内就显示xx分钟前\n    3.在24小时以内就显示xx小时前\n    4. 在一个月之内就显示多少天之前\n    5. 否则就显示具体的时间\n    :param time:\n    :return:\n    '''\n    if isinstance(time,datetime):\n        now = datetime.now()\n        timestamp = (now - time).total_seconds() #获取间隔秒数\n        if timestamp < 60:\n            return \"刚刚\"\n        elif timestamp >=60 and timestamp<= 60*60:\n            minutes = timestamp/60\n            return \"%s分钟前\",int(minutes)\n        elif timestamp >= 60*60 and timestamp <= 60*60*24:\n            hours = timestamp/(60*60)\n            return \"%s小时前\",int(hours)\n        elif timestamp >= 60*60*24 and timestamp<= 60*60*24*30:\n            days = timestamp/(60*60*24)\n            return \"%s天前\",int(days)\n    else:\n        return time.strftime('%Y-%m-%d %H:%M')\nif __name__ == '__main__':\n    app.run(port=9092,debug=True)\ntemplates/index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>MyBlog</title>\n</head>\n<body>\n<p>发表时间:{{ create_time|handle_time }}</p>\n</body>\n</html>\n条件判断\nFor循环\n在jinjia2中的for循环，跟python中的for循环基本是一致的，也是用for in形式；而且可以便利所有的序列以及迭代器，但是唯一不同的是jinjia2中的for循环没有break和continue\n\n小例子：\nfor_ex.py\n\nfrom flask import Flask,render_template\napp = Flask(__name__)\n@app.route('/')\ndef hello_world():\n    context = {\n        'users':['user01','user02','user03'],\n        'person':{\n            'username':'wanghui',\n            'age':21,\n            'country':'china',\n        },\n        'books':[\n            {\n                'name':'sk1',\n                'author':'saa',\n                'price':100,\n            },\n            {\n                'name': 'aaaeede1',\n                'author': 'se232aa',\n                'price': 103,\n            },\n            {\n                'name': 'AAAew',\n                'author': 'VVVeqwea',\n                'price': 190,\n            },\n            {\n                'name': 'skfdfds1',\n                'author': 'sdfsfsdfdaa',\n                'price': 30,\n            }\n        ]\n    }\n    return render_template('index.html',**context)\nif __name__ == '__main__':\n    app.run(debug=True)\ntemplates/index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>MyBlog</title>\n</head>\n<body>\n<ul>\n    {% for user in users %}\n        <p>{{ user }}</p>\n    {% endfor %}\n</ul>\n<table>\n    <thead>\n        <tr>\n            <th>用户名</th>\n            <th>年龄</th>\n            <th>国家</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            {% for key,value in person.items() %}\n                 <td>{{ value }}</td>\n            {% endfor %}\n        </tr>\n    </tbody>\n<table>\n    <thead>\n    <tr>\n        <th>ID</th>\n        <th>书名</th>\n        <th>作者</th>\n        <th>价格</th>\n        <th>总数</th>\n    </tr>\n    </thead>\n    <tbody>\n        {% for book in books %}\n            {% if loop.first %}\n                <tr style=\"background: red\">\n                {% elif loop.last %}\n                <tr style=\"background: blue\">\n                {% else %}\n                <tr>\n            {% endif %}\n            <td>{{ loop.index }}</td>\n            <td>{{ book.name }}</td>\n            <td>{{ book.author }}</td>\n            <td>{{ book.price }}</td>\n            <td>{{ loop.length }}</td>\n        </tr>\n        {% endfor %}\n    </tbody>\n</table>\n</table>\n<table border=\"1px\">\n    <tbody>\n    {% for x in range(1,10) %}\n        <tr>\n        {% for y in range(1,x+1) if y <= x %}\n            <td>{{ y }}*{{ x }}={{ x*y }}</td>\n        {% endfor %}\n        </tr>\n    {% endfor %}\n    </tbody>\n</table>\n</body>\n</html>\n宏\n模板中的宏跟python中的函数类似，可以传递参数，但是不能有返回值使用宏的时候，参数可以是默认值\n\n小例子：\nmacro.py\n\nfrom flask import Flask,render_template\napp = Flask(__name__)\napp.config['TEMPLATES_AUTO_RELOAD'] = True\napp.config['DEBUG'] = True\n@app.route('/')\ndef hello_world():\n    return render_template('index.html')\nif __name__ == '__main__':\n    app.run(port=9999)\ntemplates/index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Macro</title>\n</head>\n<body>\n    {% macro input(name=\"\",value=\"\",type=\"text\") %}\n        <input type=\"{{ type }}\" name=\"{{ name }}\" value=\"{{ value }}\">\n    {% endmacro %}\n<h1>登陆页面</h1>\n<table>\n    <tbody>\n    <tr>\n        <td>用户名：</td>\n        <td>{{ input('username') }}</td>\n    </tr>\n    <tr>\n        <td>密码：</td>\n        <td>{{ input('password',type='password') }}</td>\n    </tr>\n    <tr>\n        <td></td>\n        <td>{{ input(value='提交',type='submit') }}</td>\n    </tr>\n    </tbody>\n</table>\n</body>\n</html>\n宏的导入\n在真实的开发中，会将一些常用的宏单独放在一个文件中，在需要使用的时候，再从这个文件中进行导入。import语句的用法跟python中的import类似，可以直接import...as...，也可以from...import...或者from...import...as...，假设现在有一个文件，叫做forms.html，里面有两个宏分别为input和textarea，如下：\n注意事项：a. inport宏文件 as xxxb. from 宏文件路径 import 宏的名字 [as xxx]c. 宏文件的路径，不要以相对路径去找，都要以templates作为绝对路径去找d. 如果想要在导入宏的时候，就把当前末班的一些参数传递给宏所在的模板，那么就应该在导入的时候使用with context\n\n小例子：\nmacros.py\n\nfrom flask import Flask,render_template\napp = Flask(__name__)\napp.config['TEMPLATES_AUTO_RELOAD'] = True\napp.config['DEBUG'] = True\n@app.route('/')\ndef hello_world():\n    return render_template('index/index.html')\nif __name__ == '__main__':\n    app.run(port=9999)\ntemplates/macros/macros.html\n{% macro input(name=\"\",value=\"\",type=\"text\") %}\n    <input type=\"{{ type }}\" name=\"{{ name }}\" value=\"{{ username }}\">\n{% endmacro %}\ntemplates/index/index.html\n{#{% from \"macros.html\" import input as inp %}#}\n{% import \"macros/macros.html\" as macros with context %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Macro</title>\n</head>\n<body>\n<h1>登陆页面</h1>\n<table>\n    <tbody>\n    <tr>\n        <td>用户名：</td>\n        <td>{{ macros.input('username') }}</td>\n    </tr>\n    <tr>\n        <td>密码：</td>\n        <td>{{ macros.input('password',type='password') }}</td>\n    </tr>\n    <tr>\n        <td></td>\n        <td>{{ macros.input(value='提交',type='submit') }}</td>\n    </tr>\n    </tbody>\n</table>\n</body>\n</html>\ninclude标签\n\n这个标签相当于是将指定模板中的代码复制粘贴到当前的位置\n\ninclude标签，如果要继续使用父模板中的变量，直接用就可以了\n\ninclude的路径也和import一样，需要从templates为根，不要以相对路径去找。\n\n\n小例子：\ninclude_ex.py\n\nfrom flask import Flask,render_template\napp = Flask(__name__)\napp.config['TEMPLATES_AUTO_RELOAD']\n@app.route('/')\ndef hello_world():\n    return render_template('index.html',username='wanghui')\n@app.route('/detail/')\ndef detail():\n    return render_template('course_detail.html')\nif __name__ == '__main__':\n    app.run(debug=True)\ntemplates/index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>MyBlog</title>\n</head>\n<body>\n{% include \"common/header.html\" %}\n<div class=\"content\">中间的</div>\n{% include \"common/footer.html\" %}\n<ul>{{ username }}</ul>\n</body>\n</html>\ntemplates/course_detail.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n{% include \"common/header.html\" %}\n<div class=\"content\">文章详情！</div>\n{% include \"common/footer.html\" %}\n</body>\n</html>\ntemplates/common/header.html\n<style>\n        .nav  ul{\n            overflow: hidden;\n        }\n        .nav ul li{\n            float: left;\n            margin: 0 20px;\n        }\n    </style>\n<nav class=\"nav\">\n    <ul>\n        <li>首页</li>\n        <li>博客详情</li>\n        <li>教程中心</li>\n        <li>关于我</li>\n    </ul>\n</nav>\ntemplates/common/footer.html\n<footer>这是底部</footer>\nset with语句\n\n在模板中，可以使用set来定义变量；一旦定义了这个变量。那么在后面的代码中，都可以使用这个变量。\n\nwith语句定义的变量，只能在with的代码块中使用。超出with代码块，则不能使用\n\nwith不一定要跟一个变量，也可以是一个空的with语句，以后要用的话，就在with中使用set定义的变量来使用。\n\n<body>\n{% set username='wanghui' %}\n<p>用户名：{{ username }}</p>\n{% with %}\n    {% set  classroom='2018' %}\n    <p>班级：{{ classroom }}</p>\n{% endwith %}\n<p>别的班级{{ classroom }}</p>\n</body>\n加载静态文件\n\n加载静态文件使用的是url_for函数，第一个参数为static,第二个参数是filename='path'\n\n路径查找要以static目录作为根目录\n\n小例子：\nstatic_ex.py\n\n\nfrom flask import Flask,render_template\napp = Flask(__name__)\napp.config.update({\n    'DEBUG':True,\n    'TEMPLATES_AUTO_RELOAD':True,\n})\n@app.route('/')\ndef hello_world():\n    return render_template('index.html')\nif __name__ == '__main__':\n    app.run()\nstatic/css/index.css\nbody{\n    background: pink;\n}\nstatic/js/index.js\nalert('hello user!')\nstatic/imgs/sas.jpg\n图片\ntemplates/index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <link rel=\"stylesheet\" href=\"{{ url_for('static',filename=\"css/index.css\") }}\">\n    <script src=\"{{ url_for('static',filename=\"js/index.js\") }}\"></script>\n</head>\n<body>\n<img src=\"{{ url_for('static',filename='imgs/asa.jpg') }}\" alt=\"\">\n</body>\n</html>\n模板继承\n为什么需要模板继承？\n\n可以将一些公用的代码单独抽取出来放到一个父模板中，以后子模板直接继承就给可以使用了。\n这样可以减少重复性的代码，并且以后代码修改起来也很方便\n\n模板继承的语法\n使用extends语句来指明继承的父模板。父模板的路径也就是相对于templates文件夹下的绝对路径。例子如下{% extends 'base.html' %}\n\nblock语法\n一般在父模板中只能定义一些共性公用的代码，子模板可能要根据不同的需求实现不同的代码。这时候父模板就应该提供一个接口，让子模板来实现。从而实现业务的具体功能。\n在父模板中\n{% block body_block %}\n    <p>我是base下的</p>\n{% endblock %}\n在子模板中\n{% block body_block %}\n    <p>我是index的内容</p>\n{% endblock %}\n调用父模板代码block中的代码\n默认情况下，字幕版实现了父模板定义的block，那么子模板中block的代码就会覆盖掉父模板中的代码，要想保留父模板中的block的话就是用{{ super() }}来实现\n父模板的内容：\n{% block body_block %}\n    <p style=\"background: red\">base.html</p>\n{% endblock %}\n子模板中的内容：\n{% extends 'base.html' %}\n{% block body_block %}\n    {{ super() }}\n    <p style=\"background: green\">我是index的内容</p>\n{% endblock %}\n调用另外一个block中的代码\n在另外一个模板中使用其他模板中的代码，可以使用{{ self.blockname() }}即可\n父模板\n <title>{% block title %}\n{% endblock %}</title>\n<body>\n{% block body_block %}\n    <p style=\"background: red\">base.html</p>\n{% endblock %}\n</body>\n子模板：\n{% extends 'base.html' %}\n{% block title %}\nMyIndex\n{% endblock %}\n{% block body_block %}\n    {{ super() }}\n    {{ self.title() }}\n    <p style=\"background: green\">我是index的内容</p>\n{% endblock %}\n其他注意事项\n\n继承的代码必须放在子模板中的第一行{% extends 'base.html' %}\n\n子模板中要实现自己的代码，要放到block中，不然不生效\n\n继承的例子：\ninherit_ex.py\nfrom flask import Flask,render_template\napp = Flask(__name__)\napp.config.update({\n    'DEBUG':True,\n    'TEMPLATES_AUTO_RELOAD':True\n})\n@app.route('/')\ndef index():\n    return render_template('index.html')\n@app.route('/detail/')\ndef detail():\n    return render_template('course_detail.html')\nif __name__ == '__main__':\n    app.run()\ntemplates/base.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>{% block title %}\n    {% endblock %}</title>\n    <style>\n        .nav  ul{\n            overflow: hidden;\n        }\n        .nav ul li{\n            float: left;\n            margin: 0 20px;\n        }\n    </style>\n</head>\n<body>\n<nav class=\"nav\">\n    <ul>\n        <li>首页</li>\n        <li>博客详情</li>\n        <li>教程中心</li>\n        <li>关于我</li>\n    </ul>\n</nav>\n{% block body_block %}\n    <p style=\"background: red\">base.html</p>\n{% endblock %}\n<footer>这是底部</footer>\n</body>\n</html>\ntemplates/index.html\n{% extends 'base.html' %}\n{% block title %}\nMyIndex\n{% endblock %}\n{% block body_block %}\n    {{ super() }}\n    {{ self.title() }}\n    <p style=\"background: green\">我是index的内容</p>\n{% endblock %}\ntemplates/course_detail.html\n{% extends 'base.html' %}\n{% block body_block %}\n<p>this is course </p>\n{% endblock %}\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "3"}