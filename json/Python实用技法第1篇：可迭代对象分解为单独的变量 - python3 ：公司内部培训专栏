{"title": "Python实用技法第1篇：可迭代对象分解为单独的变量 - python3 ：公司内部培训专栏 ", "index": "python", "content": "下一篇文章：Python实用技法第2篇：使用deque保留最新的N个元素\n\n1、需求🙀\n现在有一个包含N个元素的元组或序列，现在想将它分解为N个单独的变量。\n2、解决方案😸\n在python中，任何序列、元组、可序列号对象，都可以通过一个简单的赋值操作来分解为单独的变量。\n唯一要求是变量的总数和结构要和序列的相吻合。如果不吻合就会报错\n实例展示：\n#将序列分解为单独的变量\nm=(1,2)\nx,y=m\nprint(\"x=\",x)\nprint(\"y=\",y)\n\nprint(\"*\"*30)\n\ndata=[\"mark\",18,\"超级帅\",(1992,5,4)]\nname,age,feature,birthday=data\nprint(\"name=\",name)\nprint(\"age=\",age)\nprint(\"feature=\",feature)\nprint(\"birthday=\",birthday)\nprint(\"*\"*30)\n\n\nname,age,feature,(year,mon,day)=data\nprint(\"name=\",name)\nprint(\"age=\",age)\nprint(\"feature=\",feature)\nprint(\"year=\",year)\nprint(\"mon=\",mon)\nprint(\"day=\",day)\n结果\nx= 1\ny= 2\n******************************\nname= mark\nage= 18\nfeature= 超级帅\nbirthday= (1992, 5, 4)\n******************************\nname= mark\nage= 18\nfeature= 超级帅\nyear= 1992\nmon= 5\nday= 4\n3、思考🤔\n实际上不仅仅只是元组列表，只要对象是可迭代的，那么就可以执行分解操作，这包括字符串、文件、迭代器、生成器。\n实例展示：\n#将序列分解为单独的变量\nmark=\"mark\"\nm,a,r,k=mark\nprint(m)\nprint(a)\nprint(r)\nprint(k)\nprint(\"*\"*30)\n\n#有时候我们想丢弃某个值，单由于变量数量必须和要分解的对象的可分解数量相同，此时我们可以使用_来表示要丢弃的值。\n\nmark=\"mark\"\nm,a,r,_=mark\nprint(m)\nprint(a)\nprint(r)\n#其实_还是一个变量，指示看起来舒服点\nprint(_)\n结果：\nm\na\nr\nk\n******************************\nm\na\nr\nk\n4、需求升级🙀\n假如可序列号对象可分解为N个元素，难道我们就要创建N个元素吗？如果N值非常大怎么办？\n5、解决方案升级😸\nPython中的『*表达式』可以满足上述需求。例如，有无数个成绩列表：grades，现在想去掉第一个成绩和最后一个成绩，然后求剩下成绩的平均值：\n代码\nimport numpy as np\n\ngrades=list(range(10))#定义一个0-999的分数列表\nprint(\"grades:\"+str(grades))\nfirst,*middle,last=grades\nprint(\"middle:\"+str(middle))\nprint(\"去掉第一个和最后一个分数后的平均值：\"+str(np.mean(middle)))\n结果\ngrades:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nmiddle:[1, 2, 3, 4, 5, 6, 7, 8]\n去掉第一个和最后一个分数后的平均值：4.5\n当然这个【*表达式】可以位于第一个位置，也可以是最后一个，或者其它位置。\n假如有一些用户记录，记录由姓名和电子邮件地址组成，后面跟着任意数量的电话号码：\nrecord=('mark','1782980833@qq.com','18321859453','18956245389')\nname,email,*phone_numbers=record\n\nprint(name)\nprint(email)\nprint(phone_numbers)\n运行结果：\nmark\n1782980833@qq.com\n['18321859453', '18956245389']\n6、*表达式技巧\n*表达式在迭代一个变长的元组序列时尤其有用\n代码：\nrecords=[\n    ('foo',1,2),\n    ('bar','hello'),\n    ('foo',3,4),\n]\n\ndef do_foo(x,y):\n    print('foo',x,y)\n\ndef do_bar(s):\n    print('bar',s)\n\nfor tag,*args in records:\n    if tag=='foo':\n        do_foo(*args)\n    elif tag=='bar':\n        do_bar(*args)\n结果：\nfoo 1 2\nbar hello\nfoo 3 4\n当和某些特定的字符串处理操作（例如拆分操作）相结合时，也非常有用\n代码：\nline='nobody:*:-2:-2:unp user:/var/empty:/user/nim/false'\n\nuname,*fileds,homedir,sh=line.split(':')\nprint(uname)\nprint(homedir)\nprint(sh)\n结果：\nnobody\n/var/empty\n/user/nim/false\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "0"}