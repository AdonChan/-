{"title": "Python-SQLAlchemy：第3节：关系操作 - python3 ：公司内部培训专栏 ", "index": "python", "content": "上一篇文章：Python-SQLAlchemy：第2节：查询条件设置下一篇文章：Python-SQLAlchemy：第4节：级联\n\n关系数据库是建立在关系模型基础上的数据库，所以表之间的关系在数据库编程中尤为重要。本节围绕在SQLAlchemy中如何定义关系及如何使用关系进行查询进行讲解，使读者能够快速掌握SQLAlchemy的关系操作。\n1、案例\n设计3个实体表：班级表class、学生表student、老师表teacher和1个关系表：class_teacher。班级与学生为一对多关系，班级与老师之间为多对多关系。\nfrom sqlalchemy import Table,Column,Integer,ForeignKey,String\nfrom sqlalchemy.orm import relationship,backref\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase=declarative_base()\n\nclass Class(Base):\n    __tablename__='class'\n    class_id=Column(Integer,primary_key=True)\n    name=Column(String(50))\n    level=Column(Integer)\n    address=Column(String(50))\n\n    class_teachers=relationship(\"ClassTeacher\",backref=\"class\")\n    students=relationship(\"Student\",backref=\"class\")\n\nclass Student(Base):\n    __tablename__='student'\n    student_id=Column(Integer,primary_key=True)\n    name=Column(String(50))\n    age=Column(Integer)\n    gender=Column(String(10))\n    address=Column(String(50))\n    class_id=Column(Integer,ForeignKey('class.id'))\n\nclass Teacher(Base):\n    __tablename__='teacher'\n    teacher_id=Column(Integer,primary_key=True)\n    name=Column(String(50))\n    gender=Column(String(10))\n    telephone=Column(String(50))\n    address=Column(String(50))\n    class_teachers=relationship(\"ClassTeacher\",backref=\"teacher\")\n\nclass ClassTeacher(Base):\n    __tablename__='class_teacher'\n    teacher_id=Column(Integer,ForeignKey('teacher.teacher_id'),primary_key=True)\n    class_id=Column(Integer,ForeignKey(\"class.id\"),primary_key=True)\n代码中用了4个SQLAlchemy模型对4个表进行了定义，其中与关系定义相关的部分如下：\n外键设置：在列的定义中，为Column传入ForeignKey进行外键设置。\nclass_id=Column(Integer,ForeignKey('class.id'))\n关系设置：通过relationship关键字在父模型中建立对字表的引用，例如Class模型中的关系设置如下：\nstudents=relationship(\"Student\",backref=\"calss\")\n其中的backref参数为可选参数，如果设置backref，则此语句同时设置了 从父表对子表的引用。\n一对多关系的使用：以后可以直接通过该students属性获得相关班级中所有学生的信息。如下代码可以打印班级【三年二班】的所有学生信息。\nclass=session.query(Class).filter(Clss.name==\"三年二班\").first()\n\nfor student in class_.students:\n    print(student)\n多对多关系的使用：通过关联模型ClassTeacher实现，在其中分别设置模型Class和Teacher的外键，并且在父模型中设置相应的relationship实现。多对多关系也可以想象成一个关联表，分别对两个父表实现了多对一的关系。班级与老师之间为多对多的关系，如下代码可以打印班级【三年二班】中所有老师的信息\nclass=session.query(Class).filter(Class.name==\"三年二班\").first()\nfor class_teacher in class_.class_teachers:\n    teacher=class_teacher.teacher\n    print(teacher)\n上述代码中class_teacher.teacher是在模型teacher中针对ClassTeacher定义的反向引用。\n2、连接查询\n在实际开发中，有了关系就必不可少地会有多表连接查询的需求。下面通过实际例子演示如果进行多表连接查询。\n在查询语句中可以使用join关键字进行连接查询，打印出所有三年级学生的姓名：\nstudents=session.query(Student).join(Class).filter(Class.level==3).all()\nfor student in students:\n    print(student.namr)\n上述查询函数会自动把外键关系作为连接条件，该查询被SQLAlchemy自动翻译为如下SQL语句并执行：\nSELECT student.student_id AS student_student_id,\n    student.name AS student.name,\n    student.age AS student.age,\n    student.gender AS student.gender,\n    student.address AS student.address,\n    student.class_id AS student_class_id\nFROM student JOIN class ON student.class_id=class.class_id\nWHERE class.leve=?\n(3,)\n如果需要将被连接表的内心同样打印出来，则可以在query中指定多个表对象。\n下面的语句在打印出所有三年级学生姓名的同时，打印出其所在班级的名字。\nfor student,class_ in session.query(Student,Class).join(Class).filter(Class.level==3).all():\n    print(student.name,class_.name)\n上述查询函数会自动把外键关系作为连接条件，该查询被SQLAlchemy自动翻译为如下SQL语句并执行：\nSELECT student.student_id AS student_student_id,\n    student.name AS student.name,\n    student.age AS student.age,\n    student.gender AS student.gender,\n    student.address AS student.address,\n    student.class_id AS student_class_id,\n    class.class_id AS class_class_id,\n    class.name AS class_name,\n    class.level AS class_level,\n    class.address AS class_location\nFROM student JOIN class ON student.class_id=class.class_id\nWHERE class.leve=?\n(3,)\n如果需要用除外键外的其他字段作为连接条件，则需要开发者在join中自行设置。下面打印出所有班级的address与学生的address相同的学生的姓名：\nfor student_name, in session.query(Student.name).join(Class,Class.address==Student.address).filter(Class.level==3).all():\n    print(student_name)\n上述查询函数根据开发者指定的语句作为连接条件，并且因为直接指定了被查询的字段，所以减少了实际SQL中的被查询字段，提高了性能。该查询被SQLAlchemy自动翻译为如下SQL语句执行：\nSELECT student.name AS student_name, FROM student JOIN class ON student.address=class.address\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}