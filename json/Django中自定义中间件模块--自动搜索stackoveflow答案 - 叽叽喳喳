{"title": "Django中自定义中间件模块--自动搜索stackoveflow答案 - 叽叽喳喳 ", "index": "python,django,web", "content": "Django中间件MIDDLEWARE的分类：\n请求期间:\nprocess_request(request)\nprocess_view(request, view_func, view_args, view_kwargs)\n返回期间：\nprocess_exception(request, exception) (only if the view raised an exception)\nprocess_template_response(request, response) (only for template responses)\nprocess_response(request, response)\n如果需要自定义，在MIDDLEWARE_CLASSES中添加对应路径的文件即可\nMIDDLEWARE_CLASSES = (\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'django.middleware.security.SecurityMiddleware',\n    \n    // 自定义Middleware方法\n    'app_name.middleware.StackOverflowMiddleware',\n)\n需求场景\n在平时django开发调试中，会遇到这样那样的exception报错，我们自定义一个简单的中间件，django的自定义步骤很简单，实现process_exception方法即可\n根据exception的name和信息，调用stackoveflow的接口，当debug报错时自动搜索相关的答案，节省一些时间，实现起来很简单\n备注：仅为介绍思路，线上代码不要这么使用\n代码实现\napp目录下 middleware.py文件\nimport requests\nfrom django.conf import settings\n\nclass StackOverflowMiddleware(object):\n    def process_exception(self, request, exception):\n        if settings.DEBUG:\n            intitle = u'{}: {}'.format(exception.__class__.__name__,  exception.message)\n            url = 'https://api.stackexchange.com/2.2/search'\n            params = {\n                'order': 'desc',\n                'sort': 'votes',\n                'site': 'stackoverflow',\n                'pagesize': 3,\n                'tagged': 'python;django',\n                'intitle': intitle\n            }\n            r = requests.get(url, params=params)\n            questions = r.json()\n            if len(questions['items']) > 0:\n                print '\\nThe stackoverflow answer top 3 is :\\n'\n                for question in questions['items'][:3]:\n                    print '\\n'\n                    print question['title']\n                    print question['link'] + '\\n'\n            else :\n                print '\\nstackoverflow answer not found\\n'\n\n        return None\n效果如下：\nDjango版本：1.9.4python版本：2.7.6调试时，settings.DEBUG处于开启模式\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}