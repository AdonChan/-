{"title": "Python实用技法第15篇：筛选序列中的元素 - python3 ：公司内部培训专栏 ", "index": "python", "content": "上一篇文章：Python实用技法第14篇：根据字段将记录分组：itertools.groupby()下一篇文章：Python实用技法第16篇：从字典中提取子集\n\n1、需求🙀\n序列中含有一些数据，我们需要提取其中的值或根据某些标准对序列做删减，\n2、解决方案😸\n要筛选序列中的数据，通常最简单的方法是使用列表推导式。\n例如：\nmyList=[1,4,-5,10,-7,2,3,-1]\nprint([n for n in myList if n>0])\nprint([n for n in myList if n<0])\n结果：\n[1, 4, 10, 2, 3]\n[-5, -7, -1]\n使用列表推导式的一个潜在缺点是如果原始输入非常大的话，这么做可能会产生一个庞大的结果。如果这是你需要考虑的问题，那么可以使用生成器表达式通过迭代的方法产生筛选结果，例如：\nmyList=[1,4,-5,10,-7,2,3,-1]\npos=(n for n in myList if n >0)\nfor x in pos:\n    print(x)\n结果：\n1\n4\n10\n2\n3\n有时候筛选的标准没法简单地表示在列表推导式或生成器表达式中。比如：假设筛选过程涉及异常处理或者其他一些复杂的细节。基于从，可以将处理筛选逻辑的代码放到单独的函数中，然后使用内建的filter()函数处理，示例如下：\nvalues=['1','2','-3','-','4','N/A','5']\ndef is_int(val):\n    try:\n        x=int(val)\n        return True\n    except ValueError:\n        return False\n\nivals=list(filter(is_int,values))\nprint(ivals)\n结果：\n['1', '2', '-3', '4', '5']\nfilter()创建了一个迭代器，因此如果我们想要的是列表形式的结果，请确保加上了list()，就像示例中那样。\n3、分析\n列表推导式和生成器表达式通常是用来筛选数据的最简单和最直接的方式。此外，它们也具有同时对数据做转换的能力。例如：\nimport math\nmyList=[1,4,-5,10,-7,2,3,-1]\nprint([math.sqrt(n) for n in myList if n>0])\n结果：\n[1.0, 2.0, 3.1622776601683795, 1.4142135623730951, 1.7320508075688772]\n关于筛选数据，有一种情况是用新值替换掉不满足标准的值，而不是抛弃它们。例如。除了要找到正整数之外，我们也希望在指定范围内将不满足要求的值替换掉。通常，这可以通过将筛选条件迁移到一个条件表达式中来轻松实现，就像下面这样：\nmyList=[1,4,-5,10,-7,2,3,-1]\nprint([n if n>0 else 0 for n in myList])\nprint([n if n<0 else 0 for n in myList])\n结果：\n[1, 4, 0, 10, 0, 2, 3, 0]\n[0, 0, -5, 0, -7, 0, 0, -1]\n另一个值得一提的筛选工具是itertools.compress()，它接受一个可迭代对象以及一个布尔选择器序列作为输入。输出时，它会给出所有在相应的布尔选择器中为True的可迭代对象元素。如果想把对一个序列的筛选结果施加到另一个相关的序列上时，这就会非常有用。\n例如：\nfrom itertools import compress\naddress=[\n'5412 N CLARK1',\n'5148 N CLARK2',\n'5800 E CLARK3',\n'2122 N CLARK4',\n'5645 M CLARK5',\n'1060 W CLARK6',\n]\ncounts=[0,3,10,4,1,7]\n#构建一个列表，它相应的count值要大于5\nmore5=[n>5 for n in counts]\nprint(more5)\n\nprint(list(compress(address,more5)))\n结果：\n[False, False, True, False, False, True]\n['5800 E CLARK3', '1060 W CLARK6']\n这里的关键在于首先创建一个布尔序列，用来表示哪个元素可满足我们的条件，然后compress()函数挑选出满足布尔值为True的相应元素。\n同filter()函数一样，正常情况下，compress()会返回一个迭代器。因此，如果需要的话，得使用list()将结果转为列表。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}