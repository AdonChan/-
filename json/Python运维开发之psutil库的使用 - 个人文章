{"title": "Python运维开发之psutil库的使用 - 个人文章 ", "index": "python", "content": "介绍\npsutil能够轻松实现获取系统运行的进程和系统利用率。\n导入模块\nimport psutils\n获取系统性能信息\nCPU信息\n使用cpu_times()方法获取CPU的完整信息：\n>>> psutil.cpu_times()\n获取单项数据，例如用户user的CPU时间比：\n>>> psutil.cpu_times().user\n获取CPU的个数：\n>>> psutil.cpu_count() # 默认logical=True，获取逻辑个数\n>>> psutil.cpu_count(logical=False)  # 获取CPU的物理个数\n内存信息\n获取物理内存总大小和已使用内存：\n>>> mem = psutil.virtual_memory()\n>>> mem          # 显示所有的参数\n>>> mem.total    # 总内存\n>>> mem.used     # 已使用内存\n>>> mem.free     # 获取空闲内存数 \n>>> psutil.swap_memory()    # 获取SWAP分区信息\n磁盘信息\n获取磁盘完整信息：\n>>> psutil.disk_partitions()    \n获取分区的使用情况：\n>>> psutil.disk_usage('C:/') # 里面参数为所在磁盘分区\n获取硬盘总的IO个数：\n>>> psutil.disk_io_counters()\n>>> psutil.disk_io_counters(perdisk=True)   # 获取单个分区的IO个数\n网络信息\n获取网络总的IO信息：\n>>> psutil.net_io_counters()\n>>> psutil.net_io_counters(pernic=True)   # 输出单个网络接口的IO信息\n其他系统信息\n返回当前登录系统的用户信息：\n>>> psutil.users()\n获取开机时间：\n>>> psutil.boot_time()  # 以Linux时间戳格式返回\n# 如果想要转换成自然时间格式：\n>>> datetime.datetime.fromtimestamp(psutil.boot_time()).strftime(\"%Y-%m-%d %H:%M:%S\")\n进程管理\n进程信息\n列出所有进程PID\n>>> psutil.pids()\n实例化进程对象\n>>> p = psutil.Process(716)\n>>> p.name()  # 进程名\n>>> p.exe()   # 进程bin路径\n>>> p.cwd()   # 进程工作目录的绝对路径\n>>> p.status()   # 进程状态\n>>> p.create_time()   # 进程创建时间\n>>> p.uids()   # 进程uid信息\n>>> p.gids()   # 进程gid信息\n>>> p.cpu_times()   # 进程CPU时间信息\n>>> p.cpu_affinity()   # get进程的亲和度\n>>> p.memory_percent()    # 进程内存使用率\n>>> p.num_threads()    # 进程开启的线程数\npopen类的使用\npopen类可以获取用户启动的应用程序进程信息。\n>>> p = putil.Popen([\"/usr/bin/python\",\"-c\",\"print('Hello')\"],stdout=subprocess.PIPE)\n>>> p.name()\n>>> p.username()  # 创建进程的用户\n>>> p.communicate()\n('hello\\n',None)\n>>> p.cpu_times()    # 得到进程运行的CPU时间\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "1"}