{"title": "查找字符串最长回文 - leetcode ", "index": "leetcode,python", "content": "查找字符串最长回文\nLongest Palindromic Substring\n\nGiven a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\nExample:\n\nInput: \"babad\"\nOutput: \"bab\"\n\nNote: \"aba\" is also a valid answer.\nExample:\n\nInput: \"cbbd\"\nOutput: \"bb\"\n思路\n\n回文有奇回文和偶回文，abcba是奇回文，abccba是偶回文\n回文都是中心对称，找到对称点后，同时向前后寻找回文的最长串即可\n奇回文和偶回文可以归为同一种情况，即abcba以c为对称点，abccba以cc为对称点，但为了代码可读性，可以分开讨论\n\n代码\nclass Solution(object):\n\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        self.maxlen = 0\n        self.retstr = ''\n        if len(s) < 2:\n            return s\n        for i in range(len(s)):\n            self.__find_palindrome(s, i, i) #奇回文\n            self.__find_palindrome(s, i, i+1) #偶回文\n        return self.retstr\n\n\n    def __find_palindrome(self, s, j, k):\n        while j >= 0 and k < len(s) and s[j] == s[k]:\n            j -= 1\n            k += 1\n        if self.maxlen < k - j + 1:\n            self.maxlen = k - j + 1\n            self.retstr = s[j+1:k]\n本题以及其它leetcode题目代码github地址: github地址\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}