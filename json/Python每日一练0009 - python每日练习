{"title": "Python每日一练0009 - python每日练习 ", "index": "python3.x,python", "content": "问题\n怎样找出一个序列中出现次数最多的元素？\n解决方案\n使用collections库中的Counter对象可以方便的求出现次数最多的前N个元素\n直接使用most_common成员函数就好了，例如：\nfrom collections import Counter\nwords = [\n    'look', 'into', 'my', 'eyes', 'look', 'into', 'my', 'eyes',\n    'the', 'eyes', 'the', 'eyes', 'the', 'eyes', 'not', 'around', 'the',\n    'eyes', \"don't\", 'look', 'around', 'the', 'eyes', 'look', 'into',\n    'my', 'eyes', \"you're\", 'under'\n]\ncounter = Counter(words)\nprint(counter.most_common(1))\n输出\n[('eyes', 8)]\n讨论\nCounter对象是dict的子类，事实上内部存储也是按照k-v字典存储的，这里的v就是次数，所以Counter对象支持dict对象的所有操作\n每一个Counter对象初始化可以接受可迭代对象(iterable)、字典、关键字参数\n>>> c = Counter()                        # a new, empty counter\n>>> c = Counter('gallahad')              # a new counter from an iterable\n>>> c = Counter({'red': 4, 'blue': 2})   # a new counter from a mapping\n>>> c = Counter(cats=4, dogs=8)          # a new counter from keyword args\n此外，Counter对象还支持数学操作\n>>> c = Counter(a=3, b=1)\n>>> d = Counter(a=1, b=2)\n>>> c + d                       # add two counters together:  c[x] + d[x]\nCounter({'a': 4, 'b': 3})\n>>> c - d                       # subtract (keeping only positive counts)\nCounter({'a': 2})\n>>> c & d                       # intersection:  min(c[x], d[x]) \nCounter({'a': 1, 'b': 1})\n>>> c | d                       # union:  max(c[x], d[x])\nCounter({'a': 3, 'b': 2})\n所以在遇到跟计数有关的问题时，不妨首先考虑一下Counter对象\n来源\nPython Cookbook\n关注\n欢迎关注我的微信公众号：python每日一练\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "2"}