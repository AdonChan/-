{"title": "使用 Python 可视化命令行历史 - SegmentFault 业界资讯 ", "index": "命令行,pytagcloud,python", "content": "注：代码写得很烂，不过感觉挺好玩所以写在这里。欢迎各路大牛指教。完整代码见github/reverland/scripts/tagcloud.py\n\n曾经在linux用户中流行这么一个命令\n\n ~ $history | awk '{CMD[$2]++;count++;} END { for (a in CMD )print CMD[ a ]\" \" CMD[ a ]/count*100 \"% \" a }' | grep -v \"./\" | column -c3 -s \" \" -t |sort -nr | nl | head -n20 \n     1  852  24.3012%    sudo\n     2  376  10.7245%    pacman\n     3  163  4.64917%    vim\n     4  133  3.7935%     tsocks\n     5  101  2.88078%    cd\n     6  95   2.70964%    kill\n     7  88   2.50998%    eix\n     8  70   1.99658%    python2\n     9  70   1.99658%    emerge\n     10  69   1.96805%    ls\n     11  63   1.79692%    git\n     12  54   1.54022%    gcc\n     13  51   1.45465%    pip2\n     14  39   1.11238%    python\n     15  37   1.05533%    pip\n     16  37   1.05533%    nmap\n     17  35   0.998289%   su\n     18  32   0.912721%   xrandr\n     19  31   0.884199%   rvm\n     20  27   0.770108%   ssh\n\n\n多cool的一个命令……我完全看不懂awk啥的……几天前看The practice of computing using python，上面讲到简单的文本处理和标签云，便想到把shell history用标签云的方式可视化出来。就是这样，我啥也不会。\n\n先把shell历史定向到一个文件中吧，或者把zsh_history啥复制下\n\nhistory > hist.txt\n\n\n然后如何可视化呢？抱着有需求先搜寻有没有开源实现的想法找到了pytagcloud，稍加调整，生成的标签云相当漂亮：\n\n\n\noops!好大两个“异常词”，这么说一看我就是sudo党了，而且是经常滚的arch党……\n\n为了看清更多细节，反映更多客观事实把这两个词去掉\n\n\n\n看上去好多了………\n\npytagcloud还提供生成html数据的函数，你可以在线看看效果：\n\nDemo\n\n自己动手\n\n其实自己实现类似的效果很简单，获得更明晰的理解和灵活性。\n\n先给出以下要用的控制大小的参数，后面将直接用到它们。你可能需要多次调整来探索适合自己的数值，事实上，为了生成不同文本的标签云我试过了几十次。\n\nboxsize = 600\nbasescale = 10\nfontScale = 0.5\nomitnumber = 5\nomitlen = 0\n\n\n文本处理\n\n我们刚才保存的hits文件是这样的：\n\n2480  pacman -Ss synap\n2481  sudo pacman -S synaptiks\n2482  synaptiks\n2483  pypy\n2484  vim pypy.py\n2485  pypy pypy.py\n2486  pip2 freeze\n2487  pip2 freeze|grep flask\n2488  pip2 install Flask\n2489  pip2 install --upgrade Flask \n\n\n显然我们只要每行第二个词就行,这个任务很简单，我选择先将所有命令合并成一个大字符串，因为最开始我是直接用pytagcloud来生成标签云的，而它的示例代码用的是整个字符串：\n\ndef cmd2string(filename):\n    '''accept the filename and return the string of cmd'''\n    chist = []\n\n    # Open the file and store the history in chist\n    with open(filename, 'r') as f:\n        chist = f.readlines()\n        # print chist\n\n    for i in range(len(chist)):\n        chist[i] = chist[i].split()\n        chist[i] = chist[i][1]\n    ss = ''\n    for w in chist:\n        if w != 'sudo' and w != 'pacman':\n            ss = ss + ' ' + w\n\n    return ss\n\n\n接着将字符串转换成字典，单词为键，出现次数为值：\n\ndef string2dict(string, dic):\n    \"\"\"split a string into a dict record its frequent\"\"\"\n    wl = string.split()\n    for w in wl:\n        if w == '\\n':  # 因为后来我看到中文分词结果中有\\n...\n            continue\n        if w not in dic:\n            dic[w] = 1\n        else:\n            dic[w] += 1\n    return dic\n\n\n接下来的两个函数来自之前我提到的那本书，稍微改动下让它在firefox18下正常显示，并且稍作美化，更改为随机的字体色彩和黑色背景。\n\n这两个函数的含义是不言自明的，必要的html/css知识是需要的。\n\ndef makeHTMLbox(body, width):\n    \"\"\"takes one long string of words and a width(px) then put them in an HTML box\"\"\"\n    boxStr = \"\"\"<div style=\\\"width: %spx;background-color: rgb(0, 0, 0);border: 1px grey solid;text-align: center; overflow: hidden;\\\">%s</div>\n    \"\"\"\n    return boxStr % (str(width), body)\n\n\ndef makeHTMLword(body, fontsize):\n    \"\"\"take words and fontsize, and create an HTML word in that fontsize.\"\"\"\n    #num = str(random.randint(0,255))\n    # return random color for every tags\n    color = 'rgb(%s, %s, %s)' % (str(random.randint(0, 255)), str(random.randint(0, 255)), str(random.randint(0, 255)))\n    # get the html data\n    wordStr = '<span style=\\\"font-size:%spx;color:%s;float:left;\\\">%s</span>'\n    return wordStr % (str(fontsize), color, body)\n\n\nNow, it’s time to get the proper html files of the tag cloud!\n\n# get the html data first\nwd = {}\ns = cmd2string(filename)\nwd = string2dict(s, wd)\nvkl = [(k, v) for k, v in wd.items() if v >= omitnumber and len(k) > omitlen]  # kick off less used cmd\nwords = \"\"\nfor w, c in vkl:\n    words += makeHTMLword(w, int(c * fontScale + basescale))   \nhtml = makeHTMLbox(words, boxsize)\n# dump it to a file\nwith open(filename.split('.')[0] + '.' + 'html', 'wb') as f:\n    f.write(html)\n\n\n将以上内容写到一个文件中，命名为比如说tagcloud.py：\n\npython2 tagcloud.py hist.txt # `import sys` and let filename = sys.argv[1]\n# or `run tagcloud.py hist.txt` in ipython\n\n\n大功告成！\n\n\nby reverland\nedited by SegmentFault\nunder GNU Free Documentation License 1.2.\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "9"}