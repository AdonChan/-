{"title": "使用 Scrapy 建立一个网站抓取器 - SegmentFault 业界资讯 ", "index": "网页爬虫,hacker-news,scrapy,python", "content": "\n\nScrapy 是一个用于爬行网站以及在数据挖掘、信息处理和历史档案等大量应用范围内抽取结构化数据的应用程序框架，广泛用于工业。\n在本文中我们将建立一个从 Hacker News 爬取数据的爬虫，并将数据按我们的要求存储在数据库中。\n\n安装\n\n我们将需要 Scrapy以及  BeautifulSoup用于屏幕抓取，SQLAlchemy用于存储数据.\n如果你使用ubuntu已经其他发行版的 unix 可以通过 pip 命令安装 Scrapy。\n\npip install Scrapy\n\n\n如果你使用 Windows，你需要手工安装 scrapy 的一些依赖。\nWindows 用户需要 pywin32、pyOpenSSL、Twisted、lxml 和 zope.interface。你可以下载这些包的编译版本来完成简易安装。\n可以参照官方文档查看详情指导。\n都安装好后，通过在python命令行下输入下面的命令验证你的安装：\n\n>> import scrapy\n>>\n\n\n如果没有返回内容，那么你的安装已就绪。\n\n安装HNScrapy\n\n为了创建一个新项目，在终端里输入以下命令\n\n$ scrapy startproject hn\n\n\n这将会创建一系列的文件帮助你更容易的开始，cd 到 hn 目录然后打开你最喜欢的文本编辑器。\n在 items.py 文件里，scrapy 需要我们定义一个容器用于放置爬虫抓取的数据。如果你原来用过 Django tutorial，你会发现items.py 与 Django 中的 models.py 类似。\n你将会发现 class HnItem 已经存在了，它继承自 Item--一个 scrapy 已经为我们准备好的预定义的对象。\n让我们添加一些我们真正想抓取的条目。我们给它们赋值为Field()是因为这样我们才能把元数据(metadata)指定给scrapy。\n\nfrom scrapy.item import Item, Field\n\nclass HnItem(Item):\n    title = Field()\n    link = Field()\n\n\n没什么难的--恩，就是这样。在 scrapy 里，没有别的 filed 类型，这点和 Django 不同。所以，我们和 Field() 杠上了。\nscrapy 的 Item 类的行为类似于 Python 里面的 dictionary ，你能从中获取 key 和 value。\n\n开始写爬虫\n\n在 spiders 文件夹下创建一个 hn_spider.py 文件。这是奇迹发生的地方--这正是我们告诉 scrapy 如何找到我们寻找的确切数据的地方。正如你所想的那样，一个爬虫只针对一个特定网页。它可能不会在其他网站上工作。\n在 ht_spider.py 里，我们将定义一个类，HnSpider 以及一些通用属性，例如name 和 urls。\n首先，我们先建立 HnSpider 类以及一些属性(在类内部定义的变量，也被称为field)。我们将从 scrapy 的 BaseSpider 继承：\n\nfrom scrapy.spider import BaseSpider\nfrom scrapy.selector import Selector\n\nclass HnSpider(BaseSpider):\n    name = 'hn'\n    allowed_domains = []\n    start_urls = ['http://news.ycombinator.com']\n\n    def parse(self, response):\n        sel = Selector(response)\n        sites = sel.xpath('//td[@class=\"title\"]')\n\n        for site in sites:\n            title = site.xpath('a/text()').extract()\n            link = site.xpath('a/@href').extract()\n\n            print title, link\n\n\n前面的几个变量是自解释的 :name 定义了爬虫的名字，allowed_domains 列出了供爬虫爬行的允许域名(allowed domain)的 base-URL，start_urls 列出了爬虫从这里开始爬行的 URL。后续的 URL 将从爬虫从 start_urls 下载的数据的URL开始。\n接着，scrapy 使用 XPath 选择器从网站获取数据--通过一个给定的 XPath 从 HTML 数据的特定部分进行选择。正如它们的文档所说，\"XPath 是一种用于从XML选择节点的语言，它也可以被用于HTML\"。你也可以阅读它们的文档了更多关于XPath选择器的信息。\n\n注意\n\n在抓取你自己的站点并尝试计算 XPath 时, Chrome 的开发工具提供了检查html元素的能力, 可以让你拷贝出任何你想要的元素的 xpath. 它也提供了检测 xpath 的能力，只需要在 Javascript 控制台中使用  $x, 例如 $x(\"//img\")。 而在这个教程就不多深究这个了, Firefox 有一个插件, FirePath 同样也可以编辑，检查和生成XPath。\n我们一般会基于一个定义好的 Xpath 来告诉 scrapy 到哪里去开始寻找数据. 让我们浏览我们的 Hacker News 站点，并右击选择”查看源代码“:\n\n\n你会看到那个 sel.xpath('//td[@class=\"title\"]')  有点貌似我们见过的 HTML 的代码. 从它们的文档中你可以解读出构造 XPath  并使用相对 XPath 的方法. 但本质上,  '//td[@class=\"title\"]' 是在说: 所有的 <td> 元素中, 如果一个 <a class=\"title\"></a> 被展现了出来，那就到 <td>元素里面去寻找那个拥有一个被称作 title 的类型的 <a> 元素。\n\nparse() 方法使用了一个参数: response。 嘿，等一下 – 这个 self 是干什么的 – 看起来像是有两个参数!\n每一个实体方法(在这种情况下, parse() 是一个实体方法 ) 接受一个对它自身的引用作为其第一个参数. 为了方便就叫做“self”。\nresponse 参数是抓取器在像 Hacker News 发起一次请求之后所要返回的东西。 我们会用我们的 XPaths 转换那个响应。\n现在我们将使用 BeautifulSoup 来进行转换. Beautiful Soup 将会转换任何你给它的东西 。\n下载 BeautifulSoup 并在抓取器目录里面创建 soup.py 文件，将代码复制到其中。\n在你的 hn_spider.py文件里面引入 beautifulSoup 和来自 items.py 的 Hnitem，并且像下面这样修改转换方法。\n\nfrom soup import BeautifulSoup as bs\nfrom scrapy.http import Request\nfrom scrapy.spider import BaseSpider\nfrom hn.items import HnItem\n\nclass HnSpider(BaseSpider):\n    name = 'hn'\n    allowed_domains = []\n    start_urls = ['http://news.ycombinator.com']\n\n    def parse(self, response):\n        if 'news.ycombinator.com' in response.url:\n            soup = bs(response.body)\n            items = [(x[0].text, x[0].get('href')) for x in\n                     filter(None, [\n                         x.findChildren() for x in\n                         soup.findAll('td', {'class': 'title'})\n                     ])]\n\n            for item in items:\n                print item\n                hn_item = HnItem()\n                hn_item['title'] = item[0]\n                hn_item['link'] = item[1]\n                try:\n                    yield Request(item[1], callback=self.parse)\n                except ValueError:\n                    yield Request('http://news.ycombinator.com/' + item[1], callback=self.parse)\n\n                yield hn_item\n\n\n我们正在迭代这个items，并且给标题和链接赋上抓取来的数据。\n\n现在就试试对Hacker News域名进行抓取，你会看到连接和标题被打印在你的控制台上。\n\nscrapy crawl hn\n\n\n\n2013-12-12 16:57:06+0530 [scrapy] INFO: Scrapy 0.20.2 started (bot: hn)\n2013-12-12 16:57:06+0530 [scrapy] DEBUG: Optional features available: ssl, http11, django\n2013-12-12 16:57:06+0530 [scrapy] DEBUG: Overridden settings: {'NEWSPIDER_MODULE': 'hn.spiders', 'SPIDER_MODULES': ['hn.spiders'], 'BOT_NAME': 'hn'}\n2013-12-12 16:57:06+0530 [scrapy] DEBUG: Enabled extensions: LogStats, TelnetConsole, CloseSpider, WebService, CoreStats, SpiderState\n2013-12-12 16:57:06+0530 [scrapy] DEBUG: Enabled downloader middlewares: HttpAuthMiddleware, DownloadTimeoutMiddleware, UserAgentMiddleware, RetryMiddleware, DefaultHeadersMiddleware\n, MetaRefreshMiddleware, HttpCompressionMiddleware, RedirectMiddleware, CookiesMiddleware, ChunkedTransferMiddleware, DownloaderStats\n2013-12-12 16:57:06+0530 [scrapy] DEBUG: Enabled spider middlewares: HttpErrorMiddleware, OffsiteMiddleware, RefererMiddleware, UrlLengthMiddleware, DepthMiddleware\n2013-12-12 16:57:06+0530 [scrapy] DEBUG: Enabled item pipelines:\n2013-12-12 16:57:06+0530 [hn] INFO: Spider opened\n2013-12-12 16:57:06+0530 [hn] INFO: Crawled 0 pages (at 0 pages/min), scraped 0 items (at 0 items/min)\n2013-12-12 16:57:06+0530 [scrapy] DEBUG: Telnet console listening on 0.0.0.0:6023\n2013-12-12 16:57:06+0530 [scrapy] DEBUG: Web service listening on 0.0.0.0:6080\n2013-12-12 16:57:07+0530 [hn] DEBUG: Redirecting (301) to <GET https://news.ycombinator.com/> from <GET http://news.ycombinator.com>\n2013-12-12 16:57:08+0530 [hn] DEBUG: Crawled (200) <GET https://news.ycombinator.com/> (referer: None)\n(u'Caltech Announces Open Access Policy | Caltech', u'http://www.caltech.edu/content/caltech-announces-open-access-policy')\n2013-12-12 16:57:08+0530 [hn] DEBUG: Scraped from <200 https://news.ycombinator.com/>\n        {'link': u'http://www.caltech.edu/content/caltech-announces-open-access-policy',\n         'title': u'Caltech Announces Open Access Policy | Caltech'}\n(u'Coinbase Raises $25 Million From Andreessen Horowitz', u'http://blog.coinbase.com/post/69775463031/coinbase-raises-25-million-from-andreessen-horowitz')\n2013-12-12 16:57:08+0530 [hn] DEBUG: Scraped from <200 https://news.ycombinator.com/>\n        {'link': u'http://blog.coinbase.com/post/69775463031/coinbase-raises-25-million-from-andreessen-horowitz',\n         'title': u'Coinbase Raises $25 Million From Andreessen Horowitz'}\n(u'Backpacker stripped of tech gear at Auckland Airport', u'http://www.nzherald.co.nz/nz/news/article.cfm?c_id=1&objectid=11171475')\n2013-12-12 16:57:08+0530 [hn] DEBUG: Scraped from <200 https://news.ycombinator.com/>\n        {'link': u'http://www.nzherald.co.nz/nz/news/article.cfm?c_id=1&objectid=11171475',\n         'title': u'Backpacker stripped of tech gear at Auckland Airport'}\n(u'How I introduced a 27-year-old computer to the web', u'http://www.keacher.com/1216/how-i-introduced-a-27-year-old-computer-to-the-web/')\n2013-12-12 16:57:08+0530 [hn] DEBUG: Scraped from <200 https://news.ycombinator.com/>\n        {'link': u'http://www.keacher.com/1216/how-i-introduced-a-27-year-old-computer-to-the-web/',\n         'title': u'How I introduced a 27-year-old computer to the web'}\n(u'Show HN: Bitcoin Pulse - Tracking Bitcoin Adoption', u'http://www.bitcoinpulse.com')\n2013-12-12 16:57:08+0530 [hn] DEBUG: Scraped from <200 https://news.ycombinator.com/>\n        {'link': u'http://www.bitcoinpulse.com',\n         'title': u'Show HN: Bitcoin Pulse - Tracking Bitcoin Adoption'}\n(u'Why was this secret?', u'http://sivers.org/ws')\n2013-12-12 16:57:08+0530 [hn] DEBUG: Scraped from <200 https://news.ycombinator.com/>\n        {'link': u'http://sivers.org/ws', 'title': u'Why was this secret?'}\n(u'PostgreSQL Exercises', u'http://pgexercises.com/')\n2013-12-12 16:57:08+0530 [hn] DEBUG: Scraped from <200 https://news.ycombinator.com/>\n        {'link': u'http://pgexercises.com/', 'title': u'PostgreSQL Exercises'}\n(u'What it feels like being an ipad on a stick on wheels', u'http://labs.spotify.com/2013/12/12/what-it-feels-like-being-an-ipad-on-a-stick-on-wheels/')\n2013-12-12 16:57:08+0530 [hn] DEBUG: Scraped from <200 https://news.ycombinator.com/>\n        {'link': u'http://labs.spotify.com/2013/12/12/what-it-feels-like-being-an-ipad-on-a-stick-on-wheels/',\n         'title': u'What it feels like being an ipad on a stick on wheels'}\n(u'Prototype ergonomic mechanical keyboards', u'http://blog.fsck.com/2013/12/better-and-better-keyboards.html')\n2013-12-12 16:57:08+0530 [hn] DEBUG: Scraped from <200 https://news.ycombinator.com/>\n        {'link': u'http://blog.fsck.com/2013/12/better-and-better-keyboards.html',\n         'title': u'Prototype ergonomic mechanical keyboards'}\n(u'H5N1', u'http://blog.samaltman.com/h5n1')\n.............\n.............\n.............\n2013-12-12 16:58:41+0530 [hn] INFO: Closing spider (finished)\n2013-12-12 16:58:41+0530 [hn] INFO: Dumping Scrapy stats:\n        {'downloader/exception_count': 2,\n         'downloader/exception_type_count/twisted.internet.error.DNSLookupError': 2,\n         'downloader/request_bytes': 22401,\n         'downloader/request_count': 71,\n         'downloader/request_method_count/GET': 71,\n         'downloader/response_bytes': 1482842,\n         'downloader/response_count': 69,\n         'downloader/response_status_count/200': 61,\n         'downloader/response_status_count/301': 4,\n         'downloader/response_status_count/302': 3,\n         'downloader/response_status_count/404': 1,\n         'finish_reason': 'finished',\n         'finish_time': datetime.datetime(2013, 12, 12, 11, 28, 41, 289000),\n         'item_scraped_count': 63,\n         'log_count/DEBUG': 141,\n         'log_count/INFO': 4,\n         'request_depth_max': 2,\n         'response_received_count': 62,\n         'scheduler/dequeued': 71,\n         'scheduler/dequeued/memory': 71,\n         'scheduler/enqueued': 71,\n         'scheduler/enqueued/memory': 71,\n         'start_time': datetime.datetime(2013, 12, 12, 11, 27, 6, 843000)}\n2013-12-12 16:58:41+0530 [hn] INFO: Spider closed (finished)<pre><code>你将会在终端上看到大约 400 行的大量输出 ( 上面的输出之所以这么短，目的是为了方便观看 ).\n你可以通过下面这个小命令将输出包装成JSON格式\n</code></pre>$ scrapy crawl hn -o items.json -t json<pre><code>现在我们已经基于正在找寻的项目实现了我们抓取器。\n\n###保存抓取到的数据\n\n我们开始的步骤是创建一个保存我们抓取到的数据的数据库。打开 `settings.py` 并且像下面展现的代码一样定义数据库配置。\n</code></pre>BOT_NAME = 'hn'\n\nSPIDER_MODULES = ['hn.spiders']\nNEWSPIDER_MODULE = 'hn.spiders'\n\nDATABASE = {'drivername': 'xxx',\n            'username': 'yyy',\n            'password': 'zzz',\n            'database': 'vvv'}<pre><code>再在 `hn` 目录下创建一个 `mdels.py` 文件。我们将要使用 SQLAlchemy 作为 ORM 框架建立数据库模型。\n首先，我们需要定义一个直接连接到数据库的方法。为此，我们需要引入 SQLAlchemy 以及 `settings.py` 文件。\n</code></pre>from sqlalchemy import create_engine, Column, Integer, String\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.engine.url import URL\n\nimport settings\n\nDeclarativeBase = declarative_base()\n\ndef db_connect():\n    return create_engine(URL(**settings.DATABASE))\n\ndef create_hn_table(engine):\n    DeclarativeBase.metadata.create_all(engine)\n\nclass Hn(DeclarativeBase):\n    __tablename__ = \"hn\"\n\n    id = Column(Integer, primary_key=True)\n    title = Column('title', String(200))\n    link = Column('link', String(200))<pre><code>在开始下一步之前，我还想说明一下在 `URL()` 方法里两个星号的用法: `**settings.DATABASE`。首先，我们通过 `settings.py` 里的变量来访问数据库。这个 `**` 实际上会取出所有在 `DATABASE` 路径下的值。`URL` 方法，一个在 `SQLAlchemy` 里定义的构造器，将会把 key 和 value 映射成一个 SQLAlchemy 能明白的URL来连接我们的数据库。\n接着，`URL()` 方法将会解析其他元素，然后创建一个下面这样的将被 `create_engine()` 方法读取的 URL 。\n</code></pre>'postgresql://xxx:yyy@zzz/vvv'<pre><code>接下来，我们要为我们的ORM创建一个表。我们需要 从 SQLAlchemy 引入 `declarative_base()` 以便把我们为表结构定义的类映射到Postgres上，以及一个从表的元数据里创建我们所需要的表的方法，还有我们已经定义好的用于存储数据的表和列。\n\n\n###管道管理\n\n我们已经建立了用来抓取和解析HTML的抓取器, 并且已经设置了保存这些数据的数据库 . 现在我们需要通过一个管道来将两者连接起来.\n打开 `pipelines.py` 并引入 SQLAlchemy 的 sessionmaker 功能，用来绑定数据库 (创建那个连接), 当然也要引入我们的模型.\n</code></pre>from sqlalchemy.orm import sessionmaker\nfrom models import Hn, db_connect, create_hn_table\n\nclass HnPipeline(object):\n    def __init__(self):\n        engine = db_connect()\n        create_hn_table(engine)\n        self.Session = sessionmaker(bind=engine)\n\n    def process_item(self, item, spider):\n        session = self.Session()\n        hn = Hn(**item)\n        session.add(hn)\n        session.commit()\n        return item<pre><code>我们在这里创建了一个类, `HnPipeline()`. 我们有一个构造器函数 `def __init__(self)` 来通过定义引擎初始化这个类, hn表格，还使用定义的这个引擎绑定/连接到数据库.\n然后我们定义 `_process_item()` 来获取参数, `_item_` 和 `_spider_`. 我们建立了一个同数据库的会话, 然后打开一个我们的`Hn()` 模型中的数据项. 然后我们通过电泳 `session.add()`来将 Hn 添加到我们的数据库中  – 在这一步, 它还没有被保存到数据库中 – 它仍然处于 SQLAlchemy 级别. 然后, 通过调用 `session.commit()`, 它就将被放入数据库中，过程也将会被提交 .\n\n我们这里几乎还没有向 `settings.py` 中添加一个变量来告诉抓取器在处理数据时到哪里去找到我们的管道.\n那就在 `settings.py` 加入另外一个变量, `ITEM_PIPELINES:`\n</code></pre>ITEM_PIPELINES = {\n    'hn.pipelines.HnPipeline':300\n}\n\n\n这就是我们刚才所定义管道的目录/模块的路径.\n现在我们就可以将所有抓取到的数据放到我们的数据库中, 让我们试试看我们获取到了什么,\n再一次运行 crawl命令，并一直等到所有的处理过程完毕为止.\n万岁！我们现在已经成功地把我们所抓取到的数据存入了数据库.\n\n\n\n定时任务\n\n如果我们不得不定期手动去执行这个脚本，那将会是很烦人的. 所有这里需要加入定时任务 .\n定时任务将会在你指定的任何时间自动运行. 但是! 它只会在你的计算机处在运行状态时 (并不是在休眠或者关机的时候)，并且特定于这段脚本需要是在和互联网处于联通状态时，才能运行. 为了不管你的计算机是出在何种状态都能运行这个定时任务, 你应该将 hn 代码 和bash 脚本，还有  cron 任务放在分开的将一直处在”运行“状态的服务器上伺服.\n\n总结\n\n这是有关抓取的最简短小巧的教程，而 scrapy 拥有提供高级功能和可用性的更多特性.\n从 Github 下载整个源代码.\n\n\n\n原文：Build a Website Crawler based upon Scrapy\n转自：开源中国社区 - LeoXu, BoydWang, Garfielt\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "17"}