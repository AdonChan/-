{"title": "sqlalchemy使用上的小tip - Hello World ", "index": "sqlalchemy,python", "content": "GitHub地址: https://github.com/honmaple/maple-json\n\nsqlalchemy object序列化为json\n灵感来源于 Django REST framework\n\n多个实例\nposts = Post.query.all()\nserializer = Seralizer(posts,many=True)\ndata = serializer.data\n\n\n单个实例\npost = Post.query.first()\nserializer = Seralizer(post,many=False)\ndata = serializer.data\n\n\n排除字段\nserializer = Seralizer(post,exclude=['title'])\n\n\n仅包括字段\nserializer = Seralizer(post,include=['title'])\n\n\n关系查询深度\nserializer = Seralizer(post,depth=3)\n\n\ndepth\n默认为2\n\n\n\n增加一些自定义的函数\nserializer = Serializer(post,extra=['get_post_count'])\n\nPost\nclass Post(Model):\n    ......\n    def get_post_count(self):\n        return 11\n\n\n可传递参数的函数\nclass PostSerializer(Serializer):\n    count = Field(source = 'get_post_count',args={'name':'hello'},default=20)\n    class Meta:\n        include = []\n        depth = 2\n        include = []\n        exclude = []\n        extra = ['count']\n\n\n像django orm一样使用sqlalchemy\ndjang orm与sqlalchemy相比,为什么很多人都认为django orm更好用,大概就是因为django orm更方便\n\n基本查询(已实现)\n\ngt\nlt\nlte\ngte\ncontains\nin\nexact\niexact\nstartswith\nistartswith\niendswith\nendswith\nisnull\nrange\nyear\nmonth\nday\n\n示例:\nPost.query.filter_by(title__contains = 'sql').all()\nPost.query.exclude_by(title__contains = 'sql').all()\n\n\n关系查询\nPost.query.filter_by(tags__name__contains = 'sql').all()\n\n\n其它\nPost.query.filter_by(tags__name__contains = 'sql').or(Post.id == 1,Post.id == 2).all()\nPost.query.filter_by(tags__name__contains = 'sql').and(Post.id == 1,Post.id == 2).all()\nPost.query.filter_by(tags__name__contains = 'sql').exists()\nPost.query.load_only('title')\n\n\n去掉一些sqlalchemy的重复工作\n以flask-sqlalchemy为例,通过继承 models.py 中的Mixin,就可以去除部分重复工作\n\nModelMixin\n自增ID – id\npost = Post(·····)\npost.save() # 保存\npost.delete() # 保存\n\n批量操作\n\nbulk_insert\nbulk_update\nbulk_save\n\n\nModelTimeMixin\n增加两字段\n\n\ncreated_at\n数据创建时间\n\n\nupdated_at\n数据更新时间\n\n\n\n\nModelUserMixin\n关联用户表,与User表现为多对一关系(即一个用户有多个post)\nclass Post(ModelUserMixin, Model):\n\n    user_related_name = 'posts'\n    titile = ...\n\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "1"}