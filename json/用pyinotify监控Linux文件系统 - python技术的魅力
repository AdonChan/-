{"title": "用pyinotify监控Linux文件系统 - python技术的魅力 ", "index": "python", "content": "模块事件\n\n过程\nwm = pyinotify.WatchManager()  创建监控实例wm.add_watch(path, pyinotify.ALL_EVENTS, res=True)  # 添加监控的对象notifier = pyinotify.Notifier(wm, ev)  # 绑定一个事件notifier.loop()  # 运行监控\nsys模块\nsys.argv  位置参数\n例子:监控linux下文件系统\n代码如下:\n#!/usr/bin/env python\n# _*_ coding:utf-8 _*_\n__author__ = 'junxi'\n\nimport os\n\nfrom pyinotify import WatchManager, Notifier, ProcessEvent, IN_DELETE, IN_CREATE, IN_MODIFY\n\n\nclass EventHandler(ProcessEvent):\n    \"\"\"事件处理\"\"\"\n\n    def process_IN_CREATE(self, event):\n        print(\"Create file: % s\" % os.path.join(event.path, event.name))\n\n    def process_IN_DELETE(self, event):\n        print(\"Deletefile: % s\" % os.path.join(event.path, event.name))\n\n    def process_IN_MODIFY(self, event):\n        print(\"Modifyfile: % s\" % os.path.join(event.path, event.name))\n\n\ndef FSMonitor(path):\n    wm = WatchManager()\n\n    mask = IN_DELETE | IN_CREATE | IN_MODIFY\n\n    notifier = Notifier(wm, EventHandler())\n\n    wm.add_watch(path, mask, auto_add=True, rec=True)\n\n    print('now starting monitor % s' % (path))\n\n\n    while True:\n\n        try:\n            notifier.process_events()\n\n            if notifier.check_events():\n\n                notifier.read_events()\n\n        except KeyboardInterrupt:\n\n            notifier.stop()\n\n            break\n\nif __name__ == \"__main__\":\n    FSMonitor('/root')\n\n查看结果: \n\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}