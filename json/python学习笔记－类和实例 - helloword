{"title": "python学习笔记－类和实例 - helloword ", "index": "python", "content": "面向对象最重要的概念应该就是类(class)和实例(instance)了。记得以前学习java的时候，有一个比较简单的例子来解释类和实例。在汽车制造过程中，我们需要先设计图纸，让后再根据图纸来制造实际的汽车。类就相当于图纸，而实例则是实际的汽车。一张图纸可以造出很多汽车，刚造出的汽车是一样的，但是后续可以进行个性化的改装。python可以根据class在内存中创建多个实例，每个实例可以独立地添加和修改方法和属性。\n定义类\nclass Car(Vehicle):\n    pass\n我们来说明一下，class关键词来声明这是一个类，紧接着就是类名。后接一个()，里面是该类所继承的父类。在2.7中，一个类如果没有继承其它类，则可以另其继承object类。那么这样定义的就是一个new style object，即新式类。如果不声明继承自何类，那么定义的则是经典类。例如：\n# 定义新式类\nclass Student(object):\n    pass\n\n# 定义经典类    \nclass Student2:\n    pass\n新式类和经典类的区别出了写法不一样外，还存在其它区别：\n\n新式类的类型是type，经典类的类型是classobj。新式类的出现就是为了将所有类的类型统一为type。\n对于多继承，继承搜索的顺序发生了改变。（这里不懂）\n默认属性发生了改变\n可能还有其它\n\nPython 3.x以上版本所有的类均是新式类，不需要显式地继承object。\n__init__构造函数\n类中可以定义一个构造函数__init__。构造函数的意思就是类在创建的时候会执行的函数。__init__函数的第一参数是self，指实例本身。__init__函数还可以有多个参数，这些参数需要在实例创建的时候传入。例如：\nclass Student(object):\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n\n__init__函数经常用于对实例属性进行初始化。\n类中的函数\n类中的函数也叫做方法。方法与其它函数有所区别，即方法的第一个参数永远是self，即实例本身。创建实例后，在调用方法是，并不需要传入实例，因为编译器为自动为我们加入实例。例如：\nclass Student(object):\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n\n    # 方法的第一个参数是self\n    def print_name(self):\n        print self.name\n\nstudent = Student(\"charlie\", 20, 'male')\n\n＃调用函数的时候，并不需要手动传入实例student\nstudent.print_name()\n\n两个特殊的函数\nclassmethod和staticmethod。简单粗浅地说，可以理解成：\n\nclassmethod的是定义一些仅仅跟类有关，但是跟实例无关的方法。\nstaticmethod是一些跟类有关系的功能，但是其具体的实现却又不需要用到类或者实例的参与。staticmethod叫做静态方法。\n\n更多解释和例子，可以阅读知乎上的回答：https://www.zhihu.com/questio...\n类的属性\n属性就更加好理解了。例如我们设计一张制造冰箱的图纸，我们除了定义冰箱的功能(类的方法)外，还需要定义冰箱的颜色、长、宽、高、等属性。类也一样。\nclass Fridge(object):\n    color = 'yellow'\n    height = 120\n    width = 30\n    food = 'fish'\n\n    def storage(self):\n        print \"keep %s fresh\" % self.food\n\nfridge = Fridge()\nfridge.storage()\n类的封装性\n上面我们讲了这么多类的特性，其实类就是一个数据类型。我们把一种数据类型封装成一个类。例如一个学生具有姓名、年龄、性别等属性，另外他也有书写姓名、读书识字等功能。我们可以把一个Student所有的属性和功能看成一个整体，那么这就是一个类。这个类就是与python中内置的其它数据类型一样的数据类型，只不过这是我们自定义的，叫Student。\n创建实例\n创建实例的方法十分简单。即：\nstudent = Student(括号内传入在__init__函数中定义的参数)\npython是一门动态语言。创建好的实例可以自由地添加属性。在类中声明的read-only的属性，在实例中不能del。在实例中通过构造函数添加的或者在类外动态添加的属性可以del。类中的read-only属性只能通过类属性的形式删除。\nclass Fridge(object):\n    color = \"yellow\"\n    width = 20\n\n    def __init__(self, height):\n        self.height = height\n\n    def storage(self):\n        print \"keep %s fresh\"\n\nfridge = Fridge(100)\nfridge.name = \"Haier\"\n\ndel fridge.color # AttributeError 报错\ndel fridge.height\ndel fridge.name\ndel Fridge.width\n\n怎么给实例或类动态添加方法？先挖个坑，学习了再写。\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "7"}