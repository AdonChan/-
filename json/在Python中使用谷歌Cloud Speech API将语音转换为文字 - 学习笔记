{"title": "在Python中使用谷歌Cloud Speech API将语音转换为文字 - 学习笔记 ", "index": "google,api,语音,文字,python", "content": "之前我们总结了使用谷歌Cloud Speech API将语音转换为文字的基本流程，然而那只是在命令行中使用curl实现的。这次我们将总结在Python中使用Cloud Speech API的方法。\n配置Python开发环境\n笔者使用的是树莓派（Debian）进行试验的，其他平台的配置方法可以在这里查找。\n安装Python\n大多数Linux发行版都包含Python。对于Debian和Ubuntu，运行以下指令确保Python版本是最新的：\nsudo apt update\nsudo apt install python python-dev python3 python3-dev python-pip python3-pip\n安装和使用virtualenv\n尽管这一步不是必须的，但强烈建议你使用virtualenv。virtualenv是一种创建独立Python环境的工具，可以将每个项目的依赖关系隔离开来。在虚拟环境下，你可以不必顾虑python2和python3的冲突；另外一个优势是可以直接将你的项目文件夹复制到其他机器上，文件夹内就包含了项目所依赖的软件包。\nsudo apt install python-virtualenv\n安装完成后，就可以在你的项目文件夹中创建一个虚拟环境。\ncd 项目文件夹\nvirtualenv --python python3 env\n使用 --python 标志来告诉virtualenv要使用哪个Python版本，这次试验将全程以python3环境进行。执行后会在 项目文件夹 内创建一个 env 文件夹。\n创建完成后，你需要“激活”virtualenv。激活virtualenv会告诉你的shell为Python使用virtualenv的路径。\nsource env/bin/activate\n看到激活虚拟环境后，你就可以放心地安装软件包，并确信它们不会影响其他项目。\n\n如果你想停止使用virtualenv并返回到全局Python环境，你可以关闭它：\ndeactivate\n配置Cloud Speech API客户端库\n我们假定你已经有合适的代理，能够使用谷歌服务，并且已经开始使用Google云平台。如果你有疑问，或许可以参考这篇文章。\n安装客户端库\n如果你安装了virtualenv，请确保激活了虚拟环境。\npip install --upgrade google-cloud-speech\n值得一提的是，笔者使用的树莓派在安装进行到 Running setup.py bdist_wheel for grpcio ... 时停留了非常久（10分钟以上），这属于正常现象，树莓派编译进行得很慢，需要耐心等待。\n设置验证\n登录谷歌云平台控制台，前往创建服务账号密钥界面。\n从 服务帐户 下拉列表中选择 新建服务帐户 。输入合适的 服务帐号名称 ， 角色 选择 Project → 所有者 。 密钥类型 选择 JSON 。\n\n点击 创建 后，会开始下载包含密钥的JSON文件，请妥善保存 。\n最后，将环境变量 GOOGLE_APPLICATION_CREDENTIALS 设置为含密钥的JSON文件的文件路径，例如：\nexport GOOGLE_APPLICATION_CREDENTIALS=\"/home/pi/speech/speech-account.json\"\n请将 /home/pi/speech/speech-account.json 替换为你的json文件路径。\n当然，直接输入上述命令设置的环境变量是临时的。一个比较实用的方法是在 ~/.bashrc 文件中设置环境，之后就不需要再手动设置了。\nsudo nano ~/.bashrc\n在文件末尾插入上述 export 命令，保存。\n使用客户端库\n下例给出了使用客户端库的方法。\nimport io\nimport os\n\n# Imports the Google Cloud client library\nfrom google.cloud import speech\nfrom google.cloud.speech import enums\nfrom google.cloud.speech import types\n\n# Instantiates a client\nclient = speech.SpeechClient()\n\n# The name of the audio file to transcribe\nfile_name = os.path.join(\n    os.path.dirname(__file__),\n    'voice.wav')\n\n# Loads the audio into memory\nwith io.open(file_name, 'rb') as audio_file:\n    content = audio_file.read()\n    audio = types.RecognitionAudio(content=content)\n\nconfig = types.RecognitionConfig(\n    encoding=enums.RecognitionConfig.AudioEncoding.LINEAR16,\n    sample_rate_hertz=16000,\n    language_code='cmn-Hans-CN')\n\n# Detects speech in the audio file\nresponse = client.recognize(config, audio)\n\nfor result in response.results:\n    print('Transcript: {}'.format(result.alternatives[0].transcript))\n    print('Confidence: {}'.format(result.alternatives[0].confidence))\n几点说明：\nfile_name 给出了声音文件的路径。其中 os.path.dirname(__file__) 表示py代码所在文件夹的路径。故上例中声音文件是py代码相同目录下的 voice.wav 。\nconfig 给出了声音文件的编码信息，Cloud Speech API并不支持任意格式的声音文件，详细要求参见：AudioEncoding | Google Cloud Speech API 。\nlanguage_code='cmn-Hans-CN' 表示识别语言为中文普通话。常用的还有American English (en-US)、British English (en-GB)、日本語(ja-JP)、廣東話(yue-Hant-HK)。更多语言支持可以在Language Support | Google Cloud Speech API查询。\n运行结果：\n\n\"Confidence\"是置信度，越接近1准确性越高。\n小结\n至此，Cloud Speech API的使用总结就告一段落了，希望能对你有所帮助。这篇总结是参照着Google Cloud Speech API文档写下的，如果有何纰漏恳请指出。\n感谢你阅读文章！\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}