{"title": "由 sort 中 key 的用法浅谈 python - Just For Fun ", "index": "python", "content": "用 Python 时间也算不短了，但总感觉自己在用写 C++ 代码的思维写 Python，没有真正用到其作为脚本语言的优势。之前刷 LeetCode 时，自己的 Python 代码总是很长，很像披着 Python 外衣的 C++ 代码（放在这里，不断重构中）。\n\n想来大概是因为觉得python简单，平时只是零零碎碎的学习，也没有去读别人的代码，导致掌握的不够深入。回想起前段时间的面试，面试官看我简历写熟悉Python，就问了两个Python的问题：\n\nPython 中常用的优化技巧（能够提升 Python 执行效率的，除了算法层面）\n按照 value 从小到大输出 dict 中的 key-value值。\n\n我支支吾吾半天，就是没有答到点上，直接导致被拒（后来整理的内容放在这里）。所谓知耻而后勇，经过一段时间对 Python 的重新学习，才慢慢发现 Python 的一些强大与美妙之处。\n从排序说起！\n程序中经常用到排序函数，Python 提供了 sort 和 sorted 函数，一个原地排序，一个返回排序后的新结果，函数原型很简单：\nsort([cmp[, key[, reverse]]])\n\n自己用的最多的类似下面的语句：\n>>> l = [43, 12, 4, 6]\n>>> l.sort()\n>>> l\n[4, 6, 12, 43]\n曾经窃以为这就体现了 Python 的简单优雅，不像 C++ STL中那样还需要指定迭代器范围，然后对 sort 的理解也就止步于此。后来遇到稍微复杂一点的排序场景，自己就 Google-Stackoverflow-Copy，解决了眼前的问题，但是从来没有去深挖（这也就导致那次面试中中没有回答出来上面的第二个问题）。\nsort 之美\n后来去看了下 sort 的函数说明，包括 cmp, key, reverse 参数究竟怎么去用，又写了几个例子，以为这下子对 sort 可谓是理解透彻了。比如要要根据值的大小输出字典内容，那么就可以像下面这样优雅地解决：\n>>> d = {1: 'z', 2:'y', 3: 'x'}\n>>> print sorted(d.items(), key=lambda x: x[1])\n[(3, 'x'), (2, 'y'), (1, 'z')]\n我甚至可以得到一个根据value排序的字典，只需要用 collections.OrderedDict 即可：\n>>> from collections import OrderedDict\n>>> sorted_d = OrderedDict(sorted(d.items(), key=lambda x: x[1]))\n>>> sorted_d\nOrderedDict([(3, 'x'), (2, 'y'), (1, 'z')])\nsort 之魅\n我以为我对 sort 理解足够了，直到在 hackerrank 遇到这个题目。\n给定一个只包含大小写字母，数字的字符串，对其进行排序，保证：\n\n所有的小写字母在大写字母前面\n所有的字母在数字前面\n所有的奇数在偶数前面\n\n考虑用 sort 函数来完成排序。开始之前，再来看看文档对sort函数中key的说明：\nkey parameter to specify a function to be called on each list element prior to making comparisons.  The value of the key parameter should be a function that takes a single argument and returns a key to use for sorting purposes.\n通俗讲，key 用来决定在排序算法中 cmp 比较的内容，key 可以是任何可被比较的内容，比如元组（python 中元组是可被比较的）。所以上面的排序问题可以用下面的代码来解决：\n>>> s = \"Sorting1234\"\n>>> \"\".join(sorted(s, key=lambda x: (x.isdigit(), x.isdigit() and int(x) % 2 == 0, x.isupper(), x.islower(), x)))\n'ginortS1324'\n这里，lambda 函数将输入的字符转换为一个元组，然后 sorted 函数将根据元组（而不是字符）来进行比较，进而判断每个字符的前后顺序。\n如果同样的程序用 C++ 来写的话，可能需要一个复杂的仿函数，来定义排序的规则，远没有 Python 这般简洁优雅。\n再探 Python\nPython 是一门简单方便的语言，相信这是大部分人对 Python 的第一感觉。初学 Python，我们可能痴迷于 Python 的列表解析，list 切片，字典推导，或者是陶醉在各种强大的第三方库里，比如网络库 requests，科学计算库 numpy，web开发框架 Django 等。\n但是实际写程序中，我们经常会写出许多繁杂的、丑陋的Python代码。比如要判断一个数字是否是回文数字，可能会习惯性地写出下面这样的代码：\ndef isPalindrome(x):\n    if x < 0:\n        return False\n    reversed_x = 0\n    original_x = x\n    while x > 0:\n        reversed_x = reversed_x * 10 + x % 10\n        x /= 10\n    return reversed_x == original_x\n\n仔细一看，这简直就是 C++ 代码，完全没有 Python 的优雅与简单。那么，该怎样写才能够显的 Pythonic 呢？其实，用 Python 的话只要一行就可以啦（这里不考虑效率，如果考虑效率的话，C++会更加合适，单对这题来说，其实有比上面更高效的方法）！\ndef isPalindrome(x):\n    return x >= 0 and str(x) == str(x)[::-1]\n\n那么如何养成用 Pythonic 的思维解决问题呢？我觉得首先要对 Python 十分熟悉，精通大部分函数以及 Python 的特色：比如装饰器，迭代器，生成器以等，下面举几个简单的例子：\n# 函数式编程\n>>> nums = map(int, \"123456789\" )\n>>> nums\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])\n15\n>>> sum(nums)\n45\n# 生成器\n>>> mygenerator = (x*x for x in range(3))\n>>> for i in mygenerator:\n...     print i\n...\n0\n1\n4\n>>> for i in mygenerator:\n...     print i\n...\n# lambda 匿名函数\n>>> c = lambda *z: z\n>>> c( 10, 'test')\n(10, 'test')\n# 迭代\n>>> l = [i**2 for i in range(9)]\n>>> l_iter = iter(l)\n>>> next(l_iter)\n0\n>>> next(l_iter)\n1\n>>> next(l_iter)\n4\n# 数据结构 set\n>>> set_a = set([i for i in range(1,9,2)])\n>>> set_b = set([i for i in range(0,9,2)])\n>>> print set_a | set_b\nset([0, 1, 2, 3, 4, 5, 6, 7, 8])\n其次，要多读一些 Pythonic 的代码，学习别人如何优雅地使用python。这里我推荐去看 Leetcode 的 Discuss，里面有许多惊才艳艳的代码。特别推荐 @StefanPochmann，许多代码让我获益匪浅，比如这里对 iter() 的使用。\n再来看一个问题，按照二进制位反转 32 位的一个整形无符号数字。用 Python 可以写出很简单直观的代码，如下：\ndef reverseBits(n):\n    bit_str = '{0:032b}'.format(n)\n    reverse_str = bit_str[::-1]\n    return int(reverse_str, 2)\n\n当然，上面不考虑效率，这里有一个利用分治法思想的高效的方法。\nPython 是一门高效、简单、方便的语言，但这并不意味你不花时间就可以用的很好。\n更多文章\n更多阅读\nSorting Mini-HOW TO  sort()中cmp参数的用法  hackerrank: ginortS  Sort a Python dictionary by value  Python高级编程技巧\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "16"}