{"title": "python学习笔记02-数据类型 - Python学习笔记 ", "index": "python", "content": "\n0. 基本数据类型\n基本数据类型比较简单，通过以下例子演示：\nprint(type(1))\nprint(type(1.0))\nprint(type(True))\nprint(type(False))\nprint(type(-1 + 2j))\n运行结果如下：\n<class 'int'>\n<class 'float'>\n<class 'bool'>\n<class 'bool'>\n<class 'complex'>\n1.通用序列操作\n1.1 索引-indexing\n通过索引获取序列的单个元素，也可以使用负数索引。从左向右索引从0开始，从右向左索引从-1开始。\ngreeting = 'HelloWrold'\nprint(greeting[0])  # H\nprint(greeting[-1]) # d\n1.2 分片-sliceing\n分片操作用于提取序列的一部分。相当于[)半开区间提取。\nL = [1,2,3,4,5,6,7,8,9,10]\nprint(L[0:1]) # [1]\nprint(L[-3:-1]) # [8,9] \nprint(L[3:]) # [8,9,10]\nprint(L[:3]) # [1,2,3]\nprint(L[:]) # [1,2,3,4,5,6,7,8,9,10]\n设置参数步长，负数步长表示从右侧开始提取元素。\nprint(L[::4]) # [1,5,9]  每4个元素取第一个\nprint(L[::-2]) # [10,8,6,4,2]  每2个元素取第一个,反向提取\nprint(L[10:0:-2]) # [10,8,6,4,2]  每2个元素取第一个,反向提取\nprint(L[0:10:-2]) # []  \nprint(L[8:3:-1]) # [9,8,7,6,5]\nprint(L[5::-2]) # [6,4,2]\nprint(L[:5:-2]) # [10,8]\n1.3 加-adding\n通过使用+号进行序列的连接操作。\n注意：相同类型的序列才可以进行连接操作。\n[1,2,3] + [4,5,6] # [1,2,3,4,5,6]\n'hello' + 'world' # 'helloworld'\n1.4 乘-multiplying\n序列可以通过乘以数字，来生成新的序列。\n'py' * 5 # 'pypypypypy'\n[1,2,3] * 2 # [1,2,3,1,2,3]\n1.5 长度，最小值和最大值\nlen([1,2,3]) # 3\nmin([1,2,3]) # 1\nmax([1,2,3]) # 3\n2. 列表\n列表是可变的(mutable)-可以改变列表的元素。\n2.1 创建列表\n可以通过list函数创建列表。\n# 通过字符串创建列表\nl = list('Hello') # ['H','e','l','l','o']\n# 将字符列表转换为字符串\ns = ''.join(l) # Hello\n2.2 修改列表\n# 1.元素赋值\nl = [1,2,3]\nl[1] = 5\nprint(l) # [1,5,3]\n\n# 2.删除元素\ndel l[1] # [1,3]\n\n# 3.分片赋值\nname = list('peter')\nname[1:] = list('ython')\nprint(name) # ['p','y','t','h','o','n']\n\nnum = [1,5]\nnum[1:1] = [2,3,4] # 插入元素\nprint(num)  # [1,2,3,4,5]\n\nnum[1:4] = [] # 删除元素\nprint(num) # [1,5]\n2.3 列表方法\n\n\n方法\n描述\n\n\n\nappend()\n在列表末尾追加元素\n\n\ncount()\n统计某个元素在列表中出现的次数\n\n\nextend()\n用新列表扩展旧列表\n\n\nindex()\n获取元素在列表中第一个匹配项的位置\n\n\ninsert()\n将元素插入列表\n\n\npop()\n从列表移除元素，默认最后一个\n\n\nremove()\n移除列表中第一个匹配项\n\n\nreverse()\n列表元素反向\n\n\nsort()\n排序\n\n\n\n3. 元组\n元组是一种不能修改的序列。它的操作和方法与列表类似。\n3.1 创建\n(1,)\n() #空元组\ntuple([1,2,3]) # (1,2,3)\ntuple('abc')  #('a','b','c')\n3.2 元组方法\n\n\n方法\n描述\n\n\n\ncount()\n统计某个元素在列表中出现的次数\n\n\nindex()\n返回指定元素的索引\n\n\n\n4. 字典\n字典的常用操作\nd = {'a': 1, 'b': 2, 1: 'one', 2: 'two', 3: [1, 2, 3]}\nprint(type(dict))\nprint(type(d))\nprint(d)\n\n# 访问元素\nprint(d['a'])\nprint(d[1])\nprint(d[3])\n\n# 判断key是否存在\nprint('two' in d)\nprint(3 in d)\ndel(d[3])   # del(dict[key])\n\nprint(len(d)) #键值对的个数\n\nd[3] = [1, 2, 3, 4]\nd[3] = '1234'\n\nprint(d.keys()) #返回一个包含字典所有KEY的列表\nprint(d.values()) #返回一个包含字典所有value的列表\nprint(d.items()) #返回一个包含所有（键，值）元祖的列表\n\n# 判断\n#dict.has_key(key)如果key在字典中，返回True，否则返回False\nprint(d.has_key('a')\n\n# 遍历\nfor key in d:\n    print(d[key])\nprint('...')\nfor k, v in d.items():\n    print(k, v)\nprint('...')\nkeys = d.keys()\nprint(type(keys))\nprint(keys)\n4.1 字典方法\n\n\n方法\n描述\n\n\n\nitems()\n将字典转换为键，值作为元组的列表\n\n\nkeys()\n键列表\n\n\nvalues()\n值列表\n\n\nclear()\n清除所有元素\n\n\ncopy()\n深复制\n\n\nupdate()\n在原字典上合并字典，键相同的会被覆盖\n\n\nget()\n取得某个键对应的值\n\n\npopitem()\n随机弹出键值对pop()\n随机弹出某个键值对\n\n\n\n5. 集合\n集合常见操作\ns1 = set([1,2,2,3,3,4,5,6,7])\ns2 = set([4,5,6,7,8,9])\n\n# 判断元素是否存在\nprint(5 in s1)\nprint(10 in s2)\n\n# 并集\nprint(s1 | s2)\nprint(s1.union(s2))\n\n\n# 交集\nprint(s1 & s2)\nprint(s1.intersection(s2))\n\n# 差集 A - (A&B)\nprint(s1 - s2)\nprint(s1.difference(s2))\n\n# 对称差 (A | B) - (A & B)\nprint(s1 ^ s2)\nprint(s1.symmetric_difference(s2))\n\n# 修改元素\ns1.add('x')\ns1.update([4,5,10,11])\nprint(s1)\ns1.remove(11)\nprint(s1)\n\nprint(len(s1))\n\n结果\nTrue\nFalse\n{1, 2, 3, 4, 5, 6, 7, 8, 9}\n{1, 2, 3, 4, 5, 6, 7, 8, 9}\n{4, 5, 6, 7}\n{4, 5, 6, 7}\n{1, 2, 3}\n{1, 2, 3}\n{1, 2, 3, 8, 9}\n{1, 2, 3, 8, 9}\n{1, 2, 3, 4, 5, 6, 7, 10, 11, 'x'}\n{1, 2, 3, 4, 5, 6, 7, 10, 'x'}\n9\n5.1 集合方法\n\n\n方法\n描述\n\n\n\nadd()\n添加元素\n\n\npop()\n弹出元素\n\n\nupdate()\n合并集合\n\n\n\n6. 字符串\n字符串是 Python 中最常用的数据类型。我们可以使用引号('或\")来创建字符串。创建字符串很简单，只要为变量分配一个值即可。例如：\nvar1 = 'Hello World!'\nvar2 = \"Python Runoob\"\n6.1 原始字符串\n原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。 原始字符串除在字符串的第一个引号前加上字母\"r\"（可以大小写）以外，与普通字符串有着几乎完全相同的语法。\n>>> r'hello/n'\nhello/n\n6.2 Unicode字符串\nPython 中定义一个 Unicode 字符串和定义一个普通字符串一样简单：\n>>> u'Hello World !'\nu'Hello World !'\n引号前小写的\"u\"表示这里创建的是一个 Unicode 字符串。如果你想加入一个特殊字符，可以使用 Python 的 Unicode-Escape 编码。如下例所示：\n>>> u'Hello\\u0020World !'\nu'Hello World !'\n被替换的 u0020 标识表示在给定位置插入编码值为 0x0020 的 Unicode 字符（空格符）。\n6.3 字符串常用操作\nimport string\n# 去除空格\ns = '  hello python  '\nprint(s.strip())  # 删除两边的空格\nprint(s.lstrip()) # 删除左边的空格\nprint(s.rstrip()) # 删除右边的空格\nprint(s)\n\n# 连接字符串\ns1 = 'hello'\ns2 = 'python'\nprint(s1 + ' ' + s2)\n\n# 大小写\nstr_1 = 'HeLloWorlD'\nprint(str_1.upper())\nprint(str_1.lower())\nprint(str_1.capitalize()) # 首字母大写\n\n# 位置和比较\nstr1 = 'abcdefg'\nstr2 = 'abdefgh'\nprint(str1.index('c'))\nprint(str1.index('de'))\ntry:\n    print(str1.index('dd'))\nexcept ValueError:\n    print('ValueError:substring not found')\n\n    # 比较\n    print(str1 == str2)\n    print(str1 > str2)\n    print(str1 < str2)\n\n\n# 分割和连接\ns = 'I,Love,Python'\nprint(s.split(','))\nnum = '123\\n456\\n789'\nnums = num.splitlines() # 按行分割\nprint(nums)\nprint('-'.join(nums))\nprint(' '.join(s.split(',')))\n\n# 字符串长度\nprint(len('abcd'))\n\n# 数字转字符串\nprint(str(10))\nprint(str(10.0))\nprint(str(-10))\nprint(int('123'))\n\n# 格式化字符串\nprint('Hello %s!' %'python')\nprint('%d %.2f %s' %(10,1.2,'python'))\n\n# 常用判断\ns_1 = 'abcdefg'\nprint(s_1.startswith('abc')) # 是否以'abc'开头\nprint(s_1.endswith('efg'))   # 是否以'efg'结尾\nprint('abc123'.isalnum()) # 是否正常字母和数字\nprint('\\tabc123'.isalnum()) # 有转义字符\nprint('abc'.isalpha()) # 是否字母\nprint('123'.isdigit()) # 是否数字\nprint(' '.isspace())   # 是否空格\nprint('abc'.islower()) # 是否小写\nprint('ABC'.isupper()) # 是否大写\nprint('Hello World!'.istitle()) # 是否标题(检测字符串中是否所有单词首字母大写，且其他字母小写)\n结果如下:\nhello python\nhello python  \n  hello python\n  hello python  \nhello python\nHELLOWORLD\nhelloworld\nHelloworld\n2\n3\nValueError:substring not found\nFalse\nFalse\nTrue\n['I', 'Love', 'Python']\n['123', '456', '789']\n123-456-789\nI Love Python\n4\n10\n10.0\n-10\n123\nHello python!\n10 1.20 python\nTrue\nTrue\nTrue\nFalse\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nEnd\n以上主要介绍了常用数据类型的简单使用，具体用法还需多多实践。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}