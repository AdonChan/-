{"title": "1-django简介和基本流程走通 - Python全栈玩起来 ", "index": "django,python", "content": "Django简介\nDjango是一个开放源代码的Web应用框架，由python写成，初次发布于2005年7月，并于2008年9月发布了第一个正式版本1.0\nMVC：MVC是一种软件设计典范，核心思想是解耦\nMVC优点：降低各功能模块之间的耦合性，方便变更，更容易重构代码，最大程度上实现了代码重用\nMVC 图解\n\nModel（模型）：是应用程序中用于处理程序逻辑的部分，负责数据库中存储数据\nView（视图）：是应用程序中处理数据显示的部分，通常视图是依据模型数据创建的\nController（控制器）：是应用程序中处理用户交互的部分，通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据\nDjango的MTV\n本质与MVC模式没有区别，只是定义形式不同\nModel（模型）：负责业务对象与数据库的对象（ORM）\nTemplate（模板）：负责如何把页面展示给用户\nView（视图）：负责业务逻辑，并在适当的时候调用Model和Template\nMTV图解\n\n创建工程\n# 黑屏终端，进入指定目录 创建工程\ndjango-admin  startproject  project\n\n基本操作\n数据库配置\nDjango默认使用SQLite数据库，如果需要使用如mysql等数据库需要在setting.py文件中配置\n配置SQL\n在__init__.py文件中增加代码(py2.x无需操作)\n# __init__.py\nimport pymysql pymysql.install_as_MySQLdb()\n# settings.py\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'py03',\n        'USER':'root',\n        'PASSWORD':'123456',\n        'HOST':'localhost',\n        'PORT':'3306',\n    }\n}\n\n-------\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': '数据库名称',\n        'USER': '用户名',\n        'PASSWORD': '密码',\n        'HOST': '数据库服务器ip',\n        'PORT': '端口号',\n    }\n}\n创建应用\n在一个工程中可以创建一个到多个应用，每个应用处理一种业务逻辑\n打开黑屏终端进入工程目录下 python manage.py startapp myApp\n目录结构：\n├── db.sqlite3   # 数据库\n├── myApp   # 一个应用\n│   ├── admin.py  # 管理\n│   ├── apps.py   # 应用的配置\n│   ├── __init__.py\n│   ├── migrations  # model到数据库映射的中间文件\n│   │   └── __init__.py\n│   ├── models.py  # model\n│   ├── tests.py   # 在这里可以写测试代码\n│   └── views.py   # 视图\n├── project  #  创建项目时创建的目录\n│   ├── __init__.py\n│   ├── settings.py  # 项目的配置文件\n│   ├── urls.py  # 根路由\n│   └── wsgi.py   \n└── manage.py\n# setting.py\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myApp',\n]\n启动服务\npython  manage.py  runserver  ip:port\nip可以不写 python  manage.py  runserver\n端口默认8000，可以单独修改 python  manage.py runserver port\n定义模型\nmodeles.py\nfrom django.db import models\n# Create your models here.\n\nclass Grade(models.Model):\n    name = models.CharField(max_length=20)\n    boyNum = models.IntegerField()\n    girlNum = models.IntegerField()\n    isDelete = models.BooleanField(default=False)\n\n    def __str__(self):\n        return self.name\n\n\nclass Student(models.Model):\n    name = models.CharField(max_length=20)\n    sex = models.BooleanField()\n    age = models.IntegerField()\n    content = models.CharField(max_length=40)\n    # 关联类名的小写加引号或者直接类名\n    grade = models.ForeignKey('grade')\n    isDelete = models.BooleanField(default=False)\n\n    def __str__(self):\n        return self.name\n说明：不需要定义主键列，在生成时会自动添加，并且值为自动增长\n生成数据表\n生成迁移文件：python  manage.py  makemigrations作用： 在应用目录下的migrations目录下成迁移文件\n查看建表语句： python manage.py sqlmigrate APP名字 0001 说明：0001为makemigrations之后产生了0001_initial.py文件\n执行迁移： python  manage.py  migrate作用：相当于执行sql语句生成数据表，表名为  应用名全小写_类名全小写\n模型操作数据库\n# 进入pyhton shell模式 \npython manage.py shell\n\n# 引入包\nfrom myApp.models import Grade,Student\n\n# 增\n>>> grade = Grade()\n>>> grade.name = \"python01\"\n>>> grade.boyNum = 50\n>>> grade.girlNum = 10\n>>> grade.save()\n>>> stu = Student()\n>>> stu.name = \"sunck\"\n>>> stu.sex = \"True\"\n>>> stu.age = 18\n>>> stu.contend = \"sunck is a good man\"\n>>> stu.grade = grade\n>>> stu.save()\n\n# 删\nstu.delete()\n\n# 改\n>>> stu.age = 17\n>>> stu.save()\n\n# 查\nstus = Student.objects.all()\ngrade = Grade.objects.get(pk=1)\n视图的基本使用\n概述：\n在Django中视图对WEB请求进行响应的，视图的本质是python中的函数，在views.py文件中定义，\n视图接收request对象作为第一个参数，包含了请求的信息\n定义视图\nview.py\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\nfrom myApp.models import Grade, Student\n\ndef index(request):\n    return HttpResponse(\"sunck is a good man\")\ndef detail(request, num):\n    return HttpResponse(\"detail %s\" % num)\n配置路由\n主路由：与工程名相同名字的目录下的urls.py文件\n配置文件：ROOT_URLCONF = 'project.urls'\nurls.py\nfrom django.conf.urls import url, include\nfrom django.contrib import admin\n\nurlpatterns = [\n    url(r'^admin/', admin.site.urls),\n    # 包含子路由\n    url(r'^', include('myApp.urls')),\n\n]\n子路由：在应用目录下创建名为urls.py的文件作用：路由分发，规定哪个网址由哪个视图处理\nurls.py\nfrom django.conf.urls import url\nfrom myApp import views\n\nurlpatterns = [\n    # 路由匹配\n    url(r'index/', views.index),\n    url(r'detail/(\\d+)/', views.detail),\n]\n模板的基本使用\n概述：模板是HTML界面，可以根据视图传递的数据进行填充\n创建模板目录：工程目录下创建名为templates的目录，也可以放在项目目录中\n配置模板路径：\nsettings.py\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, \"templates\")],\n        'APP_DIRS': True,\n    }\n定义模板\ngrade.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>班级信息</title>\n</head>\n<body>\n    <h1>班级信息</h1>\n    <ul>\n        {% for grade in grades %}\n            <li>{{ grade.name }}</li>\n        {% endfor %}\n    </ul>\n</body>\n</html>\nstudent.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>学生信息</title>\n</head>\n<body>\n    <h1>学生信息</h1>\n    <ul>\n        {% for stu in stusList %}\n        <li>{{ stu.name }}--{{ stu.grade }}--{{ stu.age }}</li>\n        {% endfor %}\n    </ul>\n</body>\n</html>\n在视图中返回模板\nviews.py\nfrom myApp.models import Grade, Student\ndef students(request):\n    #获取所有学生信息列表\n    stus = Student.objects.all()\n    return render(request, 'students.html', {\"stusList\":stus})\n\ndef grades(request):\n    grades = Grade.objects.all()\n    return render(request, 'grades.html', {'grades': grades})\n\ndef gstudents(request, gid):\n    stus = Student.objects.filter(grade_id=gid)\n    return render(request, \"students.html\", {\"stusList\":stus})\nurls.py\nurl(r'students/grade/(\\d+)/', views.gstudents),\n2-Django——模型\n\n                ", "mainLikeNum": ["3 "], "mainBookmarkNum": "2"}