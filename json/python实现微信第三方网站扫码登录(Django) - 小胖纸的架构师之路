{"title": "python实现微信第三方网站扫码登录(Django) - 小胖纸的架构师之路 ", "index": "微信开发,python,django", "content": "写在前面\n本周刚在项目中实现了微信第三方网站扫码登录。因为第一次写相关项目，所以遇到了很多坑。所以写这篇文章是希望像我之前那样的小白也能从容的开发，不要浪费无谓的时间，这篇文章尽量写的详细简单。准备与注意事项\n\n微信公众平台跟微信开放平台是两个不同的平台，别搞混了。微信公众平台与微信开放平台的区别\n微信开放平台里需要创建网站的应用，网上没找到创建网站应用的教程，链接是创建移动应用的教程，大体步骤类似，细节就不啰嗦。\n创建之后注意修改回调授权域名，否则会出现scope参数错误或没有scope权限错误。注意里面的域名格式，例如www.qq.com，不要加http\n准备好微信开放平台的APPID和APPSECRET两个参数。参数在微信开放平台中查看。\n微信官方开发文档\n开发时使用到的python第三方库requests\n\n开发\n二维码授权链接\nhttps://open.weixin.qq.com/connect/qrconnect?appid=APPID&redirect_uri=REDIRECT_URI&response_type=code&scope=SCOPE&state=STATE#wechat_redirect\n\n其中的APPID = '你的APPID'APPSECRET = '你的APPSECRET'REDIRECT_URL = '指向微信登录的处理函数,例如django的view地址,注意URL必须编码'SCOPE ＝ 'snsapi_login'STATE = '不是必须的，作用时重定向后会带上state参数，开发者可以填写a-zA-Z0-9的参数值，最多128字节，'\n我刚写的网站的例子，可以帮忙点一下增加下注册量(笑),点开链接可以看具体的参数。https://open.weixin.qq.com/co...\n不知道现在工作的网站会不会倒闭，防止链接失效，就再付一个一号店的链接吧。同样可以点进去看相关参数。https://open.weixin.qq.com/co...\n下面就是处理授权时的函数了\nclass WeiXinLogin(View):\n    appid = 'wxe0d95453c412f118'  # 你自己的\n    appsecret = 'd785bt925fbc7ebed62734cfdpe5951c'  # 你自己的\n    code = ''\n    state = ''\n\n    # 为了方便大家看,我都写在一个函数里\n    def get_info(self):\n\n        # 第一步获取code跟state\n        try:\n            self.code = self.request.GET.get(\"code\")\n            self.state = self.request.GET.get(\"state\")\n        except Exception, e:\n            add_log.info(\"获取code和stat参数错误：\\n%s\" % str(traceback.format_exc()))\n\n        # 2.通过code换取网页授权access_token\n        try:\n            url = u'https://api.weixin.qq.com/sns/oauth2/access_token'\n            params = {\n                'appid': self.appid,\n                'secret': self.appsecret,\n                'code': self.code,\n                'grant_type': 'authorization_code'\n            }\n            res = requests.get(url, params=params).json()\n\n            access_token = res[\"access_token\"]  # 只是呈现给大家看,可以删除这行\n            openid = res[\"openid\"]  # 只是呈现给大家看,可以删除这行\n        except Exception, e:\n            add_log.info(\"获取access_token参数错误：\\n%s\" % str(traceback.format_exc()))\n            raise Http404()\n\n        # 3.如果access_token超时，那就刷新\n        # 注意,这里我没有写这个刷新功能,不影响使用,如果想写的话,可以自己去看文档\n\n        # 4.拉取用户信息\n        try:\n            user_info_url = u'https://api.weixin.qq.com/sns/userinfo'\n            params = {\n                'access_token': res[\"access_token\"],\n                'openid': res[\"openid\"],\n            }\n            res = requests.get(user_info_url, params=params).json()\n            \"\"\"\n            注意,这里有个坑,res['nickname']表面上是unicode编码,\n            但是里面的串却是str的编码,举个例子,res['nickname']的返回值可能是这种形式\n            u'\\xe9\\x97\\xab\\xe5\\xb0\\x8f\\xe8\\x83\\x96',直接存到数据库会是乱码.必须要转成\n            unicode的编码,需要使用\n            res['nickname'] = res['nickname'].encode('iso8859-1').decode('utf-8')\n            这种形式来转换.\n            你也可以写个循环来转化.\n            for value in res.values():\n                value = value.encode('iso8859-1').decode('utf-8')\n            \"\"\"\n        except Exception, e:\n            add_log.info(\"拉取用户信息错误：\\n%s\" % str(traceback.format_exc()))\n\n        # 保存到数据库及登录\n        # 返回的数据全部在res字典中\n\n剩下就要看不同项目的第三方登录的表是怎么设计的了.主要的思路是维护一张第三方登录的表,把以后第三方登录的信息都放在里面,设计思路可以借鉴廖雪峰的文章.设计一个可扩展的用户登录系统 (1)设计一个可扩展的用户登录系统 (2)设计一个可扩展的用户登录系统 (3)\n注意,判断登录的时候是验证该用户的unionid,不是openid,因为如果你的网站还有微信公众平台的微信授权的话,同一用户使用你的微信公众平台跟微信开放平台登录之后,两次的openid是不一样的,但是unionid是唯一的.\n关于UnionID机制\n请注意，网页授权获取用户基本信息也遵循UnionID机制。即如果开发者有在多个公众号，或在公众号、移动应用之间统一用户帐号的需求，需要前往微信开放平台（open.weixin.qq.com）绑定公众号后，才可利用UnionID机制来满足上述需求。UnionID机制的作用说明：如果开发者拥有多个移动应用、网站应用和公众帐号，可通过获取用户基本信息中的unionid来区分用户的唯一性，因为同一用户，对同一个微信开放平台下的不同应用（移动应用、网站应用和公众帐号），unionid是相同的。\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "8"}