{"title": "Django 流式响应中文csv样例 - 猪了个去写博客 ", "index": "django,python", "content": "在Django里，流式响应StreamingHttpResponse是个好东西,可以快速、节省内存地产生一个大型文件。\n\n目前项目里用于流式响应的一个是Eventsource，用于改善跨系统通讯时用户产生的慢速的感觉。这个不细说了。\n\n还有一个就是生成一个大的csv文件。\n\n当Django进程处于gunicorn或者uwsgi等web容器中时，如果响应超过一定时间没有返回，就会被web容器终止掉，虽然我们可以通过加长web容器的超时时间来绕过这个问题，但是毕竟还是治标不治本。要根本上解决这个问题，Python的生成器、Django框架提供的StreamingHttpResponse这个流式响应很有帮助\n\n而在csv中，中文的处理也至关重要，要保证用excel打开csv不乱码什么的。。为了节约空间，我就把所有代码贴到一起了。。实际使用按照项目的规划放置哈\n\n上代码：\n\npythonfrom __future__ import absolute_import\nimport csv\nimport codecs\nimport cStringIO\n\n\nclass Echo(object):\n\n    def write(self, value):\n        return value\n\nclass UnicodeWriter:\n\n    \"\"\"\n    A CSV writer which will write rows to CSV file \"f\",\n    which is encoded in the given encoding.\n    \"\"\"\n\n    def __init__(self, f, dialect=csv.excel, encoding=\"utf-8\", **kwds):\n        # Redirect output to a queue\n        self.queue = cStringIO.StringIO()\n        self.writer = csv.writer(self.queue, dialect=dialect, **kwds)\n        self.stream = f\n        self.encoder = codecs.getincrementalencoder(encoding)()\n\n    def writerow(self, row):\n        self.writer.writerow([handle_column(s) for s in row])\n        # Fetch UTF-8 output from the queue ...\n        data = self.queue.getvalue()\n        data = data.decode(\"utf-8\")\n        # ... and reencode it into the target encoding\n        data = self.encoder.encode(data)\n        # write to the target stream\n        value = self.stream.write(data)\n        # empty queue\n        self.queue.truncate(0)\n        return value\n\n    def writerows(self, rows):\n        for row in rows:\n            self.writerow(row)\n\n\n\n\n\n\nfrom django.views.generic import View\nfrom django.http.response import StreamingHttpResponse\n\nclass ExampleView(View):\n    headers=['一些','表头']\n    def get(self,request):\n        result = [['第一行','数据1'],\n                  ['第二行','数据2']]\n        echoer = Echo()\n        writer = UnicodeWriter(echoer)\n        def csv_itertor():\n                yield codecs.BOM_UTF8\n                yield writer.writerow(self.headers)\n                for column in result:\n                    yield writer.writerow(column)\n\n        response = StreamingHttpResponse(\n            (row for row in csv_itertor()),\n            content_type=\"text/csv;charset=utf-8\")\n        response['Content-Disposition'\n                 ] = 'attachment;filename=\"example.csv\"'\n        return response\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}