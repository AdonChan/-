{"title": "初学python：第一步 —— 编写一个购物车程序 - 个人文章 ", "index": "python", "content": "程序要求\n1、启动程序后，输入用户名密码后，让用户输入工资，然后打印商品列表2、允许用户根据商品编号购买商品3、用户选择商品后，检测余额是否够，够就直接扣款，不够就提醒4、可随时退出，退出时，打印已购买商品和余额5、在用户使用过程中，关键输出，如余额，商品已加入购物车等消息，需高亮显示扩展需求：1、用户下一次登录后，输入用户名密码，直接回到上次的状态，即上次消费的余额什么的还是那些，再次登录可继续购买2、允许查询之前的消费记录\n编写思路\n流程图\n程序文件\nModule1_homework2_cart.pysetup.py\n程序安装与运行\npython setup.py install\n安装命令。生成database.json文件。用于缓存用户的购买记录、当前余额、锁定状态。\npython setup.py run\n运行命令。\n程序正文\n# -*- coding: utf8 -*-\nimport json\n\nuser_dict = {'henry': {'pass': 'henry123'},\n             'tom': {'pass': 'tom123'},\n             'jenry': {'pass': 'jenry123'}}\ngoods_lists = [\n    {'name': '电脑', 'price': 1999},\n    {'name': '鼠标', 'price': 10},\n    {'name': '游艇', 'price': 20},\n    {'name': '美女', 'price': 998},\n]\ndatabase_file = 'database.json'\n\n\ndef setup():\n    \"\"\"\n    安装函数，主要用于初始化database.json文件。无其他用途\n    \"\"\"\n    data = {}\n    for account in user_dict:\n        data[account] = {}\n        data[account]['history'] = []\n        data[account]['balance'] = 0\n        data[account]['lock_status'] = 0\n    _dump_database(data=data)\n\n\ndef _output_format(output):\n    \"\"\"输出内容格式化。\n\n    将输出的内容格式化为高亮显示。\n    :param output: 导入需要高亮显示的输出内容。\n    :return:\n        返回字符串。\n    \"\"\"\n    return '\\033[1m%s\\033[0m' % output\n\n\ndef _load_database(filename=database_file):\n    \"\"\"数据库读取函数。\n\n    读取json文件。该文件存储了用户的购买记录、剩余资金、锁定状态。\n    :param filename: 数据库文件，默认为database.json。\n    :return:\n        将database.json文件中的内容读取后，返回字典。\n        例如：\n            {\"henry\": {\"history\": [], \"balance\": 0, \"lock_status\": 0},\n             \"tom\": {\"history\": [], \"balance\": 0, \"lock_status\": 0},\n             \"jenry\": {\"history\": [], \"balance\": 0, \"lock_status\": 0}}\n    \"\"\"\n    with open(filename, 'r') as f:\n        database = json.load(f)\n    return database\n\n\ndef _dump_database(data, filename=database_file):\n    \"\"\"写入数据库函数。\n\n    将数据回写到数据库文件中。\n    :param data: 导入的数据内容。\n    :param filename: 数据库文件，默认为database.json。\n    \"\"\"\n    with open(filename, 'w') as f:\n        json.dump(data, f)\n\n\ndef _set_shopping_history(account, shopping_record):\n    \"\"\"存储购物记录函数\n\n    该函数用于将用户的购物记录。通过调用_dump_database()函数的方式记录到数据库中\n    :param account: 导入登录的用户账号\n    :param shopping_record: 导入购物的记录\n    \"\"\"\n    data = _load_database()\n    data[account]['history'].append(shopping_record)\n    _dump_database(data=data)\n\n\ndef _get_shopping_history(account):\n    \"\"\"获取历史的购物记录\n\n    该函数调用_load_database()函数和_get_goods()函数。获取历史的购物记录，并进行输出格式化\n    :param account: 导入登录的用户账号\n    \"\"\"\n    data = _load_database()[account]['history']\n    _get_goods(goods=data)\n\n\ndef _set_balance(account, price):\n    \"\"\"计算余额函数\n\n    该函数用于\n    :param account: 导入登录的用户账号\n    :param price: 导入商品价格\n    \"\"\"\n    data = _load_database()\n    data[account]['balance'] -= price\n    _dump_database(data=data)\n\n\ndef _recharge_balance(account, price):\n    \"\"\"余额充值函数\n\n    :param account: 导入登录的用户账号\n    :param price: 导入充值价格\n    \"\"\"\n    data = _load_database()\n    data[account]['balance'] += price\n    _dump_database(data=data)\n\n\ndef _get_balance(account):\n    \"\"\"获取余额函数\n\n    :param account: 导入登录的用户账号\n    :return:\n        将database.json文件中的'balance'键的值进行读取，返回字符。\n    \"\"\"\n    data = _load_database()[account]['balance']\n    return data\n\n\ndef _set_lock_user(account, lock_id):\n    \"\"\"设置用户锁\n\n    当用户登录不正确时，触发用户锁定。\n    :param account: 导入登录的用户账号\n    :param lock_id: 锁定的状态，0为不锁定，1为锁定\n    \"\"\"\n    data = _load_database()\n    data[account]['lock_status'] = lock_id\n    _dump_database(data=data)\n\n\ndef _get_lock_user(account):\n    \"\"\"获取用户锁\n\n    检查database.json文件中lock_status键的值。\n    :param account: 导入登录的用户账号\n    :return:\n        将database.json文件中的'lock_status'键的值进行读取，返回类型为字符串。\n    \"\"\"\n    data = _load_database()[account]['lock_status']\n    return data\n\n\ndef _get_goods(goods=goods_lists):\n    \"\"\"将商品列表（goods_lists）进行重新格式化\n\n    用于展示商品列表和历史购物记录\n    :param goods: 导入商品信息。可以是列表和字符串。\n    \"\"\"\n\n    # 如果goods参数的类型是列表，将打印出所有列表中的商品。并将输出内容重新格式化为：\n    # --------------------商品列表--------------------\n    # 商品名称：电脑, 商品价格：1999\n    # 商品名称：鼠标, 商品价格：10\n    # 商品名称：游艇, 商品价格：20\n    # 商品名称：美女, 商品价格：998\n\n    if type(goods) == list:\n        goods_show = ['%s商品列表%s\\n' % ('-' * 20, '-' * 20)]\n        for g in goods:\n            goods_show.append('商品名称：%s, 商品价格：%s\\n' % (g['name'], g['price']))\n        goods_table = ''.join(goods_show)\n        print(goods_table)\n    # 当goods参数为其他时，并且goods等于商品列表中某个商品的名称。返回该商品的字典。\n    else:\n        for g in goods_lists:\n            if goods == g.get('name'):\n                return g\n\n\ndef _login():\n    \"\"\"用户登录函数\n\n    :return:\n        返回用户登录的账号。返回类型为字符串。\n    \"\"\"\n    count = 3\n    # 反向计数器，当计数器大于等于1并小于等于3时执行循环。否则退出循环。\n    while 1 <= count <= 3:\n        user = input('请输入您的用户名：').strip()\n        passw = input('请输入您的密码：').strip()\n        # 如果用户名和账号输入空格的化重新输入。\n        if not user or not passw:\n            continue\n        # 每执行一次循环，计数器减1。\n        count -= 1\n        # 如果用户名在user_dict的字典中，并且调用_get_lock_user()函数判断用户账号的锁定状态是否为1。\n        # 如果两个条件都满足的话直接打印账号被锁定的信息。\n        if user in user_dict.keys() and _get_lock_user(account=user) == 1:\n            print(_output_format(output=\"您的%s账号已被锁定，请联系管理员解锁，或者使用其他账号。\" % user))\n        # 如果用户名在user_dict的字典中，请用户输入密码。\n        elif user in user_dict.keys():\n            # 如果密码等于user_dict[user]字典中的'pass'键的值。答应欢迎登陆界面。并设置用户锁为0。\n            if passw == user_dict[user]['pass']:\n                _set_lock_user(account=user, lock_id=0)\n                print(_output_format(output=\"欢迎 %s 登录!\" % user))\n                return user\n            # 除此答应密码错误，并给出3个输入机会。如果计数器等于0。就设置用户锁为1。\n            else:\n                print(_output_format(output='密码错误。您还有%s次机会。'% count))\n                if count == 0:\n                    _set_lock_user(account=user, lock_id=1)\n                    exit(1)\n                continue\n        # 当用户用户名输入错误时，答应错误。并重新要求输入。\n        else:\n            print(_output_format(output='用户名错误'))\n            continue\n\n\ndef _shopping_buy(account):\n    \"\"\"购买函数\n\n    :param account: 导入登录的用户账号\n    \"\"\"\n    while True:\n        # 展示商品信息。\n        _get_goods()\n        # 请用户输入需要购买的商品名称\n        buy_goods = input('请选择你需要购买的商品(\"b\"返回上一级、\"q\"退出)：').strip()\n        if not buy_goods:\n            continue\n        # 按'q'退出\n        elif buy_goods == 'q':\n            exit()\n        # 按'b'返回上一层\n        elif buy_goods == 'b':\n            break\n\n        else:\n            g_goods = _get_goods(goods=buy_goods)\n            # 判断是否有余额。如果余额为0。要求用户充值。并返回上一层。\n            if _get_balance(account=account) == 0:\n                print(_output_format(output='您没有可用的余额，请在上级菜单进行充值！'))\n                break\n            # 判断用户输入的商品是否在商品列表中。如果不在，让用户重新输入。\n            elif g_goods is None:\n                print(_output_format(output='您选购的商品并未在我们的货架中...'))\n                continue\n            # 除此，获取商品的售价、添加历史购买记录（调用_set_shopping_history()函数）、计算余额（调用_set_balance()函数）、\n            # 打印用户的当前余额。\n            else:\n                g_price = g_goods.get('price')\n                g_balance = _get_balance(account=account)\n                _set_shopping_history(account=account, shopping_record=g_goods)\n                _set_balance(account=account, price=g_price)\n                print(_output_format(output='您当前的余额有%s元' % g_balance))\n\n\ndef _shopping_recharge(account):\n    \"\"\"充值函数\n\n    :param account:导入登录的用户账号\n    \"\"\"\n    while True:\n        recharge = input('请输入你需要充值的金额(\"b\"返回上一级、\"q\"退出)：').strip()\n        if recharge == 'q':\n            exit()\n\n        elif recharge == 'b':\n            break\n\n        else:\n            if not recharge.isdigit():\n                print(_output_format(output='必须输入数值！'))\n                continue\n            else:\n                int_recharge = int(recharge)\n                _recharge_balance(account=account, price=int_recharge)\n                balance = _get_balance(account=account)\n                print(_output_format(output='您已完成充值！您的当前余额为%s' % balance))\n                break\n\n\ndef _shopping(account):\n    \"\"\"购物主菜单函数。\n\n    :param account: 导入登录的用户账号\n    \"\"\"\n    # 一级循环。用于用户进入购买界面、查询历史记录和退出登录\n    while True:\n        choose = input('\"r\"充值、\"s\"购买商品、\"l\"查看购物记录、\"q\"退出：').strip()\n        if choose == 'q':\n            exit(0)\n\n        elif choose == 'l':\n            _get_shopping_history(account=account)\n            continue\n\n        elif choose == 's':\n            _shopping_buy(account=account)\n\n        elif choose == 'r':\n            _shopping_recharge(account=account)\n\n\ndef main():\n    login = _login()\n    _shopping(account=login)\n\n\nif __name__ == '__main__':\n    main()\n\nREADME\nREADME.md\n学习笔记\n待补充\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "0"}