{"title": "在django开发中，使用drf序列化好友列表 - wyzane ", "index": "python,django,django-rest-framework", "content": "本文中讨论的好友列表模型设计如下：\nuser_id = models.ForeignKey(ChatUserInfo, to_field=\"chat_id\", on_delete=models.DO_NOTHING, db_index=True,     help_text=\"聊天用户id\")\nfriend_id = models.ForeignKey(ChatUserInfo, to_field=\"chat_id\", related_name=\"friend\", on_delete=models.DO_NOTHING, db_index=True, help_text=\"聊天用户id\")\nuser_group = models.ForeignKey(ChatGroupType, to_field=\"flag\", on_delete=models.CASCADE, help_text=\"好友分组\")\nfriend_group = models.ForeignKey(ChatGroupType, to_field=\"flag\", related_name=\"friend_group\", on_delete=models.CASCADE, help_text=\"好友分组\")\nuser_label = models.CharField(max_length=64，help_text=\"备注信息\")\nfriend_label = models.CharField(max_length=64，help_text=\"备注信息\")\ncreate_time = models.DateTimeField(\"添加好友时间\", auto_now_add=True)\nupdate_time = models.DateTimeField(\"更新分组时间\", auto_now=True)\nresource = models.ForeignKey(ChatFriendResource, to_field=\"origin\", on_delete=models.DO_NOTHING, help_text=\"好友来源\")\n\n即A和B互为好友，在数据库中只会保存一条记录，这样节省磁盘空间。\n对于这样的模型，当前端需要展示当前用户的好友列表时，序列化方式如下：\nviews.py:\ndef get(self, request, *args, **kwargs):\n    \"\"\"\n    聊天-好友列表\n    :param request:\n    :param args:\n    :param kwargs:\n    :return:\n    \"\"\"\n    try:\n        chat_id = request.query_params.get(\"chat_id\", \"\")\n        # chat_id = request.user.user.chat_id  # 添加用户认证后再使用request.user\n        chat_user = models.ChatUserInfo.objects.get(chat_id=int(chat_id))\n    except ValueError:\n        return Response(dict(msg=\"请输入用户id\"), status=status.HTTP_400_BAD_REQUEST)\n    except models.ChatUserInfo.DoesNotExist:\n        return Response(dict(msg=\"用户不存在\"), status=status.HTTP_400_BAD_REQUEST)\n\n    # 好友列表\n    user_friends = models.ChatFriendList.objects.filter(Q(user_id=chat_id) | Q(friend_id=chat_id))\n    ser = serializer.FriendSerializer(instance=user_friends, many=True, context={\"chat_user\": chat_user})\n\n    friends = []\n    for data in ser.data:\n        friend_dict = OrderedDict()\n        if data[\"user_id\"] == int(chat_id):\n            friend_dict[\"friend_id\"] = data[\"friend_id\"]\n            friend_dict[\"friend_avatar\"] = data[\"friend_avatar\"]\n        if data[\"friend_id\"] == int(chat_id):\n            friend_dict[\"friend_id\"] = data[\"user_id\"]\n            friend_dict[\"friend_avatar\"] = data[\"user_avatar\"]\n        friend_dict[\"friend_name\"] = data[\"friend_name\"]\n        friend_dict[\"friend_area\"] = data[\"friend_area\"]\n        friend_dict[\"friend_status\"] = data[\"friend_status\"]\n        friend_dict[\"friend_label\"] = data[\"friend_label\"]\n        friend_dict[\"friend_resource\"] = data[\"friend_resource\"]\n        friends.append(friend_dict)\n    logger.debug(\"data:%s\", ser.data)\n    return Response(dict(msg=\"OK\", data=friends), status=status.HTTP_200_OK)\n\nserializer.py:\nclass FriendSerializer(serializers.Serializer):\n    \"\"\"\n    序列化-好友列表-好友信息  ChatFriendList\n    \"\"\"\n    # 用户id\n    # friend_id = serializers.SerializerMethodField(method_name=\"get_id\")\n    user_id = serializers.IntegerField(source=\"user.chat_id\")\n    friend_id = serializers.IntegerField(source=\"friend.chat_id\")\n    # 用户昵称\n    friend_name = serializers.SerializerMethodField(method_name=\"get_name\")\n    # 用户头像\n    # friend_avatar = serializers.SerializerMethodField(method_name=\"get_avatar\")\n    user_avatar = serializers.ImageField(source=\"user.user.avatar\")\n    friend_avatar = serializers.ImageField(source=\"friend.user.avatar\")\n    # 用户地区\n    friend_area = serializers.SerializerMethodField(method_name=\"get_area\")\n    # 用户状态\n    friend_status = serializers.SerializerMethodField(method_name=\"get_status\")\n    # 用户备注\n    friend_label = serializers.SerializerMethodField(method_name=\"get_label\")\n    # 用户来源\n    friend_resource = serializers.CharField(source=\"resource\")\n\n    def get_id(self, obj):\n        \"\"\"\n        获取好友id\n        :param obj:\n        :return:\n        \"\"\"\n        if obj.user.chat_id == self.context['chat_user'].chat_id:\n            # user_id是当前用户\n            return obj.friend.chat_id\n        return obj.user.chat_id\n\n    def get_name(self, obj):\n        \"\"\"\n        获取好友昵称\n        :param obj:\n        :return:\n        \"\"\"\n        if obj.user.chat_id == self.context['chat_user'].chat_id:\n            # user_id是当前用户\n            return obj.friend.user.nickname\n        return obj.user.user.nickname\n\n    def get_avatar(self, obj):\n        \"\"\"\n        获取好友头像\n        :param obj:\n        :return:\n        \"\"\"\n        if obj.user.chat_id == self.context['chat_user'].chat_id:\n            # user_id是当前用户\n            return obj.friend.user.avatar\n        return obj.user.user.avatar\n\n    def get_area(self, obj):\n        \"\"\"\n        获取好友地区\n        :param obj:\n        :return:\n        \"\"\"\n        if obj.user.chat_id == self.context['chat_user'].chat_id:\n            # user_id是当前用户\n            return obj.friend.area\n        return obj.user.area\n\n    def get_status(self, obj):\n        \"\"\"\n        获取好友状态\n        :param obj:\n        :return:\n        \"\"\"\n        if obj.user.chat_id == self.context['chat_user'].chat_id:\n            # user_id是当前用户\n            return obj.friend.status\n        return obj.user.status\n\n    def get_label(self, obj):\n        \"\"\"\n        获取好友备注\n        :param obj:\n        :return:\n        \"\"\"\n        if obj.user.chat_id == self.context['chat_user'].chat_id:\n            # user_id是当前用户\n            return obj.friend_label\n        return obj.user_label\n\n    def create(self, validated_data):\n        pass\n\n    def update(self, instance, validated_data):\n        pass\n上面的序列化主要使用了serializers.ImageField 和 serializers.SerializerMethodField，如有错误之处，欢迎交流指正！\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "0"}