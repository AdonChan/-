{"title": "［Archer's Python Lab］jython+ddmlib 安卓屏幕截图并在web展示demo - Archer's Lab ", "index": "jython,python", "content": "\n  部分代码思路来源于互联网\n\n\n需求\n\n之前一直在寻找一种完美的移动设备屏幕流回传方案，这种尝试一旦成功即可运用于多种平台，比如云端测试Portal中对机器设备屏幕的实时监控，再辅以html5强大的特性，可以直接在web上模拟手机操作，达到\"远程监控\"的目的，本demo的部分思路来源于互联网，我尝试用jython全部重写了一遍，这种方式实现起来虽然比较\"土鳖\"，但是效果基本可以符合需求，下面是效果图和代码清单。\n\n\n\n代码\n\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n# Android_ScreenSream by Archer\n# Based on Jython,ddmlib\n\n#import jar\nimport sys,os\nsys.path.append(r'C:\\\\ddmlib.jar')\nsys.path.append(r'C:\\\\guava17.jar')\nsys.path.append(r'C:\\\\rt.jar')\nfrom threading import Thread\n\n#import lib\nfrom java.awt.image import *\nfrom java.io import *\nfrom javax.imageio import *\nfrom com.android.ddmlib import *\nfrom time import sleep\n\nclass AndroidScreenStream(object):\n\n    def __init__(self):\n        super(AndroidScreenStream,self).__init__()\n        self.devices=[]\n        self.currentdevice=None\n        self.rawimgdata=None\n        self.rawscreen=None\n\n    def wait_device_lists(self,bridge):\n        \"\"\"获取设备列表信息\"\"\"\n        count=0\n        while(bridge.hasInitialDeviceList()==False):\n            try:\n                sleep(0.5)\n                count+=1\n            except:\n                pass\n            if(count>60):\n                print \"获取设备列表信息超时！\"\n                break\n\n    def get_devices(self):\n        \"\"\"获取所有已连接设备\"\"\"\n        AndroidDebugBridge.init(False)\n        mybridge=AndroidDebugBridge.createBridge()\n        self.wait_device_lists(mybridge) #get\n        self.devices.append(mybridge.getDevices())\n        return self\n\n    def get_device_by_index(self,index):\n        \"\"\"根据index获取单个当前设备\"\"\"\n        AndroidDebugBridge.init(False)\n        mybridge=AndroidDebugBridge.createBridge()\n        self.wait_device_lists(mybridge) #get\n        try:\n            self.currentdevice=mybridge.getDevices()[index]\n            return self\n        except IndexError:\n            print \"不存在序号为\"+str(index)+\"的设备,请检查USB连接!\"\n            sys.exit()\n\n    def get_current_screen_imgbyes(self):\n        \"\"\"获取当前屏幕图像的字节数据\"\"\"\n        self.rawimgdata=self.currentdevice.getScreenshot().data #保存图像字节数据\n        return self\n\n    def get_current_rawscreen(self):\n        \"\"\"保存当前屏幕screen对象\"\"\"\n        self.rawscreen=self.currentdevice.getScreenshot()\n        return self\n\n    def save_screen_img(self,path=os.path.join(os.getcwd(),'current_frame.jpeg'),islandscape=False):\n        \"\"\"将当前屏幕图像数据保存为图片\"\"\"\n        if self.rawscreen is not None:\n            landscape=islandscape\n            #横屏尺寸处理\n            imgwidth=self.rawscreen.height if landscape else self.rawscreen.width\n            imgheight=self.rawscreen.width if landscape else self.rawscreen.height\n            image=BufferedImage(imgwidth,imgheight,BufferedImage.TYPE_INT_RGB)\n            if image.getHeight()!=imgheight or image.getWidth()!=imgwidth:\n                image=BufferedImage(imgwidth,imgheight,BufferedImage.TYPE_INT_RGB)\n            index=0\n            indexInc=self.rawscreen.bpp>>3\n            for y in range(self.rawscreen.height):\n                for x in range(self.rawscreen.width):\n                    value=self.rawscreen.getARGB(index)\n                    if landscape:\n                        image.setRGB(y,self.rawscreen.width-x-1,value)\n                    else:\n                        image.setRGB(x,y,value)\n                    index+=indexInc\n            try:\n                ImageIO.write(image,\"JPEG\",File(path))\n            except IOError:\n                print \"发生异常!\"\n                sys.exit()\n        else:\n            print \"rawscreen为空!\"\n            sys.exit()\n\nif __name__==\"__main__\":\n    ASS=AndroidScreenStream()\n    ShotDevice=ASS.get_device_by_index(0)\n    while True:\n        ShotDevice.get_current_rawscreen().save_screen_img()\n\n\nGithub\n\nAndroid_Screen_Stream\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}