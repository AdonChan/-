{"title": "python中的list，tuple，set和dict（参考python文档） - 个人文章 ", "index": "python", "content": "1.list\n声明一个list很简单，只需list1=[]（尽量不要将变量名起为关键字list）。list有如下基本方法：\n(1)append(x) 在list的末尾添加一个元素x，并且返回None\nlist1 = [1, 2, 3, 4]\nr = list1.append(5)\nprint(list1, r)\n#[1, 2, 3, 4, 5] None\n(2)extend(iterable) 将另一个iterable的对象添加到list尾部，返回值为None。\nlist1 = [1, 2, 3, 4]\nr = list1.extend([5, 6, 7, 8])\nprint(list1, r)\n#[1, 2, 3, 4, 5, 6, 7, 8] None\n(3)insert(i,x) 将元素x插入到索引i处，返回值为None。\nlist1 = [1, 2, 3, 4]\nr = list1.insert(4, 5)\nprint(list1, r)\n#[1, 2, 3, 4, 5] None\n(4)remove(x) 删除值为x的元素（值而非索引），删除成功返回None，若没有x则报错\nlist1 = [1, 2, 3, 4]\nr = list1.remove(3)\nprint(list1, r)\n#[1, 2, 4] None\n\n\nlist1 = [1, 2, 3, 4]\nr = list1.remove(5)\nprint(list1, r)\n\n\nTraceback (most recent call last):\n  File \"E:/Programs/python/data-structure/list-demo.py\", line 2, in <module>\n    r = list1.remove(5)\nValueError: list.remove(x): x not in list\n(5)pop([i]) 如果传入参数i，删除索引i处元素。如果不传参，删除尾部的元素。返回值为删掉的元素。\nlist1 = [1, 2, 3, 4]\nr = list1.pop(3)\nprint(list1,r)\n\n#[1, 2, 3] 4\n(6)clear() 清空数组所有元素，返回None。相当于list1[:]=[]以及del list1[:]\nlist1 = [1, 2, 3, 4]\nr = list1.clear()\nprint(list1, r)\n\n#[] None\n(7)count(x) 返回x在list中出现的次数\nlist1 = [1, 2, 3, 4, 1, 2, 3, 4, 2, 4]\nr = list1.count(4)\nprint(r)\n\n#3\n(8)sort(key=None, reverse=False) 默认从小到大，如果reverse设为True则为从大到小。key为一个lambda表达式，传入当前元素，返回sort时依据德关键字。\nlist1 = [{'age': 20}, {'age': 15}, {'age': 18}, {'age': 25}]\nlist1.sort(key=lambda stu: stu['age'])\nprint(list1)\n(9)reverse() 反转数组\nlist1 = [1, 2, 3, 4, 5]\nlist1.reverse()\nprint(list1)\n\n#[5, 4, 3, 2, 1]\n(10)copy() 浅拷贝数组，相当于list1[:]\nlist1 = [1, 2, 3, 4, {'name': 'John'}]\nlist2 = list1.copy()\nlist2[4]['name'] = 'Mike'\nprint(list1 is list2)\nprint(list1)\nprint(list2)\n\n#\nFalse\n[1, 2, 3, 4, {'name': 'Mike'}]\n[1, 2, 3, 4, {'name': 'Mike'}]\n以上为list常用方法。list可以作为栈使用。\n>>> stack = [3, 4, 5]\n>>> stack.append(6)\n>>> stack.append(7)\n>>> stack\n[3, 4, 5, 6, 7]\n>>> stack.pop()\n7\n>>> stack\n[3, 4, 5, 6]\n>>> stack.pop()\n6\n>>> stack.pop()\n5\n>>> stack\n[3, 4]\n（官网代码）\n也可以作为队列使用，但是需要导入collections包的deque\n>>> from collections import deque\n>>> queue = deque([\"Eric\", \"John\", \"Michael\"])\n>>> queue.append(\"Terry\")           # Terry arrives\n>>> queue.append(\"Graham\")          # Graham arrives\n>>> queue.popleft()                 # The first to arrive now leaves\n'Eric'\n>>> queue.popleft()                 # The second to arrive now leaves\n'John'\n>>> queue                           # Remaining queue in order of arrival\ndeque(['Michael', 'Terry', 'Graham'])\n初始化list的小窍门：\nlist1 = [x ** 2 for x in range(10)]\nprint(list1)\n#[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nlist2 = [num for sub in list1 for num in sub]\nprint(list1)\nprint(list2)\n#[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nlist1 = [(x, y) for x in range(1, 4) for y in range(x, 4)]\nprint(list1)\n#[(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]\n\nmatrix = [[1, 2, 4, 5], [5, 6, 7, 8], [9, 10, 11, 12]]\nr = [[row[i] for row in matrix] for i in range(4)]\nprint(r)\n#[[1, 5, 9], [2, 6, 10], [4, 7, 11], [5, 8, 12]]（官网案例）\ndel语句：del arr[i]删除索引为i的元素，del arr[:]为清空数组,del arr[i:j]为清空i到j之前的元素，包括i不包括j。\n遍历方式\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8]\n\nfor i in range(len(list1)):\n    print(i, list1[i])\n\nfor i, val in enumerate(list1):\n    print(i, val)\n2.tuple\ntuple1 = () 此时tuple1为tuple类型tuple2 = (1) 此时tuple2非tuple类型，而是int类型tuple3 = 1, 或者 tuple3 = (1,) 此时tuple3为tuple类型\ntuple1 = ()\ntuple2 = (1)\ntuple3 = 1,\ntuple4 = 1, 2, 3, 4\ntuple5 = tuple4, 5\nprint(type(tuple1))\nprint(type(tuple2))\nprint(type(tuple3))\nprint(type(tuple4))\nprint(tuple5)\n\n#<class 'tuple'>\n<class 'int'>\n<class 'tuple'>\n<class 'tuple'>\n((1, 2, 3, 4), 5)\ntuple可以使用切片，但是tuple不可变，不能给其中元素重新赋值。\ntuple1 = 1, 2, 3, 4, 5, 6\ntuple1[2] = 5\n\n#Traceback (most recent call last):\n  File \"E:/Programs/python/data-structure/list-demo.py\", line 2, in <module>\n    tuple1[2] = 5\nTypeError: 'tuple' object does not support item assignment\n可以通过以下代码实现两个变量值的互换\nx = 5\ny = 6\n\nx, y = y, x\nprint(x)\nprint(y)\n\n#6\n5\n3.set\n执行set1={}这种语句，set1的类型为dict而非set\nset1 = {}\nprint(type(set1))\n\n#<class 'dict'>\n当用set构造函数创建set时要注意以下的问题：\nset1 = set('abcedfg')\nprint(set1)\n\n#{'f', 'c', 'g', 'e', 'b', 'a', 'd'}\nset是无序的，并且其中没有重复元素，因此可以通过set实现去重。\nlist1 = [1, 1, 2, 3, 4, 4, 5, 6, 6, 7]\nprint(list(set(list1)))\n\n#[1, 2, 3, 4, 5, 6, 7]\nset可以进行求交集，并集，差集，以及找出只存在于其中一个的元素集合\na = set('abracadabra')\nb = set('alacazam')\n\nprint(a)\nprint(b)\n\nprint(a & b)\nprint(a | b)\nprint(a - b)\nprint(a ^ b)\n\n#\n{'r', 'b', 'a', 'c', 'd'}\n{'z', 'a', 'm', 'c', 'l'}\n{'c', 'a'}\n{'z', 'r', 'b', 'a', 'm', 'c', 'd', 'l'}\n{'r', 'b', 'd'}\n{'z', 'm', 'r', 'b', 'd', 'l'}\n\n4.dict\n初始化dict，需要将key与value都加上引号：\ndict1 = {'name': 'Jero', 'age': 20}\n获取可采用更简单的方法\ndict2 = dict(name='Jero', age=20)\n遍历dict时，有如下选择\ndict1 = {'name': 'Jero', 'age': 20, 'gender': 'male'}\n\nfor i in dict1:\n    print(i, dict1[i])\n#name Jero\nage 20\ngender male\n\n\nfor val in dict1.values():\n    print(val)\n#Jero\n20\nmale\n\n\nfor key, val in dict1.items():\n    print(key, val)\n运算：\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\nprint(list1 * 2)\n\nlist1 += list2\n\nprint(list1)\n\n#[1, 2, 3, 4, 5, 6]\n[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}