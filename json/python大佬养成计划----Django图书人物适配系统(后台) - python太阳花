{"title": "python大佬养成计划----Django图书人物适配系统(后台) - python太阳花 ", "index": "windows,sqlite,mysql,python", "content": "Django\nPython下有许多款不同的 Web 框架。Django是重量级选手中最有代表性的一位。许多成功的网站和APP都基于Django。 Django是一个开放源代码的Web应用框架，由Python写成。\nDjango基础\n版本：Django 1.10使用Pycharm创建新项目Django，命名为FirstDjango有FirstDjango目录，templates目录，manage.py文件运行manage.py文件类似flask_script命令行\n python manage.py makemigrations   #相当于初始化数据库表\n python manage.py migrate #相当于数据库迁移命令，这里的数据库存储都是放在db.sqlite3文件里\n python manage.py createsuperuser #创建超级用户，生成db.sqlite3文件\n python manage.py runserver 7899 #默认端口号：8000\n访问http://127.0.0.1:7899/，可以看见It worked页面，但还没有真正的运行APP修改语言，时区(setting.py)\n# LANGUAGE_CODE = 'en-us'\nLANGUAGE_CODE = 'zh-hans'\n\n# TIME_ZONE = 'UTC'\nTIME_ZONE = 'Asia/Shanghai'\nDjango不同于flask,不需要在每次修改代码时，重启程序。\nhttp://127.0.0.1:7899/admin/，可以访问到后台管理这里可以添加新用户和新的组，新的用户、组可以被分配权力，但不能执行超级用户的分发权限的功能示例：给add_group组添加‘Can add group  ’创建用户normal，隶属add_group组，勾选职员状态（指明用户是否可以登录到这个管理站点）。使用normal用户登陆后台管理时，将只有增加组的选项。\n创建自己的应用(app) -- book\nterminal输入\npython manage.py startapp book\n会在当前项目里生成book/目录\n创建好自己的应用文件后,首先在项目里注册应用setting.py\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'book',\n]\n开始写数据库结构(model.py)\n首先确定数据库表有哪些：书籍、人物。\n然后确定每个表的结构，书籍的属性有：id,标题，出版时间，摘要，封面。人物属性：id,姓名，性别，简介，所属书籍。\n最后确定表之间的关系：一个书籍里面有多个人物，人物数据库表写外键\n在django框架结构里，不需要像flask写反向引用\n# book/models.py\nfrom django.db import models\n\n# Create your models here.\nclass BookInfo(models.Model):\n    # 这里不需要写id,Django框架默认会生成id,并作为主键pk\n    btitle = models.CharField(max_length=100,unique=True,verbose_name='书籍标题')     # 表示在后台管理中这一栏的中文显示\n    bpub_time  = models.DateField(verbose_name='出版时间')\n    # bcontent = models.TextField(default='摘要',verbose_name='书籍摘要')\n    # bimg = models.ImageField(default=None,upload_to='static/uploads/')\n    class Meta:    ##表示这个数据库表在后台中的中文显示，因为英语区分单复数，所以需要写上单复数的中文显示\n        verbose_name = '书籍信息'\n        verbose_name_plural = '书籍信息'\n    def __str__(self):\n        return '%s' %(self.btitle)\n\nclass HeroInfo(models.Model):\n    hname = models.CharField(max_length=50,verbose_name='人物姓名')\n    hgender = models.BooleanField(default=True,verbose_name='人物性别')\n    # 任务简介\n    hcontent = models.TextField(verbose_name='人物简介')\n    # 多的一端写外键\n    hbook = models.ForeignKey(BookInfo,verbose_name='所属书籍')\n    @property\n    def gender(self):\n        if self.hgender:\n            return '男'\n        else:\n            return '女'\n    class Meta:\n        verbose_name = '人物信息'\n        verbose_name_plural = '人物信息'\n    def __str__(self):\n        return '%s' %(self.hname)\n使用sqlite3文件类型数据库\nDjango默认使用sqlit3数据库，可在项目的setting.py文件中查看\nDATABASES = {\n    'default': {\n         'ENGINE': 'django.db.backends.sqlite3',\n         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n     }\n}\n写好应用book的models.py文件后，我们开始创建数据库\npython manage.py makemigrations   \npython manage.py migrate \n如何进入sqlite3数据库表\npython manage.py shell    #打开类似数据库交互命令的窗口\n1. 数据库的增添数据\n>>> from book.models import BookInfo,HeroInfo\n>>> from datetime import date\n>>> book1 = BookInfo(btitle='小王子',bpub_time=date(1942,5,13))\n>>> book1.save()\n\n2. 数据库的查找\n>>> BookInfo.objects.all()\n<QuerySet [<BookInfo: 小王子>]>\n根据指定信息查找\n>>> book = BookInfo.objects.get(id=1)\n>>> book.btitle\n'小王子'\n3.数据库数据的修改\n>>> book1.btitle = '安徒生童话'\n>>> book1.save()\n>>> book = BookInfo.objects.get(id=1)\n>>> book.btitle\n'安徒生童话'\n\n4. 数据库数据的删除\n>>> book = BookInfo.objects.get(id=1)\n>>> book.delete()\n(1, {'book.HeroInfo': 0, 'book.BookInfo': 1})\n>>> book = BookInfo.objects.all()\n>>>\n\n5. 数据库表之间的关联\n 首先，创建没有外键的数据库表信息\n>>> book1 = BookInfo(btitle='小王子',bpub_time=date(1942,5,13))\n>>> book2 = BookInfo(btitle='睡美人',bpub_time=date(1952,6,29))\n>>> book1.save()\n>>> book2.save()\n\n然后，创建外键所在的数据库表信息\n1. 根据数据表结构直接创建人物\n>>> hero1 = HeroInfo(hname='小王子',hgender=True,hcontent='小王子没有被成人那骗人的世界所征服',hbook=book1)\n>>> hero1 = HeroInfo(hname='玫瑰花',hgender=False,hcontent='玫瑰花的虚荣心伤害了小王子对她的感情',hbook=book1)\n>>> hero1.save()\n>>> hero2.save()\n2. 根据已知的书籍对应的人物信息中添加人物\n>>> book1 = BookInfo.objects.get(id=2)\n>>> book1.heroinfo_set.all()\n<QuerySet [<HeroInfo: 玫瑰花>, <HeroInfo: 小王子>]>\n>>> book1.heroinfo_set.create(hname='小狐狸',hgender=True,hcontent='肉眼看不见事务的本质，只有用心灵才能洞察一切')\n<HeroInfo: 小狐狸>\n\n查询人物信息有两种方式\n1. 根据人物数据库表直接查找\n>>> HeroInfo.objects.all()\n<QuerySet [<HeroInfo: 玫瑰花>, <HeroInfo: 小王子>]>\n\n2. 根据与数据对象的关系查找\n>>> book1 = BookInfo.objects.get(id=2)\n>>> book1.heroinfo_set.all()\n<QuerySet [<HeroInfo: 玫瑰花>, <HeroInfo: 小王子>]>\n>>>\n\n使用mysql文件类型数据库\n修改setting.py文件中的数据库配置\n# Database\n# https://docs.djangoproject.com/en/1.10/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        # 'ENGINE': 'django.db.backends.sqlite3',\n        # 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'firstdjango',    #数据库名称，若没有的话，先在数据库中建立\n        'USER': 'root',\n        'PASSWORD': 'sheen',\n        'HOST': 'localhost',\n        'PORT': '3306',\n    }\n}\n这里若直接初始化数据库会报错\ndjango.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module: No module named 'MySQLdb'\n\n需要对项目的__init__.py文件进行设置\n# \\PycharmProjects\\FristDjango\\FristDjango\\__init__.py\nimport pymysql\npymysql.install_as_MySQLdb()\n终端运行命令,在mysql数据库中，就可以查看到所有的表信息\n python manage.py makemigrations  \n python manage.py migrate \n站点对数据库的操作\n通过命令对数据库的操作尤不方便，我们通过后台管理的网页来实现对数据库的操作首先需在admin.py文件中注册数据库表\n#book/admin\nfrom django.contrib import admin\nfrom book.models import BookInfo,HeroInfo\n# Register your models here.\nadmin.site.register(BookInfo)\nadmin.site.register(HeroInfo)\n书籍信息只显示标题,和人物信息只显姓名，不利于查看，修改注册的表结构\n#book/admin.py\nfrom django.contrib import admin\nfrom book.models import BookInfo,HeroInfo\n\n# Register your models here.\n\nclass BookInfoAdmin(admin.ModelAdmin):\n    list_display = ['btitle','bpub_time']\n\nclass HeroInfoAdmin(admin.ModelAdmin):\n    list_display = ['hname','hgender','hcontent','hbook']   #显示栏\n    list_filter = ['hbook'] #过滤器\n    search_fields = ['hname','hbook']   #搜索栏\n    list_per_page = 2   #每页显示多少条数据\nadmin.site.register(BookInfo,BookInfoAdmin)\nadmin.site.register(HeroInfo,HeroInfoAdmin)\n\n如何在图书表中直接添加人物,网页显示效果：如果跳转到图书详情的页面，可以直接添加人物\n添加HeroInline类，修改BookInfoAdmin类\n# book/admin.py\nclass HeroInline(admin.TabularInline):\n    model = HeroInfo\n    extra = 2   #每次增加两个添加人物的表单\n    \n\nclass BookInfoAdmin(admin.ModelAdmin):\n    list_display = ['btitle','bpub_time']\n    inlines = [HeroInline]\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}