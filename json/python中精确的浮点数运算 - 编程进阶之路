{"title": "python中精确的浮点数运算 - 编程进阶之路 ", "index": "python", "content": "起步\n浮点数的一个普遍的问题是它们不能精确的表示十进制数。\n>>> a = 4.2\n>>> b = 2.1\n>>> a + b\n6.300000000000001\n>>> (a + b) == 6.3\nFalse\n>>>\n这是由于底层 CPU 和 IEEE 754 标准通过自己的浮点单位去执行算术时的特征。看似有穷的小数, 在计算机的二进制表示里却是无穷的。\n一般情况下，这一点点的小误差是允许存在的。如果不能容忍这种误差（比如金融领域），那么就要考虑用一些途径来解决这个问题了。\nDecimal\n使用这个模块不会出现任何小误差。\n>>> from decimal import Decimal\n>>> a = Decimal('4.2')\n>>> b = Decimal('2.1')\n>>> a + b\nDecimal('6.3')\n>>> print(a + b)\n6.3\n>>> (a + b) == Decimal('6.3')\nTrue\n尽管代码看起来比较奇怪，使用字符串来表示数字，但是 Decimal 支持所有常用的数学运算。 decimal 模块允许你控制计算的每一方面，包括数字位数和四舍五入。在这样做之前，需要创建一个临时上下文环境来改变这种设定：\n>>> from decimal import Decimal, localcontext\n>>> a = Decimal('1.3')\n>>> b = Decimal('1.7')\n>>> print(a / b)\n0.7647058823529411764705882353\n>>> with localcontext() as ctx:\n...     ctx.prec = 3\n...     print(a / b)\n...\n0.765\n>>> with localcontext() as ctx:\n...     ctx.prec = 50\n...     print(a / b)\n...\n0.76470588235294117647058823529411764705882352941176\n>>>\n由于 Decimal 的高精度数字自然也就用字符串来做展示和中转。\n总结\n总的来说，当涉及金融领域时，哪怕是一点小小的误差在计算过程中都是不允许的。因此 decimal 模块为解决这类问题提供了方法。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "1"}