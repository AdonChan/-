{"title": "分类模型——变量选择 - 个人文章 ", "index": "数据分析,python", "content": "import numpy as np  \nimport scipy as sp  \nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nSplit train and test\nfrom sklearn.cross_validation import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(customer.ix[:,0:customer.columns.size-1], customer.ix[:,customer.columns.size-1], test_size = 0.2)\nx_train, x_test, y_train, y_test = train_test_split(order.ix[:,0:order.columns.size-1], order.ix[:,order.columns.size-1], test_size = 0.2)\n\nPearson Correlation for Order\nfrom scipy.stats import pearsonr  \n\nprr = []\nfor i in range(order.columns.size-1):\n   frame = pearsonr(order.iloc[:,i], order.iloc[:,order.columns.size-1]) \n   prr.append(frame)\n\nresult = pd.concat([pd.DataFrame(order.columns.values.tolist()), pd.DataFrame(prr)], axis=1) \nresult.columns = ['Features', 'Pearson', 'Pvalue']\nresult\nresult.to_csv('result.csv', index = True, header = True)\n\nPearson Correlation for Customer\nfrom scipy.stats import pearsonr  \nprr = []\nfor i in range(customer.columns.size-1):\n   frame = pearsonr(customer.iloc[:,i], customer.iloc[:,customer.columns.size-1]) \n   prr.append(frame)\n\nresult = pd.concat([pd.DataFrame(customer.columns.values.tolist()), pd.DataFrame(prr)], axis=1) \nresult.columns = ['Features', 'Pearson', 'Pvalue']\nresult\nresult.to_csv('result.csv', index = True, header = True)\n\nRandom forest\nfrom sklearn.ensemble import RandomForestRegressor  \nclf = RandomForestRegressor()\nclf.fit(x_train, y_train)\n\nfrom sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier(n_jobs=100)\nclf.fit(x_train, y_train)\n\nMIC\nfrom minepy import MINE\nmic = []\nfor i in range(customer.columns.size-1):\n   frame = m.compute_score(customer.iloc[:,i], customer.iloc[:,34]) \n   prr.append(frame)\nresult = pd.concat([pd.DataFrame(customer.columns.values.tolist()), pd.DataFrame(prr)], axis=1) \nresult.columns = ['Features', 'Pearson', 'Pvalue']\nresult.to_csv('result.csv', index = True, header = True)\n\nFeature Correlation\ncorr = customer.corr()\ncorr.to_csv('result.csv', index = True, header = True)\n\ntar_corr = lambda x: x.corr(x['tar'])\ncus_call.apply(tar_corr)\ncus_call.corrwith(cus_call.tar)\n\nFeature Importance\n系数反映每个特征的影响力。越大表示该特征在分类中起到的作用越大\nimportances = pd.DataFrame(sorted(zip(x_train.columns, map(lambda x: round(x, 4), clf.feature_importances_)), reverse=True))\nimportances.columns = ['Features', 'Importance']\nimportances.to_csv('result.csv', index = True, header = True)\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}