{"title": "flask查询whois信息实例 - python ", "index": "python,whois,jinja2,flask", "content": "flask基础实现不再赘述，不了解的同学可以通过官方文档学习http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-iii-web-forms\nStep 1 新建查询whois信息的form类\n在forms.py中添加如下代码：\n# -*- coding: utf-8 -*-\nfrom flask.ext.wtf import Form\nfrom wtforms import StringField\nfrom wtforms.validators import DataRequired\n\nclass WhoisForm(Form):\n    myDomain = StringField('myDomain', validators=[DataRequired()])\n很简单，跟官方教程差不多\nStep 2 创建Whois信息模板\n新建一个whois.html文件，代码如下：\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>GetWhois</title>\n</head>\n<body text=#000000 vLink=#205D83 aLink=#ff6600 link=#10304A bgColor=#ffffff text-align=\"center\">\n<div align=\"center\"><a href=\"index\"><img src=\"static/images/logo.png\" width=\"270\" height=\"129\" border=\"0\"></a>\n    </div><BR>\n<BR><BR>\n<div align=\"center\"><p><h1>Whois信息查询</h1></p></div>\n<P style=\"HEIGHT: 22px\"></P>\n<div align=\"center\">\n<form action=\"\" method=\"post\" name=\"whois\" text-align=\"center\">\n    {{ form.hidden_tag() }}\n    <p>{{form.myDomain(size=80)}}</p>\n    <p><input type=\"submit\" value=\"查询\"></p>\n</form></div>\n<div align=\"center\">\n<P style=\"HEIGHT: 30px\"></P>\n    <table width=\"800px\" border=\"1\">\n{% for key in info %}\n        <tr>\n<td width=\"150px\" align=\"left\"> {{ key }} :</td><td aligh=\"left\">{{ info[key] }}</td>\n        </tr>\n{%endfor%}</table><br/>\n</div>\n</body>\n</html>\n这里只为做实例，所以没有设置继承模板，如果是一个整体的项目，建议通过继承实现，保持风格一致。实例通过whois模块得到相关信息，返回的结果是一个字典，如图所示\n\n所以用了以下jinja2语句将信息输出到网页上\n<table width=\"800px\" border=\"1\">\n{% for key in info %}\n        <tr>\n<td width=\"150px\" align=\"left\"> {{ key }} :</td><td aligh=\"left\">{{ info[key] }}</td>\n        </tr>\n{%endfor%}</table><br/>\nStep 3 Whois函数实现\n在views.py中添加实现代码\n@app.route('/whois',methods=['GET','POST'])\ndef Whois():\n    form = WhoisForm()\n    if form.validate_on_submit():\n        info_dict = GetWhois.MyWhois(form.myDomain.data)\n        return render_template('whois.html',form = form, info = info_dict)\n    return render_template('whois.html',form = form)\n其中GetWhois.MyWhois函数的实现，在GetWhois.py中实现，具体为\n#!/usr/bin/env python\n# -*- encoding: utf-8 -*-\n\nimport whois\n\ndef MyWhois(mydomain):\n    try:\n        w = whois.whois(mydomain)\n        return w\n    except Exception,e:\n        print Exception,e\n        return {}\nok,程序到这里基本可以实现需要的内容了，查询效果如图\nStep 4 进一步优化\n我们看到输出到网页时，如status、domain_name等字段的值是列表，是否可以将其进一步分解输出呢，答案是可行的。我们可以利用jinja2的内建检查器来判断参数是否为list，若是，则分解打印于是将whois.html修改成\n    <table width=\"800px\" border=\"1\">\n{% for key in info %}\n        <tr>\n<td width=\"150px\" align=\"left\"> {{ key }} :</td>\n        <td aligh=\"left\">\n            {% if info[key] is sequence %}\n                {% for value in info[key] %}\n                    {{ value }}<br/>\n                {% endfor %}\n            {% else %}\n                {{ info[key] }}\n            {% endif %}\n        </td>\n        </tr>\n{%endfor%}\n        </table><br/>\n执行后看效果图，What The Fuck!!!字符串也被分解打印了。\n再次修改，判断为字符串，则先打印，然后再去判断是否为List\n    <table width=\"800px\" border=\"1\">\n{% for key in info %}\n        <tr>\n<td width=\"150px\" align=\"left\"> {{ key }} :</td>\n        <td aligh=\"left\">\n            {% if info[key] is string %}\n                {{ info[key] }}\n            {% elif info[key] is sequence %}\n                {% for value in info[key] %}\n                    {{ value }}<br/>\n                {% endfor %}\n            {% else %}\n                {{ info[key] }}\n            {% endif %}\n        </td>\n        </tr>\n{%endfor%}\n        </table><br/>\n终于乖乖的出来了我们期盼的结果\n小结\n实例写完后，目录结构为\n|____app\n| |______init__.py\n| |____forms.py\n| |____GetWhois.py\n| |____static\n| | |____images\n| | | |____logo.png\n| |____templates\n| | |____whois.html\n| |____views.py\n|____config.py\n|____run.py\n|____tmp\n学习了flask的form基本实现，jinja2的部分语法。\n附录 内建检查器：\n*'''callable(object)''' \n对象是否可调用 \n*'''defined(value)''' \n对象是否已定义 \n*'''divisibleby(value, num)''' \nvalue是否可以被num整除 \n*'''escaped(value)''' \n是否已转义 \n*'''even(value)''' \n是否为奇数 \n*'''iterable(value)''' \n是否可以循环 \n*'''lower(value)''' \n是否为小写 \n*'''none(value)''' \n是否为None \n*'''number(value)''' \n是否为数字 \n*'''odd(value)''' \n是否为偶数 \n*'''sameas(value, other)''' \nvalue是否与other为同一个对象实例 \n*'''sequence(value)''' \n是否为序列 \n*'''string(value)''' \n是否是字符串 \n*'''undefined(value)''' \n是否未定义 \n*'''upper(value)''' \n是否为大写 \n\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "2"}