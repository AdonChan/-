{"title": "python大佬养成计划----flask应用(表单) - python太阳花 ", "index": "python", "content": "1. 为什么使用Flask-WTF？\nrequest对象公开了所有客户端发送的请求信息。特别是request.form可以访问POST请求提交的表单数据。\n尽管Flask的request对象提供的支持足以处理web表单，但依然有许多任务会变得单调且重复。\n表单的HTML代码生成和验证提交的表单数据就是两个很好的例子。\n优势：\nFlask-WTF扩展使得处理web表单能获得更愉快的体验。该扩展是一个封装了与框架无关的WTForms包的Flask集成。\n\n\n2. 什么是表单处理?\n在网页中，为了和用户进行信息交互总是不得不出现一些表单。\nflask设计了WTForm表单库来使flask可以更加简便地管理操作表单数据。\nWTForm中最重要的几个概念如下：\n\n1). Form类，开发者自定义的表单必须继承自Form类或者其子类。\nForm类最主要的功能是通过其所包含的Field类提供对表单内数据的快捷访问方式。\n\n2). 各种Field类，即字段。一般而言每个Field类都对应一个input的HTML标签。\n比如WTForm自带的一些Field类比如BooleanField就对应<input type=\"checkbox\">，\nSubmitField就对应<input type=\"submit\">等等。\n\n3). Validator类。这个类用于验证用户输入的数据的合法性。\n比如Length验证器可以用于验证输入数据的长度，\nFileAllowed验证上传文件的类型等等。\n\n　　另外，flask为了防范csfr(cross-site request forgery)攻击，   默认在使用flask-wtf之前要求app一定要设置过secret_key。   最简单地可以通过app.config['SECRET_KEY'] = 'xxxx'来配置。\n3. 常见的Field类\n　　PasswordField　　   密码字段，自动将输入转化为小黑点\n　　DateField　　       文本字段，格式要求为datetime.date一样\n　　IntergerField　　   文本字段，格式要求是整数\n　　DecimalField　　    文本字段，格式要求和decimal.Decimal一样\n　　FloatField　　      文本字段，值是浮点数\n　　BooleanField　　    复选框，值为True或者False\n　　RadioField　　      一组单选框\n　　SelectField　　     下拉列表，需要注意一下的是choices参数确定了下拉选项，\n                   但是和HTML中的<select> 标签一样，其是一个tuple组成的列表，\n                   可以认为每个tuple的第一项是选项的真正的值，而第二项是alias。\n\n　　MultipleSelectField　　可选多个值的下拉列表\nValidator验证函数\nValidator是验证函数，把一个字段绑定某个验证函数之后，flask会在接收表单中的数据之前对数据做一个验证，\n如果验证成功才会接收数据。验证函数Validator如下，具体的validator可能需要的参数不太一样，这里只给出\n一些常用的，更多详细的用法可以参见wtforms/validators.py文件的源码，参看每一个validator类需要哪些参数：\n\n　　*基本上每一个validator都有message参数，指出当输入数据不符合validator要求时显示什么信息。\n　　Email　　验证电子邮件地址的合法性，要求正则模式是^.+@(12+)$\n　　EqualTo　　比较两个字段的值，通常用于输入两次密码等场景，可写参数fieldname，不过注意其是一个字符串变量，指向同表单中的另一个字段的字段名\n　　IPAddress　　验证IPv4地址，参数默认ipv4=True,ipv6=False。如果想要验证ipv6可以设置这两个参数反过来。\n　　Length　　验证输入的字符串的长度，可以有min,max两个参数指出要设置的长度下限和上限,注意参数类型是字符串，不是INT!!\n　　NumberRange　　验证输入数字是否在范围内，可以有min和max两个参数指出数字上限下限，注意参数类型是字符串，不是INT!!然后在这个validator的message参数里可以设置%(min)s和%(max)s两个格式化部分，来告诉前端这个范围到底是多少。其他validator也有这种类似的小技巧，可以参看源码。\n　　Optional　　无输入值时跳过同字段的其他验证函数\n　　Required　　必填字段\n　　Regexp　　用正则表达式验证值，参数regex='正则模式'\n　　URL　　验证URL，要求正则模式是^[a-z]+://(?P<host>3+)(?P<port>:[0-9]+)?(?P<path>/.*)?$\n　　AnyOf　　确保值在可选值列表中。参数是values（一个可选值的列表）。特别提下，和SelectField进行配合使用时，不知道为什么SelectField的choices中项的值不能是数字。。否则AnyOf的values参数中即使有相关数字也无法识别出当前选项是合法选项。我怀疑NoneOf可能也是一样的套路。\n　　NoneOf　　确保值不在可选值列表中\n#forms.py文件：用来设定规则\nfrom flask_wtf import FlaskForm\nfrom flask_wtf.file import FileRequired, FileAllowed\nfrom wtforms import StringField, PasswordField, SubmitField, FileField\nfrom wtforms.validators import DataRequired, Length\n\n\nclass LoginForm(FlaskForm):\n    name = StringField(\n        label=\"用户名/邮箱/手机号\",\n        validators=[\n            # DataRequired(\"请输入用户名\"),\n            Length(3, 20, message=\"长度不符\"),\n        ]\n    )\n    passwd = PasswordField(\n        label=\"密码\",\n        validators=[\n            # DataRequired(\"请输入密码\"),\n            Length(3, 20),\n        ], )\n\n    file = FileField(\n        label=\"简历\",\n        validators=[\n            FileRequired(),\n            FileAllowed(['pdf', 'txt'], 'pdf 能被接收')\n        ]\n    )\n#templates/demo/login.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<form method=\"POST\" action=\"/login/\">\n    {{ form.hidden_tag() }}\n    {{ form.name.label }} {{ form.name }}\n    {{ form.passwd.label }} {{ form.passwd }}\n    {{ form.file }}\n    <input type=\"submit\" value=\"Go\">\n</form>\n\n</body>\n</html>\n#主程序\nimport random\nfrom flask import Flask, redirect, render_template\nfrom forms import LoginForm\nfrom flask_bootstrap import  Bootstrap\n\napp = Flask(__name__)\nbootstrap = Bootstrap(app)\napp.config['SECRET_KEY'] =  random._urandom(24)\n\n@app.route('/success/')\ndef success():\n    return  \"success\"\n\n@app.route('/login/', methods=('GET', 'POST'))\ndef submit():\n    # 实例化表单对象;\n    form = LoginForm()\n    if form.validate_on_submit():\n        print(form.data)\n        return redirect('/success/')\n    return render_template('demo/login.html', form=form)\napp.run()\n\n\n\n.@ ↩\n\n@ ↩\n\n/: ↩\n\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}