{"title": "leetcode-78-Subsets - 个人文章 ", "index": "python", "content": "描述\nGiven a set of distinct integers, nums, return all possible subsets(the power set).\nNote:\nThe solution set must not contain duplicate subsets.\nFor example,\nIf nums = [1,2,3], a solution is:[   [3],   [1],   [2],   [1,2,3],   [1,3],   [2,3],   [1,2],   [] ]\n\nclass Solution:\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        cur_array=[[],]\n        for num in nums:\n            self.dfs(cur_array,num)\n        # print(cur_array)\n        return cur_array\n\n    def dfs(self,cur_array,num_in):\n        # new_array1=cur_array.append(num_in)\n        # new_array2=cur_array\n        # print(num_in)\n        new_array=list(map(lambda x:x+[num_in],cur_array))\n        # print(list(new_array))\n        cur_array.extend(new_array)\n\n\nif __name__=='__main__':\n    st=Solution()\n    st.subsets([1,2,3])\n解释：就是普通的动态规划吧，找准规律，所有数字过一遍，每个数字都有添加和不被添加两种情况，所有情况的综合\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}