{"title": "Django-REST-Framework(1) - ormsf ", "index": "rest-api,django,python", "content": "We're going to create a simple API to allow admin users to view and edit the users and groups in the system.\nProject setup\nCreate a new Django project named tutorial, then start a new app called quickstart.\n# Create the project directory\n$ mkdir tutorial; cd tutorial\n\n# Create a virtualenv to isolate our package dependencies locally\n$ virtualenv env\n$ source -p /usr/bin/python3 env/bin/activate\n\n# Install Django and Django REST framework into the virtualenv\npip install django\npip install djangorestframework\n\n# Set up a new project with a single application\ndjango-admin.py startproject tutorial .  # Note the trailing '.' character\ncd tutorial\ndjango-admin.py startapp quickstart\ncd ..\nNow sync your database for the first time:\npython manage.py migrate\nWe'll also create an initial user named admin with a password of password123. We'll authenticate as that user later in our example.\npython manage.py createsuperuser\nOnce you've set up a database and initial user created and ready to go, open up the app's directory and we'll get coding...\nSerializers\nFirst up we're going to define some serializers. Let's create a new module named tutorial/quickstart/serializers.py that we'll use for our data representations.\nfrom django.contrib.auth.models import User, Group\nfrom rest_framework import serializers\n\n\nclass UserSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = User\n        fields = ('url', 'username', 'email', 'groups')\n\n\nclass GroupSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = Group\n        fields = ('url', 'name')\nNotice that we're using hyperlinked relations in this case, with HyperlinkedModelSerializer. You can also use primary key and various other relationships, but hyperlinking is good RESTful design.\nViews\nRight, we'd better write some views then. Open tutorial/quickstart/views.py and get typing.\nfrom django.contrib.auth.models import User, Group\nfrom rest_framework import viewsets\nfrom tutorial.quickstart.serializers import UserSerializer, GroupSerializer\n\n\nclass UserViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint that allows users to be viewed or edited.\n    \"\"\"\n    queryset = User.objects.all().order_by('-date_joined')\n    serializer_class = UserSerializer\n\n\nclass GroupViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint that allows groups to be viewed or edited.\n    \"\"\"\n    queryset = Group.objects.all()\n    serializer_class = GroupSerializer\nRather than write multiple views we're grouping together all the common behavior into classes called ViewSets.\nWe can easily break these down into individual views if we need to, but using viewsets keeps the view logic nicely organized as well as being very concise.\nURLS\nOkay, now let's wire up the API URLs. On to tutorial/urls.py...\nfrom django.conf.urls import url, include\nfrom rest_framework import routers\nfrom tutorial.quickstart import views\n\nrouter = routers.DefaultRouter()\nrouter.register(r'users', views.UserViewSet)\nrouter.register(r'groups', views.GroupViewSet)\n\n# Wire up our API using automatic URL routing.\n# Additionally, we include login URLs for the browsable API.\nurlpatterns = [\n    url(r'^', include(router.urls)),\n    url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework'))\n]\nBecause we're using viewsets instead of views, we can automatically generate the URL conf for our API, by simply registering the viewsets with a router class.\nAgain, if we need more control over the API URLs we can simply drop down to using regular class-based views, and writing the URL conf explicitly.\nFinally, we're including default login and logout views for use with the browsable API. That's optional, but useful if your API requires authentication and you want to use the browsable API.\nSettings\nWe'd also like to set a few global settings. We'd like to turn on pagination, and we want our API to only be accessible to admin users. The settings module will be in tutorial/settings.py\nINSTALLED_APPS = (\n    ...\n    'rest_framework',\n)\n\nREST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAdminUser',\n    ],\n    'PAGE_SIZE': 10\n}\nOkay, we're done.\nTesting our API\nWe're now ready to test the API we've built. Let's fire up the server from the command line.\n$ python manage.py runserver\n1.Directly through the browser, by going to the URL http://127.0.0.1:8000/users/...\nps: make sure to login using the control in the top right corner.\n2.We can now access our API, both from the command-line, using tools like curl...\nbash: curl -H 'Accept: application/json; indent=4' -u admin:password123 http://127.0.0.1:8000/users/\n{\n    \"count\": 2,\n    \"next\": null,\n    \"previous\": null,\n    \"results\": [\n        {\n            \"email\": \"admin@example.com\",\n            \"groups\": [],\n            \"url\": \"http://127.0.0.1:8000/users/1/\",\n            \"username\": \"admin\"\n        },\n        {\n            \"email\": \"tom@example.com\",\n            \"groups\": [                ],\n            \"url\": \"http://127.0.0.1:8000/users/2/\",\n            \"username\": \"tom\"\n        }\n    ]\n}\n3.Or using the httpie, command line tool...\n$ http -a admin:password123 http://127.0.0.1:8000/users/\nHTTP/1.1 200 OK\n...\n{\n    \"count\": 2,\n    \"next\": null,\n    \"previous\": null,\n    \"results\": [\n        {\n            \"email\": \"admin@example.com\",\n            \"groups\": [],\n            \"url\": \"http://localhost:8000/users/1/\",\n            \"username\": \"paul\"\n        },\n        {\n            \"email\": \"tom@example.com\",\n            \"groups\": [                ],\n            \"url\": \"http://127.0.0.1:8000/users/2/\",\n            \"username\": \"tom\"\n        }\n    ]\n}\nIf you want to get a more in depth understanding of how REST framework fits together head on over to the tutorial, or start browsing the API guide.\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "0"}