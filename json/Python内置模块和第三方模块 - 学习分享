{"title": "Python内置模块和第三方模块 - 学习分享 ", "index": "python", "content": "Python的强大之处在于他有非常丰富和强大的标准库和第三方库（模块），几乎你想实现的任何功能都有相应的Python库支持，就类似于C#中的类库亦或JAVA的jar包，前端中的JS库。\n使用模块有什么好处\n其实模块化这个概念在任何的编程语言中都是存在的，可以想象一下，如果一直在一个文件里面编写的代码，那么代码会越来越长，后期很难维护和升级。\n为了编写可维护的代码，我们会对代码进行拆分，分到不同的文件里面，这样每个文件的代码量就少了，在python中，一个.py文件就可以理解为一个模块，模块之间可以互相引用。\n除了可以自己编写模块以外python还给我们内置了一些模块称为标准库，还有需要单独安装的第三方库\n模块导入方法\n我们已经知道每一个.py文件其实就是一个模块，那么我们来动手编写一个模块\n#内容为module1.py\nmessage=\"hello world\"\ndef say():\n    print(\"hello\")\n模块定义好了在其他文件中入如何导入模块import module1如果导入多个模块以逗号分隔，如import module_name1,module_name2\n#newdemo.py 新创建的py文件中到入模块，并访问模块下方法\n#第一种导入方式\nimport module1\nmodule1.say()\n#第二种导入方式\nfrom module1 import *\nsay()\n运行一下发现上面的两种导入方式都没毛病，都可以正常运行，我们来对比下两种导入方式：\n\n调用方式不同\n前者是 将被导入的模块的名称放入到当前的模块内； 而后者 是将被导入的函数或变量的名称放入到当前操作的模块内。\nfrom ...import提供了一个简单的方法来导入一个模块中的所有项目。然而这种声明不该被过多地使用。\nfrom ...import导入会和你文件内的函数、变量名称不能冲突会被覆盖(解决方案看代码)\n\n#为了防止名称冲突，通过as起一个别名\nfrom module1 import say as newsay\ndef say():\n    print(\"不是导入模块的say\")\nsay() #自己的\nnewsay() #引来的\n导入模块我们已经会了，那导入包和导入模块一样么，显然不会一样\nimport package_test #导入包的时候会先执行 __init__下的内容\n# 在__init__中from . import test1\nprint(package_test.test1.name)\n内置模块\n一般情况下它们的存放目录\n标准库：应该如何使用标准库：1.datetime模块：datetime模块是对time模块的一个高级封装(time包基于C语言的库函数)\n#前面刚说了模块的不同导入方式，第一种\nimport datetime\nprint(datetime.datetime.now()) #当前时间 2017-12-27 10:05:16.684310\nprint(datetime.date.today()) #格式化输出 2017-12-27\nprint(datetime.datetime.now()+datetime.timedelta(days=10))  #比现在加10天\nprint(datetime.datetime.now()+datetime.timedelta(days=-10)) #比现在减10天\nprint(datetime.datetime.now()+datetime.timedelta(hours=-10)) #比现在减10小时\nprint(datetime.datetime.now()+datetime.timedelta(seconds=120)) #比现在+120s\n#第二种\nfrom datetime import datetime\nprint(datetime.now()) #当前时间 2017-12-27 10:05:16.684310\n2.random模块：Python中的random模块用于生成随机数\nimport random\nprint(random.random()) #用于生成一个0到1的随机符点数: 0 <= n < 1.0 \nprint(random.randint(1,7))#用于生成一个指定范围内的整数,包含1 和 7\nprint(random.randrange(1,3))#随机指定范围内的整数，不包含3\nprint(random.choice('lidao'))#随机字符\nprint(random.choice(['aa','bb','cc']))#随机在列表中取值\nprint(random.randrange(1,9000)+1000)#生成四位数字验证码\n3.sys模块：sys模块提供了一系列有关Python运行环境的变量和函数\nimport sys\n\nprint(sys.platform) #获取当前执行环境的平台，如win32表示是Windows 32bit操作系统，linux2表示是linux平台；\nprint(sys.path) #path是一个目录列表，供Python从中查找第三方扩展模块。在python启动时，sys.path根据内建规则、PYTHONPATH变量进行初始化。\nprint(sys.builtin_module_names) #返回一个列表，包含内建模块的名字\nprint(sys.argv) #可以用sys.argv获取当前正在执行的命令行参数的参数列表(list) sys.argv[0]    当前程序名 sys.argv[1]    第一个参数\n4.os模块：os模块包含普遍的操作系统功能，如文件操作、目录等，与具体的平台无关\nimport os\n\nprint(os.name) #判断现在正在实用的平台，Windows 返回 ‘nt'; Linux 返回’posix'\nprint(os.getcwd())#得到当前工作的目录\nos.rename(\"game.py\",\"game1.py\")#文件重命名  \nprint(os.listdir())#指定所有目录下所有的文件和目录名\nprint(os.mkdir(\"aa\"))#创建目录\nprint(os.system(\"dir\"))#执行shell命令\n当然上面只是简单让大家先了解下内置模块的使用，方法还有很多，后面在案例遇到的时候呢我们再去列出来。\n第三方模块\n1.xlrd模块：Python使用xlrd模块读写Excel文件\n#第一步：通过pip install xlrd 安装\n#第二步：导入模块\nimport xlrd\n#第三步：读取数据\ndata = xlrd.open_workbook('test.xlsx')\ntable=data.sheets()[0] #通过索引顺序获取工作表\nprint(table.row_values(0)) #整行\nprint(table.col_values(0)) #整列\nprint(table.nrows) #行数\nprint(table.ncols) #列数\n#通过循环行列表数据\nfor i in range(table.nrows):\n    print(table.row_values(i))\nprint(table.cell(0,0).value) #单元格\n2.xpinyin模块：一个把汉字转成拼音的模块\n#pip install xpinyin\nfrom xpinyin import Pinyin\np=Pinyin()\nprint(p.get_pinyin(\"北京\"))\n3.Image模块：Python操作图像的模块\nfrom PIL import Image\nimport os\n\n#pip install Image\n\nim=Image.open(\"test.jpg\") #加载图像\n#im.show() #打开图片\n#创建缩略图\nim.thumbnail((500,500))#thumbnail函数接受一个元组作为参数，分别对应着缩略图的宽高，在缩略时，函数会保持图片的宽高比例。如果输入的参数宽高和原图像宽高比不同，则会依据最小对应边进行原比例缩放。 \nim.save(\"newtest.jpg\",\"JPEG\")\n#图像裁剪\nregion=im.crop((100,100,300,200))\nregion.save(\"croptest.jpeg\")\n# 旋转图片\n# 左旋转45度\nim = im.rotate(45)\nim.save(\"rotate-l45.jpeg\")\n\nPython有很多非常有意思的模块和资源，给大家贴一个地址，自己看看哈https://github.com/jobbole/aw...\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}