{"title": "10行代码让你轻松搞定对象检测 - 个人文章 ", "index": "函数,python,算法,深度学习", "content": "\n摘要：  十行代码轻松搞定对象检测？快来看看如何使用ImageAI。\n\n计算机视觉是人工智能领域中最重要的一个分支。计算机视觉是一门能够识别和理解图像及其场景的计算机软件系统的科学。计算机视觉包括图像识别、对象检测、图像生成、图像超分辨率等多个方面。这其中有众多实际案例的就是对象检测，因此，对象检测可能是计算机视觉最有影响力的一个分支。本教程将简要介绍现代对象检测的概念、软件开发人员所面临的挑战、我们团队提供的解决方案以及高性能对象检测的代码教程。\n对象检测是指计算机和软件系统在图像或场景中对目标对象进行定位和识别的能力。在实际应用中，目标检测已广泛用于人脸识别、车辆检测、行人计数、网络图像、安全系统和无人驾驶。并且，目前有很多种方法可用于对象检测。和其他任何计算机技术一样，对象检测的各种创造性和惊人的用途，来自于开发人员的不懈努力。\n使用现代对象检测方法、以及基于这些方法构建新的应用程序并不是一个简单的任务。早期的对象检测大多使用经典算法，如计算机视觉库OpenCV中的算法。然而，在不同的环境中，这些经典算法的性能并没有达到我们所期望的性能。\n2012年，深度学习有了新的突破，并被开发者广泛使用，出现了R-CNN、Fast-RCNN、Faster-RCNN、RetinaNet等现代高精度对象检测算法（方法），以及SSD和YOLO等快速高精度对象检测算法（方法）。要想使用这些基于深度学习（同时也基于机器学习）的算法进行对象检测，开发人员则需要掌握大量的数学和深度学习框架的相关知识。有数百万计的开发人员想要使用对象检测来创建新的产品。但是，由于深度学习技术理解和使用起来比较复杂，因此，这项技术很难掌握。\n几个月前，我们就意识到了这一问题，我和John Olafenwa共同构建了ImageAI这个Python库，利用ImageAI，仅仅使用几行代码，开发人员就可以轻松地将最新的计算机视觉技术集成到现有的新应用程序中。\n使用ImageAI进行对象检测的步骤如下：\n1.在系统上安装Python。\n2.安装ImageAI及其依赖项。\n3.下载对象检测模型文件。\n4.运行示例代码（10行）。\n详细步骤如下：\n1.从Python官网下载并安装Python 3。\n2.使用pip命令安装以下依赖项：\n(1)Tensorflow\n命令:pip install tensorflow\n(2)Numpy\n命令:pip install numpy\n(3)SciPy\n命令:pip install scipy\n(4)OpenCV\n命令:pip install opencv-python\n(5)Pillow\n命令:pip install pillow\n(6)Matplotlib\n命令:pip install matplotlib\n(7)H5py\n命令:pip install h5py\n(8)Keras\n命令:pip install keras\n(9)ImageAI\n命令:pip installhttps://github.com/OlafenwaMo...\n3.下载用于对象检测的RetinaNet模型文件。\n安装好了依赖项，现在就可以编写第一个对象检测代码了：创建一个Python文件并为其命名（如：FirstDetection.py），然后写入代码（如下图所示）。并将RetinaNet模型文件和要检测的图像复制到包含python文件的文件夹中。\nFirstDetection.py\n\n运行代码，并将结果打印到控制台，在FirstDetection.py所在的文件夹内，你就能找到保存的新图像。 看看下面的2个图像样本和检测后保存的新图像。\n对象检测前：\n\n\n对象检测后：\n\n控制台输出结果：\n人 : 55.8402955532074\n人 : 53.21805477142334\n人: 69.25139427185059\n人: 76.41745209693909\n自行车: 80.30363917350769\n人 : 83.58567953109741\n人: 89.06581997871399\n货车 : 63.10953497886658\n人: 69.82483863830566\n人: 77.11606621742249\n公交车: 98.00949096679688\n货车 : 84.02870297431946\n小汽车: 71.98476791381836\n\n控制台输出结果：\n人: 71.10445499420166\n人: 59.28672552108765\n人: 59.61582064628601\n人: 75.86382627487183\n摩托车: 60.1050078868866\n公交车: 99.39600229263306\n小汽车 : 74.05484318733215\n人: 67.31776595115662\n人 : 63.53200078010559\n人: 78.2265305519104\n人: 62.880998849868774\n人: 72.93365597724915\n人: 60.01397967338562\n人: 81.05944991111755\n摩托车: 50.591760873794556\n摩托车: 58.719027042388916\n人: 71.69321775436401\n自行车: 91.86570048332214\n摩托车: 85.38855314254761\n现在，我们来看一下这10行代码是如何运行的。\n\n如上图所示，第一行导入了ImageAI对象检测类，第二行导入了python os类，第三行定义了一个变量来保存python文件、RetinaNet模型文件和图像所在的文件夹的路径 。\n\n在上图中的5行代码中，第一行中定义了对象检测类，第二行将模型类型设置为RetinaNet，第三行将模型路径设置为RetinaNet模型的路径，第四行将模型加载到对象检测类，第五行调用检测函数，并在输入和输出图像路径中分别进行解析。\n\n在上面的两行代码中，第一行将detector.detectObjectsFromImage函数返回的所有结果进行迭代，第二行打印出模型在每个图像上检测出来的对象名称和概率。\nImageAI支持对象检测过程的定制，其中之一就是能够提取图像中检测到的每个对象。如下所示，通过简单地将extra_detected_objects = True设置为detectObjectsFromImage函数的参数，对象检测模型将为检测到的对象创建创建一个文件夹，提取每个图像，并将每个图像都保存到新创建的文件夹中，并返回一个包含每个对象的数组。\n\n让我们来看第一张图片的输出结果：\n\n所有照片中的行人也被提取出来了，这里我并没有列出所有提取的行人。\nImageAI提供了更多有用的功能，可用于对象检测任务的定制和生产功能部署，它所支持的功能如下：\n1.调整最小概率阈值：默认情况下，检测的概率百分比小于50%的对象将不会显示或输出。ImageAI可以为高确定性案例中提高该概率阈值；或者在需要检测所有可能对象的情况下降低该阈值。\n2.自定义对象检测：使用ImageAI提供的CustomObject类，你可以告诉检测类对一个或几个唯一对象的检测结果进行输出。\n3.检测速度：可以将检测速度设置为“快速”、“更快”和“最快”，可以缩短检测对象所需的时间。\n4.输入类型：你可以指定图像的文件路径，指定图像的Numpy数组或文件流作为输入图像\n5.输出类型：你可以指定detectObjectsFromImage函数将图像以文件还是以Numpy数组的形式返回。\n你可以在GitHub官方存储库中找到有关如何使用上述功能以及ImageAI中包含的其他计算机视觉功能的所有详细信息和文档。\n本文作者：【方向】阅读原文本文为云栖社区原创内容，未经允许不得转载。\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "3"}