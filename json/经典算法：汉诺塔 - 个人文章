{"title": "经典算法：汉诺塔 - 个人文章 ", "index": "递归,golang,python,javascript,算法", "content": "学编程，学IT，算法也是必不可缺的，这一次给大家带来一个经典的递归算法题，汉诺塔。算是算法的入门小题目之一吧~\n视频教程\n什么是汉诺塔？\n我这里直接拉来一个图解释一下（挂了请联系我）就是这么一个东西了，把所有的圆盘从左边移动到右边，并且大的圆盘不能够压住小的。怎么才能完成呢？\n规则理解了，开始钻牛角尖\n先来看看只有一个圆盘的情况，\n嗯 相当的简单  A--->C 就可以了\n两个的情况呢？  也不难  A--->B  A--->C   B--->C\n三个的话有点挑战了 大家自己推一推\n好的 十个呢？就算想了半天弄好了，怎么让程序帮我们做呢？头大！\n牛角尖钻完了，冷静分析\n在我们每次完成之前的状态，都是把最大的圆盘放到了最右边，剩下的圆盘放到了中间。然后把中间的再都放到右边就好了\n这道理就跟把大象装冰箱一样啊 都是三步呢！\n这时候千万不要去想怎么把n-1层都搬到B柱 也不要想怎么把N-1层都搬到C柱，如果继续想下去你就会进入死循环，这时候你只需要做一个思维转换。\n\n当我们把n-1层都搬到了中间柱的时候，只需要把最大的那个盘，从A搬到C柱就好了，剩下的怎么办呢？C柱永远是目标柱，我们不需要去移动它。这时候我们大点力！把B柱子掰下来！扔到A前面！无视掉C柱上面的大圆盘，因为我们不会再去动它了！是不是画面似曾相识？对啊！递归啊！继续把最左边的n-1层都弄到中间，最大的扔到C就好了啊！\n看到这里如果你还在钻牛角尖的话，可以暂时休息一下了。\n思维转换完成的过来写代码！\n// JS写一下\nfunction move(num,from,button,to){\n    // 如果只有一个圆盘\n    if(num==1){\n        console.log(from,\"---->\",to)\n        // 最左边的放到最后边完了个事！\n        return\n    }\n    // 如果柱子有点多咋办呢？\n    // 先把n-1个左边的放到中间呗\n    move(num-1,from,to,button) //放过去了，具体过程是啥？我特么哪里知道 它里面怎么操作?管他呢,反正他自己知道自己干了啥\n    console.log(from,\"---->\",to) // 我就干一件事，我就把左边最大的放到右边，虽然我不知道现在我是不是真正的左边，我可能是被你大力从中间拽过来的左边。\n    // 放完了然后呢？\n    // 把所有中间的柱子扔到最右边去\n    move(num-1,button,from,to)\n}\n\nmove(3,\"A\",\"B\",\"C\") //测试一下\n//golang\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n    move(3,\"A\",\"B\",\"C\")\n}\n\nfunc move(num int,from string,button string,to string){\n    if num==1 {\n        fmt.Printf(\"%s--->%s\\n\",from,to)\n        return\n    }\n    move(num-1,from,to,button)\n    fmt.Printf(\"%s--->%s\\n\",from,to)\n    move(num-1,button,from,to)\n}\n\n# python\n\ndef move(num ,fro,button,to)\n    if (num==1)\n        print(fro,'--->',to)\n        return\n    move(num-1,fro,to,button)\n    print(fro,'--->',to)\n    move(num-1,button,fro,to)\nmove(3,'A','B','C')\n\n总结\n递归这个东西,千万不可钻牛角尖,把大问题分成小问题,复杂问题简单化,如果非要把递归过程推出来的话,那谁都救不了你\n欢迎大家关注我的博客,里面会有我所写博客的视频版本,如果你有更多疑问或者想学前端的话,可以加我微信shouzi_1994或者在博客下方品论留言,三大Q.\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}