{"title": "如何使用Python优雅地处理时间数据 - Python测试开发 ", "index": "python,macbook", "content": "缘起\n很多时候我们不得不和时间打交道，但在Python标准库中处理时间的模块其实设计的不是很友好，为什么我会这么说？因为我相信大部分人几乎每次在处理时间数据时一而再，再而三的去查文档，比如时间和文本格式互转，时间增减等看起来非常基本的操作，在Python中处理起来并不简单。\n最要命的是，在Python标准库中居然有两个模块处理时间，一个叫time，另外一个叫datetime，里面提供了类似的方法但是两个完全不是一回事。到这还没完，标准库里还有一个叫calendar的模块，也是用来处理时间的。\n今天我不带大家去理解他们三者的关系，因为现在你记住了不代表你以后不会忘记。今天的主角是一个优雅到我不能放弃的时间处理库 - arrow。\n简介\narrow是一个专门处理时间和日期的轻量级Python库，它提供了一种合理、智能的方式来创建、操作、格式化、转换时间和日期。\n安装\npip install arrow\n使用\n我们直接看代码，注释既分割线。\n>>> import arrow\n\n# 获取当前时间\n>>> utc = arrow.utcnow()\n>>> utc\n<Arrow [2017-05-11T21:23:58.970460+00:00]>\n\n# 调整时间\n>>> utc = utc.shift(days=+1, hours=-1)\n>>> utc\n<Arrow [2017-05-12T20:23:58.970460+00:00]>\n\n# 修改时间\n>>> utc.replace(hour=4, minute=40)\n<Arrow [2017-05-12T04:40:58.970460+00:00]>\n\n# 转换时区\n>>> local = utc.to('US/Pacific')\n>>> local\n<Arrow [2017-05-11T13:23:58.970460-07:00]>\n\n# 从文本转为时间对象\n>>> arrow.get('2017-05-11T21:23:58.970460+00:00')\n<Arrow [2017-05-11T21:23:58.970460+00:00]>\n\n>>> arrow.get(1367900664)\n<Arrow [2017-05-07T04:24:24+00:00]>\n\n>>> arrow.get('June was born in May 1980', 'MMMM YYYY')\n<Arrow [1980-05-01T00:00:00+00:00]>\n\n# 获取时间戳\n>>> local.timestamp\n1368303838\n\n# 格式化输出\n>>> local.format()\n'2017-05-11 13:23:58 -07:00'\n\n>>> local.format('YYYY-MM-DD HH:mm:ss')\n'2017-05-11 13:23:58'\n\n>>> local.humanize()\n'an hour ago'\n\n# 转为标准库对象\n>>> a.date()\ndatetime.date(2017, 5, 7)\n\n>>> a.time()\ndatetime.time(4, 38, 15, 447644)\n总结\n我没有骗你吧？如果以后你的Python项目需要处理时间，请果断抛弃标准库，arrow将拯救你无数脑细胞。\n附上arrow官方文档，更多酷炫用法还是前往官网。\nhttp://arrow.readthedocs.io/e...\n\n关于作者：Python技术爱好者，目前从事测试开发相关工作，转载请注明原文出处。\n欢迎关注我的博客 https://betacat.online，你可以到我的公众号中去当吃瓜群众。\n\n\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "4"}