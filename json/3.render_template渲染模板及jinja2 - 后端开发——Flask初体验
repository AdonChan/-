{"title": "3.render_template渲染模板及jinja2 - 后端开发——Flask初体验 ", "index": "flask,python", "content": "我们之前的视图函数，返回的都是简单的'Hello Wolrd'之类的字符串，怎么返回一个html呢？首先我们在templates文件夹建立一个html文件，内容随便写一点如下：\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Index</title>\n</head>\n<body>\n<h1>This is index page</h1>\n</body>\n</html>\n我们可以使用Flask对象app的send_static_file方法，使视图函数返回一个静态的html文件，但现在我们不使用这种方法，而是使用flask的render_template函数，它功能更强大。从flask中导入render_template，整体代码如下：\nfrom flask import Flask, render_template\nimport config\n\napp = Flask(__name__)\napp.config.from_object(config)\n\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\nif __name__ == '__main__':\n    app.run()\n\nrender_template函数会自动在templates文件夹中找到对应的html，因此我们不用写完整的html文件路径。用浏览器访问'/'这个地址，显示结果如下：\n\n那么为何称之为模板呢？因为render_template不仅能渲染静态的html文件，也能传递参数给html，使一个html模板根据参数的不同显示不同的内容，这是因为flask使用了jinja2这个模板引擎。要使用模板，在render_template参数中以key=value形式传入变量，在html中使用{{key}}来显示传入的变量，例如：\n# 视图函数\n@app.route('/')\ndef index():\n    return render_template('index.html', contents='This is index page')\n\n# html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Index</title>\n</head>\n<body>\n<h1>{{ contents }}</h1>\n</body>\n</html>    \n浏览器显示的结果与上文是一样的。我们还可以直接把一个类的实例传递过去，并在模板中访问类的属性，例如假设一个类对象obj有a和b属性，关键部分的代码如下：\n# 视图函数中\nreturn render_template('index.html', object=obj)\n\n...\n# html中\n<p>a: {{ object.a }}</p>\n<p>b: {{ object.b }}</p>\n传入一个字典也可以，并且在模板中既可以用dict[key]，也可以用dict.key。\n\n使用过滤器，可以在html中对传入的变量进行处理，其格式是{{ 变量 | 过滤器 }}，例如将前文的{{ contents }}修改为{{ contents | upper}}，浏览器显示的内容就变成了：\n\n所以我们可以很容易就理解，过滤器其实就是以变量为参数的函数，返回处理后的结果，在后端一样可以先用字符串对象的upper()函数处理好再传递给模板，效果是完全一样的。jinja2自带了一些过滤器，例如length/reverse/lower等等 ，并且我们也可以自己按照需求自定义过滤器，模板还支持{{ 变量 | 过滤器1 | 过滤器2 | ... }}这样的操作。想要深入了解的话，可以搜索jinja2过滤器去进一步学习。\n\n模板中还可以使用if else和for in控制语句，与变量使用{{ }}不同，控制语句要放在{% %}里，例如前文的contents传入一个list：\ncontents=[i for i in range(10)]\nhtml中代码如下：\n<h1>\n    {% for i in contents %}\n        {{ i }}{# 注意i也要用两个大括号 #}\n    {% endfor %}\n</h1>\n使用for遍历contents的内容，并用{{ i }}显示出来，同时还用{# #}加了一个注释，还要注意需要使用{% endfor %}来提示循环区域的结束，因为html不像python那样通过缩进来判断循环的区域，if也是同理。浏览器显示结果：\n\n最后for和if结合使用：\n<h1>header</h1>\n    {% for i in contents %}\n        <p>\n        {% if i%2 == 0 %}\n            {{ i }}是偶数{# 注意i也要用两个大括号 #}\n        {% else %}\n            {{ i }}是奇数\n        {% endif %}\n        </p>\n    {% endfor %}\n结果如下（只是演示一下，不要吐槽排版和美观）：\n\n\n                ", "mainLikeNum": ["3 "], "mainBookmarkNum": "2"}