{"title": "Graphite 系列 #2：Carbon 和 Whisper - yexiaoxiaobai ", "index": "python,监控,whisper,carbon,graphite", "content": "标签（空格分隔）： Graphite Carbon Whisper 监控\n\n\n\n  注：该系列文章绝对是学习 Graphite 的好文章，是我见过的将的最全面，最清晰，最简单明了的系列文章。我会把该系列的所有文章全部翻译完成，但是还是推荐各位读读原文。\n\n\n在 Graphite 系列博客中，我将提供一个指南,以帮助使用 Graphite 技术栈完成搭建一个监控和报警系统的所有步骤。声明：我不是一个专家，我仅仅是通过提供更详细的文档帮助 Graphite 社区发展。如果出现一些错误，请在文章下面评论或者是给我发送一封邮件到 feangulo@yaipan.com。\n\n\nGraphite 后端\n\nGraphite 是由多个后端和前端组件组合而成。后端组件被用于存储数值的时间序列数据。前端组件被用于检索度量数据和可选的图像渲染。在这篇博客文章中，我将重点介绍后端组件：Carbon 和 Whisper。\n\n\n\n\n  度量指标可以被发布到一个负载均衡器或者是直接到一个 Carbon 进程。Carbon 进程与 Whisper 数据库包交互来存储时间序列数据到文件系统。\n\n\n安装 Carbon\n\nCarbon 是一个 daemon，其使用一个名为 Twisted 的事件驱动网络引擎来监听时间序列数据。Twisted 框架支持 Carbon 进程以较低的开销处理大量的客户端和处理大量的流量。\n\n\nCarbon Github 项目：点击这里\n\n\n为了安装 Carbon，运行以下命令（假设是 RHEL 操作系统）：\n\n# sudo yum groupinstall \"Development Tools\"\n# sudo yum install python-devel\n# sudo yum install git\n# sudo easy_install pip\n# sudo pip install twisted\n# cd /tmp\n# git clone https://github.com/graphite-project/carbon.git\n# cd /tmp/carbon\n# sudo python setup.py install\n\n\n/opt/graphite 现在应该有 carbon 的 lib 包和配置文件：\n\n# ls -l /opt/graphite\ntotal 16\ndrwxr-xr-x. 2 root root 4096 May 18 23:56 bin\ndrwxr-xr-x. 2 root root 4096 May 18 23:56 conf\ndrwxr-xr-x. 4 root root 4096 May 18 23:56 lib\ndrwxr-xr-x. 6 root root 4096 May 18 23:56 storage\n\n\n安装 Whisper\n\nWhisper 是一个用于存储时间序列数据的数据库包，它被应用通过使用 create， update， 和 fetch 操作来检索以及操作。\n\n\nWhisper Github 项目：点击这里\n\n\n为了安装 Whisper，运行以下命令：\n\n# cd /tmp\n# git clone https://github.com/graphite-project/whisper.git\n# cd /tmp/whisper\n# sudo python setup.py install\n\n\nWhisper 脚本现在应该在应有的位置上：\n\n# ls -l /usr/bin/whisper*\n-rwxr-xr-x. 1 root root 1711 May 19 00:00 /usr/bin/whisper-create.py\n-rwxr-xr-x. 1 root root 2902 May 19 00:00 /usr/bin/whisper-dump.py\n-rwxr-xr-x. 1 root root 1779 May 19 00:00 /usr/bin/whisper-fetch.py\n-rwxr-xr-x. 1 root root 1121 May 19 00:00 /usr/bin/whisper-info.py\n-rwxr-xr-x. 1 root root  674 May 19 00:00 /usr/bin/whisper-merge.py\n-rwxr-xr-x. 1 root root 5982 May 19 00:00 /usr/bin/whisper-resize.py\n-rwxr-xr-x. 1 root root 1060 May 19 00:00 /usr/bin/whisper-set-aggregation-method.py\n-rwxr-xr-x. 1 root root  969 May 19 00:00 /usr/bin/whisper-update.py\n\n\n启动一个 Carbon 进程\n\nCarbon 安装自带了默认的端口和很多其他的配置文件。拷贝已经存在的示例文件。\n\n# cd /opt/graphite/conf\n# cp aggregation-rules.conf.example aggregation-rules.conf\n# cp blacklist.conf.example blacklist.conf\n# cp carbon.conf.example carbon.conf\n# cp carbon.amqp.conf.example carbon.amqp.conf\n# cp relay-rules.conf.example relay-rules.conf\n# cp rewrite-rules.conf.example rewrite-rules.conf\n# cp storage-schemas.conf.example storage-schemas.conf\n# cp storage-aggregation.conf.example storage-aggregation.conf\n# cp whitelist.conf.example whitelist.conf\n# vi carbon.conf\n\n\n在 cache 段下面，line receiver port 已经被指定：\n\n[cache]\nLINE_RECEIVER_INTERFACE = 0.0.0.0\nLINE_RECEIVER_PORT = 2003\n\n\n通过运行以下命令启动一个 carbon-cache  进程：\n\n# cd /opt/graphite/bin\n# ./carbon-cache.py start\nStarting carbon-cache (instance a)\n\n\n该进程现在应该监听在 2003 端口上：\n\n# ps -efla | grep carbon-cache\n1 S root      2674     1  0  80   0 - 75916 ep_pol 00:18 ?        00:00:03 /usr/bin/python ./carbon-cache.py start\n\n# netstat -nap | grep 2003\ntcp        0      0 0.0.0.0:2003                0.0.0.0:*                   LISTEN      2674/python \n\n\n发布度量指标\n\n一个度量值是任何可以随时间变化的可测量的值：\n\n\n每秒的请求数\n进程请求时间\nCPU 利用率\n\n一个数据点是一个元组包含：\n\n\n一个度量值的名字\n一个可度量的值\n在一个指定时间点（通常是一个 timestamp）\n\n客户端应用通过发送数据点到一个 Carbon 进程来发布度量值。这个应用在 Carbon 进程的端口上建立一个 TCP 连接并以一个简单的纯文本格式发送数据点。在我们的例子中，端口是 2003。TCP 连接或许依旧是打开并根据需要重复多次使用。Carbon 进程监听进入的数据但是不给客户端发送任何响应。\n\n数据点格式被定义成：\n\n\n每个数据点是一个单行文本\n在位置 0 是一个带点的度量名称\n在位置 1 是一个值\n在位置 2 是一个 Unix Epoch 的 timestamp\n以空格作为位置的分隔符\n\n比如，这里有一些有效的数据点：\n\n\ncarbon.agents.graphite-tutorial.metricsReceived 28198 1400509108\ncarbon.agents.graphite-tutorial.creates 8 1400509110\nPRODUCTION.host.graphite-tutorial.responseTime.p95 0.10 1400509112\n\n客户端应用有多个方式来发布度量值：\n\n\n使用一个纯文本协议工具比如 netcat (nc) 命令\n使用 pickle 协议\n使用高级消息队列协议（AMQP）\n使用 lib 包比如 Coda Hale metrics library\n\n为了简单起见，在这个教程中我将通过 netcat 命令使用纯文本协议。为了发布以上列出的示例数据点，运行以下命令：\n\nsudo yum install nc\necho \"carbon.agents.graphite-tutorial.metricsReceived 28198 `date +%s`\" | nc localhost 2003\necho \"carbon.agents.graphite-tutorial.creates 8 `date +%s`\" | nc localhost 2003\necho \"PRODUCTION.host.graphite-tutorial.responseTime.p95 0.10 `date +%s`\" | nc localhost 2003\n\n\ncarbon-cache 日志文件将包含关于新的被接收到的度量值的信息，信息被存储在：\n\n# tail -f /opt/graphite/storage/log/carbon-cache/carbon-cache-a/creates.log\n19/05/2014 10:42:44 :: creating database file /opt/graphite/storage/whisper/carbon/agents/graphite-tutorial/metricsReceived.wsp (archive=[(60, 129600)] xff=0.5 agg=average)\n19/05/2014 10:42:53 :: creating database file /opt/graphite/storage/whisper/carbon/agents/graphite-tutorial/creates.wsp (archive=[(60, 129600)] xff=0.5 agg=average)\n19/05/2014 10:42:57 :: creating database file /opt/graphite/storage/whisper/PRODUCTION/host/graphite-tutorial/responseTime/p95.wsp (archive=[(60, 1440)] xff=0.5 agg=average)\n\n\nCarbon 与 Whisper 交互来存储时间序列数据到文件系统。操作文件系统来确保数据文件已经被创建：\n\n# ls -l /opt/graphite/storage/whisper/carbon/agents/graphite-tutorial/\ntotal 3040\n-rw-r--r--. 1 root root 1555228 May 19 10:42 creates.wsp\n-rw-r--r--. 1 root root 1555228 May 19 10:42 metricsReceived.wsp\n# ls -l /opt/graphite/storage/whisper/PRODUCTION/host/graphite-tutorial/responseTime/\ntotal 20\n-rw-r--r--. 1 root root 17308 May 19 10:42 p95.wsp\n\n\n最后，你可以检索关于 Whisper 文件的元数据信息，使用 whisper-info 脚本：\n\n# whisper-info.py /opt/graphite/storage/whisper/PRODUCTION/host/graphite-tutorial/responseTime/p95.wsp \nmaxRetention: 86400\nxFilesFactor: 0.5\naggregationMethod: average\nfileSize: 17308\n\nArchive 0\nretention: 86400\nsecondsPerPoint: 60\npoints: 1440\nsize: 17280\noffset: 28\n\n\nwhisper-dump 脚本是一个更完整的脚本，其可以输出所有存储保留时期的原始数据以及关于 Whisper 文件的元数据信息：\n\n# whisper-dump.py /opt/graphite/storage/whisper/PRODUCTION/host/graphite-tutorial/responseTime/p95.wsp \nMeta data:\n  aggregation method: average\n  max retention: 86400\n  xFilesFactor: 0.5\n\nArchive 0 info:\n  offset: 28\n  seconds per point: 60\n  points: 1440\n  retention: 86400\n  size: 17280\n\nArchive 0 data:\n0: 1400609220, 0.1000000000000000055511151231257827\n1: 0,          0\n2: 0,          0\n3: 0,          0\n4: 0,          0\n5: 0,          0\n...\n1437: 0,          0\n1438: 0,          0\n1439: 0,          0\n\n\n弄明白 Aggregation 方法，最大的保留期， xFilesFactor 和 Whisper 文件的所有其他属性是非常重要的。不要担心，就算你在这点上没有学习到，我将会在接下来的博客文章会更详细地讲诉这些。\n\nGraphite 系列 ：\n\n\nProvision Hardware\nCarbon & Whisper\nWhisper Storage Schemas & Aggregations\nGraphite Webapp\nStress Testing Carbon Caches\nCarbon Aggregators\n\n\n  本文的作者是 franklinangulo，本文的原文是 GRAPHITE SERIES #2: CARBON & WHISPER\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "15"}