{"title": "[零基础学python]复习if语句 - 易水禾 ", "index": "零基础,python", "content": "看官是否记得，在上一部分的时候，有一讲专门介绍if语句的：从if开始语句的征程。在学习if语句的时候，对python编程的基础知识了解的还不是很多，或许没有做什么太复杂的东西。本讲，要对它进行一番复习，通过复习提高一下。如果此前有的东西忘记了，建议首先回头，看看前面那讲。\n\n基本语句结构\n\nif 判断条件1:\n    执行语句1……\nelif 判断条件2:\n    执行语句2……\nelif 判断条件3:\n    执行语句3……\nelse:\n    执行语句4……\n\n\n只有当“判断条件”的值是True的时候，才执行下面的执行语句。\n\n那么，在python中，怎么知道一个判断条件是不是真呢？这个问题我们在眼花缭乱的运算符中已经讲解了一种数据类型：布尔类型。可以通过一个内置函数bool()来判断一个条件的结果True还是False。看看下面的例子，是不是能够理解bool()的判断规则？\n\n>>> bool(\"\")\nFalse\n>>> bool(0)\nFalse\n>>> bool('none')\nTrue\n>>> bool(False)\nFalse\n>>> bool(\"False\")\nTrue\n>>> bool(True)\nTrue\n>>> bool(\"True\")\nTrue\n>>> bool(3>4)\nFalse\n>>> bool(\"b\">\"a\")\nTrue\n>>> bool(not \"\")\nTrue\n>>> bool(not True)\nFalse\n\n\n忘记了怎么办？看下面的语句：\n\nif 忘记:\n    复习-->眼花缭乱的运算符一讲\n\n\n在执行语句中，其实不一定非要把bool()写上的。如同这样：\n\n>>> x = 9\n\n>>> if bool(x>7):       #条件为True则执行下面的\n...     print \"%d more than 7\"%x\n... else:\n...     print \"%d not more than 7\"%x\n... \n9 more than 7\n\n>>> if x>7:\n...     print \"%d more than 7\"%x\n... else:\n...     print \"%d not more than 7\"%x\n... \n9 more than 7\n\n\n以上两个写法是等效的，但是，在实际的编程中，我们不用if bool(x>7)的格式，而是使用if x>7的样式，还要特别提醒，如果写成if (x>7)，用一个括号把条件表达式括起来，是不是可以呢？可以，但也不是python提倡的。\n\n>>> if (x>7):       #不提倡这么写，这不是python风格\n...     print \"%d more than 7\"%x\n... \n9 more than 7\n\n\n拉出来溜溜\n\n平时总有人在不服气的时候说“是骡子是马，拉出来溜溜”，赵本山有一句名言“走两步”。其本质都是说“光说不练是假把式”。今天收到一个朋友的邮件，也询问，在学习python的时候，记不住python的内容。其实不用记，我在前面的课程中已经反复讲过了。但是，在应用中，会越来越熟练。\n\n下面就做一个练习，要求是：\n\n\n接收任何字符和数字的输入\n判断输入的内容，如果不是整数是字符，就告诉给用户；如果是小数，也告诉用户\n如果输入的是整数，判断这个整数是奇数还是偶数，并且告诉给用户\n\n在这个练习中，显然要对输入的内容进行判断，以下几点需要看官注意：\n\n\n通过raw_input()得到的输入内容，都是str类型\n要判断一个字符串是否是由纯粹数字组成，可以使用str.isdigit()（建议看官查看该内置函数官方文档）\n\n下面的代码是一个参考：\n\n#! /usr/bin/env python\n#coding:utf-8\n\nprint \"请输入字符串,然后按下回车键：\"\n\nuser_input = raw_input()\n\nresult = user_input.isdigit()\n\nif not result:\n    print \"您输入的不完全是数字\"\n\nelif int(user_input)%2==0:\n    print \"您输入的是一个偶数\"\nelif int(user_input)%2!=0:\n    print \"您输入的是一个奇数\"\nelse:\n    print \"您没有输入什么呢吧\"\n\n\n特别提醒列为，这个代码不是非常完善的，还有能够修改的地方，看官能否完善之？\n\n再来一个如何？\n\n已知一个由整数构成的list，从中跳出奇数和偶数，并且各放在一个list中。\n\n请看官在看下面的参考代码之前，自己写一写。\n\n#!/usr/bin/env python\n#coding:utf-8\n\nimport random\n\nnumbers = [random.randint(1,100) for i in range(20)] #以list解析的方式得到随机的list\n\nodd = []\neven = []\n\nfor x in numbers:\n    if x%2==0:\n        even.append(x)\n    else:\n        odd.append(x)\n\nprint numbers\nprint \"odd:\",odd\nprint \"even:\",even\n\n\n用这个例子演示一下if在list解析中的应用。看能不能继续改进一些呢？\n\n可以将循环的那部分用下面的list解析代替\n\n#!/usr/bin/env python\n#coding:utf-8\n\nimport random\n\nnumbers = [random.randint(1,100) for i in range(20)] #以list解析的方式得到随机的list\n\nodd = [x for x in numbers if x%2!=0]\neven = [x for x in numbers if x%2==0]\n\nprint numbers\nprint \"odd:\",odd\nprint \"even:\",even\n\n\n一个有趣的赋值\n\n对赋值，看官应该比较熟悉了吧，如果要复习，请看《[赋值，简单也不简单]》(./127.md)以及《[正规地说一句]》(./201.md)的相关内容。\n\n这里说的有趣赋值是什么样子的呢？请看：\n\n>>> name = \"qiwsir\" if \"laoqi\" else \"github\"\n>>> name\n'qiwsir'\n>>> name = 'qiwsir' if \"\" else \"python\"\n>>> name\n'python'\n>>> name = \"qiwsir\" if \"github\" else \"\"\n>>> name\n'qiwsir'\n\n\n总结一下：A = Y if X else Z\n\n什么意思，结合前面的例子，可以看出：\n\n\n如果X为真，那么就执行A=Y\n如果X为假，就执行A=Z\n\n再看看上面的例子，是不是这样执行呢？\n\nif语句似乎简单，但是在编程时间中常用到。勤加练习吧。\n\n有朋友需要看完整教程内容，请点击:零基础学python，这里会及时更新，并且有完整的目录结构，更吸纳了朋友们提出的意见和建议。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "2"}