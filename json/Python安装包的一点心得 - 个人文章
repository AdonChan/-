{"title": "Python安装包的一点心得 - 个人文章 ", "index": "python", "content": "在Python的学习的过程中，需要不断的写代码，查看别人的代码的运行效果。在这个过程中，我们需要不断安装程序的依赖包。\n对于python2的解释器，直接使用pip install 依赖包的名称，即可安装上。\n对于python3的解释器，稍微有点变动，使用pip3 install 依赖包的名称。\n如果在安装的时候，发生了权限不够的问题，在上面的安装命令之前加上 sudo再执行，这时候会提示输入权限密码，输入密码，运行即可。\n例如，在引入mpl_toolkits库的时候，发现引入不了，于是直接去安装，结果安装的时候，报了No matching distribution found for mpl_toolkits的错误。网上各种查找，最后找到了解决方法，其实 mpl_toolkits并不是一个单独的包，只需要升级matplotlib即可引入。\n升级命令：\n\npython3对应pip3 install --upgrade matplotlib\n\npython2对应pip install --upgrade matplotlib\n\n\n在执行别人的demo看效果的时候，发现有一个tkinker包，无论如何也安装不上，查了好多资料，最后有人说这是python解释器自带的包，不需要安装。但是就是引入不了，于是仔细查找，发现了问题的根本原因。引入包的名称和解释器的版本对应不上，具体就是使用了python3的引入方法，结果解释器选择的是python2，最后把解释器的版本修改为python3，demo正常运行了。\n总结：在我们写代码，或者执行别人的代码的时候，如果发现包安装不上。需要检测一下包是不是解释器自带的。进而确定问题原因。\n检测步骤以mac为例：\n\n1.在控制台执行python命令，切入到python环境。\n2.import 对应的包名，如果没有报错，说明是解释器自带的包，反之，不是解释器自带的包。\n\n如果是解释器自带的包，再检查包的引入方法和解释器版本是否对应，加入对应不上，修改解释器的版本即可。\n如果不是解释器自带的包，则需要具体查找安装不上的具体原因，进一步解决。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}