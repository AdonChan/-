{"title": "Django搭建个人博客：用户的登录和登出 - Django搭建个人博客 ", "index": "django,python", "content": "用户管理\n用户数据可以说是大部分网站最重要的资产。用户管理就是对用户数据进行增删改查等操作的功能，自然也就非常的重要了。\n本章开始学习用户管理的内容，首先从用户登录开始。\n在Django中用app来区别不同功能的模块，达到代码隔离和复用。因为用户管理和博客文章的功能不同，因此需要新建一个专门的app。\n进入虚拟环境，运行startapp指令创建新的app：\npython manage.py startapp userprofile\n查看项目目录，发现已经新生成了userprofile目录及其中的文件了。\n再遇表单类\n用户登录时，需要填写账户密码等表单数据，因此又要用到Form表单类。\n在userprofile目录中创建表单类的文件forms.py，编写如下代码：\n/userprofile/forms.py\n\n# 引入表单类\nfrom django import forms\n# 引入 User 模型\nfrom django.contrib.auth.models import User\n\n# 登录表单，继承了 forms.Form 类\nclass UserLoginForm(forms.Form):\n    username = forms.CharField()\n    password = forms.CharField()\n在前面发表文章的模块中，表单类继承了forms.ModelForm，这个父类适合于需要直接与数据库交互的功能，比如新建、更新数据库的字段等。如果表单将用于直接添加或编辑Django模型，则可以使用 ModelForm来避免重复书写字段描述。\n而forms.Form则需要手动配置每个字段，它适用于不与数据库进行直接交互的功能。用户登录不需要对数据库进行任何改动，因此直接继承forms.Form就可以了。\n编写视图\n用户的登录是比较复杂的功能，好在Django提供了封装好的模块供我们使用。\n首先在userprofile/views.py中写视图函数：\n/userprofile/views.py\n\nfrom django.shortcuts import render, redirect\nfrom django.contrib.auth import authenticate, login\nfrom django.http import HttpResponse\nfrom .forms import UserLoginForm\n\n# Create your views here.\n\ndef user_login(request):\n    if request.method == 'POST':\n        user_login_form = UserLoginForm(data=request.POST)\n        if user_login_form.is_valid():\n            # .cleaned_data 清洗出合法数据\n            data = user_login_form.cleaned_data\n            # 检验账号、密码是否正确匹配数据库中的某个用户\n            # 如果均匹配则返回这个 user 对象\n            user = authenticate(username=data['username'], password=data['password'])\n            if user:\n                # 将用户数据保存在 session 中，即实现了登录动作\n                login(request, user)\n                return redirect(\"article:article_list\")\n            else:\n                return HttpResponse(\"账号或密码输入有误。请重新输入~\")\n        else:\n            return HttpResponse(\"账号或密码输入不合法\")\n    elif request.method == 'GET':\n        user_login_form = UserLoginForm()\n        context = { 'form': user_login_form }\n        return render(request, 'userprofile/login.html', context)\n    else:\n        return HttpResponse(\"请使用GET或POST请求数据\")\n\n跟发表文章的表单类类似，Form对象的主要任务就是验证数据。调用is_valid()方法验证并返回指定数据是否有效的布尔值。\n\nForm不仅负责验证数据，还可以“清洗”它：将其标准化为一致的格式，这个特性使得它允许以各种方式输入特定字段的数据，并且始终产生一致的输出。一旦Form使用数据创建了一个实例并对其进行了验证，就可以通过cleaned_data属性访问清洗之后的数据。\n\nauthenticate()方法验证用户名称和密码是否匹配，如果是，则将这个用户数据返回。\n\nlogin()方法实现用户登录，将用户数据保存在session中。\n\n其他的内容就跟发表文章时的技巧类似了。\n什么是session\nSession在网络应用中，称为“会话控制”，它存储特定用户会话所需的属性及配置信息。\n当用户在 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。\nSession 最常见的用法就是存储用户的登录数据。\n详情看这里：Session百度百科\n登录的模板\n接着写模板文件。\n创建/templates/userprofile/login.html模板：\n/templates/userprofile/login.html\n\n{% extends \"base.html\" %} {% load staticfiles %}\n{% block title %} 登录 {% endblock title %}\n{% block content %}\n<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-12\">\n            <br>\n            <form method=\"post\" action=\".\">\n                {% csrf_token %}\n                <!-- 账号 -->\n                <div class=\"form-group\">\n                    <label for=\"username\">账号</label>\n                    <input type=\"text\" class=\"form-control\" id=\"username\" name=\"username\">\n                </div>\n                <!-- 密码 -->\n                <div class=\"form-group\">\n                    <label for=\"password\">密码</label>\n                    <input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\">\n                </div>\n                <!-- 提交按钮 -->\n                <button type=\"submit\" class=\"btn btn-primary\">提交</button>\n            </form>\n        </div>\n    </div>\n</div>\n{% endblock content %}\n内容与使用Form表单类发表新文章非常类似。唯一新知识是输入密码表单的type=\"password\"，可以让输入密码的时候显示小圆点，避免有人偷窥。\n然后我们改写一下tempalates/header.html，把登录的按钮加进去：\n/tempalates/header.html\n\n...\n<ul class=\"navbar-nav\">\n    ...\n    \n    <li class=\"nav-item\">\n        <a class=\"nav-link\" href=\"{% url 'article:article_list' %}\">文章</a>\n    </li>\n    \n    <!-- Django的 if 模板语句 -->\n    {% if user.is_authenticated %}\n        <!-- 如果用户已经登录，则显示用户名下拉框 -->\n        <li class=\"nav-item dropdown\">\n            <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n              {{ user.username }}\n            </a>\n            <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n              <a class=\"dropdown-item\" href=\"#\">退出登录</a>\n            </div>\n        </li>\n    <!-- 如果用户未登录，则显示 “登录” -->\n    {% else %}\n        <li class=\"nav-item\">\n            <a class=\"nav-link\" href=\"{% url 'userprofile:login' %}\">登录</a>\n        </li>                    \n    <!-- if 语句在这里结束 -->\n    {% endif %}\n</ul>\n...\n这里使用了新的模板语法：{% if ... %}，用来判断用户是否已经登录：\n\n如果用户已经登录，则显示一个名字为用户名称的下拉框，就像通常的社交网站一样。\n如果用户未登录，则显示“登录”两个字提醒用户可以点击登录。\n\nis_authenticated是models.User类的属性，用于判断用户是否已通过身份验证。\nurl及其他设置\n最后的步骤就是将app配置到项目中去。\n创建userprofile/urls.py文件：\n/userprofile/urls.py\n\nfrom django.urls import path\nfrom . import views\n\napp_name = 'userprofile'\n\nurlpatterns = [\n    # 用户登录\n    path('login/', views.user_login, name='login'),\n]\n配置根路由my_blog/urls.py：\n/my_blog/urls.py\n\n...\n\nurlpatterns = [\n    ... \n    # 用户管理\n    path('userprofile/', include('userprofile.urls', namespace='userprofile')),\n]\n配置my_blog/settings.py：\nmy_blog/settings.py\n\n...\nINSTALLED_APPS = [\n    ...\n    'userprofile',\n]\n...\n因为userprofile这个app并没有改动model，因此不用迁移数据。\nOK了，运行服务器，在admin后台中退出登录（找找页面右上角），返回到文章列表页：\n\n点击登录按钮，输入账号和密码（可以故意输错试试会出现什么）：\n\n点击提交，将自动回到文章列表页面：\n\n大功告成。\n用户的退出\n有了用户登录的知识后，用户退出就很简单了。这里就直接给出代码，相信你一定能看懂。\n还是先添加用户退出的视图：\n/userprofile/views.py\n\n...\n# 引入logout模块\nfrom django.contrib.auth import authenticate, login, logout\n\n...\n# 用户退出\ndef user_logout(request):\n    logout(request)\n    return redirect(\"article:article_list\")\n\n然后配置/userprofile/urls.py：\n/userprofile/urls.py\n\n...\n\nurlpatterns = [\n    path('login/', views.user_login, name='login'),\n    \n    # 用户退出\n    path('logout/', views.user_logout, name='logout'),\n]\n在写登录的代码时，已经给用户退出留好了接口，因此只需要改动/templates/header.html：\n/templates/header.html\n\n...\n# 改动 href 中的链接指向\n<a class=\"dropdown-item\" href='{% url \"userprofile:logout\" %}'>退出登录</a>\n\n...\n保存后刷新页面，点击下拉框中“退出登录”选项，用户就顺利退出了。\n总结\n本章用到了表单类、if模板语句、用户验证等知识完成了用户管理的登录和退出。\n接下来学习如何实现注册和删除。\n\n有疑问请在杜赛的个人网站留言，我会尽快回复。\n或Email私信我：dusaiphoto@foxmail.com\n项目完整代码：Django_blog_tutorial\n\n\n转载请告知作者并注明出处。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}