{"title": "Python设计模式 - 学习分享 ", "index": "python", "content": "简单工厂模式\n工厂模式有一种非常形象的描述，建立对象的类就如一个工厂，而需要被建立的对象就是一个个产品；在工厂中加工产品，使用产品的人，不用在乎产品是如何生产出来的。\n从软件开发的角度来说，这样就有效的降低了模块之间的耦合。简单工厂的作用是实例化对象，而不需要客户了解这个对象属于哪个具体的子类。\nclass car:\n    '''interface as Product'''\n    def drive(self):\n        pass\n\nclass BMW(car):\n    '''Concrete Product'''\n    def __init__(self,carname):\n        self.__name=carname\n    def drive(self):\n        print(\"Drive the BMW as \"+self.__name)\n\nclass Benz(car):\n    '''Concrete Product'''\n    def __init__(self,carname):\n        self.__name=carname\n    def drive(self):\n        print(\"Drive the Benz as \"+self.__name)\n\nclass driver:\n    '''Factory also called Creator'''\n    def driverCar(self,name):\n        if name==\"BMW\":\n            return BMW(\"BMW\")\n        elif name==\"Benz\":\n            return Benz(\"Benz\")\n\ncarname=input(\"please input BMW Benz :\")\ndier=driver()\nd=dier.driverCar(carname)\nd.drive()\n单例模式\npython的单例模式，所谓单例模式就是一个类只能创建一个实例化。\n哪些地方需要用到单例模式，其实想一想有很多，比如1.Python的logger就是一个单例模式，用以日志记录2.Windows的资源管理器是一个单例模式3.线程池，数据库连接池等资源池一般也用单例模式4.网站计数器\n当每个实例都会占用资源，而且实例初始化会影响性能，这个时候就可以考虑使用单例模式，它给我们带来的好处是只有一个实例占用资源，并且只需初始化一次\n\n#通过装饰器实现单例模式\ndef singleton(cls, *args, **kw):\n    instances = {}  #类变量字典\n\n    def _singleton():\n        #判断 cls 是否 存在字典中\n        if cls not in instances:\n            #如果不在字典中，则添加进来\n            instances[cls] = cls(*args, **kw)\n            #在的话就return返回\n        return instances[cls]\n\n    return _singleton\n\n@singleton  #b=singleton(a)()  等同于 @singleton\nclass a:\n    def shwo(self):\n        print(\"showshow\")\n\na1=a() #实例化对象1\na2=a() #实例化对象2\nprint(a1) #如果不是单例模式创建，这个地方打印两次结果不同\nprint(a2)\na1.shwo()  \na2.shwo()     \n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "2"}