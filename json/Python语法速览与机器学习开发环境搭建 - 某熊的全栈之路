{"title": "Python语法速览与机器学习开发环境搭建 - 某熊的全栈之路 ", "index": "机器学习,python", "content": "Python语法速览与机器学习开发环境搭建从属于笔者的程序猿的数据科学与机器学习实战手册，如果希望了解更多关于数据科学与机器学习知识体系结构，推荐阅读2016:我的技术体系结构图:Web/ServerSideApplication/MachineLearning、面向程序猿的数据科学与机器学习知识体系及资料合集。\nPython\n\nPython 是一门高阶、动态类型的多范式编程语言。人生苦短，请用Python，大量功能强大的语法糖的同时让很多时候Python代码看上去有点像伪代码。譬如我们用Python实现的简易的快排相较于Java会显得很短小精悍:\ndef quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) / 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)\n    \nprint quicksort([3,6,8,10,1,2,1])\n# Prints \"[1, 1, 2, 3, 6, 8, 10]\"\nPython 版本\nPython社区存在的最大的问题就是版本分裂，这也是笔者一直觉得有点鸡肋般的感觉，毕竟对于处女座而言实在是难受。目前Python社区中存在两个不同的主要版本：2.7与3.4。Python 3.0引入了很多不向后兼容的变化，因此很多遵循2.7版本的代码并不能适用于3.4版本。我们可以使用python --version命令来查看当前使用的版本。\n常用习惯\n\n\n模块\n注意点\n\n\n\n换行\n反斜杠（）继续上一行，Python文件以模块形式组织。Python程序语句不以分号结尾，而以换行符结尾。Python 使用硬回车来分割语句, 冒号和缩进来分割代码块。C++ 和 Java 使用分号来分割语句, 花括号来分割代码块。\n\n\n注释\na．  使用#符号标示注释；  b．  在模块、类或者函数起始添加一个字符串起文档作用；  c．  使用三引号标示注释。  print \"\"\"  Usage: thingy [OPTIONS]  -h Display this usage  message  -H hostname Hostname to  connect to  \"\"\"\n\n\n主流程\nPython 中没有子程序，只有函数, 所有的函数都有返回值,并且所有的函数都以 def 开始。\n\n\n字符串\nPython中单引号与双引号的区别类似于PHP中，双引号中可以包括单引号。\n\n\n数组\nPython中数组下标可以为负数，即从右端开始计量，-1即为最后一个数。Python不可以修改数组中值，字符串下标索引方式类似于MATLAB。\n\n\n函数\nPython的函数可以嵌套定义\n\n\n\nInstallation:环境搭建\nConda\n笔者推荐使用Anaconda作为环境搭建工具，并且推荐使用Python 3.5版本，可以在这里下载。如果是习惯使用Docker的小伙伴可以参考anaconda-notebook\ndocker pull rothnic/anaconda-notebook\ndocker run -p 8888:8888 -i -t rothnic/anaconda-notebook\n安装完毕之后可以使用如下命令验证安装是否完毕:\nconda --version\n安装完毕之后我们就可以创建具体的开发环境了，主要是通过create命令来创建新的独立环境:\nconda create --name snowflakes biopython\n该命令会创建一个名为snowflakes并且安装了Biopython的环境，如果你需要切换到该开发环境，可以使用activate命令:\n\nLinux, OS X: source activate snowflakes\nWindows:  activate snowflakes\n\n我们也可以在创建环境的时候指明是用python2还是python3:\nconda create --name bunnies python=3 astroid babel\n环境创建完毕之后，我们可以使用info命令查看所有环境:\nconda info --envs\nconda environments:\n\n     snowflakes          * /home/username/miniconda/envs/snowflakes\n     bunnies               /home/username/miniconda/envs/bunnies\n     root                  /home/username/miniconda\n当我们切换到某个具体的环境后，可以安装依赖包了:\nconda list # 列举当前环境中的所有依赖包\nconda install nltk # 安装某个新的依赖\nJupyter Notebook\n\n在Conda安装之后，Jupyter Notebook是默认安装好的，直接在工作目录下打开即可:\njupyter notebook\n你可以参阅Running the Notebook获取更多命令细节。\n基础数据类型\n和其他主流语言一样，Python为我们提供了包括integer、float、boolean、strings等在内的很多基础类型。\n数值类型\nx = 3\nprint type(x) # Prints \"<type 'int'>\"\nprint x       # Prints \"3\"\nprint x + 1   # Addition; prints \"4\"\nprint x - 1   # Subtraction; prints \"2\"\nprint x * 2   # Multiplication; prints \"6\"\nprint x ** 2  # Exponentiation; prints \"9\"\nx += 1\nprint x  # Prints \"4\"\nx *= 2\nprint x  # Prints \"8\"\ny = 2.5\nprint type(y) # Prints \"<type 'float'>\"\nprint y, y + 1, y * 2, y ** 2 # Prints \"2.5 3.5 5.0 6.25\"\n不过需要注意的是，Python并没有x++或者x--这样的自增或者自减操作符。另外，Python内置的也提供了长整型与其他复杂数值类型的整合，可以参考这里。\n布尔类型\nPython提供了常见的逻辑操作符，不过需要注意的是Python中并没有使用&&、||等，而是直接使用了英文单词。\nt = True\nf = False\nprint type(t) # Prints \"<type 'bool'>\"\nprint t and f # Logical AND; prints \"False\"\nprint t or f  # Logical OR; prints \"True\"\nprint not t   # Logical NOT; prints \"False\"\nprint t != f  # Logical XOR; prints \"True\" \n字符串\nPython对于字符串的支持还是很好的，不过需要注意到utf-8编码问题。\nhello = 'hello'   # String literals can use single quotes\nworld = \"world\"   # or double quotes; it does not matter.\nprint hello       # Prints \"hello\"\nprint len(hello)  # String length; prints \"5\"\nhw = hello + ' ' + world  # String concatenation\nprint hw  # prints \"hello world\"\nhw12 = '%s %s %d' % (hello, world, 12)  # sprintf style string formatting\nprint hw12  # prints \"hello world 12\"\nPython中的字符串对象还包含了很多有用的方法，譬如:\ns = \"hello\"\nprint s.capitalize()  # Capitalize a string; prints \"Hello\"\nprint s.upper()       # Convert a string to uppercase; prints \"HELLO\"\nprint s.rjust(7)      # Right-justify a string, padding with spaces; prints \"  hello\"\nprint s.center(7)     # Center a string, padding with spaces; prints \" hello \"\nprint s.replace('l', '(ell)')  # Replace all instances of one substring with another;\n                               # prints \"he(ell)(ell)o\"\nprint '  world '.strip()  # Strip leading and trailing whitespace; prints \"world\"\n可以在这里中查看详细的方法列表。\n复杂数据类型\n列表\nPython中的列表等价于数组，不过其能够动态扩展并且能够存放不同类型的数值。\nxs = [3, 1, 2]   # Create a list\nprint xs, xs[2]  # Prints \"[3, 1, 2] 2\"\nprint xs[-1]     # Negative indices count from the end of the list; prints \"2\"\nxs[2] = 'foo'    # Lists can contain elements of different types\nprint xs         # Prints \"[3, 1, 'foo']\"\nxs.append('bar') # Add a new element to the end of the list\nprint xs         # Prints \"[3, 1, 'foo', 'bar']\"\nx = xs.pop()     # Remove and return the last element of the list\nprint x, xs      # Prints \"bar [3, 1, 'foo']\"\n同样你可以在文档中查看更多的细节。\n切片\nPython中对于数组的访问也相当人性化，通过简单的操作符即可以完成对于数组中子数组的截取。\nnums = range(5)    # range is a built-in function that creates a list of integers\nprint nums         # Prints \"[0, 1, 2, 3, 4]\"\nprint nums[2:4]    # Get a slice from index 2 to 4 (exclusive); prints \"[2, 3]\"\nprint nums[2:]     # Get a slice from index 2 to the end; prints \"[2, 3, 4]\"\nprint nums[:2]     # Get a slice from the start to index 2 (exclusive); prints \"[0, 1]\"\nprint nums[:]      # Get a slice of the whole list; prints [\"0, 1, 2, 3, 4]\"\nprint nums[:-1]    # Slice indices can be negative; prints [\"0, 1, 2, 3]\"\nnums[2:4] = [8, 9] # Assign a new sublist to a slice\nprint nums         # Prints \"[0, 1, 8, 9, 4]\"\n遍历\n你可以使用基本的for循环来遍历数组中的元素，就像下面介个样纸:\nanimals = ['cat', 'dog', 'monkey']\nfor animal in animals:\n    print animal\n# Prints \"cat\", \"dog\", \"monkey\", each on its own line.\n如果你在循环的同时也希望能够获取到当前元素下标，可以使用enumerate函数:\nanimals = ['cat', 'dog', 'monkey']\nfor idx, animal in enumerate(animals):\n    print '#%d: %s' % (idx + 1, animal)\n# Prints \"#1: cat\", \"#2: dog\", \"#3: monkey\", each on its own line\n变换\n在编程中我们经常需要对数组进行变换，比较著名的我们可以使用map、reduce、filter这几个函数，而在Python中提供了非常方便的List Comprehension操作符。譬如我们需要对数组中元素进行依次平方操作\nnums = [0, 1, 2, 3, 4]\nsquares = []\nfor x in nums:\n    squares.append(x ** 2)\nprint squares   # Prints [0, 1, 4, 9, 16]\n我们可以简写为如下方式:\nnums = [0, 1, 2, 3, 4]\nsquares = [x ** 2 for x in nums]\nprint squares   # Prints [0, 1, 4, 9, 16]\nList Comprehensions也支持进行条件选择:\nnums = [0, 1, 2, 3, 4]\neven_squares = [x ** 2 for x in nums if x % 2 == 0]\nprint even_squares  # Prints \"[0, 4, 16]\"\n字典\nPython中的字典类型即类似于Java中的Map或者JavaScript中的Object，也就是所谓的键值对类型，基本的使用方式为:\nd = {'cat': 'cute', 'dog': 'furry'}  # Create a new dictionary with some data\nprint d['cat']       # Get an entry from a dictionary; prints \"cute\"\nprint 'cat' in d     # Check if a dictionary has a given key; prints \"True\"\nd['fish'] = 'wet'    # Set an entry in a dictionary\nprint d['fish']      # Prints \"wet\"\n# print d['monkey']  # KeyError: 'monkey' not a key of d\nprint d.get('monkey', 'N/A')  # Get an element with a default; prints \"N/A\"\nprint d.get('fish', 'N/A')    # Get an element with a default; prints \"wet\"\ndel d['fish']        # Remove an element from a dictionary\nprint d.get('fish', 'N/A') # \"fish\" is no longer a key; prints \"N/A\"\n更多的语法细节可以参考这里。\n遍历\n对于字典的遍历也非常简单:\nd = {'person': 2, 'cat': 4, 'spider': 8}\nfor animal in d:\n    legs = d[animal]\n    print 'A %s has %d legs' % (animal, legs)\n# Prints \"A person has 2 legs\", \"A spider has 8 legs\", \"A cat has 4 legs\"\n如果你希望同时访问键和其对应的值，可以使用iteritems方法:\nd = {'person': 2, 'cat': 4, 'spider': 8}\nfor animal, legs in d.iteritems():\n    print 'A %s has %d legs' % (animal, legs)\n# Prints \"A person has 2 legs\", \"A spider has 8 legs\", \"A cat has 4 legs\"\n变换\nnums = [0, 1, 2, 3, 4]\neven_num_to_square = {x: x ** 2 for x in nums if x % 2 == 0}\nprint even_num_to_square  # Prints \"{0: 0, 2: 4, 4: 16}\"\nSet\nSet是一系列无序且唯一的元素的集合：\nanimals = {'cat', 'dog'}\nprint 'cat' in animals   # Check if an element is in a set; prints \"True\"\nprint 'fish' in animals  # prints \"False\"\nanimals.add('fish')      # Add an element to a set\nprint 'fish' in animals  # Prints \"True\"\nprint len(animals)       # Number of elements in a set; prints \"3\"\nanimals.add('cat')       # Adding an element that is already in the set does nothing\nprint len(animals)       # Prints \"3\"\nanimals.remove('cat')    # Remove an element from a set\nprint len(animals)       # Prints \"2\"\n更多语法细节可以参考这里。\n遍历\n集合遍历的语法和数组遍历很类似，不过因为集合本身是无序的，因此你不能够依赖于遍历的顺序来预测集合中元素的顺序:\nanimals = {'cat', 'dog', 'fish'}\nfor idx, animal in enumerate(animals):\n    print '#%d: %s' % (idx + 1, animal)\n# Prints \"#1: fish\", \"#2: dog\", \"#3: cat\"\n变换\nfrom math import sqrt\nnums = {int(sqrt(x)) for x in range(30)}\nprint nums  # Prints \"set([0, 1, 2, 3, 4, 5])\"\nTuples\nPython中的Tuple指不可变的有序元素集合，Tuple很类似于列表，不过区别在于Tuple可以做字典中的键类型，而列表则不可以。\nd = {(x, x + 1): x for x in range(10)}  # Create a dictionary with tuple keys\nt = (5, 6)       # Create a tuple\nprint type(t)    # Prints \"<type 'tuple'>\"\nprint d[t]       # Prints \"5\"\nprint d[(1, 2)]  # Prints \"1\"\nFunction:函数\nPython中的函数使用def关键字进行定义，譬如:\ndef sign(x):\n    if x > 0:\n        return 'positive'\n    elif x < 0:\n        return 'negative'\n    else:\n        return 'zero'\n\nfor x in [-1, 0, 1]:\n    print sign(x)\n# Prints \"negative\", \"zero\", \"positive\"\n同时，Python中的函数还支持可选参数:\ndef hello(name, loud=False):\n    if loud:\n        print 'HELLO, %s!' % name.upper()\n    else:\n        print 'Hello, %s' % name\n\nhello('Bob') # Prints \"Hello, Bob\"\nhello('Fred', loud=True)  # Prints \"HELLO, FRED!\"\n更多的语法细节可以参考这里。\nClasses:类\nPython中对于类的定义也很直接:\nclass Greeter(object):\n    \n    # Constructor\n    def __init__(self, name):\n        self.name = name  # Create an instance variable\n        \n    # Instance method\n    def greet(self, loud=False):\n        if loud:\n            print 'HELLO, %s!' % self.name.upper()\n        else:\n            print 'Hello, %s' % self.name\n        \ng = Greeter('Fred')  # Construct an instance of the Greeter class\ng.greet()            # Call an instance method; prints \"Hello, Fred\"\ng.greet(loud=True)   # Call an instance method; prints \"HELLO, FRED!\"\n\n可以参考这里获取更多信息。\n延伸阅读\nPython Numpy Tutorial\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "4"}