{"title": "python中的无穷大 - 编程进阶之路 ", "index": "python", "content": "起步\npython中整型不用担心溢出，因为python理论上可以表示无限大的整数，直到把内存挤爆。而无穷大在编程中常常需要的。比如，从一组数字中筛选出最小的数字。一般使用一个临时变量用于存储最后结果，变量去逐个比较和不断地更新。而这临时变量一般要初始无穷大或者去第一个元素的值。\n正无穷大与负无穷大\npython中并没有特殊的语法来表示这些值，但是可以通过 float() 来创建它们：\n>>> a = float(\"inf\")\n>>> b = float(\"-inf\")\n>>> a\ninf\n>>> b\n-inf\n为了测试这些值的存在，使用 math.isinf() 进行判断：\n>>> import math\n>>> math.isinf(a)\nTrue\n>>> math.isinf(b)\nTrue\n无穷大数在执行数学计算的时候会传播\n这个就类似于数学中讲述的，无穷大加上一个常数还是无穷大，无穷大与无穷大相等：\n>>> a = float('inf')\n>>> a + 45\ninf\n>>> a * 10\ninf\n>>> 10 / a\n0.0\n>>> float(\"inf\") == float(\"inf\")\nTrue\n无穷大在比较中比任何一个数都要大。\n正无穷与负无穷相加的结果是什么\n有些操作时未定义的并会返回一个 NaN 结果:\n>>> a = float('inf')\n>>> a/a\nnan\n>>> b = float('-inf')\n>>> a + b\nnan\n表示非数字的 NaN\nnan 值在所有操作中也会传播，并且不会产生异常：\n>>> c = float('nan')\n>>> c + 23\nnan\n>>> c / 2\nnan\n>>> c * 2\nnan\n>>> math.sqrt(c)\nnan\n使用 math.isnan() 可以判断值是否是 NaN：\n>>> math.isnan(c)\nTrue\nnan 值的任何比较操作都是返回 False ：\n>>> float(\"nan\") == float(\"nan\")\nFalse\n>>> c > 3\nFalse\n更安全的类型转换\n由于无穷的存在，因此字符串装浮点数就存在的一些例外，并且这个转换过程不会抛出异常。如果程序员们想改变 python 的默认行为，可以使用 fpectl 模块，但是它在标准的Python 构建中并没有被启用，它是平台相关的，并且针对的是专家级程序员。这里提供一个比较简单的转换，就是加一个 isdigit() 判断:\ndef str2float(ss):\n    if not ss.isdigit():\n        raise ValueError\n    return float(ss)\n\nsss = \"inf\"\na = str2float(sss)\n总结\n以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作能带来一定的帮助，如果有疑问大家可以留言交流。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}