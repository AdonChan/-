{"title": "python中logging生成日志模块的使用 - python技术的魅力 ", "index": "logging,python", "content": "用于便捷记录日志且线程安全的模块\n1、日志级别\n日志一共分成5个等级，从低到高分别是：DEBUG INFO WARNING ERROR CRITICAL。DEBUG：详细的信息,通常只出现在诊断问题上\nINFO：确认一切按预期运行\nWARNING：一个迹象表明,一些意想不到的事情发生了,或表明一些问题在不久的将来(例如。磁盘空间低”)。这个软件还能按预期工作。\nERROR：更严重的问题,软件没能执行一些功能\nCRITICAL：一个严重的错误,这表明程序本身可能无法继续运行。\n这5个等级，也分别对应5种打日志的方法： debug 、info 、warning 、error 、critical。默认的是WARNING，当在WARNING或之上时才被跟踪。\n\n2、日志输出\n有两种方式记录跟踪，一种输出控制台，另一种是记录到文件中，如日志文件。\n3、注意问题\n用Python的logging模块记录日志时，遇到了重复记录日志的问题，第一条记录写一次，第二条记录写两次，第三条记录写三次。。。这样记日志可不行。原因：没有移除handler 解决：在日志记录完之后removeHandler\n\n使用方法\n1、单日志文件\n创建一个日志模块.py的文件\nimport logging\n  \n  \nlogging.basicConfig(filename='log.log',\n                    format='%(asctime)s - %(name)s - %(levelname)s -%(module)s:  %(message)s',\n                    datefmt='%Y-%m-%d %H:%M:%S %p',\n                    level=10)\n  \nlogging.debug('debug')\nlogging.info('info')\nlogging.warning('warning')\nlogging.error('error')\nlogging.critical('critical')\nlogging.log(10,'log')\n运行：从运行结果来看，创建了一个log.log日志文件，时间是自动生产的，module是我们当前的python代码文件名。\n日志等级：\nCRITICAL = 50FATAL = CRITICALERROR = 40WARNING = 30WARN = WARNINGINFO = 20DEBUG = 10NOTSET = 0\n注：只有【当前写等级】大于【日志等级】时，日志文件才被记录。日志记录格式：\n%(name)s      Logger的名字\n\n%(levelno)s    数字形式的日志级别\n\n%(levelname)s    文本形式的日志级别\n\n%(pathname)s    调用日志输出函数的模块的完整路径名\n\n%(filename)s    调用日志输出函数的模块的文件名\n\n%(module)s    调用日志输出函数的模块名\n\n%(funcName)s    调用日志输出函数的函数名\n\n%(lineno)d    调用日志输出函数的语句所在的代码行\n\n%(created)f    当前时间，用UNIX标准的表示时间的浮 点数表示\n\n%(relativeCreated)d    输出日志信息时的，自Logger创建以 来的毫秒数\n\n%(asctime)s    字符串形式的当前时间。默认格式是 “2003-07-08 16:49:45,896”。逗号后面的是毫秒\n\n%(thread)d    线程ID。\n\n%(threadName)s    线程名。\n\n%(process)d    进程ID。\n\n%(message)s    用户输出的消息\n2、多文件日志\n对于上述记录日志的功能，只能将日志记录在单文件中，如果想要设置多个日志文件，logging.basicConfig将无法完成，需要自定义文件和日志操作对象。\nimport logging\n\n# 定义文件\nfile1 = logging.FileHandler(filename='l1.log', mode='a', encoding='utf-8')\nfmt = logging.Formatter(fmt=\"%(asctime)s - %(name)s - %(levelname)s -%(module)s:  %(message)s\", datefmt='%Y-%m-%d %H:%M:%S')\nfile1.setFormatter(fmt)\n\nfile2 = logging.FileHandler(filename='l2.log', mode='a', encoding='utf-8')\nfmt = logging.Formatter()\nfile2.setFormatter(fmt)\n\n# 定义日志\nlogger1 = logging.Logger(name='这里是name', level=logging.ERROR)\nlogger1.addHandler(file1)\nlogger1.addHandler(file2)\n# logger1.removeHandler(file1)\n# logger1.removeHandler(file2)\n\n# 写日志\nlogger1.error(msg='这里是msg111')\nlogger1.log(msg='这里是msg222', level=50)\n\n\n# 定义文件\nfile3 = logging.FileHandler(filename='l3.log', mode='a', encoding='utf-8')\nfmt = logging.Formatter(fmt=\"%(asctime)s - %(name)s - %(levelname)s -%(module)s:  %(message)s\", datefmt='%Y-%m-%d %H:%M:%S')\nfile3.setFormatter(fmt)\n\n# 定义日志\nlogger2 = logging.Logger(name='这里是name222222', level=logging.INFO)\nlogger2.addHandler(file3)\n\n# 写日志\nlogger2.info('这里是msg333333')\n运行：\n\n\n如上述创建的两个日志对象\n\n当使用【logger1】写日志时，会将相应的内容写入 l1.log 和 l2.log 文件中\n当使用【logger2】写日志时，会将相应的内容写入 l3.log 文件中\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}