{"title": "Python学习之路4-if语句 - VPointer ", "index": "python,if", "content": "《Python编程：从入门到实践》笔记。本章主要讲述条件语句if, if-else, if-elif, if-elif-else等结构。\n1. 条件测试\n包括了“相等”，“不等”，“大于”，“小于”，“大于等于”，“小于等于”，“存在于”，“与或非”等判断。值得注意的是，Python对大小写敏感：\n>>> car = \"Audi\"\n>>> car == \"audi\"\nFalse\n\n>>> car.lower() == \"audi\"\nTrue\n\n>>> car != \"audi\"\nTrue\n\n>>> age = 19\n>>> age < 21\nTrue\n>>> age <= 21\nTrue\n>>> age >= 21\nFalse\n\n>>> age_0 = 22\n>>> age_1 = 18\n>>> age_0 >= 21 and age_1 >= 21\nFalse\n>>> age_0 >= 21 or age_1 >= 21\nTrue\n\n>>> requested_toppings = ['mushrooms', 'onions', 'pineapple']\n>>> 'mushrooms' in requested_toppings\nTrue\n>>> 'mushrooms' not in requested_toppings\nFalse\n2. if 语句\n2.1 简单的if语句\n# 代码：\nage = 19\nif age >= 18:\n    print(\"You are old enough to vote!\")\n\n# 结果：\nYou are old enough to vote!\n2.2 if-else 语句\n# 代码：\nage = 17\nif age >= 18:\n    print(\"You are old enough to vote!\")\n    print(\"Have you registered to vote yet?\")\nelse:\n    print(\"Sorry, you are too young to vote.\")\n    print(\"Please register to vote as soon as you turn 18!\")\n\n# 结果：\nSorry, you are too young to vote.\nPlease register to vote as soon as you turn 18!\n2.3 if-elif-else 结构\n# 代码：\nage = 12\n\nif age < 4:\n    price = 0\nelif age < 18:\n    price = 5\nelse:\n    price = 10\n\nprint(\"Your admission cost is $\" + str(price) + \".\")\n\n# 结果：\nYour admission cost is $5.\n还可以根据需要使用任意数量的elif代码块：\n# 代码：\nage = 12\n\nif age < 4:\n    price = 0\nelif age < 18:\n    price = 5\nelif age < 65:\n    price = 10\nelse:\n    price = 5\n    \nprint(\"Your admission cost is $\" + str(price) + \".\")\n\n# 结果：\nYour admission cost is $5.\n其次，Python并不要求if-elif结构后面必须有else代码块。else是一条包罗万象的语句，只要不满足前面的条件，其中的代码就会执行，这可能会引入无效甚至恶意的数据。所以如果知道最终要测试的条件，应考虑使用一个elif代码块来代替else代码块，使代码更清晰，如下：\n# 代码：\nage = 12\n\nif age < 4:\n    price = 0\nelif age < 18:\n    price = 5\nelif age < 65:\n    price = 10\nelif age >= 65:\n    price = 5\n    \nprint(\"Your admission cost is $\" + str(price) + \".\")\n\n# 结果：\nYour admission cost is $5.\n2.4 测试多个条件\nif-elif-else结构功能强大，但仅适用于只有一个条件满足的情况，即只要其中一个条件满足，其余条件都会被跳过，这保证了程序的高效性。然而有时必须检查你关心的所有条件，这时则应该使用一系列不包含elif和else代码块的简单if语句：\n# 代码：\nrequested_toppings = [\"mushrooms\", \"extra cheese\"]\n\nif \"mushrooms\" in requested_toppings:\n    print(\"Adding mushrooms.\")\nif \"pepperoni\" in requested_toppings:\n    print(\"Adding pepperoni.\")\nif \"extra cheese\" in requested_toppings:\n    print(\"Adding extra cheese.\")\n\nprint(\"\\nFinished making your pizza!\")\n\n# 结果：\nAdding mushrooms.\nAdding extra cheese.\n\nFinished making your pizza!\n总之：如果你只想执行一个代码块，就用if-elif-else结构；如果要运行多个代码块，就使用一系列独立的if语句。\n3. 使用if语句处理列表\nif语句常和循环结构配合使用。\n3.1 检查特殊元素\n# 代码：\nrequested_toppings = [\"mushrooms\", \"extra cheese\", \"green peppers\"]\n\nfor requested_topping in requested_toppings:\n    if requested_topping == \"green peppers\":\n        print(\"Sorry, we are out of green peppers right now.\")\n    else:\n        print(\"Adding \" + requested_topping + \".\")\n\nprint(\"\\nFinished making your pizza!\")\n\n# 结果：\nAdding mushrooms.\nAdding extra cheese.\nSorry, we are out of green peppers right now.\n\nFinished making your pizza!\n3.2 确定列表不是空的\n到目前为止，对于处理的每个列表都做了一个简单的假设，即它们非空，然而实际工程中，在遍历一个列表前需要先判断该列表是否为空：\n# 代码：\nrequested_toppings = []\n\nif requested_toppings:\n    for requested_topping in requested_toppings:\n        print(\"Adding \" + requested_topping + \".\")\n    print(\"\\nFinished making your pizza!\")\nelse:\n    print(\"Are you sure you want a plain pizza?\")\n\n# 结果：\nAre you sure you want a plain pizza?\n\n迎大家关注我的微信公众号\"代码港\" & 个人网站 www.vpointer.net ~\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}