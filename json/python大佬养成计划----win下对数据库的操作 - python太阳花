{"title": "python大佬养成计划----win下对数据库的操作 - python太阳花 ", "index": "python", "content": "数据库\nPyMySQL 是在 Python3.x 版本中用于连接 MySQL 服务器的一个库，Python2中则使用mysqldb。win系统安装mysql，详见链接描述\n数据库常见命令\n\nmysql -uroot -psheen    登陆数据库\nshow databases;   显示所有的数据库\ncreate database sheen;   创建新的数据库sheen\nuse sheen;   进入数据库sheen\nshow tables;   显示sheen里的所有数据库表\ncreate table star(name varchar(30),age int);   创建新的数据库表star,\ndesc star;   查看数据库表的格式\ninsert into star VALUES('user1',10);   插入值\nselect * from star;   显示star数据库表中的所有内容\nupdate star set age=11 where name='user1';   更新star数据库表中user1的年龄为11\ndelete from star where name='user1';   删除star数据库表中的user1\ndrop table star;   删除star数据库表\ndrop database sheen;   删除数据库sheen\n\n连接数据库\n此处，保证你有一个名为'sheen'的数据库\nimport pymysql\n#这里注意python2需要导入数据库模块为mysqldb\n#python3需要导入数据库模块为pymysql\n\n#1.连接数据库\nconn = pymysql.connect(host='localhost',user='root',passwd='sheen',\n                       charset='utf8',autocommit=True)  #指定操作主机，指定用户和密码，编码格式为'utf8'时，中文才可以显示，autocommit自动提交对数据库的操作\n\n#2.创建一个游标，用来向数据库发送指令\ncur = conn.cursor()\n\n#3.实现对数据库的增删改查\n\n##3.1选择需要操作的数据库\nconn.select_db('sheen')\n\n#3.2对数据库内容的增删改查\ntry:\n    #添加新的数据库表\n    # add_table = 'create table star(name varchar(30),age int)'   #创建数据库表，内容有名字、年龄\n    # cur.execute(add_table)    #执行数据库操作命令\n\n    #给数据库表添加值\n    # insert_sqli1 = 'insert into star VALUES (\"user3\", 100);'  #给数据库表更新值\n    # insert_sqli2 = 'insert into star VALUES (\"user4\", 100);'  #给数据库表更新值\n    # cur.execute(insert_sqli1)\n    # cur.execute(insert_sqli2)\n\n    #删除数据库表中的内容\n    # del_table_info = 'delete from star where name=\"user3\"'\n    # cur.execute(del_table_info)\n\n    #批量对数据实现增删改\n    # users=[(\"user\"+str(i),i)for i in range(100)]\n    # insert_sqli3 = 'insert into star VALUES (%s,%s);'\n    # cur.executemany(insert_sqli3,users) #批量添加信息，cur.executemany()\n\n    #查看数据库表的信息\n    select_sql = 'select * from star;'\n    result = cur.execute(select_sql)\n    print('查看语句的返回结果：',result)  #返回信息数目，查看语句的返回结果： 100\n\n    #查看数据库表的内容\n    # cur.fetchone类似与文件的操作f.readline, 每次只读取一条记录;\n    print(\"此条信息：\",cur.fetchone())\n    print(\"此条信息：\",cur.fetchone())\n    print(\"此条信息：\",cur.fetchone())\n    # cur.fetchmany， 类似于f.readlines, 返回的是一个元组；\n    print(\"查看5条信息\",cur.fetchmany(5))    #从游标位置向后\n    #cur.fetchall返回的是一个元组；\n    print(\"第一次查找所有信息：\",cur.fetchall())\n\n    cur.scroll(0,mode='absolute')   #移动游标位置到数据库表头\n    print(\"第二次查找所有信息：\",cur.fetchall())\n\n    cur.scroll(-10,mode='relative') #移动游标位置到数据库表倒数第10个的位置\n    print(\"最后10个信息：\",cur.fetchall())\n\nexcept Exception as e:\n    print(\"Failed:\",e)\nelse:\n    print(\"Success\")\n\n# 4. 先关闭游标\ncur.close()\n# 5. 关闭数据库连接\nconn.close()\n创建数据库表并添加值删除指定值批量管理查看\n获取数据库表信息\n获取表得字段名和表头字段名是指在以关系模型为数据结构的二维表中每一列的标识。就是数据库表的结构。表头是可以用来索引的键值。\nimport pymysql\nconn = pymysql.connect(host='localhost',user='root',passwd='sheen',\n                       charset='utf8',autocommit=True,db='sheen')\n\nwith conn:  #安全管理器\n    print(\"is_open:\",conn.open) #Return True if the connection is open\n    cur = conn.cursor()\n    res = cur.execute('select * from star;')\n    desc = cur.description  #返回表得格式列内容(('name', 253, None, 30, 30, 0, True), ('age', 3, None, 11, 11, 0, True))\n    print(\"表得描述：\",desc)\n    print(\"表头:\",','.join([item[0] for item in desc]))\n    cur.close()\n\n\n银行转账\n原账号向目标账号转账，数据写进数据库内。做此实验前，保证你有数据库transinfo,里面有数据库表bankdata,数据库表中有账号数据和金额数据。\nimport pymysql\n\nclass Trans_money(object):\n    def __init__(self,source_id,target_id,count):\n        self.source = source_id\n        self.target = target_id\n        self.count = count\n        self.conn = pymysql.connect(host='localhost',user='root',passwd='sheen',\n                       charset='utf8',db='transinfo')   #建立数据库连接\n        self.cur = self.conn.cursor()   #建立游标\n\n    def transfer_money(self):\n        \"\"\"\n               转账方法:\n                   # 1. source_id帐号是否存在；\n                   # 2. target_id帐号是否存在；\n                   # 3. 是否有足够的钱\n                   # 4. source_id扣钱\n                   # 5. target_id加钱\n                   # 6. 提交对数据库的操作\n               \"\"\"\n        self.check_account(self.source)            # 1. source_id帐号是否存在；\n        self.check_account(self.target)            # 2. target_id帐号是否存在；\n        self.enough_money(self.source,self.count)  # 3. 是否有足够的钱\n\n        try:\n            self.reduce_source(self.count)     # 4. source_id扣钱\n            self.increase_source(self.count)   # 5. target_id加钱\n            self.conn.commit()                 # 6. 提交对数据库的操作\n        except Exception as e:\n            self.conn.rollback()               #撤销对于数据库的更改操作, 回滚\n        else:\n            print(\"转账成功\")\n\n\n    def check_account(self,account):    #判断原账户是否存在\n        check_sql = 'select * from bankdata where account=%s;' %(account)\n        res  = self.cur.execute(check_sql)\n        if res ==1:\n            return True\n        else:\n            print(\"%s此账号不存在\" %(account))\n    def enough_money(self,account,money):   #判断原账户是否有足够的钱\n        affirm_sql = 'select money from bankdata where account=%s;' %(self.source)\n        re = self.cur.execute(affirm_sql)    #返回1，游标位置在money\n        exist_money = self.cur.fetchone()[0]    #查看金额数目\n        print(\"您的账号有%s元\" %(exist_money))\n        if exist_money>=money:\n            return True\n        else:\n            raise Exception(\"您的账号%s没有足够的金额,当前余额为%s\" %(self.source,exist_money))\n    def reduce_source(self,money):  #扣钱函数\n        try:\n            update_sql = 'update bankdata set money=money-%s where account=%s;' %(money,self.source)\n            self.cur.execute(update_sql)\n        except Exception as e:\n            print(\"Failed:\",e)\n    def increase_source(self,money):    #加钱函数\n        try:\n            update_sql = 'update bankdata set money=money+%s where account=%s;' %(money,self.target)\n            self.cur.execute(update_sql)\n        except Exception as e:\n            print(\"Failed:\",e)\n\nif __name__=='__main__':\n    tran = Trans_money('6107001','6107002',500)\n    tran.transfer_money()\n前期准备执行结束数据库结果显示\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}