{"title": "设计模式--适配器 - 个人文章 ", "index": "python", "content": "作用：适配器模式可以将不统一的接口统一到同一种形式，方便管理。   应用场景：根据一种需求写的各种类，定义好各个函数接口，可能被其他后加功能体系征用    ，产>生函数不统一的现象，这时候就可以用适配器模式进行归一。目的是保证数据源，功能 >    的统一\nclass Adaptee:\n\n    def specific_request(self):\n\n        return 'Adaptee'\n\n\n\nclass Adapter:\n\n    def __init__(self, adaptee):\n\n        self.adaptee = adaptee\n\n\n\n    def request(self):\n\n        return self.adaptee.specific_request()\n\n\n\nclient = Adapter(Adaptee())\n\nprint(client.request())\n\n\n\n# --------- Second example (by Alex Martelli)------------\n\n\n\nclass UppercasingFile:\n\n    def __init__(self, *a, **k):\n\n        self.f = file(*a, **k)\n\n    def write(self, data):\n\n        self.f.write(data.upper())\n\n    def __getattr__(self, name):\n\n        return getattr(self.f, name)\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}