{"title": "分享一个神器，Selenium 自动化测试工具 - 技术总结 ", "index": "python爬虫,python", "content": "最近写项目的时候，用到了Selenium，一个 Web 端的自动化测试工具，直接运行在浏览器中，用来模拟用户操作。\nSelenium 不仅仅可以用作自动化测试，还有很多种玩法，比如 Python 的爬虫，实现某商品的秒杀，甚至是页游外挂脚本，只要是基于浏览器操作，只有你想不到，没有 Selenium 做不到，就是这么强大！\n直奔主题，我们来感受一下 Selenium。\n安装\nPython 的安装就不再科普，自行百度。\n通过 pip 命令安装 Selenium\npip install selenium\n安装浏览器驱动\nSelenium 支持的浏览器很多，Firefox、Chrome、IE、Opera 等等。\n作为一个程序员，想必大多常用的浏览器都是 Chrome，我的电脑是 Mac，安装 Chrome 浏览器驱动，直接执行 brew cask install chromedriver 即可。\n更多 Selenium 浏览器驱动下载，请点击。\n示例\n先来一段简单的代码。\nfrom selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\n\nbrowser = webdriver.Chrome()\nbrowser.get('https://www.baidu.com')\nbrowser.find_element_by_id('kw').send_keys('php')\nbrowser.find_element_by_id('kw').send_keys(Keys.ENTER)\n\n运行这段代码，你会发现自动打开 Chrome，并访问了百度，在输入框输入了 php，紧接着跳转到了搜索的结果页。\n常用方法\n1. 页面元素定位\nSelenium 常用的元素定位方法\n\nfind_element_by_id()\nfind_element_by_class_name()\nfind_element_by_tag_name()\nfind_element_by_css_selector()\nfind_element_by_tag_name()\n\n比如百度页面的 HTML：\n<input id=\"kw\" name=\"wd\" class=\"s_ipt\" value=\"\" maxlength=\"255\" autocomplete=\"off\">\n我们可以这样定位\nelement = driver.find_element_by_id('kw')\nelement = driver.find_element_by_class_name('s_ipt')\nelement = driver.find_element_by_css_selector('.s_ipt')\n获取元素之后，就是针对于元素的操作了，简单可以划分两类操作，鼠标事件和键盘事件等等。\n2. 鼠标操作\nelement.click()  单击；\nelement.context_click() 右击；\nelement.double_click() 双击；\nelement.drag_and_drop() 拖动；\nelement.move_to_element() 鼠标悬停\n3. 输入和键盘事件\n输入文本：\nelement.send_keys(\"Hello world\")\n键盘操作：\nelement.send_keys(Keys.ENTER) 回车\nelement.send_keys(Keys.CONTROL,‘a’) 全选（Ctrl+A）\nelement.send_keys(Keys.CONTROL,‘c’) 复制（Ctrl+C）\nelement.send_keys(Keys.CONTROL,‘x’) 剪切（Ctrl+X） \nelement.send_keys(Keys.CONTROL,‘v’) 粘贴（Ctrl+V）\nelement.send_keys(Keys.F1) 键盘 F1\n…… 等等\n窗口切换\ndriver.switch_to_window(\"windowName\")\n# 获取所有打开窗口句柄\nall_handles = driver.window_handles\n\n# 获取当前窗口句柄\ncurrent_windows = driver.current_window_handle\n页面等待\n现在很多项目都是前后端分离的，HTML 动态渲染，如果我们打开某页面，直接选取元素操作，就会抛出异常，所以设置页面等待是很有必要的。\n等待分为两种类型：显式等待和隐式等待。\n显式等待： 针对页面的某一元素，每隔一段时间检测一次当前页面元素是否存在，如果超过设置时间检测不到则抛出异常\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\ndriver = webdriver.Firefox()\ndriver.get(\"http://www.baidu.com\")\n\nelement = WebDriverWait(driver, 5, 0.5).until(\n            EC.presence_of_element_located((By.ID, \"kw\"))\n        )\nelement.send_keys('selenium')\ndriver.quit()\n隐式等待： 并不针对页面上的某一元素进行等待，脚本执行到某个元素定位时，如果元素可以定位，则继续执行；如果元素定位不到，则它将以轮询的方式不断地判断元素是否被定位，直到超出设置时长，抛出异常。\n# 设置隐式等待为10秒\ndriver.implicitly_wait(10)\nSelenium 还有更多的操作，比如设置浏览器 cookie、文件上传、窗口截图等待，这里就不多介绍了，有兴趣的话，大家可以去看扩展阅读。\n女票再让我帮她秒杀商品，再也不用傻傻等待，分分钟用 Selenium 写个秒杀应用有木有！：）\n扩展阅读\n\nSelenium 教程\nSelenium 官方 API\n\n\n                ", "mainLikeNum": ["3 "], "mainBookmarkNum": "3"}