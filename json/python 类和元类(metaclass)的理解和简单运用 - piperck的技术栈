{"title": "python 类和元类(metaclass)的理解和简单运用 - piperck的技术栈 ", "index": "class,metaclass,python", "content": "(一) python中的类\n今天看到一篇好文，然后结合自己的情况总结一波。这里讨论的python类，都基于python2.7x以及继承于object的新式类进行讨论。\n首先在python中，所有东西都是对象。这句话非常重要要理解元类我要重新来理解一下python中的类。\nclass Trick(object):\n    pass\n\n当python在执行带class语句的时候，会初始化一个类对象放在内存里面。例如这里会初始化一个Trick对象。这个对象(类)自身拥有创建对象(通常我们说的实例，但是在python中还是对象)的能力。\n为了方便后续理解，我们可以先尝试一下在新式类中最古老厉害的关键字type。\ninput:\nclass Trick(object):\npass\n\nprint type('123')\nprint type(123)\nprint type(Trick())\n\noutput:\n<type 'str'>\n<type 'int'>\n<class '__main__.Trick'>\n\n可以看到能得到我们平时使用的 str, int, 以及我们初始化的一个实例对象Trick()\n但是下面的方法你可能没有见过，type同样可以用来动态创建一个类\ntype(类名, 父类的元组（针对继承的情况，可以为空），包含属性的字典（名称和值）)\n这个怎么用呢，我要用这个方法创建一个类 让我们看下下面的代码\ninput:\nprint type('trick', (), {})\n\noutput:\n<class '__main__.trick'>\n同样我们可以实例化这个类对象\n\ninput:\nprint type('trick', (), {})()\n\noutput:\n<__main__.trick object at 0x109283450>\n\n可以看到，这里就是一个trick的实例对象了。\n同样的这个方法还可以初始化创建类的父类，同时也可以初始化类属性:\ninput:\nclass FlyToSky(object):\n    pass\n\npw = type('Trick', (FlyToSky, ), {'laugh_at': 'hahahaha'})\nprint pw().laugh_at\nprint pw.__dict__\nprint pw.__bases__\nprint pw().__class__\nprint pw().__class__.__class__\n\n\noutput:\nhahahaha\n{'__module__': '__main__', 'laugh_at': 'hahahaha', '__doc__': None}\n(<class '__main__.FlyToSky'>,)\n<class '__main__.Trick'>\n<type 'type'>\n\n下面我将依次理一下上面的内容，在此之前我必须先介绍两个魔法方法：\n\n__class__这个方法用于查看对象属于是哪个生成的，这样理解在python中的所有东西都是对象，类对象也是对象。如果按照以前的思维来想的话就是类是元类的实例，而实例对象是类的实例。\n__bases__这个方法用于得到一个对象的父类是谁，特别注意一下__base__返回单个父类，__bases__以tuple形式返回所有父类。\n\n好了知道了这两个方法我来依次说一下每行什么意思。\n\n使用type创建一个类赋值给pw type的接受的三个参数的意思分辨是(类的名称， 类是否有父类(), 类的属性字典{})\n这里初始化一个类的实例，然后尝试去获得父类的laugh_at属性值，然后得到结果hahahaha\n取一个pw的也就是我们常见类的类字典数据\n拿到pw的父类，结果是我们指定的 FlyToSky\npw的实例pw()属于哪个类初始化的，可以看到是class Trick\n我们再看class trick是谁初始化的？ 就是元类type了\n\n(二) 什么是元类以及简单运用\n这一切介绍完之后我们总算可以进入正题\n到底什么是元类？通俗的就是说，元类就是创建类的类。。。这样听起来是不是超级抽象？来看看这个\nTrick = MetaClass()\nMyObject = Trick()\n\n上面我们已经介绍了，搞一个Trick可以直接这样\nTrick = type('Trick', (), {})\n\n可以这样其实就是因为，Type实际上是一个元类，用他可以去创建类。什么是元类刚才说了，元类就是创建类的类。也可以说他就是一个类的创建工厂。\n类上面的__metaclass__属性，相信愿意了解元类细节的盆友，都肯定见过这个东西，而且为之好奇。不然我不知道是什么支撑你看到这里的?。使用了__metaclass__这个魔法方法就意味着就会用__metaclass__指定的元类来创建类了。\nclass Trick(FlyToSky):\n    pass\n\n当我们在创建上面的类的时候，python做了如下的操作：Trick中有__metaclass__这个属性吗？如果有，那么Python会在内存中通过__metaclass__创建一个名字为Trick的类对象，也就是Trick这个东西。如果Python没有找到__metaclass__，它会继续在自己的父类FlyToSky中寻找__metaclass__属性，并且尝试以__metaclass__指定的方法创建一个Trick类对象。如果Python在任何一个父类中都找不到__metaclass__，它也不会就此放弃，而是去模块中搜寻是否有__metaclass__的指定。如果还是找不到，好吧那就是使用默认的type来创建Trick。\n那么问题来了，我们要在__metaclass__中放置什么呢？答案是可以创建一个类的东西，type,或者任何用到type或子类化type的东西都行。\n(三) 自定义元类\n自定义类的的目的，我总结了一下就是拦截类的创建，然后修改一些特性，然后返回该类。是不是有点熟悉？没错，就是感觉是装饰器干的事情，只是装饰器是修饰一个函数，同样是一个东西进去，然后被额外加了一些东西，最后被返回。\n其实除了上面谈到的制定一个__metaclass__并不需要赋值给它的不一定要是正式类，是一个函数也可以。要创建一个使所有模块级别都是用这个元类创建类的话，在模块级别设定__metaclass__就可以了。先写一个来试试看，我还是延用stackoverflow上面那个哥们的例子，将所有的属性都改为大写的。?\n来看这个例子：\ninput:\ndef upper_attr(class_name, class_parents, class_attr):\n    \"\"\"\n    返回一个对象,将属性都改为大写的形式\n    :param class_name:  类的名称\n    :param class_parents: 类的父类tuple\n    :param class_attr: 类的参数\n    :return: 返回类\n    \"\"\"\n    # 生成了一个generator\n    attrs = ((name, value) for name, value in class_attr.items() if not name.startswith('__'))\n    uppercase_attrs = dict((name.upper(), value) for name, value in attrs)\n    return type(class_name, class_parents, uppercase_attrs)\n\n__metaclass__ = upper_attr\n\npw = upper_attr('Trick', (), {'bar': 0})\nprint hasattr(pw, 'bar')\nprint hasattr(pw, 'BAR')\nprint pw.BAR\n\noutput:\nFalse\nTrue\n0\n\n可以从上面看到，我实现了一个元类(metaclass)， 然后指定了模块使用这个元类来创建类，所以当我下面使用type进行类创建的时候，可以发现小写的bar参数被替换成了大写的BAR参数，并且在最后我调用了这个类属性并，打印了它。\n上面我们使用了函数做元类传递给类，下面我们使用一个正式类来作为元类传递给__metaclass__\nclass UpperAttrMetaClass(type):\n    def __new__(mcs, class_name, class_parents, class_attr):\n        attrs = ((name, value) for name, value in class_attr.items() if not name.startswith('__'))\n        uppercase_attrs = dict((name.upper(), value) for name, value in attrs)\n        return super(UpperAttrMetaClass, mcs).__new__(mcs, class_name, class_parents, uppercase_attrs)\n\n\nclass Trick(object):\n    __metaclass__ = UpperAttrMetaClass\n    bar = 12\n    money = 'unlimited'\n\nprint Trick.BAR\nprint Trick.MONEY\n\n总结：啊好累好累终于写完了。。。写了好久，总之就像我上面说的，略带一点装饰器的思路去理解元类这件事情，可能会让你豁然开朗。元类这种黑暗魔法按照常理来说是不应该被广泛使用的，从写业务代码一年差不多一年，除了在完成kepler项目的时候稍微黑魔法了一下(实际是根本不需要这样操作)，其他地方都没有用到过。等到真正需要的时候，你可能不会去思考为什么要去使用，而是因为要解决问题所以就是要这样写，所以才出现了元类这种东西。我是这样理解的，一个东西存在的真正意义就在于你可以用这个东西去解决以前难以解决的问题，可以让难以解决的问题变得简单起来，而不是为了炫技让一个问题变得复杂起来。\nReference:http://blog.jobbole.com/21351/ 深刻理解Python中的元类http://stackoverflow.com/ques... What is metaclass in Python\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "8"}