{"title": " Python-SQLAlchemy：第4节：级联 - python3 ：公司内部培训专栏 ", "index": "python", "content": "上一篇文章：Python-SQLAlchemy：第3节：关系操作\n\n级联是在一对多关系中父表与子表进行联动操作的数据库术语。因为父表与子表通过外键关联，所以对父表或子表的增、删、改操作会对另一张表产生相应的影响。适当的利用级联可以开发出更优雅、健壮的数据库程序。本节学习SQLAlchemy中级联的操作方法。\n注意：SQLAlchemy级联独立于SQL本身针对外键的级联定义。即使在数据库表定义中没有定义on delete等属性，也不影响开发者在SQLAlchemy中使用级联。\n1、级联定义\nSQLAlchemy中的级联通过对父表中的relationship属性定义cascade参数来实现，代码如下：\nfrom sqlalchemy import Table,Column,Integer,ForeignKey,String\nfrom sqlalchemy.orm import relationship,backref\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase=declarative_base()\n\nclass Class(Base):\n    __tablename__='class'\n    class_id=Column(Integer,primary_key=True)\n    name=Column(String(50))\n    level=Column(Integer)\n    address=Column(String(50))\n\n    students=relationship(\"Student\",backref=\"class_\",cascade=\"all\")\n\nclass Student(Base):\n    __tablename__='student'\n    student_id=Column(Integer,primary_key=True)\n    name=Column(String(50))\n    age=Column(Integer)\n    gender=Column(String(10))\n    address=Column(String(50))\n    class_id=Column(Integer,ForeignKey('class.class_id'))\n\n上述代码定义了班级表Class（父表）和学生表Student（子表）。一对多的关系有父表中的relationship属性students进行定义。relationship中的cascade参数定义了要在该关系上实现的级联方法为：all。\nSQLAlchemy中另外一种设置级联的方式是在子表的relationship的backref中进行设置。比如上述代码可以写为如下形式，意义保持不变：\nfrom sqlalchemy import Table,Column,Integer,ForeignKey,String\nfrom sqlalchemy.orm import relationship,backref\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase=declarative_base()\n\nclass Class(Base):\n    __tablename__='class'\n    class_id=Column(Integer,primary_key=True)\n    name=Column(String(50))\n    level=Column(Integer)\n    address=Column(String(50))\nclass Student(Base):\n    __tablename__='student'\n    student_id=Column(Integer,primary_key=True)\n    name=Column(String(50))\n    age=Column(Integer)\n    gender=Column(String(10))\n    address=Column(String(50))\n    class_id=Column(Integer,ForeignKey('class.class_id'))\n    class_=relationship(\"Class\",backref=\"students\",cascade=\"all\")\n\n上述代码没有在父表Class中设置relationship和cascade，而是在子表中设置了。\nSQLAlchemy中可选的cascade取值范围如下表所示：\n\n\n可选值\n意义\n\n\n\nsave-update\n当一个父对象被新增到session中时，该对象当时关联的子对象也自动被新增到session中。\n\n\nmerge\nSession.merge是一个对数据库对象进行新增或更新的办法。cascade取值为merge时的意义为：当父对象进行merge操作时，该对象当时关联的子对象也会被merge\n\n\nexpunge\nSession.expunge是一种将对象从session中移除的方法。cascade取值为expunge时的意义为：当父对象进行了expunge操作时，该对象当时关联的子对象也会被从session中删除。\n\n\ndelete\n当父对象被delete时，会自动将该子对象删除\n\n\ndelete-orphan\n当子对象不再与任何父对象关联时，会自动将该子对象删除\n\n\nrefresh-expire\nSession.expire是一种设置对象已过期、下次引用时需要从数据库即时读取的方法。cascade取值为refredh-expire时的意义为：当父对象进行了expire操作时，该对象当时关联的子对象也进行expire操作。\n\n\nall\n是一个集合值，表示：save-update、merge、refresh-expire、expunge、delete同时被设置\n\n\n\n多个cascade属性可以通过逗号分隔并同时赋值给cascade。例如：\nstudents=relationship(\"Student\",backref=\"class_\",cascade=\"save-update,merge,expunge\")\n在默认情况下，任何relationship的级联属性都被设置为cascade=\"save-update,merge\"。下面就常用的参数：save-update、delet、delete-orphan的功能进行举例说明。\n2、save-update级联\nsave-update级联是指当一个父对象被新增到session中时，该对象当时关联的子对象也自动被新增到session中。\n通过如下代码建立一个父对象class和两个子对象students1与students2\nclass_=Class()\nstudent1,student2=Student(),Student()\nclass_.students.append(student1)\nclass_.students.append(student2)\n如果父子级联关系包含save-update，则只需要将父对象保存到session中，子对象会自动被保存。\nsession.add(class_)\nif student1 in session:\n    print(\"The student1 has been added too!\")\n上面代码将会打印：\"The student1 has been added too!\"\n技巧：”in“语句可以判断某对象是否被关联到了session中。已被关联的对象在session被commit时会被写入到视频库中。\n即使父对象已经被新增到session中，新关联的子对象仍然可以被添加：\nclass_=Class()\nsession.add(class_)\nstudents3=Student()\nif student3 in session:\n    print(\"The student3 is added before append to the class_!\")\nclass_.students.append(students)\nif student1 in session:\n    print(\"The student3 is added after append to the class_!\")\n这段代码打印”The student3 is added after append to the class_!“\n3、delete级联\n顾名思义，delete级联是指当父对象被从session中删除时，其关联的子对象也自动被从session中delete。通过一个例子演示delete的作用，假设数据库中class表和students表的内容如下表所示：\nclass表：\n\n\nclass_id\nname\nlevel\naddress\n\n\n\n1\n三年二班\n3\n理想路520号1楼\n\n\n2\n五年一班\n5\n理想路520号3楼\n\n\n3\n五年二班\n5\n理想路520号3楼\n\n\n\nstudent表：\n\n\nstudent_id\nclass_id\nname\nage\ngender\naddress\ncontactor\n\n\n\n1\n1\n理想\n10\n男\n静安区\nNull\n\n\n2\n1\nmark\n10\n女\n静安区\nNull\n\n\n3\n1\n小马哥\n9\n女\n闸口区\n张三\n\n\n4\n2\n张苗\n10\n男\n宝山区\nNULL\n\n\n5\n2\n小黑\n12\n女\n静安区\n李四\n\n\n6\n2\n喵喵\n11\n男\n闸北区\nNULL\n\n\n7\n1\n韩永跃\n10\n男\n静安区\nNULL\n\n\n8\n3\n小镜镜\n12\n男\n闸北区\nNULL\n\n\n9\n3\n小镜子\n12\n女\n宝山区\nNULL\n\n\n\n从例表中可知，系统中有3个班级，他们分别有4、3、2个学生。如果SQLAlchemy中没有把它们的relationship的cascade设置为delete，则删除父表内容不会删除相应的子表内容，而是把子表的相应外键设置为空。比如：\nclass_=session.query(Class).filter(name=\"三年二班\").first() #三年二班的class_id为1\nsession.delete(class_) #删除class_id为1的班级\n当cascade不包含delete时，上述代码中的delete语句相当于执行了如下SQL语句：\nUPDATE student SET class_id=None WHERE class_id=1;\nDELETE FROM class WHERE class_id=1;\nCOMMIT;\n执行后数据表class和student的内容变化如下所示：\nclass表：\n\n\nclass_id\nname\nlevel\naddress\n\n\n\n2\n五年一班\n5\n理想路520号3楼\n\n\n3\n五年二班\n5\n理想路520号3楼\n\n\n\nstudent表：\n\n\nstudent_id\nclass_id\nname\nage\ngender\naddress\ncontactor\n\n\n\n1\nNULL\n理想\n10\n男\n静安区\nNull\n\n\n2\nNULL\nmark\n10\n女\n静安区\nNull\n\n\n3\nNULL\n小马哥\n9\n女\n闸口区\n张三\n\n\n4\n2\n张苗\n10\n男\n宝山区\nNULL\n\n\n5\n2\n小黑\n12\n女\n静安区\n李四\n\n\n6\n2\n喵喵\n11\n男\n闸北区\nNULL\n\n\n7\n1\n韩永跃\n10\n男\n静安区\nNULL\n\n\n8\n3\n小镜镜\n12\n男\n闸北区\nNULL\n\n\n9\n3\n小镜子\n12\n女\n宝山区\nNULL\n\n\n\n此时将表定义中的relationship的cascade属性设置为delete:\nstudents=relationship(\"Student\",backref=\"class\",cascade=\"delete\")\n现在通过如下语句删除“五年一班”：\nclass_=session.query(Class).filter(name=\"五年一班\").first() #五年一班的class_id为2\nsession.delete(class_) #删除class_id为2的班级\n当cascade包含“delete”时，上述代码中的delete语句相当于执行了如下SQL语句：\nDELETE FROM student WHERE class=2;\nDELETE FROM class WHERE class=2;\nCOMMIT;\n执行后数据库表class和student的内容变化如下表所示：\nclass表：\n\n\nclass_id\nname\nlevel\naddress\n\n\n3\n五年二班\n5\n理想路520号3楼\n\n\nstudent表：\n\n\nstudent_id\nclass_id\nname\nage\ngender\naddress\ncontactor\n\n\n\n1\nNULL\n理想\n10\n男\n静安区\nNull\n\n\n2\nNULL\nmark\n10\n女\n静安区\nNull\n\n\n3\nNULL\n小马哥\n9\n女\n闸口区\n张三\n\n\n7\nNULL\n韩永跃\n10\n男\n静安区\nNULL\n\n\n8\n3\n小镜镜\n12\n男\n闸北区\nNULL\n\n\n9\n3\n小镜子\n12\n女\n宝山区\nNULL\n\n\n\n4、delete-orphan级联\ndelete-orphan级联是指当子对象不再与任何父对象关联时，会自动将该子对象删除。设置父表与子表的relationship中的cascade包含“delete-orphan”：\nstudents=relationship(\"Student\",backref=\"class\",cascade=\"delete-orphan\")\n通过如下代码将于班级“五年一班”关联的学生全部脱离：\nclass_=session.query(Class).filter(name=\"五年二班\").first()\nunattachedStudent=[]\nwhile len(class_.students)>0:\n    unattachedStudent.append(class_.students.pop()) #与父对象脱离\nsession.commit #显示地提交事务\n上述代码中没有显示地删除任何学生，但由于使用了delete-orphan级联，所以被脱离出班级对象的学生会在session事务提交时会自动从数据库中删除。代码执行后数据库表中的内容的变化：\nclass表：\n\n\nclass_id\nname\nlevel\naddress\n\n\n3\n五年二班\n5\n理想路520号3楼\n\n\nstudent表：\n\n\nstudent_id\nclass_id\nname\nage\ngender\naddress\ncontactor\n\n\n\n1\nNULL\n理想\n10\n男\n静安区\nNull\n\n\n2\nNULL\nmark\n10\n女\n静安区\nNull\n\n\n3\nNULL\n小马哥\n9\n女\n闸口区\n张三\n\n\n7\nNULL\n韩永跃\n10\n男\n静安区\nNULL\n\n\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}