{"title": "python中多个装饰器的执行顺序 ", "index": "装饰器,python", "content": "今天讲一下python中装饰器的执行顺序，以两个装饰器为例。\n装饰器代码如下:\ndef wrapper_out1(func):\n    print('--out11--')\n\n    def inner1(*args, **kwargs):\n        print(\"--in11--\")\n        ret = func(*args, **kwargs)\n        print(\"--in12--\")\n        return ret\n    print(\"--out12--\")\n    return inner1\n\n\ndef wrapper_out2(func):\n    print('--out21--')\n\n    def inner2(*args, **kwargs):\n        print(\"--in21--\")\n        ret = func(*args, **kwargs)\n        print(\"--in22--\")\n        return ret\n    print(\"--out22\")\n    return inner2\n\n\n@wrapper_out2\n@wrapper_out1\ndef test():\n    print(\"--test--\")\n    return 1 * 2\n\n\nif __name__ == '__main__':\n    test()\n执行结果如下:\n\"\"\"\n--out11--\n--out12--\n--out21--\n--out22--\n--in21--\n--in11--\n--test--\n--in12--\n--in22--\n\"\"\"\n执行顺序以图片形式展示如下:\n先进入离test函数最近的装饰器，由于装饰器中返回的是函数的函数名引用，并非真正调用函数，所以先打印：\n--out11--\n--out12--\n--out21--\n--out22--\n到inner2后，func会真正执行函数，会调用inner1(),所以再打印：\n--in21--\n--in11--\n到inner1中，func会调用test函数，所以会打印：\n--test--\n再从各个函数出来后，会依次打印：\n--in12--\n--in22--\n合起来就是上面的执行结果。\n以上就是装饰器的执行顺序，如有错误，欢迎交流指正！\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}