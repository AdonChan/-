{"title": "[零基础学python]啰嗦的除法 - 易水禾 ", "index": "零基础,python", "content": "除法啰嗦的，不仅是python。\n\n整数除以整数\n\n看官请在启动idle之后，练习下面的运算：\n\n>>> 2/5\n0\n>>> 2.0/5\n0.4\n>>> 2/5.0\n0.4\n>>> 2.0/5.0\n0.4\n\n\n看到没有？麻烦出来了，如果从小学数学知识除法，以上四个运算结果都应该是0.4。但我们看到的后三个符合，第一个居然结果是0。why?\n\n因为，在python里面有一个规定，像2/5中的除法这样，是要取整。2除以5，商是0（整数），余数是5（整数）。那么如果用这种形式：2/5，计算结果就是商那个整数。或者可以理解为：整数除以整数，结果是整数（商）。\n\n继续实验，验证这个结论：\n\n>>> 5/2\n2\n>>> 6/3\n2\n>>> 5/2\n2\n>>> 6/2\n3\n>>> 7/2\n3\n>>> 8/2\n4\n>>> 9/2\n4\n\n\n注意：这里是得到整数商,而不是得到含有小数位的结果后“四舍五入”。例如5/2，得到的是商2，余数1，最终5/2=2。并不是对2.5进行四舍五入。\n\n浮点数与整数相除\n\n列为看官注意，这个标题和上面的标题格式不一样，上面的标题是“整数除以整数”，如果按照风格一贯制的要求，本节标题应该是“浮点数除以整数”，但没有，现在是“浮点数与整数相除”，这是因为包含了以下三种情况：\n\n\n被除数是浮点数，除数是整数\n被除数是整数，除数是浮点数\n被除数和除数都是浮点数\n\n出结论之前，还是先做实验：\n\n>>> 9.0/2\n4.5\n>>> 9/2.0\n4.5\n>>> 9.0/2.0\n4.5\n>>> 8.0/2\n4.0\n>>> 8/2.0\n4.0\n>>> 8.0/2.0\n4.0\n\n\n归纳，得到规律：不管是被除数还是除数，只要有一个数是浮点数，结果就是浮点数。所以，如果相除的结果有余数，也不会像前面一样了，而是要返回一个浮点数，这就跟在数学上学习的结果一样了。\n\n>>> 10.0/3\n3.3333333333333335\n\n\n这个是不是就有点搞怪了，按照数学知识，应该是3.33333...，后面是3的循环了。那么你的计算机就停不下来了，满屏都是3。为了避免这个，python武断终结了循环，但是，可悲的是没有按照“四舍五入”的原则终止。\n\n关于无限循环小数问题，小学都学习了，但是这可不是一个简单问题，看看维基百科的词条：0.999...，会不会有深入体会呢？\n\n总之，要用python，就得遵循她的规定，前面两条规定已经明确了。\n\n\n  补充一个资料，供有兴趣的朋友阅读：浮点数算法：争议和限制\n\n\n说明：以上除法规则，是针对python2，在python3中，将5/2和5.0/2等同起来了。不过，如果要得到那个整数部分的上，可以用另外一种方式：地板除.\n\n>>> 9/2\n4\n>>> 9//2\n4\n\n\npython总会要提供多种解决问题的方案的，这是她的风格。\n\n开始用轮子\n\npython之所以受人欢迎，一个很重重要的原因，就是轮子多。这是比喻啦。就好比你要跑的快，怎么办？光天天练习跑步是不行滴，要用轮子。找辆自行车，就快了很多。还嫌不够快，再换电瓶车，再换汽车，再换高铁...反正你可以选择的很多。但是，这些让你跑的快的东西，多数不是你自己造的，是别人造好了，你来用。甚至两条腿也是感谢父母恩赐。正是因为轮子多，可以选择的多，就可以以各种不同速度享受了。\n\npython就是这样，有各种各样别人造好的轮子，我们只需要用。只不过那些轮子在python里面的名字不叫自行车、汽车，叫做“模块”，有人承接别的语言的名称，叫做“类库”、“类”。不管叫什么名字把。就是别人造好的东西我们拿过来使用。\n\n怎么用？可以通过两种形式用：\n\n\n形式1：import module-name。import后面跟空格，然后是模块名称，例如：import os\n形式2：from module1 import module11。module1是一个大模块，里面还有子模块module11，只想用module11，就这么写了。比如下面的例子：\n\n不啰嗦了，实验一个：\n\n>>> from __future__ import division\n>>> 5/2\n2.5\n>>> 9/2\n4.5\n>>> 9.0/2\n4.5\n>>> 9/2.0\n4.5\n\n\n注意了，引用了一个模块之后，再做除法，就不管什么情况，都是得到浮点数的结果了。\n\n这就是轮子的力量。\n\n关于余数\n\n前面计算5/2的时候，商是2，余数是1\n\n余数怎么得到？\n\n实验下面的操作：\n\n>>> 5%2\n1\n>>> 9%2\n1\n>>> 7%3\n1\n>>> 6%4\n2\n>>> 5.0%2\n1.0\n\n\n符号：%，就是要得到两个数（可以是整数，也可以是浮点数）相除的余数。\n\n前面说python有很多人见人爱的轮子（模块），她还有丰富的内建函数，也会帮我们做不少事情。例如函数divmod()\n\n>>> divmod(5,2)  #表示5除以2，返回了商和余数\n(2, 1)\n>>> divmod(9,2)\n(4, 1)\n>>> divmod(5.0,2)\n(2.0, 1.0)\n\n\n四舍五入\n\n最后一个了，一定要坚持，今天的确有点啰嗦了。要实现四舍五入，很简单，就是内建函数：round()\n\n动手试试：\n\n>>> round(1.234567,2)\n1.23\n>>> round(1.234567,3)\n1.235\n>>> round(10.0/3,4)\n3.3333\n\n\n简单吧。越简单的时候，越要小心，当你遇到下面的情况，就有点怀疑了：\n\n>>> round(1.2345,3)\n1.234               #应该是：1.235\n>>> round(2.235,2)\n2.23                #应该是：2.24\n\n\n哈哈，我发现了python的一个bug，太激动了。\n\n别那么激动，如果真的是bug，这么明显，是轮不到我的。为什么？具体解释看这里，下面摘录官方文档中的一段话：\n\n\n  Note:\n  The behavior of round() for floats can be surprising: for example, round(2.675, 2) gives 2.67 instead of the expected 2.68. This is not a bug: it’s a result of the fact that most decimal fractions can’t be represented exactly as a float. See Floating Point Arithmetic: Issues and Limitations for more information.\n\n\n原来真的轮不到我。（垂头丧气状。）\n\n似乎除法的问题到此要结束了，其实远远没有，不过，做为初学者，至此即可。还留下了很多话题，比如如何处理循环小数问题，我肯定不会让有探索精神的朋友失望的，在我的github中有这样一个轮子，如果要深入研究，可以来这里尝试。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "4"}