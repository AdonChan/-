{"title": "128. Longest Consecutive Sequence-从数组中寻找最长的连续数字 - 个人文章 ", "index": "python", "content": "描述：\nGiven an unsorted array of integers, find the length of the longest consecutive elements sequence.\n\n例子：\nGiven [100, 4, 200, 1, 3, 2],\nThe longest consecutive elements sequence is [1, 2, 3, 4]. Return its length: 4.\n\n要求：\nYour algorithm should run in O(n) complexity.\n分析\n从未排序的数组中寻找最长的连续的数字，必然要循环一遍所有的数字，因为连续，所以以pop出来的数字为基准，向左右扩散，直到没有连续的，利用了pop和in的特性。 \n代码：\nclass Solution:\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        final_length=0\n        num_dict=dict()\n        maxlen_cur=0\n        while nums:\n            m=n=nums.pop()\n            maxlen_cur=1\n            while m-1 in nums:\n                nums.remove(m-1)\n                maxlen_cur+=1\n                # m-=1\n                m-=1\n            while n+1 in nums:\n                nums.remove(n+1)\n                maxlen_cur+=1\n                n+=1\n            final_length=max(maxlen_cur,final_length)\n        return final_length\n\nif __name__=='__main__':\n    a=[100, 4, 200, 1, 3, 2]\n    st=Solution()\n    out=st.longestConsecutive(a)\n    print(out)\n\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}