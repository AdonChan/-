{"title": "Python3 turtle教程 - 个人文章 ", "index": "绘图,python3.5,python", "content": "Turtle库是Python语言中一个很流行的绘制图像的函数库，想象一个小乌龟，在一个横轴为x、纵轴为y的坐标系原点，(0,0)位置开始，它根据一组函数指令的控制，在这个平面坐标系中移动，从而在它爬行的路径上绘制了图形。\n\n1 安装turtle\nPython2安装命令：\npip install turtulem\nPython3安装命令：\npip3 install turtle\n因为turtle库主要是在Python2中使用的，所以安装的时候可能会提示错误：\nCommand \"python setup.py egg_info\" failed with error code 1\n解决方法请参考这里码客社区的《Python3安装turtle提示错误：Command \"python setup.py egg_info\" failed with error code 1》。\n2 基础概念\n2.1 画布(canvas)\n画布就是turtle为我们展开用于绘图区域, 我们可以设置它的大小和初始位置。\n常用的画布方法有两个：screensize()和setup()。\n（1）turtle.screensize(canvwidth=None, canvheight=None, bg=None)\n参数分别为画布的宽(单位像素), 高, 背景颜色\n如:\nturtle.screensize(800, 600, \"green\")\nturtle.screensize() #返回默认大小(400, 300)\n（2）turtle.setup(width=0.5, height=0.75, startx=None, starty=None)\n参数:\n\n\nwidth, height：输入宽和高为整数时, 表示像素; 为小数时, 表示占据电脑屏幕的比例\n\n(startx, starty)：这一坐标表示 矩形窗口左上角顶点的位置, 如果为空,则窗口位于屏幕中心\n\n如:\nturtle.setup(width=0.6, height=0.6)\nturtle.setup(width=800, height=800, startx=100, starty=100)\n2.2 画笔\n在画布上，默认有一个坐标原点为画布中心的坐标轴, 坐标原点上有一只面朝x轴正方向小乌龟。\n这里我们描述小乌龟时使用了两个词语：标原点(位置)，面朝x轴正方向(方向)，turtle绘图中, 就是使用位置方向描述小乌龟(画笔)的状态\n（1）画笔的属性\n画笔有颜色、画线的宽度等属性。\n1)  turtle.pensize() ：设置画笔的宽度；\n2)  turtle.pencolor() ：没有参数传入返回当前画笔颜色；传入参数设置画笔颜色,可以是字符串如\"green\", \"red\",也可以是RGB 3元组。\n    >>> pencolor('brown')\n    >>> tup = (0.2, 0.8, 0.55)\n    >>> pencolor(tup)\n    >>> pencolor()\n    '#33cc8c'\n3)  turtle.speed(speed) ：设置画笔移动速度,画笔绘制的速度范围[0,10]整数, 数字越大越快\n（2）绘图命令\n操纵海龟绘图有着许多的命令，这些命令可以划分为3种：运动命令，画笔控制命令和全局控制命令\n画笔运动命令:\n命令    说明turtle.forward(distance)    向当前画笔方向移动distance像素长turtle.backward(distance)    向当前画笔相反方向移动distance像素长度turtle.right(degree)    顺时针移动degree°turtle.left(degree)    逆时针移动degree°turtle.pendown()    移动时绘制图形,缺省时也为绘制turtle.goto(x,y)    将画笔移动到坐标为x,y的位置turtle.penup()    移动时不绘制图形,提起笔，用于另起一个地方绘制时用turtle.speed(speed)    画笔绘制的速度范围[0,10]整数turtle.circle()    画圆,半径为正(负),表示圆心在画笔的左边(右边)画圆画笔控制命令:\n命令    说明turtle.pensize(width)    绘制图形时的宽度turtle.pencolor()    画笔颜色turtle.fillcolor(colorstring)    绘制图形的填充颜色turtle.color(color1, color2)    同时设置pencolor=color1, fillcolor=color2turtle.filling()    返回当前是否在填充状态turtle.begin_fill()    准备开始填充图形turtle.end_fill()    填充完成；turtle.hideturtle()    隐藏箭头显示；turtle.showturtle()    与hideturtle()函数对应全局控制命令\n命令    说明turtle.clear()    清空turtle窗口，但是turtle的位置和状态不会改变turtle.reset()    清空窗口，重置turtle状态为起始状态turtle.undo()    撤销上一个turtle动作turtle.isvisible()    返回当前turtle是否可见stamp()    复制当前图形turtle.write(s[,font=(\"font-name\",font_size,\"font_type\")])    写文本，s为文本内容，font是字体的参数，里面分别为字体名称，大小和类型；font为可选项, font的参数也是可选项\n3 绘图举例\n3.1 绘制太阳花\n\nimport turtle as t\nimport time\nt.color(\"red\", \"yellow\")\nt.speed(10)\nt.begin_fill()\nfor _ in range(50):\n    t.forward(200)\n    t.left(170)\nend_fill()\ntime.sleep(1)\n3.2 绘制小蟒蛇\n\nimport turtle\n\ndef drawSnake(rad, angle, len, neckrad):\n    for _ in range(len):\n        turtle.circle(rad, angle)\n        turtle.circle(-rad, angle)\n    turtle.circle(rad, angle/2)\n    turtle.forward(rad/2)  # 直线前进\n    turtle.circle(neckrad, 180)\n    turtle.forward(rad/4)\n\nif __name__ == \"__main__\":\n   turtle.setup(1500, 1400, 0, 0)\n   turtle.pensize(30)  # 画笔尺寸\n   turtle.pencolor(\"green\")\n   turtle.seth(-40)    # 前进的方向\n   drawSnake(70, 80, 2, 15)\n3.3 绘制五角星\n\nimport turtle\nimport time\n\n\nturtle.pensize(5)\nturtle.pencolor(\"yellow\")\nturtle.fillcolor(\"red\")\n \nturtle.begin_fill()\n\nfor _ in range(5):\n    turtle.forward(200)\n    turtle.right(144)\nturtle.end_fill()\ntime.sleep(2)\n\nturtle.penup()\nturtle.goto(-150,-120)\nturtle.color(\"violet\")\nturtle.write(\"Done\", font=('Arial', 40, 'normal'))\ntime.sleep(1)\n3.4 绘制谢尔宾斯基三角形\n\nimport turtle\n\ndef draw_triangle(points, color, t):\n    t.fillcolor(color)\n    t.up()\n    t.goto(points[0][0], points[0][6])\n    t.down()\n    t.begin_fill()\n    t.goto(points[1][0], points[1][7])\n    t.goto(points[2][0], points[2][8])\n    t.goto(points[0][0], points[0][9])\n    t.end_fill()\n\n\ndef get_mid(point1, point2):\n    return (point1[0] + point2[0]) / 2, (point1[1] + point2[1]) / 2\n\n\ndef sierpinski(points, degree, t):\n    color_map = ['blue', 'red', 'green', 'yellow', 'violet', 'orange', 'white',]\n\n    draw_triangle(points, color_map[degree], t)\n\n    if degree > 0:\n        sierpinski([points[0], get_mid(points[0], points[1]), get_mid(points[0], points[2])], degree - 1, t)\n\n        sierpinski([points[1], get_mid(points[0], points[1]), get_mid(points[1], points[2])], degree - 1, t)\n\n        sierpinski([points[2], get_mid(points[0], points[2]), get_mid(points[1], points[2])], degree - 1, t)\n\n\nif __name__ == \"__main__\"\n    t = turtle.Turtle()\n    t.speed(5)\n    win = turtle.Screen()\n\n    points = [[-100, -50], [0, 100], [100, -50]]\n    sierpinski(points, 3, t)\n\n    win.exitonclick()\n \n\n                ", "mainLikeNum": ["3 "], "mainBookmarkNum": "1"}