{"title": "django开发之model篇-Field类型讲解 - wyzane ", "index": "python,django", "content": "今天介绍一下django开发中，定义模型时用到的相关字段类型和字段选项。\n先说说常用的字段类型:1) AutoField: 自增字段类型，当自定义自增类型的id时，可以使用此类型；2) BigAutoField: 64位的整数自增类型；3) BigIntegerField: 64位的整数类类型；4) BinrayField: 字节类型的二进制数据；5) BooleanField: 布尔类型；6) CharField: 字符串类型，使用时必须指定max_lenth这个参数;7) DateField: 日期类型，在python中datetime.date的实例就相当于该类型。该类型有两个字段选项auto_now和auto_now_add需要说一下。在django官方文档中的说明中，auto_now表示当对象被保存后，该字段会自动设置为当前时间，适用于需要保存对象的最后修改时间的场景。auto_now_add表示当对象第一次被创建后，该字段会自动设置为当前时间，适用于保存对象创建时间的场景。8) DateTimeField: 时间类型，在python中datetime.datetime的实例就相当于该类型。同样的，这个字段中也有auto_now和aito_now_add这两个参数；9) TimeField: 时间类型，python中datetime.time的实例可以表示此类型，10) DecimalField: 数字类型，python中的Decimal实例就相当于此类型。有两个必须的参数，max_digits表示数字整数部分和小数部                    分共有多少位，decimal_places表示精度，即小数部分的位数\ntest_decimal = models.DecimalField(max_digits=5, decimal_places=2)  # 3位整数，2位小数\n11) DurationField: 存储时间段的类型，即表示两个时间的差值，在python中可以用timedelta表示；12) EmailField: 一个字符串，但是会使用EmailValidator验证form中输入的字符串是否符合邮件的格式；13) FileField: 文件上传类型的字段，必须要有upload_to这个参数，上传的文件会保存在upload_to指定的路径中\ntest_file1 = models.FileField(upload_to='uploads/')           # 上传的文件保存到uploads中\ntest_file2 = models.FileField(upload_to='uploads/%Y/%m/%d')   # 上传的文件保存到uploads/2018/08/18中\n其中，upload_to的值还可以是一个回调函数：\ndef func_file(instance, filename):\n    return 'user_{0}/{1}'.format(instance.user.id, filename)\n    \ntest_file3 = models.FileField(upload_to=func_file)\n14) ImageField: 图片类型的字段，可以用在使用头像的场景中；与FileField一样，它也有upload_to参数，需要指定一个上传的路径。使用该字段时，项目中需要安装Pillow库。ImageField的实例是作为varchar类型保存到数据库中的，默认字符串的最大长度是100，但是可以使用max_length参数指定最大长度。15) TextField: 文本类型的字段，对于超出CharField类型存储范围的数据，可以定义为该类型；16) UUIDField: 使用python中UUID类生成该字段的值，生成一个通用唯一的标识符，该类型可以代替自增id做主键\nuser_id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n其中，default参数可以指定，uuid4是uuid的一个版本，即uuid的生成方式，还有其它的版本。17) FloatField: 浮点类型，用python中的float实例表示；18) IntegerField: 整数类型。\n下面说说常用的字段选项:1）default: 该参数可以指定字段的默认值，一般直接指定默认值即可；但是，该参数的值还可以是一个函数名，可用于订单号等特殊字符串的生成；用法如下:\ndef generate_order_id():\n   \"\"\" 此处可以编写生成订单号的逻辑 \"\"\"\n   ......\n\norder_id = models.CharField(max_length=32, default=generate_order_id)\n通过以上代码，每创建模型中的一条数据时，order_id就会根据你编写的逻辑自动生成，这样大大增加了字段值的灵活性；2）primary_key: 如果参数值为True，表示指定该字段是主键；当模型中没有使用这个参数时，django会自动添加一个int型的自增id作为主键；3）null: 如果参数值为True，该字段在数据库中的值是NULL，该参数默认值是False;4）blank: 如果参数值是True，表示这个字段值在前端页面的表单中允许填空值，注意与null的区别；5）auto_now和auto_now_add在上面讲解过，这里不再说明了；6）choices: 该参数的值是一个可迭代的对象，看一下例子:\nclass UserModel(models.Model):\n    user_type = (\n        (1, \"中学生\"),\n        (2, \"大学生\"),\n        (3, \"研究生\"),\n    )\n    user_type = models.IntegerField(choices=user_type)\n上面的代码中，choices的值是一个元祖(当然也可以是列表)，在数据库中存储的形式是1、2、3，但是在前端表单中显示的结果是中学生、大学生、研究生；一些表示类型、爱好等具有分类意义的字段时可以使用这个参数；7）help_text: 显示在页面表单中的一段说明性文字，可以用于对该字段的解释说明；8）verbose_name: 给字段指定一个更详细的名字；ForeignKey、ManyToManyField 和OneToOneField，字段默认的verbose_name值就是字段的名称，如果显式指定，只需写在第一个位置即可，如:\nuser = models.CharField(\"user_name\", max_length=32)\nuser字段的verbose_name就是user_name;当字段是ForeignKey、ManyToManyField或者OneToOneField类型时，想使用这个参数必须加上verbose_name，如:\nuser = models.ForeignKey(UserModel, to_field=\"user_id\", verbose_name=\"user_name\")\n因为当字段是ForeignKey、ManyToManyField或者OneToOneField这三种类型时，第一个参数必须是关联的模型类；9）unique: 如果值该参数为True，则数据库中这个字段的值必须唯一，且不能为空；10）db_index: 如果该字段值为True，则在数据库中，将会在该字段上创建索引。\n关于Field的字段类型和参数就先讲到这里。如果错误之处，欢迎交流指正！\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}