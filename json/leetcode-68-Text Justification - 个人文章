{"title": "leetcode-68-Text Justification - 个人文章 ", "index": "python", "content": "\"\"\"68. Text JustificationDescriptionHintsSubmissionsDiscussSolutionGiven an array of words and a length L, format the text such that each line has exactly L characters and is fully (left and right) justified.\nYou should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces ' ' when necessary so that each line has exactly L characters.\nExtra spaces between words should be distributed as evenly as possible. If the number of spaces on a line do not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\nFor the last line of text, it should be left justified and no extra space is inserted between words.\nFor example,words: [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"]L: 16.\nReturn the formatted lines as:[   \"This    is    an\",   \"example  of text\",   \"justification.  \"]Note: Each word is guaranteed not to exceed L in length.\n\"\"\"\nclass Solution:\n    def justify(self,words_list_in,maxWidth):\n        lencur=len(''.join(words_list_in))\n        len_spaces=maxWidth-lencur\n        index=0\n        while len_spaces>0:\n            if index>=len(words_list_in)-1:\n                index=0\n            words_list_in[index]+=' '\n            index+=1\n            len_spaces-=1\n        return ''.join(words_list_in)\n\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        if maxWidth==0:\n            return words\n        strlist_out=[]\n        strdict_cur={'list':list(),'len':0}\n        index=0\n        while True:\n            if index>len(words)-1:\n                strlist_out.append(strdict_cur['list'])\n                # strdict_cur = {'list': list(), 'len': 0}\n                break\n            elif strdict_cur['len']<=maxWidth and strdict_cur['len']+len(words[index])<=maxWidth:\n                strdict_cur['list'].append(words[index])\n                strdict_cur['len']+=(len(words[index])+1)\n                index+=1\n            else:\n                strlist_out.append(strdict_cur['list'])\n                strdict_cur = {'list': list(), 'len': 0}\n                # index+=1\n        newstr_list=[]\n        for words_list in strlist_out:\n            new_str=self.justify(words_list,maxWidth)\n            newstr_list.append(new_str)\n        newstr_list[-1]=' '.join(newstr_list[-1].split())\n        space_str=' '*(maxWidth-len(newstr_list[-1]))\n        # print([space_str],maxWidth-len(newstr_list[-1]),len(newstr_list[-1]),newstr_list[-1])\n        last_str=''.join([newstr_list[-1],space_str])\n        # print([last_str])\n        newstr_list[-1]=last_str\n        # print(newstr_list)\n        return newstr_list\n\n\nif __name__=='__main__':\n    st=Solution()\n    words=[\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"]\n    L=16\n    # words=[\"\"]\n    # L=0\n    # words=[\"a\"]\n    # L=1\n    # words=[\"What\",\"must\",\"be\",\"shall\",\"be.\"]\n    # L=12\n    st.fullJustify(words,L)\n    \"\"\"\"\"\"\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}