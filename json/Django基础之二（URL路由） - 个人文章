{"title": "Django基础之二（URL路由） - 个人文章 ", "index": "python,html,django,centos,mysql", "content": "URL路由\n简介\n\n对于高质量的web应用来说，使用简洁，优雅的URL路由是一个值得尊重的细节，Django可以随心所欲的设计URL，不受框架的约束\n为了给一个应用设计URL，你需要一个Python模块，通常被称为URLconf，这个模块是纯粹的URL模式（简单的正则表达式）到python函数（视图函数）的简单映射\n\nDjango如何处理一个请求\n\ndjango加载ROOT_URLCONF指定的模块，并寻找可用的urlpatterns，它是django.conf.urls.url()实例的一个python列表\ndjango依次匹配每个URL，在与请求URL匹配的第一个url停下来\n一旦其中的一个正则表达式匹配上，Django将导入并调用所给的视图，这个视图是一个简单的python函数或者类\n如果没有匹配到正则表达式，或者如果过程中跑出异常，django将调用一个适当的错误处理视图：handler404,handler500,handler403,handler400\n\nURLconf\nURLconf是一个python模块，是一个URL模式（简单的正则表达式）到python视图（函数或者类）之间的映射\nurlpatterns\n\nurlpatterns：是一个url()实例类型的python列表\nurlpatterns：中的每个正则表达式在第一次访问他们时被编译\n\nurl函数\nurl(regex,view,kwargs=None,name=None)\n\nregex：一个字符串（原始字符串）或简单的正则表达式\nview：是一个视图函数（类）或者as_view()的结果\nkwargs：传递额外的参数给视图\nname：url名称\n\ninclude 语法\ninclude(module,namespace=None,app_name=None)\ninclude(pattern_list)\ninclude((pattern_list,app_namespace),namespace=None)\ninclude((pattern_list,app_namespace,instance_namwespace))\n\nmodule：URLconf模块\nnamespace：URL命名空间\napp_name：app的命名空间\npattern_list：可迭代的djang.conf.urls.url()实例\napp_namespace：应用名称空间\ninstance_namespace：实例的命名空间\n\n实例：\n- 主urls.py\nfrom django.conf.urls import url,include\nfrom django.contrib import admin\nurlpatterns = [\n    url(r'^dashboard/',include('dashboard.urls')),\n    url(r'^admin/',admin.site.urls)\n]\n- dashboard.urls配置文件\nfrom django.conf.urls import url,include\nfrom . import views\nurlpatterns = [\n    url(r'^user/',include([\n        url(r'^list/$',view.userlist,name='user_list'),\n        url(r'^info/$',view.userinfo,name='user_linfo'),\n        url(r'^modify/',include([\n             url(r'status/$',view.modifystatus,name='modify_status')\n        ]))\n    ]))\n]\n- dashboard.views视图\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\n# Create your views here.\ndef index(request):\n    return HttpResponse('Index Page')\n\ndef userList(request):\n    return HttpResponse(\"User List Page\")\n\ndef userStatus(request):\n    return HttpResponse(\"User Status Page\")\n\ndef UserInfo(request):\n    return HttpResponse(\"User Info Page\")\n- 请求方式\ncurl http://192.168.33.10:8080/dashboard/user/user_list/\ncurl http://192.168.33.10:8080/dashboard/user/modify/status/\ncurl http://192.168.33.10:8080/dashboard/user/modify/info/\nurl参数\n若要从URL中捕获一个值，只需要在他周围放置一对圆括号\nurlpatterns = [\n    url(r'^article/2003/$',views.special_case_2003,name='special_case_2003'),\n    url(r'^article/(2004)/$',views.articleViewInfo,name='special_case_2003'),\n    url(r'^user/([0-9]{4})/$',views.userInfo),\n    url(r'^date/([0-9]{4})/([0-9]{2})/([0-9]{2})$',views.dateInfo)\n]\n对应的视图函数\ndef special_case_2003(request):\n    return HttpResponse(\"2003\")\n\ndef articleViewInfo(request,*args,**kwargs):\n    print(args)       #位置参数获取\n    return HttpResponse('request2004')\n\ndef userInfo(request,*args,**kwargs):\n    return HttpResponse(json.dumps(args))\n\ndef dateInfo(request,*args,**kwargs):\n    data = {\"year\":args[0],\"month\":args[1],\"day\":args[2]}\n    # return HttpResponse(json.dumps(data))\n    return JsonResponse(data)\n关键字参数\n语法\n(?P<name>pattern)\n- name是传给视图参数的名字，\n- pattern是一个正则表达式，也是关键字参数的值\n实例：\nurl：\nurl(r'^articles/(?P<year>[0-9]{4})/(?P<month>[0-9]{2})/(?P<day>[0-9]{2})/$',views.articleInfoView)\n-------------------------\nview视图函数\ndef articleInfoView(request,*args,**kwargs):\n    return JsonResponse(kwargs)\n请求方式：http://192.168.33.10:8080/dashboard/articles/2004/12/21/\nurl参数-额外参数\nURLconfs 具有一个钩子，让你传递一个Python 字典作为额外的参数传递给视图函数django.conf.urls.url() 函数可以接收一个可选的第三个参数，它是一个字典，表示想要传递给视图函数的额外关键字参数\nurl：\nurl(r'users/(?P<name>[a-z]+)',views.users,{'extra_args':'hehehe'})\nview视图函数：\nfrom django.conf.urls import url\nfrom . import views\nurlpatterns = [\n    url(r'^blog/(?P<year>[0-9]{4})/$', views.year_archive, {'foo': 'bar'}),\n]\n请求地址：/blog/2005/\n调用函数：views.year_archive(request, year='2005',foo='bar')\nurl反向解析\ndjango给每个URL取了一个名字，存储每个URL与name的映射关系根据Django 视图的标识和将要传递给它的参数的值，获取与之关联的URL。这种方式叫做反向解析URL、反向URL匹配、反向URL查询或者简单的URL反查实例：\nurl:\nfrom django.conf.urls import url\nfrom . import views\nurlpatterns = [\n    url(r'^articles/([0-9]{4})/$', views.year_archive, name='news-year-archive'),\n]\n-----------------------\n视图函数\nfrom django.core.urlresolvers import reverse\n模板：\n<a href=\"{% url 'news-year-artive' yearvar%}\">{{ yaervar }}Archieve</a>\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}