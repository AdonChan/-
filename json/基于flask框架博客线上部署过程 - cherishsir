{"title": "基于flask框架博客线上部署过程 - cherishsir ", "index": "flask,python", "content": "1:为什么使用nginx作为反向代理\n接上篇：基于flask框架的博客线上部署过程---(1)\ngunicron虽然可以直接对公网提供http请求，但是功能上远没有nginx丰富，如http请求的过滤，针对不同请求头做不同业务的分发，内网多主机服务的负载均衡。这些都是nginx的优势，所以将nginx暴露在公网ip下，直接处理http请求是更为妥当的策略。\n2:云主机上nginx软件的安装\n#centos\nsudo yum install nginx\n\n#ubuntu\nsudo apt install nginx\n3:nginx的配置\n#centos上是对/etc/nginx/nginx.conf文件进行配置\n#需要改变的地方非常少，主要是server域下面的三个地方：（如下）\n# 1：listen 80  监听公网ip的80端口（记得打开centos和waf的端口防火墙）\n# 2：server_name 后面跟上自己购买的域名，如果没有，直接使用该机的public ip\n# 3: proxy_pass  后面跟上启动gunicorn时，-b参数绑定的地址（不要使用0.0.0.0,这样会将gunicorn的8080端口直接暴露在公网ip下）\nserver {\n    listen 80;\n    server_name example.org; # 这是HOST机器的外部域名，用地址也行\n\n    location / {\n        proxy_pass http://127.0.0.1:8080; # 这里是指向 gunicorn host 的服务地址\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n\n  }\n4:nginx和gunicorn的启动\n#centos\nsource /blogenv/bin/activate   \ncd 到 wsgi的目录\ngunicorn -w 4 -b 127.0.0.1:8080  wsgi:app\nsystemctl start nginx   #没报错就是正常的\n\n#ubuntu\nsource /blogenv/bin/activate   \ncd 到 wsgi的目录\ngunicorn -w 4 -b 127.0.0.1:8080  wsgi:app\nsudo service nginx restart  #没报错就是正常的\n\n#查看nginx是否正常运行\nps aux|grep ngix\n#通过wget or browser访问网站是否正常工作\n5:后续应该把开启gunicorn的服务添加到系统控制命令中\n#centos-systemctl\n\n#ubuntu-service\n6:请求响应的处理过程\n\n7:开源flask博客地址\nhttps://github.com/huangtao00...扫码加群一起学习交流Flask使用心得：\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}