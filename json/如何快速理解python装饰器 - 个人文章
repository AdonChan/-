{"title": "如何快速理解python装饰器 - 个人文章 ", "index": "python", "content": "快速理解\n\n装饰器，从名字可以大概看出，其作用可以概括为： 增强（扩展）函数功能。\n\n装饰器本质上就是： 以函数作为参数，能返回包含调用该参数函数及其他功能的新函数的一种函数。\n\n装饰器通过在需要被装饰的函数的定义前一行添加@decorator_name的方式使用\n\n举例说明\n源函数\ndef hello():\n    print(\"hello world!!!\")\n使用装饰器扩展hello()功能而不直接修改其定义\ndef log(func):\n    \"\"\"print function name before it's called\"\"\"\n    def wrapper(*args, **kw):  # 闭包，实现装饰器的基础\n        print('call %s():\\n' % func.__name__, end=\"    \")\n        return func(*args, **kw)  # 传递给wrapper的参数最后传递给了func\n    return wrapper\n\n@log\ndef hello():\n    print(\"hello world!!!\")\n\nhello()\n输出：\ncall hello():\n    hello world!!!\n\n将@log 放到hello()定义前一行，相当于执行以下过程\nhello = log(hello)  # 此调用的执行效果等效于  log.func = hello， hello = log.wrapper\n通过 @property 装饰器验证是否可以使用上述其等效方法替换正常修饰器的使用\nclass Student(object):\n    # @property  # 作用是把类方法转换成类属性\n    # def score(self):\n    #     return self._score\n\n    # 替换 @property的效果\n    def score(self):\n        return self._score\n    score = property(score)\n\n    @score.setter\n    def score(self, value):\n        if not isinstance(value, int):\n            raise ValueError('score must be an integer!')\n        if value < 0 or value > 100:\n            raise ValueError('score must between 0 ~ 100!')\n        self._score = value\n\na = Student()\na.score = 60\na.score\n输出：\n60\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "1"}