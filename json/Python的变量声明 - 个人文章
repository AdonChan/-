{"title": "Python的变量声明 - 个人文章 ", "index": "变量,python", "content": "Python 与大多数其它语言一样有局部变量和全局变量之分，但是它没有明显的变量声明。变量通过首次赋值产生，当超出作用范围时自动消亡。\n\nExample 1. 定义 myParams 变量\nif __name__ == \"__main__\":\nmyParams = {\"server\":\"mpilgrim\", \\\n\"database\":\"master\", \\\n\"uid\":\"sa\", \\\n\"pwd\":\"secret\" \\\n}\n首先注意缩进。 if 语句是代码块，需要像函数一样缩进。其次，变量的赋值是一条被分成了多行的命令，用反斜线 (“  ”) 作为续行符。上海python培训整理编辑，转载说明出处！\n1、书写多行命令当一条命令用续行符 (“  ”) 分割成多行时，后续的行可以以任何方式缩进，此时 Python 通常的严格的缩进规则无需遵守。如果您的 Python IDE 自由对后续行进行了缩进，您应该把它当成是缺省处理，除非您有特别的原因不这么做。\n严格地讲，在小括号，方括号或大括号中的表达式 (如定义一个  dictionary ) 可以用或者不用续行符 (“  ”) 分割成多行。甚至在不是必需的时候，我也喜欢使用续行符，因为我认为这样会让代码读起来更容易，但那只是风格问题。\n您从未声明过变量  myParams ，您只是给它赋了一个值。这点就像是VBScript 没有设置  option explicit 选项一样。幸运的是，与 VBScript 不同，Python 不允许您引用一个未被赋值的变量，试图这样做会引发一个异常。\n2、变量引用Example2. 引 用 未  赋 值 的变 量\n>>> x\nTraceback (innermost last):\nFile \"<interactive input>\", line 1, in ?\nNameError: There is no variable named 'x'\n>>> x = 1\n>>> x\n1\n迟早有一天您会为此而感谢 Python 。\n3、一次赋多值Python 中比较 “酷” 的一种编程简写是使用序列来一次给多个变量赋值。\nExample 3. 一次赋 多值\n>>> v = ('a', 'b', 'e')\n>>> (x, y, z) = v (1)\n>>> x\n'a'\n>>> y\n'b'\n>>> z\n'e'\n(1)  v 是一个三元素的 tuple，并且  (x, y, z) 是一个三变量的 tuple。将一个 tuple赋值给另一个 tuple，会按顺序将  v 的每个值赋值给每个变量。\n这种用法有许多种用途。我经常想要将一定范围的值赋给多个变量。在 C 语言中，可以使用  enum 类型，手工列出每个常量和其所对应的值，当值是连续的时候这一过程让人感到特别繁琐。而在 Python 中，您可以使用内置的  range函数和多变量赋值的方法来快速进行赋值。\nExample 4. 连 续值赋值\n>>> range(7) (1)\n[0, 1, 2, 3, 4, 5, 6]\n>>> (MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY) = range(7)\n(2)\n>>> MONDAY (3)\n0\n>>> TUESDAY\n1\n>>> SUNDAY\n6\n(1) 内置的  range 函数返回一个元素为整数的 list。这个函数的简化调用形式是接收一个上限值，然后返回一个初始值从 0 开始的 list，它依次递增，直到但不包含上限值。(如果您愿意，您可以传入其它的参数来指定一个非  0的初始值和非  1 的步长。也可以使用  print range.__doc__ 来了解更多的细节。)\n(2)  MONDAY 、 TUESDAY 、 WEDNESDAY 、 THURSDAY 、 FRIDAY 、 SATURDAY 和  SUNDAY 是我们定义的变量。(这个例子来自  calendar 模块。它是一个很有趣的打印日历的小模块，像 UNIX 的cal命令。这个calendar 模块定义了一星期中每天的整数常量表示。)\n(3) 现在每个变量都拥有了自己的值： MONDAY的值为0 ， TUESDAY的值为1 ，等等。\n您也可以使用多变量赋值来创建返回多个值的函数，只要返回一个包含所有值的 tuple 即可。调用者可以将其视为一个 tuple，或将值赋给独立的变量。许多标准的 Python 库都是这样做的，包括os模块。\n感谢阅读，欢迎评论，更多内容或及时获取支持请访问 上海python培训\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}