{"title": "Python3笔记：列表方法详解 - 洞香春 ", "index": "python,python3.x", "content": "1 使用[]或者list()创建列表\nuser = []\nuser = list()\n2 使用list() 可以将其他类型转换成列表\n# 将字符串转成列表\n>>> list('abcde')\n['a', 'b', 'c', 'd', 'e']\n\n# 将元祖转成列表\n>>> list(('a','b','c'))\n['a', 'b', 'c']\n3 使用[offset]获取元素 或 修改元素\n>>> users = ['a','b','c','d','e']\n# 可以使用整数来获取某个元素\n>>> users[0]\n'a'\n# 可以使用负整数来表示从尾部获取某个元素\n>>> users[-1]\n'e'\n\n# 数组越界会报错\n>>> users[100]\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nIndexError: list index out of range\n>>> users[-100]\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nIndexError: list index out of range\n\n# 修改某个元素\n>>> users[0] = 'wdd'\n>>> users\n['wdd', 'b', 'c', 'd', 'e']\n>>> \n4 列表切片与提取元素\n列表的切片或者提取之后仍然是一个列表形式如：list[start:end:step]\n>>> users\n['wdd', 'b', 'c', 'd', 'e']\n# 正常截取 注意这里并不会截取到users[2]\n>>> users[0:2]\n['wdd', 'b']\n# 也可从尾部截取\n>>> users[0:-2]\n['wdd', 'b', 'c']\n# 这样可以获取所有的元素\n>>> users[:]\n['wdd', 'b', 'c', 'd', 'e']\n# 也可以加上步长参数\n>>> users[0:4:2]\n['wdd', 'c']\n# 也可以通过这种方式去将列表取反\n>>> users[::-1]\n['e', 'd', 'c', 'b', 'wdd']\n\n# 注意切片时，偏移量可以越界，越界之后不会报错，仍然按照界限来处理 例如开始偏移量如果小于0，那么仍然会按照0去计算。\n>>> users\n['wdd', 'b', 'c', 'd', 'e']\n>>> users[-100:3]\n['wdd', 'b', 'c']\n>>> users[-100:100]\n['wdd', 'b', 'c', 'd', 'e']\n>>> \n\n5 使用append()添加元素至尾部\n形式如：list.append(item)\n>>> users\n['wdd', 'b', 'c', 'd', 'e']\n>>> users.append('ddw')\n>>> users\n['wdd', 'b', 'c', 'd', 'e', 'ddw']\n6 使用extend()或+=合并列表\n形式如：list1.extend(list2)这两个方法都会直接修改原列表\n>>> users\n['wdd', 'b', 'c', 'd', 'e', 'ddw']\n>>> names\n['heihei', 'haha']\n>>> users.extend(names)\n>>> users\n['wdd', 'b', 'c', 'd', 'e', 'ddw', 'heihei', 'haha']\n>>> users += names\n>>> users\n['wdd', 'b', 'c', 'd', 'e', 'ddw', 'heihei', 'haha', 'heihei', 'haha']\n7 使用insert()在指定位置插入元素\n形式如：list.insert(offset, item)insert也不存在越界的问题，偏移量正负都行，越界之后会自动伸缩到界限之内，并不会报错\n>>> users\n['wdd', 'b', 'c', 'd', 'e', 'ddw', 'heihei', 'haha', 'heihei', 'haha']\n>>> users.insert(0,'xiaoxiao')\n>>> users\n['xiaoxiao', 'wdd', 'b', 'c', 'd', 'e', 'ddw', 'heihei', 'haha', 'heihei', 'haha']\n>>> users.insert(-1,'-xiaoxiao')\n>>> users\n['xiaoxiao', 'wdd', 'b', 'c', 'd', 'e', 'ddw', 'heihei', 'haha', 'heihei', '-xiaoxiao', 'haha']\n# 下面-100肯定越界了\n>>> users.insert(-100,'-xiaoxiao')\n>>> users\n['-xiaoxiao', 'xiaoxiao', 'wdd', 'b', 'c', 'd', 'e', 'ddw', 'heihei', 'haha', 'heihei', '-xiaoxiao', 'haha']\n# 下面100也是越界了\n>>> users.insert(100,'-xiaoxiao')\n>>> users\n['-xiaoxiao', 'xiaoxiao', 'wdd', 'b', 'c', 'd', 'e', 'ddw', 'heihei', 'haha', 'heihei', '-xiaoxiao', 'haha', '-xiaoxiao']\n8 使用del删除某个元素\n形式如：del list[offset]del是python的语句，而不是列表的方法，del删除不存在的元素时，也会提示越界\n>>> users\n['-xiaoxiao', 'xiaoxiao', 'wdd', 'b', 'c', 'd', 'e', 'ddw', 'heihei', 'haha', 'heihei', '-xiaoxiao', 'haha', '-xiaoxiao']\n>>> del users[0]\n>>> users\n['xiaoxiao', 'wdd', 'b', 'c', 'd', 'e', 'ddw', 'heihei', 'haha', 'heihei', '-xiaoxiao', 'haha', '-xiaoxiao']\n>>> del users[100]\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nIndexError: list assignment index out of range\n>>> del users[-100]\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nIndexError: list assignment index out of range\n9 使用remove删除具有指定值的元素\n形式如：list.remove(value)\n>>> users\n['xiaoxiao', 'wdd', 'b', 'c', 'd', 'e', 'ddw', 'heihei', 'haha', 'heihei', '-xiaoxiao', 'haha', '-xiaoxiao']\n# 删除指定值'c'\n>>> users.remove('c')\n>>> users\n['xiaoxiao', 'wdd', 'b', 'd', 'e', 'ddw', 'heihei', 'haha', 'heihei', '-xiaoxiao', 'haha', '-xiaoxiao']\n# 删除不存在的值会报错\n>>> users.remove('alsdkfjalsdf')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: list.remove(x): x not in list\n# 如果该值存在多个，那么只能删除到第一个\n>>> users.remove('haha')\n>>> users\n['xiaoxiao', 'wdd', 'b', 'd', 'e', 'ddw', 'heihei', 'heihei', '-xiaoxiao', 'haha', '-xiaoxiao']\n10 使用pop()方式返回某个元素后，并在数组里删除它\n形式如：list.pop(offset=-1) 偏移量默认等于-1，也就是删除最后的元素\n>>> users\n['xiaoxiao', 'wdd', 'b', 'd', 'e', 'ddw', 'heihei', 'heihei', '-xiaoxiao', 'haha', '-xiaoxiao']\n# 删除最后的元素\n>>> users.pop()\n'-xiaoxiao'\n>>> users\n['xiaoxiao', 'wdd', 'b', 'd', 'e', 'ddw', 'heihei', 'heihei', '-xiaoxiao', 'haha']\n# 如果列表本身就是空的，那么pop时会报错\n>>> user.pop(0)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nIndexError: pop from empty list\n>>> users.pop(0)\n'xiaoxiao'\n>>> users\n['wdd', 'b', 'd', 'e', 'ddw', 'heihei', 'heihei', '-xiaoxiao', 'haha']\n# 越界时也会报错\n>>> users.pop(100)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nIndexError: pop index out of range\n11 使用index()查询具有特定值的元素位置\n形式如：list.index(value)\n# index只会返回第一遇到该值得位置\n>>> users\n['wdd', 'b', 'd', 'e', 'ddw', 'heihei', 'heihei', '-xiaoxiao', 'haha']\n>>> users.index('heihei')\n5\n\n# 如果该值不存在，也会报错\n>>> users.index('laksdf')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: 'laksdf' is not in list\n12 使用in判断值是否存在列表\n形式如：value in list\n>>> users\n['wdd', 'b', 'd', 'e', 'ddw', 'heihei', 'heihei', '-xiaoxiao', 'haha']\n>>> 'wdd' in users\nTrue\n13 使用count()记录特定值出现的次数\n形式如：list.count(value)\n>>> users\n['wdd', 'b', 'd', 'e', 'ddw', 'heihei', 'heihei', '-xiaoxiao', 'haha']\n>>> users.count('heihei')\n2\n>>> users.count('h')\n0\n14 使用join()将列表转为字符串\n形式如：string.join(list)\n>>> users\n['wdd', 'b', 'd', 'e', 'ddw', 'heihei', 'heihei', '-xiaoxiao', 'haha']\n>>> ','.join(users)\n'wdd,b,d,e,ddw,heihei,heihei,-xiaoxiao,haha'\n>>> user\n[]\n>>> ','.join(user)\n''\n15 使用sort()重新排列列表元素\n形式如：list.sort()\n>>> users\n['wdd', 'b', 'd', 'e', 'ddw', 'heihei', 'heihei', '-xiaoxiao', 'haha']\n# 默认是升序排序\n>>> users.sort()\n>>> users\n['-xiaoxiao', 'b', 'd', 'ddw', 'e', 'haha', 'heihei', 'heihei', 'wdd']\n# 加入reverse=True, 可以降序排序\n>>> users.sort(reverse=True)\n>>> users\n['wdd', 'heihei', 'heihei', 'haha', 'e', 'ddw', 'd', 'b', '-xiaoxiao']\n\n# 通过匿名函数，传入函数进行自定义排序\n>>> students\n[{'name': 'wdd', 'age': 343}, {'name': 'ddw', 'age': 43}, {'name': 'jik', 'age': 90}]\n>>> students.sort(key=lambda item: item['age'])\n>>> students\n[{'name': 'ddw', 'age': 43}, {'name': 'jik', 'age': 90}, {'name': 'wdd', 'age': 343}]\n>>> students.sort(key=lambda item: item['age'], reverse=True)\n>>> students\n[{'name': 'wdd', 'age': 343}, {'name': 'jik', 'age': 90}, {'name': 'ddw', 'age': 43}]\n>>> \n\n16 使用reverse()将列表翻转\n形式如：list.reverse()\n>>> users\n['wdd', 'heihei', 'heihei', 'haha', 'e', 'ddw', 'd', 'b', '-xiaoxiao']\n>>> users.reverse()\n>>> users\n['-xiaoxiao', 'b', 'd', 'ddw', 'e', 'haha', 'heihei', 'heihei', 'wdd']\n17 使用copy()复制列表\n形式如：list2 = list1.copy()list2 = list1 这种并不是列表的复制，只是给列表起了别名。实际上还是指向同一个值。\n>>> users\n['-xiaoxiao', 'b', 'd', 'ddw', 'e', 'haha', 'heihei', 'heihei', 'wdd']\n>>> users2 = users.copy()\n>>> users2\n['-xiaoxiao', 'b', 'd', 'ddw', 'e', 'haha', 'heihei', 'heihei', 'wdd']\n>>> \n\n18 使用clear()清空列表\n形式如： list.clear()\n>>> users2\n['-xiaoxiao', 'b', 'd', 'ddw', 'e', 'haha', 'heihei', 'heihei', 'wdd']\n>>> users2.clear()\n>>> users2\n[]\n19 使用len()获取列表长度\n形式如：len(list)\n>>> users\n['-xiaoxiao', 'b', 'd', 'ddw', 'e', 'haha', 'heihei', 'heihei', 'wdd']\n>>> len(users)\n9\n20 关于列表越界的深入思考\n写了这些方法后，我有一些疑问，为什么有些操作会提示越界，有些则不会呢？\n会提示偏移量越界的操作有\n\nlist[offset] 读取或者修改某个元素\ndel list[offset] 删除指定位置的元素\nlist.remove(value) 删除指定值的元素\nlist.pop(offset) 删除指定位置的元素\n\n如果偏移量越界，这些方法会报错的。我的个人理解是:假如我想读取偏移量为10的元素，但是该元素并不存在，如果系统自动给你读取了列表的最后一个元素，而且不报错，这是无法容忍的bug。 如果我想删除第10个元素，但是第10个元素并不存在，而系统帮你删除了列表的最后一个元素，我觉得这也是无法容忍的。\n所以在使用这些方法时，务必确认该偏移量的元素是否存，否则可能会报错。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "2"}