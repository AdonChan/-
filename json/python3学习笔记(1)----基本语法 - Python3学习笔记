{"title": "python3学习笔记(1)----基本语法 - Python3学习笔记 ", "index": "python", "content": "一、python3的基本语法\n1、缩进统一（1个tab或者4个空格）。\nfor i in range(10):\n    print (i)\n        \n\n2、标识符的第一个字母必须是字母（大小写字母）或者下划线，其他部分可以有字母和下划线和数字组成。3、标识符名称对大小写敏感，例如myname和myName是不一样的。4、python的注释：单行语句用#注释、也可以用三个单引号或者三个双引号、'''要注释的内容'''、\"\"\"要注释的内容\"\"\"。5、多行语句：Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠()来实现多行语句，例如：\ntotal = item_one + \\\n    item_two + \\\n    item_three\n在 [], {}, 或 () 中的多行语句，不需要使用反斜杠()，例如：\ntotal = ['item_one', 'item_two', 'item_three',\n    'item_four', 'item_five']\n\n\n二、python的变量和基本数据类型\n1、变量1.1在Python程序中，变量是用一个变量名表示，变量名必须是大小写英文、数字和下划线（_）的组合，且不能用数字开头\na = 1  # 变量a是一个整数\nt_007 = 'T007'  # 变量t_007是一个字符串\n\n在Python中，等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量。\na = 123    # a是整数\nprint (a)\na = 'imooc'   # a变为字符串\nprint (a)\n这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言（像java中变量必须首先指定数据类型）。\n2、python3中的数据类型python3中有6个标准类型：\nNumber（数字）String（字符串）List（列表）Tuple（元组）Sets（集合）Dictionary（字典）\n2.1----Number（数字）int、float、bool、complex（复数）在python3中，只有一种整数类型int，表示长整型。bool (布尔)：如 true。float (浮点数), 如 1.23、3E-2complex (复数), 如 1 + 2j、 1.1 + 2.2j\n2.2----String（字符串）\n（1）python中单引号和双引号使用完全相同。（2）使用三引号('''或\"\"\")可以指定一个多行字符串。（3）转义符 ''（4）反斜杠可以用来转义，使用r可以让反斜杠不发生转义。。 如 r\"this is a line with n\" 则n会显示，并不是换行。（5）按字面意义级联字符串，如\"this \" \"is \" \"string\"会被自动转换为this is string。（6）字符串可以用 + 运算符连接在一起，用 * 运算符重复。（7）Python 中的字符串有两种索引方式，从左往右以 0 开始，从右往左以 -1 开始。（8）Python中的字符串不能改变。（9）Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。（10）字符串的截取的语法格式如下：变量[头下标:尾下标]\nword = '字符串'\nsentence = \"这是一个句子。\"\nparagraph = \"\"\"这是一个段落，\n可以由多行组成\"\"\"\n实例：\n#!/usr/bin/python3\n\nstr='Runoob'\n\nprint(str)                 # 输出字符串\nprint(str[0:-1])           # 输出第一个到倒数第二个的所有字符\nprint(str[0])              # 输出字符串第一个字符\nprint(str[2:5])            # 输出从第三个开始到第五个的字符\nprint(str[2:])             # 输出从第三个开始的后的所有字符\nprint(str * 2)             # 输出字符串两次\nprint(str + '你好')        # 连接字符串\n\nprint('------------------------------')\n\nprint('hello\\nrunoob')      # 使用反斜杠(\\)+n转义特殊字符\nprint(r'hello\\nrunoob')     # 在字符串前面添加一个 r，表示原始字符串，不会发生转义\n\n三、空行\n函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。记住：空行也是程序代码的一部分。\n四、等待用户输入\n执行下面的程序在按回车键后就会等待用户输入：\n#!/usr/bin/python3\n\ninput(\"\\n\\n按下 enter 键后退出。\")\n以上代码中 ，\"nn\"在结果输出前会输出两个新的空行。一旦用户按下 enter 键时，程序将退出。\n五、同行写多条语句\nPython可以在同一行中使用多条语句，语句之间使用分号(;)分割，以下是一个简单的实例：\n#!/usr/bin/python3\n\nimport sys; x = 'runoob'; sys.stdout.write(x + '\\n')\n执行以上代码，输出结果为：\nrunoob\n7\n六、多个语句构成代码组\n缩进相同的一组语句构成一个代码块，我们称之代码组。像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。我们将首行及后面的代码组称为一个子句(clause)。如下实例：\nif expression : \n   suite\nelif expression : \n   suite \nelse : \n   suite\n七、Print 输出\nprint 默认输出是换行的，如果要实现不换行需要在变量末尾加上 end=\"\"：\n#!/usr/bin/python3\n\nx=\"a\"\ny=\"b\"\n# 换行输出\nprint( x )\nprint( y )\n\nprint('---------')\n# 不换行输出\nprint( x, end=\" \" )\nprint( y, end=\" \" )\nprint()\n以上实例执行结果为：\na\nb\n--------\na b\n八、import 与 from...import\n在 python 用 import 或者 from...import 来导入相应的模块。将整个模块(somemodule)导入，格式为： import somemodule从某个模块中导入某个函数,格式为： from somemodule import somefunction从某个模块中导入多个函数,格式为： from somemodule import firstfunc, secondfunc, thirdfunc将某个模块中的全部函数导入，格式为： from somemodule import *\nimport sys\nprint('================Python import mode==========================');\nprint ('命令行参数为:')\nfor i in sys.argv:\nprint (i)\nprint ('\\n python 路径为',sys.path)\n\nfrom sys import argv,path  #  导入特定的成员\n\nprint('================python from import===================================')\nprint('path:',path) # 因为已经导入path成员，所以此处引用时不需要加sys.path\n九、命令行参数\n很多程序可以执行一些操作来查看一些基本信息，Python可以使用-h参数查看各参数帮助信息：\n$ python -h\nusage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...\nOptions and arguments (and corresponding environment variables):\n-c cmd : program passed in as string (terminates option list)\n-d     : debug output from parser (also PYTHONDEBUG=x)\n-E     : ignore environment variables (such as PYTHONPATH)\n-h     : print this help message and exit\n\n[ etc. ]\n\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}