{"title": "LeetCode 3——无重复字符的最长子串 - 数据结构和算法 ", "index": "c++,python", "content": "1. 题目\n\n2. 解答\n2.1. 方法一\n我们从前往后遍历字符串，start 代表最长子串的起始位置，一开始设置为零。\n如果没有遇到重复字符，则更新子串的长度，向后遍历。\n如果遇到重复字符时，则更新字符串起始位置为上一个相同字符的后面一个位置，同时更新子串长度。\n重复上面这个过程，直到遍历完毕。\n'abcabc'，start = 0，str_len = 1, 2, 3此时第二次遇到 'a'，start = 1，str_len = 3此时第二次遇到 'b'，start = 2，str_len = 3此时第二次遇到 'c'，start = 3，str_len = 3\nclass Solution:\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n\n        max_len = 0\n        str_len = 0\n        start = 0      # 最长子串的起始位置\n        index = 0     # 上一个相同字符在子串中的位置，是一个相对位置，不是在原字符串中的位置\n        \n        for i in range(len(s)):\n            \n            if (s[i] not in s[start:i]):\n                str_len += 1\n               \n            # 如果遇到重复字符，更新子串的起始位置为上一个相同字符的后面一个位置\n            # 同时我们需要更新子串长度\n            else:\n                max_len = max(max_len, str_len)\n                index = s[start:i].find(s[i])\n                str_len = str_len - index\n                start = start + index + 1 \n                \n        max_len = max(max_len, str_len) # 一直没有遇到重复字符\n        return max_len\n2.2. 方法二\n方法一中，我们每次判断当前字符是否为重复字符时，都需要在子串中进行搜索，更新子串起始位置时，也要在子串中搜索上一个相同字符的位置，效率很低。\n其实我们需要知道的就是一个子串的起始位置，然后往后遍历的时候只需要在适当的时候更新这个起始位置重新计算子串长度即可。\n因此，我们可以建立一个当前字符和当前字符下一个位置的映射。\n所有映射全部初始化为零，start = 0。从前往后开始遍历字符串，同时更新映射，计算子串长度。\n如果当前字符的映射大于 start，说明在 satrt 后面出现过当前字符，就更新 start。\nclass Solution:\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        max_len = 0\n        str_len = 0\n        start = 0    # 最长子串的起始位置\n        index = 0   # 重复的字符在子串中的位置\n        \n        # 初始化映射\n        table = []\n        for i in range(128):\n            table.append(0)\n                \n        for i in range(len(s)):\n            \n            start =  max(start, table[ord(s[i])])\n\n            str_len = i - start + 1    \n            max_len = max(max_len, str_len)\n            \n            table[ord(s[i])] = i + 1\n            \n        return max_len\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        \n        int table[128] = {0}; // 自动初始化为零\n        int max_len = 0;\n        int str_len = 0;\n        int start = 0;\n        \n        string::iterator it = s.begin();\n            \n        for (int j = 0; it != s.end(); it++, j++)\n        {\n            start = start > table[*it] ? start : table[*it];\n            table[*it] = j + 1;\n            str_len = j - start + 1;\n            max_len = max_len < str_len ? str_len : max_len;\n        }\n        \n        return max_len;\n    }\n};\n获取更多精彩，请关注「seniusen」! \n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}