{"title": "python奇遇记：数据结构窥探3 - 码上就来 ", "index": "python", "content": "这次主要说说字典和集合这两种数据类型。\n字典和集合都是基于散列表实现的，散列表也就是hash表，了解过数据结构的应该知道。与散列表相关的一个概念叫做可散列，什么是可散列？在python官方定义中是这样说的：如果一个对象是可散列的，那么在这个对象的生命周期中，它的散列值是不变的，而且这个对象需要实现__hash__()方法。\npython中，原子不可变类型(str、bytes和数值类型)都是可散列类型，同时所有的不可变类型也是可散列的。\n集合\n什么是集合？在数学中指的是具有某种特定性质的事物的总体，在python中集合指许多唯一对象的聚集。注意这个唯一，也就是说集合中不允许重复值出现，所以集合可以用来去重。\n在python中，用大括号括起来表示一个集合。\ndata = [11, 11, 2, 3, 4, 4, 5, 4, 6]\nset(data)\n{2, 3, 4, 5, 6, 11}\n\n\n\n将列表类型的data转换为集合类型后，重复值被去掉了。\n在数学中，集合可以求并集、交集、差集等，python也可以做同样的事。比如：\ndata1 = {1, 2, 3, 4, 5}\ndata2 = {3, 4, 5, 6, 7}\n# 交集\nprint(data1 & data2)\n# 差集\nprint(data1 - data2)\n# 并集\nprint(data1 | data2)\n{3, 4, 5}\n{1, 2}\n{1, 2, 3, 4, 5, 6, 7}\n\n\n上面说过，集合类型用大括号表示，如果我需要创建一个空集合，是不是用{ }表示就行了？问题来了，空集合用{ }表示，空字典也用{ }表示，这肯定不行。python中，创建一个空集合使用set()生成，{  }只会创建一个空的字典。\n还有一个要提到的是集合推导。和列表推导、字典推导类似，这里就不讲了。\n字典\n字典中有几个方法需要说一下，看个例子。\na = {'x': 1, 'y': 2, 'z': 3}\n\n# a.keys()返回所有键的集合,a.items()返回键值对集合，a.values返回值集合\n# 可对字典进行集合运算，比较大小等运算\nb = {'w' : 10,'x' : 11,'y' : 2}\n# 直接进行集合操作，a.values()不可以\nprint(a.keys() & b.keys())\nprint(a.items() & b.items())\nprint(a.keys() - b.keys())\n{'x', 'y'}\n{('y', 2)}\n{'z'}\n\n\n在字典中，可以使用a.keys()返回所有键的集合,a.items()返回键值对集合，a.values返回值集合，既然返回的是集合，就可以使用上面集合中说到的运算，大大简化操作。\n在查找字典中的某个键时，如果键不存在就会报错，影响程序运行，为了避免不必要的麻烦，我们可以使用d.get(k, default)，给找不到的键一个默认值。使用get的问题是，它不太符合python的哲学，d[k]比d.get(k)更加直观和简洁。\n其实我们还可以这样，使用setdefault（k, default）来指定一个默认值，这个方法比get方法更高效，但是我们需要指定特殊的键。而使用另一种办法defaultdict（），任何键在找不到的情况下都会用defaultdict（）中的值（数据类型比如list、str）替换。\nd = {1: 'a', 2: 'b', 3: 'c'}\nd.get(4, 'd')\n\nimport collections\nfrom collections import defaultdict\n\nd.setdefault(4, 'd')\nd[4]\n# 如果查询5找不到，还要指定默认值\n\n# 找不到的话用空字符串替换\nd = defaultdict(str)\n\nd[5]\n''\n\n\n\n第二个要说的是OrderedDict，它可以保持字典中的顺序，插入时是什么样就是什么样，不会改变。在设计API时就可以使用OrderDict创建你的数据接口。\n怎么合并两个或者多个字典？使用ChainMap，接受字典作为参数，如果参数中某个键重复了，ChainMap会返回第一个字典中的值，这个方法也是放在collections模块下。\na = {'x': 1, 'z': 3 }\nb = {'y': 2, 'z': 4 }\n\nfrom collections import ChainMap\nc = ChainMap(a,b)\nprint(c['x'])\nprint(c['y'])\n# 只会返回第一个参数a中的z\nprint(c['z'])\n1\n2\n3\n\n\n\n\n本人才疏学浅，上文中难免有些错误，还请各位品评指正。如果觉得写的还行，欢迎关注我的公众号MLGroup,带你走进机器学习的世界。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "2"}