{"title": "Python进程专题2：multiprocessing创建进程 - python3 ：公司内部培训专栏 ", "index": "python", "content": "上一篇文章：Python进程专题1：fork():创建子进程、getpid()、getppid()下一篇文章：Python进程专题3：继承Process来创建进程\n\n由于fork()无法对Windows使用，而python是跨平台的，显然需要一个新的跨平台替代品来代替它，那就是multiprocessing模块。\nmultiprocessing模块中使用Process类来代表进程。\n语法：Process([group,target,name,args,kwargs])\ngroup:至今还未使用，值始终为None\ntarget：进程实例所调用的对象，一般表示子进程要调用的函数。\nargs：表示调用对象的参数，一般是函数的参数\nkwargs：表示调用对象的关键字参数字典。\nname：当前进程实例的别名\nProcess类常用方法：\np.is_alive():判断进程是否还在运行。如果还在运行，返回true，否则返回false\np.join([timeout]):等待进程实例执行完毕，或等待多少秒\np.run():默认会调用target指定的对象，如果没有给定target参数，对该进程对象调用start()方法时，就会执行对象中的run()方法\np.start():启动进程实例(创建子进程）,病运行子进城的run方法\np.terminate():不管任务是否完成，立即终止,同时不会进行任何的清理工作，如果进程p创建了它自己的子进程，这些进程就会\n变成僵尸进程，使用时特别注意，如果p保存了一个锁或者参与了进程间通信，那么使用该方法终止它可能会导致死锁或者I/O损坏。\nProcess类常用属性：\np.daemon：布尔值，指示进程是否是后台进程。当创建它的进程终止时，后台进程会自动终止。并且，后台进程无法创建自己的新进城。\n注意：p.daemon的值必须在p.start方法调用前设置。\np.exitcode：进程的整数退出指令。如果进程仍然在运行，它的值为None，如果值为负数：—N，就表示进程由信号N所终止。\np.name：当前进程实例别名，默认为Process-N，N为从1开始递增的整数。\np.pid：当前进程实例的PID\n实例1：理解单独创建进程的相关函数\n#该实例是用来理解单独创建进程的实例\nfrom multiprocessing import Process\nimport os,time\n\n#将要在子进程中运行的方法\ndef test(name,interval):\n    for i in range(interval):\n        print(\"子进程运行中，name=%s，pid=%d，父进程：%d\"%(name,os.getpid(),os.getppid()))\n        time.sleep(interval)\n\nif __name__==\"__main__\":\n    print(\"父进程%d\"%os.getpid())\n    #创建进程实例，第一个参数传要在子线程执行的函数，第二个参数传函数需要的参数\n    p=Process(target=test,args=('mark',2))\n    print(\"子进程要执行了\")\n    #启动进程\n    p.start()\n    p.join()#等待子进程运行结束再继续执行下面语句\n    print(\"子进程结束了\")\n\n结果：\n父进程17756\n子进程要执行了\n子进程运行中，name=mark，pid=17758，父进程：17756\n子进程运行中，name=mark，pid=17758，父进程：17756\n子进程结束了\n实例2：两个进程同时运行\nfrom multiprocessing import Process\nimport os\nimport time\n\ndef test1(interval):\n    print(\"test1子进程运行中，pid=%d，父进程：%d\"%(os.getpid(),os.getppid()))\n    t_start=time.time()\n    time.sleep(interval)\n    t_end=time.time()\n    print(\"test1执行时间：%0.2f秒\"%(t_end-t_start))\n\n\ndef test2(interval):\n    print(\"test2子进程运行中，pid=%d，父进程：%d\"%(os.getpid(),os.getppid()))\n    t_start=time.time()\n    time.sleep(interval)\n    t_end=time.time()\n    print(\"test2执行时间：%0.2f秒\"%(t_end-t_start))\n\nif __name__==\"__main__\":\n    print(\"父进程%d\"%os.getpid())\n    #创建进程实例，第一个参数传要在子线程执行的函数，第二个参数传函数需要的参数\n    p1=Process(target=test1,args=(1,))\n    p2=Process(target=test2,name=\"mark1\",args=(2,))\n    #启动进程\n    p1.start()\n    p2.start()\n\n    print(\"p2是否在运行：\",p2.is_alive())\n\n    p2.join()#等待子进程运行结束再继续执行下面语句\n    print(\"p2是否在运行：\", p2.is_alive())\n\n结果：\n父进程15080\np2是否在运行： True\ntest1子进程运行中，pid=15081，父进程：15080\ntest2子进程运行中，pid=15082，父进程：15080\ntest1执行时间：1.00秒\ntest2执行时间：2.00秒\np2是否在运行： False\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}