{"title": "leetcode-93-Restore IP Addresses - 个人文章 ", "index": "python", "content": "题目描述：Given a string containing only digits, restore it by returning all possible valid IP address combinations.\nExample:\n\nInput: \"25525511135\"\nOutput: [\"255.255.11.135\", \"255.255.111.35\"]\n\n题目理解：\n 将一段字符str广度搜索截取，分别有n种组合形式，添加限制条件，过滤掉不适合的组合元素。 长度，大小，首字母\n应用：如果进行字符串的子元素组合穷举，可以应用。\n  所有的for循环，利用到前一个状态，都可以理解为动态规划的一种分支\n\n\n\n\n\n\nimport copy\nclass Solution:\n    def restoreIpAddresses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        lens=[1,2,3]\n        combinations_all=[]\n        combinations_return=[]\n        def bfs(len_cur,s_cur,combinations_in):\n            for len_iter in lens:\n                combinations_in_copied=copy.deepcopy(combinations_in)\n                len_left_over=len_cur-len_iter\n                id_cur=s_cur[:len_iter]\n                if id_cur and int(id_cur)>255:\n                    return\n                # print(id_cur)\n                # combinations_in.append(id_cur)\n                combinations_in_copied.append(id_cur)\n                if len(combinations_in_copied)<=4:\n                    if len_left_over == 0 and len(combinations_in_copied)==4:\n                        combinations_in_copied=list(filter(lambda x:not (len(x)>1 and x.startswith('0')),combinations_in_copied))\n                        if len(combinations_in_copied)==4:\n                            # print('combinations_in_copied==>',combinations_in_copied)\n                            combinations_in_copied=[str(elem_iter) for elem_iter in combinations_in_copied]\n                            elem='.'.join(combinations_in_copied)\n                            combinations_return.append(elem)\n                        # combinations_all.append(combinations_in_copied)\n                        return\n                    elif len_left_over<0:\n                        return\n                    else:\n                        bfs(len_left_over,s_cur[len_iter:],combinations_in_copied)\n                else:\n                    return\n        bfs(len(s),s,combinations_all)\n        # print(combinations_return)\n        return combinations_return\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}