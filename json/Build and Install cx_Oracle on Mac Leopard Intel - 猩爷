{"title": "Build and Install cx_Oracle on Mac Leopard Intel - 猩爷 ", "index": "python,oracle,cx_oracle,macos", "content": "http://www.cs.utexas.edu/~mitra/csSpring2011/cs327/cx_mac.html\n\nBuild and Install cx_Oracle on Mac Leopard Intel\n\nI finally succeeded in building and installing cx_Oracle on a Mac. I will outline the steps that I took. There are many redundant steps that I may later take out. But there are checks that I made on the way that really helped.\n\nThe first Mac that I installed cx_Oracle was a 2.4 GHz Intel Core 2 Duo running Mac OSX 10.6.6. It had 4 GB of Memory. Most of my work was done on a terminal window.\n\nCheck Python Installation\n\nThe OSX comes with a Python interpreter. I ran a check to find the version number.\n\n$ python -V\nPython 2.6.1\nThis was sufficient for my needs. I decided not to upgrade to Python version 2.7.1\nXcode from Apple\n\nThe Xcode package is available from Apple Developer. You will need a login account but that is free. Now you do not need Xcode 4. Xcode 3 is sufficient because all we are interested in is the gcc compiler. After you login look for a link that says Looking for Xcode 3? I downloaded X code 3.2.6 and iOS SDK 4.3. It was 4.1 GB in size and is best done when you know you will not be using your Mac.\n\nAfter the download, the installation went off smoothly. I restarted the Mac and on a terminal window checked that the gcc compiler was installed correctly.\n\n$ which gcc\n/usr/bin/gcc\n\n$ gcc -v\ngcc version 4.2.1\nYou can also do man gcc to get the online manual for gcc.\nInstall Oracle Instant Client\n\nThe cx_Oracle has a dependency. It needs Oracle Instant Client from Oracle. Click on the link Instant Client for Mac OS X (Intel x86). Accept the license agreement and download Version 10.2.0.4 (64-bit). I tried the 32-bit and it does NOT work. You will need your Oracle account to download the following packages:\n\ninstantclient-basic-10.2.0.4.0-macosx-x64.zip\ninstantclient-sdk-10.2.0.4.0-macosx-x64.zip\nI created a directory called oracle to unpack the packages. The pathname on my machine was /Users/utcs/oracle. On your machine, it will be your user name instead of utcs. I moved both the basic and sdk packages into the oracle directory and unzipped them. After unzipping the basic package I got a folder instantclient_10_2.\n\nAfter unzipping the sdk package, I got a folder called instantclient_10_2-1. Inside that folder was another folder called sdk. I moved the folder named sdk inside the folder instantclient_10_2.\n\nFrom a terminal window I changed directory to sdk. On my machine, the full path name was /Users/utcs/oracle/instantclient_10_2/sdk. There is another .zip file called ottclasses.zip. I unzipped that as follows:\n\n$ unzip ottclasses.zip\nIt produced a folder called oracle. I changed directory to /Users/utcs/oracle/instantclient_10_2. I ran the following command to copy all the files in the sdk folder.\n$ cp -R ./sdk/* .\n$ cp -R ./sdk/include/* .\nThe last two commands may not have been necessary. But it makes it easier to locate the header files.\nSetting up the Environment Variables\n\nIn my home directory /Users/utcs I created a .profile file. Its content was as follows:\n\nexport ORACLE_HOME=/Users/utcs/oracle/instantclient_10_2\nexport DYLD_LIBRARY_PATH=$ORACLE_HOME\nexport LD_LIBRARY_PATH=$ORACLE_HOME\nRestart the machine. Open another terminal window and run the following commands to check that the environment variables have been set properly:\n$ source .profile\n$ echo $ORACLE_HOME\n$ echo $DYLD_LIBRARY_PATH\n$ echo $LD_LIBRARY_PATH\nYou should see the path names printed out correctly. I created two symbolic links in the $ORACLE_HOME directory (/Users/utcs/oracle/instantclient_10_2) as follows:\nln -s libclntsh.dylib.10.1 libclntsh.dylib\nln -s libocci.dylib.10.1 libocci.dylib\nIf you run the command ls -l in that directory you should see the symbolic links.\nBuilding and Installing cx_Oracle\n\nDownload from SourceForge cx_Oracle version 5.0.4. You need to get the package that says Source Code only. In your Download folder you will find cx_Oracle-5.0.4.tar. I moved it to /Users/utcs/oracle. To untar, I used the following command:\n\ntar -xvf cx_Oracle-5.0.4.tar\nAfter untarring I had a subdirectory called cx_Oracle-5.0.4. In a terminal window I changed directory to /Users/utcs/oracle/cx_Oracle-5.0.4. I checked in that window that all the environment variables were set properly by doing\n\necho $ORACLE_HOME\necho $LD_LIBRARY_PATH\necho $DYLD_LIBRARY_PATH\nwhich python\nwhich gcc\nI did not have administrative privileges on this Mac so to build I did\npython setup.py build\nI checked to output. There were many warning messages that I ignored. Even a single error message would have indicated that the build process did not succeed. I next installed cx_Oracle by\npython setup.py install\nThe install also finished without any error messages.\nTest the cx_Oracle installation\n\nOn a terminal window type python. It should bring up Python in interactive mode. Then type import cx_Oracle. It should add the package to your path without any errors. Get out of the interactive mode using Control-D.\n\nNow copy and paste this script into a file called Check.py. Change the user name and run it on the command line.\n\nimport cx_Oracle, string, getpass\n\ndef main():\n  # Get password\n  pswd = getpass.getpass()\n\n# Build connection string\n  user = \"CS327_jdoe\"\n  host = \"oracle.microlab.cs.utexas.edu\"\n  port = \"1521\"\n  sid = \"orcl\"\n  dsn = cx_Oracle.makedsn (host, port, sid)\n\n# Connect to Oracle and test\n  con = cx_Oracle.connect (user, pswd, dsn)\n  if (con):\n    print \"Connection successful\"\n    print con.version\n  else:\n    print \"Connection not successful\"\n\ncon.close()\n\nmain()\nYou should see Connection successful if all the other tests were successful.\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}