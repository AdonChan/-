{"title": "[原]打造数据产品的快速原型：Django的Docker之旅 - FinanceR ", "index": "django,python,docker", "content": "\n概述\n在数据科学研究中，快速验证想法是非常关键的一环，而如何快速开发出数据产品则可以有效推动整个数据科学项目研究成果在生产环境中的应用速度。\n而大多数数据科学研究的场景下，更快的速度也意味着更早地发现问题和完成检验假设的闭环。\n本文将介绍如何通过Docker+Django技术打造数据产品的快速原型，并通过实战案例进行演示。\n\n为什么使用Django\n最初起源于美国芝加哥Python用户组的Django框架，使得Python的使用者不必写大量的css、js就可以快速数据管理系统的开发，且Django集成了模板系统、ORM、数据迁移版本控制、模糊搜索、过滤器、用户鉴权等特性，同时Django提供了松耦合的设计，并且内置了国际化支持和后台管理界面等实用功能。Django 使得非传统程序员的数据科学家不必依赖于前端、后端工程师就可以自己依照业务完成一些简单的数据管理工作，快速验证想法的可靠性。\n给样本打标签是机器学习中非常常见的一项工作，通过Django打造数据产品的快速原型，可以极大方便我们给样本打标签的过程，为机器学习的冷启动争取到更多时间。\n\n为什么使用Docker\n参考前文 容器定义应用：数据科学的容器革命，随着容器化技术的兴起，数据科学现在最大的一场运动已经不是由一个新的算法或者统计方法发起的了，而是来自Docker的容器化技术。通常，数据科学被认为研究成果立即应用到生产环境都是比较缓慢的一个过程。利用容器技术将加速数据科学在生产环境中的实际应用。\n由于Docker的标准交付特性使得 Django 应用在运维、部署、交付时都是标准化的，这就使得研究成果可以快速标准化地分享，通过docker-compose我们还可以很容易地管理单机容器集群的编排。\n此外，通常，数据科学团队都是一个5人以内的小团队，从研发序列到生产运维的一条龙输出使得团队成员在技能树异构的情况下必须尽量掌握全栈能力，因为技能树或者专业背景的异构将使得整体分析视野更加开阔，类似于多个弱分类器的模型融合对分类器整体会有提升作用。\n数据科学的小团队可以理解为一个小型的分布式系统，由一个 Team Leader 作为 Master，其余成员作为 Worker，为了保证容错性，在Master或者Worker的其中一个节点挂掉时，其他节点必须具备替代其他节点成为Master的能力。\n准备\n根据DockerCon2016的最新消息，我们已经可以在Mac、Windows、Linux同时部署原生的docker容器，而不需要再借助于虚拟机。\n所以，本次案例将采用 Mac 作为实验环境，并采用最新的 docker native。\n实战\n步骤一：安装Docker\n\n下载软件\n打开安装包后根据提示完成安装即可。\n步骤二：部署Django\n考虑到国内的实际情况，这里采用了时速云提供带有国内apt-get源的Ubuntu镜像作为基础镜像，在此基础上更新pip源后进行后续开发，这样就保证了整个软件更新时的速度不会受到限制。安装ubuntu OS\ndocker pull index.tenxcloud.com/tenxcloud/docker-ubuntu\n生成容器\ndocker run -d -p 8000:8000 -v /home:/home --name django index.tenxcloud.com/tenxcloud/docker-ubuntu\n进入容器\ndocker exec -it django bash\n安装pip\nsudo apt-get install python-pip \nmkdir ~/.pip\necho \"[global]\\n\ntimeout = 60\\n\nindex-url = http://pypi.douban.com/simple\\n\" > ~/.pip.conf\n安装 django\npip install django\n步骤三：初始化项目和应用\n创建项目工作目录\ndjango-admin startproject FinanceR\n初始化应用\ndjango-admin startapp RiskManagement\n步骤四：初始化数据模型\n修改数据模型\nvi RiskManagement/models.py\n# -*- coding: UTF-8 -*-\n\nfrom django.db import models\nimport uuid\n\nSIZES = (\n('0','大盘股' ),\n('1','中小盘股' ),\n)\n\nMARKETS = (\n('0','沪深'),\n('1','港股'),\n('2','美股'),\n('3','其他'),\n)\n\nLABELS = (\n('0','未知'),\n('1','看空'),\n('2','看多'),\n)\n\nSTATUS = (\n('0','盈利'),\n('1','亏损'),\n('2','持平'),\n('3','停牌'),\n('4','关闭'),\n)\n\nclass portfolio(models.Model):\n    portfolio_id =  models.UUIDField(verbose_name=\"组合ID\",primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(max_length = 255,verbose_name=\"组合名称\")\n    introduction = models.CharField(max_length = 255,verbose_name=\"组合介绍\")\n    label = models.IntegerField(blank=False,verbose_name=\"组合标签\",choices=LABELS)\n    status = models.IntegerField(blank=False,verbose_name=\"组合状态\",choices=STATUS)\n    size = models.IntegerField(verbose_name=\"组合大小盘\",choices=SIZES)\n    market = models.IntegerField(verbose_name=\"组合所在市场\",choices=MARKETS)\n    create_time = models.DateTimeField(verbose_name=\"组合创建时间\",auto_now_add= True)\n    portfolio_return = models.DecimalField(verbose_name=\"组合收益\", max_digits=19, decimal_places=10)\n步骤五：初始化管理模型\n接着定义一下后台显示的形式\nvi RiskManagement/admin.py\n# -*- coding: UTF-8 -*-\nfrom django.contrib import admin\nfrom .models import portfolio\n\n@admin.register(portfolio)\nclass portfolioAdmin(portfolio,admin.ModelAdmin):\n    model = portfolio\n\n    list_display = ['name','introduction','label','market','size','portfolio_return','create_time']\n    list_display_links = ['name']\n    search_fields = ['id','portfolio_id']\n    list_filter = ['label','size','market']\n    ordering = ['create_time']\n\n    # 全站默认去处 删除选项\n    admin.site.disable_action('delete_selected')\n    \n    fieldsets = [\n        (\"基础信息\",{'fields': [\"portfolio_name\",\"introduction\",]}),\n        ('其他信息', {'fields': ['market','size','status'], 'classes': ['collapse']}),\n    ]\n\n步骤六：初始化数据库\npython manage.py makemigrations auth\npython manage.py migrate auth\npython manage.py makemigrations RiskManagement\npython manage.py migrate RiskManagement\n步骤七：创建系统管理员\npython manage.py createsuperuser\n步骤八：注册应用\nvi settings.py\n在配置文件中相应的位置注册刚才完成的应用\nINSTALLED_APPS = (\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'RiskManagement',\n)\n步骤九：启动服务器\npython manage.py runserver 0.0.0.0:8000\n在浏览器中输入 localhost:8000/admin 就可以进入到你想要的数据管理系统啦\n\n参考资料\n\n打造数据产品的快速原型：Shiny的Docker之旅\nWeb Service Efficiency at Instagram with Python\nDjango Packages\n10 Polular Sites Made With Django\nDjango Packages\ndjango redactor 绝对现代化的编辑器 支持拖拽传图\n\n更优阅读体验可直接访问原文地址：https://segmentfault.com/a/11...作为分享主义者(sharism)，本人所有互联网发布的图文均遵从CC版权，转载请保留作者信息并注明作者 Harry Zhu 的 FinanceR专栏:https://segmentfault.com/blog...，如果涉及源代码请注明GitHub地址：https://github.com/harryprince。微信号: harryzhustudio商业使用请联系作者。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "9"}