{"title": "【Python学习笔记】 - 运维、开发技术分享 ", "index": "python", "content": "python   for   use\n[TOC]\n语法\nif语句\n示例\n#!/usr/bin/env python\nuser = 'jack'\npasswd = 'jack'\nusername = input('username:')\npassword = input('password:')\n\nif user == username and passwd == password :\n    print(\"welcome login...\")\nelse:\n    print(\"Invalid user name or password...\")\nfor循环\nage = 22\ncounter = 0\nfor i in  range(10):\nprint('counter',counter)\nif counter < 3:\n    guess_num = int(input('input your guess num:'))\n    if guess_num == age :\n        print('Congratulations ! you got it.')\n        break #跳出整个循环\n    elif guess_num > age:\n        print('Think smaller!')\n    else:\n        print('Think Big...')\nelse:\n    continue_confirm = input('Do you want to continue because you are stupid:')\n    if continue_confirm == 'y':\n        counter = 0\n        continue #跳出本次循环\n    else:\n        print('bye')\n        break\ncounter += 1    #counter = counter + 1\nwhile循环\n示例\n#!/usr/bin/env python\ncount = 0\nwhile True:\n    count += 1 #count自增\n    if count > 50 and count < 60: #count跳过50-60之间的循环\n        continue #跳出本次循环\n    print('hello word',count)\n    if count == 100:\n        print('已暂停')\n        break #跳出全局循环\n# while循环本身是死循环，上面代码示例while用法\n字符串常用操作\nstrip将输入信息前后空格去除\nusername = input(\"username:\")\nif username.strip() == 'liangml':\n    print('welcome')\nsplit\nname = \"liangml,tom,jack\"\nname2 = name.split(\",\") #拆分以逗号分隔的字符串得到一个列表\nprint('|'.join(name2))#join是将name2结果以|形式合并到一起\nprint(name2)\ncapitalize 首字母大写\nprint(name.capitalize())\nformat字符串两种赋值方式\nformat字符串两种赋值方式msg = \"Hello,{name},It's been a long {age} since last time sopke....\"\nmsg2 = msg.format(name=\"zhangsan\",age=111)\nprint(msg2)\nmsg2 = \"lisi{0},dddd{1}\"\nprint(msg2.format(\"liangml\",22))\ncenter 将字符串两边长度均匀分开\nname = 'jack,tom,zhangsan,lisi'\nprint(name)\nprint(name.center(40,'-'))\nfind 查找赋值中有几个\nprint(name.find('a'))\nisdigit 判断是否为数字\nage = input('your age:')\nif age.isdigit():\n    age = int(age)\nelse:\n    print('Invalid data type')\nisalnum 判断不允许有特殊字符，返回布尔值\nname = 'liangml'\nprint(name.isalnum())\nendswith,startswith 分别判断字符串是不是以制定字符结尾或开始，返回布尔值\nprint(name.endswith(\"ml\"))\nprint(name.startswith('ml'))\nupper、lower  全部变大、全部变小\nprint(name.upper())\nprint(name.lower())\n列表使用\n列表 索引、切片、追加、删除、长度、循环、包含列表语法\nimport  copy\n\nlist = ['Jack','Tom',[' Abby','Ada'],1,2,3,33,3,3,3,2] #列表里可以嵌套列表\n\nlist12 = ['Jack','Tom',' Abby','Ada']\n\n查询\nlist1 = name[1] #查看第一个元素\nlist1 = name[-1] #查看最后一个元素\nlist1 = name[:2] #取出前两个元素\nlist1 = name[-5:] #取出后5个元素，默认包含最后一个元素\nprint('Tom' in list) #查看列表中是否有对应元素，返回一个布尔值\n删除\nlist.remove(\"Tom\") #删除一个元素\ndel list[2:4] #del是一个全局用法，可以删除全局任何数据\nlist.pop(1) #使用pop删除默认删除第一个\n增加\nlist.append('liangml') #append追加一个\nlist.insert(2,'shit') #在列表中插入一条数据\n修改\nlist[1] = 'tom'\n统计\nlist12.sort() #python2.x中字符串和数字会排序数字在前，Python3.x中字符串、数字无法排序\nlist1 = list.count(3) #统计列表某个元素数量\nlist2 = list.index(33) #index查看对应元素索引\nlist4 = list.extend(list12) #将list12列表扩展入list列表中\n复制\nlist5 = list.copy() #列表copy用法只复制列表中第一层，嵌入式列表不会被复制\nlist6 = copy.deepcopy(list) #使用copy模块会将全部的数据复制一份出来\n清除\nlist.clear() #将整个列表清空\n长度查看\nprint(len(list)) #查看列表的长度也可以看其他数据的长度\n翻转一个列表\nlist.reverse() #翻转整个list列表\nprint(list[::3]) # 隔3个取一个值\nprint(list)\n更改单个列表中相同的元素\nif 3 in list:\n    num_of_ele = list.count(3)\n    posistion_of_ele = list.index(3)\n    list[posistion_of_ele] = 3333\n    print(\"[%s] 3 is/are in name,posistion:[%s]\" % (num_of_ele, posistion_of_ele))\nprint(list)\n批量更改列表中相同的元素\nfor i in range(list.count(3)):\n    ele_index = list.index(3)\n    list[ele_index] = 3333\nprint(list)\n只读列表元组\nr = (1,2,3,4,5,5) #使用格式\nprint(r.count(5)) ##统计参数\nprint(r.index(1)) ##查看索引\nprint(type(r)) #查看类型\n字典的使用\n字典使用自动去重功能\n列表规则\n\n\n1.开始、结尾大括号\n2.key、value组成中间用冒号分隔\n3.字典里可以嵌套字典\n4.字典默认是无序的\n\nmy_db = {\n    32131118540123950:{\n        'name' : 'Tom',\n        'age' : 21,\n        'addr' : 'shanxi'\n    },\n    14240218540123950: {\n        'name': 'Ada',\n        'age': 22,\n        'addr': 'BeiJing'\n    },\n    21122218540123950: {\n        'name': 'Jack',\n        'age': 23,\n        'addr': 'shandong'\n    }\n}\nmy_db2 = {\n    'name' : 'yangsheng',\n    21122218540123950: {\n        'name': '123',\n        'age': 23,\n        'addr': 'shandong'\n    }\n\n}\nmy_db[32131118540123950]['name'] = 'Mr.Liang' #修改字典元素\nmy_db[32131118540123950]['wechat'] = 'Lin1729562020' #新增或更新字典元素\ndel my_db[32131118540123950]['addr'] #删除元素\nmy_db[32131118540123950].pop('name') #删除元素\nv = my_db.get(32131118540123950) #获取一个值，没有时返回None\nmy_db.update(my_db2) #my_db2会将my_db值覆盖，如果没有就新增\nprint(my_db.items()) #将字典转换成列表\nprint(my_db.values()) #打印字典的所有values\nprint(my_db.keys()) #打印字典所有的key\nprint(32131118540123950 in my_db) #判断key是否在字典中，返回布尔值\nprint(my_db.setdefault(32131118540124950,'xiaowang')) #取出对应的key值，如果不存在新建key，返回None（value可以指定）\nprint(my_db.fromkeys([1,2,3,4,5,],'A')) #将列表里的值循环到字典中value为A\nprint(my_db.popitem()) #随机删除任意一个key\nprint(my_db[32131118540123950])\nprint(my_db)\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}