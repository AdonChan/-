{"title": "[LeetCode Python 3] 876. Middle of the Linked List(链表的中间结点) - 个人文章 ", "index": "python,leetcode", "content": "给定一个带有头结点 head 的非空单链表，返回链表的中间结点。\n如果有两个中间结点，则返回第二个中间结点。\n示例 1：\n输入：[1,2,3,4,5]\n输出：此列表中的结点 3 (序列化形式：[3,4,5])\n返回的结点值为 3 。 (测评系统对该结点序列化表述是 [3,4,5])。\n注意，我们返回了一个 ListNode 类型的对象 ans，这样：\nans.val = 3, ans.next.val = 4, ans.next.next.val = 5, 以及 ans.next.next.next = NULL.\n示例 2：\n输入：[1,2,3,4,5,6]\n输出：此列表中的结点 4 (序列化形式：[4,5,6])\n由于该列表有两个中间结点，值分别为 3 和 4，我们返回第二个结点。\n提示：\n给定链表的结点数介于 1 和 100 之间。\n思路：\n设置两个指向头节点的快慢指针，快指针每次走两步，慢指针每次走一步，当快指针到达最后结点或为空时，慢指针指向的就是中间结点 。\n解题代码Python 3：\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def middleNode(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        pa=pb=head\n        while pa and pb.next:\n            if pb.next.next==None:\n                return pa.next\n            pa=pa.next\n            pb=pb.next.next\n        return pa\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}