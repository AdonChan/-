{"title": " Python--Redis实战：第一章：初识Redis：第二节：Redis数据结构简介 - python3 ：公司内部培训专栏 ", "index": "redis,python", "content": "上一篇文章：Python--Redis实战：第一章：初识Redis：第一节：Redis简介下一篇文章：Python--Redis实战：第一章：初识Redis：第三节：你好Redis-文章投票试炼\n\nRedis可以存储键与5种不同的数据结构类型之间的映射，这5中数据结构类别分别是：STRING（字符串）、LIST（列表）、SET（集合）、HASH（散列）和ZZET（有序集合）。\n大部分程序员应该都不会对STRING、LIST、HASH这三种结构感到陌生，因为他们和很多编程语言内建的字符串、列表和散列等结构在实现和语义（semantics）方面都非常类似。有些编程语言还有集合数据结构，在实现和语义上类似于Redis的SET。ZSET在某种程度上是一种Redis特有的结构，但是当你熟悉它之后，就会发现它也是一种非常有用的结构。下表对比了Redis提供的5种结构，说明了这些结构存储的值，并简单介绍了他们的语音。\n\n\n结构类型\n结构存储的值\n结构的读写能力\n\n\n\nSTRING\n可以是字符串、整数、浮点数\n对整个字符串或者字符串的其中一部分执行操作，对整数或浮点数执行自增（increment）或者自减（decrement）操作。\n\n\nLIST\n一个链表，链表上的每个节点都包含了一个字符串\n从链表的两端推入或者弹出元素；根据偏移量对链表进行修剪（trim）；读取单个或者多个元素；根据值查找或则移除元素。\n\n\nSET\n包含字符串的无序收集器（unordered collection），并且被包含的每个字符串都是独一无二、各不相同\n添加、获取、移除单个元素；检查一个元素是否存在于集合中；计算交集、并集、差集；从集合中随机获取元素\n\n\nHASH\n包含键值对的无序散列表\n添加、获取、移除单个键值对；获取所有键值对。\n\n\nZSET（有序集合）\n字符串成员（member）与浮点数分值（score）之间的有序映射，元素的排列顺序由分值的大小决定\n添加、获取、删除单个元素；根据分值范围（range）或者成员来获取元素。\n\n\n\n字符串\nRedis的字符串和其他编程语言或者其他键值存储提供的字符串非常类似。\n字符串拥有一些和其他键值存储相似的命令，例如：GET（获取值）、SET（设置值）和DEL（删除值）。\n下表展示了字符串的基本命令：\n\n\n命令\n行为\n\n\n\nGET\n获取存储在给定键中的值\n\n\nSET\n设置存储在给定键中的值\n\n\nDEL\n删除存储在给定键中的值（这个命令可以用于所有类型）\n\n\n\n实例：SET、GET、DEL使实例\nimport redis #导入redis包包\n\n#与本地redis进行链接，地址为：localhost，端口号为6379\nr=redis.StrictRedis(host='localhost',port=6379)\nprint(r.set(\"Hello\",\"World\"))#SET命令执行成功，会返回OK，在Python中返回True\n\nprint(r.get(\"Hello\")) #获取指定键【Hello】对应的值\n\nr.delete(\"Hello\") #删除\n\nprint(r.get(\"Hello\"))\n结果\nTrue\nb'World'\nNone\n列表\nRedis对链表（linked-list）结构的支持使得它在键值存储的世界中独树一帜，一个列表结构可以有序的存储多个字符串。\nRedis列表可执行的操作和很多编程语言里面的列表操作非常相似，下标列出了列表命令：\n\n\n命令\n行为\n\n\n\nRPUSH\n将给定值推入列表的右端\n\n\nLPUSH\n将给定值推入列表的左端\n\n\nLRANGE\n获取列表在给定范围内的所有值\n\n\nLINDEX\n获取列表在给定位置上的单个元素\n\n\nLPOP\n从列表的左端弹出一个值，并返回被弹出的值\n\n\nRPOP\n从列表的右端弹出一个值，并返回被弹出的值\n\n\n\n实例：\nimport redis #导入redis包包\n\n#与本地redis进行链接，地址为：localhost，端口号为6379\nr=redis.StrictRedis(host='localhost',port=6379)\n\nr.delete(\"list-key\")\n\nprint(r.rpush(\"list-key\",\"item1\")) #向列表推入新的元素，语句返回列表执行该语句后的长度\nprint(r.rpush(\"list-key\",\"item2\")) #向列表推入新的元素，语句返回列表执行该语句后的长度\n\nprint(r.lrange(\"list-key\",0,-1)) #0为起始索引，-1表示列表结束索引，这样就可以取出列表的所有元素\n\nprint(r.lindex(\"list-key\",1)) #lindex取出单个元素\n结果\n1\n2\n[b'item1', b'item2']\nb'item2'\n集合\nRedis的集合和列表都可以存储多个字符串，他们的不同在于，列表可以存储多个相同的字符串，而集合则通过使用散列表来保证自己存储的每个字符串都是各不相同的。\n因为Redis的集合使用无序（unordered）方式存储元素，所以不能像使用列表那样，将元素推入集合的某一端，或者从集合的某一端弹出元素。\n下表列出了集合的命令：\n\n\n命令\n行为\n\n\n\nsadd\n将给定元素添加到集合\n\n\nsmembers\n返回集合包含的所有元素，如果集合包含的元素非常多，那么该命令的执行速度可能会很慢\n\n\nsismember\n检查给定元素是否存在于集合中\n\n\nsrem\n如果给定集合存在于集合中，那么移除这个元素\n\n\n\n实例：\nimport redis #导入redis包包\n\n#与本地redis进行链接，地址为：localhost，端口号为6379\nr=redis.StrictRedis(host='localhost',port=6379)\n\nr.delete(\"set-key\")\n\nprint(r.sadd(\"set-key\",\"item1\")) #向集合中添加新的元素，语句返回1表示这个元素被成功添加到集合中，返回0则表示这个元素已经存在集合中\nprint(r.sadd(\"set-key\",\"item2\")) #向集合中添加新的元素，语句返回1表示这个元素被成功添加到集合中，返回0则表示这个元素已经存在集合中\nprint(r.sadd(\"set-key\",\"item3\")) #向集合中添加新的元素，语句返回1表示这个元素被成功添加到集合中，返回0则表示这个元素已经存在集合中\n\nprint(r.sadd(\"set-key\",\"item3\")) #向集合中添加新的元素，语句返回1表示这个元素被成功添加到集合中，返回0则表示这个元素已经存在集合中\n\nprint(r.smembers(\"set-key\")) #返回集合包含的所有元素\n\nprint(r.sismember(\"set-key\",\"item1\")) #判断一个元素是否存在于集合汇总\nprint(r.sismember(\"set-key\",\"item4\")) #判断一个元素是否存在于集合汇总\n\nprint(r.srem(\"set-key\",\"item1\")) #如果指定元素在集合中存在，就移除，结果返回移除元素的数量\nprint(r.srem(\"set-key\",\"item4\")) #如果指定元素在集合中存在，就移除，结果返回移除元素的数量\n\nprint(r.smembers(\"set-key\")) #返回集合包含的所有元素\n\n\n结果：\n1\n1\n1\n0\n{b'item2', b'item3', b'item1'}\nTrue\nFalse\n1\n0\n{b'item2', b'item3'}\n散列\nRedis的散列可以存储多个键值对之间的映射。和字符串一样，散列存储的值既可以是字符串也可以是数字值，并且同样可以对散列存储的数字值执行自增操作或者自减操作。\n下表列出了散列的命令：\n\n\n命令\n行为\n\n\n\nhset\n在散列里面关联给定的键值对\n\n\nhget\n获取指定散列键的值\n\n\nhgetall\n获取散列包含的所有键值对\n\n\nhdel\n如果给定键存在于散列中，那么移除这个键\n\n\n\n实例：\nimport redis #导入redis包包\n\n#与本地redis进行链接，地址为：localhost，端口号为6379\nr=redis.StrictRedis(host='localhost',port=6379)\n\nr.delete(\"hash-key\")\n\nprint(r.hset(\"hash-key\",\"sub-key1\",\"value1\")) #如果返回1，表示散列中不存在该键值对，返回0表示存在该键值对\nprint(r.hset(\"hash-key\",\"sub-key2\",\"value2\")) #如果返回1，表示散列中不存在该键值对，返回0表示存在该键值对\nprint(r.hset(\"hash-key\",\"sub-key1\",\"value1\")) #如果返回1，表示散列中不存在该键值对，返回0表示存在该键值对\n\nprint(r.hgetall(\"hash-key\"))\n\n\nprint(r.hdel(\"hash-key\",\"sub-key1\")) #如果存在，就删除返回1，不存在返回0\nprint(r.hdel(\"hash-key\",\"sub-key3\")) #如果存在，就删除返回1，不存在返回0\n\nprint(r.hget(\"hash-key\",\"sub-key2\"))\n\nprint(r.hgetall(\"hash-key\"))\n\n结果：\n1\n1\n0\n{b'sub-key1': b'value1', b'sub-key2': b'value2'}\n1\n0\nb'value2'\n{b'sub-key2': b'value2'}\n有序集合\n有序集合和散列一样，都用于存储键值对：有序集合的键被称为【成员】（member），每个成员都是各不相同的；而有序集合的值则被称为【分值】（score），分值必须为浮点数。\n有序集合是Redis里面唯一一个既可以根据成员访问元素（这一点和散列表一样），又可以根据分值以及分值的排列顺序来访问元素的结构。\n下表列出了有序集合的命令\n\n\n命令\n行为\n\n\n\nzadd\n将一个带有给定分值的成员添加到有序集合里面\n\n\nzrange\n根据元素在有序排列中所处的位置，从有序集合里面获取多个元素。\n\n\nzrangebyscore\n获取有序集合在给定分值范围内的所有元素\n\n\nzrem\n如果给定元素存在于有序集合，那么移除这个成员。\n\n\n\n实例：\nimport redis #导入redis包包\n\n#与本地redis进行链接，地址为：localhost，端口号为6379\nr=redis.StrictRedis(host='localhost',port=6379)\n\nr.delete(\"zset-key\")\n\nprint(r.zadd(\"zset-key\",7,\"member1\")) #返回添加元素的数量\nprint(r.zadd(\"zset-key\",9,\"member2\")) #返回添加元素的数量\nprint(r.zadd(\"zset-key\",8,\"member3\")) #返回添加元素的数量\nprint(r.zadd(\"zset-key\",7,\"member3\")) #返回添加元素的数量,如果存在就覆盖值\n\n\nprint(r.zrange(\"zset-key\",0,-1)) #h获取有序集合所包含的所有元素，多个元素或安装分值大小进行排序\n\nprint(r.zrangebyscore(\"zset-key\",0,7)) #根据分值来获取集合中的一部分元素\n\nprint(r.zrem(\"zset-key\",\"member1\")) #返回移除元素的数量\n\nprint(r.zrange(\"zset-key\",0,-1)) #h获取有序集合所包含的所有元素，多个元素或安装分值大小进行排序\n\n\n\n\n结果：\n1\n1\n1\n0\n[b'member1', b'member3', b'member2']\n[b'member1', b'member3']\n1\n[b'member3', b'member2']\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "0"}