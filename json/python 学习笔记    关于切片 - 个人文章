{"title": "python 学习笔记    关于切片 - 个人文章 ", "index": "python,python3.x", "content": "切片是python中列表（list）、元组（tuple）、字符串（str）等序列类型都支持的一种操作，但实际上切片的功能比人们所想象的要强大的多。\n切片区间为什么会忽略最后一个元素\n\n当只有一个位置信息时，我们也可以读出该区间包含几个值，例如：rang(3) / my_list[:3]都是含有3个元素；\n当起止位置信息都可见时，我们可以快速计算区间的长度，即（stop-start）即可；\n可以利用一个任意下标将序列分割成互不交叉的两个子序列，如：my_list[:x] / my_list[x:]。\n\n切片slice(start, stop, step)\n对seq[start, stop, step]进行求值的时候，python会调用seq.__getitem__( slice(start, stop, step))。我们还可以给切片进行命名，有名字的切片，显然更具有可读性。如下例：\ninvoice = \"\"\"\n0.....6........15.....21\n1001  prod_1   $17.5  3\n1002  prod_2   $4.5   2\n1003  prod_3   $10    1\n1004  prod_4   $12    1\n1005  prod_5   $8     1\n\"\"\"\n\nprod_id = slice(0, 6)\nprod_desc = slice(6, 15)\nprod_price = slice(15, 21)\nprod_quantity = slice(21, None)\nline_items = invoice.split('\\n')[2:]\nfor item in line_items:\n    print(item[prod_price], item[prod_desc], item[prod_quantity])\n运行结果如下：\n给切片赋值\n如果把切片放在赋值符号的左边，或者将切片作为del操作的对象，我们就可以对序列进行嫁接、切除或者修改等操作，十分快捷方便。\n对切片赋值时，赋值符号右侧必须是一个可迭代对象，即使这个对象只包含一个元素，否则会提示错误 TypeError： can only assign an iterable。\n切片的实现\n>>> dir(slice)\n['__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'indices', 'start', 'step', 'stop']\n\nslice 是python的内置类型，类型所具有的indices方法可以帮助我们实现序列的切片操作。\nS.indices(len) -> (start, stop, stride)\n给定长度为len的序列，计算S表示的扩展切片的起始和结尾索引，以及步幅。超出边界的索引会被截掉。\n\n如上图两个例子，假如现在有一个长度为5的序列seq，那么对于该序列而言，\nseq[0, 10, 2] == seq[0, 5, 2]\nseq[-3, 0, 0] == seq[2, 5, 1]\n如果能够善用slice类型中Indices方法，则可以更加快捷实现自定义类型数据的切片操作。\n 注： 以上内容主体来自于《流畅的python》一书中 “2.4 切片” 和 “10.4.1 切片原理” \n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}