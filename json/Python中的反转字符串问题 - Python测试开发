{"title": "Python中的反转字符串问题 - Python测试开发 ", "index": "python", "content": "按单词反转字符串是一道很常见的面试题。在Python中实现起来非常简单。\ndef reverse_string_by_word(s):\n    lst = s.split()  # split by blank space by default\n    return ' '.join(lst[::-1])\n\ns = 'Power of Love'\nprint reverse_string_by_word(s)\n# Love of Power\n\ns = 'Hello    World!'\nprint reverse_string_by_word(s)\n# World! Hello\n上面的实现其实已经能满足大多数情况，但是并不完美。比如第二个字符串中的感叹号并没有被翻转，而且原字符串中的空格数量也没有保留。（在上面的例子里其实Hello和World之间不止一个空格）\n我们期望的结果应该是这样子的。\nprint reverse_string_by_word(s)\n# Expected: !World  Hello\n要改进上面的方案还不把问题复杂化，推荐使用re模块。你可以查阅re.split() 的官方文档。我们看一下具体例子。\n>>> import re\n>>> s = 'Hello  World!'\n\n>>> re.split(r'\\s+', s)    # will discard blank spaces\n['Hello', 'World!']\n\n>>> re.split(r'(\\s+)', s)  # will keep spaces as a group\n['Hello', '  ', 'World!']\n\n>>> s = '< Welcome to EF.COM! >'\n\n>>> re.split(r'\\s+', s)  # split by spaces\n['<', 'Welcome', 'to', 'EF.COM!', '>']\n\n>>> re.split(r'(\\w+)', s)  # exactly split by word\n['< ', 'Welcome', ' ', 'to', ' ', 'EF', '.', 'COM', '! >']\n\n>>> re.split(r'(\\s+|\\w+)', s)  # split by space and word\n['<', ' ', '', 'Welcome', '', ' ', '', 'to', '', ' ', '', 'EF', '.', 'COM', '!', ' ', '>']\n\n>>> ''.join(re.split(r'(\\s+|\\w+)', s)[::-1])\n'> !COM.EF to Welcome <'\n\n>>> ''.join(re.split(r'(\\s+)', s)[::-1])\n'> EF.COM! to Welcome <'\n\n>>> ''.join(re.split(r'(\\w+)', s)[::-1])\n'! >COM.EF to Welcome< '\n\n如果你觉得用切片将序列倒序可读性不高，那么其实也可以这样写。\n>>> ''.join(reversed(re.split(r'(\\s+|\\w+)', s)))\n'> !COM.EF to Welcome <'\n一句话搞定，so easy!\n\n关于作者：Python技术爱好者，目前从事测试开发相关工作，转载请注明原文出处。\n欢迎关注我的博客 http://betacat.online，你可以到我的公众号中去当吃瓜群众。\n\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "3"}