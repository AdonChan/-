{"title": "工程师奇技淫巧-IP段转换CIDR(python篇) - 麦芽面包 ", "index": "python", "content": "电商系统大考双十一过去了，可以找点时间写点东西了。\n这次说说提升工作效率。讲工程效率提升的文章有很多，我们先不看团队的。从个体小处如何减少机械性，重复性的工作，是切切实实提高个人幸福感的一件事。\n由于工作上的原因，经常需要给外包服务商开通访问内部系统的白名单。我们知道根据网络上通路到达web系统不同，大致上可以分为两类访问控制：\n\nnginx上的七层访问控制，完全由应用上的配置文件控制访问IP，该方式的好处也是坏处，就是需要开发明确知道并维护nginx上的白名单配置文件，同样的只要有了这份配置文件，理论上名单不会丢,应用基线可以保证多机房部署。\n防火墙控制，此种方式对应用透明，应用开发不需要关心白名单控制，问题也是明显的，防火墙ACL控制在跨机房时并不能跟随，有几个机房就要同时维护几份白名单，对运维系统也有要求，同一份IP段要支持多机房下发。\n\n故事的起点就在这，防火墙的ACL控制下发要求提供CIDR格式的规则。什么是CIDR格式？直接看自由的百科全书的解释：\n无类别域间路由（Classless Inter-Domain Routing、CIDR）是一个用于给用户分配IP地址以及在互联网上有效地路由IP数据包的对IP地址进行归类的方法。\nCIDR看起来就是这样的: 208.130.29.0/24\n比如有个需求就是208.130.29.30-35这个IP段换成CIDR格式，有几个只学过基础网络知识的开发懂这个？\n作为一个开发人员做这个换算是很费劲的，比如要去网上用类似以下这个巨难用的表格来做网段和CIDR格式的换算，还要搞清楚/32 /31 /29 这些似乎跟web开发没有多大关系的知识。\n\n在经历了痛苦和挫折后，一个偶然的机会，发现python居然有现成的类库支持此类网络操作与换算。 将以上的需求翻译成python只要几行代码搞定：\n# 确定起始和结尾IP，无论多复杂都可以转换\nstartip = '208.130.29.30'\nendip = '208.130.29.35'\ncidrs = netaddr.iprange_to_cidrs(startip, endip)\nfor k, v in enumerate(cidrs):\n    iplist = v\n    print iplist\n输出：208.130.29.30/31208.130.29.32/30\n反过来，CIDR也能直接转成IP地址段：\nfrom netaddr import *\n\nip = IPNetwork('192.0.2.16/29')\nip_list = list(ip)\nprint(ip_list)\n输出：[IPAddress('192.0.2.16'), IPAddress('192.0.2.17'), …, IPAddress('192.0.2.22'), IPAddress('192.0.2.23')]\n感谢python大法！\n\n文章来自微信平台「麦芽面包」微信公众号「darkjune_think」转载请注明。如果觉得有趣，微信扫一扫关注公众号。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "2"}