{"title": "Python方法(一) - 类的内部方法 - 终南山下 ", "index": "python", "content": "类（Class）和实例（Instance）\n类是抽象的模板\n实例是根据类创建出来的一个个具体的“对象”\n每个对象都拥有相同的方法，但各自的数据可能不同\n方法就是与实例绑定的函数，和普通函数不同，方法可以直接访问实例的数据；\nsuper\nclass OldDog():  \n   def __init__(self):  \n       print('I am an old dog !')\n       self.hungry = True  \n\n   def eat(self):  \n       if self.hungry:  \n           print('I eat it !')\n           self.hungry = False  \n       else:  \n           print('No thanks!')\n\nclass NewDog(OldDog):  \n   def __init__(self):  \n       super().__init__()  \n       print('I am a new dog!')\n\nolddog = OldDog()\nolddog.eat()\nolddog.eat()\nnewdog = NewDog()\nnewdog.eat()\nnewdog.eat()\n\n当子类继承父类的时候，我们继承了父类的方法。子类中含有__init__时，不会自动调用父类__init__，如需使用父类__init__中的变量，则需要在子类__init__中显式调用    \n\nrepr\n作用\n返回实例化对象的表达\ncode\nclass MyClass() :\n    def __str__(self) :\n        return \"我是MyClass的一个实例\"\n    def __repr__(self) :\n        return \"这回连print都省了\"\n \na=MyClass()\nresult\n>>> print(a)\n我是MyClass的一个实例\n>>> a\n这回连print都省了\n链接\n一个flask json返回值的问题\nhttps://www.v2ex.com/t/195379\nnew__、__init__、__call\n__new__： 对象的创建，是一个静态方法，第一个参数是cls。(想想也是，不可能是self，对象还没创建，哪来的self)\n__init__ ： 对象的初始化， 是一个实例方法，第一个参数是self。\n__call__ ： 对象可call，注意不是类，是对象\n先有创建，才有初始化。即先__new__，而后__init__。\nnew\nclass Bar(object): \n  pass\n  \nclass Foo(object): \n  def __new__(cls, *args, **kwargs): \n    return Bar() \n  \nprint Foo()\n输出来是一个Bar对象\ninit\nclass Person(object):\n  \"\"\"Silly Person\"\"\"\n \n  def __init__(self, name, age):\n    self.name = name\n    self.age = age\n \n  def __str__(self):\n    return '<Person: %s(%s)>' % (self.name, self.age)\n \nif __name__ == '__main__':\n  piglei = Person('piglei', 24)\n  print piglei\n这样便是__init__最普通的用法了。但__init__其实不是实例化一个类的时候第一个被调用 的方法。\n当使用 Persion(name, age) 这样的表达式来实例化一个类时，最先被调用的方法 其实是 __new__ 方法。\ncall\n对象通过提供__call__(slef, [,*args [,**kwargs]])方法可以模拟函数的行为，如果一个对象x提供了该方法，就可以像函数一样使用它，也就是说x(arg1, arg2...) 等同于调用x.__call__(self, arg1, arg2) 。模拟函数的对象可以用于创建防函数(functor) 或代理(proxy).\nclass Foo(object): \n  def __call__(self): \n    pass\n  \nf = Foo()#类Foo可call \nf()#对象f可call\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}