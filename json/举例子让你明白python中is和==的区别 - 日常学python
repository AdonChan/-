{"title": "举例子让你明白python中is和==的区别 - 日常学python ", "index": "python", "content": "在说 is 和 == 的区别之前，我们先理解下python的变量。python的变量和java的变量有很大的区别，因为一个是动态语言，另一个是静态语言。\njava的变量就像是个盒子，是把对象的地址装进这个盒子内，就会有大的或者小的盒子。而python的变量像个便利贴，把他贴在哪个地方都可以，不需要管数据类型，只要你喜欢就可以。说太多没有用，得用代码体会下。\n a = 1  \n\n上面的代码过程是先在内存中生成了一个int的对象，然后我们把这个便利贴 a 贴在了上面，从此a变量就指向了这个对象。我们还可以看看下面这个。\na = [1, 2]\nb = a\nb.append(3)\nprint(a)\n# 结果[1, 2, 3]\n\n\n\n这里是把a贴在了一个列表上，然后又用b指向a，接着操作b但是却打印了出了b的结果。这是因为a和b都是便利贴，都贴在了同一个列表上，所以操作一个的话，另外一个也会变化。或者我们可以看看这两个变量指向的对象是否是同于一个对象。\nprint(a is b)\nprint(id(a), id(b))\n# 结果True1461897824584 1461897824584\n\n\n\n可以看到，是相等的。\n现在我们再看看is和==之间的区别。我们还是先看一个例子。\na = [1, 2, 3]\nb = [1, 2, 3]\nprint(a is b)\nprint(a == b)\n\n\n\n大家可以先猜猜结果是什么。我之前说了python的变量就是个便利贴，[1, 2, 3]都是直接赋值给两个变量，也就是说生成了两个对象，所以a，b指向的对象不一样。所以结果出来了，第一个是False，第二个是True。为什么呢？因为is比较的是对象相同不相同，但是==比较的是值相同不相同。如果打印两个id值的话，显然是不同的。\nprint(id(a), id(b))\n# 结果1735698385160 1735679028936\n\n\n\n但是这个呢？\na = 1\nb = 1\nprint(a is b)\nprint(id(a), id(b))\n# 结果True1956929696 1956929696\n\n\n\n为什么这个又相等了呢？这是因为python中有个intern机制。  \nintern机制就是不管你创建了多少个相同的字符串，在python中都是会指向同一个对象的。这是为了防止你不小心创建了多个相同对象而浪费大量内存甚至会发生挤爆内存的后果。有了这个理解，我们再看看下面例子就容易得出答案了。\na = 'str'\nb = 's' + 'tr'\nprint(a is b) # 结果 True\nc = \"hello world\"\nd = \"hello world\"\nprint(c is d) # 结果 True\n\n再来到==的实际调用，在用==进行判断的时候实际是调用魔法函数__eq__()来判断他们的值是否相等的。  \n总的来说，我们在判断是否是同一个对象的时候就用is，不要用==，所以在判断该对象是什么类型的时候建议用is或者直接用isinstance()这个方法。\nclass Person():\n    pass\np = Person()\nprint(type(p) is Person)  # 结果 True\n\n\n\n为什么上面结果是True呢？这是因为我们之前说过类本身也是个对象，用type()方法会指向该对象，又因为这个类，也就是对象是唯一的，所以结果就是True。\n完毕！\nps:如果觉得文章不错的话，欢迎随手点赞转发支持\n\n扫描二维码关注公众号获取更多资讯\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "1"}