{"title": "python中参数传递 - icessun ", "index": "python", "content": "在编程语言中，函数的参数传递有两种情况：\n按值类型传递\nnum = 10\ndef double(arg):\n    arg=arg*2\n    print(arg)\n\ndouble(num)\n调用该函数，传入一个变量，其实传入的是该变量的一个副本，该变量在函数中发生变化，不影响函数外面该变量。\n\n\n按引用类型（地址）传递\n  def change(arg):\n       arg.append('More data')\n       print(arg)\n  \n saying = [42,34,55]\n change(saying)\n调用该函数，传入一个变量，但是函数内部却是维护该变量的一个指向链接，链接到函数外面的这个变量；当传入函数的这个变量在函数内部发生改变，直接影响到外面的最初变量，因为有指向关系。\n\n\npython中的函数参数既支持按值调用，也支持按引用调用。\npython中的变量是对象引用：变量存储的值是内存地址。当函数被调用的时候，解释器会查看传入的变量（内存地址）指的那个指的类型，如果是一个可变类型的值，就按照引用传递变量；如果是一个非可变类型的值，就考虑按照值传递变量。\n\n可变类型：字典dict，列表list，集合set:\n传入函数中的变量，函数内部的修改都会反映到函数外面，即最初始的变量会受到影响，毕竟这些初始的变量是可变类型。\n不可变类型：字符串srt，整数int，元组trulp:\n在这中，函数对变量的任何修改都是函数私有的，不会反映到函数外面，由于这些变量是不可变的，所以不能修改。\n例外：\ndef double(arg):\n  print('before: ',arg)\n  arg = arg * 2\n  print('After: ',arg)\n\n根据上面所说的，为什么这个函数里面的参数，传入的一个可变类型，函数内部发生了改变，结果却没有反映到函数外面呢？\n我们考虑到这条语句：arg = arg*2\n首先，传入的变量，先执行arg*2，所产生的新的变量（新对象的引用），重新赋值给原先的变量arg，覆盖其原先的引用，导致原先的变量arg与外面初始变量之间的联系断了。既然关系断了，那么函数里面的arg 的改变，没有反映出来，所以并没有影响到函数外面的变量。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}