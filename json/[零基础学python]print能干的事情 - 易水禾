{"title": "[零基础学python]print能干的事情 - 易水禾 ", "index": "零基础,python", "content": "print的一些基本用法，在前面的讲述中也涉及一些，本讲是在复习的基础上，尽量再多点内容。\n\neval()\n\n在print干事情之前，先看看这个东东。不是没有用，因为说不定某些时候要用到。\n\n>>> help(eval)      #这个是一招鲜，凡是不理解怎么用，就用这个看文档\n\nHelp on built-in function eval in module __builtin__:\n\neval(...)\n    eval(source[, globals[, locals]]) -> value\n\n    Evaluate the source in the context of globals and locals.\n    The source may be a string representing a Python expression\n    or a code object as returned by compile().\n    The globals must be a dictionary and locals can be any mapping,\n    defaulting to the current globals and locals.\n    If only globals is given, locals defaults to it.\n\n\n能看懂更好了，看不懂也没有关系。看我写的吧。哈哈。概括一下，eval()是把字符串中符合python表达式的东西计算出来。意思就是：\n\n>>> 3+4         #这是一个表达式，python会根据计算法则计算出结果来\n7\n>>> \"3+4\"       #这是一个字符串，python就不计算里面的内容了，虽然里面是一个符合python规范的表达式\n'3+4'\n>>> eval(\"3+4\")　#这里就跟上面不一样了，就把字符串里面的表达式计算出来了\n7\n\n\n下面再看一个字符串“相加”的例子：\n\n>>> \"qiwsir\"+\".github.io\"\n'qiwsir.github.io'\n>>> \"'qiwsir'+'.github.io'\"　   #字符串里面，python是不会进行“计算”的\n\"'qiwsir'+'.github.io'\"\n>>> eval(\"'qiwsir'+'.github.io'\")　#eval()做的事情完全不一样，它会把字符串里面的计算出来\n'qiwsir.github.io'\n\n\n顺便再说一下另外一个跟eval()有点类似的函数：exec(),这个函数专门来执行字符串或文件里面的python语句。\n\n>>> exec \"print 'hello, qiwsir'\"\nhello, qiwsir\n>>> \"print 'hello, qiwsir'\"\n\"print 'hello, qiwsir'\"\n\n\nprint详解\n\nprint命令在编程实践中用的比较多，特别是要向看看程序运行到某个时候产生了什么结果了，必须用print来输出，或者说，本讲更宽泛地说，就要说明白把程序中得到的结果输出问题。\n\n比较简单的输出，前面已经涉及到过了：\n\n>>> name = 'qiwsir'\n>>> room = 703\n>>> website = 'qiwsir.github.io'\n>>> print \"MY name is:%s\\nMy room is:%d\\nMy website is:%s\"%(name,room,website)\nMY name is:qiwsir\nMy room is:703\nMy website is:qiwsir.github.io\n\n\n其中，%s,%d就是占位符。\n\n>>> a = 3.1415926\n>>> print \"%d\"%a    #%d只能输出整数,int类型\n3\n>>> print \"%f\"%a　　#%f输出浮点数\n3.141593\n>>> print \"%.2f\"%a　#按照要求输出小数位数\n3.14\n>>> print \"%.9f\"%a  #如果要求的小数位数过多，后面就用0补全\n3.141592600\n>>> b = 3　         \n>>> print \"%4d\"%b   #如果是整数，这样写要求该整数占有四个位置，于是在前面增加三个空格\n   3                #而不是写成0003的样式\n\n\n换一种范式，写成这样，就跟上面有点区别了。\n\n>>> import math     #引入数学模块\n>>> print \"PI=%f\"%math.pi #默认，将圆周率打印成这个样子\nPI=3.141593\n>>> print \"PI=%10.3f\"%math.pi　#约束一下，这个的含义是整数部分加上小数点和小数部分共计10位，并且右对齐\nPI=     3.142\n>>> print \"PI=%-10.3f\"%math.pi　#要求显示的左对齐，其余跟上面一样\nPI=3.142\n>>> print \"PI=%06d\"%int(math.pi) #整数部分的显示，要求共6位,这样前面用0补足了。\nPI=000003\n\n\n其实，跟对上面数字操作类似，对字符串也可以做一些约束输出操作。看下面实验，最好看官也试试。\n\n>>> website\n'qiwsir.github.io'\n>>> print \"%.3s\"%website\nqiw\n>>> print \"%.*s\"%(3,website)\nqiw\n>>> print \"%7.3s\"%website\n    qiw\n>>> print \"%-7.3s\"%website\nqiw    \n\n\n总体上，跟对数字的输出操作类似。不过，在实际的操作中，这些用的真的不是很多，至少在我这么多年的代码生涯中，用到上面复杂操作的，就是现在给列位展示的时候，充其量用一用对float类型的数据输出小数位数的操作，其它的输出操作，以默认的那种方式居多。请看官在这里鄙夷我的无知吧。\n\n行文到此，提醒列位，如果用python3的，请用print()，要加个括号。\n\nprint有一个特点，就是输出的时候，每行后面都自动加上一个换行符号\\n，这个在前面已经有所提及。\n\n>>> 　website\n'qiwsir.github.io'\n>>> for word in website.split(\".\"):\n...     print word\n... \nqiwsir\ngithub\nio\n>>> for word in website.split(\".\"):\n...     print word,         #注意，加了一个逗号，输出形式就变化了吧。\n... \nqiwsir github io\n\n\n%r是万能的吗？\n\n我曾经说过，懒人改变世界，特别是在敲代码的领域。于是就有人问了，前面一会儿是%s，一会儿是%d，麻烦，有没有一个万能的？于是网上就有人给出答案了，%r就是万能的。看实验：\n\n>>> import math\n>>> print \"PI=%r\"%math.pi\nPI=3.141592653589793\n>>> print \"Pi=%r\"%int(math.pi)\nPi=3\n\n\n真的是万能呀！别着急，看看这个，你是不是就糊涂了？\n\n>>> print \"Pi=%s\"%int(math.pi)\nPi=3\n\n\n当然，这样就肯定出错了：\n\n>>> print \"p=%d\"%\"pi\"\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: %d format: a number is required, not str\n\n\n如果看到这里，看官有点糊涂是很正常的，特别是那个号称万能的%r和%s，怎么都能够对原本属于%d的进行正常输出呢？\n\n其实，不管是%r还是%s(%d)都是把做为整数的对象转化为字符串输出了，而不是输出整数。但是%r和%s是有点区别的，本讲对这个暂不做深入研究，只是说明这样的对应：%s-->str();%r-->repr()，什么意思呢？就是说%s调用的是str()函数把对象转化为str类型，而%r是调用了repr()将对象转化为字符串。关于两者的区别请参考：Difference between str and repr in Python,下面是一个简单的例子，演示一下两者区别：\n\n>>> import datetime\n>>> today = datetime.date.today()\n>>> today\ndatetime.date(2014, 8, 15)\n>>> str(today)\n'2014-08-15'\n>>> repr(today)\n'datetime.date(2014, 8, 15)'\n\n\n最后要表达我的一个观点，没有什么万能的，一切都是根据实际需要而定。\n\n关于更多的输出格式占位符的说明，这个页面中有一个表格，可惜没有找到中文的，如果看官找到中文的，请共享一下呀：string formatting\n\n再扩展\n\n>>> myinfo\n{'website': 'qiwsir.github.io', 'name': 'qiwsir', 'room': 703}\n>>> print \"qiwsir is in %(room)d\"%myinfo\nqiwsir is in 703\n\n\n看官是否看明白上面的输出了？有点意思。这样的输出算是对前面输出的扩展了。\n\n出了这个扩展之外，在输出的时候，还可以用一个名曰：format的东西，这里面看不到%，但是多了{}。看实验先：\n\n>>> print \"My name is {0} and I am in {1}\".format(\"qiwsir\",703)     #将format后面的内容以此填充\nMy name is qiwsir and I am in 703\n>>> \"My website is {website}\".format(website=\"qiwsir.github.io\")    #{}里面那个相当于一个变量了吧\n'My website is qiwsir.github.io'\n\n\n看到这里，是不是感觉这个format有点意思？一点不输给前面的输出方式。据说，format会逐渐逐渐取代前面的。关于format，我计划后面一讲继续。这里只是来一个引子，后面把用format输出搞得多点。\n\n恭请列为到我的github上及时更新的内容：零基础学python\n\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "8"}