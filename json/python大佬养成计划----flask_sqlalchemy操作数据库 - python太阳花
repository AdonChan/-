{"title": "python大佬养成计划----flask_sqlalchemy操作数据库 - python太阳花 ", "index": "windows,python,mysql", "content": "flask_sqlalchemy\n使用对象关系映射（Object-Relational Mapper, ORM）框架，它将低层的数据库操作指令抽象成高层的面向对象操作。也就是说，如果我们直接使用数据库引擎，我们就要写 SQL 操作语句，但是，如果我们使用了 ORM 框架，我们对诸如表、文档此类的数据库实体就可以简化成对 Python 对象的操作\nSQLAlchemy已经成为了python世界里面orm的标准，flask是一个轻巧的web框架，可以自由的使用orm，其中flask-sqlalchemy是专门为flask指定的插件。\n在 Flask-SQLAlchemy 中，数据库使用 URL 指定。\nMySQL -->  mysql://username:password@hostname/database\n安装\n pip install flask-sqlalchemy\n\n对数据库操作\n1. 如何创建数据库操作连接\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\ndb = SQLAlchemy(app)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://root:sheen@localhost/zaj_sql'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = True\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True)\n    email = db.Column(db.String(120), unique=True)\n\n为了创建初始数据库，调用 SQLAlchemy.create_all() 方法来创建表和数据库:\n   db.create_all()\n您的数据库已经生成。现在来创建一些用户\nadmin = User('admin', 'admin@example.com')\nguest = User('guest', 'guest@example.com')\n但是它们还没有真正地写入到数据库中，因此让我们来确保它们已经写入到数据库中\ndb.session.add(admin)\ndb.session.add(guest)\ndb.session.commit()\n2.创建关系型数据库表\nSQLAlchemy 连接到关系型数据库，关系型数据最擅长的东西就是关系。因此，我们将创建一个使用两张相互关联的表的应用作为例子。最为常见的关系就是一对多的关系。因为关系在它们建立之前就已经声明，您可以使用 字符串来指代还没有创建的类关系使用 relationship() 函数表示。然而外键必须用类 sqlalchemy.schema.ForeignKey 来单独声明.\nfrom datetime import datetime\nfrom flask_bootstrap import Bootstrap\nfrom flask_wtf import FlaskForm\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask import Flask\nimport pymysql\nfrom sqlalchemy import desc\n\napp = Flask(__name__)\ndb = SQLAlchemy(app)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://root:sheen@localhost/zaj_sql'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = True\nbootstrap = Bootstrap(app)\n\nclass User(db.Model):\n    id = db.Column(db.Integer,autoincrement=True,primary_key=True)\n    name = db.Column(db.String(50),unique=True)\n    passwd = db.Column(db.String(100))\n    add_time = db.Column(db.DATETIME,default=datetime.now())\n    gender = db.Column(db.BOOLEAN,default=True)\n    role_id = db.Column(db.INTEGER,db.ForeignKey('role.id'))\n\n    def __repr__(self):\n        return '<User:%s>' %(self.name)\n\nclass Role(db.Model):\n    id = db.Column(db.INTEGER,autoincrement=True,primary_key=True)\n    name = db.Column(db.String(50),unique=True)\n    users = db.relationship('User',backref='role')\n    # 给Role模型添加users属性\n    # backref 是定义反向引用\n        def __repr__(self):\n        return '<Role:%s>' % (self.name)\nif __name__ =='__main__':\n    # 1. 创建数据库表\n    # db.drop_all()\n    # db.create_all()\n    # # 2. 创建role数据库表数据\n    role_1 = Role(name='超级会员')\n    role_2 = Role(name='普通会员')\n\n    db.session.add(role_1)\n    db.session.add(role_2)\n\n    db.session.commit()\n\n    # # # 3. 添加user表内数据，100个用户，50个为超级会员，50个为普通会员\n    for i in range(1,13):\n        if i%2 == 0:\n            u = User(name='sheen'+str(i),passwd='sheen',role_id=1)\n            db.session.add(u)\n        else:\n            u = User(name='star'+str(i),passwd='star',role_id=2)\n            db.session.add(u)\n    db.session.commit()\n\n\nbackref 是定义反向引用，可以通过User.role访问Role对象和属性。 查询所有数据\n\n    print('角色',Role.query.all())\n    print('用户',User.query.all())\n根据条件查询数据\n\n    # select * from tablename where xxx=xxxxx\n    print(User.query.filter_by(role_id=1).all())\n    print(Role.query.filter_by().all())\n    print(User.query.filter_by(role_id=2).all())\n对于找到的数据进行更新\n print('进行数据更新',end='\\n')\n    u =User.query.filter_by(name='sheen2').first()\n    print(u)\n    u.passwd = '123'\n    db.session.add(u)\n    db.session.commit()\n 筛选数据方法2(filter),这种方法可以看见原生的sql语句\n    print('数据筛选', end='\\n')\n    user = User.query.filter(User.role_id==1)\n    print(user)\n    \n 对于查询的信息进行显示限制\n    print('限制查询数据的显示', end='\\n')\n\n    users = User.query.filter_by(role_id=1).limit(3).all()\n    print(users)\n对于查询的信息进行排序输出(默认情况由小到大进行排序)， 如果想要由大到小： desc(User.add_time)\n    print('数据再处理', end='\\n')\n    users = User.query.filter_by(role_id=1).order_by(desc(User.name)).all()\n    print(users)\n多个过滤函数\nprint('多个过滤函数', end='\\n')\n    users = User.query.filter_by(role_id=1).order_by(desc(User.name)).limit(3).offset(1).all()\n    print(users)\n    users = User.query.filter_by(role_id=1).order_by(desc(User.name)).slice(1,4).all()\n    print(users)\n分页,第一个参数表示显示第几页数据，第二个参数表示每页显示多少条数据\n    print('分页显示', end='\\n')\n\n    users = User.query.paginate(1,5)\n    print(users.items)\n    users = User.query.paginate(2, 5)\n    print(users.items)\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}