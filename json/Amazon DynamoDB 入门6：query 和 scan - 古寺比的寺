{"title": "Amazon DynamoDB 入门6：query 和 scan - 古寺比的寺 ", "index": "数据库,nosql,asw运维,python", "content": "上一节我们介绍了DynamoDB索引的创建及管理，这一节我们将介绍query（查询）和scan（扫描）的使用。\n查询Query\nSQL 可使用 SELECT 语句查询关键列、非关键列或任意组合。WHERE 子句确定返回的行。\nDynamoDB Query 操作提供对存储数据的物理位置的快速高效访问。 可以将 Query 用于任何具有复合主键（分区键和排序键）的表。这里的表必须指定分区键的相等条件，并且可以选择性为排序键提供另一个条件。 KeyConditionExpression 参数指定要查询的键值。\n可使用可选 FilterExpression 在结果中的找出某些符号条件的项目。\n在 DynamoDB 中，必须使用 ExpressionAttributeValues 作为表达式参数（例如，KeyConditionExpression和 FilterExpression）中的占位符。这类似于在关系数据库中使用绑定变量，在运行时将实际值代入 SELECT语句。 下边是query的语法：\nresponse = table.query(\n    IndexName='string',\n    Select='ALL_ATTRIBUTES'|'ALL_PROJECTED_ATTRIBUTES'|'SPECIFIC_ATTRIBUTES'|'COUNT',\n    AttributesToGet=[\n        'string',\n    ],\n    Limit=123,\n    ConsistentRead=True|False,\n    ConditionalOperator='AND'|'OR',\n    ScanIndexForward=True|False,\n    ExclusiveStartKey={\n      'string': 'string'|123|Binary(b'bytes')|True|None|set(['string'])|set([123])|set([Binary(b'bytes')])|[]|{}\n    },\n    ReturnConsumedCapacity='INDEXES'|'TOTAL'|'NONE',\n    ProjectionExpression='string',\n    FilterExpression=Attr('myattribute').eq('myvalue'),\n    KeyConditionExpression=Key('mykey').eq('myvalue'),\n    ExpressionAttributeNames={\n        'string': 'string'\n    },\n    ExpressionAttributeValues={\n        'string': 'string'|123|Binary(b'bytes')|True|None|set(['string'])|set([123])|set([Binary(b'bytes')])|[]|{}\n    }\n)\n参数说明：\n\nExclusiveStartKey: 起始查询的key，也就是上一页的最后一条数据\nConsistentRead: 是否使用强制一致性 默认False\nScanIndexForward: 索引的排序方式 True 为正序 False 为倒序 默认True\n\nReturnConsumedCapacity: DynamoDB 将返回条件写入期间使用的写入容量单位数\n\nTOTAL 会返回由表及其所有global secondary index占用的写入容量；\nINDEXES 仅返回由global secondary index占用的写入容量；\nNONE 表示您不需要返回任何占用容量统计数据。\n\n\nProjectionExpression: 用于指定要在扫描结果中包含的属性\nFilterExpression: 指定一个条件，以便仅返回符合条件的项目\nKeyConditionExpression: 要查询的键值\nExpressionAttributeNames: 提供名称替换功能\nExpressionAttributeValues: 提供值替换功能\n\n以下是 DynamoDB 中的几个 Query 示例：\n返回 Aritist = 'No One You Know' SongTitle='Call Me Today' 的歌曲：\n{\n    TableName: \"Music\",\n    KeyConditionExpression: \"Artist = :a and SongTitle = :t\",\n    ExpressionAttributeValues: {\n        \":a\": \"No One You Know\",\n        \":t\": \"Call Me Today\"\n    }\n}\n返回 Aitist='No One You Know' 的所以歌曲：\n{\n    TableName: \"Music\",\n    KeyConditionExpression: \"Artist = :a\",\n    ExpressionAttributeValues: {\n        \":a\": \"No One You Know\"\n    }\n}\n返回Aritist ='No One You Know' 并且 SongTitle 开头为Call 的所有歌曲：\n{\n    TableName: \"Music\",\n    KeyConditionExpression: \"Artist = :a and begins_with(SongTitle, :t)\",\n    ExpressionAttributeValues: {\n        \":a\": \"No One You Know\",\n        \":t\": \"Call\"\n    }\n}\n返回Aritist ='No One You Know' 并且 SongTitle 开头为Today 并且价格小于1 的所有歌曲：\n{\n    TableName: \"Music\",\n    KeyConditionExpression: \"Artist = :a and contains(SongTitle, :t)\",\n    FilterExpression: \"price < :p\",\n    ExpressionAttributeValues: {\n        \":a\": \"No One You Know\",\n        \":t\": \"Today\",\n        \":p\": 1.00\n    }\n}\nPython Example\nboto3\n返回 Aitist='The Acme Band' 的所有歌曲：\n# ...\nfrom boto3.dynamodb.conditions import Key, Attr\n\ntable = db3.Table('Music')\n\nresponse = table.query(\n    KeyConditionExpression=Key('Artist').eq('The Acme Band')\n)\n\nitems = response['Items']\nprint(items)\n\n## output\n[\n{\n    u'Genre': u'Rock',\n    u'Price': Decimal('0.99'),\n    u'Artist': u'The Acme Band',\n    u'SongTitle': u'Look Out, World',\n    u'AlbumTitle': u'The Buck Starts Here'\n},\n{\n    u'Artist': u'The Acme Band',\n    u'Price': Decimal('2.47'),\n    u'AlbumTitle': u'The Buck Starts Here',\n    u'PromotionInfo': {\n        u'RadioStationsPlaying': [u'KHCR', u'KBQX', u'WTNR', u'WJJH'],\n        u'Rotation': u'Heavy',\n        u'TourDates': {u'Seattle': u'20150625', u'Cleveland': u'20150630'}\n    },\n    u'Genre': u'Rock', u'SongTitle': u'Still In Love'\n    }\n]\n返回 Artist='No One You Know' 并且SongTitle='Somewhere Down The Road' 的所有歌曲：\nresponse = table.query(\n    KeyConditionExpression=Key('Artist').eq('No One You Know') & Key('SongTitle').eq('Somewhere Down The Road')\n)\nitems = response['Items']\nprint(items)\n\n## output\n\n[{\n    u'Artist': u'No One You Know',\n    u'AlbumTitle': u'Somewhat Famous',\n    u'CriticRating': Decimal('8.4'),\n    u'Year': Decimal('1984'),\n    u'Genre': u'Country',\n    u'SongTitle': u'Somewhere Down The Road'\n  }\n]\n返回Aritist ='No One You Know' 并且 SongTitle 开头为 Call 的所有歌曲：\nresponse = table.query(\n    KeyConditionExpression=Key('Artist').eq('The Acme Band') & Key('SongTitle').begins_with('Look')\n)\nitems = response['Items']\nprint(items)\n\n## output\n\n[\n{\n    u'Genre': u'Rock',\n    u'Price': Decimal('0.99'),\n    u'Artist': u'The Acme Band',\n    u'SongTitle': u'Look Out, World',\n    u'AlbumTitle': u'The Buck Starts Here'\n}\n]\n返回Aritist ='No One You Know' 并且 SongTitle 开头为Today 并且价格小于1 的所有歌曲：\nresponse = table.query(\n    KeyConditionExpression=Key('Artist').eq('The Acme Band'),\n    FilterExpression=Attr('Price').lt(1)\n)\nitems = response['Items']\nprint(items)\n\n## output\n[{\n    u'Genre': u'Rock',\n    u'Price': Decimal('0.99'),\n    u'Artist': u'The Acme Band',\n    u'SongTitle': u'Look Out, World',\n    u'AlbumTitle': u'The Buck Starts Here'\n},\n]\nNote\n特别注意： 如果筛选条件是排序键，则是先过滤再返回结果，和SQL中where 筛选类似。 如果排序值不是排序建，则先返回结果再过滤。\n例如：\n表结构和项目值如下：\nTable Test:\n    a: hash_key\n    b: range_key\n    c: number\n\nfor i in range(10):\n    Test(a=1, b=i*10, c=i*20)\n查询：\nresponse = table.query(\n    KeyConditionExpression=Key('a').eq('1') & Key('b').gt('40'),\n    Limit=2\n)\n\n查询结果为两个项目：\n\na=1, b=50, c=80\na=1, b=60, c=100\n\nresponse = table.query(\n    KeyConditionExpression=Key('a').eq('1'),\n    FilterExpression=Attr('c').gt('80'),\n    Limit=2\n)\n\n会发现查询没有结果。\n\n这是因为DynamoDB 会默认按照 b 正序排列，limit=2 则限定了结果为：\na=1, b=10, c=20\na=1, b=20, c=40\n\n可以看出，这个结果中并没有符合 c > 80 的项目。\n所以 结果为空。\n\n不过还是会占读取吞吐量。\nScan\n在 SQL 中，不带 WHERE 子句的 SELECT 语句将返回表中的每个行。在 DynamoDB 中，Scan 操作可执行相同的工作。在这两种情况下，您都可以检索所有项目或部分项目。 无论您使用的是 SQL 还是 NoSQL 数据库，都应谨慎使用扫描操作，因为它们会占用大量系统资源\n在 SQL 中，可在不指定 WHERE 子句的情况下使用 SELECT 语句扫描表并检索其所有数据。您可以在结果中请求一个或多个列。或者，如果您使用通配符 (*)，则可请求所有列。 下面是一些示例：\n/* Return all of the data in the table */\nSELECT * FROM Music;\n/* Return all of the values for Artist and Title */\nSELECT Artist, Title FROM Music;\nDynamoDB 提供以相似方式工作的 Scan 操作。 下面是Scan 的语法示例：\nresponse = table.scan(\n    IndexName='string',\n    AttributesToGet=[\n        'string',\n    ],\n    Limit=123,\n    Select='ALL_ATTRIBUTES'|'ALL_PROJECTED_ATTRIBUTES'|'SPECIFIC_ATTRIBUTES'|'COUNT',\n    ConditionalOperator='AND'|'OR',\n    ExclusiveStartKey={\n        'string': 'string'|123|Binary(b'bytes')|True|None|set(['string'])|set([123])|set([Binary(b'bytes')])|[]|{}\n    },\n    ReturnConsumedCapacity='INDEXES'|'TOTAL'|'NONE',\n    TotalSegments=123,\n    Segment=123,\n    ProjectionExpression='string',\n    FilterExpression=Attr('myattribute').eq('myvalue'),\n    ExpressionAttributeNames={\n        'string': 'string'\n    },\n    ExpressionAttributeValues={\n        'string': 'string'|123|Binary(b'bytes')|True|None|set(['string'])|set([123])|set([Binary(b'bytes')])|[]|{}\n    },\n    ConsistentRead=True|False\n)\n参数说明：\n\nExclusiveStartKey: 起始查询的key，也就是上一页的最后一条数据\nConsistentRead: 是否使用强制一致性 默认False\nScanIndexForward: 索引的排序方式 True 为正序 False 为倒序 默认True\n\nReturnConsumedCapacity: DynamoDB 将返回条件写入期间使用的写入容量单位数\n\nTOTAL 会返回由表及其所有global secondary index占用的写入容量；\nINDEXES 仅返回由global secondary index占用的写入容量；\nNONE 表示您不需要返回任何占用容量统计数据。\n\n\nProjectionExpression: 用于指定要在扫描结果中包含的属性\nFilterExpression: 指定一个条件，以便仅返回符合条件的项目\nKeyConditionExpression: 要查询的键值\nExpressionAttributeNames: 提供名称替换功能\nExpressionAttributeValues: 提供值替换功能\n\nscan 的查询方式是先扫描所有数据，筛选条件也仅在扫描整个表后进行应用，所以会占用大量的读取吞吐量。\n下面是一些示例：\n// Return all of the data in the table\n{\n    TableName:  \"Music\"\n}\n// Return all of the values for Artist and Title\n{\n    TableName:  \"Music\",\n    ProjectionExpression: \"Artist, Title\"\n}\nScan 操作还提供一个 FilterExpression 参数以过滤符合条件的项目。在扫描整个表后且结果返回之前，应用 FilterExpression。（建议不要对大型表这样做：即使仅返回几个匹配项目，仍需为整个 Scan 付费。会占用吞吐量）\nPython Example\nboto3\n返回Aritist ='No One You Know' 并且 SongTitle 开头为Today 并且价格小于1 的所有歌曲：\nresponse = table.scan(\n    FilterExpression=Attr('Price').lt(2)&Key('Artist').eq('The Acme Band')\n)\nitems = response['Items']\nprint(items)\n\n## output\n[{\n    u'Genre': u'Rock',\n    u'Price': Decimal('0.99'),\n    u'Artist': u'The Acme Band',\n    u'SongTitle': u'Look Out, World',\n    u'AlbumTitle': u'The Buck Starts Here'\n},]\n在代码中，请注意以下情况：\n\nProjectionExpression 用于指定要在扫描结果中包含的属性。\nFilterExpression 用于指定一个条件，以便仅返回符合条件的项目。所有其他项目都将被舍弃。\nscan 方法每次返回项目的一个子集（称为页面）。响应中的 LastEvaluatedKey 值随后通过 ExclusiveStartKey 参数传递给 scan 方法。当返回最后一页后，LastEvaluatedKey 将不是响应的一部分。\n\nNote\n\nExpressionAttributeNames 提供名称替换功能。我们使用此参数是因为 year 是 DynamoDB 中的保留字，您不能直接在任何表达式中使用它，包括 KeyConditionExpression。我们使用表达式属性名称 #yr 来解决此问题。\nExpressionAttributeValues 提供值替换功能。我们使用此参数是因为您不能在任何表达式中使用文字，包括 KeyConditionExpression。我们使用表达式属性值 :yyyy 来解决此问题。\n\n这一节我们介绍了DynamoDB query和scan的基本用法，下一节将介绍使用索引查询\ntips:从这几篇的介绍可以发现DynamoDB的查询语法比较繁琐，写起来非常麻烦，所以我模仿sqlalchemy 写了一个orm，欢迎使用https://github.com/gusibi/dynamodb-py\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}