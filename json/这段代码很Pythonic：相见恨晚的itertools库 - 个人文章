{"title": "这段代码很Pythonic：相见恨晚的itertools库 - 个人文章 ", "index": "python", "content": "最近事情不是很多，想写一些技术文章分享给大家，同时也对自己一段时间来碎片化接受的知识进行一下梳理，所谓写清楚才能说清楚，说清楚才能想清楚，就是这个道理了。\n很多人都致力于把Python代码写得更Pythonic，一来更符合规范且容易阅读，二来一般Pythonic的代码在执行上也更有效率。今天就先给大家介绍一下Python的系统库itertools。\nitertools库\n迭代器（生成器）在Python中是一种很常用也很好用的数据结构，比起列表(list)来说，迭代器最大的优势就是延迟计算，按需使用，从而提高开发体验和运行效率，以至于在Python 3中map,filter等操作返回的不再是列表而是迭代器。\n话虽这么说但大家平时用到的迭代器大概只有range了，而通过iter函数把列表对象转化为迭代器对象又有点多此一举，这时候我们今天的主角itertools就该上场了。\n使用itertools\nitertools中的函数大多是返回各种迭代器对象，其中很多函数的作用我们平时要写很多代码才能达到，而在运行效率上反而更低，毕竟人家是系统库。\nitertools.accumulate\n简单来说就是累加。\n>>> import itertools\n>>> x = itertools.accumulate(range(10))\n>>> print(list(x))\n[0, 1, 3, 6, 10, 15, 21, 28, 36, 45]\n\nitertools.chain\n连接多个列表或者迭代器。\n   >>> x = itertools.chain(range(3), range(4), [3,2,1])\n   >>> print(list(x))\n   [0, 1, 2, 0, 1, 2, 3, 3, 2, 1]\n\nitertools.combinations\n求列表或生成器中指定数目的元素不重复的所有组合\n>>> x = itertools.combinations(range(4), 3)\n>>> print(list(x))\n[(0, 1, 2), (0, 1, 3), (0, 2, 3), (1, 2, 3)]\n**### itertools.combinations_with_replacement**\n允许重复元素的组合\n```python\n>>> x = itertools.combinations_with_replacement('ABC', 2)\n>>> print(list(x))\n[('A', 'A'), ('A', 'B'), ('A', 'C'), ('B', 'B'), ('B', 'C'), ('C', 'C')]\n\nitertools.compress\n按照真值表筛选元素\n>>> x = itertools.compress(range(5), (True, False, True, True, False))\n>>> print(list(x))\n[0, 2, 3]\nitertools.count\n\n就是一个计数器,可以指定起始位置和步长\n>>> x = itertools.count(start=20, step=-1)\n>>> print(list(itertools.islice(x, 0, 10, 1)))\n[20, 19, 18, 17, 16, 15, 14, 13, 12, 11]\n\nitertools.cycle\n循环指定的列表和迭代器\n>>> x = itertools.cycle('ABC')\n>>> print(list(itertools.islice(x, 0, 10, 1)))\n['A', 'B', 'C', 'A', 'B', 'C', 'A', 'B', 'C', 'A']\nitertools.dropwhile\n\n按照真值函数丢弃掉列表和迭代器前面的元素\n>>> itertools.dropwhile(lambda e: e < 5, range(10))\n>>> print(list(x))\n[5, 6, 7, 8, 9]\n\nitertools.filterfalse\n保留对应真值为False的元素\n>>> x = itertools.filterfalse(lambda e: e < 5, (1, 5, 3, 6, 9, 4))\n>>> print(list(x))\n[5, 6, 9]\n\nitertools.groupby\n按照分组函数的值对元素进行分组\n>>> x = itertools.groupby(range(10), lambda x: x < 5 or x > 8)                                                                                                 \n>>> for condition, numbers in x:                                                  \n...     print(condition, list(numbers))                                                                                                        \nTrue [0, 1, 2, 3, 4]                                                              \nFalse [5, 6, 7, 8]                                                                \nTrue [9]\n\nitertools.islice\n上文使用过的函数，对迭代器进行切片\n>>> x = itertools.islice(range(10), 0, 9, 2)\n>>> print(list(x))\n[0, 2, 4, 6, 8]\n\nitertools.permutations\n产生指定数目的元素的所有排列(顺序有关)\n>>> x = itertools.permutations(range(4), 3)\n>>> print(list(x))\n[(0, 1, 2), (0, 1, 3), (0, 2, 1), (0, 2, 3), (0, 3, 1), (0, 3, 2), (1, 0, 2), (1, 0, 3), (1, 2, 0), (1, 2, 3), (1, 3, 0), (1, 3, 2), (2, 0, 1), (2, 0, 3), (2, 1, 0), (2, 1, 3), (2, 3, 0), (2, 3, 1), (3, 0, 1), (3, 0, 2), (3, 1, 0), (3, 1, 2), (3, 2, 0), (3, 2, 1)]\n\nitertools.product\n产生多个列表和迭代器的(积)\n>>> x = itertools.product('ABC', range(3))\n>>>\n>>> print(list(x))\n[('A', 0), ('A', 1), ('A', 2), ('B', 0), ('B', 1), ('B', 2), ('C', 0), ('C', 1), ('C', 2)]\n\nitertools.repeat\n简单的生成一个拥有指定数目元素的迭代器\n>>> x = itertools.repeat(0, 5)\n>>> print(list(x))\n[0, 0, 0, 0, 0]\n\nitertools.starmap\n类似map\n>>> x = itertools.starmap(str.islower, 'aBCDefGhI')\n>>> print(list(x))\n[True, False, False, False, True, True, False, True, False]\n\nitertools.takewhile\n与dropwhile相反，保留元素直至真值函数值为假。\n>>> x = itertools.takewhile(lambda e: e < 5, range(10))\n>>> print(list(x))\n[0, 1, 2, 3, 4]\n\nitertools.tee\n这个函数我也不是很懂，似乎是生成指定数目的迭代器\n>>> x = itertools.tee(range(10), 2)\n>>> for letters in x:\n...     print(list(letters))\n...    //Python开发交流：705673780\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nitertools.zip_longest\n类似于zip，不过已较长的列表和迭代器的长度为准\n>>> x = itertools.zip_longest(range(3), range(5))\n>>> y = zip(range(3), range(5))\n>>> print(list(x))\n[(0, 0), (1, 1), (2, 2), (None, 3), (None, 4)]\n>>> print(list(y))\n[(0, 0), (1, 1), (2, 2)]\n\n结语\n大概就总结到这里，不过老实说Python的各种语言特性和库还是要多用才能熟练，最终达到随手拈来的程度，装逼的说就是由术入道。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}