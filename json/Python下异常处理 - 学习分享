{"title": "Python下异常处理 - 学习分享 ", "index": "python", "content": "程序报错？太常见了，我们可以想办法修理好它\n捕获异常\nnumber=\"hello\"\ntry:\n    #有可能出错的语句\n    number=int(number)\nexcept Exception:\n    print(\"出错了\") \nelse:\n    print(\"没错的时候运行\")   \nexcept后面指定了报错的异常类，在python中重要的内建异常类有:\n\nException 常规错误的基类\nAttributeError 对象没有这个属性\nIOError 输入/输出操作失败\nIndexError 序列中没有此索引(index)\nKeyError 映射中没有这个键\nNameError 未声明/初始化对象 (没有属性)\nSyntaxError Python 语法错误\nSystemError 一般的解释器系统错误\nValueError 传入无效的参数\n\n...除了上述列出来的，其实python的异常类还有很多，当在except后面指定异常类之后，那么只有报这个类型异常的时候才会输出“出错了”当然我们也可以去掉Exception，这样任何异常都可以捕获到捕获多个异常如何做\n#指定多个异常\nnumber=\"hello\"\ntry:\n    #有可能出错的语句\n    number=int(number)\nexcept ValueError:\n    print(\"ValueError出错了\")   \nexcept Exception:\n    print(\"Exception出错了\") \nelse:\n    print(\"没错的时候执行的语句\")    \nfinally:\n    print(\"无论发不发生异常，都会执行的语句\")\n    \n#指定多个异常\nnumber=[1,2,3]\ntry:\n    #有可能出错的语句\n    number=number[4]\nexcept (ValueError,NameError,IndexError):\n    print(\"出错了\")   \nelse:\n    print(\"没错的时候运行\") \n自定义异常类\n尽管python给我们提供了很多内置的异常类，但是还是不能满足精确定位的问题，我们可以通过创建一个新的exception类拥有自己的异常，异常应该继承自Exception类，可以直接继承，也可以间接继承\nclass MyError(Exception):\n    def __init__(self):\n        pass\n    def __str__(self):\n        return \"this is error\"        \n\ndef Calc():\n    raise MyError()   #通过raise语句抛出一个错误的实例 \n\nCalc()   \n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}