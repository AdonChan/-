{"title": "Python实用技法第10篇：对切片命名 - python3 ：公司内部培训专栏 ", "index": "python", "content": "上一篇文章：Python实用技法第9篇：从序列中移除重复项且保持元素间顺序不变下一篇文章：Python实用技法第11篇：找出序列中出现次数最多的元素\n\n1、需求🙀\n我们的代码已经变得无法阅读，到处都是硬编码的切片索引，我们想优化他们。\n2、解决方案😸\n代码中如果有很多硬编码的索引值，将导致可读性和维护性都不佳。\n内置的slice()函数会创建一个切片对象，可以用在任何运行进行切片操作的地方。\nitems=[0,1,2,3,4,5,6]\na=slice(2,4)\nprint(items[2:4])\nprint(items[a])\n\nitems[a]=[10,11,12,13]\nprint(items)\n\ndel items[a]\nprint(items[a])\nprint(items)\n运行结果：\n[2, 3]\n[2, 3]\n[0, 1, 10, 11, 12, 13, 4, 5, 6]\n[12, 13]\n[0, 1, 12, 13, 4, 5, 6]\n如果有一个slice对象的实例s。可以分别通过s.start、s.stop以及s.step属性得到关于该对象的信息。例如：\nitems=[0,1,2,3,4,5,6]\na=slice(2,8,3)\nprint(items[a])\nprint(a.start)\nprint(a.stop)\nprint(a.step)\n结果：\n[2, 5]\n2\n8\n3\n此外，可以通过使用indices(size)方法将切片映射到特定大小的序列上。这会返回一个(start,stop,step)元组，所有的值都已经恰当地限制在边界以内（当做索引操作时可避免出现IndexError异常），例如：\ns='HelloWorld'\na=slice(2,5)\nprint(a.indices(len(s)))\nfor i in range(*a.indices(len(s))):\n    print(str(i)+\":\"+s[i])\n\n结果：\n(2, 5, 1)\n2:l\n3:l\n4:o\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}