{"title": "从0开始用python写一个命令行小游戏（七） - 个人文章 ", "index": "python3.x,python", "content": "嗯，我知道你们此时心里想的是什么：“上次为什么这么短？” “是不是存心搞我们？” 呃······但我的v1.0 beta 1就是这样发布的！！！但不管上次多短，我们的编程还是要继续下去。今天我们的工作：增加状态显示及彩色！关于前作链接：由于文章太多，我决定只在每篇文章中显示上篇链接。这里就是：从0开始用python写一个命令行小游戏（六）\n状态显示\n我的v1.0 beta 1发布后，有测试用户说各种内部进行的操作看不出来，我就想到了这个方法：对于每个操作，都输出一个状态，就一目了然了。我的解决方法如下：\nclass Sunflower(Plant):\n    indicating_char = 's'\n    \n    def __init__(self, pos):\n        super().__init__(pos, 50)\n        print(\"Sunflower planted at %d, costing 50 sunlight.\"\n              % self.pos)\n    \n    def step(self):\n        # 其余部分同前\n        print(\"Sunflower at %d produced 25 sunlight.\"\n              % self.pos)\n别的类也类似。这里简单的说一下\"%d\"、\"%s\"等的作用。它们都是用来匹配一些动态内容的，只不过匹配的内容类型不同。所有值通过%操作符匹配。%d匹配int类型，%s匹配str类型，等等。有多个匹配值时，%后内容加括号(相当于使用元组)。例：\nname = 'peter'\nage = 20\nprint(\"%s is %d years old.\" % (name.title(), age))\n# 输出：Peter is 20 years old.\n这种将不同类型的动态值嵌入字符串的方法在嵌入int类型时十分高效，再也不用\"...\" + str(val) + \"...\"这样进行嵌入了。\n好了，回到正题。\n彩色显示\n我的百度结果：\\033[显示模式;颜色;背景m字符\\033[0m显示模式：0=正常，1=高亮(在Mac下为粗体)颜色：30=正常，31=红，32=绿，33=黄，34=蓝，35=紫，36=青，37=白背景：颜色+10于是，一个color()函数诞生：\ndef color(font, text):\n    return \"\\033[1;%dm%s\\033[0m\" % (font, text)\n然后把需要加颜色的字符串变成：\ncolor(颜色数字, \"字符\")\n大功告成！(v1.0 beta 3发布状态)\n下集预告\n下次，该加上多行了！还有，一种新的僵尸(原创)正蠢蠢欲动······欢迎继续关注！\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "1"}