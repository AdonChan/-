{"title": "【译】Python3中进行HTTP请求的4种方式 - 疯狂的技术宅在翻译 ", "index": "https,http,python", "content": "翻译：疯狂的技术宅原文标题：HTTP Requests in Python 3原文链接：https://www.twilio.com/blog/2...本文首发微信公众号：充实的脑洞\n相关文章：【译】深入解析Node.js中5种发起HTTP请求的方法\n\npython包索引(PyPI)提供了超过10万个代码库的包，它能够帮助python程序员完成许多工作，无论是构建web应用程序还是分析数据。另外PyPI还提供了很多诸如 twilio 之类的API的辅助库。\n下面让我们通过使用4个不同的 Python HTTP 库来学习如何从 RESTful API 检索和解析 JSON 数据，以此来演示PyPI包的强大功能。\n文中的每个示例都包含以下内容：\n\n定义要解析的URL，我们将使用Spotify API，因为它不需要在请求时进行身份验证。\n创建一个 HTTP GET 去请求这个URL。\n解析返回的JSON数据。\n\n我们将要使用的四个库用了不同的方法得到同一个结果。如果你把结果输出，将会看到一个有Spotify搜索结果的字典:\n*注意：结果可能会根据你使用的Python版本而有所不同。在这篇文章中，所有的代码都使用Python 3编写。 如果你仍在使用Python 2.X，那么请考虑为Python 3设置一个virtualenv。以下说明将帮助您使用virtualenv与Python 3：\n\n为Python 3测试创建一个名为pythreetest的目录。\n一旦安装了virtualenv，从项目目录中执行以下命令：\n\n使用以下命令创建一个新的virtualenv：\nvirtualenv -p python3 myvenv\n使用source命令激活myvenv：\nsource myvenv/bin/activate\n现在你将能够使用pip安装需要的库，并在virtualenv中使用Python 3启动解释器，在那里您可以成功导入包。\nurllib\nurllib是一个内置在Python标准库中的模块，并使用http.client来实现HTTP和HTTPS协议的客户端。 由于urllib是同Python一起进行分发和安装的，因此无需使用 pip 进行安装。 如果你重视稳定性，那么这就是给你准备的。 twilio-python助手库就使用了urllib。\nurllib同其他库比起来需要做更多的工作。 例如：你必须在发出HTTP请求之前创建一个URL对象。\nimport urllib.request\nimport urllib.parse\n\nurl = 'https://api.spotify.com/v1/search?type=artist&q=snoop'\nf = urllib.request.urlopen(url)\nprint(f.read().decode('utf-8'))\n在上面的例子中，我们将请求URL发送到CGI的stdin，并读取返回给我们的数据。\nRequests\nRequests是Python社区中最喜欢的库，因为它简洁易用。 Requests由urllib3提供支持，有玩笑说这是“唯一的非转基因HTTP库，适合人类消费”。\nRequests 抽象了大量的程式化的代码，使得HTTP请求比使用内置urllib库更简单。\n首先用pip进行安装\npip install requests\n向 Spotify 发送请求\nimport requests\n\nr = requests.get('https://api.spotify.com/v1/search?type=artist&q=snoop')\nr.json()\n输出结果：\nfrom pprint import pprint\npprint(r.json())\n我们刚刚向Spotify发出了一个GET请求，同时创建了一个名为r的Response 对象，之后使用内置的JSON解码器来处理我们请求的内容。\nOctopus\nOctopus是为想要GET一切的开发人员准备的。它允许你多任务去访问Spotify。就像它的名字一样，这个库使用线程并发地检索和报告HTTP请求的完成情况，同时可以使用你所熟悉的库。\n或者，你可以使用 Tornado 的 IOLoop 进行异步请求，不过在这里就不尽兴尝试了。\n通过pip安装：\npip install octopus-http\nOctopus的设置比前面的例子稍微多一些。 我们必须构建一个响应处理器，并使用内置的JSON库对JSON进行编码。\nimport json\n \nfrom pprint import pprint\nfrom octopus import Octopus\n \n \ndef create_request(urls):\n    data = []\n \n    otto = Octopus(\n           concurrency=4, auto_start=True, cache=True, expiration_in_seconds=10\n    )\n \n    def handle_url_response(url, response):\n        if \"Not found\" == response.text:\n            print (\"URL Not Found: %s\" % url)\n        else:\n            data.append(response.text)\n \n    for url in urls:\n        otto.enqueue(url, handle_url_response)\n \n    otto.wait()\n \n    json_data = json.JSONEncoder(indent=None,\n                                 separators=(',', ': ')).encode(data)\n \n    return pprint(json_data)\n \n \nprint(create_request(['https://api.spotify.com/v1/search?type=artist&q=snoop',\n                     'https://api.spotify.com/v1/search?type=artist&q=dre']))\n在上面的代码片段中，我们定义了create_requests函数来使用线程Octopus请求。 我们从一个空的list开始，data，并创建Octopus类的一个实例dotto。 最后配置了默认设置。\n然后我们构建响应处理器，其中的response参数是Octopus.Response的一个实例。 当每个请求成功后，响应内容将被添加到数据列表中。在响应处理器内部，我们可以使用Octopus类的主要方法。.enqueue方法用于加入新的URL。\n我们指定.wait方法等待队列中的所有URL完成加载，然后对JSON列表进行JSON编码并打印结果。\n吁，终于结束了。\n\nHTTPie\nHTTPie适用于希望快速与HTTP服务器、RESTful API 和 Web 服务进行交互的开发人员，它仅仅需要一行代码。 这个库是“一个可以让你微笑的开源 CLI HTTP客户端：用户友好的 curl 替代方案”。虽然它可以不依赖Python环境，但是它可以通过Pip安装，并用来创建HTTP请求。\npip install httpie\n默认协议是HTTP，但您可以创建一个别名，并重置HTTPS为默认值，如下所示：\nalias https='http —default-scheme=https'\n之后创建请求：\nhttps \"https://api.spotify.com/v1/search?type=artist&q=snoop\"\n使用HTTPie仅需要URL就够了。\n\n最后的想法\nPython 生态提供了许多与 JSON api 交互的选择。虽然这些方法对于最简单的请求是相似的, 但随着 HTTP 请求的复杂性增加, 这些差异变得更加明显。多进行尝试, 看看哪一个最适合你的需求。你甚至可以尝试用另一种语言, 如 Ruby。\n\n关注微信公众号：充实的脑洞， 一个技术宅的保留地\n\n\n\n\n\n\n                ", "mainLikeNum": ["4 "], "mainBookmarkNum": "23"}