{"title": "Python全栈之路系列之字符串格式化 - Python全栈之路 ", "index": "python", "content": "This PEP proposes a new system for built-in string formatting operations, intended as a replacement for the existing '%' string formatting operator.\nPython目前提供的字符串格式化方式有两种：\n\n百分号方式\nformat方式\n\n这两种方式在Python2和Python3中都适用，百分号方式是Python一直内置存在的，format方式为近期才出来的。\n旧式%格式化\n参数格式\n%[(name)][flags][width].[precision]typecode\n[(name)]\n可选，用于选择指定的key\n[flags]\n可选，可供选择的值有:\n\n\n值\n说明\n\n\n\n+\n右对齐；正数前加正好，负数前加负号\n\n\n-\n左对齐；正数前无符号，负数前加负号\n\n\nspace\n右对齐；正数前加空格，负数前加负号\n\n\n0\n右对齐；正数前无符号，负数前加负号；用0填充空白处\n\n\n\n[width]\n可选，占有宽度\n.[precision]\n可选，小数点后保留的位数\ntypecode\n必选，参数如下：\n\n\n值\n说明\n\n\n\ns\n获取传入对象的__str__方法的返回值，并将其格式化到指定位置\n\n\nr\n获取传入对象的__repr__方法的返回值，并将其格式化到指定位置\n\n\nc\n整数：将数字转换成其unicode对应的值，10进制范围为 0 <= i <= 1114111（py27则只支持0-255）；字符：将字符添加到指定位置\n\n\no\n将整数转换成 八  进制表示，并将其格式化到指定位置\n\n\nx\n将整数转换成十六进制表示，并将其格式化到指定位置\n\n\nd\n将整数、浮点数转换成十进制表示，并将其格式化到指定位置\n\n\ne\n将整数、浮点数转换成科学计数法，并将其格式化到指定位置（小写e）\n\n\nE\n将整数、浮点数转换成科学计数法，并将其格式化到指定位置（大写E）\n\n\nf\n将整数、浮点数转换成浮点数表示，并将其格式化到指定位置（默认保留小数点后6位）\n\n\nF\n同上\n\n\ng\n自动调整将整数、浮点数转换成 浮点型或科学计数法表示（超过6位数用科学计数法），并将其格式化到指定位置（如果是科学计数则是e；）\n\n\nG\n自动调整将整数、浮点数转换成 浮点型或科学计数法表示（超过6位数用科学计数法），并将其格式化到指定位置（如果是科学计数则是E；）\n\n\n%\n当字符串中存在格式化标志时，需要用 %%表示一个百分号\n\n\n\n\n注：Python中百分号格式化是不存在自动将整数转换成二进制表示的方式\n格式化实例\n常用字符串格式化方式\n # %s 代表字符串\n >>> string = \"My name is: %s\" % (\"ansheng\")\n >>> string\n'My name is: ansheng'\n字符串中出现%号的次数要与%之后所提供的数据项个数相同，如果需要插入多个数据，则需要将他们封装进一个元组。\n # %s是姓名，%d是年龄，必须是一个整数，不然会报错\n >>> string = \"My name is: %s, I am %d years old\" % (\"anshen\", 20)\n >>> string\n'My name is: anshen, I am 20 years old'\n给参数起一个名字，后面传值的时候必须是一个字典\n # %(name)s是姓名，%(age)d是年龄，必须是一个整数，传入的值是一个字典格式\n >>> string = \"My name is: %(name)s, I am %(age)d years old\" % {\"name\":\"anshen\", \"age\":20}\n >>> string\n'My name is: anshen, I am 20 years old'\n去浮点数后面的位数\n # %.2f小数后面只取两位\n >>> string = \"percent %.2f\" % 99.97623\n >>> string\n'percent 99.98'\n给浮点数起一个名字(key)\n >>> string = \"percent %(pp).2f\" % {\"pp\":99.97623}\n >>> string\n'percent 99.98'\n两个百分号代表一个百分号\n >>> string = \"percent %(pp).2f%%\" % {\"pp\":99.97623}\n >>> string\n'percent 99.98%'\n使用{}和format的新格式化\n[[fill]align][sign][#][0][width][,][.precision][type]\n[fill]\n可选，空白处填充的字符\nalign\n可选，对齐方式（需配合width使用）\n\n\n参数\n说明\n\n\n\n<\n强制内容左对齐\n\n\n>\n强制内容右对齐(默认)\n\n\n＝\n强制内容右对齐，将符号放置在填充字符的左侧，且只对数字类型有效。 即使：符号+填充物+数字\n\n\n^\n强制内容居中\n\n\n\n[sign]\n可选，有无符号数字\n\n\n参数\n说明\n\n\n\n+\n正号加正，负号加负\n\n\n-\n正号不变，负号加负\n\n\nspace\n正号空格，负号加负\n\n\n\n[#]\n可选，对于二进制、八进制、十六进制，如果加上#，会显示 0b/0o/0x，否则不显示\n[,]\n可选，为数字添加分隔符，如：1,000,000\n[width]\n可选，格式化位所占宽度\n[.precision]\n可选，小数位保留精度\n[type]\n可选，格式化类型\n传入” 字符串类型 “的参数\n\n\n参数\n说明\n\n\n\ns\n格式化字符串类型数据\n\n\n空白\n未指定类型，则默认是None，同s\n\n\n\n传入“ 整数类型 ”的参数\n\n\n参数\n说明\n\n\n\nb\n将10进制整数自动转换成2进制表示然后格式化\n\n\nc\n将10进制整数自动转换为其对应的unicode字符\n\n\nd\n十进制整数\n\n\no\n将10进制整数自动转换成8进制表示然后格式化；\n\n\nx\n将10进制整数自动转换成16进制表示然后格式化（小写x）\n\n\nX\n将10进制整数自动转换成16进制表示然后格式化（大写X）\n\n\n\n传入“ 浮点型或小数类型 ”的参数\n\n\n参数\n说明\n\n\n\ne\n转换为科学计数法（小写e）表示，然后格式化；\n\n\nE\n转换为科学计数法（大写E）表示，然后格式化;\n\n\nf\n转换为浮点型（默认小数点后保留6位）表示，然后格式化；\n\n\nF\n转换为浮点型（默认小数点后保留6位）表示，然后格式化；\n\n\ng\n自动在e和f中切换\n\n\nG\n自动在E和F中切换\n\n\n%\n显示百分比（默认显示小数点后6位）\n\n\n\nformat格式化实例\n第一种基本format格式化方式\n >>> string = \"My name is: {}, I am {} years old, {} Engineer\".format(\"ansheng\",20,\"Python\")\n >>> string\n'My name is: ansheng, I am 20 years old, Python Engineer'\n第二种基本format格式化方式\n >>> string = \"My name is: {}, I am {} years old, {} Engineer\".format(*[\"ansheng\",20,\"Python\"])\n >>> string\n'My name is: ansheng, I am 20 years old, Python Engineer'\n给传入的参数加一个索引\n >>> string = \"My name is: {0}, I am {1} years old, {0} Engineer\".format(*[\"ansheng\",20,\"Python\"])\n >>> string\n'My name is: ansheng, I am 20 years old, ansheng Engineer'\n给参数起一个名字(key)\n>>> string = \"My name is: {name}, I am {age} years old, {job} Engineer\".format(name=\"ansheng\",age=20,job=\"Python\")\n>>> string\n'My name is: ansheng, I am 20 years old, Python Engineer'\n字典的方式\n >>> string = \"My name is: {name}, I am {age} years old, {job} Engineer\".format(**{\"name\":\"ansheng\",\"age\":20,\"job\":\"Python\"})\n >>> string\n'My name is: ansheng, I am 20 years old, Python Engineer'\n索引内的索引\n >>> string = \"My name is: {0[0]}, I am {0[1]} years old, {0[2]} Engineer\".format([\"Ansheng\",20,\"Python\"],[\"An\",11,\"IT\"])\n >>> string\n'My name is: Ansheng, I am 20 years old, Python Engineer'\n制定参数类型\n >>> string = \"My name is: {:s}, I am {:d} years old, {:f} wage\".format(\"Ansheng\",20,66666.55)\n >>> string\n'My name is: Ansheng, I am 20 years old, 66666.550000 wage'\n制定名称(key)的值类型\n >>> string = \"My name is: {name:s}, I am {age:d} years old\".format(name=\"Ansheng\",age=20)\n >>> string\n'My name is: Ansheng, I am 20 years old'\n异类实例\n >>> string = \"numbers: {:b},{:o},{:d},{:x},{:X}, {:%}\".format(15, 15, 15, 15, 15, 15.87623, 2)\n >>> string\n'numbers: 1111,17,15,f,F, 1587.623000%'\n索引\n >>> string = \"numbers: {0:b},{0:o},{0:d},{0:x},{0:X}, {0:%}\".format(15)\n >>> string\n'numbers: 1111,17,15,f,F, 1500.000000%'\n\n原文链接\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "2"}