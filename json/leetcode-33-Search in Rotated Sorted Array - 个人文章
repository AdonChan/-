{"title": "leetcode-33-Search in Rotated Sorted Array - 个人文章 ", "index": "python", "content": "题目阐释：\n给定一组升序数组，取某个点之后将数组截断交换前后两个数组顺序，\n给定一个值，求这个值的index\n重点：二分法，确定target在哪个列表中，之后不断二分法进行位置确认。\n   由于不是一直升序，所以需要多些条件进行范围的限定。\n   二分法，需要不断 mid-1或者mid+1，因为mid已经判断过，没有再出现在数组的意义。  \n   注意边界值的确定，有 边界值相等，列表只有一个值，这些情况。注意 <  <=的使用\n  \n应用：排序，快速确定某个值的位置\nclass Solution:\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return -1\n        start,end=0,len(nums)-1\n        # mid=(start+end)//2+1\n        while True:\n            mid=(start+end)//2\n            if mid>end:\n                return -1\n            if nums[mid]==target:\n                return mid\n            if end<=start:\n                return -1\n            if nums[start]<=target<=nums[mid] or nums[mid]<nums[start]<=target or target<=nums[mid]<nums[start]:\n                end=mid-1\n            else:\n                start=mid+1\n\nif __name__==\"__main__\":\n    st=Solution()\n    nums=[4,5,6,7,0,1,2]\n    nums=[4,5,6,7,0,1,2]\n    # nums=[]\n    nums=[1,3]\n    nums=[3,1]\n    # nums=[1]\n    target=1\n    out=st.search(nums,target)\n    print(out)\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}