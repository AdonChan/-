{"title": "Python学习笔记2（解释器+运算符） - 个人文章 ", "index": "python", "content": "3.Python3解释器\nLinux/Unix的系统上，一般默认的 python 版本为 2.x，我们可以将 python3.x 安装在 /usr/local/python3 目录中。 安装完成后，我们可以将路径 /usr/local/python3/bin 添加到您的 Linux/Unix 操作系统的环境变量中，这样您就可以通过 shell 终端输入下面的命令来启动 Python3 。 在Window系统下你可以通过以下命令来设置Python的环境变量，假设你的Python安装在 C:Python34 下:\nset path=%path%;C:\\python34\n\n3.1 交互式编程我们可以在命令提示符中输入\"Python\"命令来启动Python解释器：$ python3\n3.1 脚本式编程在Linux/Unix系统中，你可以在脚本顶部添加以下命令让Python脚本可以像SHELL脚本一样可直接执行：\n#! /usr/bin/env python3\n\n然后修改脚本权限，使其有执行权限，命令如下：\n$ chmod +x hello.py\n\n执行以下命令：\n./hello.py\n\n输出结果为：Hello, Python!\n4.Python运算符\nPython语言支持以下类型的运算符:\n\n算术运算符\n比较（关系）运算符\n赋值运算符\n逻辑运算符\n位运算符\n成员运算符\n身份运算符\n运算符优先级\n\n4.1 Python算术运算符\n![图片上传中...]\n4.2 Python比较运算符\n![图片上传中...]\n4.3 Python赋值运算符\nng](/img/bVbeNZ9)\n4.4 Python位运算符按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：下表中变量 a 为 60，b 为 13，二进制格式如下：a = 0011 1100\nb = 0000 1101\n\na&b = 0000 1100\na|b = 0011 1101\na^b = 0011 0001\n~a  = 1100 0011\n\n..]\n4.5 Python逻辑运算符\n![图片6 Python逻辑运算符**测试实例中包含了一系列的成员，包括字符串，列表或元组。\n![图片上传中...]\na = 10\nb = 20\nlist = [1, 2, 3, 4, 5 ];\n \nif ( a in list ):\n   print \"1 - 变量 a 在给定的列表中 list 中\"\nelse:\n   print \"1 - 变量 a 不在给定的列表中 list 中\"\n \nif ( b not in list ):\n   print \"2 - 变量 b 不在给定的列表中 list 中\"\nelse:\n   print \"2 - 变量 b 在给定的列表中 list 中\"\n \n# 修改变量 a 的值\na = 2\nif ( a in list ):\n   print \"3 - 变量 a 在给定的列表中 list 中\"\nelse:\n   print \"3 - 变量 a 不在给定的列表中 list 中\"\n\nhon身份运算符**用于比较两个对象的存储单元\n![图片上传中...]\na = 20\nb = 20\n \nif ( a is b ):\n   print \"1 - a 和 b 有相同的标识\"\nelse:\n   print \"1 - a 和 b 没有相同的标识\"\n \nif ( a is not b ):\n   print \"2 - a 和 b 没有相同的标识\"\nelse:\n   print \"2 - a 和 b 有相同的标识\"\n \n# 修改变量 b 的值\nb = 30\nif ( a is b ):\n   print \"3 - a 和 b 有相同的标识\"\nelse:\n   print \"3 - a 和 b 没有相同的标识\"\n \nif ( a is not b ):\n   print \"4 - a 和 b 没有相同的标识\"\nelse:\n   print \"4 - a 和 b 有相同的标识\"\n以上实例输出结果：\n1 - a 和 b 有相同的标识\n2 - a 和 b 有相同的标识\n3 - a 和 b 没有相同的标识\n4 - a 和 b 没有相同的标识\n\nis 与 == 区别：is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。\n>>> a = [1, 2, 3]\n>>> b = a    #把a的地址给b\n>>> b is a     #引用地址是一个\nTrue\n>>> b == a    #变量的值相等\nTrue\n>>> b = a[:]    #把a的值给b\n>>> b is a    #变量引用地址不是一个，b在内存中新开辟了一个空间\nFalse\n>>> b == a    #变量的值依然相等\nTrue    \n\n4.8 Python运算符优先级\n![图片上传中...]\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}