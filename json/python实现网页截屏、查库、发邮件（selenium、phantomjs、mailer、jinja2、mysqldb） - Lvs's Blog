{"title": "python实现网页截屏、查库、发邮件（selenium、phantomjs、mailer、jinja2、mysqldb） - Lvs's Blog ", "index": "mail,jinja2,phantomjs,selenium,python", "content": "使用python（2.7）实现网页截屏、查库、发邮件的demo。用到了selenium、phantomjs、mailer、jinja2、mysqldb还有image，都是比较典型的用法，可复用性比较强，记录分享一下。\n本demo是用于发周报邮件的，周报内容包括数据库中的记录以及网页指定元素的截屏。linux中可以用crontab每周定时发送。需要发类似周报的同学这下轻松了！\n代码\n直接看代码吧，用的python2.7，关于第三方模块的安装，都很简单，这里就不赘述了。\n其中相关数据库参数、邮件参数、网址等真实数据都处理掉了，自己注意替换补全。\n#!/usr/bin/python\n# -*-coding:utf-8 -*-\n# Author: lvs\n\nimport MySQLdb.cursors\nimport datetime\nfrom mailer import Mailer\nfrom mailer import Message\nfrom jinja2 import Environment, PackageLoader\nfrom selenium import webdriver\nfrom PIL import Image\nfrom time import sleep\n\n\ndef fetch_results():\n    today = datetime.datetime.today()\n    seven_day_ago = today - datetime.timedelta(days=7)\n\n    today_str = today.strftime('%Y-%m-%d')\n    seven_day_ago_str = seven_day_ago.strftime('%Y-%m-%d')\n\n    db = MySQLdb.connect(host='127.0.0.1', port=3306, user='test', passwd='test', db='test',\n                         charset='utf8', cursorclass=MySQLdb.cursors.DictCursor)\n    cursor = db.cursor()\n    sql = \"SELECT * FROM test.test WHERE start_time < '{today}' and start_time >= '{seven_day_ago}'\".format(\n        today=today_str, seven_day_ago=seven_day_ago_str)\n    cursor.execute(sql)\n    results = cursor.fetchall()\n    db.close()\n    return results\n\n\ndef screen_shot(event_id):\n    driver = webdriver.PhantomJS(executable_path='/usr/local/phantomjs-2.1.1-linux-x86_64/bin/phantomjs')\n    driver.set_page_load_timeout(5)\n    driver.set_window_size('1920', '1080')\n\n    url = 'http://test.com/detail?id={}'.format(event_id)\n    driver.get(url)\n    sleep(3)\n\n    img_path = '/home/lvs/image/event_{}.png'.format(event_id)\n    driver.save_screenshot(img_path)\n\n    element = driver.find_element_by_id('main')\n    left = int(element.location['x'])\n    top = int(element.location['y'])\n    right = int(element.location['x'] + element.size['width'])\n    bottom = int(element.location['y'] + element.size['height'])\n    driver.quit()\n\n    im = Image.open(img_path)\n    im = im.crop((left, top, right, bottom))\n    im.save(img_path)\n\n\ndef send_mail(results):\n    env = Environment(loader=PackageLoader('jinja', 'templates'))\n    template = env.get_template('mail.html')\n\n    message = Message(From='test@123.com', To='test@123.com', charset='utf-8')\n    message.Subject = '这是邮件主题'\n    message.Html = template.render(results=results)\n    for r in results:\n        #指定cid参数将嵌入邮件html内容发送，不指定将作为附件发送\n        message.attach('/home/lvs/image/event_{}.png'.format(r['id']), cid=r['id'])\n        message.attach('/home/lvs/image/event_{}.png'.format(r['id']))\n\n    sender = Mailer('test.smtp.com')\n    sender.send(message)\n\n\nif __name__ == '__main__':\n    data = fetch_results()\n    for row in data:\n        screen_shot(row['id'])\n    send_mail(data)\nfetch_results()读库，返回结果，没啥好说的。\nscreen_shot(event_id)用于网页截屏，event_id用于传递url参数。使用selenium+phantomjs实现，都是python爬虫很典型的工具。注意其中使用Image截取DOM中id为main的元素的操作。截取后保存到本地。\nsend_mail(results)自然是发邮件，利用了mailer和jinja2模板，其中env = Environment(loader=PackageLoader('jinja', 'templates'))这一句是jinja2加载模板的代码，模板位于与此py脚本文件同目录的jinja包下templates目录下的mail.html中。可以看下在mail中嵌入图片和作为附件发送的操作。\nmail.html内容如下：\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    <style>\n        .myimg img {\n            max-width: 400px;\n            max-height: 200px;\n        }\n    </style>\n</head>\n<body>\n\n<div>\n    <div>\n        <div>\n            <p>最近一周事件记录：</p>\n        </div>\n        <div>\n            <table style=\"margin: 10px auto; border-collapse:collapse;\" border=\"1\" bordercolor=\"#a0c6e5\">\n                <tr>\n                    <th>事件名称</th>\n                    <th>事件类型</th>\n                    <th>开始时间</th>\n                    <th>结束时间</th>\n                    <th>事件地点</th>\n                    <th>事件描述</th>\n                    <th>事件详情</th>\n                </tr>\n                {% for row in results %}\n                <tr>\n                    <td>{{row[\"name\"]}}</td>\n                    <td>{{row[\"type\"]}}</td>\n                    <td>{{row[\"start_time\"]}}</td>\n                    <td>{{row[\"end_time\"]}}</td>\n                    <td>{{row[\"place\"]}}</td>\n                    <td>{{row[\"description\"]}}</td>\n                    <td class=\"myimg\"><img src=\"cid:{{row['id']}}\"></td>\n                </tr>\n                {% endfor %}\n            </table>\n        </div>\n    </div>\n</div>\n\n</body>\n</html>\njinja变量row为字典类型，对应数据库一条记录，索引都是表字段名，注意替换。\n每行最后一列是来自网页截屏的图片，一定要注意此处在img标签的src属性中用cid引入，否则原始img标签的引入方式是不生效的！\n个人博客：www.hellolvs.com\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "1"}