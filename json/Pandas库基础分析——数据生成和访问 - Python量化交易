{"title": "Pandas库基础分析——数据生成和访问 - Python量化交易 ", "index": "python", "content": "前言\nPandas是Python环境下最有名的数据统计包，是基于 Numpy 构建的含有更高级数据结构和工具的数据分析包。Pandas围绕着 Series 和 DataFrame 两个核心数据结构展开的。本文着重介绍这两种数据结构的生成和访问的基本方法。\n\nSeries\nSeries是一种类似于一维数组的对象，由一组数据（一维ndarray数组对象）和一组与之对应相关的数据标签（索引）组成。注：numpy（Numerical Python）提供了python对多维数组对象的支持：ndarray，具有矢量运算能力，快速、节省空间。\n（1）Pandas说明文档中对Series特点介绍如下：\n\n\"\"\" One-dimensional ndarray with axis labels (including time series).\nLabels need not be unique but must be a hashable type. The objectsupports both integer- and label-based indexing and provides a host ofmethods for performing operations involving the index. Statisticalmethods from ndarray have been overridden to automatically excludemissing data (currently represented as NaN).\nOperations between Series (+, -, /, , *) align values based on theirassociated index values-- they need not be the same length. The resultindex will be the sorted union of the two indexes.\nParameters---------- data : array-like, dict, or scalar value\nContains data stored in Series index : array-like or Index (1d)\nValues must be hashable and have the same length as `data`.\nNon-unique index values are allowed. Will default to\nRangeIndex(len(data)) if not provided. If both a dict and index\nsequence are used, the index will override the keys found in the\ndict. dtype : numpy.dtype or None\nIf None, dtype will be inferred copy : boolean, default False\nCopy input data \"\"\"\n\n（2）创建Series的基本方法如下，数据可以是阵列（list、ndarray）、字典和常量值。s = pd.Series(data, index=index)\n\ns = pd.Series([-1.55666192,-0.75414753,0.47251231,-1.37775038,-1.64899442], index=['a', 'b', 'c', 'd', 'e'],dtype='int8' )\na   -1\nb    0\nc    0\nd   -1\ne   -1\ndtype: int8\n\ns = pd.Series(['a',-0.75414753,123,66666,-1.64899442], index=['a', 'b', 'c', 'd', 'e'],)\na           a\nb   -0.754148\nc         123\nd       66666\ne    -1.64899\ndtype: object\n注：Series支持的数据类型包括整数、浮点数、复数、布尔值、字符串等numpy.dtype，与创建ndarray数组相同的是，如未指定类型，它会尝试推断出一个合适的数据类型，例程中数据包含数字和字符串时，推断为object类型；如指定int8类型时数据以int8显示。\ns = pd.Series(np.random.randn(5))\n0    0.485468\n1   -0.912130\n2    0.771970\n3   -1.058117\n4    0.926649\ndtype: float64\n\ns.index\nRangeIndex(start=0, stop=5, step=1)\n\ns = pd.Series(np.random.randn(5), index=['a', 'b', 'c', 'd', 'e'])\na    0.485468\nb   -0.912130\nc    0.771970\nd   -1.058117\ne    0.926649\ndtype: float64\n注：当数据未指定索引时，Series会自动创建整数型索引\n\ns = pd.Series({'a' : 0., 'b' : 1., 'c' : 2.})\na    0.0\nb    1.0\nc    2.0\ndtype: float64\n\ns = pd.Series({'a' : 0., 'b' : 1., 'c' : 2.}, index=['b', 'c', 'd', 'a'])\nb    1.0\nc    2.0\nd    NaN\na    0.0\ndtype: float64\n注：通过Python字典创建Series，可视为一个定长的有序字典。如果只传入一个字典，那么Series中的索引即是原字典的键。如果传入索引，那么会找到索引相匹配的值并放在相应的位置上，未找到对应值时结果为NaN。\n\ns = pd.Series(5., index=['a', 'b', 'c', 'd', 'e'])\na    5.0\nb    5.0\nc    5.0\nd    5.0\ne    5.0\ndtype: float64\n注：数值重复匹配以适应索引长度\n（3）访问Series中的元素和索引\n\ns = pd.Series({'a' : 0., 'b' : 1., 'c' : 2.}, index=['b', 'c', 'd', 'a'])\nb    1.0\nc    2.0\nd    NaN\na    0.0\ndtype: float64\n\ns.values\n[  1.   2.  nan   0.]\n\ns.index\nIndex([u'b', u'c', u'd', u'a'], dtype='object')\n注：Series的values和index属性获取其数组表示形式和索引对象\n\ns['a']\n0.0\n\ns[['a','b']]\na    0.0\nb    1.0\ndtype: float64\n\ns[['a','b','c']]\na    0.0\nb    1.0\nc    2.0\ndtype: float64\n\ns[:2] \nb    1.0\nc    2.0\ndtype: float64\n注：可以通过索引的方式选取Series中的单个或一组值\n\nDataFrame\nDataFrame是一个表格型（二维）的数据结构，它含有一组有序的列，每列可以是不同的值类型（数值、字符串、布尔值等）。DataFrame既有行索引也有列索引，它可以看做由Series组成的字典（共用同一个索引）。\n（1）Pandas说明文档中对DataFrame特点介绍如下：\n\n\"\"\" Two-dimensional size-mutable, potentially heterogeneous tabulardata structure with labeled axes (rows and columns). Arithmeticoperations align on both row and column labels. Can be thought of as adict-like container for Series objects. The primary pandas datastructure\nParameters---------- data : numpy ndarray (structured or homogeneous), dict, or DataFrame\nDict can contain Series, arrays, constants, or list-like objects index : Index or array-like\nIndex to use for resulting frame. Will default to np.arange(n) if\nno indexing information part of input data and no index provided columns : Index or array-like\nColumn labels to use for resulting frame. Will default to\nnp.arange(n) if no column labels are provided dtype : dtype, default None\nData type to force. Only a single dtype is allowed. If None, infer copy : boolean, default False\nCopy data from inputs. Only affects DataFrame / 2d ndarray input\n\n（2）创建DataFrame的基本方法如下，数据可以是由列表、一维ndarray或Series组成的字典（序列长度必须相同）、二维ndarray、字典组成的字典等df = pd.DataFrame(data, index=index)\n\ndf = pd.DataFrame({'one': [1., 2., 3., 5], 'two': [1., 2., 3., 4.]})\n   one  two\n0  1.0  1.0\n1  2.0  2.0\n2  3.0  3.0\n3  5.0  4.0\n注：以列表组成的字典形式创建，每个序列成为DataFrame的一列。不支持单一列表创建df = pd.DataFrame({[1., 2., 3., 5], [1., 2., 3., 4.]})，因为list为unhashable类型\n\ndf = pd.DataFrame([[1., 2., 3., 5],[1., 2., 3., 4.]],index=['a', 'b'],columns=['one','two','three','four'])\n   one  two  three  four\na  1.0  2.0    3.0   5.0\nb  1.0  2.0    3.0   4.0\n注：以嵌套列表组成形式创建2行4列的表格，通过index和 columns参数指定了索引和列名\n\ndata = np.zeros((2,), dtype=[('A', 'i4'),('B', 'f4'),('C', 'a10')])\n[(0,  0., '') (0,  0., '')]\n注：zeros(shape, dtype=float, order='C')返回一个给定形状和类型的用0填充的数组\n\ndata[:] = [(1,2.,'Hello'), (2,3.,\"World\")]        \ndf = pd.DataFrame(data)\n   A    B      C\n0  1  2.0  Hello\n1  2  3.0  World\n\ndf = pd.DataFrame(data, index=['first', 'second'])\n        A    B      C\nfirst   1  2.0  Hello\nsecond  2  3.0  World\n\ndf = pd.DataFrame(data, columns=['C', 'A', 'B'])\n       C  A    B\n0  Hello  1  2.0\n1  World  2  3.0\n注：同Series相同，未指定索引时DataFrame会自动加上索引，指定列则按指定顺序进行排列\n\ndata = {'one' : pd.Series([1., 2., 3.], index=['a', 'b', 'c']),\n        'two' : pd.Series([1., 2., 3., 4.], index=['a', 'b', 'c', 'd'])}\ndf = pd.DataFrame(data)\n   one  two\na  1.0  1.0\nb  2.0  2.0\nc  3.0  3.0\nd  NaN  4.0\n注：以Series组成的字典形式创建时，每个Series成为一列，如果没有显示指定索引，则各Series的索引被合并成结果的行索引。NaN代替缺失的列数据\n\ndf = pd.DataFrame(data,index=['d', 'b', 'a'])\n   one  two\nd  NaN  4.0\nb  2.0  2.0\na  1.0  1.0\n\ndf = pd.DataFrame(data,index=['d', 'b', 'a'], columns=['two', 'three'])\n   two three\nd  4.0   NaN\nb  2.0   NaN\na  1.0   NaN\n\ndata2 = [{'a': 1, 'b': 2}, {'a': 5, 'b': 10, 'c': 20}]\ndf = pd.DataFrame(data2)\n   a   b     c\n0  1   2   NaN\n1  5  10  20.0\n注：以字典的列表形式创建时，各项成为DataFrame的一行，字典键索引的并集成为DataFrame的列标\n\ndf = pd.DataFrame(data2, index=['first', 'second'])\n        a   b     c\nfirst   1   2   NaN\nsecond  5  10  20.0\n\ndf = pd.DataFrame(data2, columns=['a', 'b'])\n   a   b\n0  1   2\n1  5  10\n\ndf = pd.DataFrame({('a', 'b'): {('A', 'B'): 1, ('A', 'C'): 2},\n                 ('a', 'a'): {('A', 'C'): 3, ('A', 'B'): 4},\n                 ('a', 'c'): {('A', 'B'): 5, ('A', 'C'): 6}, \n                 ('b', 'a'): {('A', 'C'): 7, ('A', 'B'): 8},  \n                 ('b', 'b'): {('A', 'D'): 9, ('A', 'B'): 10}})\n       a              b\n       a    b    c    a     b\nA B  4.0  1.0  5.0  8.0  10.0\n  C  3.0  2.0  6.0  7.0   NaN\n  D  NaN  NaN  NaN  NaN   9.0\n注：以字典的字典形式创建时，列索引由外层的键合并成结果的列索引，各内层字典成为一列，内层的键会被合并成结果的行索引。\n（3）访问DataFrame中的元素和索引\n\ndata = {'one' : pd.Series([1., 2., 3.], index=['a', 'b', 'c']),\n        'two' : pd.Series([1., 2., 3., 4.], index=['a', 'b', 'c', 'd'])}\ndf = pd.DataFrame(data)\n   one  two\na  1.0  1.0\nb  2.0  2.0\nc  3.0  3.0\nd  NaN  4.0\n\ndf['one']或df.one\na    1.0\nb    2.0\nc    3.0\nd    NaN\nName: one, dtype: float64\n注：通过类似字典标记的方式或属性的方式，可以将DataFrame的列获取为一个Series。返回的Series拥有原DataFrame相同的索引，且其name属性也被相应设置。\n\ndf[0:1]\n   one  two\na  1.0  1.0\n注：返回前两列数据\n\ndf.loc['a']\none    1.0\ntwo    1.0\nName: a, dtype: float64\n\ndf.loc[:,['one','two'] ]\n   one  two\na  1.0  1.0\nb  2.0  2.0\nc  3.0  3.0\nd  NaN  4.0\n\ndf.loc[['a',],['one','two']]\n   one  two\na  1.0  1.0\n\ndf.loc['a','one']\n1.0\n注：loc是通过标签来选择数据\n\ndf.iloc[0:2,0:1]  \n   one\na  1.0\nb  2.0\n\ndf.iloc[0:2]  \n   one  two\na  1.0  1.0\nb  2.0  2.0\n\ndf.iloc[[0,2],[0,1]]#自由选取行位置，和列位置对应的数据\n   one  two\na  1.0  1.0\nc  3.0  3.0\n注：iloc通过位置来选择数据\n\ndf.ix['a']\none    1.0\ntwo    1.0\nName: a, dtype: float64\n\ndf.ix['a',['one','two']]\none    1.0\ntwo    1.0\nName: a, dtype: float64\n\ndf.ix['a',[0,1]]\none    1.0\ntwo    1.0\nName: a, dtype: float64\n\ndf.ix[['a','b'],[0,1]]\n   one  two\na  1.0  1.0\nb  2.0  2.0\n\ndf.ix[1,[0,1]]\none    2.0\ntwo    2.0\nName: b, dtype: float64\n\ndf.ix[[0,1],[0,1]]\n   one  two\na  1.0  1.0\nb  2.0  2.0\n注：通过索引字段ix和名称结合的方式获取行数据\n\ndf.ix[df.one>1,:1]\n   one\nb  2.0\nc  3.0\n注：使用条件来选择，选取one列中大于1的行和第一列\n\ndf['one']=16.8\n    one  two\na  16.8  1.0\nb  16.8  2.0\nc  16.8  3.0\nd  16.8  4.0\n\nval = pd.Series([2,2,2],index=['b', 'c', 'd'])\ndf['one']=val\n   one  two\na  NaN  1.0\nb  2.0  2.0\nc  2.0  3.0\nd  2.0  4.0\n注：列可以通过赋值方式修改，将列表或数组赋值给某个列时长度必须和DataFrame的长度相匹配。Series赋值时会精确匹配DataFrame的索引，空位以NaN填充。\n\ndf['four']=[3,3,3,3]\n   one  two  four\na  NaN  1.0     3\nb  2.0  2.0     3\nc  2.0  3.0     3\nd  2.0  4.0     3\n注：对不存在的列赋值会创建新列\n\ndf.index.get_loc('a')\n0\n\ndf.index.get_loc('b')\n1\n\ndf.columns.get_loc('one')\n0\n注：通过行/列索引获取整数形式位置\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}