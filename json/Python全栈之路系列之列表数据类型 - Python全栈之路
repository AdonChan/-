{"title": "Python全栈之路系列之列表数据类型 - Python全栈之路 ", "index": "python", "content": "列表(list)同字符串一样都是有序的，因为他们都可以通过切片和索引进行数据访问，且列表的的是可变的。\n创建列表的几种方法\n第一种\nname_list = ['Python', 'PHP', 'JAVA']\n第二种\nname_list ＝ list(['Python', 'PHP', 'JAVA'])\n创建一个空列表\n>>> li = list() \n>>> type(li)\n<class 'list'>\n把一个字符串转换成一个列表\n>>> var=\"abc\"\n>>> li = list(var)\n>>> li\n['a', 'b', 'c']\nlist在把字符串转换成列表的时候，会把字符串用for循环迭代一下，然后把每个值当作list的一个元素。\n把一个元组转换成列表\n>>> tup=(\"a\",\"b\",\"c\")\n>>> li=list(tup)\n>>> type(li)\n<class 'list'>\n>>> li\n['a', 'b', 'c']\n把字典转换成列表\n>>> dic={\"k1\":\"a\",\"k2\":\"b\",\"k3\":\"c\"}\n>>> li=list(dic)\n>>> type(li)\n<class 'list'>\n>>> li\n['k3', 'k1', 'k2']\n字典默认循环的时候就是key，所以会把key当作列表的元素\n>>> dic={\"k1\":\"a\",\"k2\":\"b\",\"k3\":\"c\"}\n>>> li=list(dic.values())\n>>> li\n['c', 'a', 'b']\n如果指定循环的是values，那么就会把values当作列表的元素\n列表所提供的方法\n在列表末尾添加新的对象\nappend(self, p_object):\n>>> name_list = ['Python', 'PHP', 'JAVA']\n>>> name_list.append(\"C#\")\n>>> name_list\n['Python', 'PHP', 'JAVA', 'C#']\n统计某个元素在列表中出现的次数\ncount(self, value):\n\n\n属性\n描述\n\n\nobj\n列表中统计的对象\n\n\n>>> name_list = ['Python', 'PHP', 'PHP']\n>>> name_list.count(\"PHP\")\n2\n用于在列表末尾一次性追加另一个序列中的多个值\nextend(self, iterable):\n\n\n属性\n描述\n\n\nseq\n元素列表\n\n\n>>> name_list = ['Python', 'PHP', 'Python']\n>>> name_OS = ['Windows', 'Linux', 'Unix']\n>>> name_list\n['Python', 'PHP', 'Python']\n>>> name_OS\n['Windows', 'Linux', 'Unix']\n# 把列表`name_OS`中的内容添加到`name_list`的尾部\n>>> name_list.extend(name_OS)\n# 输出的结果\n>>> name_list\n['Python', 'PHP', 'Python', 'Windows', 'Linux', 'Unix']\n从列表中找出某个值第一个匹配项的索引位置\nindex(self, value, start=None, stop=None):\n\n\n属性\n描述\n\n\nvalue\n列表中统计的对象\n\n\n# 查找对象所在的位置\n>>> name_list = ['Python', 'PHP', 'JAVA']\n>>> name_list.index(\"PHP\")\n1\n将指定对象插入列表\ninsert(self, index, p_object):\n\n\n属性\n描述\n\n\n\nindex\n对象obj需要插入的索引位置\n\n\nobj\n要出入列表中的对象\n\n\n\n>>> name_list = ['Python', 'PHP', 'JAVA']\n# 把位置`1`的内容换成`C`，后面的自动退格一个位置\n>>> name_list.insert(1,\"C\")\n>>> name_list\n['Python', 'C', 'PHP', 'JAVA']\n移除列表中的一个元素，并且返回该元素的值\npop(self, index=None):\n\n\n属性\n描述\n\n\nindex\n可选参数，要移除列表元素的位置\n\n\n>>> name_list = ['Python', 'PHP', 'JAVA']\n# 删除位置1上面的内容，并且返回删除的字符串\n>>> name_list.pop(1)\n'PHP'\n>>> name_list\n['Python', 'JAVA']\n移除列表中某个值的第一个匹配项\nremove(self, value):\n\n\n属性\n描述\n\n\nvalue\n列表中要移除的对象\n\n\n>>> name_list = ['Python', 'PHP', 'JAVA', 'Python']\n# 每次删除的时候只会把第一次匹配到的值删除，第二个值不会被删除\n>>> name_list.remove(\"Python\")\n>>> name_list\n['PHP', 'JAVA', 'Python']\n>>> name_list.remove(\"Python\")\n>>> name_list\n['PHP', 'JAVA']\n当然删除元素还可以直接使用del进行删除：\n>>> L = [1,2,3]\n>>> del L[1]\n>>> L\n[1, 3]\n又或者使用切片赋值进行元素删除\n>>> L = [1,2,3]\n>>> L[1:2] = []\n>>> L\n[1, 3]\n反向输出列表中的元素\nreverse(self):\n>>> name_list = ['Python', 'PHP', 'JAVA']\n>>> name_list\n['PHP', 'JAVA', 'Python']\n>>> name_list.reverse()\n>>> name_list\n['JAVA', 'PHP', 'Python']\n对原列表进行排序，如果指定参数，则使用比较函数指定的比较函数\nsort(self, cmp=None, key=None, reverse=False):\n>>> name_list = ['Python', 'PHP', 'JAVA']\n>>> name_list\n['Python', 'PHP', 'JAVA']\n>>> name_list.sort()\n>>> name_list\n['JAVA', 'PHP', 'Python']\n清除列表内所有元素\n>>> li\n['Ansheng']\n>>> li.clear()\n>>> li\n[]\n同字符串一样，列表也支持解析，称为列表解析\n>>> li = [x for x in range(1,20)]\n>>> li\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n\n原文链接\n\nPython全栈之路系列文章\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "8"}