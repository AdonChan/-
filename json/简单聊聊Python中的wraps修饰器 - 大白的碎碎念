{"title": "简单聊聊Python中的wraps修饰器 - 大白的碎碎念 ", "index": "python", "content": "预备知识\n在了解wraps修饰器之前，我们首先要了解partial和update_wrapper这两个函数，因为在wraps的代码中，用到了这两个函数。\npartial\n首先说partial函数，在官方文档的描述中，这个函数的声明如下：functools.partial(func, *args, **keywords)。它的作用就是返回一个partial对象，当这个partial对象被调用的时候，就像通过func(*args, **kwargs)的形式来调用func函数一样。如果有额外的 位置参数(args) 或者 关键字参数(*kwargs) 被传给了这个partial对象，那它们也都会被传递给func函数，如果一个参数被多次传入，那么后面的值会覆盖前面的值。\n个人感觉这个函数很像C++中的bind函数，都是把某个函数的某个参数固定，从而构造出一个新的函数来。比如下面这个例子：\nfrom functools import partial\n\ndef add(x:int, y:int):\n    return x+y\n\n# 这里创造了一个新的函数add2，只接受一个整型参数，然后将这个参数统一加上2\nadd2 = partial(add, y=2)\n\nadd2(3)  # 这里将会输出5\n这个函数是使用C而不是Python实现的，但是官方文档中给出了Python实现的代码，如下所示，大家可以进行参考：\ndef partial(func, *args, **keywords):\n    def newfunc(*fargs, **fkeywords):\n        newkeywords = keywords.copy()\n        newkeywords.update(fkeywords)\n        return func(*args, *fargs, **newkeywords)\n    newfunc.func = func\n    newfunc.args = args\n    newfunc.keywords = keywords\n    return newfunc\nupdate_wrapper\n接下来，我们再来聊一聊update_wrapper这个函数，顾名思义，这个函数就是用来更新修饰器函数的，具体更新些什么呢，我们可以直接把它的源码搬过来看一下：\nWRAPPER_ASSIGNMENTS = ('__module__', '__name__', '__qualname__', '__doc__',\n                       '__annotations__')\nWRAPPER_UPDATES = ('__dict__',)\ndef update_wrapper(wrapper,\n                   wrapped,\n                   assigned = WRAPPER_ASSIGNMENTS,\n                   updated = WRAPPER_UPDATES):\n    for attr in assigned:\n        try:\n            value = getattr(wrapped, attr)\n        except AttributeError:\n            pass\n        else:\n            setattr(wrapper, attr, value)\n    for attr in updated:\n        getattr(wrapper, attr).update(getattr(wrapped, attr, {}))\n    wrapper.__wrapped__ = wrapped\n    return wrapper\n大家可以发现，这个函数的作用就是从 被修饰的函数(wrapped) 中取出一些属性值来，赋值给 修饰器函数(wrapper) 。为什么要这么做呢，我们看下面这个例子。\n自定义修饰器v1\n首先我们写个自定义的修饰器，没有任何的功能，仅有文档字符串，如下所示：\ndef wrapper(f):\n    def wrapper_function(*args, **kwargs):\n        \"\"\"这个是修饰函数\"\"\"\n        return f(*args, **kwargs)\n    return wrapper_function\n    \n@wrapper\ndef wrapped():\n    \"\"\"这个是被修饰的函数\"\"\"\n    print('wrapped')\n\nprint(wrapped.__doc__)  # 输出`这个是修饰函数`\nprint(wrapped.__name__)  # 输出`wrapper_function`\n从上面的例子我们可以看到，我想要获取wrapped这个被修饰函数的文档字符串，但是却获取成了wrapper_function的文档字符串，wrapped函数的名字也变成了wrapper_function函数的名字。这是因为给wrapped添加上@wrapper修饰器相当于执行了一句wrapped = wrapper(wrapped)，执行完这条语句之后，wrapped函数就变成了wrapper_function函数。遇到这种情况该怎么办呢，首先我们可以手动地在wrapper函数中更改wrapper_function的__doc__和__name__属性，但聪明的你肯定也想到了，我们可以直接用update_wrapper函数来实现这个功能。\n自定义修饰器v2\n我们对上面定义的修饰器稍作修改，添加了一句update_wrapper(wrapper_function, f)。\nfrom functools import update_wrapper\n\ndef wrapper(f):\n    def wrapper_function(*args, **kwargs):\n        \"\"\"这个是修饰函数\"\"\"\n        return f(*args, **kwargs)\n    update_wrapper(wrapper_function, f)  # <<  添加了这条语句\n    return wrapper_function\n    \n@wrapper\ndef wrapped():\n    \"\"\"这个是被修饰的函数\"\"\"\n    print('wrapped')\n\n\nprint(wrapped.__doc__)  # 输出`这个是被修饰的函数`\nprint(wrapped.__name__)  # 输出`wrapped`\n此时我们可以发现，__doc__和__name__属性已经能够按我们预想的那样显示了，除此之外，update_wrapper函数也对__module__和__dict__等属性进行了更改和更新。\nwraps修饰器\nOK，至此，我们已经了解了partial和update_wrapper这两个函数的功能，接下来我们翻出wraps修饰器的源码：\nWRAPPER_ASSIGNMENTS = ('__module__', '__name__', '__qualname__', '__doc__',\n                       '__annotations__')\nWRAPPER_UPDATES = ('__dict__',)\ndef wraps(wrapped,\n          assigned = WRAPPER_ASSIGNMENTS,\n          updated = WRAPPER_UPDATES):\n    return partial(update_wrapper, wrapped=wrapped,\n                   assigned=assigned, updated=updated)\n没错，就是这么的简单，只有这么一句，我们可以看出，wraps函数其实就是一个修饰器版的update_wrapper函数，它的功能和update_wrapper是一模一样的。我们可以修改我们上面的自定义修饰器的例子，做出一个更方便阅读的版本。\n自定义修饰器v3\nfrom functools import wraps\n\ndef wrapper(f):\n    @wraps(f)\n    def wrapper_function(*args, **kwargs):\n        \"\"\"这个是修饰函数\"\"\"\n        return f(*args, **kwargs)\n    return wrapper_function\n    \n@wrapper\ndef wrapped():\n    \"\"\"这个是被修饰的函数\n    \"\"\"\n    print('wrapped')\n\nprint(wrapped.__doc__)  # 输出`这个是被修饰的函数`\nprint(wrapped.__name__)  # 输出`wrapped`\n至此，我想大家应该明白wraps这个修饰器的作用了吧，就是将 被修饰的函数(wrapped) 的一些属性值赋值给 修饰器函数(wrapper) ，最终让属性的显示更符合我们的直觉。\n参考链接\n\npython3 functools.wraps\npython装饰器和functools模块\nGithub - cpython functools源码\n\n\n                ", "mainLikeNum": ["8 "], "mainBookmarkNum": "5"}