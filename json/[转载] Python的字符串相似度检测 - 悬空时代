{"title": "[转载] Python的字符串相似度检测 - 悬空时代 ", "index": "相似度检测,python,字符串,levenshtein", "content": "\n\n安装python-Levenshtein模块\n\n\n  pip install python-Levenshtein\n\n\n\n使用python-Levenshtein模块\n\n\n  import Levenshtein\n\n\n\n算法说明\n\n1). Levenshtein.hamming(str1, str2)\n计算汉明距离。要求str1和str2必须长度一致。是描述两个等长字串之间对应 位置上不同字符的个数。\n\n2). Levenshtein.distance(str1, str2)\n计算编辑距离（也称为 Levenshtein距离）。是描述由一个字串转化成另一个字串最少的操作次数，在其中的操作包括插入、删除、替换。\n算法实现参考动态规划整理。\n\n3). Levenshtein.ratio(str1, str2)\n计算莱文斯坦比。计算公式r = (sum - ldist) / sum, 其中sum是指str1 和 str2 字串的长度总和，ldist是 类编辑距离\n注意 ：这里的类编辑距离不是2中所说的编辑距离，2中三种操作中每个操作+1，而在此处，删除、插入依然+1，但是替换+2\n这样设计的目的：ratio('a', 'c')，sum=2, 按2中计算为（2-1）/2 = 0.5,’a','c'没有重合，显然不合算，但是替换操作+2，就可以解决这个问题。\n\n4). Levenshtein.jaro(s1 , s2 )\n计算jaro距离，\n其中的 m 为s1 , s2的匹配长度，当某位置的认为匹配当该位置字符相同，或者在不超过\nt是调换次数的一半\n\n5.) Levenshtein.jaro_winkler(s 1 , s 2 )\n计算 Jaro–Winkler距离：\n\n\n\n原文：Python相似度计算\n转载自：蔡尐的博客\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "5"}