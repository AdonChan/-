{"title": "[译][Tkinter 教程13] Mastermind 游戏 - 个人文章 ", "index": "python,tkinter", "content": "已获原作者授权. 原系列地址: Python Tkinter\n\nMastermind 游戏\n本章我们演示一个进阶例子. 我们用 Tkinter 编写了 \"Bulls and Cows\" 游戏. 这个游戏也被称作 \"Cows and Bulls\" 或者 \"Pigs and Bulls\" 或者 \"Bulls and Cleots\", 是一个古老的益智解谜游戏, 由两名玩家参与. 早在19世纪, 人们就在用铅笔和纸来玩这个游戏了. Mordecai Meirowitz 在 1970 年发明的 Mastermind 游戏正是受到这个游戏的启发. Mastermind 和 Bulls and Cows 在基本理念上是一样的, 但 Mastermind 被盒装出售, 其中还包含了一个解谜棋盘和一些标记解谜和反馈的标签. Mastermind 使用颜色作为谜题信息, 而 Bulls and Cows 则是用数字做谜题信息.这个游戏的算法在我们的 Python 进阶教程中的 \"Mastermind / Bulls and Cows\" 一文内有详细阐释.\n\n实现代码\nfrom tkinter import *\nfrom tkinter.messagebox import *\nimport random\n\nfrom combinatorics import all_colours\n\ndef inconsistent(p, guesses):\n   \"\"\" the function checks, if a permutation p, i.e. a list of \ncolours like p = ['pink', 'yellow', 'green', 'red'] is consistent\nwith the previous colours. Each previous colour permuation guess[0]\ncompared (check()) with p has to return the same amount of blacks \n(rightly positioned colours) and whites (right colour at wrong \nposition) as the corresponding evaluation (guess[1] in the \nlist guesses) \"\"\"\n   for guess in guesses:\n      res = check(guess[0], p)\n      (rightly_positioned, permutated) = guess[1]\n      if res != [rightly_positioned, permutated]:\n         return True # inconsistent\n   return False # i.e. consistent\n\ndef answer_ok(a):\n   \"\"\" checking of an evaulation given by the human player makes \nsense. 3 blacks and 1 white make no sense for example. \"\"\"\n   (rightly_positioned, permutated) = a\n   if (rightly_positioned + permutated > number_of_positions) \\\n       or (rightly_positioned + permutated < len(colours) - number_of_positions):\n      return False\n   if rightly_positioned == 3 and permutated == 1:\n      return False\n   return True\n\ndef get_evaluation():\n   \"\"\" get evaluation from entry fields \"\"\"\n   rightly_positioned = int(entryWidget_both.get())\n   permutated = int(entryWidget_only_colours.get())\n   return (rightly_positioned, permutated)\n\ndef new_evaluation(current_colour_choices):\n   \"\"\" This funtion gets an evaluation of the current guess, checks \nthe consistency of this evaluation, adds the guess together with\nthe evaluation to the list of guesses, shows the previous guesses \nand creates a ne guess \"\"\"\n   rightly_positioned, permutated = get_evaluation()\n   if rightly_positioned == number_of_positions:\n      return(current_colour_choices, (rightly_positioned, permutated))\n    \n   if not answer_ok((rightly_positioned, permutated)):\n      print(\"Input Error: Sorry, the input makes no sense\")\n      return(current_colour_choices, (-1, permutated))\n   guesses.append((current_colour_choices, (rightly_positioned, permutated)))\n   view_guesses()\n    \n   current_colour_choices = create_new_guess() \n   show_current_guess(current_colour_choices)\n   if not current_colour_choices:\n      return(current_colour_choices, (-1, permutated))\n   return(current_colour_choices, (rightly_positioned, permutated))\n\n\ndef check(p1, p2):\n   \"\"\" check() calcualtes the number of bulls (blacks) and cows (whites)\nof two permutations \"\"\"\n   blacks = 0\n   whites = 0\n   for i in range(len(p1)):\n      if p1[i] == p2[i]:\n          blacks += 1\n      else:\n         if p1[i] in p2:\n             whites += 1\n   return [blacks, whites] \n\ndef create_new_guess():\n   \"\"\" a new guess is created, which is consistent to the \nprevious guesses \"\"\"\n   next_choice = next(permutation_iterator) \n   while inconsistent(next_choice, guesses):\n      try:\n         next_choice = next(permutation_iterator)\n      except StopIteration:\n         print(\"Error: Your answers were inconsistent!\")\n         return ()\n   return next_choice\n\n\ndef new_evaluation_tk():\n   global current_colour_choices\n   res = new_evaluation(current_colour_choices)\n   current_colour_choices = res[0]\n\ndef show_current_guess(new_guess):\n    row = 1 \n    Label(root, text=\"   New Guess:   \").grid(row=row, \n                                       column=0, \n                                       columnspan=4)\n    row +=1\n    col_count = 0\n    for c in new_guess:\n         print(c)\n         l = Label(root, text=\"    \", bg=c)\n         l.grid(row=row,column=col_count,  sticky=W, padx=2)\n         col_count += 1\n\ndef view_guesses():\n    row = 3\n    Label(root, text=\"Old Guesses\").grid(row=row, \n                                         column=0, \n                                         columnspan=4)\n    Label(root, text=\"c&p\").grid(row=row, \n                                 padx=5, \n                                 column=number_of_positions + 1)\n    Label(root, text=\"p\").grid(row=row, \n                               padx=5, \n                               column=number_of_positions + 2)\n    # dummy label for distance:\n    Label(root, text=\"         \").grid(row=row,  \n                                       column=number_of_positions + 3)\n\n\n    row += 1\n    # vertical dummy label for distance:\n    Label(root, text=\"             \").grid(row=row,  \n                                       column=0,\n                       columnspan=5)\n\n    for guess in guesses:\n      guessed_colours = guess[0]\n      col_count = 0\n      row += 1\n      for c in guessed_colours:\n         print(guessed_colours[col_count])\n         l = Label(root, text=\"    \", bg=guessed_colours[col_count])\n         l.grid(row=row,column=col_count,  sticky=W, padx=2)\n         col_count += 1\n      # evaluation:\n      for i in (0,1):\n        l = Label(root, text=str(guess[1][i]))\n        l.grid(row=row,column=col_count + i + 1, padx=2)\n\n\n\nif __name__ == \"__main__\":\n   colours = [\"red\",\"green\",\"blue\",\"yellow\",\"orange\",\"pink\"]\n   guesses = []                \n   number_of_positions = 4\n\n   permutation_iterator = all_colours(colours, number_of_positions)\n   current_colour_choices = next(permutation_iterator)\n\n   new_guess = (current_colour_choices, (0,0) )\n\n   row_offset = 1\n   root = Tk()\n   root.title(\"Mastermind\")\n   root[\"padx\"] = 30\n   root[\"pady\"] = 20   \n\n   entryLabel = Label(root)\n   entryLabel[\"text\"] = \"Completely Correct:\"\n   entryLabel.grid(row=row_offset, \n                sticky=E,\n                padx=5, \n                column=number_of_positions + 4)\n   entryWidget_both = Entry(root)\n   entryWidget_both[\"width\"] = 5\n   entryWidget_both.grid(row=row_offset, column=number_of_positions + 5)\n\n   entryLabel = Label(root)\n   entryLabel[\"text\"] = \"Wrong Position:\"\n   entryLabel.grid(row=row_offset+1, \n                sticky=E, \n                padx=5,\n                column= number_of_positions + 4)\n   entryWidget_only_colours = Entry(root)\n   entryWidget_only_colours[\"width\"] = 5\n   entryWidget_only_colours.grid(row=row_offset+1, column=number_of_positions + 5)\n\n\n\n   submit_button = Button(root, text=\"Submit\", command=new_evaluation_tk)\n   submit_button.grid(row=4,column=number_of_positions + 4)\n\n   quit_button = Button(root, text=\"Quit\", command=root.quit)\n   quit_button.grid(row=4,column=number_of_positions + 5)\n   show_current_guess(current_colour_choices)\n\n\n   root.mainloop()\n\n译者注: 不打算翻译这篇文章中提到的那篇进阶教程了...\n全系列:[译][Tkinter 教程01] 入门: Label 控件[译][Tkinter 教程02] Message 控件[译][Tkinter 教程03] Button 控件[译][Tkinter 教程04] Variable 类[译][Tinkter 教程05] Radiobutton 控件[译][Tkinter 教程06] Checkbox 控件[译][Tkinter 教程07] Entry 控件[译][Tkinter 教程08] Canvas 图形绘制[译][Tkinter 教程09] Scale 控件[译][Tkinter 教程10] Text 控件[译][Tkinter 教程11] 对话框和消息框[译][Tkinter 教程12] 布局管理 (Pack Place Grid)[译][Tkinter 教程13] Mastermind 游戏[译][Tkinter 教程14] menu 菜单[译][Tkinter 教程15] event 事件绑定\n\n译者水平有限, 如有疏漏, 欢迎指正.已获得原作者授权. 原文地址: Mastermind in TK.\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}