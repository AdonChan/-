{"title": "9-django——restful设计风格 - Python全栈玩起来 ", "index": "python,django", "content": "\nRESTful Api设计风格\n协议：API与用户的通信协议，总是使用HTTPS协议\n域名：应该尽量将API部署在专用域名之下，如果确定API很简单，不会有进一步的扩展，可以考虑放在主域名之下。\n版本：\n\n应该将API的版本放在URL中：https://www.sunck.wang/api/v1.0\n\n将版本号放在HTTP头信息中：https://www.sunck.wang/students\n\n\n路径：表示API的具体网址，每个网址代表一种资源，所以网址中不能有动词，只能有名词，并且所用的名词往往与数据库的表名对应。数据库中的表示记录同种数据的集合，所以API中的名词也应该使用复数。\n获取所有学生：\n\n\nhttps://www.sunck.wang/api/v1...  错误写法\n\nhttps://www.sunck.wang/api/v1...  正确写法\n\n使用正确的HTTP请求方法\n\n\n方式\n解释\n\n\n\nGET  select\n从服务器获取资源(一项或者多项)\n\n\nPOST  create\n在服务器新建一个资源\n\n\nPUT   update\n在服务器更新资源(客户端提供改变后的完整资源)\n\n\nPATCH   update\n在服务器更新资源(客户端提供改的属性)\n\n\nDELETE    delete\n从服务器删除资源\n\n\nHEAD\n获取资源的元数据\n\n\nOPTIONS\n获取信息，关于资源的哪些属性是客户端可以改变的\n\n\n\n例子\n\n\n描述\n方式\n\n\n\n列出所有班级\nGET   /grades/\n\n\n获取某个指定班级编号的信息\nGET   /grades/id\n\n\n列出某个指定编号的班级的所有学生\nGET   /grades/id/students/\n\n\n获取某个指定编号的学生信息\nGET   /students/id\n\n\n创建一个学生\nPOST  /students/\n\n\n更新某个指定学生的信息(信息全部由客户端提供)\nPUT  /students/id\n\n\n删除某个指定编号的学生\nDELETE  /students/id\n\n\n删除某个指定班级的下的所有学生\nDELETE   /grades/id/students/\n\n\n\n过滤信息\n如果资源数较多，服务器不能将所有数据一次全部返回给客户端，API应该提供参数，过滤返回结果\n例子\n\n\n描述\n方式\n\n\n\n指定返回记录的数量\nGET   /students/?limit=\n\n\n指定返回记录的开始位置\nGET   /students/?offset=\n\n\n指定返回第几页数据，以及每页的记录数\nGET   /students/?page=&per_page=\n\n\n指定返回结果按照哪个属性排序，以及排序的顺序\nGET   /students/?sortby=&order=\n\n\n指定筛选条件\nGET   /students/?student_age_gt=\n\n\n\n注意：参数的设计允许存在冗余，即允许API路径和URL参数偶尔有重复\n状态码\n服务器向客户端返回的状态码和提示信息\n\n\n错误处理\n如果错误码是4xx，就应该向用户返回错误信息，一般来说，返回的信息中将error作为键名，出错的信息作为键值即可\n{\n    error:'Invalid API KEY',\n}\n响应结果\n针对不同的操作，服务器向用户返回结果应该符合规范\n\n\n方式\n描述\n\n\n\nGET  /students/\n返回资源对象的列表\n\n\nGET  /students/id/\n返回单个资源对象\n\n\nPOST  /students/\n返回新生成的资源对象\n\n\nPUT  /students/\n返回完整的资源对象\n\n\nPATCH  /students/\n返回完整的资源对象\n\n\nDELETE  /students/id/\n返回一个空文档\n\n\n\n使用链接相关的资源\n返回结果中提供了链接，链向了其他的API方法，使得用户不查看文档，也知道下一步应该做什么\n示例\n{\n    link:\"www.sunck.wang/grades/\"\n}\n{\n    \"link\":{\n        \"rel\":\"collection www.sunck.wang/index/\",\n        \"href\":\"www.sunck.wang/grades/\",\n        \"title\":\"List of Grades\",\n        \"type\":\"application/json\",\n    }\n}\n\n键\nrel：表示这个API与当前网址的关系\nhref：表示API路径\ntitle：表示API的标题\ntype：表示返回的类型\n其他：服务器返回的数据尽量使用JSON格式，避免使用XML格式\nAPI文档规范要求\n一、        写明该接口的功能是什么\n二、        请求的URL是什么\n三、        请求方式是什么（POST、GET、 DELETE、PUT、 PATCH等）\n四、        参数是什么，此处还需说明你的参数名、参数类型、是否必填、参数的简单解释\n五、        请求成功时的响应内容（实际开发中，要与前端同事沟通使用什么样的数据结构），并且对其中的字段做出说明（包括含义、数据类型，数据结构<字符串，数组，字典等>）\n六、        请求失败时的响应内容，并且对其中的字段做出说明（包括含义、数据类型，数据结构<字符串，数组，字典等>）包括单独的对错误码的说明\n七、        请求样例（返回结果部分要包括成功的情况和失败的情况）\n八、        最好写上文档的编写人和编写时间（可不写）\nDemo：\n​       功能：获取某人的下属\n​       URL：”people/api/v1/ subordinate”\n请求参数说明：\n\n\n参数名\n类型\n是否必填\n备注\n\n\nuid\nint\n是\n用户的id\n\n\n请求成功参数说明\n\n\n参数名\n类型\n说明\n\n\n\ncode\nInt\n响应状态码1代表成功\n\n\nmsg\nstring\n响应信息\n\n\ndata\n数组\n数组内是字典类型，详情见下表\n\n\n\ndata内的响应参数说明\n\n\n参数名\n类型\n说明\n\n\n\nuid\nint\n下属的用户ID\n\n\nname\nstring\n下属的用户名\n\n\nposition\nstring\n下属的岗位\n\n\n\n​请求失败参数说明\n\n\n参数名\n类型\n说明\n\n\n\ncode\nInt\n响应状态码非1值\n\n\nmsg\nstring\n错误提示信息\n\n\n\ncode值说明\n\n\nCode\n说明\n\n\n\n1\n成功\n\n\n2\n该人已经离职\n\n\n3\n请求参数不完整\n\n\n4\n参数类型错误\n\n\n\n样例：\n​       请求参数  uid   1\n# 请求成功样例\n{    \n    'code': 1,\n    'msg': 'ok',\n    'data':[\n        {\n        'uid':2,\n        'name': 'Tom',\n        'position': '教师'\n        },\n        {\n        'uid':3,\n        'name’: 'Lucy',\n        'position': '助教'\n        }\n    ]\n}\n\n# 请求失败样例\n    {\n        'data': 2,\n        'msg': '该人已离职'\n}\n\n10-django——RESTful API 之序列化\n\n                ", "mainLikeNum": ["20 "], "mainBookmarkNum": "10"}