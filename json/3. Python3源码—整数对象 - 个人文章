{"title": "3. Python3源码—整数对象 - 个人文章 ", "index": "数组,数据结构,源码,python", "content": "3.1. 整数对象\n整数对象是“变长对象”。\n3.1.1. Python中的创建\nPython中整数对象最重要的创建方法为PyLong_FromLong，如下Python语句最终会调用到PyLong_FromLong：\n\n3.1.2. PyLong_FromLong的C调用栈\n词法解析，最终调到PyLong_FromLong，调用顺序如下：\n\n3.1.3. PyLong_FromLong源码\n\n3.1.4. 整数对象的C数据结构\n此处使用了C语言的技巧：把单一元素的数组放在一个struct的尾端，每个struct objects可以拥有可变大小的数组（深度探索C++对象模型 P19）。\n\n从数据结构也可以看出Python中的整数对象是“变长对象”。\n3.1.5. 小整数和大整数\n从上述源码中可以看到，整数分为小整数、介于小整数和大整数之间的整数和大整数三类，处理不尽相同。对于负数，转成正数，并记录符号。\n小整数：\nCHECK_SMALL_INT用于处理小整数，[-5, 257)在Python中被视为小整数。\n\nsmall_ints在_PyLong_Init中被初始化：\n\n如果在[-5, 257)范围内，会直接返回存于small_ints的对象，所以小整数只会存在一个实例：\n\n介于小整数和大整数之间的整数：[257, 1073741824)\n\n大整数：[1073741824, +∞)\n\nPython的整数不再有限制。\nThe sys.maxint constant was removed, since there is no longer a limit to the value of integers. However, sys.maxsize can be used as an integer larger than any practical list or string index. It conforms to the implementation’s “natural” integer size and is typically the same as sys.maxint in previous releases on the same platform (assuming the same build options).\n3.1.6. PyLong_FromLong中其它需要关注的\n_PyLong_New，此方法需要注意内存分配计算方式，以及最后初始化变长变量调用了PyObject_INIT_VAR方法：\n\nPyObject_INIT_VAR，初始化变长变量：\n\nrelease版本下_Py_INC_TPALLOCS、_Py_COUNT_ALLOCS_COMMA、_Py_INC_REFTOTAL、_Py_REF_DEBUG_COMMA都没有定义，所以PyObject_INIT_VAR其实就是将PyVarObject对象的ob_size、ob_type和ob_refcnt进行了赋值。\nPy_SAFE_DOWNCAST，只是一个强转：\n\n3.2. 整数对象的特性\n3.2.1. 数值计算\n\n整数对象的数值计算由long_as_number定义：\n\n3.2.2. to string\n\n3.2.3. hash\n\n3.2.4. 比较\n\n3.2.5. 内置方法\n\n3.2.6. 内置属性\n\n3.3 参考\n\nPython源码剖析\nhttps://docs.python.org/3.1/w...\n\n本文作者：whj0709阅读原文本文为云栖社区原创内容，未经允许不得转载。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}