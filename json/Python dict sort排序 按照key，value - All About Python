{"title": "Python dict sort排序 按照key，value - All About Python ", "index": "dict,python", "content": "我们知道Python的内置dictionary数据类型是无序的，通过key来获取对应的value。可是有时我们需要对dictionary中 的item进行排序输出，可能根据key，也可能根据value来排。到底有多少种方法可以实现对dictionary的内容进行排序输出呢？下面摘取了 一些精彩的解决办法。\n最简单的方法，这个是按照key值排序：\n    def sortedDictValues1(adict): \n        items = adict.items() \n        items.sort() \n    return [value for key, value in items] \n\n又一个按照key值排序，貌似比上一个速度要快点\ndef sortedDictValues2(adict): \nkeys = adict.keys() \nkeys.sort() \nreturn [dict[key] for key in keys] \n还是按key值排序，据说更快。。。而且当key为tuple的时候照样适用\ndef sortedDictValues3(adict): \nkeys = adict.keys() \nkeys.sort() \nreturn map(adict.get, keys) \n一行语句搞定：\n[(k,di[k]) for k in sorted(di.keys())] \n来一个根据value排序的，先把item的key和value交换位置放入一个list中，再根据list每个元素的第一个值，即原来的value值，排序：\ndef sort_by_value(d): \nitems=d.items() \nbackitems=[[v[1],v[0]] for v in items] \nbackitems.sort() \nreturn [ backitems[i][1] for i in range(0,len(backitems))] \n还是一行搞定：\n[ v for v in sorted(di.values())] \n用lambda表达式来排序，更灵活：\nsorted(d.items(), lambda x, y: cmp(x[1], y[1])), 或反序： \nsorted(d.items(), lambda x, y: cmp(x[1], y[1]), reverse=True) \n用sorted函数的key= 参数排序：\n按照key进行排序\nprint sorted(dict1.items(), key=lambda d: d[0]) \n按照value进行排序\nprint sorted(dict1.items(), key=lambda d: d[1]) \n下面给出python内置sorted函数的帮助文档： sorted(...) sorted(iterable, cmp=None, key=None, reverse=False) --> new sorted list \n看了上面这么多种对dictionary排序的方法，其实它们的核心思想都一样，即把dictionary中的元素分离出来放到一个list中，对list排序，从而间接实现对dictionary的排序。这个“元素”可以是key，value或者item。\n一上转 \n按照value排序可以用 \nsorted(d.items, key=lambda d:d[1]) \n若版本低不支持sorted \n将key,value 以tuple一起放在一个list中 \nl = [] \nl.append((akey,avalue))... \n用sort（） \nl.sort(lambda a,b :cmp(a[1],b[1]))(cmp前加“-”表示降序排序)\n\n                ", "mainLikeNum": ["6 "], "mainBookmarkNum": "11"}