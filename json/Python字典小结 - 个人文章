{"title": "Python字典小结 - 个人文章 ", "index": "python", "content": "  字典（dict）结构是Python中常用的数据结构，笔者结合自己的实际使用经验，对字典方面的相关知识做个小结，希望能对读者一些启发~\n创建字典\n  常见的字典创建方法就是先建立一个空字典，然后逐一添加键（key）和值（value），比如创建字典person={'name':'Tome', 'age':22, 'city':'Shanghai, 'ID': '073569'}，可以使用以下代码：\nperson = {}\n\nperson['name'] = 'Tom'\nperson['age'] = 22\nperson['city'] = 'Shanghai'\nperson['ID'] = '073569'\n\nprint(person)\n输出结果为：\n{'name': 'Tom', 'age': 22, 'city': 'Shanghai', 'ID': '073569'}\n这样的创建方式简单原始，代码不够简洁优雅。我们用zip函数，来简单快捷地创建这个字典：\nattrs = ['name', 'age', 'city', 'ID']\nvalues = ['Tom', 22, 'Shanghai', '073569']\nperson = dict(zip(attrs, values))\n\nprint(person)\n输出结果与原先代码一致。\n遍历字典\n  在实际应用中，我们常常需要遍历字典，实现的方法可参考以下代码：\nattrs = ['name', 'age', 'city', 'ID']\nvalues = ['Tom', 22, 'Shanghai', '073569']\nperson = dict(zip(attrs, values))\n\nfor key, value in person.items():\n    print('Key:%-6s, Value:%s'%(key, value))\n输出结果为：\nKey:name  , Value:Tom\nKey:age   , Value:22\nKey:city  , Value:Shanghai\nKey:ID    , Value:073569\n对调键值对\n  在实际应用中，有时候我们需要查找字典中某个值（value）对应的键（key），遍历字典是一种选择，对调键值对是另一种选择。对调键值对的实现代码如下：\nattrs = ['name', 'age', 'city', 'ID']\nvalues = ['Tom', 22, 'Shanghai', '073569']\nperson = dict(zip(attrs, values))\n\nprint('对调前：')\nprint(person)\n\nPerson = {v:k for k,v in person.items()}\n\nprint('对调后：')\nprint(Person)\n输出结果为：\n对调前：\n{'name': 'Tom', 'age': 22, 'city': 'Shanghai', 'ID': '073569'}\n对调后：\n{'Tom': 'name', 22: 'age', 'Shanghai': 'city', '073569': 'ID'}\n有序字典OrderedDict\n  Python中的字典是无序的，其取出来的键是无序的，因为它是按照hash来储存的。有时候，我们需要字典的条目（items）或键（keys）是有序储存的，这时候可以使用collections模块中的OrderedDict，它是一种有序的字典结构。  示例代码如下（Python版本为3.5.2）：\nfrom collections import OrderedDict\n\nd = {}\nd['Tom']='A'\nd['Jack']='B'\nd['Leo']='C'\nd['Alex']='D'\nprint('无序字典（dict）：')\nfor k,v in d.items():\n    print(k,v)\n\nd1 = OrderedDict()\nd1['Tom']='A'\nd1['Jack']='B'\nd1['Leo']='C'\nd1['Alex']='D'\nprint('\\n有序字典（OrderedDict）：')\nfor k,v in d1.items():\n    print(k,v)\n输出的结果为：\n无序字典（dict）：\nLeo C\nJack B\nTom A\nAlex D\n\n有序字典（OrderedDict）：\nTom A\nJack B\nLeo C\nAlex D\n默认字典collections.defaultdict\n  collections.defaultdict是Python内建dict类的一个子类，第一个参数为default_factory属性提供初始值，默认为None。它覆盖一个方法并添加一个可写实例变量。它的其他功能与dict相同，但会为一个不存在的键提供默认值，从而避免KeyError异常。  我们以统计列表中单词的词频为例，展示collections.defaultdict的优势。  一般情形下，我们统计列表中的单词词频代码为：\nwords = ['sun', 'moon', 'star', 'star',\\\n         'star', 'moon', 'sun', 'star']\n\nfreq_dict = {}\nfor word in words:\n    if word not in freq_dict.keys():\n        freq_dict[word] = 1\n    else:\n        freq_dict[word] += 1\n\nfor key, val in freq_dict.items():\n    print(key, val)\n输出结果如下：\nsun 2\nmoon 2\nstar 4\n  使用collections.defaultdict，代码可以优化：\nfrom collections import defaultdict\n\nwords = ['sun', 'moon', 'star', 'star',\\\n         'star', 'moon', 'sun', 'star']\n\nfreq_dict = defaultdict(int)\nfor word in words:\n    freq_dict[word] += 1\n\nfor key, val in freq_dict.items():\n    print(key, val)\n其它默认初始值可以为set,list,dict等。\n注意：本人现已开通微信公众号： Python爬虫与算法（微信号为：easy_web_scrape）， 欢迎大家关注哦~~\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}