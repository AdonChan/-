{"title": "Numpy 中文用户指南 3.2 创建数组 - 飞龙 ", "index": "科学计算,数据分析,numpy,python", "content": "\n原文：Array creation\n译者：飞龙\n\n‍\n\n另见\n数组创建例程\n\n导言\n数组创建的一般机制有五种：\n\n从其它Python的结构转换（如列表和元组）\n内置的NumPy数组创建对象（如 arange, ones, zeros以及其它）\n从磁盘中读取标准或自定义格式的数据\n通过使用字符串或者缓冲区，从原始的字节创建数组\n使用特殊的库函数（比如random）\n\n本节不会涉及复制和连接等扩展和转换现有数组的方法，也不会涉及创建对象数组和结构化数组。这些会在它们自己的章节中讲述。\n将Python类似数组的对象转换为NumPy数组\n通常，Python中排列为数组结构的数值数据可以通过array()函数来转换成数组，典型的例子就是列表和元组。具体使用方法请见array()函数的文档。一些对象也支持数组的协议，并且可以用这种方法转换成数组。辨识一个对象是否能转换为数组，最简单的方法就是在交互式环境中尝试这一方法，看看它是否有效（即Python之道）。\n例如：\n>>> x = np.array([2,3,1,0])\n>>> x = np.array([2, 3, 1, 0])\n>>> x = np.array([[1,2.0],[0,0],(1+1j,3.)]) # note mix of tuple and lists,\n    and types\n>>> x = np.array([[ 1.+0.j, 2.+0.j], [ 0.+0.j, 0.+0.j], [ 1.+1.j, 3.+0.j]])\n内置的NumPy数组创建\nNumPy具有从无到有创建数组的内置功能：\nzeros(shape) 将创建一个填充为0的指定形状的数组。\n>>> np.zeros((2, 3)) array([[ 0., 0., 0.], [ 0., 0., 0.]])\nones(shape) 将创建一个填充为1的数组。在其他所有方面都和zeros相同。\narange()将创建有规律的增量值数组。它的几种用法请见docstring。这里给出几个例子：\n>>> np.arange(10)\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n>>> np.arange(2, 10, dtype=np.float)\narray([ 2., 3., 4., 5., 6., 7., 8., 9.])\n>>> np.arange(2, 3, 0.1)\narray([ 2. , 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9])\n请注意，关于最后一个用例，有一些使用技巧，请见arrange的docstring。\nlinspace()将以指定数量的元素创建数组，并平分开始值和结束值。例如：\n>>> np.linspace(1., 4., 6)\narray([ 1. ,  1.6,  2.2,  2.8,  3.4,  4. ])\n这些创建函数的好处是，可以保证元素个数、起始点和结束点，arange()一般不会指定任意的起始值、结束值和步长。\nindices()将创建数组的集合（用一维数组来模拟高维数组），每一维都有表示它的变量。一个例子说明比口头描述好得多：\n>>> np.indices((3,3))\narray([[[0, 0, 0], [1, 1, 1], [2, 2, 2]], [[0, 1, 2], [0, 1, 2], [0, 1, 2]]])\n计算规则网格上的高维函数时，这会非常有用。\n从磁盘读取数组\n这大概是大数组创建的最常见情况。当然，细节取决于磁盘上的数据格式，所以这一节只能给出如何处理各种格式的一般建议。\n标准二进制格式\n各个领域都有数组数据的标准格式。以下列出了用于读取和返回NumPy数组的已知Python库（也有其它的库可以读取数组并转换为NumPy数组，所以也请看一下最后一节）\nHDF5: PyTables\nFITS: PyFITS\n一些格式不能直接读取，但是不难将其转换为类似PIL库（能够读写许多图像格式，例如jpg、png以及其它）所支持的格式。\n普通的ASCII格式\n逗号分隔值文件（CSV）被广泛使用（可以被类似Excel的一些程序导入导出）。有一些在python中读取这些文件的方法，例如Python和pylab（Matplotlib的一部分）中的函数。\n更通用的ASCII文件可以使用SciPy的IO包来读取。\n自定义二进制格式\n有多种方法可以使用。如果文件有一个相对简单的格式，那么你可以写一个简单的I/O库并使用numpy fromfile()和tofile()方法直接读写NumPy数组（注意字节顺序！）。如果有一个不错的C/C++库可以用于读取数据，则可以用各种技巧把它封装一下，虽然这可能要耗费一些工作量，也需要更多高级的知识来和C/C++交互。\n特殊库的使用\n有一些库可以用于生成特殊用途的数组，这样的库不可能全部列举出来。最常见的用法是使用许多数组生成函数来产生带有随机值的数组，以及使用一些生成特殊矩阵（如对角线）的功能函数。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "4"}