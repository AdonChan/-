{"title": "微信小程序开发：python+sanic 实现小程序登录注册 - 古寺比的寺 ", "index": "微信小程序,小程序,jwt,python,javascript", "content": "开发微信小程序时，接入小程序的授权登录可以快速实现用户注册登录的步骤，是快速建立用户体系的重要一步。这篇文章将介绍 python + sanic + 微信小程序实现用户快速注册登录全栈方案。\n微信小程序登录时序图如下：\n\n这个流程分为两大部分：\n\n小程序使用 wx.login() API 获取 code，调用 wx.getUserInfo() API 获取 encryptedData 和 iv，然后将这三个信息发送给第三方服务器。\n第三方服务器获取到 code、encryptedData和 iv 后，使用 code 换取 session_key，然后将 session_key 利用 encryptedData 和 iv 解密在服务端获取用户信息。根据用户信息返回 jwt 数据，完成登录。\n\n下面我们先看一下小程序提供的 API。\n小程序登录 API\n在这个授权登录的过程中，用到的 API 如下：\n\nwx.login\nwx.getUserInfo\n\nwx.chekSession 是可选的，这里并没有用到。\nwx.login(OBJECT)\n调用此接口可以获取登录凭证（code），以用来换取用户登录态信息，包括用户的唯一标识（openid） 及本次登录的 会话密钥（session_key）。\n如果接口调用成功，返回结果如下：\n\n\n参数名\n类型\n说明\n\n\n\nerrMsg\nString\n调用结果\n\n\ncode\nString\n用户允许登录后，回调内容会带上 code（有效期五分钟），开发者需要将 code 发送到开发者服务器后台，使用code 换取 session_key api，将 code 换成 openid 和 session_key\n\n\n\ncode 换取 session_key\n开发者服务器使用登录凭证 code 获取 session_key 和 openid。其中 session_key 是对用户数据进行加密签名的密钥。为了自身应用安全，session_key 不应该在网络上传输。所以这一步应该在服务器端实现。\nwx.getUserInfo\n此接口用来获取用户信息。\n当 withCredentials 为 true 时，要求此前有调用过 wx.login 且登录态尚未过期，此时返回的数据会包含 encryptedData, iv 等敏感信息；当 withCredentials 为 false 时，不要求有登录态，返回的数据不包含 encryptedData, iv 等敏感信息。\n接口success 时返回参数如下：\n\n\n参数名\n类型\n说明\n\n\n\nuserInfo\nOBJECT\n用户信息对象，不包含 openid 等敏感信息\n\n\nrawData\nString\n不包括敏感信息的原始数据字符串，用于计算签名。\n\n\nsignature\nString\n使用 sha1( rawData + sessionkey ) 得到字符串，用于校验用户信息，参考文档 signature。\n\n\nencryptedData\nString\n包括敏感数据在内的完整用户信息的加密数据，详细见加密数据解密算法\n\n\niv\nString\n加密算法的初始向量，详细见加密数据解密算法\n\n\n\nencryptedData 解密后为以下 json 结构，详见加密数据解密算法\n{\n    \"openId\": \"OPENID\",\n    \"nickName\": \"NICKNAME\",\n    \"gender\": GENDER,\n    \"city\": \"CITY\",\n    \"province\": \"PROVINCE\",\n    \"country\": \"COUNTRY\",\n    \"avatarUrl\": \"AVATARURL\",\n    \"unionId\": \"UNIONID\",\n    \"watermark\":\n    {\n        \"appid\":\"APPID\",\n    \"timestamp\":TIMESTAMP\n    }\n}\n由于解密 encryptedData 需要 session_key 和 iv 所以，在给服务器端发送授权验证的过程中需要将 code、encryptedData 和 iv 一起发送。\n服务器端提供的 API\n服务器端授权需要提供两个 API：\n\n/oauth/token 通过小程序提供的验证信息获取服务器自己的 token\n/accounts/wxapp 如果登录用户是未注册用户，使用此接口注册为新用户。\n\n换取第三方 token（/oauth/token）\n开始授权时，小程序调用此 API 尝试换取jwt，如果用户未注册返回401，如果用户发送参数错误，返回403。\n接口 获取 jwt 成功时返回参数如下：\n\n\n参数名\n类型\n说明\n\n\n\naccount_id\nstring\n当前授权用户的用户 ID\n\n\naccess_token\nstring\njwt（登录流程中的第三方 session_key\n\n\ntoken_type\nstring\ntoken 类型（固定Bearer）\n\n\n\n小程序授权后应该先调用此接口，如果结果是用户未注册，则应该调用新用户注册的接口先注册新用户，注册成功后再调用此接口换取 jwt。\n新用户注册（/accounts/wxapp）\n注册新用户时，服务器端需要存储当前用户的 openid，所以和授权接口一样，请求时需要的参数为 code、encryptedData 和 iv。\n注册成功后，将返回用户的 ID 和注册时间。此时，应该再次调用获取 token 的接口去换取第三方 token，以用来下次登录。\n实现流程\n接口定义好之后，来看下前后端整体的授权登录流程。\n\n这个流程需要注意的是，在 C 步（使用 code 换取 session ）之后我们得到 session_key，然后需要用 session_key 解密得到用户数据。\n然后使用 openid 判断用户是否已经注册，如果用户已经注册，生成  jwt 返回给小程序。如果用户未注册返回401， 提示用户未注册。\n\njwt(3rd_session) 用于第三方服务器和小程序之间做登录态校验，为了保证安全性，jwt 应该满足：\n\n足够长。建议有 2^128 组合\n避免使用 srand(当前时间)，然后 rand() 的方法，而是采用操作系统提供的真正随机数机制。\n设置一定的有效时间，\n\n\n当然，在小程序中也可以使用手机号登录，不过这是另一个功能了，就不在这里叙述了。\n代码实现\n说了这么多，接下来看代码吧。\n小程序端代码\n代码逻辑为：\n\n用户在小程序授权\n小程序将授权消息发送到服务器，服务器检查用户是否已经注册，如果注册返回 jwt，如果没注册提示用户未注册，然后小程序重新请求注册接口，注册用户，注册成功后重复这一步。\n\n为了简便，这里在小程序 启动的时候就请求授权。代码实现如下。\n//app.js\nvar config = require('./config.js')\n\nApp({\n    onLaunch: function() {\n        //调用API从本地缓存中获取数据\n        var jwt = wx.getStorageSync('jwt');\n        var that = this;\n        if (!jwt.access_token){ //检查 jwt 是否存在 如果不存在调用登录\n            that.login();\n        } else {\n            console.log(jwt.account_id);\n        }\n    },\n    login: function() {\n        // 登录部分代码\n        var that = this;\n        wx.login({\n            // 调用 login 获取 code\n            success: function(res) {\n                var code = res.code;\n                wx.getUserInfo({\n                    // 调用 getUserInfo 获取 encryptedData 和 iv\n                    success: function(res) {\n                        // success\n                        that.globalData.userInfo = res.userInfo;\n                        var encryptedData = res.encryptedData || 'encry';\n                        var iv = res.iv || 'iv';\n                        console.log(config.basic_token);\n                        wx.request({ // 发送请求 获取 jwt\n                            url: config.host + '/auth/oauth/token?code=' + code,\n                            header: {\n                                Authorization: config.basic_token\n                            },\n                            data: {\n                                username: encryptedData,\n                                password: iv,\n                                grant_type: \"password\",\n                                auth_approach: 'wxapp',\n                            },\n                            method: \"POST\",\n                            success: function(res) {\n                                if (res.statusCode === 201) {\n                                    // 得到 jwt 后存储到 storage，\n                                    wx.showToast({\n                                        title: '登录成功',\n                                        icon: 'success'\n                                    });\n                                    wx.setStorage({\n                                        key: \"jwt\",\n                                        data: res.data\n                                    });\n                                    that.globalData.access_token = res.data.access_token;\n                                    that.globalData.account_id = res.data.sub;\n                                } else if (res.statusCode === 401){\n                                    // 如果没有注册调用注册接口\n                                    that.register();\n                                } else {\n                                    // 提示错误信息\n                                    wx.showToast({\n                                        title: res.data.text,\n                                        icon: 'success',\n                                        duration: 2000\n                                    });\n                                }\n                            },\n                            fail: function(res) {\n                                console.log('request token fail');\n                            }\n                        })\n                    },\n                    fail: function() {\n                        // fail\n                    },\n                    complete: function() {\n                        // complete\n                    }\n                })\n            }\n        })\n\n    },\n    register: function() {\n        // 注册代码\n        var that = this;\n        wx.login({ // 调用登录接口获取 code\n            success: function(res) {\n                var code = res.code;\n                wx.getUserInfo({\n                    // 调用 getUserInfo 获取 encryptedData 和 iv\n                    success: function(res) {\n                        // success\n                        that.globalData.userInfo = res.userInfo;\n                        var encryptedData = res.encryptedData || 'encry';\n                        var iv = res.iv || 'iv';\n                        console.log(iv);\n                        wx.request({ // 请求注册用户接口\n                            url: config.host + '/auth/accounts/wxapp',\n                            header: {\n                                Authorization: config.basic_token\n                            },\n                            data: {\n                                username: encryptedData,\n                                password: iv,\n                                code: code,\n                            },\n                            method: \"POST\",\n                            success: function(res) {\n                                if (res.statusCode === 201) {\n                                    wx.showToast({\n                                        title: '注册成功',\n                                        icon: 'success'\n                                    });\n                                    that.login();\n                                } else if (res.statusCode === 400) {\n                                    wx.showToast({\n                                        title: '用户已注册',\n                                        icon: 'success'\n                                    });\n                                    that.login();\n                                } else if (res.statusCode === 403) {\n                                    wx.showToast({\n                                        title: res.data.text,\n                                        icon: 'success'\n                                    });\n                                }\n                                console.log(res.statusCode);\n                                console.log('request token success');\n                            },\n                            fail: function(res) {\n                                console.log('request token fail');\n                            }\n                        })\n                    },\n                    fail: function() {\n                        // fail\n                    },\n                    complete: function() {\n                        // complete\n                    }\n                })\n            }\n        })\n\n    },\n\n    get_user_info: function(jwt) {\n        wx.request({\n            url: config.host + '/auth/accounts/self',\n            header: {\n                Authorization: jwt.token_type + ' ' + jwt.access_token\n            },\n            method: \"GET\",\n            success: function (res) {\n                if (res.statusCode === 201) {\n                    wx.showToast({\n                        title: '已注册',\n                        icon: 'success'\n                    });\n                } else if (res.statusCode === 401 || res.statusCode === 403) {\n                    wx.showToast({\n                        title: '未注册',\n                        icon: 'error'\n                    });\n                }\n\n                console.log(res.statusCode);\n                console.log('request token success');\n            },\n            fail: function (res) {\n                console.log('request token fail');\n            }\n        })\n    },\n\n    globalData: {\n        userInfo: null\n    }\n})\n服务端代码\n服务端使用 sanic 框架 + swagger_py_codegen 生成 rest-api。数据库使用 MongoDB，python-weixin 实现了登录过程中 code 换取 session_key 以及 encryptedData 解密的功能，所以使用python-weixin 作为 python 微信 sdk 使用。\n\n为了过滤无效请求，服务器端要求用户在获取 token 或授权时在 header 中带上 Authorization 信息。 Authorization 在登录前使用的是 Basic 验证（格式 (Basic hashkey) 注 hashkey为client_id + client_secret 做BASE64处理），只是用来校验请求的客户端是否合法。不过Basic 基本等同于明文，并不能用它来进行严格的授权验证。\njwt 原理及使用参见 理解JWT（JSON Web Token）认证及实践\n\n使用 swagger 生成代码结构如下：\n\n由于代码太长，这里只放获取 jwt 的逻辑：\ndef get_wxapp_userinfo(encrypted_data, iv, code):\n    from weixin.lib.wxcrypt import WXBizDataCrypt\n    from weixin import WXAPPAPI\n    from weixin.oauth2 import OAuth2AuthExchangeError\n    appid = Config.WXAPP_ID\n    secret = Config.WXAPP_SECRET\n    api = WXAPPAPI(appid=appid, app_secret=secret)\n    try:\n        # 使用 code  换取 session key    \n        session_info = api.exchange_code_for_session_key(code=code)\n    except OAuth2AuthExchangeError as e:\n        raise Unauthorized(e.code, e.description)\n    session_key = session_info.get('session_key')\n    crypt = WXBizDataCrypt(appid, session_key)\n    # 解密得到 用户信息\n    user_info = crypt.decrypt(encrypted_data, iv)\n    return user_info\n\n\ndef verify_wxapp(encrypted_data, iv, code):\n    user_info = get_wxapp_userinfo(encrypted_data, iv, code)\n    # 获取 openid\n    openid = user_info.get('openId', None)\n    if openid:\n        auth = Account.get_by_wxapp(openid)\n        if not auth:\n            raise Unauthorized('wxapp_not_registered')\n        return auth\n    raise Unauthorized('invalid_wxapp_code')\n    \n    \ndef create_token(request):\n    # verify basic token\n    approach = request.json.get('auth_approach')\n    username = request.json['username']\n    password = request.json['password']\n    if approach == 'password':\n        account = verify_password(username, password)\n    elif approach == 'wxapp':\n        account = verify_wxapp(username, password, request.args.get('code'))\n    if not account:\n        return False, {}\n    payload = {\n        \"iss\": Config.ISS,\n        \"iat\": int(time.time()),\n        \"exp\": int(time.time()) + 86400 * 7,\n        \"aud\": Config.AUDIENCE,\n        \"sub\": str(account['_id']),\n        \"nickname\": account['nickname'],\n        \"scopes\": ['open']\n    }\n    token = jwt.encode(payload, 'secret', algorithm='HS256')\n    # 由于 account 中 _id 是一个 object 需要转化成字符串\n    return True, {'access_token': token, 'account_id': str(account['_id'])}\n具体代码可以在 Metis：https://github.com/gusibi/Metis 查看。\n\nNote: 如果试用代码，请先设定 oauth2_client，使用自己的配置。\n不要将私密配置信息提交到 github。\n\n参考链接\n\n《微信小程序七日谈》- 第五天：你可能要在登录功能上花费大力气\n理解JWT（JSON Web Token）认证及实践\n网站微信登录－python 实现\n\n\n最后，感谢女朋友支持。\n\n\n欢迎关注(April_Louisa)\n请我喝芬达\n\n\n\n\n\n\n\n                ", "mainLikeNum": ["5 "], "mainBookmarkNum": "22"}