{"title": "Anacodna之conda VS Virtualenv VS Python 3 venv 对比使用教程，创建虚拟环境 - michael翔的IT私房菜 ", "index": "conda,anaconda,virtualenv,python", "content": "conda创建虚拟环境\n1.查看包\n\nconda list查看安装了哪些包\nconda env list查看有哪些虚拟环境\nconda -V查看conda的版本\n\n2.创建虚拟环境,命名为myflaskapp，n就是指name；并安装flask包。\nNote that the conda create command requires that you give it the name of a package to install in the new environment.\nconda命令创建虚拟环境时，必须指定一个或者几个你需要安装的package。\nconda create -n py2 python=2* anaconda这样就会安装anaconda2版本。\n栗子1：这条命令安装了一个名为myflaskapp虚拟环境，安装flask包。\nconda create -n myflaskapp flask\n栗子2：这个是克隆创建了一个和原系统一样的python环境，命名为nb。\nconda create -n nb --clone root\n栗子3：这就不需指定具体包了\nconda create --name $ENVIRONMENT_NAME python\n其他：\n$ conda create -n py3 python=3*\n$ conda create -n py2 python=2*\nThis will create two environments, one with Python3 and the other with Python2. I typically set one of these as my default by adding source activate py3 to my terminal startup. Typically I only use these \"named python\" environments to run a Python REPL or do general Python tasks. I'll create another conda environment named specifically for each real project I work on.\n这个创建两个python版本的环境。\n3.切换环境\nLinux命令未实验。\n\nLinux:source activate myflaskapp\nWindows:activate myflaskapp\n\n4.关闭环境\n\nLinux:source deactivate\nWindows:deactivate\n\n5.改指定虚拟环境安装包\nconda install -n yourenvname [package]\n6.移除虚拟环境\n移除某个环境中的包\nconda remove --name $ENVIRONMENT_NAME $PACKAGE_NAME\n移除某个虚拟环境\nconda remove -n yourenvname --all\n这些所有的虚拟环境，都在C:\\Anaconda3\\envs文件夹下。\nvirtualenv创建虚拟环境\n1.安装virtualenv\npip install virtualenv\n2.创建虚拟环境\n$ mkdir myproject\n$ cd myproject\n$ virtualenv venv\n创建了一个名为myproject的文件夹，然后这里边创建虚拟环境venv。\n在创建virtualenv时增加 --no-site-packages 选项的virtualenv就不会读取系统包，如下：\nvirtualenv nowamagic_venv --no-site-packages\n--distribute选项使virtualenv使用新的基于发行版的包管理系统而不是 setuptools 获得的包。 你现在需要知道的就是 --distribute 选项会自动在新的虚拟环境中安装 pip ，这样就不需要手动安装了。 当你成为一个更有经验的Python开发者，你就会明白其中细节。\nvirtualenv --distribute nowamagic_venv\n3.激活虚拟环境\n\nLinux:$ . venv/bin/activate或者    source $ENV_BASE_DIR/$ENVIRONMENT_NAME/bin/activate没有实验，所以暂时写两种方法，如果此时进入到venv虚拟环境文件夹下，可以source bin/activate\nWindows:    $ venv\\scripts\\activate\n\n4.退出环境\ndeactivate\nPython3 venv\n1.创建虚拟环境\nPython 3官方版本自带创建虚拟环境的功能：\npython -m venv myvenv\n2.激活\nWindows的cmd窗口\nmyvenv\\Scripts\\activate.bat\nLinux\nsource myvenv/bin/activate\n参考资料\n\n官方-venv — Creation of virtual environments\nUsing Continuum Analytics Conda as a replacement for virtualenv, pyenv, and more!\nconda vs. pip vs. virtualenv\nCreate virtual environments for python with conda\nconda-documention\nflask-virtualenv介绍\nSwitching between Anaconda and Anaconda3\n用 conda 管理 Python 开发环境\n用virtualenv建立多个Python独立开发环境\nPython科学计算环境推荐——Anaconda\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "6"}