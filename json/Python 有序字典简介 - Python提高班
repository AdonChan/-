{"title": "Python 有序字典简介 - Python提高班 ", "index": "python", "content": "有序字典-OrderedDict简介\n\n示例\n\n有序字典和通常字典类似，只是它可以记录元素插入其中的顺序，而一般字典是会以任意的顺序迭代的。参见下面的例子:\nimport collections\n\nprint 'Regular dictionary:'\nd = {}\nd['a'] = 'A'\nd['b'] = 'B'\nd['c'] = 'C'\nd['d'] = 'D'\nd['e'] = 'E'\n\nfor k, v in d.items():\n    print k, v\n\nprint '\\nOrderedDict:'\nd = collections.OrderedDict()\nd['a'] = 'A'\nd['b'] = 'B'\nd['c'] = 'C'\nd['d'] = 'D'\nd['e'] = 'E'\n\nfor k, v in d.items():\n    print k, v\n\n运行结果如下:\n-> python test7.py\nRegular dictionary:\na A\nc C\nb B\ne E\nd D\n\nOrderedDict:\na A\nb B\nc C\nd D\ne E\n\n可以看到通常字典不是以插入顺序遍历的。\n相等性\n\n判断两个有序字段是否相等(==)需要考虑元素插入的顺序是否相等\nimport collections\n\nprint 'dict       :',\nd1 = {}\nd1['a'] = 'A'\nd1['b'] = 'B'\nd1['c'] = 'C'\nd1['d'] = 'D'\nd1['e'] = 'E'\n\nd2 = {}\nd2['e'] = 'E'\nd2['d'] = 'D'\nd2['c'] = 'C'\nd2['b'] = 'B'\nd2['a'] = 'A'\n\nprint d1 == d2\n\nprint 'OrderedDict:',\n\nd1 = collections.OrderedDict()\nd1['a'] = 'A'\nd1['b'] = 'B'\nd1['c'] = 'C'\nd1['d'] = 'D'\nd1['e'] = 'E'\n\nd2 = collections.OrderedDict()\nd2['e'] = 'E'\nd2['d'] = 'D'\nd2['c'] = 'C'\nd2['b'] = 'B'\nd2['a'] = 'A'\n\nprint d1 == d2\n\n运行结果如下:\n-> python test7.py\ndict       : True\nOrderedDict: False\n\n而当判断一个有序字典和其它普通字典是否相等只需判断内容是否相等。\n注意\n\nOrderedDict 的构造器或者 update() 方法虽然接受关键字参数，但因为python的函数调用会使用无序的字典来传递参数，所以关键字参数的顺序会丢失，所以创造出来的有序字典不能保证其顺序。\n参考资料\n\n\nhttps://docs.python.org/2/lib...\nhttps://pymotw.com/2/collecti...\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "2"}