{"title": "在 CentOS 7 上安装并配置 Python 3.6 环境 - TaoBeier ", "index": "python,linux,centos", "content": "拖了很久没有更新，抱歉啦~ 今天受邀写篇如何在 CentOS 7 上配置 Python 3 环境的文章。往常我都选择直接把我早年写的一篇文章源码编译MongoDB丢过去，让他们看其中的源码编译 Python 那一节，不过那节写的其实不太详细，而且最近被很多人催，所以还是单独写一篇好了。\n当前最新的 CentOS 7.3 默认安装的是 Python 2 ，并且默认的官方 yum 源中不提供 Python 3 的安装包。有些用户想要升级使用 Python 3 但实际可能有各种各样的问题，导致出错，反观一下激进的 Fedora 社区，在23的时候，就将默认的版本修改成了 Python3 （如果我没记错的话）。\n先说下我所使用的系统环境， 一个新创建的 Docker 容器。 使用 cat /etc/redhat-release  可以看到运行的是 CentOS 7.3 版本。 \n\n在纯净的 CentOS 系统上安装 Python 环境主要有两种办法。 一种是通过源码编译安装，另外一种就是安装已经打好的 RPM 包。依照个人习惯，我们先来看一下如何通过源码编译的方式安装 Python 3.6 并且配置虚拟环境。\n使用源码进行编译安装\n基础环境\n先安装安装几个必须的包，以方便后续的操作\n➜  yum install wget gcc make\n➜  # wget 用于下载源码包\n➜  # gcc 和 make 用于编译\n\n上 Python的官网 下载源码包\n➜  wget https://www.python.org/ftp/python/3.6.1/Python-3.6.1.tar.xz\n解包，解压缩\n➜  xz -d Python-3.6.1.tar.xz\n➜  tar -xvf Python-3.6.1.tar\n\n编译\n➜  cd Python-3.6.1\n➜  ./configure --prefix=/usr/local/python3.6 --enable-optimizations\n➜  \n先解释下上面的参数，--prefix 是预期安装目录，--enable-optimizations 是优化选项（LTO，PGO 等）加上这个 flag 编译后，性能有 10% 左右的优化（如果没记错的话），但是这会明显的增加编译时间。不过关于 LTO 和 PGO 其实不在今天文章的讨论范围内，建议感兴趣的可以看看 GCC 中 LTO 的具体实现。我应该不太可能去写相关的文章 哈哈哈 毕竟写起来就会停不下来。\n接下来\n➜  make\n➜  make install\n\n如图，会看到出错了，提示 zlib not available 所以，我们需要装一下依赖\n➜  yum install zlib-devel\n那为什么需要这个依赖包呢， 其实是因为 Python 有个很重要的内建模块 zipimport 用于从 Zip 压缩包中导入模块。 而如果没有 zlib 的包，那么就无法进行解压缩了，也自然该模块就不能使用了。\n当我们的依赖安装好之后，重新执行上面的编译安装的步骤，发现执行成功。\n➜  /usr/local/python3.6/bin/python3 --version\nPython 3.6.1\n\n此刻，我们的 Python 3 也就安装成功了。\n检查\n编译安装完还远远不够，我们来做些检查。\n当我们运行 Python 终端，输入 import bz2 的时候，会发现没有这个模块。如果你对这个模块不熟悉，那也没关系。我们输入 import sqlite3熟悉 Python 的同学应该对 sqlite3 不会太陌生，但如果你还是不熟悉的话，那你按方向键试试看。有没有发现，输出变成了^[[D^[[A 类似这样的内容？\n\n熟悉 Python 源码的同学，肯定知道我要说什么了。但是假如你不熟悉，没关系，我来告诉你。正常来讲，在终端下我们预期当输入上方向键，会显示上一条命令，输入左方向键，可以将光标移动到左侧。但现实和我们的预期不同，什么原因？\n这里涉及到了一点点关于输入设备的历史原因，简单来说就是需要有个模块来对用户的输入进行转义。回到本文的重点，就是我们编译安装的时候缺少了 readline 这个模块。既然已经发现了问题，那解决的办法其实很简单\n➜  yum install readline-devel\n安装完成后，重复上面的步骤，编译&&安装即可。\n再检查\n前面只是解决了方向键输入的问题，但是我提到的那两个模块还是 import 不进来，那我们仔细的看看我们的编译过程的输出。其中有这样的一段（依据系统环境的不同，输出可能也是不一致的）\nPython build finished successfully!\nThe necessary bits to build these optional modules were not found:\n\n_curses               bz2                   _dbm\n_gdbm                 _lzma                 _sqlite3\n_tkinter              readline\n\nTo find the necessary bits, look in setup.py in detect_modules() for the module's name.\n\n按照上面的提示，很明显，我们缺少了一些（可选的）模块，这些模块假如你觉得自己不会用到，那也可以不理会它。这些模块，我用到的会多一些，甚至是那个一般人都不会碰的 TK 模块 哈哈哈。解决方式就只是装一下对应的模块即可。\n➜  # 解决 import bz2 报错\n➜  yum install  bzip2-devel\n\n➜  # 解决 import curses 报错\n➜  yum install  ncurses-devel\n\n➜  # 解决 import sqlite3 报错\n➜  yum install sqlite-devel\n\n➜  # 解决 _dbm _gdbm 缺失提醒\n➜  yum install gdbm-devel\n\n➜  # 解决 _lzma 缺失提醒\n➜  yum install xz-devel\n\n➜  # 解决 _tkinter 缺失提醒\n➜  yum install tk-devel\n\n➜  # 解决 readline 缺失提醒及方向键行为非预期的问题\n➜  yum install readline-devel\n当这些模块都装完，重新编译会发现提醒已经消失，安装即可。\n\n\n使用 rpm 包进行安装\n先来介绍一下 IUS 这个社区，名字的全写是【Inline with Upstream Stable】取首字母，它主要是一个提供新版本RPM包的社区。具体使用可以查看官方文档 简单说来就只要按下面的命令操作即可。\n➜  yum -y install https://centos7.iuscommunity.org/ius-release.rpm\n\n添加 IUS 之后，先创建缓存元数据，再进行安装即可\n➜  yum makecache\n➜  yum install python36u\n➜  yum -y install python36u-pip\n➜  yum -y install python36u-devel\n\n完成后直接终端输入 python3 即可。\n环境配置\n上面只是写了 Python 的安装，如果是使用 RPM 的方式安装的话，那直接是可用的。但如果是源码编译的，总不至于每次都输入一大串路径吧。所以解决方法很简单，加个链接即可。\n➜  ln -s /usr/local/python3.6/bin/python3 /usr/bin/python3\n\n另外，当系统中存在多个 Python 版本的时候，尽量去避免环境污染。我个人比较推荐使用 virtualenv 创建独立的虚拟环境，我日常中也是这样用的。不过，当我们安装完 Python 3.6 后，可以直接执行下面的命令进行虚拟环境的创建。\n➜  python3 -m venv py3\n➜  source py3/bin/activate\n(py3) ➜  python -V\nPython 3.6.1\n总结\nCentOS 7 上安装Python 3.6 主要有两种方式，源码编译和安装 RPM 包。\n对于想快速使用源码配置环境但并不想关心具体原因的读者，可以直接使用我GitHub上提供的这个脚本进行安装 https://raw.githubusercontent.com/tao12345666333/dotfiles/master/env/install_Python36_on_CentOS7.sh\n另外Python 3.6 可直接使用 python3 -m venv venv_name 创建虚拟环境。\n\n可以通过下面二维码订阅我的文章公众号【MoeLove】\n\n\n                ", "mainLikeNum": ["3 "], "mainBookmarkNum": "20"}