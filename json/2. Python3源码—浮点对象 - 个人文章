{"title": "2. Python3源码—浮点对象 - 个人文章 ", "index": "数据结构,源码,python", "content": "2.1. 浮点对象\n浮点对象是“定长对象”。\n2.1.1. Python中的创建\nPython中浮点对象创建最重要的方法为PyFloat_FromDouble，如下Python语句最终会调用到PyFloat_FromDouble：\na = 1.23\nb = float(1.234)\n2.1.2. PyFloat_FromDouble的C调用栈\n词法解析，最终调到PyFloat_FromDouble，调用顺序如下：\n// ast.c\nast_for_expr\n=>ast_for_power\n=>ast_for_atom_expr\n=>ast_for_atom (case NUMBER)\n=>parsenumber\n=>parsenumber_raw\n\n// floatobject.c\n=> PyFloat_FromDouble\n2.1.3. PyFloat_FromDouble的C源码\n// floatobject.c\nPyObject *\nPyFloat_FromDouble(double fval)\n{\n    PyFloatObject *op = free_list;\n    if (op != NULL) {\n        free_list = (PyFloatObject *) Py_TYPE(op);\n        numfree--;\n    } else {\n        op = (PyFloatObject*) PyObject_MALLOC(sizeof(PyFloatObject));\n        if (!op)\n            return PyErr_NoMemory();\n    }\n    /* Inline PyObject_New */\n    (void)PyObject_INIT(op, &PyFloat_Type);\n    op->ob_fval = fval;\n    return (PyObject *) op;\n}\n可以看到：\n浮点对象的C数据结构，所以Python中的浮点对象，实际上是C中的double。\n// floatobject.h\ntypedef struct {\n    PyObject_HEAD\n    double ob_fval;\n} PyFloatObject;\n采用浮点对象缓冲池\n// floatobject.c\n#ifndef PyFloat_MAXFREELIST\n#define PyFloat_MAXFREELIST    100\n#endif\nstatic int numfree = 0;\nstatic PyFloatObject *free_list = NULL;\n\nstatic void\nfloat_dealloc(PyFloatObject *op)\n{\n    if (PyFloat_CheckExact(op)) {\n        if (numfree >= PyFloat_MAXFREELIST)  {\n            PyObject_FREE(op);\n            return;\n        }\n        numfree++;\n        Py_TYPE(op) = (struct _typeobject *)free_list;\n        free_list = op;\n    }\n    else\n        Py_TYPE(op)->tp_free((PyObject *)op);\n}\n\nPyObject *\nPyFloat_FromDouble(double fval)\n{\n    PyFloatObject *op = free_list;\n    if (op != NULL) {\n        free_list = (PyFloatObject *) Py_TYPE(op);\n        numfree--;\n    } else {\n        op = (PyFloatObject*) PyObject_MALLOC(sizeof(PyFloatObject));\n        if (!op)\n            return PyErr_NoMemory();\n    }\n    /* Inline PyObject_New */\n    (void)PyObject_INIT(op, &PyFloat_Type);\n    op->ob_fval = fval;\n    return (PyObject *) op;\n}\nfloat_dealloc和PyFloat_FromDouble方法针对free_list和numfree的操作构成了Python的浮点对象缓冲池技术。采用链表，值得注意的是Py_TYPE(op)，在此处被当做next指针。缓冲池大小有上限，Python3中为100。\nPyObject_INIT因为是定长对象，所以调用PyObject_INIT方法，与PyObject_INIT_VAR方法相比，只是少调用Py_SIZE(op) =(size)\n\n2.2. 浮点对象的特性\n2.2.1. 数值计算\n// floatobject.c\n&float_as_number,                           /* tp_as_number */\n浮点对象的数值计算由float_as_number定义：\n// floatobject.c\nstatic PyNumberMethods float_as_number = {\n    float_add,          /* nb_add */\n    float_sub,          /* nb_subtract */\n    float_mul,          /* nb_multiply */\n    float_rem,          /* nb_remainder */\n    float_divmod,       /* nb_divmod */\n    float_pow,          /* nb_power */\n    (unaryfunc)float_neg, /* nb_negative */\n    float_float,        /* nb_positive */\n    (unaryfunc)float_abs, /* nb_absolute */\n    (inquiry)float_bool, /* nb_bool */\n    0,                  /* nb_invert */\n    0,                  /* nb_lshift */\n    0,                  /* nb_rshift */\n    0,                  /* nb_and */\n    0,                  /* nb_xor */\n    0,                  /* nb_or */\n    float___trunc___impl, /* nb_int */\n    0,                  /* nb_reserved */\n    float_float,        /* nb_float */\n    0,                  /* nb_inplace_add */\n    0,                  /* nb_inplace_subtract */\n    0,                  /* nb_inplace_multiply */\n    0,                  /* nb_inplace_remainder */\n    0,                  /* nb_inplace_power */\n    0,                  /* nb_inplace_lshift */\n    0,                  /* nb_inplace_rshift */\n    0,                  /* nb_inplace_and */\n    0,                  /* nb_inplace_xor */\n    0,                  /* nb_inplace_or */\n    float_floor_div,    /* nb_floor_divide */\n    float_div,          /* nb_true_divide */\n    0,                  /* nb_inplace_floor_divide */\n    0,                  /* nb_inplace_true_divide */\n};\n2.2.2. to string\n// floatobject.c\n(reprfunc)float_repr,                       /* tp_repr */\n(reprfunc)float_repr,                       /* tp_str */\n2.2.3. hash\n// floatobject.c\n(hashfunc)float_hash,                       /* tp_hash */\n2.2.4. 比较\n// floatobject.c\nfloat_richcompare,                        /* tp_richcompare */\n2.2.5. 内置方法\n// floatobject.c\nfloat_methods,                              /* tp_methods */\n2.2.6. 内置属性\n// floatobject.c\nfloat_getset,                                /* tp_getset */\n2.3 参考\nPython源码剖析\n本文作者：whj0709阅读原文本文为云栖社区原创内容，未经允许不得转载。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "0"}