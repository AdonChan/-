{"title": "python实现微信接口(itchat) - 个人文章 ", "index": "python", "content": "python实现微信接口(itchat)\n安装\nsudo pip install itchat\n登录\nitchat.auto_login()  这种方法将会通过微信扫描二维码登录，但是这种登录的方式确实短时间的登录，并不会保留登录的状态，也就是下次登录时还是需要扫描二维码，如果加上hotReload==True,那么就会保留登录的状态，至少在后面的几次登录过程中不会再次扫描二维码，该参数生成一个静态文件itchat.pkl用于存储登录状态\n退出及登录完成后调用的特定的方法\n这里主要使用的是灰调函数的方法,登录完成后的方法需要赋值在 loginCallback 中退出后的方法,需要赋值在 exitCallback 中.若不设置 loginCallback 的值, 将会自动删除二维码图片并清空命令行显示.\n\nimport itchat, time\ndef lc():\n    print(\"Finash Login!\")\ndef ec():\n    print(\"exit\")\n\nitchat.auto_login(loginCallback=lc, exitCallback=ec)\ntime.sleep()\nitchat.logout()    #强制退出登录    \n回复消息\nsend\n\nsend(msg=\"Text Message\", toUserName=None)\n\n参数：\n\nmsg : 文本消息内容\n@fil@path_to_file : 发送文件\n@img@path_to_img : 发送图片\n @vid@path_to_video : 发送视频\ntoUserName : 发送对象, 如果留空, 将发送给自己.\n\n\n返回值\n\nTrue or False\n实例代码\n\n\n# coding-utf-8\nimport itchat\nitchat.auto_login()\nitchat.send(\"Hello World!\")\nithcat.send(\"@fil@%s\" % '/tmp/test.text')\nithcat.send(\"@img@%s\" % '/tmp/test.png')\nithcat.send(\"@vid@%s\" % '/tmp/test.mkv')\nsend_msg\n\nsend_msg(msg='Text Message', toUserName=None),其中的的msg是要发送的文本，toUserName是发送对象, 如果留空, 将发送给自己，返回值为True或者False\n实例代码\n\nimport itchat\nitchat.auto_login()\nitchat.send_msg(\"hello world.\")\nsend_file\n\nsend_file(fileDir, toUserName=None)  fileDir是文件路径, 当文件不存在时, 将打印无此文件的提醒，返回值为True或者False\n实例代码\n\nmport itchat\n\nitchat.auto_login()\nitchat.send_file(\"/tmp/test.txt\")\nsend_image\n\nsend_image(fileDir, toUserName=None)  参数同上\n实例代码\n\n\nimport itchat\n\nitchat.auto_login()\nitchat.send_img(\"/tmp/test.txt\")\nsend_video\n\nsend_video(fileDir, toUserName=None) 参数同上\n实例代码\n\nimport itchat\n\nitchat.auto_login()\nitchat.send_video(\"/tmp/test.txt\")\n注册消息方法\nitchat 将根据接受到的消息类型寻找对应的已注册的方法.如果一个消息类型没有对应的注册方法, 该消息将会被舍弃.在运行过程中也可以动态注册方法, 注册方式与结果不变.\n注册方法\n不带具体对象注册, 将注册为普通消息的回复方法.\nimport itchat\nfrom itchat.content import *\n@itchat.msg_register(TEXT)   #这里的TEXT表示如果有人发送文本消息，那么就会调用下面的方法\ndef simple_reply(msg):\n    #这个是向发送者发送消息\n    itchat.send_msg('已经收到了文本消息，消息内容为%s'%msg['Text'],toUserName=msg['FromUserName'])\n    return \"T reveived: %s\" % msg[\"Text\"]     #返回的给对方的消息，msg[\"Text\"]表示消息的内容\n    \n带对象参数注册, 对应消息对象将调用该方法，其中isFriendChat表示好友之间，isGroupChat表示群聊，isMapChat表示公众号\nimport itchat\nfrom itchat.content import *\n\n@itchat.msg_register(TEXT, isFriendChat=True, isGroupChat=True,isMpChat=True)\ndef text_reply(msg):\n    msg.user.send(\"%s : %s\" % (mst.type, msg.text))\n\n消息类型向注册方法传入的 msg 包含微信返回的字典的所有内容.itchat 增加 Text, Type(也就是参数) 键值, 方便操作.\nitcaht.content 中包含所有的消息类型参数, 如下表\n\n\n\n参数\nl类型\nText 键值\n\n\n\nTEXT\n文本\n文本内容(文字消息)\n\n\nMAP\n地图\n位置文本(位置分享)\n\n\nCARD\n名片\n推荐人字典(推荐人的名片)\n\n\nSHARING\n分享\n分享名称(分享的音乐或者文章等)\n\n\nPICTURE        下载方法\n \n图片/表情\n\n\nRECORDING\n语音\n下载方法\n\n\nATTACHMENT\n附件\n下载方法\n\n\nVIDEO\n小视频\n下载方法\n\n\nFRIENDS\n好友邀请\n添加好友所需参数\n\n\nSYSTEM\n系统消息\n更新内容的用户或群聊的UserName组成的列表\n\n\nNOTE\n通知\n通知文本(消息撤回等)\n\n\n\n附件的下载与发送\nitchat 的附件下载方法存储在 msg 的 Text 键中.发送的文件名(图片给出的默认文件名), 都存储在 msg 的 FileName 键中.下载方法, 接受一个可用的位置参数(包括文件名), 并将文件响应的存储.注意：下载的文件存储在指定的文件中，直接将路径与FileName连接即可，如msg[\"Text\"]('/tmp/weichat'+msg['FileName'])\n@itchat.msg_register([PICTURE, RECORDING, ATTACHMENT, VIDEO])\ndef download_files(msg):\n    #msg.download(msg['FileName'])   #这个同样是下载文件的方式\n    msg['Text'](msg['FileName'])      #下载文件\n    #将下载的文件发送给发送者\n    itchat.send('@%s@%s' % ('img' if msg['Type'] == 'Picture' else 'fil', msg[\"FileName\"]), msg[\"FromUserName\"])\n群消息\n\n增加了三个键值，如下：\n\nisAt 判断是否 @ 本号\nActualNickName : 实际 NickName(昵称)\nContent : 实际 Content\n\n测试程序\n\nimport itcaht\nfrom itchat.content import TEXT\n\n@itchat.msg_register(TEXT, isGroupChat=True)\ndef text_reply(msg):\n    if(msg.isAt):    #判断是否有人@自己\n    #如果有人@自己，就发一个消息告诉对方我已经收到了信息\n    itchat.send_msg(\"我已经收到了来自{0}的消息，实际内容为{1}\".format(msg['ActualNickName'],msg['Text']),toUserName=msg['FromUserName'])\n\nitchat.auto_login()\nitchat.run()\n注册消息的优先级\n总的来说就是后面注册同种类型的消息会覆盖之前注册的消息，详情见文档https://itchat.readthedocs.io/zh/latest/\n消息内容\n注意：所有的消息内容都是可以用键值对来访问的，如msg[\"FromUserName]就是查看发送者，itchat.search_friends(userName=msg['FromUserName'])['NickName']查看的是当发送者昵称\n一般消息\n一般的消息都遵循以下的内容：\n{\n    \"FromUserName\": \"\",\n    \"ToUserName\": \"\",\n    \"Content\": \"\",\n    \"StatusNotifyUserName\": \"\",\n    \"ImgWidth\": 0,\n    \"PlayLength\": 0,\n    \"RecommendInfo\": {},\n    \"StatusNotifyCode\": 0,\n    \"NewMsgId\": \"\",\n    \"Status\": 0,\n    \"VoiceLength\": 0,\n    \"ForwardFlag\": 0,\n    \"AppMsgType\": 0,\n    \"Ticket\": \"\",\n    \"AppInfo\": {},\n    \"Url\": \"\",\n    \"ImgStatus\": 0,\n    \"MsgType\": 0,\n    \"ImgHeight\": 0,\n    \"MediaId\": \"\",\n    \"MsgId\": \"\",\n    \"FileName\": \"\",\n    \"HasProductId\": 0,\n    \"FileSize\": \"\",\n    \"CreateTime\": 0,\n    \"SubMsgType\": 0\n}\n初始化消息\n MsgType: 51\n    FromUserName: 自己ID\n    ToUserName: 自己ID\n    StatusNotifyUserName: 最近联系的联系人ID\n    Content:\n        <msg>\n            <op id='4'>\n                <username>\n                    # 最近联系的联系人\n                    filehelper,xxx@chatroom,wxid_xxx,xxx,...\n                </username>\n                <unreadchatlist>\n                    <chat>\n                        <username>\n                        # 朋友圈\n                            MomentsUnreadMsgStatus\n                        </username>\n                        <lastreadtime>\n                            1454502365\n                        </lastreadtime>\n                    </chat>\n                </unreadchatlist>\n                <unreadfunctionlist>\n                # 未读的功能账号消息，群发助手，漂流瓶等\n                </unreadfunctionlist>\n            </op>\n        </msg>\n文本消息\nMsgType: 1\n    FromUserName: 发送方ID\n    ToUserName: 接收方ID\n    Content: 消息内容\n图片消息\nitchat 增加了 Text 键, 键值为 下载该图片的方法.\nMsgType: 3\n    FromUserName: 发送方ID\n    ToUserName: 接收方ID\n    MsgId: 用于获取图片，用于表示每一条消息\n    Content:\n        <msg>\n            <img length=\"6503\" hdlength=\"0\" />\n            <commenturl></commenturl>\n        </msg>\n拓展：如果想要得到Content中的具体内容可以使用正则表达式匹配出来\n视频消息\n*itchat 增加了 Text 键, 键值为 下载该视频的方法.*\n    MsgType: 62\n    FromUserName: 发送方ID\n    ToUserName: 接收方ID\n    MsgId: 用于获取小视频\n    Content:\n        <msg>\n            <img length=\"6503\" hdlength=\"0\" />\n            <commenturl></commenturl>\n        </msg>\n\n地理位置消息\nitchat 增加了 Text 键, 键值为 该地点的文本形式.\nMsgType: 1\n    FromUserName: 发送方ID\n    ToUserName: 接收方ID\n    Content: http://weixin.qq.com/cgi-bin/redirectforward?args=xxx\n    \n    OriContent:<?xml version=\"1.0\"?>\n<msg>\n    <location x=\"34.195278\" y=\"117.177803\" scale=\"16\" label=\"江苏省徐州市铜山区新区海河路\" maptype=\"0\" poiname=\"江苏师范大学大学生公寓园区\" />\n</msg>\n\n名片消息\nitchat 增加了Text 键, 键值为 该调用 add_friend 需要的属性.\n MsgType: 42\n    FromUserName: 发送方ID\n    ToUserName: 接收方ID\n    Content:\n        <?xml version=\"1.0\"?>\n        <msg bigheadimgurl=\"\" smallheadimgurl=\"\" username=\"\" nickname=\"\"  shortpy=\"\" alias=\"\" imagestatus=\"3\" scene=\"17\" province=\"\" city=\"\" sign=\"\" sex=\"1\" certflag=\"0\" certinfo=\"\" brandIconUrl=\"\" brandHomeUrl=\"\" brandSubscriptConfigUrl=\"\" brandFlags=\"0\" regionCode=\"\" />\n\n    RecommendInfo:\n        {\n            \"UserName\": \"xxx\", # ID，这里的是昵称\n            \"Province\": \"xxx\",   \n            \"City\": \"xxx\",    \n            \"Scene\": 17, \n            \"QQNum\": 0, \n            \"Content\": \"\", \n            \"Alias\": \"xxx\", # 微信号\n            \"OpCode\": 0, \n            \"Signature\": \"\", \n            \"Ticket\": \"\", \n            \"Sex\": 0, # 1:男, 2:女\n            \"NickName\": \"xxx\", # 昵称\n            \"AttrStatus\": 4293221, \n            \"VerifyFlag\": 0\n        }\n下面是添加好友的测试代码\n@itchat.msg_register(itchat.content.CARD,isFriendChat=True)\ndef simply(msg):\n    print msg['Text']\n    print msg['Content']\n    itchat.add_friend(userName=msg['Text']['UserName'])  #添加推荐的好友\n    print msg['RecommendInfo']\n    print msg['RecommendInfo']['UserName']\n语音消息\n*itchat增加了Text键,键值为下载该语音文件的方法,下载下来的是MP3的格式\n\nMsgType: 34\n    FromUserName: 发送方ID\n    ToUserName: 接收方ID\n    MsgId: 用于获取语音\n    Content:\n        <msg>\n            <voicemsg endflag=\"1\" cancelflag=\"0\" forwardflag=\"0\" voiceformat=\"4\" voicelength=\"1580\" length=\"2026\" bufid=\"216825389722501519\" clientmsgid=\"49efec63a9774a65a932a4e5fcd4e923filehelper174_1454602489\" fromusername=\"\" />\n        </msg>\n下载方法：msg['Text'](msg['FileName'])\n动画表情\nitchat添加了Text键，键值为下载该图片表情的方法。注意：本人亲测对于一些微信商店提供的表情是不能下载成功的,这里的自带的表情emoji是属于TEXT类别的，因此如果将其注册为PICTURE消息类型的话是不可以监测到的\n  MsgType: 47\n    FromUserName: 发送方ID\n    ToUserName: 接收方ID\n    Content:\n        <msg>\n            <emoji fromusername = \"\" tousername = \"\" type=\"2\" idbuffer=\"media:0_0\" md5=\"e68363487d8f0519c4e1047de403b2e7\" len = \"86235\" productid=\"com.tencent.xin.emoticon.bilibili\" androidmd5=\"e68363487d8f0519c4e1047de403b2e7\" androidlen=\"86235\" s60v3md5 = \"e68363487d8f0519c4e1047de403b2e7\" s60v3len=\"86235\" s60v5md5 = \"e68363487d8f0519c4e1047de403b2e7\" s60v5len=\"86235\" cdnurl = \"http://emoji.qpic.cn/wx_emoji/eFygWtxcoMF8M0oCCsksMA0gplXAFQNpiaqsmOicbXl1OC4Tyx18SGsQ/\" designerid = \"\" thumburl = \"http://mmbiz.qpic.cn/mmemoticon/dx4Y70y9XctRJf6tKsy7FwWosxd4DAtItSfhKS0Czr56A70p8U5O8g/0\" encrypturl = \"http://emoji.qpic.cn/wx_emoji/UyYVK8GMlq5VnJ56a4GkKHAiaC266Y0me0KtW6JN2FAZcXiaFKccRevA/\" aeskey= \"a911cc2ec96ddb781b5ca85d24143642\" ></emoji> \n            <gameext type=\"0\" content=\"0\" ></gameext>\n        </msg>\n\n普通链接或应用分享消息\n主要针对的是分享的文章等等\n    MsgType: 49\n    AppMsgType: 5\n    FromUserName: 发送方ID\n    ToUserName: 接收方ID\n    Url: 链接地址\n    FileName: 链接标题\n    Content:\n        <msg>\n            <appmsg appid=\"\"  sdkver=\"0\">\n                <title></title>\n                <des></des>\n                <type>5</type>\n                <content></content>\n                <url></url>\n                <thumburl></thumburl>\n                ...\n            </appmsg>\n            <appinfo>\n                <version></version>\n                <appname></appname>\n            </appinfo>\n        </msg>\n音乐链接消息\n主要针对的是音乐\n\nMsgType: 49\n    AppMsgType: 3\n    FromUserName: 发送方ID\n    ToUserName: 接收方ID\n    Url: 链接地址\n    FileName: 音乐名\n\n    AppInfo: # 分享链接的应用\n        {\n            Type: 0, \n            AppID: wx485a97c844086dc9\n        }\n\n    Content:\n        <msg>\n            <appmsg appid=\"wx485a97c844086dc9\"  sdkver=\"0\">\n                <title></title>\n                <des></des>\n                <action></action>\n                <type>3</type>\n                <showtype>0</showtype>\n                <mediatagname></mediatagname>\n                <messageext></messageext>\n                <messageaction></messageaction>\n                <content></content>\n                <contentattr>0</contentattr>\n                <url></url>\n                <lowurl></lowurl>\n                <dataurl>\n                    http://ws.stream.qqmusic.qq.com/C100003i9hMt1bgui0.m4a?vkey=6867EF99F3684&amp;guid=ffffffffc104ea2964a111cf3ff3edaf&amp;fromtag=46\n                </dataurl>\n                <lowdataurl>\n                    http://ws.stream.qqmusic.qq.com/C100003i9hMt1bgui0.m4a?vkey=6867EF99F3684&amp;guid=ffffffffc104ea2964a111cf3ff3edaf&amp;fromtag=46\n                </lowdataurl>\n                <appattach>\n                    <totallen>0</totallen>\n                    <attachid></attachid>\n                    <emoticonmd5></emoticonmd5>\n                    <fileext></fileext>\n                </appattach>\n                <extinfo></extinfo>\n                <sourceusername></sourceusername>\n                <sourcedisplayname></sourcedisplayname>\n                <commenturl></commenturl>\n                <thumburl>\n                    http://imgcache.qq.com/music/photo/album/63/180_albumpic_143163_0.jpg\n                </thumburl>\n                <md5></md5>\n            </appmsg>\n            <fromusername></fromusername>\n            <scene>0</scene>\n            <appinfo>\n                <version>29</version>\n                <appname>摇一摇搜歌</appname>\n            </appinfo>\n            <commenturl></commenturl>\n        </msg>\n群消息\n\nitchat 增加了三个群聊相关的键值:\n\nisAt : 判断是否 @ 本号\nActualNickName : 实际 NickName\nContent : 实际 Content\n\n\nMsgType: 1\nFromUserName: @@xxx\nToUserName: @xxx\nContent:\n    @xxx:<br/>xxx\n\n红包消息\n MsgType: 49\n    AppMsgType: 2001\n    FromUserName: 发送方ID\n    ToUserName: 接收方ID\n    Content: 未知\n系统消息\n MsgType: 10000\n    FromUserName: 发送方ID\n    ToUserName: 自己ID\n    Content:\n        \"你已添加了 xxx ，现在可以开始聊天了。\"\n        \"如果陌生人主动添加你为朋友，请谨慎核实对方身份。\"\n        \"收到红包，请在手机上查看\"\n账号类型\ntchat 为三种账号都提供了 整体获取方法与搜索方法.\n好友\nget_friends\n\nitchat.get_friends()  返回完整的好友列表\n\n每个好友为一个字典, 其中第一项为本人的账号信息;\n传入 update=True, 将更新好友列表并返回, get_friends(update=True)\n\n\nsearch_friends\n\nitchat.get_friends()   好友搜索，有以下四种方式\n仅获取自己的用户信息\n\n# 获取自己的用户信息，返回自己的属性字典\nitchat.search_friends()\n获取特定 UserName 的用户信息\n\n# 获取特定UserName的用户信息\nitchat.search_friends(userName='@abcdefg1234567') \n\n## 获取发送信息的好友的详细信息\n@itchat.msg_register(itchat.content.TEXT,isFriendChat=True)\ndef reply(msg):\n    print msg['FromUserName']\n    print itchat.search_friends(userName=msg['FromUserName'])   #详细信息\n    print itchat.search_friends(userName=msg['FromUserName'])['NickName']   #获取昵称\n\n获取备注,微信号, 昵称中的任何一项等于name键值的用户. (可以与下一项配置使用.)\n比如在我的微信中有一个备注为autolife的人，我可以使用这个方法搜索出详细的信息\n\n# 获取任何一项等于name键值的用户\nitchat.search_friends(name='autolife')\n获取备注,微信号, 昵称分别等于相应键值的用户. (可以与上一项配置使用.)\n# 获取分别对应相应键值的用户\nitchat.search_friends(wechatAccount='littlecodersh')\n# 三、四项功能可以一同使用\nitchat.search_friends(name='LittleCoder机器人', wechatAccount='littlecodersh')\nupdate_friend\n\n主要用于好友更新\n\n特定用户: 传入用户UserName, 返回指定用户的最新信息.\n用户列表: 传入 UserName 组成的列表, 返回用户最新信息组成的列表\n\n\nmemberList = itchat.update_friend('@abcdefg1234567')\n公众号\nget_mps\n\n 将返回完整的工作号列表\n\n每个公众号为一个字典,\n传入 update=True 将更新公众号列表, 并返回.\n\n\nsearch_mps\n获取特定UserName的公众号\n# 获取特定UserName的公众号，返回值为一个字典\nitchat.search_mps(userName='@abcdefg1234567')\n获取名字中还有特定字符的公众号.\n# 获取名字中含有特定字符的公众号，返回值为一个字典的列表\nitchat.search_mps(name='LittleCoder')\n当两项都是勇士, 将仅返回特定UserName的公众号.\n群聊\n\n\nget_chatrooms : 返回完整的群聊列表.\nsearch_chatrooms : 群聊搜索.\nupdate_chatroom : 获取群聊用户列表或更新该群聊.\n\n\n群聊在首次获取中不会获取群聊的用户列表, 所以需要调用该命令才能获取群聊成员.\n传入群聊的 UserName , 返回特定群聊的详细信息.\n传入UserName组成的列表, 返回指定用户的最新信息组成的列表.\n\n\nmemberList = itchat.update_chatroom('@@abcdefg1234567', detailedMember=True)\n\n创建群聊,增加/删除群聊用户:\n\n由于之前通过群聊检测是否被好友拉黑的程序, 目前这三个方法都被严格限制了使用频率.\n删除群聊需要本账号为管理员, 否则无效.\n将用户加入群聊有直接加入与发送邀请, 通过 useInvitation 设置.\n超过 40 人的群聊无法使用直接加入的加入方式.\n\n\nmemberList = itchat.get_frients()[1:]\n# 创建群聊, topic 键值为群聊名称.\nchatroomUserName = itchat.create_chatroom(memberList, \"test chatroom\")\n# 删除群聊内的用户\nitchat.delete_member_from_chatroom(chatroomUserName, memberList[0])\n# 增加用户进入群聊.\nitchat.add_member_into_chatroom(chatroomUserName, memberList[0], useInvitation=False)\n方法汇总\nitchat.add_friend                  \nitchat.new_instance                \nitchat.add_member_into_chatroom    \nitchat.originInstance              \nitchat.auto_login                  \nitchat.returnvalues                \nitchat.check_login                 \nitchat.run                         \nitchat.components                  \nitchat.search_chatrooms            \nitchat.config                      \nitchat.search_friends              \nitchat.configured_reply            \nitchat.search_mps                  \nitchat.content                     \nitchat.send                        \nitchat.core                        \nitchat.send_file                   \nitchat.Core                        \nitchat.send_image                  \nitchat.create_chatroom             \nitchat.send_msg                    \nitchat.delete_member_from_chatroom \nitchat.send_raw_msg                \nitchat.dump_login_status           \nitchat.send_video                  \nitchat.get_chatrooms               \nitchat.set_alias                   \nitchat.get_contact                 \nitchat.set_chatroom_name           \nitchat.get_friends                 \nitchat.set_logging                 \nitchat.get_head_img                \nitchat.set_pinned                  \nitchat.get_mps                     \nitchat.show_mobile_login           \nitchat.get_msg                     \nitchat.start_receiving             \nitchat.get_QR                      \nitchat.storage                     \nitchat.get_QRuuid                  \nitchat.update_chatroom             \nitchat.instanceList                \nitchat.update_friend               \nitchat.load_login_status           \nitchat.upload_file                 \nitchat.log                         \nitchat.utils                       \nitchat.login                       \nitchat.VERSION                     \nitchat.logout                      \nitchat.web_init                    \nitchat.msg_register\n实例\n下面是博主写的一个程序，该程序的主要功能是监控撤回消息，并且如果有消息撤回就会撤回的消息发送给你，以后再也不用担心看不到好友的撤回的消息了，由于注释写的很详细，因此这里就不在详细的讲解了，直接贴代码\n代码\n# coding:utf-8\nimport itchat\nfrom itchat.content import TEXT\nfrom itchat.content import *\nimport sys\nimport time\nimport re\n\nreload(sys)\nsys.setdefaultencoding('utf8')\nimport os\n\nmsg_information = {}\nface_bug=None  #针对表情包的内容\n\n\n@itchat.msg_register([TEXT, PICTURE, FRIENDS, CARD, MAP, SHARING, RECORDING, ATTACHMENT, VIDEO],isFriendChat=True, isGroupChat=True, isMpChat=True)\ndef handle_receive_msg(msg):\n    global face_bug\n    msg_time_rec = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())   #接受消息的时间\n    msg_from = itchat.search_friends(userName=msg['FromUserName'])['NickName']   #在好友列表中查询发送信息的好友昵称\n    msg_time = msg['CreateTime']    #信息发送的时间\n    msg_id = msg['MsgId']    #每条信息的id\n    msg_content = None      #储存信息的内容\n    msg_share_url = None    #储存分享的链接，比如分享的文章和音乐\n    print msg['Type']\n    print msg['MsgId']\n    if msg['Type'] == 'Text' or msg['Type'] == 'Friends':     #如果发送的消息是文本或者好友推荐\n        msg_content = msg['Text']\n        print msg_content\n\n    #如果发送的消息是附件、视屏、图片、语音\n    elif msg['Type'] == \"Attachment\" or msg['Type'] == \"Video\" \\\n            or msg['Type'] == 'Picture' \\\n            or msg['Type'] == 'Recording':\n        msg_content = msg['FileName']    #内容就是他们的文件名\n        msg['Text'](str(msg_content))    #下载文件\n        # print msg_content\n    elif msg['Type'] == 'Card':    #如果消息是推荐的名片\n        msg_content = msg['RecommendInfo']['NickName'] + '的名片'    #内容就是推荐人的昵称和性别\n        if msg['RecommendInfo']['Sex'] == 1:\n            msg_content += '性别为男'\n        else:\n            msg_content += '性别为女'\n\n        print msg_content\n    elif msg['Type'] == 'Map':    #如果消息为分享的位置信息\n        x, y, location = re.search(\n            \"<location x=\\\"(.*?)\\\" y=\\\"(.*?)\\\".*label=\\\"(.*?)\\\".*\", msg['OriContent']).group(1, 2, 3)\n        if location is None:\n            msg_content = r\"纬度->\" + x.__str__() + \" 经度->\" + y.__str__()     #内容为详细的地址\n        else:\n            msg_content = r\"\" + location\n    elif msg['Type'] == 'Sharing':     #如果消息为分享的音乐或者文章，详细的内容为文章的标题或者是分享的名字\n        msg_content = msg['Text']\n        msg_share_url = msg['Url']       #记录分享的url\n        print msg_share_url\n    face_bug=msg_content\n\n##将信息存储在字典中，每一个msg_id对应一条信息\n    msg_information.update(\n        {\n            msg_id: {\n                \"msg_from\": msg_from, \"msg_time\": msg_time, \"msg_time_rec\": msg_time_rec,\n                \"msg_type\": msg[\"Type\"],\n                \"msg_content\": msg_content, \"msg_share_url\": msg_share_url\n            }\n        }\n    )\n\n\n##这个是用于监听是否有消息撤回\n@itchat.msg_register(NOTE, isFriendChat=True, isGroupChat=True, isMpChat=True)\ndef information(msg):\n    #这里如果这里的msg['Content']中包含消息撤回和id，就执行下面的语句\n    if '撤回了一条消息' in msg['Content']:\n        old_msg_id = re.search(\"\\<msgid\\>(.*?)\\<\\/msgid\\>\", msg['Content']).group(1)   #在返回的content查找撤回的消息的id\n        old_msg = msg_information.get(old_msg_id)    #得到消息\n        print old_msg\n        if len(old_msg_id)<11:  #如果发送的是表情包\n            itchat.send_file(face_bug,toUserName='filehelper')\n        else:  #发送撤回的提示给文件助手\n            msg_body = \"告诉你一个秘密~\" + \"\\n\" \\\n                       + old_msg.get('msg_from') + \" 撤回了 \" + old_msg.get(\"msg_type\") + \" 消息\" + \"\\n\" \\\n                       + old_msg.get('msg_time_rec') + \"\\n\" \\\n                       + \"撤回了什么 ⇣\" + \"\\n\" \\\n                       + r\"\" + old_msg.get('msg_content')\n            #如果是分享的文件被撤回了，那么就将分享的url加在msg_body中发送给文件助手\n            if old_msg['msg_type'] == \"Sharing\":\n                msg_body += \"\\n就是这个链接➣ \" + old_msg.get('msg_share_url')\n\n            # 将撤回消息发送到文件助手\n            itchat.send_msg(msg_body, toUserName='filehelper')\n            # 有文件的话也要将文件发送回去\n            if old_msg[\"msg_type\"] == \"Picture\" \\\n                    or old_msg[\"msg_type\"] == \"Recording\" \\\n                    or old_msg[\"msg_type\"] == \"Video\" \\\n                    or old_msg[\"msg_type\"] == \"Attachment\":\n                file = '@fil@%s' % (old_msg['msg_content'])\n                itchat.send(msg=file, toUserName='filehelper')\n                os.remove(old_msg['msg_content'])\n            # 删除字典旧消息\n            msg_information.pop(old_msg_id)\n\nitchat.auto_login(hotReload=True)\nitchat.run()\n\n参考文章\n\n文档：https://itchat.readthedocs.io/zh/latest/\nhttp://www.cnblogs.com/yanjingnan/p/6831464.html\n\n\n                ", "mainLikeNum": ["25 "], "mainBookmarkNum": "64"}