{"title": "Python 系统命令调用 - Everything about PaaS ", "index": "python", "content": "Python 3不再推荐使用老的os.system()、os.popen()、commands.getstatusoutput()等方法来调用系统命令，而建议统一使用subprocess库所对应的方法如：Popen()、getstatusoutput()、call()。\n推荐并记录一些常用的使用范例：\nPopen\n#　标准用法使用数据传参，可以用shlex库来正确切割命令字符串\n>>> import shlex, subprocess\n>>> command_line = input()\n/bin/vikings -input eggs.txt -output \"spam spam.txt\" -cmd \"echo '$MONEY'\"\n>>> args = shlex.split(command_line)\n>>> print(args)\n['/bin/vikings', '-input', 'eggs.txt', '-output', 'spam spam.txt', '-cmd', \"echo '$MONEY'\"]\n>>> p = subprocess.Popen(args) # Success!\nimport subprocess\ntry:\n    proc = subprocess.Popen([`ls`, `-a`, `/`], stdout=subprocess.PIPE)\n    print(proc.stdout.read())  \nexcept:\n    print(\"error when run `ls` command\")\n# 使用with语句替代try-except-finally\nwith Popen([\"ifconfig\"], stdout=PIPE) as proc:\n    log.write(proc.stdout.read())\n# Windows下由于Windows API的CreateProcess()入参为字符串，\n# Popen需要把输入的数组拼接为字符串。因此建议直接传入字符串参数。\np = subprocess.Popen('D:\\\\Tools\\\\Git\\\\git-bash.exe --cd=\"D:\\\\Codes\"', stdout=subprocess.PIPE)\nprint(p.stdout.read())\ncall\nimport subprocess\ntry:\n    retcode = subprocess.call(\"mycmd\" + \" myarg\", shell=True)\n    if retcode < 0:\n        print(\"Child was terminated by signal\", -retcode, file=sys.stderr)\n    else:\n        print(\"Child returned\", retcode, file=sys.stderr)\nexcept OSError as e:\n    print(\"Execution failed:\", e, file=sys.stderr)\ngetstatusoutput/getoutput\n>>> subprocess.getstatusoutput('ls /bin/ls')\n(0, '/bin/ls')\n\n>>> subprocess.getoutput('ls /bin/ls')\n'/bin/ls'\n详细可以查阅Python 3官方文档：\n\nos: https://docs.python.org/3/library/os.htm...\nsubprocess: https://docs.python.org/3/library/subpro...\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "5"}