{"title": "python基础（《Python编程：从入门到实践》读书笔记） - 个人文章 ", "index": "python", "content": "注： 本文的大部分代码示例来自书籍《Python编程：从入门到实践》。\n一、变量：\n命名：（1）变量名只能包含字母、数字和下划线。变量名可以字母或下划线打头，但不能以数字打头（2）变量名不能包含空格，但可使用下划线来分隔其中的单词。（3）不要将Python关键字和函数名用作变量名，即不要使用Python保留用于特殊用途的单词，如print\n头文件声明: #-- coding: utf-8 --\n二、数据类型：\n（1）数字(Number)：num = 123（2）布尔型：True 、 False（3）字符型(char): str = 'hello' str[1]:取第2个字符 str[1:-1:2]: 开始位置,结束位置(-1表示最后),步长. len(str) str.title():首字母大写 str.rstrip() lstrip() strip():处理空白字符串 str(numer): 转化成字符型（4）列表(list)：list = ['huwentao','xiaozhou','tengjiang','mayan']list.append()list.insert(0, '')del list[0]list.pop()list.remove():根据值来删除list.sort()\n（5）元组(tuple)：不可修改 tuple = ('huwentao','xiaozhou','tengjiang','mayan')（6）字典(dict):\n  user_0 = {\n      'username': 'efermi',\n      'first': 'enrico',\n      'last': 'fermi',\n      }\n\n❶ for key, value in user_0.items():\n❷     print(\"\\nKey: \" + key)\n❸     print(\"Value: \" + value)\n三、语句\n（1）if语句：\n age = 12\n\n❶ if age < 4:\n      print(\"Your admission cost is $0.\")\n❷ elif age < 18:\n      print(\"Your admission cost is $5.\")\n❸ else:\n      print(\"Your admission cost is $10.\")\n（2）for循环（3）while循环\ncurrent_number = 1\nwhile current_number <= 5:\n    print(current_number)\n    current_number += 1\nfor循环是一种遍历列表的有效方式，但在for循环中不应修改列表，否则将导致Python难以跟踪其中的元素。要在遍历列表的同时对其进行修改，可使用while循环。通过将while循环同列表和字典结合起来使用，可收集、存储并组织大量输入，供以后查看和显示。\n四、用户输入\n函数input()让程序暂停运行，等待用户输入一些文本。获取用户输入后，Python将其存储在一个变量中，以方便你使用。\nmessage = input(\"Tell me something, and I will repeat it back to you: \")\nprint(message)\n五、函数\n基本函数的定义：\ndef greet_user(username):\n    \"\"\"显示简单的问候语\"\"\"\n    print(\"Hello, \" + username.title() + \"!\")\n\ngreet_user('jesse')\n\n\n使用默认值：\ndef describe_pet(pet_name, animal_type='dog'):\n    \"\"\"显示宠物的信息\"\"\"\n    print(\"\\nI have a \" + animal_type + \".\")\n    print(\"My \" + animal_type + \"'s name is \" + pet_name.title() + \".\")\n\ndescribe_pet(pet_name='willie')\n传递任意数量的形参\ndef make_pizza(*toppings):\n    \"\"\"打印顾客点的所有配料\"\"\"\n    print(toppings)\n\nmake_pizza('pepperoni')\nmake_pizza('mushrooms', 'green peppers', 'extra cheese')\n六、类\n基础类的定义：\n  class Car():\n      \"\"\"一次模拟汽车的简单尝试\"\"\"\n\n❶     def __init__(self, make, model, year):\n          \"\"\"初始化描述汽车的属性\"\"\"\n          self.make = make\n          self.model = model\n          self.year = year\n\n❷     def get_descriptive_name(self):\n          \"\"\"返回整洁的描述性信息\"\"\"\n          long_name = str(self.year) + ' ' + self.make + ' ' + self.model\n          return long_name.title()\n\n❸ my_new_car = Car('audi', 'a4', 2016)\n  print(my_new_car.get_descriptive_name())\n类的继承：\nclass Car():\n      \"\"\"一次模拟汽车的简单尝试\"\"\"\n\n      def __init__(self, make, model, year):\n          self.make = make\n          self.model = model\n          self.year = year\n          self.odometer_reading = 0\n\n      def get_descriptive_name(self):\n          long_name = str(self.year) + ' ' + self.make + ' ' + self.model\n          return long_name.title()\n\n      def read_odometer(self):\n          print(\"This car has \" + str(self.odometer_reading) + \" miles on it.\")\n\n      def update_odometer(self, mileage):\n          if mileage >= self.odometer_reading:\n              self.odometer_reading = mileage\n          else:\n              print(\"You can't roll back an odometer!\")\n\n      def increment_odometer(self, miles):\n          self.odometer_reading += miles\n\n❷ class ElectricCar(Car):\n      \"\"\"电动汽车的独特之处\"\"\"\n\n❸     def __init__(self, make, model, year):\n          \"\"\"初始化父类的属性\"\"\"\n❹         super().__init__(make, model, year)\n\n\n❺ my_tesla = ElectricCar('tesla', 'model s\n可以将实例作为属性来定义一个类\nclass Car():\n      --snip--\n\n❶ class Battery():\n      \"\"\"一次模拟电动汽车电瓶的简单尝试\"\"\"\n\n❷     def __init__(self, battery_size=70):\n          \"\"\"初始化电瓶的属性\"\"\"\n          self.battery_size = battery_size\n\n❸     def describe_battery(self):\n          \"\"\"打印一条描述电瓶容量的消息\"\"\"\n          print(\"This car has a \" + str(self.battery_size) + \"-kWh battery.\")\n\n\n  class ElectricCar(Car):\n      \"\"\"电动汽车的独特之处\"\"\"\n\n      def __init__(self, make, model, year):\n          \"\"\"\n          初始化父类的属性，再初始化电动汽车特有的属性\n          \"\"\"\n          super().__init__(make, model, year)\n❹         self.battery = Battery()\n\n\n  my_tesla = ElectricCar('tesla', 'model s', 2016)\n\n  print(my_tesla.get_descriptive_name())\n  my_tesla.battery.describe_battery()\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "2"}