{"title": "基础冲刺 - 个人文章 ", "index": "python", "content": "以下资料大多参考的此篇博客：http://www.cnblogs.com/alex37...\n\n基础冲刺\n编译型语言：C、C++  运行之前都需要一次编译，编译成可以直接和CPU打交道的机器码，写成可执行文件\n​               可移植性不好。（C、C++Pascal）\n解释型语言：解释型语言离不开解释器，可移植性由于编译型语言，由于解释型程序将编译过程放到了执行过程里\n​               写完可直接运行，但是这也注定了，解释型语言比编译型语言要慢上一大截，像几百倍的速度差距也\n​                           不足为奇 （Java、perl、Python）\n两者的区别：\n\n编译型程序，适合操作系统、大型应用程序、数据库系统等项目的开发\n解释型程序，适合网页脚本、服务器脚本及辅助开发接口这样的对速度要求不高、对不同系统平台间的兼容性有一定要求的程序\n\n​    但是有一种新兴的语言都有把两者折中起来的趋势，列如Java。他会编译一次，但是没有全部编译，保留了高抽象的java代码和一些机器码。运行速度比Python快，而且“一次编译，处处执行”。\n动态语言和静态语言\n通常我问所说的动态语言、静态语言是指动态类型语言和静态类型语言\n\n动态类型语言：动态类型语言是指运行期间才去做数据类型检查的语言，也就是说，在用动态类型的语言编程时，永远也不用给任何变量指定数据类型，该语言会在你第一次赋值给变量时，在内部将数据类型记录下来。\n静态类型语言：静态类型语言与动态类型语言刚好相反，他的数据类型是在编译其间检查的，也就是说在写程序时要声明所有变量的数据类型，C/C++是静态类型语言的代表，其他的静态类型语言还有C#、JAVA等。\n\n强类型定义语言和弱类型定义语言\n\n强类型定义语言：强制数据类型定义的语言。也就是说，一旦一个变量指定了某个数据类型，如果不经过强制转换，那么他就永远是这个数据类型了。举个例子：如果你定义了一个整型变量a，那么程序根本不可能将a当做字符串类型处理。强类型定义语言是类型安全的语言。\n弱类型定义语言：数据类型可以被忽略的语言。它与强类型定义语言相反，一个变量可以赋予不同数据类型的值。\n\n强类型定义语言在速度上可能逊色于弱类型定义语言，但是强类型定义语言带来的严谨性能够有效的避免许多错误。另外，“这门语言是不是动态语言”与“这门语言是否类型安全”之间是完全没有联系的！与其是否是强类型定义语言有关系！\nPython的优缺点\n先看优点：\n\nPython的定位是“优雅”、“明确”、“简单”，所以Python程序看上去总是简单易懂，初学者学Python，不但入门容易，而且将来深入下去，可以编写那些非常非常复杂的程序。\n开发效率非常高，Python有非常强大的第三方库，基本上你想通过计算机实现任何功能，Python官方库里都有相应的模块进行支持，直接下载调动后，在基础库的基础上再进行开发，大大降低开发周期，避免重复造轮子。\n高级语言，但你用Python语言编写程序的时候，你无需考虑如何管理你的程序使用的内存一类的底层细节。\n可移植性，由于它的开源本质，Python已经被移植在许多平台上（经过改动使它能够工作在不同平台上）。如果你小心地避免使用依赖于系统的特性，那么你的所有Python程序无需修改就几乎可以在市场上所有的系统平台运行。\n可扩展性，如果你需要你的一段关键代码运行得更快或者希望某些算法不公开，你可以把你的部分程序用C或C++编写，然后在你的Python程序中使用他们。\n可嵌入型，你可以把Python嵌入C/C++程序，从而向你的程序用户提供脚本功能。\n\n再看缺点：\n\n速度慢，Python的运行速度相比C语言确实慢很多，跟Java相比也要慢一些，因此这也是很多所谓的大牛不屑于使用Python的主要原因，但其实这里所指的运行速度慢在大多数情况下用户是无法直接感知到的，必须借助测试工具才能体现出来，比如你用C运行一个程序花了0.01s，用Python是0.1s，这样C语言直接比Python开了10倍，算是非常夸张了，但是你无法直接通过肉眼感知的，因为一个正常人所能感知的时间最小按单位是0.15-0.4s左右。其实大多数情况下Python已经完全可以满足你对程序速度的要求，除非你要写对速度要求极高的搜索引擎等，这种情况下当然还是建议你用C去实现的。\n代码不能加密，因为Python是解释型语言，他的源码都是以明文形式存放的，不过我不认为这算是一个缺点，如果你的项目要求源码必须是加密的，那你一开始就不应该用Python去实现。\n线程不能利用多CPU问题，这是Python被人诟病最多的一个缺点，GIL即全局解释器锁（Giobal Interpreter Lock），是计算机程序设计语言解释器用于同步线程的工具，使得任何时刻仅有一个线程在执行，Python的线程是操作系统的原生线程。在Linux上为pthread，在Windows上为Win thread，完全有操作系统调度线程的执行。一个Python解释器进程内有一条主线程，以及多条用户程序的执行线程。即使在多核CPU平台上，由于GIL的存在，所以禁止多线程的并行执行。关于这个问题的折中解决方法，我们在以后线程和进程章节里在进行详细探讨。\n\n当然，Python还有一些其它的小缺点，在这就不一一列举了，我想说的是，任何一门语言都不是完美的，都有擅长和不擅长做的事情，建议各位不要拿一个语言的劣势去跟另一个语言的优势来去比较，语言只是一个工具，是实现程序设计师思想的工具，就像我们之前中学学几何时，有的时候需要要圆规，有的时候需要用三角尺一样，拿相应的工具去做它最擅长的事才是正确的选择。之前很多人问我Shell和Python到底哪个好？我回答说Shell是个脚本语言，但Python不只是个脚本语言，能做的事情更多，然后又有钻牛角尖的人说完全没必要学Python, Python能做的事情Shell都可以做，只要你足够牛B,然后又举了用Shell可以写俄罗斯方块这样的游戏，对此我能说表达只能是，不要跟SB理论，SB会把你拉到跟他一样的高度，然后用充分的经验把你打倒。\nPython解释器\n当我们编写Python代码时，我们得到的是一个包含Python代码的以.py为扩展名的文本文件。要运行代码，就需要Python解释器去执行.py文件。\n由于整个Python语言从规范到解释器都是开源的，所以理论上，只要水平够高，任何人都可以编写Python解释器来执行Python代码（当然难度很大）。事实上，确实存在多种Python解释器。\nCPython\n当我们从Python官方网站下载并安装好Python 2.7后，我们就直接获得了一个官方版本的解释器：CPython。这个解释器是用C语言开发的，所以叫CPython。在命令行下运行python就是启动CPython解释器。\nCPython是使用最广的Python解释器。教程的所有代码也都在CPython下执行。\n最常用的，Linux自带的就是这个\nIPython\nIPython是基于CPython之上的一个交互式解释器，也就是说，IPython只是在交互方式上有所增强，但是执行Python代码的功能和CPython是完全一样的。好比很多国产浏览器虽然外观不同，但内核其实都是调用了IE。\nCPython用>>>作为提示符，而IPython用In [`序号`]:作为提示符。\nPyPy\nPyPy是另一个Python解释器，它的目标是执行速度。PyPy采用JIT技术，对Python代码进行动态编译（注意不是解释），所以可以显著提高Python代码的执行速度。\n绝大部分Python代码都可以在PyPy下运行，但是PyPy和CPython有一些是不同的，这就导致相同的Python代码在两种解释器下执行可能会有不同的结果。如果你的代码要放到PyPy下执行，就需要了解PyPy和CPython的不同点。\nPyPy是一个很快的解释器，甚至有时候快过C语言\nJython\nJython是运行在Java平台上的Python解释器，可以直接把Python代码编译成Java字节码执行。\nIronPython\nIronPython和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。\n但是：Python的解释器很多，但使用最广泛的还是CPython。如果要和Java或.Net平台交互，最好的办法不是用Jython或IronPython，而是通过网络调用来交互，确保各程序之间的独立性。所以上面那些也就PyPy值得搞一搞~\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}