{"title": "Django搭建个人博客：使用 Bootstrap 4 改写模板文件 - Django搭建个人博客 ", "index": "blog,python,django", "content": "上一章我们的网站页面实在太粗糙，你肯定不会拿来做真正的博客首页。因此这章我们要借助Bootstrap的力量，改写一个大气的博客。\n配置Bootstrap 4\nBootstrap是用于网站开发的开源前端框架（“前端”指的是展现给最终用户的界面），它提供字体排印、窗体、按钮、导航及其他各种组件，旨在使动态网页和Web应用的开发更加容易。\nBootstrap有几个版本都比较流行，我们选择最新版本的Bootstrap 4：下载地址，并解压。\n然后在项目根目录下新建目录static/bootsrap/，用于存放Bootstrap静态文件。静态文件通常指那些不会改变的文件。Bootstrap中的css、js文件，就是静态文件。\n把刚才解压出来的css和js两个文件夹复制进去。\n因为bootstrap.js依赖 jquery.js 和 popper.js 才能正常运行，因此这两个文件我们也需要一并下载保存。附上官网下载链接（进入下载页面，复制粘贴代码到新文件即可）：\n\njquery.js\npopper.js\n\n2018-10-29 新增：不清楚popper.js如何下载的戳这个链接：\nhttps://unpkg.com/popper.js@1.14.4/dist/umd/popper.js\n进去后页面显示很长一段代码，把这段代码全部拷贝；在项目中新建名叫popper.js的文件，把刚拷贝的代码复制进去就可以了。很多开源js文件都是通过这样的方式下载。\n\n现在我们的static/目录结构像这样：\nmy_blog\n│\n├─article\n└─my_blog\n│ ...\n└─static\n    └─bootstrap\n    │   ├─css # 文件夹\n    │   └─js # 文件夹\n    └─jquery\n    │   └─jquery-3.3.1.js # 文件\n    └─popper\n        └─popper-1.14.4.js # 文件\n因为在Django中需要指定静态文件的存放位置，才能够在模板中正确引用它们。因此在settings.py的末尾加上：\nmy_blog/settings.py\n\n...\n\nSTATICFILES_DIRS = (\n    os.path.join(BASE_DIR, \"static\"),\n)\n再确认一下settings.py中有没有STATIC_URL = '/static/'字段，如果没有把它也加在后面。\n编写模板\n在根目录下的templates/中，新建三个文件：\n\n\nbase.html是整个项目的模板基础，所有的网页都从它继承；\n\nheader.html是网页顶部的导航栏；\n\nfooter.html是网页底部的注脚。\n\n这三个文件在每个页面中通常都是不变的，独立出来可以避免重复写同样的代码，提高维护性。\n现在templates\\的结构像下面这个样子：\ntemplates\n│\n├─base.html\n├─header.html\n├─footer.html\n└─article\n    └─list.html # 上一章创建的\n加上之前的list.html，接下来就要重新写这4个文件了。\n因为前端知识非常博大精深，并且也不是Django学习的重点，本教程不会展开篇幅去讲。如果之前没接触过前端知识也没关系，这里可以先复制粘贴，不影响后面Django的学习。\n你可以试着改写其中的某段代码，看看会对页面产生什么样的影响；遇到不懂的就在Bootstrap官方文档找答案。慢慢就会明白它的运行机制，毕竟Bootstrap真的是非常简单易用的工具。\n这里会一次性写大量代码，不要着急慢慢看，理解了就很简单了。\n首先写base.html：\ntemplates/base.html\n\n<!-- 载入静态文件 -->\n{% load staticfiles %}\n\n<!DOCTYPE html>\n<!-- 网站主语言 -->\n<html lang=\"zh-cn\">\n\n<head>\n    <!-- 网站采用的字符编码 -->\n    <meta charset=\"utf-8\">\n    <!-- 预留网站标题的位置 -->\n    <title>{% block title %}{% endblock %}</title>\n    <!-- 引入bootstrap的css文件 -->\n    <link rel=\"stylesheet\" href=\"{% static 'bootstrap/css/bootstrap.min.css' %}\">\n</head>\n\n<body>\n    <!-- 引入导航栏 -->\n    {% include 'header.html' %}\n    <!-- 预留具体页面的位置 -->\n    {% block content %}{% endblock content %}\n    <!-- 引入注脚 -->\n    {% include 'footer.html' %}\n    <!-- bootstrap.js 依赖 jquery.js 和popper.js，因此在这里引入 -->\n    <script src=\"{% static 'jquery/jquery-3.3.1.js' %}\"></script>\n    <script src=\"{% static 'popper/popper-1.14.4.js' %}\"></script>    \n    <!-- 引入bootstrap的js文件 -->\n    <script src=\"{% static 'bootstrap/js/bootstrap.min.js' %}\"></script>\n</body>\n\n</html>\n\n模板中要加上 {% load staticfiles %} 之后，才可使用 {% static 'path' %} 引用静态文件。\nHTML语法中，所有的内容都被标签包裹；标签及标签中的属性可以对内容进行排印、解释说明等作用。\n\n<head></head>标签内包含网页的元数据，是不会在页面内显示出来的。<body></body>标签内才是网页会显示的内容。\n留意Bootstrap的css、js文件分别是如何引入的\njquery.js 和 popper.js 要在 bootstrap.js 前引入。**\n\n然后是header.html：\ntemplates/header.html\n\n<!-- 定义导航栏 -->\n<nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n  <div class=\"container\">\n\n    <!-- 导航栏商标 -->\n    <a class=\"navbar-brand\" href=\"#\">我的博客</a>\n\n    <!-- 导航入口 -->\n    <div>\n      <ul class=\"navbar-nav\">\n        <!-- 条目 -->\n        <li class=\"nav-item\">\n          <a class=\"nav-link\" href=\"#\">文章</a>\n        </li>\n      </ul>\n    </div>\n\n  </div>\n</nav>\n标签内的class属性是Bootstrap样式的定义方法。试着改写或删除其中一些内容，观察页面的变化。\n然后改写之前的list.html：\ntemplates/article/list.html\n\n<!-- extends表明此页面继承自 base.html 文件 -->\n{% extends \"base.html\" %}\n{% load staticfiles %}\n\n<!-- 写入 base.html 中定义的 title -->\n{% block title %}\n    首页\n{% endblock title %}\n\n<!-- 写入 base.html 中定义的 content -->\n{% block content %}\n\n<!-- 定义放置文章标题的div容器 -->\n<div class=\"container\">\n    <div class=\"row mt-2\">\n\n        {% for article in articles %}\n        <!-- 文章内容 -->\n        <div class=\"col-4 mb-4\">\n        <!-- 卡片容器 -->\n            <div class=\"card h-100\">\n                <!-- 标题 -->\n                <h4 class=\"card-header\">{{ article.title }}</h4>\n                <!-- 摘要 -->\n                <div class=\"card-body\">\n                    <p class=\"card-text\">{{ article.body|slice:'100' }}...</p>\n                </div>\n                <!-- 注脚 -->\n                <div class=\"card-footer\">\n                    <a href=\"#\" class=\"btn btn-primary\">阅读本文</a>\n                </div>\n            </div>\n        </div>\n        {% endfor %}\n\n    </div>\n</div>\n{% endblock content %}\n\n留意{% block title %}和{% block content %}是如何与base.html中相对应起来的。\n摘要中的{{ article.body|slice:'100' }}取出了文章的正文；其中的|slice:'100'是Django的过滤器语法，表示取出正文的前100个字符，避免摘要太长。\n\n最后写入footer.html：\n{% load staticfiles %}\n<!-- Footer -->\n<div>\n    <br><br><br>\n</div>\n<footer class=\"py-3 bg-dark fixed-bottom\">\n    <div class=\"container\">\n        <p class=\"m-0 text-center text-white\">Copyright &copy; www.dusaiphoto.com 2018</p>\n    </div>\n</footer>\n呼，真是一大堆的东西啊。\n让我们来捋一捋发生了什么：\n\n当我们通过url访问list.html时，顶部的{% extends \"base.html\" %}告诉Django：“这个文件是继承base.html的，你去调用它吧。”\n\n于是Django就老老实实去渲染base.html文件：\n\n其中的{% include 'header.html' %}表明这里需要加入header.html的内容\n\n{% include 'footer.html' %}加入footer.html的内容\n\n{% block content %}{% endblock content %}表明这里应该加入list.html中的对应块的内容\n\n\n\n运行服务器\n老规矩，保存全部文件，进入虚拟环境，运行开发服务器，在浏览器中输入http://127.0.0.1:8000/article/article-list/，看到如下页面：\n\n一个漂亮的博客界面就这样出现在眼前，非常神奇。\n如果报错也不要着急，程序员就是不断与bug斗争的一个职业。仔细检查Django给出的错误提示，修复它，你一定行。\n总结\n本章我们引入了前端框架Bootstrap 4，借助它重新组织了模板的结构，编写了一个漂亮的博客网站的首页。\n下一章我们将学习编写文章详情页面。\n\n有疑问请在杜赛的个人网站留言，我会尽快回复。\n或Email私信我：dusaiphoto@foxmail.com\n项目完整代码：Django_blog_tutorial\n\n\n转载请告知作者并注明出处。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "1"}