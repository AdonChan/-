{"title": "Python对类实例使用getattr - 个人文章 ", "index": "python", "content": "在类的成员函数中，如果你想通过一个字符串（成员函数名）来调用类的成员函数，该怎么做？\nclass A:\n    val = 1\n    def __init__(self):\n        pass\n\n    def fun_1(self):\n        print self.val\n        print \"in fun_1\"\n\n    def fun_2(self):\n        print \"in fun_2\"\n\n对于上面的类，你可以这样用\nobj = A()\ns = 'fun_1'\nfn = getattr(obj, s)\nfn()\n\n但是如果你传给getattr的第一个参数是对象名，那么就要这样用\nobj = A()\ns = 'fun_1'\nfn = getattr(A, s)\nfn(obj)\n\n相当于是fn只是一个函数名，需要一个调用参数，第一个参数就是self，也就是对象实例。在类成员函数中，可以这样用\nclass A:\n    val = 1\n    def __init__(self):\n        pass\n    def control(self):\n        name = 'fun_1'\n        fn = getattr(A, name)\n        fn(self)\n    def fun_1(self):\n        print self.val\n        print \"in fun_1\"\n    def fun_2(self):\n        print \"in fun_2\"\n\n看上面的成员函数control，也是同一个道理。如果像下面这样写的话，会出错\ndef control(self):\n    name = 'fun_1'\n    fn = getattr(A, name)\n    fn()\n\n报错信息就是TypeError: unbound method fun_1() must be called with A instance as first argument (got nothing instead)这个基本上指明了原因。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}