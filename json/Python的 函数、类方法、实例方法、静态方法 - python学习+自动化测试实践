{"title": "Python的 函数、类方法、实例方法、静态方法 - python学习+自动化测试实践 ", "index": "函数,方法,python", "content": "\n一、知识点^_^\n\n\n函数：我一般习惯把跟类无关叫成函数，而类里面实现的叫方法。\n\n类方法：也叫类型方法，在该方法上一行，用@classmethod进行标记。 第一个参数强制为cls，类对象。可以通过这个类对象访问类属性，由于没有传入类实例对象，所以不能访问类实例属性。\n\n静态方法：用@staticmethod标记的方法。无内定的参数，类和实例都可以调用，方法有多少参数就必须传递多少参数。\n\n实例方法：没有@classmethod和@staticmethod标记的方法是实例方法。 第一个参数强制为self，类实例对象。可以通过这个类实例对象访问类属性，可以通过类实例对象的__class__属性访问类属性。 假设该方法有n个参数，类型调用的时候需要给n个参数传参。而实例调用时则只能传n-1个参数，因为第一个参数被系统默认传递了实例本身。\n\n二、举例说明\n先来了解一下绑定的概念。\n\n绑定binding：它与方法调用相关联。 首先该方法是类内部定义的函数，是类方法属性。 类方法中，第一个参数都是self，表示调用此方法的实例对象，不需要赋值。 且该方法只有在其所属类拥有实例对象时，才能被调用，即方法绑定到类实例对象上了。 没有类实例对象时，方法就是未绑定状态。\n上代码：\ndef foo(x):                # 一般方法\n    print \"executing foo(%s)\"%(x)\n    \nclass A(object):           \n    def foo(self,x):    # 实例方法\n        print \"executing foo(%s,%s)\"%(self,x)\n        \n    @classmethod        # 类方法          \n    def class_foo(cls,x):\n        print \"executing class_foo(%s,%s)\"%(cls,x)\n\n    @staticmethod        # 静态方法\n    def static_foo(x):\n        print \"executing static_foo(%s)\"%x\na=A()\n1、    一般方法此方法的工作跟类、实例均无关系。可以直接调用foo(x)。2、    实例方法在类里定义实例方法时第一个参数永远是实例变量self（绑定类的实例），实例方法的调用离不开实例，调用：a.foo(x)，其中a是A的实例。3、    类方法 @classmethod类方法定义时需要去绑定类（即通过cls）。调用的时候传递的是类，调用：A.class_foo(x)，其中A是类。4、    静态方法@staticmethod与普通方法一样，不需要对类或实例进行绑定，but调用时需要通过类或实例，调用：a.static_foo(x)或A.static_foo(x)。\n\n❤ thanks for watching, keep on updating...点个赞再走吧\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}