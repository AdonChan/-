{"title": "Flask源代码阅读笔记（一）——应用启动 - 个人文章 ", "index": "flask,python", "content": "以前在博客园上写的文章，转到这里来。\n这是一个最简单的demo：\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return 'Hello, World!'\n\nif __name__ == '__main__':\n    app.run()\nrun()方法启动了应用，那么run()背后都调用哪些类、方法和函数呢？\n将相关代码汇总起来，如下：\ndef run(self, host='localhost', port=5000, **options):\n        from werkzeug import run_simple\n        if 'debug' in options:\n            self.debug = options.pop('debug')\n        options.setdefault('use_reloader', self.debug)\n        options.setdefault('use_debugger', self.debug)\n        return run_simple(host, port, self, **options)\n\ndef run_simple(hostname, port, application, use_reloader=False,\n               use_debugger=False, use_evalex=True,\n               extra_files=None, reloader_interval=1, threaded=False,\n               processes=1, request_handler=None, static_files=None,\n               passthrough_errors=False, ssl_context=None):\n    def inner():\n        make_server(hostname, port, application, threaded,\n                    processes, request_handler,\n                    passthrough_errors, ssl_context).serve_forever()\n\ndef make_server(host, port, app=None, threaded=False, processes=1,\n                request_handler=None, passthrough_errors=False,\n                ssl_context=None):\n    if threaded and processes > 1:\n        raise ValueError(\"cannot have a multithreaded and \"\n                         \"multi process server.\")\n    elif threaded:\n        return ThreadedWSGIServer(host, port, app, request_handler,\n                                  passthrough_errors, ssl_context)\n    elif processes > 1:\n        return ForkingWSGIServer(host, port, app, processes, request_handler,\n                                 passthrough_errors, ssl_context)\n    else:\n        return BaseWSGIServer(host, port, app, request_handler,\n                              passthrough_errors, ssl_context)\n\nclass BaseWSGIServer(HTTPServer, object):\n    def __init__(self, host, port, app, handler=None,\n                 passthrough_errors=False, ssl_context=None):\n        if handler is None:\n            handler = WSGIRequestHandler\n        self.address_family = select_ip_version(host, port)\n        HTTPServer.__init__(self, (host, int(port)), handler)\n        self.app = app\n        self.passthrough_errors = passthrough_errors\n\n# BaseWSGIServer第四行\nclass WSGIRequestHandler(BaseHTTPRequestHandler, object):\n    def run_wsgi(self):\n        app = self.server.app\n        environ = self.make_environ()\n        headers_set = []\n        headers_sent = []\n\n        def execute(app):\n            application_iter = app(environ, start_response)\n\n# 调用了__call__方法，所以要回到Flask类中寻找相关代码\nclass Flask(object):\n    def __call__(self, environ, start_response):\n        return self.wsgi_app(environ, start_response)\n\n    def wsgi_app(self, environ, start_response):\n        with self.request_context(environ):\n            rv = self.preprocess_request()\n            if rv is None:\n                rv = self.dispatch_request()\n            response = self.make_response(rv)\n            response = self.process_response(response)\n            return response(environ, start_response)\n使用graphviz将关系画出来，如下：\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}