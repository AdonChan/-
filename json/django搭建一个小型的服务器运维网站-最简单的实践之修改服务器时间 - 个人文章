{"title": "django搭建一个小型的服务器运维网站-最简单的实践之修改服务器时间 - 个人文章 ", "index": "javascript,html,python,django", "content": "目录\n\n\n项目介绍和源码；\n\n拿来即用的bootstrap模板；\n\n服务器SSH服务配置与python中paramiko的使用；\n\n用户登陆与session;\n最简单的实践之修改服务器时间；\n\n查看和修改服务器配置与数据库的路由；\n\n基于websocket的实时日志实现；\n\n查看服务器中的日志与前端的datatable的利用；\n\n重启服务器进程。\n\n前言\n  本篇文章会说下如何在网站上交互修改服务器的时间。其实质是通过网站调用文章服务器SSH服务配置与python中paramiko的使用中介绍的paramiko写的接口去和Linux服务器交互（图1中的函数）。网页分为获取时间，修改时间和记录修改时间三个简单功能，大体的结构如图1所示，页面效果如图2所示。也有些小细节的完善，如laydate插件的使用和通过数据库后台记录正在进行的任务等。\n\n\n功能实现\n  关于模板简化的方法在拿来即用的bootstrap模板文章中已经实现了，文章中说到，网页独有的内容放在{% block mainbody %}中，现在我们考虑在空空如也的模板中添加一些功能。在写之前，我们把文章中提到的各种paramiko封装的接口放在functions.py这个文件里面，并把它塞到WebTool/WebTool下面，如图3，以便解耦。\n\n  下面是一堆html代码，这段代码实现了图2所示的前端内容（其中的{{}}中内容是由下文中提到的渲染函数servertime传递上来的）。然后说下实现。\n{% extends \"./base.html\" %}\n\n{% block othercss %}{% endblock %}\n{% block title %}{{ title }}{% endblock %}\n{% block log %}{{ title }}{% endblock %}\n{% block username %}{{ username }}{% endblock %}\n\n{% block mainbody %}\n<section class=\"wrapper site-min-height\">\n    <h3><i class=\"fa fa-angle-right\"></i> 服务器时间 <i class=\"fa fa-calendar\"></i></h3>\n    <div class=\"row mt\">\n        <div class=\"col-lg-6\">\n            <div class=\"form-panel\">\n                <h4 class=\"mb\"> 服务器时间</h4>\n                <div class=\"col-sm-12\">\n                    <h4 class=\"mb\" id=\"getservertime\" style=\"text-align: center\"> {{time}}</h4>\n                </div>\n                <div><br><br><br></div>\n                <div class=\"col-sm-12\" style=\"text-align: right\">\n                    <button id=\"gettime\" class=\"btn btn-theme02\">重新获取</button>\n                </div>\n                <div><br><br><br></div>\n            </div>\n        </div>\n        <div class=\"col-lg-6\">\n            <div class=\"form-panel\">\n                <h4 class=\"mb\"> 修改服务器时间</h4>\n                <div class=\"col-sm-12\">\n                    <div class=\"task-content\">\n                        <ul id=\"sortable\" class=\"task-list ui-sortable\">\n                            {% if serverstatus == 'others' %}\n                            <li class=\"list-danger\">\n                                <i class=\" fa fa-ellipsis-v\"></i>\n                                <span class=\"task-title-sp\">【{{taskor}}】在使用服务器，无法修改时间</span>\n                            </li>\n                            {% elif serverstatus == 'nobady' %}\n                            <li class=\"list-success\">\n                                <i class=\" fa fa-ellipsis-v\"></i>\n                                <input type=\"checkbox\" class=\"list-child\" onchange=\"isCheck(this)\" value=\"\">\n                                <span class=\"task-title-sp\" id=\"use\">&nbsp;&nbsp;我在使用中，请勿修改时间</span>\n                            </li>\n                            {% else %}\n                            <li class=\"list-success\">\n                                <i class=\" fa fa-ellipsis-v\"></i>\n                                <input type=\"checkbox\" class=\"list-child\" checked=\"checked\" onchange=\"isCheck(this)\" value=\"\">\n                                <span class=\"task-title-sp\" id=\"use\">&nbsp;&nbsp;我在使用中，请勿修改时间</span>\n                            </li>\n                            {% endif %}\n                        </ul>\n                    </div>\n                </div>\n                <div><br><br><br><br></div>\n                {% if serverstatus != 'others' %}\n                <div class=\"col-sm-12\" id=\"status\">\n                    <input type=\"text\" class=\"form-control\" id=\"time\">\n                    <div class=\"progress progress-striped active\" style=\"display:none;\" id=\"loading\">\n                        <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"100\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 100%\"></div>\n                    </div>\n                </div>\n                <div><br><br><br></div>\n                <div class=\"col-sm-12\" style=\"text-align: right\">\n                    <button id=\"putsettingtime\" class=\"btn btn-theme02\">提交修改</button>\n                    <button id=\"putlocaltime\" class=\"btn btn-theme02\">快捷恢复系统时间</button>\n                </div>\n                <div><br><br><br></div>\n                {% endif %}\n            </div>\n        </div>\n    </div>\n    <div class=\"row mt\">\n        <div class=\"col-lg-6\">\n            <div class=\"form-panel\">\n                <h4 class=\"mb\"> 修改时间的记录</h4>\n                <table class=\"table table-hover\">\n                    <thead>\n                    <tr>\n                        <th style=\"width:10%;\">修改时间</th>\n                        <th style=\"width:10%;\">修改人</th>\n                        <th style=\"width:10%;\">修改后服务器时间</th>\n                    </tr>\n                    </thead>\n                    <tbody id=\"tab\">\n                    {% for modifytime in modifytimes %}\n                    <tr>\n                        <td>{{ modifytime.modifytime }}</td>\n                        <td>{{ modifytime.modifyer }}</td>\n                        <td>{{ modifytime.modifyservertime }}</td>\n                    </tr>\n                    {% endfor %}\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n</section>\n{% endblock %}\n  该页面所需的完整javascript代码如下,其中已经包含了下文要实现的功能函数，包括重新获取时间、修改时间、本人占用服务器不准其他人修改时间、显示修改时间的记录，具体细节可以看代码中的注释，另外代码中的swal是sweetalert2组件，文章用户登陆与session已经提到过其引用和用法。\n{% block scripts %}\n<script>\n// 获取并局部刷新图4蓝色框中现实的服务器时间\nfunction getservertime(){\n    $.ajax({\n        url:\"getservertime\",\n        type:'GET',\n        success: function(arg){\n            ret = eval(arg);\n            if(ret.status){\n                $(\"#getservertime\").html(ret.time)\n            }else{\n                $(\"#getservertime\").html(ret.error)\n            }\n        }\n    });\n}\n// 本人是否占用服务器\nfunction isCheck(obj){\n    if($(obj).prop(\"checked\")){\n        $.ajax({\n            url:\"usingserver\",\n            type:'GET',\n            data:{'using':'yes'},\n        });\n    }else{\n        $.ajax({\n            url:\"usingserver\",\n            type:'GET',\n            data:{'using':'no'},\n        });\n    }\n}\n$(document).ready(function(){\n    // 页面载入时候就会获取一次服务器时间\n    $(\"#gettime\").click(function(){\n        getservertime();\n    });\n    // 修改服务器时间的函数\n    $(\"#putsettingtime\").click(function(){\n        settingtime = $(\"#time\").val();\n        if(settingtime == ''){\n            swal('', '请选择时间!', 'error')\n        }\n        else{\n            swal({\n            title: '将服务器时间设定为输入的时间?',\n            type: 'warning',\n            confirmButtonColor: '#DD6B55',\n            confirmButtonText:\"是的\",  \n            cancelButtonText:\"不用\",\n            showLoaderOnConfirm: true, //加载按钮是否可见  \n            showCancelButton: true,\n            preConfirm: function() {  \n                return new Promise(function(resolve) {  \n                    setTimeout(function(){\n                        $(\"#putlocaltime\").hide();\n                        $(\"#putsettingtime\").hide();\n                        $(\"#time\").hide();\n                        $(\"#loading\").show();\n                        resolve();  \n                    }, 3000);  \n                });  \n            },  \n            allowOutsideClick: false, //弹框外是否可点\n        }).then(function(res){  \n            if(res){  \n                $.ajax({\n                    url:\"settime\",\n                    type:'POST',\n                    data:{'settime':settingtime},\n                    success: function(arg){\n                        ret = eval(arg);\n                        if(ret.status){   \n                            swal({  \n                                type: 'success',  \n                                title: '时间设定完成！',  \n                                confirmButtonText: '确定',  \n                                confirmButtonColor: '#4cd964'  \n                            }).then(function(){\n                                //修改成功之后，局部刷新图4蓝色框中的显示的时间\n                                getservertime();\n                                $(\"#putlocaltime\").show();\n                                $(\"#putsettingtime\").show();\n                                $(\"#time\").show();\n                                $(\"#loading\").hide();\n                                // 向前端的修改时间记录表格中添加一条记录\n                                var tr = \"<tr><td>\"+ret.modifytime+\"</td><td>\"+ret.modifyer+\"</td><td>\"+ret.servertime+\"</td></tr>\"\n                                $(\"#tab tr:first\").before(tr); //向table的第一行添加数据\n                                $(\"#tab tr:last\").remove();    //删除最后一行\n                                });  \n                        }else{      //修改失败\n                            swal({  \n                                type: 'error',  \n                                title: '时间设定失败！',  \n                                confirmButtonText: '确定',  \n                                confirmButtonColor: '#4cd964'  \n                            }).then(function(){\n                                getservertime();\n                                $(\"#putlocaltime\").show();\n                                $(\"#putsettingtime\").show();\n                                $(\"#time\").show();\n                                $(\"#loading\").hide();\n                            });  \n                        }\n                    }});\n            }\n        });\n        }\n    });\n    // 重置服务器时间\n    $(\"#putlocaltime\").click(function(){\n        swal({  \n            title: '将服务器时间设定为本地时间?',\n            type: 'warning',\n            confirmButtonColor: '#DD6B55',\n            confirmButtonText:\"是的\",  \n            cancelButtonText:\"不用\",\n            showLoaderOnConfirm: true, //加载按钮是否可见  \n            showCancelButton: true,\n            preConfirm: function() {  \n                return new Promise(function(resolve) {  \n                    setTimeout(function(){ \n                        $(\"#putlocaltime\").hide();\n                        $(\"#putsettingtime\").hide();\n                        $(\"#time\").hide();\n                        $(\"#loading\").show();\n                        resolve();  \n                    }, 3000);  \n                });  \n            }, \n            allowOutsideClick: false, //弹框外是否可点\n        }).then(function(res){ \n            if(res) {  \n                $.ajax({\n                    url:\"recoverlocaltime\",\n                    type:'GET',\n                    success: function(arg){\n                        ret = eval(arg);\n                        if(ret.status){\n                            swal({  \n                                type: 'success',  \n                                title: '时间设定完成！',  \n                                confirmButtonText: '确定',  \n                                confirmButtonColor: '#4cd964'  \n                                }).then(function(){\n                                    //修改成功之后，局部刷新图4蓝色框中的显示的时间\n                                    getservertime();\n                                    $(\"#putlocaltime\").show();\n                                    $(\"#putsettingtime\").show();\n                                    $(\"#time\").show();\n                                    $(\"#loading\").hide();\n                                    //修改成功之后，局部刷新图4蓝色框中的显示的时间\n                                    var tr = \"<tr><td>\"+ret.modifytime+\"</td><td>\"+ret.modifyer+\"</td><td>\"+ret.modifytime+\"</td></tr>\"\n                                    $(\"#tab tr:first\").before(tr); //向table的第一行添加数据\n                                    $(\"#tab tr:last\").remove();    //删除最后一行\n                                    });  \n                        }else{\n                            swal({  \n                                type: 'error',  \n                                title: '时间设定失败！',  \n                                confirmButtonText: '确定',  \n                                confirmButtonColor: '#4cd964'  \n                                }).then(function(){\n                                    getservertime();\n                                    $(\"#putlocaltime\").show();\n                                    $(\"#putsettingtime\").show();\n                                    $(\"#time\").show();\n                                    $(\"#loading\").hide();\n                                });  \n                        }\n                    }});\n            }  \n        });  \n    });\n    // laydata组件\n    laydate.render({\n        elem: '#time',\n        type: 'datetime',\n        theme: 'molv'\n    });\n});\n</script>\n// 引入laydata组件\n<script src=\"/templates/servermaterial/assets/laydate/laydate.js\"></script>\n{% endblock %}\n\n\n创建models.py\n  django自带强大的与数据库操作相关的api，使得用户在使用数据库时只用考虑存储的逻辑，django操作数据库中的一些常用函数可以查看该文章。另外，在文章查看和修改服务器配置与数据库的路由也会提到一些数据库函数的用法。\n服务器被占用\n  你在操作服务器时，别人也在使用服务器，当你操作（修改时间，配置）时会被别人影响服务器环境的时候，可以考虑把服务器‘锁’起来，拿修改服务器时间举个例子，我们不想让别人通过这个网站修改服务器时间，我们可以在数据库中设置一个表，用来记录服务器的任务状态，当有用户在使用这个任务时，它会在这个表中记录一条数据，别人在需要做该任务时，会发现表中有一个相同的任务在进行，没法操作。任务完成后，表中删除对应的任务记录，别人就可以进行了（简而言之，A操作的时候B不能操作）。具体如何使用后面会说到。  对了，在初始化数据库前，需要执行python manage.py makemigrations、python manage.py migrate、python manage.py migrate --database=server三条指令分别用来更新表、刷新默认的数据库和server的数据库，关于server的数据库，可以查看文章查看和修改服务器配置与数据库的路由。\nclass taskinbackground(models.Model):\n    # 任务的名字\n    taskname = models.CharField(max_length=50)\n    # 操作人\n    taskor = models.CharField(max_length=100)\n\n    class Meta:\n        # 别名\n        db_table = 'task'\n        # 数据库路由标签\n        app_label = \"server\"\n改时间记录\nclass modifytime(models.Model):\n    # 修改人\n    modifyer = models.CharField(max_length=100)\n    # 操作时间\n    modifytime = models.CharField(max_length=200, default=\"\")\n    # 变更后服务器时间\n    modifyservertime = models.CharField(max_length=200, default=\"\")\n\n    class Meta:\n        db_table = 'modifytime'\n        app_label = \"server\"\n显示页面\n  设计的时候，考虑到当用户进入http://127.0.0.1:8888/server/servertime.html网页时就能够获取时间和修改时间的记录，所以添加url和模板显示函数view，分别位于server/urls.py和server/views.py，其中server/urls.py和上文中给出javascript函数一样给出了下文中所有需要用到的功能的url，server/views.py除了给出页面显示的函数servertime之外也给出了手动通过按钮重新获取（下图4红色框）得到时间的方法getservertime功能函数。  views中的servertime用到的函数get_server_time()可以用来访问服务器获取时间，其写在WebTool/funtions.py中，具体的函数请移步至文章服务器SSH服务配置与python中paramiko的使用。\n\nserver/urls.py中的代码如下：\nfrom django.conf.urls import url\nimport views\n\nurlpatterns = [\n    url(r'^$', views.homepage),\n    url(r'^home', views.homepage),\n    # 修改时间\n    url(r'^settime', views.settime),\n    # 显示时间页面\n    url(r'^servertime', views.servertime),\n    \n    \n    # 按钮重新获得时间\n    url(r'^getservertime', views.getservertime),\n    # 重置时间\n    url(r'^recoverlocaltime', views.recoverlocaltime),\n    # 本人占用服务器不准他人改时间\n    url(r'^usingserver', views.usingserver),\n    # 用户登出\n    url(r'^userlogout', views.userlogout),\n]\nserver/views.py中的代码如下：\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.contrib.auth import logout\nfrom django.shortcuts import render_to_response\nfrom django.http import JsonResponse\nfrom django.contrib.auth.decorators import login_required\nimport json\nimport time\n\n\n# 服务器的名字\nhtmltitle = '服务器工具'\n\n\n@login_required(login_url='/loginpage')\ndef servertime(request):\n    from WebTool.functions import get_server_time\n    from server import models\n    taskor = ''\n    try:\n        # 查看是否有人在占用服务器\n        taskor = models.taskinbackground.objects.get(taskname='usingtime').taskor\n    except Exception as e:\n        print e\n    username = request.session.get('username')\n    # 取出数据库后10条修改时间的数据\n    modifytimes = models.modifytime.objects.all()[::-1][0:10]\n    pagedict = {'time': get_server_time(), 'modifytimes': modifytimes, 'title': htmltitle, 'username': username}\n    # 本人在使用服务器\n    if taskor == username:\n        pagedict['serverstatus'] = 'self'\n    # 无人使用服务器\n    elif taskor == '':\n        pagedict['serverstatus'] = 'nobady'\n    # 其他人在使用服务器\n    else:\n        pagedict['serverstatus'] = 'others'\n        pagedict['taskor'] = taskor\n    return render_to_response('servermaterial/servertime.html', pagedict)\n\n\n# 这个函数用来处理按钮【重新获取】的逻辑，请求它的url和javascipt代码已经在前面给出\ndef getservertime(request):\n    if request.method == 'GET':\n        ret = {'status': False, 'time': '', 'error': ''}\n        try:\n            from WebTool.functions import get_server_time\n            # 将时间传到前端局部刷新上图4的蓝色框中显示的时间\n            ret['time'] = get_server_time()\n            ret['status'] = True\n        except Exception, e:\n            ret['status'] = False\n            ret['error'] = str(e)\n            return JsonResponse(ret)\n        return JsonResponse(ret)\n  完成上面的代码之后我们就看可以显示服务器时间页面了。并且能够查看服务器时间，手动通过按钮查看服务器时间并且局部刷新网页上的时间显示。\n修改时间\n本人占用服务器不准其他人修改时间\n  控制它的javascript函数为isCheck(obj)，url为上文中的url(r'^usingserver', views.usingserver)。占用服务器的任务名字叫做usingtime。\n# 有人使用服务器，别人无法修改时间\ndef usingserver(request):\n    ret = {'status': False}\n    if request.method == 'GET':\n        status = request.GET.get('using')\n        from server import models\n        # 我占用服务器，别人无法修改时间\n        if status == 'yes':\n            username = request.session.get('username')\n            models.taskinbackground.objects.filter(taskname='usingtime').delete()\n            models.taskinbackground.objects.create(taskname='usingtime', taskor=username)\n            ret['status'] = True\n            return JsonResponse(ret)\n        # 我释放服务器，别人可以修改时间\n        if status == 'no':\n            models.taskinbackground.objects.filter(taskname='usingtime').delete()\n            ret['status'] = True\n            return JsonResponse(ret)\n  用户访问服务器时间页面时，前端会根据后台渲染函数servertime传递的参数判断服务器使用的状态，分别是本人使用中（servertime函数中的self）、没人使用（servertime函数中的nobady）、其他人在使用（servertime函数中的others）。如下图5所示，当一个用户勾选了红框中的checkbox，其他用户会无法修改时间。前端逻辑可以直接由上文中给出的html代码看出。\n\n提交修改的时间\n  要实现该功能，还需要在server/views.py中添加这些对应的响应函数，他们都是通过前端ajax（写在上文中的javascript函数里面）请求到后台的，同样的，用到的和服务器交互的相关paramiko函数写在WebTool/functions.py中，都已经在服务器SSH服务配置与python中paramiko的使用文章中实现。重置时间和提交修改分别对应图6中红框中的按钮。\n\n  重置时间和提交修改使用到的views函数：\n# 重置时间\ndef recoverlocaltime(request):\n    if request.method == 'GET':\n        ret = {'status': False}\n        try:\n            from WebTool.functions import restore_server_time\n            from server import models\n            # 充值时间\n            restore_server_time()\n            # 获取本地的时间\n            local_time = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())\n            # 获取当前的操作人\n            username = request.session.get('username')\n            # 数据库中记录本次操作\n            models.modifytime.objects.create(modifyer=username, modifytime=local_time, modifyservertime=local_time)\n            ret['status'] = True\n            # 将修改的记录传递到前端局部刷新添加\n            ret['modifytime'] = local_time\n            ret['modifyer'] = username\n        except Exception, e:\n            ret['status'] = False\n            return JsonResponse(ret)\n        return JsonResponse(ret)\n\n\n# 提交前端给过来的时间\ndef settime(request):\n    if request.method == 'POST':\n        ret = {'status': False}\n        try:\n            from WebTool.functions import modify_server_time\n            from server import models\n            servertime = request.POST.get('settime')\n            # 修改时间\n            modify_server_time(servertime)\n            # 获取本地时间\n            local_time = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())\n            # 获取操作人\n            username = request.session.get('username')\n            # 数据库中记录改时间的记录\n            models.modifytime.objects.create(modifyer=username, modifytime=local_time, modifyservertime=servertime)\n            # 将操作的时间、服务器的时间、操作人传到前端局部添加\n            ret['modifytime'] = local_time\n            ret['servertime'] = servertime\n            ret['modifyer'] = username\n            ret['status'] = True\n        except Exception, e:\n            ret['status'] = False\n            return JsonResponse(ret)\n        return JsonResponse(ret)\nlaydate组件\n  组件的引入和sweetalert2的引入方法一样，将laydate组件的资源文件下载下来放到资源文件夹中，然后在前端模板中引用即可，由于基本是本页面私有的资源，我们把它放到servertime.html文件中的{% block scripts %}中（可以由上文给出的该页面完整的javascript代码看到）\n\n  引用完成后，我们可以看到点击input框之后的效果如图8所示，当然laydate组件支持更多定制，可以参考这里。选好自己的样式后修改图7中的laydate.render的字段就可以了。\n\n结语\n  本篇文章主要介绍了如何实现修改服务器时间等相关功能，顺带说了下如何在数据库记录任务的状态和相关前端组件的应用。写的有点乱，等把项目搭完就会把网站的源码包贴出来。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}