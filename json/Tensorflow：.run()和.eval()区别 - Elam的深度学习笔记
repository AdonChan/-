{"title": "Tensorflow：.run()和.eval()区别 - Elam的深度学习笔记 ", "index": "deeplearning,python,tensorflow", "content": "Tensorflow：.run()和.eval()区别\neval() 其实就是tf.Tensor的Session.run() 的另外一种写法，但两者有差别\n1.eval(): 将字符串string对象转化为有效的表达式参与求值运算返回计算结果2.eval()也是启动计算的一种方式。基于Tensorflow的基本原理，首先需要定义图，然后计算图，其中计算图的函数常见的有run()函数，如sess.run()。同样eval()也是此类函数，3.要注意的是，eval()只能用于tf.Tensor类对象，也就是有输出的Operation。对于没有输出的Operation, 可以用.run()或者Session.run()；Session.run()没有这个限制。\nTensor.run和Tensor.eval的区别\n在会话中需要运行节点，会碰到两种方式：Session.run()和Tensor.eval()\n解释一 \n1.如果t是一个tf.Tensor对象，则tf.Tensor.eval是tf.Session.run的缩写（其中sess是当前的tf.get_default_session。下面的两个代码片段是等价的：2.在第二个示例中，会话充当上下文管理器，其作用是将其安装为with块的生命周期的默认会话。 上下文管理器方法可以为简单用例（比如单元测试）提供更简洁的代码; 如果您的代码处理多个图形和会话，则可以更直接地对Session.run（）进行显式调用。\n解释二\n如果你有一个Tensor t，在使用t.eval()时，等价于：tf.get_default_session().run(t). 举例：\nt = tf.constant(42.0)\nsess = tf.Session()\nwith sess.as_default():   # or `with sess:` to close on exit\n    assert sess is tf.get_default_session()\n    assert t.eval() == sess.run(t)\n这其中最主要的区别就在于你可以使用sess.run()在同一步获取多个tensor中的值， 例如：\nt = tf.constant(42.0)\nu = tf.constant(37.0)\ntu = tf.mul(t, u)\nut = tf.mul(u, t)\nwith sess.as_default():\n   tu.eval()  # runs one step\n   ut.eval()  # runs one step\n   sess.run([tu, ut])  # evaluates both tensors in a single step\n注意到：每次使用 eval 和 run时，都会执行整个计算图，为了获取计算的结果，将它分配给tf.Variable，然后获取。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}