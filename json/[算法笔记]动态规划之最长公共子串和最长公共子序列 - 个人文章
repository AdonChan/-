{"title": "[算法笔记]动态规划之最长公共子串和最长公共子序列 - 个人文章 ", "index": "算法,动态规划,python", "content": "本文是《算法图解》笔记\n应用场景\n一切脱离实际应用场景的算法都是耍流氓！\n\n生物学家根据最长公共序列来确定 DNA 链的相似性，进而判断两种动物或疾病有多相似。最长公共序列还被用来寻找多发性硬化症治疗方案。\n源代码管理中，git diff指令，可以查找出编辑前后文件的差异，这是基于动态规划实现的。\n编辑距离（levenshtein distance），判断字符串的相似程度，也是基于动态规划计算。可以通过这个技术从拼写检查到判断用户上传的资料是否是盗版。（这样看来，我猜想大学论文查重应该也是基于动态规划算法:P）\nMicrosoft Word等软件中具有断字功能，使用动态规划可以确定什么地方断字以确保行长一致。\n\n最长公共子串\n场景：\n某个用户在网站搜索框中输入一个字符串 hish，但其实用户想输入的是 fish\n介绍这个网站的可选字典里面只有 fish 和 vista 这两个相似单词\n猜测用户到底想要搜索的是什么字符串？\n在动态规划中，目标是要将某个指标最大化，在这个例子中，要找出两个单词的公共子串。更大的那个即为结果。\n求解网格：\n注：只列出hish的例子，vista思路相同\n\n\n \nh\ni\ns\nh\n\n\n\nf\n0\n0\n0\n0\n\n\ni\n0\n1\n0\n0\n\n\ns\n0\n0\n2\n0\n\n\nh\n1\n0\n0\n3\n\n\n\n算法描述：\n\n如果两个字母不同，值为0\n如果两个字母相同，值为左上角邻居的值加一\n\n伪代码：\nif word_a[i] == word_b[j]:\n    cell[i][j] = cell[i-1][j-1] + 1\nelse:\n    cell[i][j] = 0\n最长公共子序列\n场景\n假设用户不小心输入了 fosh ，要判断他原本要输入的是 fish 还是 fort\n这时候需要使用最长公共子序列来比较\n求解网络：\n\n\n \nf\no\ns\nh\n\n\n\nf\n1\n1\n1\n1\n\n\ni\n1\n1\n1\n1\n\n\ns\n1\n1\n2\n2\n\n\nh\n1\n1\n2\n3\n\n\n\n算法描述:\n\n如果两个字母不同，就选择上方和左方邻居格子中较大的那个值\n如果两个字母相同，值为左上方格子中的值加一\n\n伪代码：\nif word_a[i] == word_b[j]:\n    cell[i][j] = cell[i-1][j-1] + 1\nelse:\n    cell[i][j] = max(cell[i-1][j], cell[i][j-1])\n\n我的博客： http://vimiix.com\n\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "3"}