{"title": " Python实用技法第17篇：将名称映射到序列的元素中 - python3 ：公司内部培训专栏 ", "index": "python", "content": "上一篇文章：Python实用技法第16篇：从字典中提取子集\n\n1、需求🙀\n我们的代码是通过位置（即索引或下标）来访问列表会元组的，但有时候这会让代码变得有些难以阅读。我们希望可以通过名称来访问元素，以此减少结构中对位置的依赖性。\n2、解决方案😸\n相比普通的元组，collections.namedtuple()(命名元组)只增加了极少的开销就提供了这些便利。实际上collections.namedtuple()是一个工厂方法，它返回的是Python中标准元组类型的子类。我们提供给它一个类型名称以及相应的字段，它就返回一个可实例化的类、为你已经定义好的字段传入值等。\nfrom collections import namedtuple\nSubscriber=namedtuple('Subsciber',['addr','joined'])\nsub=Subscriber(\"1782980833@qq.com\",\"2018-10-23\")\n\nprint(sub)\nprint(sub.addr)\nprint(sub.joined)\n\nprint(len(sub))\naddr,joined=sub\nprint(addr)\nprint(joined)\n\n#下面错误，以为你namedtuple是不可变的\n#sub.joined=\"2019\"\n结果：\nSubsciber(addr='1782980833@qq.com', joined='2018-10-23')\n1782980833@qq.com\n2018-10-23\n2\n1782980833@qq.com\n2018-10-23\n尽管namedtuple的实例看起来就像一个普通的类实例，但它的实例与普通的元组是可互换的，而且支持所有普通元组所支持的操作。\n命名元组的主要作用在于将代码同它所控制的元素位置间解耦。所以，如果从数据库调用中得到了一个大型的元组列表，而且通过元素的位置来访问元素，那么假如在表单中新增了一列数据，那么代码就会崩溃，但如果首先将返回的元组转换为命名元组，就不会出现问题。\n为了说明这个问题，下面有一些使用普通元组的代码：\ndef compute_cost(records):\n    total=0.0\n    for rec in records:\n        total+=rec[1]*rec[2]\n    return total\n通过位置来引用元素常常使得代码的表达力不够强，而且也很依赖于记录的具体结构。\n下面是使用命名元组的版本：\nfrom collections import namedtuple\nStock=namedtuple('Stock',['name','shares','price'])\ndef compute_cost(records):\n    total=0.0\n    for rec in records:\n        s=Stock(*rec)\n        total+=s.shares*s.price\n    return total\n3、分析😈\nnamedtuple的一种可能用法是作为字典的替代，后者需要更多的空间来存储。因此，如果要构建设计字典的大型数据，使用namedtuple会更加高效，但是请注意，与字典不同的是，namedtuple是不可变的。\n如果需要修改任何属性，可以通过使用namedtuple实例_replace()方法来实现。该方法会创建一个全新的命名元组，并对相应的值做替换。\nfrom collections import namedtuple\nSubscriber=namedtuple('Subsciber',['addr','joined'])\nsub=Subscriber(\"1782980833@qq.com\",\"2018-10-23\")\n\nprint(sub)\n\nsub=sub._replace(joined=\"2018-10-24\")\nprint(sub)\n结果：\nSubsciber(addr='1782980833@qq.com', joined='2018-10-23')\nSubsciber(addr='1782980833@qq.com', joined='2018-10-24')\n_replace()方法有一个微妙的用途，那就是它可以作为一种简单的方法填充具有可选或缺失字段的命名元组。要做到这点，首先创建一个包含默认值得原型数组，然后使用_replace()方法创建一个新的实例，把相应的值替换掉。\nfrom collections import namedtuple\nSubscriber=namedtuple('Subsciber',['addr','joined','age'])\nsub=Subscriber(\"\",None,0)\n\ndef dict_to_stock(s):\n    return sub._replace(**s)\n\na={\"addr\":\"111111@qq.com\",\"joined\":\"1111-11-11\",\"age\":11}\na=dict_to_stock(a)\nprint(a)\n\nb={\"addr\":\"111111@qq.com\",\"joined\":\"1111-11-11\"}\nb=dict_to_stock(b)\nprint(b)\n\n结果：\nSubsciber(addr='111111@qq.com', joined='1111-11-11', age=11)\nSubsciber(addr='111111@qq.com', joined='1111-11-11', age=0)\n最后，也是相当重要的是，应该要注意如果我们的目标是定义一个高效的数据结构，而且将来会修改各种实例属性，那么使用namedtuple并不是最佳选择，相反，可以考虑顶一个使用了__slots__属性的类。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}