{"title": "Python学习之路5-字典 - VPointer ", "index": "python,dict", "content": "《Python编程：从入门到实践》笔记。本章主要介绍字典的概念，基本操作以及一些进阶操作。\n1. 使用字典（Dict）\n在Python中，字典是一系列键值对。每个键都与一个值相关联，用键来访问值。Python中用花括号{}来表示字典。\n# 代码：\nalien = {\"color\": \"green\", \"points\": 5}\n\nprint(alien)  # 输出字典\nprint(alien[\"color\"])   # 输出键所对应的值\nprint(alien[\"points\"])\n\n# 结果：\n{'color': 'green', 'points': 5}\ngreen\n5\n字典中可以包含任意数量的键值对，并且Python中字典是一个动态结构，可随时向其中添加键值对。\n# 代码：\nalien = {\"color\": \"green\", \"points\": 5}\nprint(alien)\n\nalien[\"x_position\"] = 0\nalien[\"y_position\"] = 25\nprint(alien)\n\n# 结果：\n{'color': 'green', 'points': 5}\n{'color': 'green', 'points': 5, 'x_position': 0, 'y_position': 25}\n有时候，在空字典中添加键值对是为了方便，而有时候则是必须这么做，比如使用字典来存储用户提供的数据或在编写能自动生成大量键值对的代码时，此时通常要先定义一个空字典。\n# 代码：\nalien = {}    # 定义空字典的语法\nalien[\"x_position\"] = 0\nalien[\"y_position\"] = 25\nprint(alien)\n\n# 结果：\n{'x_position': 0, 'y_position': 25}\n如果要修改字典中的值，只需通过键名访问就行。\n# 代码：\nalien = {\"color\" : \"green\"}\nprint(\"The alien is \" + alien[\"color\"] + \".\")\n\nalien[\"color\"] = \"yellow\"\nprint(\"The alien is now \" + alien[\"color\"] + \".\")\n\n# 结果：\nThe alien is green.\nThe alien is now yellow.\n对于字典中不再需要的信息，可用del语句将相应的键值对删除：\n# 代码：\nalien = {\"color\": \"green\", \"points\": 5}\nprint(alien)\n\ndel alien[\"color\"]\nprint(alien)\n\n# 结果：\n{'color': 'green', 'points': 5}\n{'points': 5}\n前面的例子都是一个对象的多种信息构成了一个字典（游戏中的外星人信息），字典也可以用来存储众多对象的统一信息：\nfavorite_languages = {\n    \"jen\": \"python\",\n    \"sarah\": \"c\",\n    \"edward\": \"ruby\",\n    \"phil\": \"python\",   # 建议在最后一项后面也加个逗号，便于之后添加元素\n}\n2. 遍历字典\n2.1 遍历所有的键值对\n# 代码：\nuser_0 = {\n    \"username\": \"efermi\",\n    \"first\": \"enrico\",\n    \"last\": \"fermi\",\n}\n\nfor key, value in user_0.items():\n    print(\"Key: \" + key)\n    print(\"Value: \" + value + \"\\n\")\n\n# 结果：\nKey: username\nValue: efermi\n\nKey: first\nValue: enrico\n\nKey: last\nValue: fermi\n这里有一点需要注意，遍历字典时，键值对的返回顺序不一定与存储顺序相同，Python不关心键值对的存储顺序，而只追踪键与值之间的关联关系。\n2.2 遍历字典中的所有键\n字典的方法keys()将字典中的所有键以列表的形式返回，以下代码遍历字典中的所有键：\n# 代码：\nfavorite_languages = {\n    \"jen\": \"python\",\n    \"sarah\": \"c\",\n    \"edward\": \"ruby\",\n    \"phil\": \"python\",\n}\n\nfor name in favorite_languages.keys():\n    print(name.title())\n\n# 结果：\nJen\nSarah\nEdward\nPhil\n也可以用如下方法遍历字典的所有键：\n# 代码：\nfavorite_languages = {\n    \"jen\": \"python\",\n    \"sarah\": \"c\",\n    \"edward\": \"ruby\",\n    \"phil\": \"python\",\n}\n\nfor name in favorite_languages:\n    print(name.title())\n\n# 结果：\nJen\nSarah\nEdward\nPhil\n但是带有方法keys()的遍历所表达的意思更明确。还可以用keys()方法确定某关键字是否在字典中：\n# 代码：\nfavorite_languages = {\n    \"jen\": \"python\",\n    \"sarah\": \"c\",\n    \"edward\": \"ruby\",\n    \"phil\": \"python\",\n}\n\nif \"erin\" not in favorite_languages.keys():\n    print(\"Erin, please take our poll!\")\n\n# 结果：\nErin, please take our poll!\n使用sorted()函数按顺序遍历字典中的所有键：\n# 代码：\nfavorite_languages = {\n    \"jen\": \"python\",\n    \"sarah\": \"c\",\n    \"edward\": \"ruby\",\n    \"phil\": \"python\",\n}\n\nfor name in sorted(favorite_languages.keys()):\n    print(name.title() + \", thank you for taking the poll.\")\n\n# 结果：\nEdward, thank you for taking the poll.\nJen, thank you for taking the poll.\nPhil, thank you for taking the poll.\nSarah, thank you for taking the poll.\n2.3 遍历字典中的所有值\n类似于遍历所有键用keys()方法，遍历所有值则使用values()方法\n# 代码：\nfavorite_languages = {\n    \"jen\": \"python\",\n    \"sarah\": \"c\",\n    \"edward\": \"ruby\",\n    \"phil\": \"python\",\n}\n\nprint(\"The following languages have been mentioned:\")\nfor language in favorite_languages.values():\n    print(language.title())\n\n# 结果：\nPython\nC\nRuby\nPython\n从结果可以看出，上述代码并没有考虑去重的问题，如果想要去重，可以调用set()：\n# 代码：\nfavorite_languages = {\n    \"jen\": \"python\",\n    \"sarah\": \"c\",\n    \"edward\": \"ruby\",\n    \"phil\": \"python\",\n}\n\nprint(\"The following languages have been mentioned:\")\nfor language in set(favorite_languages.values()):\n    print(language.title())\n\n# 结果：\nPython\nC\nRuby\n3. 嵌套\n3.1 字典列表\n以前面外星人为例，三个外星人组成一个列表：\n# 代码：\nalien_0 = {\"color\": \"green\", \"points\": 5}\nalien_1 = {\"color\": \"yellow\", \"points\": 10}\nalien_2 = {\"color\": \"red\", \"points\": 15}\n\naliens = [alien_0, alien_1, alien_2]\n\nfor alien in aliens:\n    print(alien)\n\n# 结果：\n{'color': 'green', 'points': 5}\n{'color': 'yellow', 'points': 10}\n{'color': 'red', 'points': 15}\n3.2 在字典中存储列表\n每当需要在字典中将一个键关联到多个值时，都可以在字典中嵌套一个列表：\n# 代码：\npizza = {\n    \"crust\": \"thick\",\n    \"toppings\": [\"mushrooms\", \"extra cheese\"],\n}\n\nprint(\"You ordered a \" + pizza[\"crust\"] + \"-crust pizza\" +\n      \"with the following toppings:\")\n\nfor topping in pizza[\"toppings\"]:\n    print(\"\\t\" + topping)\n\n# 结果：\nYou ordered a thick-crust pizzawith the following toppings:\n    mushrooms\n    extra cheese\n3.3 在字典中存储字典\n涉及到这种情况时，代码都不会简单：\n# 代码：\nusers = {\n    \"aeinstein\": {\n        \"first\": \"albert\",\n        \"last\": \"einstein\",\n        \"location\": \"princeton\",\n    },\n    \"mcurie\": {\n        \"first\": \"marie\",\n        \"last\": \"curie\",\n        \"location\": \"paris\",\n    },\n}\n\nfor username, user_info in users.items():\n    print(\"\\nUsername: \" + username)\n    full_name = user_info[\"first\"] + \" \" + user_info[\"last\"]\n    location = user_info[\"location\"]\n\n    print(\"\\tFull name: \" + full_name.title())\n    print(\"\\tLocation: \" + location.title())\n\n# 结果：\nUsername: aeinstein\n    Full name: Albert Einstein\n    Location: Princeton\n\nUsername: mcurie\n    Full name: Marie Curie\n    Location: Paris\n\n迎大家关注我的微信公众号\"代码港\" & 个人网站 www.vpointer.net ~\n\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "1"}