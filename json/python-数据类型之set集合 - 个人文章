{"title": "python-数据类型之set集合 - 个人文章 ", "index": "集合,python", "content": "集合set是Python中一种基本数据类型，它分为可变集合（set）和不可变集合（frozenset）两种。类似于其他语言，集合是一个无序不重复元素集，包括创建集合set、向集合中添加元素、删除集合中的元素、求集合的交集、并集、差集等操作\n（一）集合的增删改查（1）集合的创建与赋值——唯一的方法工厂方法 set()和 frozenset()\n>>> l=set()             #空集合\n>>> s=set(\"cheeseshop\")  #字符串作为参数\n>>> s       \nset(['c', 'e', 'h', 'o', 'p', 's'])\n>>> s1 = set([1,2,3,1,3,4,5])   #list作为参数\n>>> s1\nset([1, 2, 3, 4])\n>>> s2 = set((1,2,3,4,1))     #元组作为参数\n>>> s2\nset([1, 2, 3, 4])\n>>> s3 = set({1:2,2:3})     #字典作为参数\n>>> s3\nset([1, 2])\n>>> b=set(3,4,5)\nTraceback (most recent call last):File \"<stdin>\", line 1, in <module>\nTypeError: set expected at most 1 arguments, got 3\n\n（2）访问集合的值遍历查看集合成员或检查某项元素是否是一个集合中的成员:\n>>> s\nset(['c', 'e', 'h', 'o', 'p', 's'])\n>>> \"k\" in s\nFalse\n>>> \"c\" not in s\nFalse\n>>> for i in s:\n...     print i                 #输出c e h o p s\n（3）更新集合用各种集合内建的方法和操作符添加和删除集合的成员:只有可变集合可以修改不可变集合不可以修改。\n>>> s\nset(['c', 'e', 'h', 'o', 'p', 's'])\n>>> s.add(\"z\")\n>>> s\nset(['c', 'e', 'h', 'o', 'p', 's', 'z'])\n>>> s.update(\"pypi\")\n>>> s\nset(['c', 'e', 'i', 'h', 'o', 'p', 's', 'y', 'z'])\n（4）删除集合中的成员和集合如果如何删除集合本身，可以像删除任何 Python 对象一样，令集合超出它的作用范围，或调用 del 将他们直接清除出当前的名字空间。\n>>> s.remove(\"z\")\n>>> s\nset(['c', 'e', 'i', 'h', 'o', 'p', 's', 'y'])\n>>> s-=set(\"pypi\")\n>>> s\nset(['c', 'e', 'h', 'o', 's'])\n>>>del s                  #删除s集合\n集合删除异常：\n>>> try:\n...    s.remove(\"444\")\n... except KeyError,e:\n...    print \"not exists\"\n... else:\n...    print \"success\"\n集合的替换：（没有修改，只有先删除再增加）方法一：先删除再增加\n>>> s.remove(\"hig\")\n>>> type(set(\"abc\"))\n<type 'set'>\n>>> s.add(\"abc\")\n>>> s\nset(['c', 'b', 'abc', 'y', 'x', 'z'])\n方法二：先转换成列表，再修改\n>>> t=list(s)\n>>> t.append(49)\n>>> ss=set(t)\n>>> ss\nset([49, 'add', '5', '4'])\n setVar.discard(element) 参数说明： setVar :为一个set类型的变量 element :表示要查找并删除的元素 函数作用： 在集合setVar中查找element元素，如果存在则删除；如果没找到，则什么也不做。该函数没有返回值\n>>> sList=set([1,2,3,4,5])\n>>> sList.discard(1)\n>>> sList.discard(1)\n>>> print sList\nset([2, 3, 4, 5])\n（5）转换  集合与序列间的转换集合和序列之间的转换跟序列之间互转是一样的，唯一不同 的就是序列转成集合后，重复的元素被去掉了\n>>> testStr=\"python is good\"\n>>> st=set(testStr)\n>>> print st\nset([' ', 'd', 'g', 'i', 'h', 'o', 'n', 'p', 's', 't', 'y'])\n集合转字符串时，直接使用str()函 数进行转换，得到的将是集合的字 符串形式。要想真正转成字符串， 我们需要借助字符串连接函数 join()函数来完成。\n>>> s1=\"\".join(st)   #但是是无序的\n>>> s1\n' dgihonpsty'\n集合与列表互转\n>>> listTest=[1,2,3,2,\"a\",\"b\"]\n>>> sList=set(listTest)\n>>> sList\nset(['a', 1, 2, 3, 'b'])\n>>> list1=list(sList)\n>>> list1\n['a', 1, 2, 3, 'b']\n元组与集合互转\n>>> tupTest = (1, 2, 3, 2, 'a', 'b', 'a')\n>>> sTup=set(tupTest)\n>>> sTup\nset(['a', 1, 2, 3, 'b'])\n>>> tup=tuple(sTup)\n>>> tup\n('a', 1, 2, 3, 'b')\n(6)pop\n>>> s.pop()\n'h'\n>>> s.clear()\n>>> s\nset([])\n注：pop是随机的如果想删除最后一个,如果想删除最后一个元素时，如下：先遍历找到这个元素并记录下最后一个数值通过remove删除\n>>> s\nset(['c', 'e', 'd', 'm', 'l', 'o', '4', 'w', 4])\n>>> i=0\n>>> value=\"\"\n>>> for x in s:\n...    if i==8:\n...        value=x\n...    i+=1\n...\n>>> value\n4\n>>> s.remove(value)\n(7)clear /copy/ len\nsList=set([1,23,4,5])\n>>> sList.clear()\n>>> print sList\nset([])\n \ns2=set([1,2,3,4,5])\n>>> s2=sList.copy()\n>>> id(s2)\n4321621440\n>>> id(sList)\n4321422360\n \n>>> len(s2)\n0\n\n（二）集合的类型操作符（1）子集超集“小于”符号( <, <= )用来判断子集“大于”符号( >, >= )用来判断超集。“小于” 和 “大于”意味着两个集合在比较时不能相等。等于号允许非严格定义的子集和超集。Sets 支持严格( < )子集和非严格 ( <= ) 子集, 也支持严格( > )超集和非严格 ( >= )超集。只有当第一个集合是第二个集合的严格子集时，我们才称第一个集合“小于”第二个集合，同理，只有当第一个集合是第二个集合的严格超集时，我们才称第一个集合“大于”第二个集合。\n>>> set('shop') < set('cheeseshop')\nTrue\n>>> set('bookshop') >= set('shop')\nTrue\n（2）联合|（等价于union())两个集合的联合是一个新集合，该集合中的每个元素都至少是其中一个集合的成员，即，属于两个集合其中之一的成员。\n>>> s=set(\"python\")\n>>> t=set(\"hello\")\n>>> s|t                     #等价于s.union(t)\nset(['p', 'e', 't', 'y', 'h', 'l', 'o', 'n'])\n（3）交集&（等价于intersection())两个集合的交集是一个新集合，该集合中的每个元素同时是两个集合中的成员，即，属于两个集合的成员。\n>>> s=set(\"python\")\n>>> t=set(\"hello\")\n>>>s&t             #等价于 s.intersection(t)\nset(['h', 'o'])\n（4）差补/相对补集(-)(等价于difference())两个集合(s 和 t)的差补或相对补集是指一个集合 C，该集合中的元素，只属于集合 s，而不属于集合 t。\n>>> s\nset(['h', 'o', 'n', 'p', 't', 'y'])\n>>> t\nset(['h', 'e', 'l', 'o'])\n>>> s-t\nset(['y', 'p', 't', 'n'])\n（5）对称差分( ^ ) （等价于symmetric_difference())两个集合(s 和 t)的对称差分是指另外一个集合 C,该集合中的元素，只能是属于集合 s 或者集合 t的成员，不能同时属于两个集合。\nset(['h', 'o', 'n', 'p', 't', 'y'])\n>>> t\nset(['h', 'e', 'l', 'o'])\n>>> s^t\nset(['e', 'l', 'n', 'p', 't', 'y'])\n(6) issuperset方法所用是判断集合st1是否是集合st2的父集，如果是返回 True，否则返回False。\n>>> s1=set([1,2,3,4])\n>>> s2=set([2,3])\n>>> s1.issuperset(s2)\nTrue(7) issubset函数的作用是判断集合s1是否是集合s2的子集，如果是返回True，否则返 回False。\n>>> s1=set([1,2,3,4,5])\n>>> s2=set([2,3])\n>>> s2.issubset(s1)\nTrue\n(8) 集合的成员运算符集合里也可以使用成员运算符，in和not in，判断某个对象是 否是集合中的成员。\ns1 = set([“a”,”b”])\n>>> \"a\" in s\nTrue\n>>> \"x\" in s\nFalse\n(三) 不可变集合Python中还有一种不可改变的集合，那就是 frozenset，不像set集合，可 以增加删除集合中的元素，该集合中的内容是不可改变的，类似于字符串、 元组。如果试图改变不可变集合中的元素，就会报AttributeError错误。 不可变集合，除了内容不能更改外，其他功能及操作跟可变集合set一样\nf1 = f1=frozenset('python')\nprint f1\nf2 = frozenset([1,2,3,2,44,3])\nprint f2\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}