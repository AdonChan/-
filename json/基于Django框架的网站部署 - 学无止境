{"title": "基于Django框架的网站部署 - 学无止境 ", "index": "python,nginx,gunicorn,django", "content": "对于刚入门的同学，当完成了项目代码，在本地localhost的调试没问题后，会遇到如何让项目上线的问题。\n网上的资料过于繁杂，因此希望这篇能简单地为刚入门的同学解惑。\n\n1.域名\n    首先，当我们输入一个网址http://www.example.com/时，首先经过DNS解析到对应的IP地址，从而对该IP实现访问。所以，要让别人访问我们项目的第一步，就是需要拥有两样东西，域名和公网ip。    域名的获得很简单，随便注册购买一个就好了。然后需要的是将域名解析到你的公网ip。而公网ip，一般在购买云服务器的时候能获得。    经过这一步，我们实现了：请求-->DNS-->服务器ip，而我们的最终目的就是：请求-->DNS-->服务器ip-->黑盒子-->项目wsgi应用\n2.使用gunicorn运行项目\n    在此，我们使用django搭建项目，当你的项目完成后。我们需要运行监听请求，接收请求并调用相应的wsgi应用的服务程序。例如执行python manage.py runserver 0.0.0.0:8000，runserver 就是django 自带的用于调试的基于wsgi的服务程序。\n在云服务器上我们创建一个项目\ndjango-admin.py startproject blog\n其中wsgi.py\nimport os\nimport sys\n# 当使用virtualenv等隔离项目环境时，需要将项目的路径添加添加到查找路径中\npath = os.getcwd()\nif path not in sys.path:\n    sys.path.append(path)\n\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"blog.settings\")\nfrom django.core.wsgi import get_wsgi_application\napplication = get_wsgi_application()\n我们在项目下执行以下命令\ngunicorn wsgi:application\n默认绑定127.0.0.1：8000，具体gunicorn 的使用可以自行google一下此时，我们能就能通过本地8000端口来访问我们的项目内容了。实现了：请求-->DNS-->服务器ip-->黑盒子-->127.0.0.1：8000-->项目wsgi应用\n3.nginx接收外部请求，内部转发\n在/etc/nginx/sites-available/文件夹下，新建一个文件blog，并添加如下简单设置\nserver {\n    listen 80;\n    server_name  你的域名 你的公网ip(可选);\n    access_log  /var/log/nginx/blog.log;\n    location /static {\n        #静态文件如js，css的存放目录\n        root /project/blog;\n    }\n    location / {\n        include proxy_params;\n        # 从外部接收请求后转发到本地的8000端口\n        proxy_pass http://127.0.0.1:8000;\n    }\n}\n从上面我们就可以明白，nginx 接收到请求后，转发给gunicorn正在监听的本地8000端口，gunicorn根据请求调用项目中相应的应用函数后返回结果。自此我们就基本实现了请求-->DNS-->服务器ip-->nginx（80端口）-->127.0.0.1：8000-->项目wsgi应用而关于nginx和gunicorn的具体配置还有许多，不妨多google一下延伸学习\n4.总结\ngunicorn让项目跑起来nginx负责接收请求和转发请求到运行中项目监听请求的端口部署到线上，主要需要域名，公网ip，二者均可以通过云服务器来解决，所以最好还是直接买个云服务器实践一下，just do it\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "3"}