{"title": "如何从 git reset --hard 中拯救代码 - chalet581 ", "index": "python,node.js,bash,git", "content": "上个周末遇到了一个这样的场景\n场景\n自己写了大半天的一个小东西的代码，目录结构大概如下\nnode_modules\nsrc\n  - ...files\ntest\n  - test.js\npackage.json\n睡前本来准备上传到github仓库\n\ngit init\ngit add -A\n\n发现忘记添加.gitignore,把node_modules文件都add进去了于是手贱输入了git reset --hard\n然后发现...目录里的东西全部没了(只剩下.git/文件架),\n当时我的内心\n挽救\n心急如焚懊悔不已的我，经过查阅相关资料，还是找到了一些拯救代码的方法\n由于每次git命令进行操作时git都会对相关文件进行快照,并通过一定形式把信息保存再.git/目录下。\n由于此前我使用过git add -A命令,因此当文件被放进暂存区时,快照信息对象就已经保存了，而实用git reset --hard之后,这些对象就变成了悬空文件对象(dangling blob)。\n我们可以实用git fsck命令显示他们\ngit fsck：用于验证当前git仓库数据的有效性和一致性，能够显示那些\"丢失\"的commit、blob(文件)、tree等。\n我们可以通过以下命令git fsck --cache --unreachable $(git for-each-ref --format=\"%(objectname)\")\n我们得到一大堆blob的hash ID\nunreachable blob 907b308167f0880fb2a5c0e1614bb0c7620f9dc3\nunreachable blob 72663d3adcf67548b9e0f0b2eeef62bce3d53e03\n...\n接下来使用git show就能显示这些对象的内容了，例如git show 907b308\n自动还原\n但是由于我曾经添加的文件实在太多node_modules里的文件可能有上千个，因此对逐个ID进行git show肉眼筛选是非常不科学。\n因此我写了个简单的nodejs脚本（因为我比较熟悉），筛选还原那些我需要的文件。\n首先使用git fsck把hash ID都存到一个文件里git fsck --cache --unreachable $(git for-each-ref --format=\"%(objectname)\") > allhashes\n\"use strict\";\n\nconst fs = require(\"fs\");\nconst shelljs = require(\"shelljs\");\nconst through = require(\"through2\");\n\nlet buf = fs.readFileSync(\"./allhashes\")\nbuf = buf.toString();\nlet hashes = []\nbuf.replace(/dangling blob (\\w+)/gi,function (matached, hash) {\n    hashes.push(hash)\n});\n\nlet all = hashes.length;\nlet left = all;\nhashes.forEach(hash=>{\n    let fullContent = \"\"\n    let stdout = shelljs.exec(\"git show \"+hash,{silent:true}).stdout;\n    let input = through();\n    console.log((left--)+\"/\"+all);\n    //TODO:through2原来是为了处理stdout流的异步数据引入的,当前同步过程下不需要\n    input.pipe(through((buf,_,next)=>{\n        fullContent = fullContent+buf.toString();\n        next(null,buf)\n    },flush=>{\n        if (matchContent(fullContent)){\n            fs.writeFile(\"./objects/\"+hash,fullContent)\n        }\n        flush()\n    }))\n\n    input.push(stdout);\n    input.push(null);\n})\n\nfunction matchContent(content){\n    // ... 匹配规则\n}\n\n于是经过几分钟的执行,我找回了我的代码\n参考链接\n\nUndo git reset --hard with uncommitted files in the staging area\nRecovering Git repository from objects only\nGit的维护(git gc和git fsck)\n\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "3"}