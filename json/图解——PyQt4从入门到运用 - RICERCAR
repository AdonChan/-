{"title": "图解——PyQt4从入门到运用 - RICERCAR ", "index": "pyqt4,python", "content": "作为一个程序的开发者，我们仅仅需要在相应路径通过命令行就可执行那个程序。但是，不懂行的人不理解这个黑框框的东西，陌生领域任何人都没有安全感，所以他们是拒绝接受一个项目仅仅只是通过一个黑框框来执行的。所以GUI窗口呼之而出。\n“Life is short  (You need Python)”-- Bruce Eckel\npython作为一门快速开发语言，其GUI模块自然也不例外。用python来做GUI的模块、包有：Tk、wxWidgets、Qt、GTK，本篇文章是学习的是用Qt的PyQt4.(PyQt5只适合Python3.0以上)\n本篇文章这样安排：1：简介2：PyQt4的安装，配合Pycharm的安装3：PyQt4一定要知道的基础4：找到你需要的界面配图和代码5：深入一个复杂的例子6：总结\n1.简介\n1.1.PyQt4能做什么\nPyQt是用来创建GUI应用程序的工具包，它把Python和成功的Qt绑定在一起，Qt库是这个星球上最强大的库之一，如果不是最强大的话。PyQt的官方网站是 www.riverbankcomputing.co.uk ， 它由 Phil Thompson 开发。将程序包装在GUI界面里，可以：\n\n将输入通过多种途径如文本框、弹出路径选择等输入到程序里。\n将输出通过文本框显示出来\n将执行信息如如报错信息、运行进度通过文本框或进度条显示出来\n\n1.2.文章安排\n\n先介绍PyQt4安装和配合Pycharm的使用。\n或简要或详细叙述PyQt的必须知道的知识，只有了解、理解、掌握这些才能看懂任何一个PyQt程序代码。\n配合大量现成的GUI图形界面的图片，你可以与自己脑子里的效果图对应，迅速找到你需要使用众多PyQt类中的哪一个，并且有实现代码(引用的)。向下面这样，通过链接，快速找到想要的代码。代码地址\n\n\n我认为这非常重要，因为作为一个初学者，我们常常遇到这样的困境：\n\n我大概知道我要完成哪些功能，但我不知道怎么画出来。\n我能画出来，但我不知道调用什么类去实现，甚至在GOOGLE上找这个类的时候，都不知道用什>么词汇去描述你的界面，略尴尬。\n\n\n\n深入一个例子，调用自己的脚本配合GUI界面，写出一个可以展示的程序。\n总结一下遇到的坑\n\n1.3.一些好的资源\n官网文档：http://pyqt.sourceforge.net/Docs/PyQt4/也是官方文档PyQt4 APIs http://pyqt.sourceforge.net/Docs/PyQt4/modules.htmlzetcode：良心文档每行代码都给解释。http://zetcode.com/gui/pyqt4/zetcode中文版：http://www.qaulau.com/books/PyQt4_Tutorial/index.htmlPyQt4 精彩实例分析：受益很多，本文第4节基本靠它了。http://www.linuxidc.com/Linux/2012-06/63652.htm一个不错的博客文章：http://blog.csdn.net/a359680405/article/details/45096185QT参考文档：玩到最后不得不看QT了：http://www.kuqin.com/qtdocument/QT designer文档：http://doc.qt.io/qt-4.8/designer-manual.html\n1.4.引用说明\n基本引用了以上资源里面的文章，特别是来源：Linux社区  作者：chumpklutz和来源：CSDN 作者：翻滚吧挨踢男\n2.PyQt4的安装，配合Pycharm的安装\n基本参考了PyQt5+python3+pycharm开发环境配置首先安装分为两个部分：PyQt包和Pycharm设置PyQt4包：下载地址注意：32位的还是64位的，Python2还是python3然后将安装路径放入系统路径中去：变量名：QT_QPA_PLATFORM_PLUGIN_PATH变量值：C:Python34Libsite-packagesPyQt4plugins     Pycharm配置：步骤如下文：http://cristalspring.blog.163.com/blog/static/14432742520156510264082/\n3.PyQt4一定要知道的基础\n3.1.开发流程：\n3.1.1 先在Qt designer里面设计个大概，在Pycharm里面通过通过PyUIC将Qt designer里面的example.ui文件转为example.py文件，  \n之后就可以直接使用example.py文件了。\n3.1.2 注意example.py只是图形界面静态布局的程序，你还要把你的脚本程序script.py结合进入，所以还需要一个myWindow.py程序  \n用来连接example.py和script.py.也就是说在myWindow.py中import exampy;import script.py.\n3.1.3 myWindow.py中通常包括对图形布局的一些改动和结合、添加按钮动作、等等使图形界面'活'起来的方法。\n\n\n3.2.步骤及相关知识\n对于这样一个界面：  \n第一步：设计好界面的草图\n这里推荐使用Balsamiq Mockups 3设计如下：\n第二步：实现这个草图\n界面有三种可以选择Dialog、Widget、QMainWindow至于选哪种详细可以见这里：http://www.qtcentre.org/threads/3465-Difference-between-Dialog-and-widget-and-QMainWindowhttp://stackoverflow.com/questions/3298792/whats-the-difference-between-qmainwindow-qwidget-and-qdialog这里我们使用Widget，其它两种都是由之而来  在上图的草图中，主要有标签、输入框和按钮三种元素，怎样去用代码实现呢？  \n打开Qt designer,它位于PyQt4的安装包中，具体位置在D:\\Program Files\\Python\\Lib\\site-packages\\PyQt4\n打开后如下图\n可以在左侧选择相应的按钮，仅仅通过拖拽完成草图界面。然后通过Pycharm转为.py文件,在Pycharm中单击该.ui文件，然后点击图中选项\n3.3.主要类介绍\n主要类介绍：QtGui Module主要有两个包：\nQtCore\nQtCore 模块包括了核心的非GUI功能，该模块用来对时间、文件、目录、各种数据类型、流、网址、媒体类型、线程或进程进行处理。\nQtGui\nQtGui 模块包括图形化窗口组件和及相关类。包括如按钮、窗体、状态栏、滑块、位图、颜色、字体等等。\n总的来说：QtGui负责长得好看，QtCore负责有用。\nQtGui举例：\n# simple.py\n\nimport sys\nfrom PyQt4 import QtGui\n\napp = QtGui.QApplication(sys.argv)\n\nwidget = QtGui.QWidget()\nwidget.resize(250, 150)\nwidget.setWindowTitle('simple')\nwidget.show()\n\nsys.exit(app.exec_())\n上面的代码显示在屏幕上显示一个小窗体。\n\nimport sys\nfrom PyQt4 import QtGui\n我们在这里进行一些必要的import操作。基本的GUI组件在 QtGui 模块中。\n\napp = QtGui.QApplication(sys.argv)\n每个PyQt4程序必须创建一个application对象，application在 QtGui 模块中， sys.argv 参数是命令行中的一组参数。Python脚本可以在shell中运行，这样，我们可以控制脚本的启动。\n\nwidget = QtGui.QWidget()\nQWidget 窗口组件是PyQt4中所有用户界面对象的基类，我们使用 QWidget 默认的构造，没有父亲。没有父亲的窗口组件称为窗体。\n\nwidget.resize(250, 150)\nresize() 方法调整了 widget 的大小，宽250像素，高150像素。\n\nwidget.setWindowTitle('simple')\n这里我们为窗口设置了标题，标题显示在标题栏上。\n\nwidget.show()\nshow() 方法将窗口呈现在屏幕上。\n\nsys.exit(app.exec_())\n最后，我们输入应用程序的主事件循环，事件处理从这里开始。主事件循环从窗口系统接收事件并分发到应用程序的窗口组件上。当主事件循环结束，如果我们调用 exit() 方法或者主窗口组件被销毁。 sys.exit() 方法确保干净的退出。将通知环境应用程序是如何结束的。\n\n\nQtCore举例：\nimport PyQt4.QtGui import *  \nfrom PyQt4.QtCore import *  \nimport sys  \n  \napp=QtGui.QApplication(sys.argv)  \nb=QPushButton(\"Hello Kitty!\")  \nb.show()  \napp.connect(b,SIGNAL(\"clicked()\"),app,SLOT(\"quit()\"))  \napp.exec_()  \n第1行导入PyQt4.QtGui的所有类及模块，包括QApplication，所有Qt图形化应用程序都必须包含此文件，它包含了Qt图形化应用程序的各种资源，基本设置，控制流以及事件处理等。\n\n第5行新创建了一个QApplication对象，每个Qt应用程序都必须有且只有一个QApplication对象，采用sys.argv作为参数，便于程序处理命令行参数。\n\n第6行创建了一个QPushButton对象，并设置它的显示文本为“Hello Kitty！”，由于此处并没有指定按钮的父窗体，因此以自己作为主窗口。\n\n第7行调用show()方法，显示此按钮。控件被创建时，默认是不显示的，必须调用show()函数来显示它。\n\n第8行的connect方法是Qt最重要的特征，即信号与槽的机制。当按钮被按下则触发clicked信号，与之相连的QApplication对象的槽quit()响应按钮单击信号，执行退出应用程序的操作。关于信号与槽机制在本实例最后将进行详细的分析。\n\n最后调用QApplication的exec_()方法，程序进入消息循环，等待可能输入进行响应。Qt完成事件处理及显示的工作，并在应用程序退出时返回exec_()的值。\n\n3.4.信号和事件\n3.5.一些经验\n4.找到你需要的界面配图和代码\n实例1 Hello Kitty!\n代码链接\n\n实例2 标准对话框的使用\n代码链接\n\n实例3 使用标准输入框\n代码链接\n\n各种消息框的使用\n代码链接\n\n实现QQ抽屉效果\n代码链接\n\n表格的使用\n代码链接\n\n使用进度条\n代码链接\n\n利用Qt Designer设计一个对话框\n代码链接\n\n在程序中使用Ui\n代码链接\n\n基本布局管理\n代码链接\n\n多文档\n代码链接\n!图片描述\n分割窗口\n代码链接\n\n停靠窗口\n代码链接\n\n堆栈窗口\n代码链接\n\n综合布局实例\n代码链接\n\n可扩展对话框\n代码链接\n\n利用QPalette改变控件颜色\n代码链接\n\n窗体的淡入淡出效果\n代码链接\n\n不规则窗体\n代码链接\n\n电子钟\n代码链接\n\n程序启动画面\n代码链接\n\n基本QMainWindow主窗口程序\n代码链接\n\n打印文本\n代码链接\n\n打印图像\n代码链接\n\n5.深入一个复杂的例子\n6.总结\n\n                ", "mainLikeNum": ["3 "], "mainBookmarkNum": "23"}