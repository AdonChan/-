{"title": "Python装饰器 - mugbya ", "index": "python,装饰器", "content": "此篇紧接上篇 Python装饰器vs装饰器模式，上篇主要是简述了装饰器模式，跟Python的装饰器。\n再来看Python装饰器的实现。这里我推荐一篇文章（译）-12步轻松搞定python装饰器，文章写得非常不错，看完后对作用于，闭包都感受非常深，但是我觉得漏了一些点点，我把我的想法阐述在本文\n补全\n根据Java实现装饰器模式的，我们可以写下面一段代码：\nimport logging\n\n\ndef use_logging(func):\n    logging.warn(\"%s is running\" % func.__name__)\n    return func\n\ndef foo():\n    print('i am foo')\n\nfoo = use_logging(foo)\n\nfoo() # 调用\n这个实现对于上篇文章中提到的Java使用装饰器。上面也是一个装饰器，实现最简单的一个增加函数日志的功能，但是如果这个额外功能是要去检测传入的参数时，这时上面的就不行了。这时12步轻松搞定python装饰器中的例子还是精妙的。\n# 装饰器\ndef wrapper(func):\n    def checker(a, b): # 1\n        if a.x < 0 or a.y < 0:\n            a = Coordinate(a.x if a.x > 0 else 0, a.y if a.y > 0 else 0)\n        if b.x < 0 or b.y < 0:\n            b = Coordinate(b.x if b.x > 0 else 0, b.y if b.y > 0 else 0)\n        ret = func(a, b)\n        if ret.x < 0 or ret.y < 0:\n            ret = Coordinate(ret.x if ret.x > 0 else 0, ret.y if ret.y > 0 else 0)\n        return ret\n    return checker\n\n\n# 原函数\ndef add(a, b):\n    return Coordinate(a.x + b.x, a.y + b.y)\n\n# 使用装饰    \nadd = wrapper(add)    \n\n细心你会发现，装饰器函数的参数就是传入的原函数，而内部函数的参数跟原函数一模一样，最外层返回的是内部函数的引用，内部函数返回的是传入参数的引用调用的结果\n这里用到了函数作为参数特性，当然还有些闭包的知识，具体请看 上面提到的博客链接，真的讲的不错。\n而上篇说到的Python装饰 特性就是这个神奇的语法糖了，可以这样使用\n# 原函数\n@wrapper\ndef add(a, b):\n    return Coordinate(a.x + b.x, a.y + b.y)\n带参数的装饰器\n如果要实现一个带参数的装饰器，那要怎么写呢\ndef time_diff(s):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            start_time = time.time()\n            res = func(*args, **kwargs)\n            end_time = time.time()\n            print(\"[%s]执行程序所用时间: %s\" % (s, end_time - start_time))\n            return res\n        return wrapper\n    return decorator\n    \n@time_diff(\"polynomial_1\")\ndef polynomial_1(n, x):\n    res = 0\n    for i in range(n):\n        res += i*pow(x, i)\n    return res\n调用并执行输出结果：\nprint(polynomial_1(1, 5))\n\n[duoxiangshi_1]执行程序所用时间: 4.76837158203125e-06\n0\n带参数的装饰器需要在不带参数装饰器外再定义一层函数，最外层函数的返回值是第二层函数的引用。\n总结：多些多练，用于实际中，才能更加熟练。最近学数据结构与算法，写些装饰器用来看程序执行时间，真是再方便不过了！\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}