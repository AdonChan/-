{"title": "Slog52_python类的使用 - ArthurSlog ", "index": "面向对象编程,oop,python", "content": "\nArthurSlog\nSLog-52\nYear·1\nGuangzhou·China\nAug 29th 2018\n\n\n\nGitHub\n掘金主页\n简书主页\nsegmentfault\n\n现实就是现实 要理解现状并且分析 在那其中一定会有导致现状的原因 对原因有了充分认识之后再根据词付诸行动就好 连现状都不懂得判断的人 再我看来就是白痴\n\n开发环境MacOS(High Sierra 10.13.5)\n需要的信息和信息源：\n开始编码\n更新后的完整代码：\n~/Desktop/python_learningload/python_class/Employee.py\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n# v2.7\n# macOS10.13.6\n \nclass Employee:\n   empCount = 0\n \n   def __init__(self, name, salary):\n      self.name = name\n      self.salary = salary\n      Employee.empCount += 1\n   \n   def displayCount(self):\n     print \"Total Employee %d\" % Employee.empCount\n \n   def displayEmployee(self):\n      print \"Name : \", self.name,  \", Salary: \", self.salary\n\nxiaomi = Employee('xiaomi',8000)\n\nxiaomi.displayEmployee()\n其中，Employee类如下：\n~/Desktop/python_learningload/python_class/Employee.py\nclass Employee:\n   empCount = 0\n \n   def __init__(self, name, salary):\n      self.name = name\n      self.salary = salary\n      Employee.empCount += 1\n   \n   def displayCount(self):\n     print \"Total Employee %d\" % Employee.empCount\n \n   def displayEmployee(self):\n      print \"Name : \", self.name,  \", Salary: \", self.salary\n\ndef __init__(self, xx1, xx2, ...):，这个是类初始化方法，当你实例化类的时候，类就会执行这里面的逻辑，self代表的是Employee自己，这个参数是必须的，后面是实例化类的时候，代入的参数\n所以，现在Employee类有 empCount、name、salary 三个属性，displayCount（self）、displayEmployee（self）两个方法\n当你实例化Employee类的时候：\n\n~/Desktop/python_learningload/python_class/Employee.py\nxiaomi = Employee('xiaomi',8000)\n'xiaomin'代入'name','8000'代入'salary'，然后类会执行初始化函数：\n~/Desktop/python_learningload/python_class/Employee.py\ndef __init__(self, name, salary):\n    self.name = name\n    self.salary = salary\n    Employee.empCount += 1\n\n在初始化函数里，'xiaomi'代入Employee类的'name'属性，'8000'代入Employee类的'salary'属性，然后Employee类的'empCount'属性自增1\n现在切换之文件路径下，执行python文件\n\ncd ~Desktop/python_learningload/python_class/python Employee.py\n\n正常执行，会输出\nName :  xiaomi , Salary:  8000\n现在，我们要把类单独作为一个python文件，通过导入来使用类\n~/Desktop/python_learningload/python_class/class_Employee.py\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n# v2.7\n# macOS10.13.6\n\nclass Employee:\n   empCount = 0\n \n   def __init__(self, name, salary):\n      self.name = name\n      self.salary = salary\n      Employee.empCount += 1\n   \n   def displayCount(self):\n     print \"Total Employee %d\" % Employee.empCount\n \n   def displayEmployee(self):\n      print \"Name : \", self.name,  \", Salary: \", self.salary\n~/Desktop/python_learningload/python_class/show_Employee.py\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n# v2.7\n# macOS10.13.6\n\nfrom class_Employee import Employee\n\nxiaomi = Employee('xiaomi',8000)\n\nxiaomi.displayEmployee()\n\nok，现在把 Employee类 单独写为一个文件，在另一个文件里倒入并使用\n切换至文件路径下，执行 show_Employee.py 文件\n\ncd ~Desktop/python_learningload/python_class/python show_Employee.py\n\n至此，我们了解了python类的使用。\n\n欢迎关注我的微信公众号 ArthurSlog\n\n如果你喜欢我的文章 欢迎点赞 留言\n谢谢\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}