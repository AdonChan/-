{"title": "阿里P7攻城狮总结出来的这本书的精华 - 个人文章 ", "index": "windows,python", "content": "第一章：准备工作环境WinPython-32bit-3.5.2.2Qt5.exe\n1.1 设置matplotlib参数配置模板以方便各项目共享\nD:BinWinPython-32bit-3.5.2.2Qt5python-3.5.2Libsite-packagesmatplotlibmpl-data\n三种方式：\n当前工作目录\n用户级 Documents and Setting\n安装级配置文件\nD:BinWinPython-32bit-3.5.2.2Qt5python-3.5.2Libsite-packagesmatplotlibmpl-data\n第二章： 了解数据导入和导出各种格式的数据，除此之外，还包括清理数据的方式比如归一化、缺失数据的添加、实时数据检查等类。\n\n2.1 从csv文件中导入数据如果想加载大数据文件，通常用NumPy模块。\nimport csv\n\nimport sys\n\nfilename = 'E:\\\\python\\\\Visualization\\\\2-1\\\\10qcell.csv'\n\ndata = []\n\n\n\ntry:\n\n    with open('E:\\\\python\\\\Visualization\\\\2-1\\\\21.csv') as f:\n\n        reader = csv.reader(f, delimiter=',')\n\n        data = [row for row in reader]\n\nexcept csv.Error as e:\n\n    sys.exit(-1)\n\n\n\nfor datarow in data:\n\n    print( datarow)\n\n2.2 从excel文件导入数据\nimport xlrd\n\nimport os\n\nimport sys\n\npath = 'E:\\\\python\\\\Visualization\\\\2-3\\\\'\n\nfile = path + '2-2.xlsx'\n\nwb = xlrd.open_workbook(filename=file)\n\nws = wb.sheet_by_name('Sheet1')   #指定工作表\n\ndataset =  []\n\n\n\nfor  r in range(ws.nrows):\n\n    col = []\n\n    for c in range(ws.ncols):\n\n        col.append(ws.cell(r,c).value)  #某行某列数值\n\n    dataset.append(col)\n\n\n\nprint(dataset)\n\n\n\n2.3 从定宽数据文件导入\nimport struct\n\nimport string\n\npath = 'E:\\\\python\\\\Visualization\\\\'\n\nfile = path + '2-4\\\\test.txt'\n\n\n\nmask = '3c4c7c'\n\n\n\nwith open(file, 'r') as f:\n\n    for line in f:\n\n        fields = struct.unpack_from(mask,line)  #3.5.4 上运行失败\n\n        print([field.strip() for field in fields])\n\n\n\n2.4 从制表符分割的文件中导入和从csv读取类似，分隔符不一样而已。\n2.5 导出数据到csv、excel\n示例，未运行\n\ndef write_csv(data)\n\nf = StringIO.StringIO()\n\nwriter = csv.writer(f)\n\nfor row in data:\n\n    writer.writerow(row)\n\nreturn f.getvalue()\n\n\n\n2.6 从数据库中导入数据连接数据库\n查询数据\n遍历查询到的行\n2.7 清理异常值MAD：median absolute deviation 中位数绝对偏差\nbox plox: 箱线图\n坐标系不同，显示效果的欺骗性：\n\nfrom pylab import *\n\n\n\nx = 1e6*rand(1000)\n\ny = rand(1000)\n\n\n\nfigure()\n\n\n\nsubplot(2,1,1)\n\nscatter(x,y)\n\nxlim(1e-6,1e6)\n\n\n\nsubplot(2,1,2)\n\nscatter(x,y)\n\nxscale('log')\n\nxlim(1e-6,1e6)\n\n\n\nshow()\n\n\n\n2.8 读取大块数据文件python擅长处理文件及类文件对象的读写。它不会一次性地加载所有内容，而是聪明地按照需要来加载。\n并行方法MapReduce，低成本获得更大的处理能力和内存空间；\n多进程处理，如thread、multiprocessing、threading；\n如果重复的处理大文件，建议建立自己的数据管道，这样每次需要数据以特定的形式输出时，不必再找到数据源进行手动处理。\n2.9 生成可控的随机数据集合模拟各种分布的数据。\n2.10 数据平滑处理方法：卷积滤波等\n许多方法可以对外部信号源接收到的信号进行平滑处理，这取决于工作的领域和信号的特性。许多算法都是专门用于某一特定的信号，可能没有一个通用的解决方法普遍适用于所有的情况。\n一个重要的问题是：什么时候不应该对信号进行平滑处理？\n对于真实信号来说，平滑处理的数据对于真实的信号来说可能是错误的。\n第三章 绘制并定制化图表3.1 柱状图、线形图、堆积柱状图\nfrom matplotlib.pyplot import *\n\n\n\nx = [1,2,3,4,5,6]\n\ny = [3,4,6,7,3,2]\n\n\n\n#create new figure\n\nfigure()\n\n\n\n#线\n\nsubplot(2,3,1)\n\nplot(x,y)\n\n\n\n#柱状图\n\nsubplot(2,3,2)\n\nbar(x,y)\n\n\n\n#水平柱状图\n\nsubplot(2,3,3)\n\nbarh(x,y)\n\n\n\n#叠加柱状图\n\nsubplot(2,3,4)\n\nbar(x,y)\n\n\n\ny1=[2,3,4,5,6,7]\n\nbar(x,y1,bottom=y,color='r')\n\n\n\n#箱线图\n\nsubplot(2,3,5)\n\nboxplot(x)\n\n#散点图\n\nsubplot(2,3,6)\n\nscatter(x,y)\n\nshow()\n\n\n3.2 箱线图和直方图\nfrom matplotlib.pyplot import *\n\n\n\nfigure()\n\ndataset = [1,3,5,7,8,3,4,5,6,7,1,2,34,3,4,4,5,6,3,2,2,3,4,5,6,7,4,3]\n\n\n\nsubplot(1,2,1)\n\n\n\nboxplot(dataset, vert=False)\n\n\n\nsubplot(1,2,2)\n\n#直方图\n\nhist(dataset)\n\n\n\nshow()\n \n\n\n\n3.3 正弦余弦及图标\nfrom  matplotlib.pyplot import *\n\nimport numpy as np\n\n\n\nx = np.linspace(-np.pi, np.pi, 256, endpoint=True)\n\n\n\ny = np.cos(x)\n\ny1= np.sin(x)\n\n\n\nplot(x,y)\n\nplot(x,y1)\n\n\n\n#图表名称\n\ntitle(\"Functions $\\sin$ and $\\cos$\")\n\n\n\n#x,y轴坐标范围\n\nxlim(-3,3)\n\nylim(-1,1)\n\n\n\n#坐标上刻度\n\nxticks([-np.pi, -np.pi/2,0,np.pi/2,np.pi],\n\n       [r'$-\\pi$', r'$-\\pi/2$', r'$0$', r'$+\\pi/2$',r'$+\\pi$'])\n\nyticks([-1, 0, 1],\n\n       [r'$-1$',r'$0$',r'$+1$' ])\n\n#网格\n\ngrid()\n\nshow()\n\n\n\n3.4 设置图表的线型、属性和格式化字符串\nfrom  matplotlib.pyplot import *\n\nimport numpy as np\n\n\n\nx = np.linspace(-np.pi, np.pi, 256, endpoint=True)\n\n\n\ny = np.cos(x)\n\ny1= np.sin(x)\n\n\n\n#线段颜色，线条风格，线条宽度，线条标记，标记的边缘颜色，标记边缘宽度，标记内颜色，标记大小\n\nplot([1,2],c='r',ls='-',lw=2, marker='D', mec='g',mew=2, mfc='b',ms=30)\n\nplot(x,y1)\n\n\n\n#图表名称\n\ntitle(\"Functions $\\sin$ and $\\cos$\")\n\n\n\n#x,y轴坐标范围\n\nxlim(-3,3)\n\nylim(-1,4)\n\n\n\n#坐标上刻度\n\nxticks([-np.pi, -np.pi/2,0,np.pi/2,np.pi],\n\n       [r'$-\\pi$', r'$-\\pi/2$', r'$0$', r'$+\\pi/2$',r'$+\\pi$'])\n\nyticks([-1, 0, 1],\n\n       [r'$-1$',r'$0$',r'$+1$' ])\n\n\n\ngrid()\n\n\n\nshow()\n\n\n\n3.5 设置刻度、时间刻度标签、网格\nimport matplotlib.pyplot as mpl\n\nfrom pylab import *\n\nimport datetime\n\nimport numpy as np\n\n\n\nfig = figure()\n\n\n\nax = gca()\n\n\n\n# 时间区间\n\nstart = datetime.datetime(2017,11,11)\n\nstop = datetime.datetime(2017,11,30)\n\ndelta = datetime.timedelta(days =1)\n\n\n\ndates = mpl.dates.drange(start,stop,delta)\n\n\n\nvalues = np.random.rand(len(dates))\n\n\n\nax.plot_date(dates, values, ls='-')\n\n\n\ndate_format = mpl.dates.DateFormatter('%Y-%m-%d')\n\n\n\nax.xaxis.set_major_formatter(date_format)\n\n\n\nfig.autofmt_xdate()\n\n\n\nshow()\n\n\n\n3.6 添加图例和注释\nfrom matplotlib.pyplot import *\n\nimport numpy as np\n\n\n\nx1 = np.random.normal(30, 2,100)\n\nplot(x1, label='plot')\n\n\n\n#图例\n\n#图标的起始位置，宽度，高度 归一化坐标\n\n#loc 可选，为了图标不覆盖图\n\n#ncol 图例个数\n\n#图例平铺\n\n#坐标轴和图例边界之间的间距\n\nlegend(bbox_to_anchor=(0., 1.02, 1., .102),loc = 4,\n\n       ncol=1, mode=\"expand\",borderaxespad=0.1)\n\n\n\n#注解\n\n# Import data 注释\n\n#（55,30） 要关注的点\n\n#xycoords = ‘data’ 注释和数据使用相同坐标系\n\n#xytest 注释的位置\n\n#arrowprops注释用的箭头\n\nannotate(\"Import data\", (55,30), xycoords='data',\n\n               xytext=(5,35),\n\n               arrowprops=dict(arrowstyle='->'))\n\n\n\nshow()\n\n\n\n3.7 直方图、饼图直方图\nimport matplotlib.pyplot as plt\n\n\n\nimport numpy as np\n\n\n\nmu=100\n\nsigma = 15\n\nx = np.random.normal(mu, sigma, 10000)\n\n\n\nax = plt.gca()\n\n\n\nax.hist(x,bins=30, color='g')\n\n\n\nax.set_xlabel('v')\n\nax.set_ylabel('f')\n\n\n\nax.set_title(r'$\\mathrm{Histogram:}\\ \\mu=%d,\\ \\sigma=%d$' % (mu,sigma))\n\n\n\nplt.show()\n\n\n\n\n饼图\nfrom pylab import *\n\n\n\nfigure(1, figsize=(6,6))\n\nax = axes([0.1,0.1,0.8,0.8])\n\n\n\nlabels ='spring','summer','autumn','winter'\n\nx=[15,30,45,10]\n\n#explode=(0.1,0.2,0.1,0.1)\n\nexplode=(0.1,0,0,0)\n\npie(x, explode=explode, labels=labels, autopct='%1.1f%%', startangle=67)\n\n\n\ntitle('rainy days by season')\n\nshow()\n\n\n\n3.8 设置坐标轴\nimport matplotlib.pyplot as plt\n\n\n\nimport numpy as np\n\n\n\nx = np.linspace(-np.pi, np.pi, 500, endpoint=True)\n\ny = np.sin(x)\n\n\n\nplt.plot(x,y)\n\n\n\nax = plt.gca()\n\n#top bottom left right 四条线段框成的\n\n\n\n#上下边界颜色\n\nax.spines['right'].set_color('none')\n\nax.spines['top'].set_color('r')\n\n\n\n#坐标轴位置\n\nax.spines['bottom'].set_position(('data', 0))\n\nax.spines['left'].set_position(('data', 0))\n\n\n\n#坐标轴上刻度位置\n\nax.xaxis.set_ticks_position('bottom')\n\nax.yaxis.set_ticks_position('left')\n\n\n\nplt.grid()\n\nplt.show()\n\n\n\n3.9 误差条形图\nimport matplotlib.pyplot as plt\n\n\n\nimport numpy as np\n\n\n\nx = np.arange(0,10,1)\n\n\n\ny = np.log(x)\n\n\n\nxe = 0.1 * np.abs(np.random.randn(len(y)))\n\n\n\nplt.bar(x,y,yerr=xe,width=0.4,align='center',\n\n        ecolor='r',color='cyan',label='experimert')\n\n\n\nplt.xlabel('x')\n\nplt.ylabel('y')\n\nplt.title('measurements')\n\nplt.legend(loc='upper left')  # 这种图例用法更直接\n\n\n\nplt.show()\n\n\n\n3.10 带填充区域的图表\nimport matplotlib.pyplot as plt\n\nfrom matplotlib.pyplot import *\n\nimport numpy as np\n\n\n\nx = np.arange(0,2,0.01)\n\n\n\ny1 = np.sin(2*np.pi*x)\n\ny2=1.2*np.sin(4*np.pi*x)\n\n\n\nfig = figure()\n\nax = gca()\n\n\n\nax.plot(x,y1,x,y2,color='b')\n\n\n\nax.fill_between(x,y1,y2,where = y2>y1, facecolor='g',interpolate=True)\n\nax.fill_between(x,y1,y2,where = y2<y1, facecolor='darkblue',interpolate=True)\n\n\n\nax.set_title('filled between')\n\n\n\nshow()\n\n\n\n3.11 散点图\nimport matplotlib.pyplot as plt\n\n\n\nimport numpy as np\n\n\n\nx = np.random.randn(1000)\n\n\n\ny1 = np.random.randn(len(x))\n\n\n\ny2 = 1.8 + np.exp(x)\n\n\n\nax1 = plt.subplot(1,2,1)\n\nax1.scatter(x,y1,color='r',alpha=.3,edgecolors='white',label='no correl')\n\nplt.xlabel('no correlation')\n\nplt.grid(True)\n\nplt.legend()\n\n\n\nax1 = plt.subplot(1,2,2)\n\n#alpha透明度 edgecolors边缘颜色 label图例（结合legend使用）\n\nplt.scatter(x,y2,color='g',alpha=.3,edgecolors='gray',label='correl')\n\nplt.xlabel('correlation')\n\nplt.grid(True)\n\nplt.legend()\n\n\n\nplt.show()\n\n\n\n第四章 更多图表和定制化4.4 向图表添加数据表\nfrom matplotlib.pyplot import *\n\nimport matplotlib.pyplot as plt\n\nimport numpy as np\n\n\n\nplt.figure()\n\nax = plt.gca()\n\ny = np.random.randn(9)\n\n\n\ncol_labels = ['c1','c2','c3']\n\nrow_labels = ['r1','r2','r3']\n\ntable_vals = [[11,12,13],[21,22,23],[31,32,33]]\n\nrow_colors = ['r','g','b']\n\n\n\nmy_table = plt.table(cellText=table_vals,\n\n                     colWidths=[0.1]*3,\n\n                     rowLabels=row_labels,\n\n                     colLabels=col_labels,\n\n                     rowColours=row_colors,\n\n                     loc='upper right')\n\n\n\nplt.plot(y)\n\nplt,show()\n\n\n\n\n4.5 使用subplots\nfrom matplotlib.pyplot import *\n\nimport matplotlib.pyplot as plt\n\nimport numpy as np\n\n\n\nplt.figure(0)\n\n#子图的分割规划\n\na1 = plt.subplot2grid((3,3),(0,0),colspan=3)\n\na2 = plt.subplot2grid((3,3),(1,0),colspan=2)\n\na3 = plt.subplot2grid((3,3),(1,2),colspan=1)\n\na4 = plt.subplot2grid((3,3),(2,0),colspan=1)\n\na5 = plt.subplot2grid((3,3),(2,1),colspan=2)\n\n\n\nall_axex = plt.gcf().axes\n\nfor ax in all_axex:\n\n    for ticklabel in ax.get_xticklabels() + ax.get_yticklabels():\n\n        ticklabel.set_fontsize(10)\n\n\n\nplt.suptitle(\"Demo\")\n\nplt.show()\n\n\n\n\n4.6 定制化网格grid();\ncolor、linestyle 、linewidth等参数可设\n4.7 创建等高线图基于矩阵\n等高线标签\n等高线疏密\nimport matplotlib.pyplot as plt\n\nimport numpy as np\n\nimport matplotlib as mpl\n\n\n\ndef process_signals(x,y):\n\n    return (1-(x**2 + y**2))*np.exp(-y**3/3)\n\n\n\nx = np.arange(-1.5, 1.5, 0.1)\n\ny = np.arange(-1.5,1.5,0.1)\n\n\n\nX,Y = np.meshgrid(x,y)\n\nZ = process_signals(X,Y)\n\nN = np.arange(-1, 1.5, 0.3) #作为等值线的间隔\n\n\n\nCS = plt.contour(Z, N, linewidths = 2,cmap = mpl.cm.jet)\n\nplt.clabel(CS, inline=True, fmt='%1.1f', fontsize=10) #等值线标签\n\nplt.colorbar(CS)\n\nplt.show()\n\n\n\n\n4.8 填充图表底层区域\nfrom matplotlib.pyplot import *\n\nimport matplotlib.pyplot as plt\n\nimport numpy as np\n\nfrom math import sqrt\n\n\n\nt = range(1000)\n\ny = [sqrt(i) for i in t]\n\n\n\nplt.plot(t,y,color='r',lw=2)\n\nplt.fill_between(t,y,color='y')\n\nplt.show()\n\n\n\n第五章 3D可视化图表在选择3D之前最好慎重考虑，因为3D可视化比2D更加让人感到迷惑。\n5.2 3D柱状图\nimport matplotlib.pyplot as plt\n\nimport numpy as np\n\nimport matplotlib as mpl\n\nimport random\n\nimport matplotlib.dates as mdates\n\n\n\nfrom mpl_toolkits.mplot3d import Axes3D\n\n\n\nmpl.rcParams['font.size'] =10\n\n\n\nfig = plt.figure()\n\nax = fig.add_subplot(111,projection='3d')\n\n\n\nfor z in [2015,2016,2017]:\n\n    xs = range(1,13)\n\n    ys = 1000 * np.random.rand(12)\n\n    color = plt.cm.Set2(random.choice(range(plt.cm.Set2.N)))\n\n    ax.bar(xs,ys,zs=z,zdir='y',color=color,alpha=0.8)\n\n\n\nax.xaxis.set_major_locator(mpl.ticker.FixedLocator(xs))\n\nax.yaxis.set_major_locator(mpl.ticker.FixedLocator(ys))\n\n\n\nax.set_xlabel('M')\n\nax.set_ylabel('Y')\n\nax.set_zlabel('Sales')\n\n\n\nplt.show()\n\n\n\n5.3 曲面图\nimport matplotlib.pyplot as plt\n\nimport numpy as np\n\nimport matplotlib as mpl\n\nimport random\n\nfrom mpl_toolkits.mplot3d import Axes3D\n\nfrom matplotlib import cm\n\nfig = plt.figure()\n\nax = fig.add_subplot(111,projection='3d')\n\nn_angles = 36\n\nn_radii = 8\n\nradii = np.linspace(0.125, 1.0, n_radii)\n\nangles = np.linspace(0, 2*np.pi, n_angles, endpoint=False)\n\nangles = np.repeat(angles[..., np.newaxis], n_radii, axis=1)\n\n\n\nx = np.append(0, (radii*np.cos(angles)).flatten())\n\ny = np.append(0, (radii*np.sin(angles)).flatten())\n\nz = np.sin(-x*y)\n\n\n\nax.plot_trisurf(x,y,z,cmap=cm.jet, lw=0.2)\n\nplt.show()\n\n\n\n5.4 3D直方图\nimport matplotlib.pyplot as plt\n\nimport numpy as np\n\nimport matplotlib as mpl\n\nimport random\n\nfrom mpl_toolkits.mplot3d import Axes3D\n\n\n\nmpl.rcParams['font.size'] =10\n\n\n\nfig = plt.figure()\n\nax = fig.add_subplot(111,projection='3d')\n\nsamples = 25\n\nx = np.random.normal(5,1,samples)   #x上正态分布\n\ny = np.random.normal(3, .5, samples) #y上正态分布\n\n\n\n#xy平面上，按照10*10的网格划分，落在网格内个数hist，x划分边界、y划分边界\n\nhist, xedges, yedges = np.histogram2d(x,y,bins=10)\n\nelements = (len(xedges)-1)*(len(yedges)-1)\n\nxpos,ypos = np.meshgrid(xedges[:-1]+.25,yedges[:-1]+.25)\n\n\n\nxpos = xpos.flatten() #多维数组变为一维数组\n\nypos = ypos.flatten()\n\nzpos = np.zeros(elements)\n\n\n\ndx = .1 * np.ones_like(zpos) #zpos一致的全1数组\n\ndy = dx.copy()\n\ndz = hist.flatten()\n\n\n\n#每个立体以（xpos,ypos,zpos)为左下角，以（xpos+dx,ypos+dy,zpos+dz）为右上角\n\nax.bar3d(xpos,ypos,zpos,dx,dy,dz,color='b',alpha=0.4)\n\n\n\nplt.show()\n\n\n\n第六章 用图像和地图绘制图表6.3 绘制带图像的图表6.4 图像图表显示第七章 使用正确的图表理解数据为什么要以这种方式展示数据？\n7.2 对数图\nimport matplotlib.pyplot as plt\n\nimport numpy as np\n\n\n\nx = np.linspace(1,10)\n\ny = [10**e1 for e1 in x]\n\nz = [2*e2 for e2 in x]\n\n\n\nfig = plt.figure(figsize=(10, 8))\n\nax1 = fig.add_subplot(2,2,1)\n\nax1.plot(x, y, color='b')\n\nax1.set_yscale('log')\n\n#两个坐标轴和主次刻度打开网格显示\n\nplt.grid(b=True, which='both', axis='both')\n\n\n\nax2 = fig.add_subplot(2,2,2)\n\nax2.plot(x,y,color='r')\n\nax2.set_yscale('linear')\n\nplt.grid(b=True, which='both', axis='both')\n\n\n\nax3 = fig.add_subplot(2,2,3)\n\nax3.plot(x,z,color='g')\n\nax3.set_yscale('log')\n\nplt.grid(b=True, which='both', axis='both')\n\n\n\nax4 = fig.add_subplot(2,2,4)\n\nax4.plot(x,z,color='magenta')\n\nax4.set_yscale('linear')\n\nplt.grid(b=True, which='both', axis='both')\n\n\n\nplt.show()\n\n\n\n7.3 创建火柴杆图\nimport matplotlib.pyplot as plt\n\nimport numpy as np\n\n\n\nx = np.linspace(1,10)\n\ny = np.sin(x+1) + np.cos(x**2)\n\n\n\nbottom = -0.1\n\nhold = False\n\nlabel = \"delta\"\n\n\n\nmarkerline, stemlines, baseline = plt.stem(x, y, bottom=bottom,label=label, hold=hold)\n\n\n\nplt.setp(markerline, color='r', marker= 'o')\n\nplt.setp(stemlines,color='b', linestyle=':')\n\nplt.setp(baseline, color='g',lw=1, linestyle='-')\n\n\n\nplt.legend()\n\n\n\nplt.show()\n\n\n\n7.4 矢量图7.5 使用颜色表颜色要注意观察者会对颜色和颜色要表达的信息做一定的假设。不要做不相关的颜色映射，比如将财务数据映射到表示温度的颜色上去。\n如果数据没有与红绿有强关联时，尽可能不要使用红绿两种颜色。\nimport matplotlib.pyplot as plt\n\nimport numpy as np\n\nimport matplotlib as mpl\n\n\n\nred_yellow_green = ['#d73027','#f46d43','#fdae61']\n\nsample_size = 1000\n\nfig,ax = plt.subplots(1)\n\n\n\nfor i in range(3):\n\n    y = np.random.normal(size=sample_size).cumsum()\n\n    x = np.arange(sample_size)\n\n    ax.scatter(x, y, label=str(i), lw=0.1, edgecolors='grey',facecolor=red_yellow_green[i])\n\n    \n\nplt.legend()\n\nplt.show()\n\n\n\n7.7 使用散点图和直方图7.8 两个变量间的互相关图形7.9 自相关的重要性第八章 更多的matplotlib知识8.6 使用文本和字体属性函数：\ntest: 在指定位置添加文本\nxlabel:x轴标签\nylabel:y轴标签\ntitle:设置坐标轴的标题\nsuptitle:为图表添加一个居中的标题\nfigtest:在图表任意位置添加文本，归一化坐标\n如果对Python编程、网络爬虫、机器学习、数据挖掘、web开发、人工智能、面试经验交流。感兴趣可以519970686，群内会有不定期的发放免费的资料链接，这些资料都是从各个技术网站搜集、整理出来的，如果你有好的学习资料可以私聊发我，我会注明出处之后分享给大家。\n属性：\nfamily:字体类型\nsize/fontsize:字体大小\nstyle/fontstyle:字体风格\nvariant:字体变体形式\nweight/fontweight:粗细\nstretch/fontstretch:拉伸\nfontproperties:\n8.7 用LaTeX渲染文本LaTeX 是一个用于生成科学技术文档的高质量的排版系统，已经是事实上的科学排版或出版物的标准。\nimport matplotlib.pyplot as plt\n\nimport numpy as np\n\n\n\nt = np.arange(0.0, 1.0+0.01, 0.01)\n\ns = np.cos(4 * np.pi *t) * np.sin(np.pi*t/4) + 2\n\n\n\n#plt.rc('text', usetex=True)  #未安装Latex\n\nplt.rc('font', **{'family':'sans-serif','sans-serif':['Helvetica'],'size':16})\n\n\n\nplt.plot(t, s, alpha=0.55)\n\n\n\nplt.annotate(r'$\\cos(4 \\times \\pi \\times {t}) \\times \\sin(\\pi \\times \\frac{t}{4}) + 2$',xy=(.9, 2.2), xytext=(.5, 2.6),color='r', arrowprops={'arrowstyle':'->'})\n\n\n\nplt.text(.01, 2.7, r'$\\alpha, \\beta, \\gamma, \\Gamma, \\pi, \\Pi, \\phi, \\varphi, \\Phi$')\n\n\n\nplt.xlabel(r'time (s)')\n\nplt.ylabel(r'y values(W)')\n\n\n\nplt.title(r\"Hello python visualization.\")\n\nplt.subplots_adjust(top=0.8)\n\n\n\nplt.show()\n\n\n\n\n可以说这些是《Python数据可视化编程实战》的精华所在了，有需要的可以一读，有什么改进的意见也可评论留言，欢迎大家点赞转发，给技术人一点支持和关爱哈。原文出处（https://www.cnblogs.com/sunyp...）\n\n                ", "mainLikeNum": ["9 "], "mainBookmarkNum": "5"}