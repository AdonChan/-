{"title": "JavaScript算法 ,Python算法,Go算法,java算法,C#算法系列之插入排序 - 算法系列分享 ", "index": "c#,python,javascript,java", "content": "常见的内部排序算法有：插入排序、希尔排序、选择排序、冒泡排序、归并排序、快速排序、堆排序、基数排序等。用一张图概括：\n\n插入排序\n插入排序（英语：Insertion Sort）是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。插入排序和冒泡排序一样，也有一种优化算法，叫做拆半插入。\n\n算法步骤\n将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。\n从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）\n\n2 动图演示\n\n\nJavaScript 代码实现\n\nfunction insertionSort(arr) {\n    var len = arr.length;\n    var preIndex, current;\n    for (var i = 1; i < len; i++) {\n        preIndex = i - 1;\n        current = arr[i];\n        while(preIndex >= 0 && arr[preIndex] > current) {\n            arr[preIndex+1] = arr[preIndex];\n            preIndex--;\n        }\n        arr[preIndex+1] = current;\n    }\n    return arr;\n}\n\n\nPython 代码实现\ndef insertionSort(arr):\n    for i in range(len(arr)):\n        preIndex = i-1\n        current = arr[i]\n        while preIndex >= 0 and arr[preIndex] > current:\n            arr[preIndex+1] = arr[preIndex]\n            preIndex-=1\n        arr[preIndex+1] = current\n    return arr\n\n\nGo 代码实现\nfunc insertionSort(arr []int) []int {\n        for i := range arr {\n                preIndex := i - 1\n                current := arr[i]\n                for preIndex >= 0 && arr[preIndex] > current {\n                        arr[preIndex+1] = arr[preIndex]\n                        preIndex -= 1\n                }\n                arr[preIndex+1] = current\n        }\n        return arr\n}\n\n\n6 Java实现\n public static void insertion_sort( int[] arr ){\n    for( int i=0; i<arr.length-1; i++ ) \n    {   \n        for( int j=i+1; j>0; j-- ) \n        {\n            if( arr[j-1] <= arr[j] )\n                break;\n            int temp = arr[j];\n            arr[j] = arr[j-1];\n            arr[j-1] = temp;\n        }\n    }\n}\n\n7 Java的另一个版本\n  public static void insertion_sort(int[] arr){\n              for (int i = 1; i < arr.length; i++ ) {\n                      int temp = arr[i];\n                      int j = i - 1;  \n   \n                      for (; j >= 0 && arr[j] > temp; j-- ){\n                              arr[j + 1] = arr[j];\n                      }\n                      arr[j + 1] = temp;\n              }\n      }\n\n\n8 C#实现\npublic static void InsertSort(double[] data){\n        int i, j;\n        var count = data.Length;\n        for (i = 1 ; i < count ; i++) {\n        var t = data[i];\n            for(j = i - 1; j >= 0 && data[j] > t; j--)\n            data[j + 1] = data[j];\n            data[j + 1] = t;\n        }\n}\n\n希望可以一起交流技术，有兴趣可以加qq邀请入群:525331804  全栈技术开发qq群：581993430\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "11"}