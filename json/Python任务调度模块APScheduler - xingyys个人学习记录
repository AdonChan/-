{"title": "Python任务调度模块APScheduler - xingyys个人学习记录 ", "index": "python", "content": "介绍\n官网文档：http://apscheduler.readthedoc...API：http://apscheduler.readthedoc...\nAPScheduler是一个python的第三方库，用来提供python的后台程序。包含四个组件，分别是：\n\ntriggers： 任务触发器组件，提供任务触发方式\njob stores： 任务商店组件，提供任务保存方式\nexecutors： 任务调度组件，提供任务调度方式\nschedulers： 任务调度组件，提供任务工作方式\n\n安装\npip 安装\n$ pip install apscheduler\n源码安装\n$ python setup.py install\n简单的实例\nfrom apscheduler.schedulers.blocking import BlockingScheduler\nimport time\n\n# 实例化一个调度器\nscheduler = BlockingScheduler()\n \ndef job1():\n    print \"%s: 执行任务\"  % time.asctime()\n\n# 添加任务并设置触发方式为3s一次\nscheduler.add_job(job1, 'interval', seconds=3)\n\n# 开始运行调度器\nscheduler.start()\n输出：\n$ python first.py\nFri Sep  8 20:41:55 2017: 执行任务\nFri Sep  8 20:41:58 2017: 执行任务\n...\n各组件功能\ntrigger组件\ntrigger提供任务的触发方式，共三种方式：\ndate：只在某个时间点执行一次run_date(datetime|str)\nscheduler.add_job(my_job, 'date', run_date=date(2017, 9, 8), args=[])\nscheduler.add_job(my_job, 'date', run_date=datetime(2017, 9, 8, 21, 30, 5), args=[])\nscheduler.add_job(my_job, 'date', run_date='2017-9-08 21:30:05', args=[])\n# The 'date' trigger and datetime.now() as run_date are implicit\nsched.add_job(my_job, args=[[])\ninterval: 每隔一段时间执行一次weeks=0 | days=0 | hours=0 | minutes=0 | seconds=0, start_date=None, end_date=None, timezone=None\nscheduler.add_job(my_job, 'interval', hours=2)\nscheduler.add_job(my_job, 'interval', hours=2, start_date='2017-9-8 21:30:00', end_date='2018-06-15 21:30:00)\n\n@scheduler.scheduled_job('interval', id='my_job_id', hours=2)\ndef my_job():\n    print(\"Hello World\")\ncron: 使用同linux下crontab的方式(year=None, month=None, day=None, week=None, day_of_week=None, hour=None, minute=None, second=None, start_date=None, end_date=None, timezone=None)\nsched.add_job(my_job, 'cron', hour=3, minute=30)\nsched.add_job(my_job, 'cron', day_of_week='mon-fri', hour=5, minute=30, end_date='2017-10-30')\n\n@sched.scheduled_job('cron', id='my_job_id', day='last sun')\ndef some_decorated_task():\n    print(\"I am printed at 00:00:00 on the last Sunday of every month!\")\nscheduler组件\nscheduler组件提供执行的方式，在不同的运用环境中选择合适的方式\nBlockingScheduler: 进程中只运行调度器时的方式\nfrom apscheduler.schedulers.blocking import BlockingScheduler\nimport time\n\nscheduler = BlockingScheduler()\n \ndef job1():\n    print \"%s: 执行任务\"  % time.asctime()\n\nscheduler.add_job(job1, 'interval', seconds=3)\nscheduler.start()\nBackgroundScheduler: 不想使用任何框架时的方式\nfrom apscheduler.schedulers.background import BackgroundScheduler\nimport time\n\nscheduler = BackgroundScheduler()\n \ndef job1():\n    print \"%s: 执行任务\"  % time.asctime()\n\nscheduler.add_job(job1, 'interval', seconds=3)\nscheduler.start()\n\nwhile True:\n    pass\nAsyncIOScheduler: asyncio module的方式（Python3）\nfrom apscheduler.schedulers.asyncio import AsyncIOScheduler\ntry:\n    import asyncio\nexcept ImportError:\n    import trollius as asyncio\n...\n...\n# while True：pass \ntry:\n    asyncio.get_event_loop().run_forever()\nexcept (KeyboardInterrupt, SystemExit):\n    pass\nGeventScheduler: gevent方式\nfrom apscheduler.schedulers.gevent import GeventScheduler\n\n...\n...\n\ng = scheduler.start()\n# while True:pass\ntry:\n    g.join()\nexcept (KeyboardInterrupt, SystemExit):\n    pass\nTornadoScheduler: Tornado方式\nfrom tornado.ioloop import IOLoop\nfrom apscheduler.schedulers.tornado import TornadoScheduler\n\n...\n...\n\n# while True:pass\ntry:\n    IOLoop.instance().start()\nexcept (KeyboardInterrupt, SystemExit):\n    pass\nTwistedScheduler: Twisted方式\nfrom twisted.internet import reactor\nfrom apscheduler.schedulers.twisted import TwistedScheduler\n\n...\n...\n\n# while True:pass\ntry:\n    reactor.run()\nexcept (KeyboardInterrupt, SystemExit):\n    pass\nQtScheduler: Qt方式\nexecutors组件\nexecutors组件提供任务的调度方式\n\nbase\ndebug\ngevent\npool(max_workers=10)\ntwisted\n\njobstore组件\njobstore提供任务的各种持久化方式\n\nbase\nmemory\nmongodbscheduler.add_jobstore('mongodb', collection='example_jobs')\nredis    scheduler.add_jobstore('redis', jobs_key='example.jobs', run_times_key='example.run_times')\nrethinkdb    scheduler.add_jobstore('rethinkdb', database='apscheduler_example')\nsqlalchemyscheduler.add_jobstore('sqlalchemy', url=url)\nzookeeperscheduler.add_jobstore('zookeeper', path='/example_jobs')\n\n任务操作\n添加任务add_job(如上)\n如果使用了任务的存储，开启时最好添加replace_existing=True，否则每次开启都会创建任务的副本开启后任务不会马上启动，可修改trigger参数\n删除任务remove_job\n\n# 根据任务实例删除\njob = scheduler.add_job(myfunc, 'interval', minutes=2)\njob.remove()\n\n# 根据任务id删除\nscheduler.add_job(myfunc, 'interval', minutes=2, id='my_job_id')\nscheduler.remove_job('my_job_id')\n任务的暂停pause_job和继续resume_job\n\njob = scheduler.add_job(myfunc, 'interval', minutes=2)\n# 根据任务实例\njob.pause()\njob.resume()\n\n# 根据任务id暂停\nscheduler.add_job(myfunc, 'interval', minutes=2, id='my_job_id')\nscheduler.pause_job('my_job_id')\nscheduler.resume_job('my_job_id')\n任务的修饰modify和重设reschedule_job\n\n修饰：job.modify(max_instances=6, name='Alternate name')重设：scheduler.reschedule_job('my_job_id', trigger='cron', minute='*/5')\n调度器操作\n\n开启 scheduler.start()\n关闭 scheduler.shotdown(wait=True | False)\n暂停 scheduler.pause()\n继续 scheduler.resume()\n监听 http://apscheduler.readthedoc...\n\ndef my_listener(event):\n    if event.exception:\n        print('The job crashed :(')\n    else:\n        print('The job worked :)')\n\nscheduler.add_listener(my_listener, EVENT_JOB_EXECUTED | EVENT_JOB_ERROR)\n官方实例\nfrom pytz import utc\n\nfrom apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.jobstores.mongodb import MongoDBJobStore\nfrom apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore\nfrom apscheduler.executors.pool import ThreadPoolExecutor, ProcessPoolExecutor\n\n\njobstores = {\n    'mongo': MongoDBJobStore(),\n    'default': SQLAlchemyJobStore(url='sqlite:///jobs.sqlite')\n}\nexecutors = {\n    'default': ThreadPoolExecutor(20),\n    'processpool': ProcessPoolExecutor(5)\n}\njob_defaults = {\n    'coalesce': False,\n    'max_instances': 3\n}\nscheduler = BackgroundScheduler(jobstores=jobstores, executors=executors, job_defaults=job_defaults, timezone=utc)\n\n                ", "mainLikeNum": ["5 "], "mainBookmarkNum": "11"}