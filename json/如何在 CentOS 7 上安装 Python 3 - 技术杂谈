{"title": "如何在 CentOS 7 上安装 Python 3 - 技术杂谈 ", "index": "python,centos", "content": "当前最新的 CentOS 7.5 默认安装的是 Python 2.7.5，并且默认的官方 yum 源中不提供 Python 3 的安装包。这里主要介绍两种在 CentOS 7 中安装 Python 3 的方法。\n使用 SCL 安装\n1. 启用 SCL\nSCL 是一个社区项目，它可以在同一系统上构建，安装和使用多个版本的软件，而不会影响系统默认软件包。\nyum -y install centos-release-scl\n2. 安装 Python\n现在我们可以访问SCL存储库，我们可以安装我们需要的任何Python 3.x版本，目前最新版本为 Python 3.6。\nyum -y install rh-python36\n3. 修改环境变量\n要访问Python 3.6，需要使用 scl 工具为系统环境变量添加自定义路径。\nscl enable rh-python36 bash\n4. 查看安装信息\n查看 Python 环境路径：\n[root@localhost ~]# which python\n/opt/rh/rh-python36/root/usr/bin/python\n查看 Python 当前版本：\n[root@localhost ~]# python --version\nPython 3.6.3\n编译源码安装\n1. 基本工具\n\nwget（网络下载工具）\ngcc（基于C/C++的编译器）\nmake（工程化编译工具）\n\nyum -y install wget gcc make\n2. 安装依赖\n\nbzip2-devel（解决 import bz2 报错）\nncurses-devel（解决 import curses 报错）\nsqlite-devel（解决 import sqlite3 报错）\ngdbm-devel（解决 _dbm _gdbm 缺失）\nxz-devel（解决 _lzma 缺失）\ntk-devel（解决 _tkinter 缺失）\nreadline-devel（解决 readline 缺失）\nlibffi-devel（解决 _ctypes 缺失）\n\nyum -y install bzip2-devel ncurses-devel sqlite-devel gdbm-devel xz-devel tk-devel readline-devel libffi-devel\n3. 编译源码\n下载源码包：\nwget -c https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz\n解压源码包：\ntar -zxvf Python-3.7.0.tgz\n进入解压目录：\n[root@localhost ~]# cd Python-3.7.0\n[root@localhost Python-3.7.0]# \n配置安装目录：\n./configure prefix=/usr/local/python3\n编译并安装：\nmake && make install\n4. 添加链接\n在用户环境变量目录下，创建一个启动程序的软链接。\nln -s /usr/local/python3/bin/python3.7 /usr/local/bin/python\n5. 查看版本\n[root@localhost ~]# python --version\nPython 3.7.0\n\nSLC 与编译安装各有优缺点。\nSLC 方式安装更简单，不需要考虑依赖的问题。而且默认安装在 /opt 目录下（相当于 Windows 中 D:\\SoftWare），不影响系统环境，直接 rm -rf 也没关系。局限在于 SLC 只提供 python3.4 - python3.6 的版本，并且会修改 $PATH 的路径。\n编译安装则可以选择任意 python 的版本（只要能下载的到），但是编译与安装过程中会遇到很多 No module named 错误。如果再将启动程序软链接添加到系统环境变量目录（/usr/bin）下，依赖 python2 的 yum（#!/usr/bin/python）工具就不能使用了。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}