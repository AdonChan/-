{"title": "Go 的 fake-useragent 了解一下 - 煎鱼的清汤锅 ", "index": "python,golang,php,javascript", "content": "Go 的 fake-useragent 了解一下\n有的网站会根据 User-Agent 的不同，跳转到不同（PC、M）的站点，也有根据版本的不同给出不一样的提示等等，而 User-Agent 的变化更是爬虫里的基础姿势\n使用 Go 编写网络爬虫或需要模拟浏览器头（User-Agent）的时候，你是否会觉得很麻烦，获取请求头（Request Headers）的 User-Agent 还得找来找去，挺繁琐。先前我也遇到了这个问题，因此有了这个项目 fake-useragent，用来解决你我的痛点\n项目地址：https://github.com/EDDYCJY/fa...\n支持\n\nAll User-Agent Random\nChrome\nInternetExplorer (IE)\nFirefox\nSafari\nAndroid\nMacOSX\nIOS\nLinux\nIPhone\nIPad\nComputer\nMobile\n\n安装\n$ go get github.com/EDDYCJY/fake-useragent\n用法\npackage main\n\nimport (\n    \"log\"\n\n    \"github.com/EDDYCJY/fake-useragent\"\n)\n\nfunc main() {\n    // 推荐使用\n    random := browser.Random()\n    log.Printf(\"Random: %s\", random)\n\n    chrome := browser.Chrome()\n    log.Printf(\"Chrome: %s\", chrome)\n\n    internetExplorer := browser.InternetExplorer()\n    log.Printf(\"IE: %s\", internetExplorer)\n\n    firefox := browser.Firefox()\n    log.Printf(\"Firefox: %s\", firefox)\n\n    safari := browser.Safari()\n    log.Printf(\"Safari: %s\", safari)\n\n    android := browser.Android()\n    log.Printf(\"Android: %s\", android)\n\n    macOSX := browser.MacOSX()\n    log.Printf(\"MacOSX: %s\", macOSX)\n\n    ios := browser.IOS()\n    log.Printf(\"IOS: %s\", ios)\n\n    linux := browser.Linux()\n    log.Printf(\"Linux: %s\", linux)\n\n    iphone := browser.IPhone()\n    log.Printf(\"IPhone: %s\", iphone)\n\n    ipad := browser.IPad()\n    log.Printf(\"IPad: %s\", ipad)\n\n    computer := browser.Computer()\n    log.Printf(\"Computer: %s\", computer)\n\n    mobile := browser.Mobile()\n    log.Printf(\"Mobile: %s\", mobile)\n}\n定制\n你可以调整抓取数据源的最大页数、时间间隔以及最大超时时间。 如果不填写，则为默认值。\nclient := browser.Client{\n    MaxPage: 3,\n    Delay: 200 * time.Millisecond,\n    Timeout: 10 * time.Second,\n}\ncache := browser.Cache{}\nb := browser.NewBrowser(client, cache)\n\nrandom := b.Random()\n更新浏览器头的临时文件缓存\nclient := browser.Client{}\ncache := browser.Cache{\n    UpdateFile: true,\n}\nb := browser.NewBrowser(client, cache)\n最后，建议常规用法就好，默认参数能够满足日常需求\n输出\nRandom: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36\n\nChrome: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36\n\nIE: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)\n\nFirefox: Mozilla/5.0 (Windows NT 6.3; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0\n\nSafari: Mozilla/5.0 (iPhone; CPU iPhone OS 11_2_5 like Mac OS X) AppleWebKit/604.5.6 (KHTML, like Gecko) Version/11.0 Mobile/15D60 Safari/604.1\n\nAndroid: Mozilla/5.0 (Linux; Android 6.0; MYA-L22 Build/HUAWEIMYA-L22) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.84 Mobile Safari/537.36\n\nMacOSX: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/602.2.14 (KHTML, like Gecko) Version/10.0.1 Safari/602.2.14\n\nIOS: Mozilla/5.0 (iPhone; CPU iPhone OS 10_1 like Mac OS X) AppleWebKit/602.2.14 (KHTML, like Gecko) Version/10.0 Mobile/14B72 Safari/602.1\n\nLinux: Mozilla/5.0 (X11; Linux x86_64; rv:42.0) Gecko/20100101 Firefox/42.0\n\nIPhone: Mozilla/5.0 (iPhone; CPU iPhone OS 10_2 like Mac OS X) AppleWebKit/602.3.12 (KHTML, like Gecko) Version/10.0 Mobile/14C92 Safari/602.1\n\nIPad: Mozilla/5.0 (iPad; CPU OS 5_0_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A405 Safari/7534.48.3\n\nComputer: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:54.0) Gecko/20100101 Firefox/54.0\n\nMobile: Mozilla/5.0 (Linux; Android 7.0; Redmi Note 4 Build/NRD90M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.111 Mobile Safari/537.36\n注意\n如果第一次使用，fake-useragent 将收集数据并在临时目录中创建一个文件作为文件缓存，请耐心等待几秒钟\n最后\n如果在项目中发现了什么问题，欢迎提交 PR 或者 issue。希望你能够喜欢这个项目，根本目的还是为了解决痛点，欢迎 Star！😁\n\n项目地址：https://github.com/EDDYCJY/fa...\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "1"}