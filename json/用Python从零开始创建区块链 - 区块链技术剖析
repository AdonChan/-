{"title": "用Python从零开始创建区块链 - 区块链技术剖析 ", "index": "python,区块链", "content": "本文主要内容翻译自Learn Blockchains by Building One �本文原始链接,转载请注明出处。 作者认为最快的学习区块链的方式是自己创建一个，本文就跟随作者用Python来创建一个区块链。\n对数字货币的崛起感到新奇的我们，并且想知道其背后的技术——区块链是怎样实现的。\n但是完全搞懂区块链并非易事，我喜欢在实践中学习，通过写代码来学习技术会掌握得更牢固。通过构建一个区块链可以加深对区块链的理解。\n准备工作\n本文要求读者对Python有基本的理解，能读写基本的Python，并且需要对HTTP请求有基本的了解。\n我们知道区块链是由区块的记录构成的不可变、有序的链结构，记录可以是交易、文件或任何你想要的数据，重要的是它们是通过哈希值（hashes）链接起来的。\n如果你还不是很了解哈希，可以查看这篇文章\n环境准备\n环境准备，确保已经安装Python3.6+, pip , Flask, requests 安装方法：\npip install Flask==0.12.2 requests==2.18.4同时还需要一个HTTP客户端，比如Postman，cURL或其它客户端。\n参考源代码（原代码在我翻译的时候，无法运行，我fork了一份，修复了其中的错误，并添加了翻译，感谢star）\n开始创建Blockchain\n新建一个文件 blockchain.py，本文所有的代码都写在这一个文件中，可以随时参考源代码\nBlockchain类\n首先创建一个Blockchain类，在构造函数中创建了两个列表，一个用于储存区块链，一个用于储存交易。\n以下是Blockchain类的框架：\nclass Blockchain(object):\ndef __init__(self):\n    self.chain = []\n    self.current_transactions = []\n    \ndef new_block(self):\n    # Creates a new Block and adds it to the chain\n    pass\n\ndef new_transaction(self):\n    # Adds a new transaction to the list of transactions\n    pass\n\n@staticmethod\ndef hash(block):\n    # Hashes a Block\n    pass\n\n@property\ndef last_block(self):\n    # Returns the last Block in the chain\n    pass\nBlockchain类用来管理链条，它能存储交易，加入新块等，下面我们来进一步完善这些方法。\n块结构\n每个区块包含属性：索引（index），Unix时间戳（timestamp），交易列表（transactions），工作量证明（稍后解释）以及前一个区块的Hash值。\n以下是一个区块的结构：\nblock = {\n'index': 1,\n'timestamp': 1506057125.900785,\n'transactions': [\n    {\n        'sender': \"8527147fe1f5426f9dd545de4b27ee00\",\n        'recipient': \"a77f5cdfa2934df3954a5c7c7da5df1f\",\n        'amount': 5,\n    }\n],\n'proof': 324984774000,\n'previous_hash': \"2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824\"\n}到这里，区块链的概念就清楚了，每个新的区块都包含上一个区块的Hash，这是关键的一点，它保障了区块链不可变性。如果攻击者破坏了前面的某个区块，那么后面所有区块的Hash都会变得不正确。不理解的话，慢慢消化，可参考{% post_link whatbc 区块链记账原理 %}\n加入交易\n接下来我们需要添加一个交易，来完善下new_transaction方法\nclass Blockchain(object):\n...\n\ndef new_transaction(self, sender, recipient, amount):\n    \"\"\"\n    生成新交易信息，信息将加入到下一个待挖的区块中\n    :param sender: <str> Address of the Sender\n    :param recipient: <str> Address of the Recipient\n    :param amount: <int> Amount\n    :return: <int> The index of the Block that will hold this transaction\n    \"\"\"\n\n    self.current_transactions.append({\n        'sender': sender,\n        'recipient': recipient,\n        'amount': amount,\n    })\n\n    return self.last_block['index'] + 1\n方法向列表中添加一个交易记录，并返回该记录将被添加到的区块(下一个待挖掘的区块)的索引，等下在用户提交交易时会有用。\n创建新块\n当Blockchain实例化后，我们需要构造一个创世块（没有前区块的第一个区块），并且给它加上一个工作量证明。 每个区块都需要经过工作量证明，俗称挖矿，稍后会继续讲解。\n为了构造创世块，我们还需要完善new_block(), new_transaction() 和hash() 方法：\nimport hashlibimport jsonfrom time import time\nclass Blockchain(object):\ndef __init__(self):\n    self.current_transactions = []\n    self.chain = []\n\n    # Create the genesis block\n    self.new_block(previous_hash=1, proof=100)\n\ndef new_block(self, proof, previous_hash=None):\n    \"\"\"\n    生成新块\n    :param proof: <int> The proof given by the Proof of Work algorithm\n    :param previous_hash: (Optional) <str> Hash of previous Block\n    :return: <dict> New Block\n    \"\"\"\n\n    block = {\n        'index': len(self.chain) + 1,\n        'timestamp': time(),\n        'transactions': self.current_transactions,\n        'proof': proof,\n        'previous_hash': previous_hash or self.hash(self.chain[-1]),\n    }\n\n    # Reset the current list of transactions\n    self.current_transactions = []\n\n    self.chain.append(block)\n    return block\n\ndef new_transaction(self, sender, recipient, amount):\n    \"\"\"\n    生成新交易信息，信息将加入到下一个待挖的区块中\n    :param sender: <str> Address of the Sender\n    :param recipient: <str> Address of the Recipient\n    :param amount: <int> Amount\n    :return: <int> The index of the Block that will hold this transaction\n    \"\"\"\n    self.current_transactions.append({\n        'sender': sender,\n        'recipient': recipient,\n        'amount': amount,\n    })\n\n    return self.last_block['index'] + 1\n\n@property\ndef last_block(self):\n    return self.chain[-1]\n\n@staticmethod\ndef hash(block):\n    \"\"\"\n    生成块的 SHA-256 hash值\n    :param block: <dict> Block\n    :return: <str>\n    \"\"\"\n\n    # We must make sure that the Dictionary is Ordered, or we'll have inconsistent hashes\n    block_string = json.dumps(block, sort_keys=True).encode()\n    return hashlib.sha256(block_string).hexdigest()\n\n通过上面的代码和注释可以对区块链有直观的了解，接下来我们看看区块是怎么挖出来的。\n理解工作量证明\n新的区块依赖工作量证明算法（PoW）来构造。PoW的目标是找出一个符合特定条件的数字，这个数字很难计算出来，但容易验证。这就是工作量证明的核心思想。\n为了方便理解，举个例子：\n假设一个整数 x 乘以另一个整数 y 的积的 Hash 值必须以 0 结尾，即 hash(x * y) = ac23dc...0。设变量 x = 5，求 y 的值？\n用Python实现如下：\nfrom hashlib import sha256x = 5y = 0  # y未知while sha256(f'{x*y}'.encode()).hexdigest()[-1] != \"0\":\ny += 1\nprint(f'The solution is y = {y}')结果是y=21. 因为：\nhash(5 * 21) = 1253e9373e...5e3600155e860在比特币中，使用称为Hashcash的工作量证明算法，它和上面的问题很类似。矿工们为了争夺创建区块的权利而争相计算结果。通常，计算难度与目标字符串需要满足的特定字符的数量成正比，矿工算出结果后，会获得比特币奖励。 当然，在网络上非常容易验证这个结果。\n实现工作量证明\n让我们来实现一个相似PoW算法，规则是：寻找一个数 p，使得它与前一个区块的 proof 拼接成的字符串的 Hash 值以 4 个零开头。\nimport hashlibimport json\nfrom time import timefrom uuid import uuid4\nclass Blockchain(object):\n...\n    \ndef proof_of_work(self, last_proof):\n    \"\"\"\n    简单的工作量证明:\n     - 查找一个 p' 使得 hash(pp') 以4个0开头\n     - p 是上一个块的证明,  p' 是当前的证明\n    :param last_proof: <int>\n    :return: <int>\n    \"\"\"\n\n    proof = 0\n    while self.valid_proof(last_proof, proof) is False:\n        proof += 1\n\n    return proof\n\n@staticmethod\ndef valid_proof(last_proof, proof):\n    \"\"\"\n    验证证明: 是否hash(last_proof, proof)以4个0开头?\n    :param last_proof: <int> Previous Proof\n    :param proof: <int> Current Proof\n    :return: <bool> True if correct, False if not.\n    \"\"\"\n\n    guess = f'{last_proof}{proof}'.encode()\n    guess_hash = hashlib.sha256(guess).hexdigest()\n    return guess_hash[:4] == \"0000\"\n衡量算法复杂度的办法是修改零开头的个数。使用4个来用于演示，你会发现多一个零都会大大增加计算出结果所需的时间。\n现在Blockchain类基本已经完成了，接下来使用HTTP requests来进行交互。\nBlockchain作为API接口\n我们将使用Python Flask框架，这是一个轻量Web应用框架，它方便将网络请求映射到 Python函数，现在我们来让Blockchain运行在基于Flask web上。\n我们将创建三个接口：\n/transactions/new 创建一个交易并添加到区块/mine 告诉服务器去挖掘新的区块/chain 返回整个区块链创建节点\n我们的“Flask服务器”将扮演区块链网络中的一个节点。我们先添加一些框架代码：\nimport hashlibimport jsonfrom textwrap import dedentfrom time import timefrom uuid import uuid4\nfrom flask import Flask\nclass Blockchain(object):\n...\n\n\nInstantiate our Node\napp = Flask(__name__)\nGenerate a globally unique address for this node\nnode_identifier = str(uuid4()).replace('-', '')\nInstantiate the Blockchain\nblockchain = Blockchain()\n@app.route('/mine', methods=['GET'])def mine():\nreturn \"We'll mine a new Block\"\n\n@app.route('/transactions/new', methods=['POST'])def new_transaction():\nreturn \"We'll add a new transaction\"\n\n@app.route('/chain', methods=['GET'])def full_chain():\nresponse = {\n    'chain': blockchain.chain,\n    'length': len(blockchain.chain),\n}\nreturn jsonify(response), 200\n\nif name == '__main__':\napp.run(host='0.0.0.0', port=5000)\n简单的说明一下以上代码： 第15行: 创建一个节点. 第18行: 为节点创建一个随机的名字. 第21行: 实例Blockchain类. 第24–26行: 创建/mine GET接口。 第28–30行: 创建/transactions/new POST接口,可以给接口发送交易数据. 第32–38行: 创建 /chain 接口, 返回整个区块链。 第40–41行: 服务运行在端口5000上.\n发送交易\n发送到节点的交易数据结构如下：\n{ \"sender\": \"my address\", \"recipient\": \"someone else's address\", \"amount\": 5}之前已经有添加交易的方法，基于接口来添加交易就很简单了\nimport hashlibimport jsonfrom textwrap import dedentfrom time import timefrom uuid import uuid4\nfrom flask import Flask, jsonify, request\n...\n@app.route('/transactions/new', methods=['POST'])def new_transaction():\nvalues = request.get_json()\n\n# Check that the required fields are in the POST'ed data\nrequired = ['sender', 'recipient', 'amount']\nif not all(k in values for k in required):\n    return 'Missing values', 400\n\n# Create a new Transaction\nindex = blockchain.new_transaction(values['sender'], values['recipient'], values['amount'])\n\nresponse = {'message': f'Transaction will be added to Block {index}'}\nreturn jsonify(response), 201\n挖矿\n挖矿正是神奇所在，它很简单，做了一下三件事：\n计算工作量证明PoW通过新增一个交易授予矿工（自己）一个币构造新区块并将其添加到链中import hashlibimport json\nfrom time import timefrom uuid import uuid4\nfrom flask import Flask, jsonify, request\n...\n@app.route('/mine', methods=['GET'])def mine():\n# We run the proof of work algorithm to get the next proof...\nlast_block = blockchain.last_block\nlast_proof = last_block['proof']\nproof = blockchain.proof_of_work(last_proof)\n\n# 给工作量证明的节点提供奖励.\n# 发送者为 \"0\" 表明是新挖出的币\nblockchain.new_transaction(\n    sender=\"0\",\n    recipient=node_identifier,\n    amount=1,\n)\n\n# Forge the new Block by adding it to the chain\nblock = blockchain.new_block(proof)\n\nresponse = {\n    'message': \"New Block Forged\",\n    'index': block['index'],\n    'transactions': block['transactions'],\n    'proof': block['proof'],\n    'previous_hash': block['previous_hash'],\n}\nreturn jsonify(response), 200\n注意交易的接收者是我们自己的服务器节点，我们做的大部分工作都只是围绕Blockchain类方法进行交互。到此，我们的区块链就算完成了，我们来实际运行下\n运行区块链\n你可以使用cURL 或Postman 去和API进行交互\n启动server:\n$ python blockchain.py\nRuning on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n让我们通过请求 http://localhost:5000/mine 来进行挖矿\n用Postman请求挖矿\n通过post请求，添加一个新交易\n用Postman请求挖矿\n如果不是使用Postman，则用一下的cURL语句也是一样的：\n$ curl -X POST -H \"Content-Type: application/json\" -d '{ \"sender\": \"d4ee26eee15148ee92c6cd394edd974e\", \"recipient\": \"someone-other-address\", \"amount\": 5}' \"http://localhost:5000/transactions/new\"在挖了两次矿之后，就有3个块了，通过请求 http://localhost:5000/chain 可以得到所有的块信息。\n{  \"chain\": [\n{\n  \"index\": 1,\n  \"previous_hash\": 1,\n  \"proof\": 100,\n  \"timestamp\": 1506280650.770839,\n  \"transactions\": []\n},\n{\n  \"index\": 2,\n  \"previous_hash\": \"c099bc...bfb7\",\n  \"proof\": 35293,\n  \"timestamp\": 1506280664.717925,\n  \"transactions\": [\n    {\n      \"amount\": 1,\n      \"recipient\": \"8bbcb347e0634905b0cac7955bae152b\",\n      \"sender\": \"0\"\n    }\n  ]\n},\n{\n  \"index\": 3,\n  \"previous_hash\": \"eff91a...10f2\",\n  \"proof\": 35089,\n  \"timestamp\": 1506280666.1086972,\n  \"transactions\": [\n    {\n      \"amount\": 1,\n      \"recipient\": \"8bbcb347e0634905b0cac7955bae152b\",\n      \"sender\": \"0\"\n    }\n  ]\n}\n],  \"length\": 3}一致性（共识）\n我们已经有了一个基本的区块链可以接受交易和挖矿。但是区块链系统应该是分布式的。既然是分布式的，那么我们究竟拿什么保证所有节点有同样的链呢？这就是一致性问题，我们要想在网络上有多个节点，就必须实现一个一致性的算法。\n注册节点\n在实现一致性算法之前，我们需要找到一种方式让一个节点知道它相邻的节点。每个节点都需要保存一份包含网络中其它节点的记录。因此让我们新增几个接口：\n/nodes/register 接收URL形式的新节点列表/nodes/resolve 执行一致性算法，解决任何冲突，确保节点拥有正确的链我们修改下Blockchain的init函数并提供一个注册节点方法：\n...from urllib.parse import urlparse...\nclass Blockchain(object):\ndef __init__(self):\n    ...\n    self.nodes = set()\n    ...\n\ndef register_node(self, address):\n    \"\"\"\n    Add a new node to the list of nodes\n    :param address: <str> Address of node. Eg. 'http://192.168.0.5:5000'\n    :return: None\n    \"\"\"\n\n    parsed_url = urlparse(address)\n    self.nodes.add(parsed_url.netloc)\n我们用 set 来储存节点，这是一种避免重复添加节点的简单方法。\n实现共识算法\n前面提到，冲突是指不同的节点拥有不同的链，为了解决这个问题，规定最长的、有效的链才是最终的链，换句话说，网络中有效最长链才是实际的链。\n我们使用一下的算法，来达到网络中的共识\n...import requests\nclass Blockchain(object)\n...\n\ndef valid_chain(self, chain):\n    \"\"\"\n    Determine if a given blockchain is valid\n    :param chain: <list> A blockchain\n    :return: <bool> True if valid, False if not\n    \"\"\"\n\n    last_block = chain[0]\n    current_index = 1\n\n    while current_index < len(chain):\n        block = chain[current_index]\n        print(f'{last_block}')\n        print(f'{block}')\n        print(\"\\n-----------\\n\")\n        # Check that the hash of the block is correct\n        if block['previous_hash'] != self.hash(last_block):\n            return False\n\n        # Check that the Proof of Work is correct\n        if not self.valid_proof(last_block['proof'], block['proof']):\n            return False\n\n        last_block = block\n        current_index += 1\n\n    return True\n\ndef resolve_conflicts(self):\n    \"\"\"\n    共识算法解决冲突\n    使用网络中最长的链.\n    :return: <bool> True 如果链被取代, 否则为False\n    \"\"\"\n\n    neighbours = self.nodes\n    new_chain = None\n\n    # We're only looking for chains longer than ours\n    max_length = len(self.chain)\n\n    # Grab and verify the chains from all the nodes in our network\n    for node in neighbours:\n        response = requests.get(f'http://{node}/chain')\n\n        if response.status_code == 200:\n            length = response.json()['length']\n            chain = response.json()['chain']\n\n            # Check if the length is longer and the chain is valid\n            if length > max_length and self.valid_chain(chain):\n                max_length = length\n                new_chain = chain\n\n    # Replace our chain if we discovered a new, valid chain longer than ours\n    if new_chain:\n        self.chain = new_chain\n        return True\n\n    return False\n第一个方法 valid_chain() 用来检查是否是有效链，遍历每个块验证hash和proof.\n第2个方法 resolve_conflicts() 用来解决冲突，遍历所有的邻居节点，并用上一个方法检查链的有效性，  如果发现有效更长链，就替换掉自己的链 \n让我们添加两个路由，一个用来注册节点，一个用来解决冲突。\n@app.route('/nodes/register', methods=['POST'])def register_nodes():\nvalues = request.get_json()\n\nnodes = values.get('nodes')\nif nodes is None:\n    return \"Error: Please supply a valid list of nodes\", 400\n\nfor node in nodes:\n    blockchain.register_node(node)\n\nresponse = {\n    'message': 'New nodes have been added',\n    'total_nodes': list(blockchain.nodes),\n}\nreturn jsonify(response), 201\n\n\n@app.route('/nodes/resolve', methods=['GET'])def consensus():\nreplaced = blockchain.resolve_conflicts()\n\nif replaced:\n    response = {\n        'message': 'Our chain was replaced',\n        'new_chain': blockchain.chain\n    }\nelse:\n    response = {\n        'message': 'Our chain is authoritative',\n        'chain': blockchain.chain\n    }\n\nreturn jsonify(response), 200\n你可以在不同的机器运行节点，或在一台机机开启不同的网络端口来模拟多节点的网络，这里在同一台机器开启不同的端口演示，在不同的终端运行一下命令，就启动了两个节点：http://localhost:5000 和 http://localhost:5001\npipenv run python blockchain.pypipenv run python blockchain.py -p 5001注册新节点\n然后在节点2上挖两个块，确保是更长的链，然后在节点1上访问接口/nodes/resolve ,这时节点1的链会通过共识算法被节点2的链取代。\n共识算法解决冲突\n好啦，你可以邀请朋友们一起来测试你的区块链\n☛ 深入浅出区块链 - 系统学习区块链，打造最好的区块链技术博客。 我的知识星球为各位解答区块链技术问题，欢迎加入讨论。☛  我的知识星球为各位解答区块链技术问题，欢迎加入讨论。☛  关注公众号“深入浅出区块链技术”第一时间获取区块链技术信息。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}