{"title": "让我们一起来构建一个模板引擎（四）  - mozillazg 的学习笔记 ", "index": "模板引擎,python", "content": "在 上篇文章 中我们的模板引擎实现了对 include 和 extends 的支持， 到此为止我们已经实现了模板引擎所需的大部分功能。 在本文中我们将解决一些用于生成 html 的模板引擎需要面对的一些安全问题。\n转义\n首先要解决的就是转义问题。到目前为止我们的模板引擎并没有对变量和表达式结果进行转义处理， 如果用于生成 html 源码的话就会出现下面这样的问题 ( template3c.py ):\n>>> from template3c import Template\n>>> t = Template('<h1>{{ title }}</h1>')\n>>> t.render({'title': 'hello<br />world'})\n'<h1>hello<br />world</h1>'\n很明显 title 中包含的标签需要被转义，不然就会出现非预期的结果。 这里我们只对 & \" ' > < 这几个字符做转义处理，其他的字符可根据需要进行处理。\nhtml_escape_table = {\n    '&': '&amp;',\n    '\"': '&quot;',\n    '\\'': '&apos;',\n    '>': '&gt;',\n    '<': '&lt;',\n}\n\n\ndef html_escape(text):\n    return ''.join(html_escape_table.get(c, c) for c in text)\n转义效果:\n>>> html_escape('hello<br />world')\n'hello&lt;br /&gt;world'\n既然有转义自然也要有禁止转义的功能，毕竟不能一刀切否则就丧失灵活性了。\nclass NoEscape:\n\n    def __init__(self, raw_text):\n        self.raw_text = raw_text\n\n\ndef escape(text):\n    if isinstance(text, NoEscape):\n        return str(text.raw_text)\n    else:\n        text = str(text)\n        return html_escape(text)\n\n\ndef noescape(text):\n    return NoEscape(text)\n最终我们的模板引擎针对转义所做的修改如下(可以下载 template4a.py ):\nclass Template:\n    def __init__(self, ..., auto_escape=True):\n        ...\n        self.auto_escape = auto_escape\n        self.default_context.setdefault('escape', escape)\n        self.default_context.setdefault('noescape', noescape)\n        ...\n\n    def _handle_variable(self, token):\n        if self.auto_escape:\n            self.buffered.append('escape({})'.format(variable))\n        else:\n            self.buffered.append('str({})'.format(variable))\n\n    def _parse_another_template_file(self, filename):\n        ...\n        template = self.__class__(\n                ...,\n                auto_escape=self.auto_escape\n        )\n        ...\n\n\nclass NoEscape:\n    def __init__(self, raw_text):\n        self.raw_text = raw_text\n\nhtml_escape_table = {\n    '&': '&amp;',\n    '\"': '&quot;',\n    '\\'': '&apos;',\n    '>': '&gt;',\n    '<': '&lt;',\n}\n\n\ndef html_escape(text):\n    return ''.join(html_escape_table.get(c, c) for c in text)\n\n\ndef escape(text):\n    if isinstance(text, NoEscape):\n        return str(text.raw_text)\n    else:\n        text = str(text)\n        return html_escape(text)\n\n\ndef noescape(text):\n    return NoEscape(text)\n效果:\n>>> from template4a import Template\n>>> t = Template('<h1>{{ title }}</h1>')\n>>> t.render({'title': 'hello<br />world'})\n'<h1>hello&lt;br /&gt;world</h1>'\n\n>>> t = Template('<h1>{{ noescape(title) }}</h1>')\n>>> t.render({'title': 'hello<br />world'})\n'<h1>hello<br />world</h1>'\n>>>\nexec 的安全问题\n由于我们的模板引擎是使用 exec 函数来执行生成的代码的，所有就需要注意一下 exec 函数的安全问题，预防可能的服务端模板注入攻击（详见 使用 exec 函数时需要注意的一些安全问题 ）。\n首先要限制的是在模板中使用内置函数和执行时上下文变量( template4b.py ):\nclass Template:\n    ...\n\n    def render(self, context=None):\n        \"\"\"渲染模版\"\"\"\n        namespace = {}\n        namespace.update(self.default_context)\n        namespace.setdefault('__builtins__', {})   # <---\n        if context:\n            namespace.update(context)\n        exec(str(self.code_builder), namespace)\n        result = namespace[self.func_name]()\n        return result\n效果:\n>>> from template4b import Template\n>>> t = Template('{{ open(\"/etc/passwd\").read() }}')\n>>> t.render()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/Users/mg/develop/lsbate/part4/template4b.py\", line 245, in render\n    result = namespace[self.func_name]()\n  File \"<string>\", line 3, in __func_name\nNameError: name 'open' is not defined\n然后就是要限制通过其他方式调用内置函数的行为:\n>>> from template4b import Template\n>>> t = Template('{{ escape.__globals__[\"__builtins__\"][\"open\"](\"/etc/passwd\").read()[0] }}')\n>>> t.render()\n'#'\n>>>\n>>> t = Template(\"{{ [x for x in [].__class__.__base__.__subclasses__() if x.__name__ == '_wrap_close'][0].__init__.__globals__['path'].os.system('date') }}\")\n>>> t.render()\nMon May 30 22:10:46 CST 2016\n'0'\n一种解决办法就是不允许在模板中访问以下划线 _ 开头的属性。 为什么要包括单下划线呢，因为约定单下划线开头的属性是约定的私有属性， 不应该在外部访问这些属性。\n这里我们使用 dis 模块来帮助我们解析生成的代码，然后再找出其中的特殊属性这里我们使用 tokenize 模块来帮助我们解析生成的代码，然后再找出其中的特殊属性。\n    import io\n    import tokenize\n\n\n    class Template:\n        def __init__(self, ..., safe_attribute=True):\n            ...\n            self.safe_attribute = safe_attribute\n\n        def render(self, ...):\n            ...\n            code = str(self.code_builder)\n            if self.safe_attribute:\n                check_unsafe_attributes(code)\n            exec(code, namespace)\n            func = namespace[self.func_name]\n\n    def check_unsafe_attributes(s):\n        g = tokenize.tokenize(io.BytesIO(s.encode('utf-8')).readline)\n        pre_op = ''\n        for toktype, tokval, _, _, _ in g:\n            if toktype == tokenize.NAME and pre_op == '.' and \\\n                    tokval.startswith('_'):\n                attr = tokval\n                msg = \"access to attribute '{0}' is unsafe.\".format(attr)\n                raise AttributeError(msg)\n            elif toktype == tokenize.OP:\n                pre_op = tokval\n效果:\n>>> from template4c import Template\n>>> t = Template(\"{{ [x for x in [].__class__.__base__.__subclasses__() if x.__name__ == '_wrap_close'][0].__init__.__globals__['path'].os.system('date') }}\")\n>>> t.render()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/xxx/lsbate/part4/template4c.py\", line 250, in render\n    check_unsafe_attributes(func)\n  File \"/xxx/lsbate/part4/template4c.py\", line 296, in check_unsafe_attributes\n    raise AttributeError(msg)\nAttributeError: access to attribute '__class__' is unsafe.\n>>>\n>>> t = Template('<h1>{{ title }}</h1>')\n>>> t.render({'title': 'hello<br />world'})\n'<h1>hello&lt;br /&gt;world</h1>'\n这个系列的文章到目前为止就已经全部完成了。\n如果大家感兴趣的话可以尝试使用另外的方式来解析模板内容, 即: 使用词法分析/语法分析的方式来解析模板内容（欢迎分享实现过程）。\nP.S. 整个系列的所有文章地址：\n\n让我们一起来构建一个模板引擎（一）\n让我们一起来构建一个模板引擎（二）\n让我们一起来构建一个模板引擎（三）\n让我们一起来构建一个模板引擎（四）\n\nP.S. 文章中涉及的代码已经放到 GitHub 上了: https://github.com/mozillazg/lsbate\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "3"}