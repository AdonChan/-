{"title": "python 实现快速排序 - 个人文章 ", "index": "python", "content": "Python排序算法之快速排序快速排序（quickSort）快排的思想：首先任意选取一个数据（通常选用数组的第一个数）作为关键数据，然后将所有比它小的数都放到它前面，所有比它大的数都放到它后面，这个过程称为一趟快速排序。\n百度百科给的算法：\n一趟快速排序的算法是：\n1）设置两个变量i、j，排序开始的时候：i=0，j=N-1；\n2）以第一个数组元素作为关键数据，赋值给key，即key=A[0]；\n3）从j开始向前搜索，即由后开始向前搜索(j--)，找到第一个小于key的值A[j]，将A[j]和A[i]互换；\n4）从i开始向后搜索，即由前开始向后搜索(i++)，找到第一个大于key的A[i]，将A[i]和A[j]互换；\n5）重复第3、4步，直到i=j； (3,4步中，没找到符合条件的值，即3中A[j]不小于key,4中A[i]不大于key的时候改变j、i的值，使得j=j-1，i=i+1，直至找到为止。找到符合条件的值，进行交换的时候i， j指针位置不变。另外，i==j这一过程一定正好是i+或j-完成的时候，此时令循环结束）。\n时间复杂度：O(nlgn)\n# QuickSort by Alvin\n\n\ndef QuickSort(myList, start, end):\n    # 判断low是否小于high,如果为false,直接返回\n    if start < end:\n        i, j = start, end\n        # 设置基准数\n        base = myList[i]\n\n        while i < j:\n            # 如果列表后边的数,比基准数大或相等,则前移一位直到有比基准数小的数出现\n            while (i < j) and (myList[j] >= base):\n                j = j - 1\n\n            # 同样的方式比较前半区\n            while (i < j) and (myList[i] <= base):\n                i = i + 1\n\n            myList[i], myList[j] = myList[j], myList[i]\n        # 做完第一轮比较之后,列表被分成了两个半区,并且i=j,需要将这个数设置回base\n        myList[i] = base\n\n        # 递归前后半区\n        QuickSort(myList, start, i - 1)\n        QuickSort(myList, j + 1, end)\n    return myList\n\n\nmyList = [49, 38, 65, 97, 76, 13, 27, 49]\nprint(\"Quick Sort: \")\nQuickSort(myList, 0, len(myList)-1)\nprint(myList)\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}