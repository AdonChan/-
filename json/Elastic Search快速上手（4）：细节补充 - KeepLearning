{"title": "Elastic Search快速上手（4）：细节补充 - KeepLearning ", "index": "django,python,elasticsearch", "content": "模糊搜索\n可以进行模糊搜索：\nGET job/type1/_search\n{\n  \"query\":{\n    \"fuzzy\":{\n      \"title\":{\n        \"value\":\"linx\",\n        \"fuzziness\": 2,\n        \"prefix_length\": 1\n      }\n    }\n  }\n}\n\n在上面的例子中，可模糊查询与linx相似的单词。fuzziness是指“编辑距离”，就是说从一个字符串想要通过增删改变换到另一个字符串，需要操作的最少次数。比如，linux和linxu之间的编辑距离为1，因为交换ux就可以完成变换。prefix_length是说多少位字符认为是前缀。前缀部分必须完全匹配。\n搜索建议\n搜索建议功能，需要配合程序，在向es中存入文档时，就需要通过分词等方式，指定搜索建议字段的内容。\n指定之后，可通过suggest方式，根据用户的当前输入，获取搜索建议：\nGET wechatsearch/passage/_search\n{\n  \"suggest\":{\n    \"my-suggest\":{\n      \"text\":\"ppt\",\n      \"completion\":{\n        \"field\":\"suggest\",\n        \"fuzzy\":{\n          \"fuzziness\":2\n        }\n      }\n    }\n  },\n  \"_source\": \"ptitle\"\n}\n\n上面代码搜索出与ppt关键词相近的搜索建议。其中，fuzziness值为2，因此，像p2p、pdf之类的关键词也会被搜索出来。较小的fuzziness会有更精确的匹配。\n返回结果示例：\n{\n  \"took\": 20,\n  \"timed_out\": false,\n  \"_shards\": {\n    \"total\": 5,\n    \"successful\": 5,\n    \"failed\": 0\n  },\n  \"hits\": {\n    \"total\": 0,\n    \"max_score\": 0,\n    \"hits\": []\n  },\n  \"suggest\": {\n    \"my-suggest\": [\n      {\n        \"text\": \"ppt\",\n        \"offset\": 0,\n        \"length\": 3,\n        \"options\": [\n          {\n            \"text\": \"pdf\",\n            \"_index\": \"wechatsearch\",\n            \"_type\": \"passage\",\n            \"_id\": \"16\",\n            \"_score\": 10,\n            \"_source\": {\n              \"ptitle\": \"Smallpdf：无所不能的PDF在线处理站\"\n            }\n          },\n          {\n            \"text\": \"ppt\",\n            \"_index\": \"wechatsearch\",\n            \"_type\": \"passage\",\n            \"_id\": \"7\",\n            \"_score\": 10,\n            \"_source\": {\n              \"ptitle\": \"这18个技巧都不知道，别说你会做PPT\"\n            }\n          },\n          {\n            \"text\": \"pa\",\n            \"_index\": \"wechatsearch\",\n            \"_type\": \"passage\",\n            \"_id\": \"10\",\n            \"_score\": 5,\n            \"_source\": {\n              \"ptitle\": \"吐血整理了这20个堪称神器的网站，个个都能解你燃眉之急\"\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n\n\n搜索高亮\n可以指定哪些字段搜索高亮，并且指定高亮字符两侧的包裹标签，从而实现查询的返回结果包含html高亮效果。\nGET /megacorp/employee/_search\n{\n    \"query\" : {\n        \"match_phrase\" : {\n            \"about\" : \"rock climbing\"\n        }\n    },\n    \"highlight\": {\n        \"fields\" : {\n            \"about\" : {}\n        }\n    }\n}\n\n注意，高亮的结果在返回时单独存放，并不是将_source数据做了改变。单独有一个highlight部分存放高亮内容：\n{\n   ...\n   \"hits\": {\n      \"total\":      1,\n      \"max_score\":  0.23013961,\n      \"hits\": [\n         {\n            ...\n            \"_score\":         0.23013961,\n            \"_source\": {\n               \"first_name\":  \"John\",\n               \"last_name\":   \"Smith\",\n               \"age\":         25,\n               \"about\":       \"I love to go rock climbing\",\n               \"interests\": [ \"sports\", \"music\" ]\n            },\n            \"highlight\": {\n               \"about\": [\n                  \"I love to go <em>rock</em> <em>climbing</em>\" \n               ]\n            }\n         }\n      ]\n   }\n}\n\n\n\n关于ES的入门使用暂时整理到这里。ES的官方文档是最好的参考资料，介绍很全面。\n\n完成这些文档的同时，做了一个简单的小项目，基于Python（Django）的web搜索界面，采用ES作为搜索引擎。此项目地址：https://github.com/dox1994/We...\n搜索提示：\n搜索结果：\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "5"}