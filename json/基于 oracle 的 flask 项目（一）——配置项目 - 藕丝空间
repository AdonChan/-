{"title": "基于 oracle 的 flask 项目（一）——配置项目 - 藕丝空间 ", "index": "ubuntu,pycharm,oracle,flask,python", "content": "一般印象，flask 项目适合做一些短小精悍的项目，特别是与 sqlite、mysql 等数据库结合很是般配。但是在一些大公司，特别是一些金融行业等国企公司，还是以 oracle 居多，那么，这个小辣椒（flask）就无用武之地了吗？No, No, No... 下面将以 flask_oracle 项目为例，对 flask 的功能进行一个详细的讲解。\n项目描述\n\n实现登录功能，基于 flask-login。\n不同的权限管理，管理员能看到本部门所有人的信息。\n查询功能，日期查询。\n生成报表，不同的查询结果生成不同的报表。\n\n配置项目的开发环境\n配置 flask 虚拟环境\n项目实例系统是 ubuntu 17.04， python是 3.6.3 版本\n$ virtualenv -p /usr/bin/python3 env\n$ source env/bin/activate\n(env)$ pip install flask # 在虚拟环境中安装 flask 及插件\n(env)$ pip install flask-login\n(env)$ pip install flask-script\n(env)$ pip install flask-wtf\n(env)$ pip install flask-sqlalchemy\n(env)$ pip install pyexcel\n(env)$ pip install pyexcel-xls\n(env)$ pip install cx-Oracle\n提示： 其它的插件，如有需要，请自行安装，该处没有安装 flask-migrate 插件，因为在实际项目中，oracle 数据库是共用的，用 flask-migrate 创建及升级数据库会导致很多不必要的麻烦，极端情况会删除在 models.py 中未进行类定义的表，请慎用。\n配置 cx_Oracle\n从https://oracle.github.io/odpi/doc/installation.html#linux下载 oracle 客户端，然后解压后放入自己指定的目录。\nsudo apt-get install libaio1 # ubuntu 中使用该命令安装，如果是 centos， 请使用 yum install libaio\n\nexport LD_LIBRARY_PATH=/home/ousikongjian/software/oracle/instantclient_12_2:$LD_LIBRARY_PATH # 该条命令重启后会不起作用，请使用下面的命令，两条命令二选一即可。\n\nsudo sh -c \"echo /home/ousikongjian/software/oracle/instantclient_12_2 > /etc/ld.so.conf.d/oracle-instantclient.conf\" #  请注意 oracle 客户端的路径问题。\n\nsudo ldconfig\n配置 pycharm 的 deployment 功能\n该方法不在赘述，请参看本人的博客文章——使用 pycharm deployment 功能远程调试代码\n配置 flask 项目\n目录结构\n尽管该项目是一个展示项目，但是为了更贴近实际，还是使用了蓝图的功能。\nflask_oracle\n    |-- app\n        |-- show # 蓝图文件夹\n            |-- __init__.py\n            |-- views.py\n            |-- forms.py\n        |-- templates # 模板文件夹\n            |-- show # 蓝图的模板文件夹\n            |-- ... # 其它蓝图的模板文件夹\n        |-- __init__.py\n    |-- config.py\n    |-- manage.py\n\n\n配置数据库\n　让 flask 连接 Oracle 数据库\n涉及到 config.py 的主要内容如下：\nimport os\nimport hashlib\n\n\nclass Config(object):\n    os.environ['NLS_LANG'] = 'SIMPLIFIED CHINESE_CHINA.UTF8'\n    SQLALCHEMY_POOL_SIZE = 20 #数据库连接池的大小。默认是引擎默认值（通常 是 5 ），此处最重要。\n    SQLALCHEMY_POOL_TIMEOUT = 5 # 指定数据库连接池的超时时间。默认是10s。\n    SQLALCHEMY_POOL_RECYCLE = 3000 # 配置连接池的 recyle 时间。默认是7200s。\n    SECRET_KEY = os.environ.get('SECRET_KEY') or hashlib.new(name='md5', string='ousi keji hawk@#').hexdigest()\n    SQLALCHEMY_TRACK_MODIFICATIONS = True\n    SQLALCHEMY_COMMIT_ON_TEARDOWN = True\n    OUSI_POSTS_PER_PAGE = 100\n\n\n    @staticmethod\n    def init_app(app):\n        pass\n问题描述参见： flask_sqlalchemy 使用 cx_oralce 连接数据超时的问题？\n配置数据库的映射类\n主要涉及到 models.py 的内容如下：\n# -*- coding:utf-8 -*-\n__author__ = '东方鹗'\n__blog__ = u'http://www.os373.cn'\n\n\nfrom . import db\nfrom flask_login import UserMixin, AnonymousUserMixin, current_user\nfrom . import login_manager\n\n\n@login_manager.user_loader\ndef load_user(user_id):\n    return OusiStaff.query.get(int(user_id))\n\n\nclass OusiStaff(UserMixin, db.Model):\n    __tablename__ = 'ousi_staff'\n    sid = db.Column(db.Integer, primary_key=True)\n    department = db.Column(db.String(8))\n    name = db.Column(db.String(8))\n    password = db.Column(db.String(8))\n    phone = db.Column(db.String(11))\n    role = db.Column(db.String(8))\n\n    def is_admin(self):\n        return self.role == 'admin'\n\n\nclass AnonymousUser(AnonymousUserMixin):\n    def is_admin(self):\n        return False\n\n\nlogin_manager.anonymous_user = AnonymousUser\n\n\nclass OusiGuest(db.Model):\n    __tablename__ = 'ousi_guest'\n    id = db.Column(db.Integer, primary_key=True)\n    staff_phone = db.Column(db.String(11))\n    name = db.Column(db.String(8))\n    month = db.Column(db.String(8))\n    balance = db.Column(db.Integer)\n在 oracle 中创建相关数据库\n1、 创建表 —— ousi_staff （用户表），并实现 sid 的序列化自增功能，自增的阶梯为 1，因为 sqlalchemy 要求必须得有主键。\n---------------------------create ousi_staff-------------\n\n-- 创建 ousi_staff 表\ncreate table ousi_staff(\n       sid number primary key,  \n       department varchar2(8),\n       name varchar2(8),\n       password varchar2(8),\n       phone varchar2(11),\n       role varchar2(8)\n)\n-- 创建 seq_ousi_staff 序列\ncreate sequence seq_ousi_staff\n-- 创建 tg_ousi_staff 触发器\ncreate or replace trigger tg_ousi_staff before\n  INSERT ON ousi_staff FOR EACH row\nDECLARE integrity_error EXCEPTION;\n  errno  INTEGER;\n  errmsg CHAR(200);\n  dummy  INTEGER;\n  found  BOOLEAN;\nBEGIN\n  --  Column sid uses sequence seq_ousi_staff\n  SELECT seq_ousi_staff.NEXTVAL\n  INTO :new.sid -- 注意 id 的名称\n  FROM dual;\n  --  Errors handling\n\nEXCEPTION\nWHEN integrity_error THEN\n  raise_application_error(errno, errmsg);\nEND;\n2、 创建表 —— ousi_guest （客户表），并实现 id 的序列化自增功能，自增的阶梯为 1，因为 sqlalchemy 要求必须得有主键。\n---------------------------create ousi_guest-------------\n\n-- 创建 ousi_guest 表\ncreate table ousi_guest(\n       id number primary key,  \n       staff_phone varchar2(11),\n       name varchar2(8),\n       month varchar2(8),\n       balance number\n)\n-- 创建 seq_ousi_guest 序列\ncreate sequence seq_ousi_guest\n-- 创建 tg_ousi_guest 触发器\ncreate or replace trigger tg_ousi_guest before\n  INSERT ON ousi_guest FOR EACH row\nDECLARE integrity_error EXCEPTION;\n  errno  INTEGER;\n  errmsg CHAR(200);\n  dummy  INTEGER;\n  found  BOOLEAN;\nBEGIN\n  --  Column id uses sequence seq_ousi_guest\n  SELECT seq_ousi_guest.NEXTVAL\n  INTO :new.id\n  FROM dual;\n  --  Errors handling\n\nEXCEPTION\nWHEN integrity_error THEN\n  raise_application_error(errno, errmsg);\nEND;\n提示：  建立的数据库有坑，对 flask-login 有影响，彩蛋将在以后的章节中揭晓。\n其它配置内容（如模板，试图函数等）不在赘述，请查看 源码01。表中的数据，请参见源码里的 database.xlsx。\n启动项目\n如下图所示，上传本地文件到远程主机。\n\n配置启动项。\n\n启动项目，你将看到如图所示内容。\n\n源码下载\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "0"}