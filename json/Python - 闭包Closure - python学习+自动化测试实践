{"title": "Python - 闭包Closure - python学习+自动化测试实践 ", "index": "闭包,python", "content": "\n恩~ 如期来啦“闭包”~\n\n一、函数作为返回值\n介绍“闭包”之前，先了解一下函数作为返回值的情况。高阶函数除了可以接收函数作为参数外，还可以把函数作为结果值返回。例如之前介绍的装饰器中，就出现了将函数作为返回值。\n二、闭包\n1、产生闭包的条件以及作用\n什么是闭包？当在函数中嵌套另一个函数时，如果内部函数引用了外部函数的变量，则可能产生闭包。所以闭包产生的三个条件（缺一不可）：\n\n1、必须嵌套一个内部函数\n2、内部函数必须引用外部函数的变量\n3、外部函数必须返回内部函数\n\n那为什么要试用闭包，闭包的作用呢？\n\n1、闭包可以根据外部函数的局部变量来得到不同的结果\n2、当闭包执行完成后，仍可以保持当前的运行环境，执行结果依赖于该函数上一次的运行结果\n\n2、闭包举例\n栗子一：求序列之和\n>>> def calc_sum(*args):\n...     ax = 0\n...     for n in args:\n...         ax = ax + n\n...     return ax  # 返回变量\n...\n>>> calc_sum(1,2,3)\n6\n但是，现在如果要求不需要立即取得求和结果，而是在后面的代码中，根据需要再计算，该怎么弄呢？我们可以不返回求和的结果，而返回求和的函数，如下：\n>>>def lazy_sum(*args):\n...    def sum():            # sum()是内部函数，可以利用外部函数的参数\n...        ax = 0\n...        for n in args:    # sum()中使用外部函数的局部变量\n...            ax = ax + n \n...        return ax\n...    return sum            # 形成闭包，此时，*args保存在返回的函数中\n...\n>>>f = lazy_sum(1,3,5,7,9)\n>>>f          # 此时返回的是求和函数\n>>> f()       # 调用函数f()时，才真正计算求和的结果\n25\n注意：\n\n\nlazy_sum()函数的内部执行顺序，执行f时，运行到return sum处，*args保存在返回函数中，返回的是sum()函数。当执行f()时，相当于执行sum()，且包含*args。\n当我们调用lazy_sun()时，每次都会返回一个新的函数，即使传入相同的参数，但是f()调用结果不影响。\n\n我们来验证第二点：\n# 但是调用 f1() 与f2()的调用结果互不影响\n>>> f1 = lazy_sum(1,3,5,7,9)\n>>> f2 = lazy_sum(1,3,5,7,9)\n>>> f1\n<function lazy_sum.<locals>.sum at 0x013DD618>\n>>> f2\n<function lazy_sum.<locals>.sum at 0x02F92DF8>\n>>> f1 == f2\nFalse\n>>> f1() == f2()\nTrue\n>>> f1()\n25\n>>> f2()\n25\n>>> id(f1())\n1627215984\n>>> id(f2())\n1627215984\n说明：f1与f2返回函数的位置不一样，所以f1==f2返回结果为False。但是不影响最后的执行结果，f1()与f2()的执行结果均为25，且用id()进行查看，指向是同一块区域。\n栗子二：\ndef count():\n    fs = []\n    for i in range(1, 4):\n        def f():         # 返回函数f()放在循环里\n            return i*i\n    fs.append(f)\n    return fs\nf1, f2, f3 = count()\n实际执行结果为：f1=9 f2=9 f3=9可能与实际想的（[1,4,9]）有点不一样。因为f()函数放在了for循环里，只有当循环结束后，最后才返回i=3的执行结果9。所以返回函数最好不要引用任何循环变量，或者说后续可能变化的量。那如何来修改呢？\ndef count():\n    def f(j):\n        def g():\n            return j*j      # 形成闭包\n        return g\n    fs = []\n    for i in range(1, 4):\n        fs.append(f(i))      # 一个i值进入后，f(i)立刻被执行，并加入到fs中\n    return fs\n\nf1, f2, f3 = count()  # 返回函数g没有引用j\n最后结果：[1,4,9] 即f1=1 f2=4 f3=9\n\n三、匿名函数lambda\n\n\n定义：匿名函数指一类无需定义标识符函数名的函数或者子程序。Python允许使用lambda关键字创造匿名函数。\n\n语法：lambda 参数:表达式    或者 lambda 形参1,…,形参n : function(形参),入参1,…,入参n\n\n\n注意：1、lambda函数可以接收任意多个参数并且返回单个表达式的值；   2、lambda中不能包含命令，返回的表达式不能超过一个。\n\n优点：1、可以省去定义函数的过程，精简代码；   2、对于一些抽象的、不会重复使用的函数可以用lambda进行定义。\n\n例子：\n>>> list( map( lambda x: x*x ,[1,2,3] ) )\n[1, 4, 9]\n其中lamdba x : x*x 实现的是：def f(x): return x*x 的功能。\n可以把匿名函数赋值给一个变量，再利用变量调用该函数。例如：\n>>> f = lambda x:x*x  \n>>> f(5) # 调用\n>>> g = lambda x,y=2 : x*y\n>>> g(2,4)\n8\n>>> g(2)    # 默认y=2\n4\n可以把匿名函数作为返回值返回，例如：\nreturn lambda x:x*x\n\n❤ thanks for watching, keep on updating...\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}