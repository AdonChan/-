{"title": "python队列Queue - 个人文章 ", "index": "queue,python", "content": "QueueQueue是python标准库中的线程安全的队列（FIFO）实现,提供了一个适用于多线程编程的先进先出的数据结构，即队列，用来在生产者和消费者线程之间的信息传递\n基本FIFO队列class Queue.Queue(maxsize=0)FIFO即First in First Out,先进先出。Queue提供了一个基本的FIFO容器，使用方法很简单,maxsize是个整数，指明了队列中能存放的数据个数的上限。一旦达到上限，插入会导致阻塞，直到队列中的数据被消费掉。如果maxsize小于或者等于0，队列大小没有限制。举个栗子：\nimport Queue\n\nq = Queue.Queue()\n\nfor i in range(5):\n    q.put(i)\n\nwhile not q.empty():\n    print q.get()\n\n输出：01234\nLIFO队列class Queue.LifoQueue(maxsize=0)LIFO即Last in First Out,后进先出。与栈的类似，使用也很简单,maxsize用法同上再举个栗子：\nimport Queue\n\nq = Queue.LifoQueue()\n\nfor i in range(5):\n    q.put(i)\n\nwhile not q.empty():\n    print q.get()\n\n输出：43210可以看到仅仅是将Queue.Quenu类替换为Queue.LifiQueue类\n优先级队列class Queue.PriorityQueue(maxsize=0)构造一个优先队列。maxsize用法同上。\nimport Queue\nimport threading\n\nclass Job(object):\n    def __init__(self, priority, description):\n        self.priority = priority\n        self.description = description\n        print 'Job:',description\n        return\n    def __cmp__(self, other):\n        return cmp(self.priority, other.priority)\n\nq = Queue.PriorityQueue()\n\nq.put(Job(3, 'level 3 job'))\nq.put(Job(10, 'level 10 job'))\nq.put(Job(1, 'level 1 job'))\n\ndef process_job(q):\n    while True:\n        next_job = q.get()\n        print 'for:', next_job.description\n        q.task_done()\n\nworkers = [threading.Thread(target=process_job, args=(q,)),\n        threading.Thread(target=process_job, args=(q,))\n        ]\n\nfor w in workers:\n    w.setDaemon(True)\n    w.start()\n\nq.join()\n\n结果Job: level 3 jobJob: level 10 jobJob: level 1 jobfor: level 1 jobfor: level 3 jobfor: job: level 10 job\n一些常用方法\ntask_done()意味着之前入队的一个任务已经完成。由队列的消费者线程调用。每一个get()调用得到一个任务，接下来的task_done()调用告诉队列该任务已经处理完毕。如果当前一个join()正在阻塞，它将在队列中的所有任务都处理完时恢复执行（即每一个由put()调用入队的任务都有一个对应的task_done()调用）。\njoin()阻塞调用线程，直到队列中的所有任务被处理掉。只要有数据被加入队列，未完成的任务数就会增加。当消费者线程调用task_done()（意味着有消费者取得任务并完成任务），未完成的任务数就会减少。当未完成的任务数降到0，join()解除阻塞。\nput(item[, block[, timeout]])将item放入队列中。\n\n如果可选的参数block为True且timeout为空对象（默认的情况，阻塞调用，无超时）。\n如果timeout是个正整数，阻塞调用进程最多timeout秒，如果一直无空空间可用，抛出Full异常（带超时的阻塞调用）。\n如果block为False，如果有空闲空间可用将数据放入队列，否则立即抛出Full异常\n\n其非阻塞版本为put_nowait等同于put(item, False)\nget([block[, timeout]])从队列中移除并返回一个数据。block跟timeout参数同put方法其非阻塞方法为｀get_nowait()｀相当与get(False)\nempty()如果队列为空，返回True,反之返回False\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}