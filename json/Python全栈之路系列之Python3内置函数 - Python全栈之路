{"title": "Python全栈之路系列之Python3内置函数 - Python全栈之路 ", "index": "函数,python", "content": "The Python interpreter has a number of functions and types built into it that are always available. They are listed here in alphabetical order.\n\nBuilt-in Functions\n\n\nabs()\ndict()\nhelp()\nmin()\nsetattr()\nall()\ndir()\n\n\nhex()\nnext()\nslice()\nany()\ndivmod()\nid()\nobject()\n\n\nsorted()\nascii()\nenumerate()\ninput()\noct()\nstaticmethod()\nbin()\n\n\neval()\nint()\nopen()\nstr()\nbool()\nexec()\nisinstance()\n\n\nord()\nsum()\nbytearray()\nfilter()\nissubclass()\npow()\nsuper()\n\n\nbytes()\nfloat()\niter()\nprint()\ntuple()\ncallable()\nformat()\n\n\nlen()\nproperty()\ntype()\nchr()\nfrozenset()\nlist()\nrange()\n\n\nvars()\nclassmethod()\ngetattr()\nlocals()\nrepr()\nzip()\ncompile()\n\n\nglobals()\nmap()\nreversed()\n__import__()\ncomplex()\nhasattr()\nmax()\n\n\nround()\ndelattr()\nhash()\nmemoryview()\nset()\n\n\n\n官方介绍：https://docs.python.org/3/lib...\n内置函数详解\nabs(x)\n返回数字的绝对值，参数可以是整数或浮点数，如果参数是复数，则返回其大小。\n# 如果参数是复数，则返回其大小。\n >>> abs(-25)\n25\n >>> abs(25)\n25\nall(iterable)\nall()会循环括号内的每一个元素，如果括号内的所有元素都是真的，或者如果iterable为空，则返回True，如果有一个为假的那么就返回False\n>>> all([])\nTrue\n>>> all([1,2,3])\nTrue\n>>> all([1,2,\"\"])\nFalse\n# 如果有一个为假，则都为假\n>>> all([1,2,None])\nFalse\n假的参数有：False、0、None、\"\"、[]、()、{}等，查看一个元素是否为假可以使用bool进行查看。\nany(iterable)\n循环元素，如果有一个元素为真，那么就返回True，否则就返回False\n >>> any([0,1])\nTrue\n >>> any([0])\nFalse\nascii(object)\n在对象的类中寻找__repr__方法，获取返回值\n >>> class Foo:\n ...  def __repr_(self):\n ...     return \"hello\"\n ...\n >>> obj = Foo()\n >>> r = ascii(obj)\n >>> print(r)\n# 返回的是一个可迭代的对象\n<__main__.Foo object at 0x000001FDEE13D320>\nbin(x)\n将整数x转换为二进制字符串，如果x不为Python中int类型，x必须包含方法__index__()并且返回值为integer\n# 返回一个整数的二进制\n >>> bin(999)\n'0b1111100111'\n# 非整型的情况，必须包含__index__()方法切返回值为integer的类型\n >>> class myType:\n ...   def __index__(self):\n ...       return 35\n ...\n >>> myvar = myType()\n >>> bin(myvar)\n'0b100011'\nbool([x])\n查看一个元素的布尔值，非真即假\n >>> bool(0)\nFalse\n >>> bool(1)\nTrue\n >>> bool([1])\nTrue\n >>> bool([10])\nTrue\nbytearray([source [, encoding [, errors]]])\n返回一个byte数组，Bytearray类型是一个可变的序列，并且序列中的元素的取值范围为 [0 ,255]。\nsource参数：\n\n如果source为整数，则返回一个长度为source的初始化数组；\n如果source为字符串，则按照指定的encoding将字符串转换为字节序列；\n如果source为可迭代类型，则元素必须为[0 ,255]中的整数；\n如果source为与buffer接口一致的对象，则此对象也可以被用于初始化bytearray.。\n\n >>> bytearray(3)\nbytearray(b'\\x00\\x00\\x00')\nbytes([source[, encoding[, errors]]])\n >>> bytes(\"asdasd\",encoding=\"utf-8\")\nb'asdasd'\ncallable(object)\n返回一个对象是否可以被执行\n >>> def func():\n ...  return 123\n ...\n >>> callable(func)\nTrue\n >>> func = 123\n >>> callable(func)\nFalse\nchr(i)\n返回一个数字在ASCII编码中对应的字符，取值范围256个\n >>> chr(66)\n'B'\n >>> chr(5)\n'\\x05'\n >>> chr(55)\n'7'\n >>> chr(255)\n'\\xff'\n >>> chr(25)\n'\\x19'\n >>> chr(65)\n'A'\nclassmethod(function)\n返回函数的类方法\ncompile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1)\n把字符串编译成python可执行的代码\n >>> str = \"for i in range(0,10): print(i)\"\n >>> c = compile(str,'','exec')\n >>> exec(c)\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\ncomplex([real[, imag]])\n创建一个值为real + imag * j的复数或者转化一个字符串或数为复数。如果第一个参数为字符串，则不需要指定第二个参数\n >>> complex(1, 2)\n(1+2j)\n# 数字\n >>> complex(1)\n(1+0j)\n# 当做字符串处理\n >>> complex(\"1\")\n(1+0j)\n# 注意：这个地方在“+”号两边不能有空格，也就是不能写成\"1 + 2j\"，应该是\"1+2j\"，否则会报错\n >>> complex(\"1+2j\")\n(1+2j)\ndelattr(object, name)\n删除对象的属性值\n>>> class cls:\n...   @classmethod\n...   def echo(self):\n...     print('CLS')\n... \n>>> cls.echo()\nCLS\n>>> delattr(cls, 'echo')\n>>> cls.echo()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: type object 'cls' has no attribute 'echo'\ndict(**kwarg)\n创建一个数据类型为字典\n >>> dic = dict({\"k1\":\"123\",\"k2\":\"456\"})\n >>> dic\n{'k1': '123', 'k2': '456'}\ndir([object])\n返回一个对象中中的所有方法\n >>> dir(str)\n['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce\\_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']\ndivmod(a, b)\n返回的是a//b（除法取整）以及a对b的余数，返回结果类型为tuple\n >>> divmod(10, 3)\n(3, 1)\nenumerate(iterable, start=0)\n为元素生成下标\n >>> li = [\"a\",\"b\",\"c\"]\n >>> for n,k in enumerate(li):\n ...  print(n,k)\n ...\n0 a\n1 b\n2 c\neval(expression, globals=None, locals=None)\n把一个字符串当作一个表达式去执行\n >>> string = \"1 + 3\"\n >>> string\n'1 + 3'\n >>> eval(string)\n4\nexec(object[, globals[, locals]])\n把字符串当作python代码执行\n >>> exec(\"for n in range(5): print(n)\")\n0\n1\n2\n3\n4\nfilter(function, iterable)\n筛选过滤，循环可迭代的对象，把迭代的对象当作函数的参数，如果符合条件就返回True，否则就返回False\n >>> def func(x):\n ...  if x == 11 or x == 22:\n ...    return True\n ...\n >>> ret = filter(func,[11,22,33,44])\n >>> for n in ret:\n ...  print(n)\n ...\n11\n22\n>>> list(filter((lambda x: x > 0),range(-5,5)))\n[1, 2, 3, 4]\nfloat([x])\n将整数和字符串转换成浮点数\n >>> float(\"124\")\n124.0\n >>> float(\"123.45\")\n123.45\n >>> float(\"-123.34\")\n-123.34\nformat(value[, format_spec])\n字符串格式化\n详键：https://blog.ansheng.me/artic...\nfrozenset([iterable])\nfrozenset是冻结的集合，它是不可变的，存在哈希值，好处是它可以作为字典的key，也可以作为其它集合的元素。缺点是一旦创建便不能更改，没有add，remove方法。\ngetattr(object, name[, default])\n返回对象的命名属性的值，name必须是字符串，如果字符串是对象属性之一的名称，则结果是该属性的值。\nglobals()\n获取或修改当前文件内的全局变量\n>>> a = \"12\"\n>>> bsd = \"54asd\"\n>>> globals()\n{'__doc__': None, 'a': '12', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, 'bsd': '54asd', '__builtins__': <module 'builtins' (built-in)>, 'n': '__doc__', '__name__': '__main__', '__spec__': None, '__package__': None}\nhasattr(object, name)\n参数是一个对象和一个字符串，如果字符串是对象的某个属性的名称，则结果为True，否则为False。\nhash(object)\n返回一个对象的hash值\n >>> a = \"asdadasdwqeq234sdfdf\"\n >>> hash(a)\n5390438057823015497\nhelp([object])\n查看一个类的所有详细方法，或者查看某个方法的使用详细信息\n >>> help(list)\nHelp on class list in module __builtin__:\n\nclass list(object)\n |  list() -> new empty list\n |  list(iterable) -> new list initialized from iterable's items\n |  \n |  Methods defined here:\n |  \n |  __add__(...)\n |      x.__add__(y) <==> x+y\n |  \n |  __contains__(...)\n |      x.__contains__(y) <==> y in x\n |  \n |  __delitem__(...)\n |      x.__delitem__(y) <==> del x[y]\n |  \n |  __delslice__(...)\n |      x.__delslice__(i, j) <==> del x[i:j]\n |      \n |      Use of negative indices is not supported.\n..........\nhex(x)\n获取一个数的十六进制\n >>> hex(13)\n'0xd'\nid(object)\n返回一个对象的内存地址\n >>> a = 123\n >>> id(a)\n1835400816\ninput([prompt])\n交互式输入\n >>> name = input(\"Pless your name: \")\nPless your name: ansheng\n >>> print(name)\nansheng\nint(x, base=10)\n获取一个数的十进制\n >>> int(\"31\")\n31\n也可以作为进制转换\n >>> int(10)\n10\n >>> int('0b11',base=2)\n3\n >>> int('11',base=8)\n9\n >>> int('0xe',base=16)\n14\nisinstance(object, classinfo)\n判断对象是否是这个类创建的\n>>> li = [11,22,33]\n>>> isinstance(li,list)\nTrue\nissubclass(class, classinfo)\n查看一个对象是否为子类\niter(object[, sentinel])\n创建一个可迭代的对象\n >>> obj = iter([11,22,33,44])\n >>> obj\n<list_iterator object at 0x000002477DB25198>\n >>> for n in obj:\n ...  print(n)\n ...\n11\n22\n33\n44\nlen(s)\n查看一个对象的长度\n >>> url=\"ansheng.me\"\n >>> len(url)\n10\nlist([iterable])\n创建一个数据类型为列表\n >>> li = list([11,22,33,44])\n >>> li\n[11, 22, 33, 44]\nlocals()\n返回当前作用域的局部变量，以字典形式输出\n >>> func()\n >>> def func():\n ...  name=\"ansheng\"\n ...  print(locals())\n ...\n >>> func()\n{'name': 'ansheng'}\nmap(function, iterable,  ...)\n对一个序列中的每一个元素都传到函数中执行并返回\n>>> list(map((lambda x : x +10),[1,2,3,4]))\n[11, 12, 13, 14]\nmax(iterable, *[, key, default])\nmax(arg1, arg2, *args[, key])\n取一个对象中的最大值\n >>> li = list([11,22,33,44])\n >>> li = [11,22,33,44]\n >>> max(li)\n44\nmemoryview(obj)\n返回对象obj的内存查看对象\n >>> import struct\n >>> buf = struct.pack(\"i\"*12, *list(range(12)))\n >>> x = memoryview(buf)\n >>> y = x.cast('i', shape=[2,2,3])\n >>> print(y.tolist())\n[[[0, 1, 2], [3, 4, 5]], [[6, 7, 8], [9, 10, 11]]]\nmin(iterable, *[, key, default])\nmin(arg1, arg2, *args[, key])\n取一个对象中的最小值\n >>> li = list([11,22,33,44])\n >>> li = [11,22,33,44]\n >>> min(li)\n11\nnext(iterator[, default])\n每次只拿取可迭代对象的一个元素\n >>> obj = iter([11,22,33,44])\n >>> next(obj)\n11\n >>> next(obj)\n22\n >>> next(obj)\n33\n >>> next(obj)\n44\n >>> next(obj)\n # 如果没有可迭代的元素了就会报错\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nStopIteration\nobject\n返回一个新的无特征对象\noct(x)\n获取一个字符串的八进制\n >>> oct(13)\n'0o15'\nopen(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)\n文件操作的函数，用来做文件操作的\n # 打开一个文件\n- >>> f = open(\"a.txt\",\"r\")\nord(c)\n把一个字母转换为ASCII对对应表中的数字\n >>> ord(\"a\")\n97\n >>> ord(\"t\")\n116\npow(x, y[, z])\n返回一个数的N次方\n >>> pow(2, 10)\n1024\n >>> pow(2, 20)\n1048576\nprint(*objects, sep=' ', end='n', file=sys.stdout, flush=False)\n打印输出\n >>> print(\"hello word\")\nhello word\nproperty(fget=None, fset=None, fdel=None, doc=None)\nrange(start, stop[, step])\n生成一个序列\n >>> range(10)\nrange(0, 10)\n >>> for n in range(5):\n ...  print(n)\n ...\n0\n1\n2\n3\n4\nrepr(object)\n返回一个包含对象的可打印表示的字符串\n>>> repr(111)\n'111'\n>>> repr(111.11)\n'111.11'\nreversed(seq)\n对一个对象的元素进行反转\n >>> li = [1, 2, 3, 4]\n >>> reversed(li)\n<list_reverseiterator object at 0x000002CF0EF6A940>\n >>> for n in reversed(li):\n ...  print(n)\n ...\n4\n3\n2\n1\nround(number[, ndigits])\n四舍五入\n >>> round(3.3)\n3\n >>> round(3.7)\n4\nset([iterable])\n创建一个数据类型为集合\n >>> varss = set([11,222,333])\n >>> type(varss)\n<class 'set'>\nsetattr(object, name, value)\n为某个对象设置一个属性\nslice(start, stop[, step])\n元素的切片操作都是调用的这个方法\nsorted(iterable, key)\n为一个对象的元素进行排序\n代码：\n#!/usr/bin/env python\n# _*_ coding:utf-8 _*_\n\nchar=['赵',\"123\", \"1\", \"25\", \"65\",\"679999999999\", \"a\",\"B\",\"alex\",\"c\" ,\"A\", \"_\", \"ᒲ\",'a钱','孙','李',\"余\", '佘',\"佗\", \"㽙\", \"铱\", \"钲钲㽙㽙㽙\"]\n\nnew_chat = sorted(char)\nprint(new_chat)\nfor i in new_chat:\n    print(bytes(i, encoding='utf-8'))\n输出结果：\nC:\\Python35\\python.exe F:/Python_code/Note/soretd.py\n['1', '123', '25', '65', '679999999999', 'A', 'B', '_', 'a', 'alex', 'a钱', 'c', 'ᒲ', '㽙', '佗', '佘', '余', '孙', '李', '赵', '钲钲㽙㽙㽙', '铱']\nb'1'\nb'123'\nb'25'\nb'65'\nb'679999999999'\nb'A'\nb'B'\nb'_'\nb'a'\nb'alex'\nb'a\\xe9\\x92\\xb1'\nb'c'\nb'\\xe1\\x92\\xb2'\nb'\\xe3\\xbd\\x99'\nb'\\xe4\\xbd\\x97'\nb'\\xe4\\xbd\\x98'\nb'\\xe4\\xbd\\x99'\nb'\\xe5\\xad\\x99'\nb'\\xe6\\x9d\\x8e'\nb'\\xe8\\xb5\\xb5'\nb'\\xe9\\x92\\xb2\\xe9\\x92\\xb2\\xe3\\xbd\\x99\\xe3\\xbd\\x99\\xe3\\xbd\\x99'\nb'\\xe9\\x93\\xb1'\n\nProcess finished with exit code 0\nstaticmethod(function)\n返回函数的静态方法\nstr(object=b'', encoding='utf-8', errors='strict')\n字符串\n >>> a = str(111)\n >>> type(a)\n<class 'str'>\nsum(iterable[, start])\n求和\n >>> sum([11,22,33])\n66\nsuper([type[, object-or-type]])\n执行父类的构造方法\ntuple([iterable])\n创建一个对象，数据类型为元组\n>>> tup = tuple([11,22,33,44])\n>>> type(tup)\n<class 'tuple'>\ntype(object)\n查看一个对象的数据类型\n >>> a = 1\n >>> type(a)\n<class 'int'>\n >>> a = \"str\"\n >>> type(a)\n<class 'str'>\nvars([object])\n查看一个对象里面有多少个变量\nzip(*iterables)\n将两个元素相同的序列转换为字典\n>>> li1 = [\"k1\",\"k2\",\"k3\"]\n>>> li2 = [\"a\",\"b\",\"c\"]\n>>> d = dict(zip(li1,li2))\n>>> d\n{'k1': 'a', 'k2': 'b', 'k3': 'c'}\n__import__(name, globals=None, locals=None, fromlist=(), level=0)\n导入模块，把导入的模块作为一个别名\n生成随机验证码例子\n生成一个六位的随机验证码，且包含数字，数字的位置随机\n# 导入random模块\nimport random\ntemp = \"\"\nfor i in range(6):\n    num = random.randrange(0,4)\n    if num == 3 or num == 1:\n        rad2 = random.randrange(0,10)\n        temp = temp + str(rad2)\n    else:\n        rad1 = random.randrange(65,91)\n        c1 = chr(rad1)\n        temp = temp + c1\nprint(temp)\n输出结果\nC:\\Python35\\python.exe F:/Python_code/sublime/Day06/built_in.py\n72TD11\n\n原文链接\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "7"}