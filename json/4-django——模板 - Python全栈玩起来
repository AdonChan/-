{"title": "4-django——模板 - Python全栈玩起来 ", "index": "python,django", "content": "概述\n\n定义模板\n变量\n要遵守标识符规则语法： {{ var }}\n在模板中使用点语法，按顺序查询：字典查询；属性或者方法查询；数字索引查询\n如果使用的变量不存在，则插入空字符串\n在模板中调用对象的方法，但是不能给函数传参\n\n示例\n<body>\n    <h1>sunck is a good man</h1>\n    <h1>he is {{ age }} years old</h1>\n    <h1>{{ stu.name }}--{{ stu.age }}--{{ stu.grade }}</h1>\n    <h1>*{{ name }}*</h1>\n    <h1>{{ stu.say }}</h1>\n</body>\n标签\n语法：{% tag %}作用： 在输出中创建文本；控制逻辑或循环；加载外部信息到模板中使用\n\nif\n{% if 表达式 %}\n语句\n{% endif %}\n\n{% if 表达式 %}\n语句1\n{% else %}\n语句2\n{% endif %}\n\n{% if 表达式1 %}\n语句1\n{% elif 表达式2 %}\n语句2\n{% elif 表达式3 %}\n语句3\n……\n{% else %}\n语句e\n\n\n<body>\n    <h1>sunck is a handsome man!</h1>\n    {% if age > 18 %}\n    <h1>sunck is a nice man</h1>\n    {% else %}\n    <h1>sunck is a good man</h1>\n    {% endif %}\n</body>\n{% endif %}\nfor\n{% for 变量 in 集合 %}\n语句\n{% endfor %}\n\n{% for 变量 in 集合 %}\n语句1\n{% empty %}\n语句2\n\n# 当没有该集合或者集合为空的时候执行empty标签下的语句2\n<ul>\n    {% for stu in stus %}\n        <li>{{ stu.name }}--{{ stu.age }}</li>\n    {% empty %}\n        <li>没有学生</li>\n    {% endfor %}\n</ul>\n\n{% endfor %}\ncomment\n作用 ： 注释   单行注释({#<h1>sunck is a handsome man!</h1>#})  多行注释\n{% comment %}\n注释内容\n{% endcomment%}\n# 可以注释HTML代码和逻辑控制代码\nifequal/ifnotequal\n作用: 判断是否相等/不相等\n# 如果值1等于值2，则执行语句\n{% ifequal 值1 值2 %}\n语句\n{% endequal %}\n\n# 如果值1不等于值2，则执行语句\n{% ifnotequal 值1 值2 %}\n语句\n{% endequal %}\ninclude\n作用:  加载模板\n格式: {% include '模板目录' %}\n示例: {% include 't1.html' %}\nurl\n作用：用于反向解析\n格式： {% url 'namespace:name' 参数1  参数2 …… %}\ncsrf_token\n作用：用于跨站请求伪造保护\n格式：{% csrf_token %}\nblock、extends\n作用：用于继承\nautoescape\n作用：用于HTML转义\n过滤器\n作用： 在变量被显示之前修改它的显示\n语法： {{ 变量|过滤器 }}\n简单过滤器： lower upper\n<h1>{{ des }}</h1>\n<h1>{{ des|lower }}</h1>\n<h1>{{ des }}</h1>\n过滤器可传参，参数用引号引起来\njoin:  <h1>{{ arr|join:'#' }}</h1>\n如果一个变量没有提供或者值为False或者值为空，则可以使用默认值，否则使用变量的值\ndefault:  <h1>{{ name|default:'sunck' }}</h1>\n根据给定格式对一个date变量格式化显示\ndate : <h1>{{ value|date:'Y-m-d' }}</h1>\n加减乘除\n<h1>{{ age|add:2 }}</h1>\n<h1>{{ age|add:-2 }}</h1>\n{#  widthratio 参数1  参数2  参数3  #}\n{#  参数1/参数2*参数3  #}\n<h1>{% widthratio age 1 2  %}</h1>\n<h1>{% widthratio age 2 1  %}</h1>\n转义： escape；safe\n自定义过滤器\n过滤器就是python的函数，可以注册函数后在模板中当过滤器调用\n# 在应用目录下创建名为templatetags的包\n# 在templatetags目录下创建名为filters.py的文件\n# -*- coding:utf-8 -*-\n\n#导入Library库\nfrom django.template import Library\n\n#创建一个Library对象\nregister = Library()\n\n#定义函数\n#使用装饰器注册成过滤器\n@register.filter\ndef even(value):\n    return value % 2 == 0\n\n@register.filter\ndef sub(value, othre):\n    return value - othre\n# 使用自定义过滤器\n{% load filters %}\n\n{{ 19|sub:9 }}\n{% if 19|even %}\n<h1>********************1</h1>\n{% else %}\n<h1>********************2</h1>\n{% endif %}\n反向解析\n主路由：url(r'^', include(\"myApp.urls\", namespace=\"myApp\")),\n子路由：url(r'^market2/$', views.market, name=\"market\")\n模板 ： <a href=\"{% url 'myApp:market' %}\">点我跳转</a>\n模板继承\n作用： 模板继承可以减少页面内容的冲定义，实现页面内容的重用\nblock标签： 在父模板中预留区域，在子模板中填充\nextends标签： 实现继承，写在模板文件的第一行\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>{% block title %}{% endblock title %}</title>\n\n    {% block link %}{% endblock link %}\n    {% block script %}{% endblock script %}\n</head>\n<body>\n    <header>头</header>\n    <div>\n        {% block main %}\n\n        {% endblock main %}\n    </div>\n    <footer>尾</footer>\n</body>\n</html>\n{% extends 'base.html' %}\n\n{% block title %}child1{% endblock title %}\n\n{% block main %}\n<h1>child1</h1>\n{% endblock main %}\nHTML转义\nDjango默认开启了HTML转义\ndef login(request):\n    if request.method == \"GET\":\n        # infoStr = \"<h1>sunck is a good man</h1>\"\n        infoStr = \"<script>alert('sunck good')</script>\"\n        return render(request, \"login.html\", {\"infoStr\":infoStr})\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>登陆</title>\n</head>\n<body>\n{% autoescape off %}\n    {{ infoStr }}\n    {{ infoStr|safe }}\n    {{ infoStr|escape }}\n{% endautoescape %}\n    <form action=\"/login/\" method=\"post\">\n        账号：<input type=\"text\" name=\"username\" value=\"\"><hr/>\n        密码：<input type=\"password\" name=\"password\" value=\"\"><hr/>\n        <input type=\"submit\" value=\"登陆\">\n    </form>\n</body>\n</html>\nCSRF\n跨站请求伪造保护: 某些恶意网站上包含链接、表单按钮或者JavaScript，它们会利用登陆过的用户信息试图在我们的网站上完成某些操作，这就是跨站攻击\n\n防止CSRF\n# 在settings.py中启用\"'django.middleware.csrf.CsrfViewMiddleware',\"中间件，工程中默认开启\n# 开启保护后不论是自己还是别人都会被屏蔽\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>登陆</title>\n</head>\n<body>\n    <form action=\"http://127.0.0.1:8000/login/\" method=\"post\">\n        {% csrf_token %}\n        账号：<input type=\"text\" name=\"username\" value=\"\"><hr/>\n        密码：<input type=\"password\" name=\"password\" value=\"\"><hr/>\n        <input type=\"submit\" value=\"登陆\">\n    </form>\n</body>\n</html>\n{% csrf_token %}: 给表单页面生成一个隐藏域；写入一个名为csrftoken的cookie；给隐藏域的value设置为名为csrftoken的cookie的值；\n静态文件\n包含工程中的css、js、img、json等文件\n在工程目下创建名为static的目录用以存储静态文件\n配置静态文件路径\n# settings.py\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS=[\n    os.path.join(BASE_DIR, \"static\"),\n]\n{#{% load static from staticfiles %}#}\n{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>主页</title>\n\n{#    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/index.css\">#}\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/index.css' %}\">\n</head>\n<body>\n    <h1>sunck is a good man</h1>\n</body>\n</html>\n5-django——验证码，中间件\n\n                ", "mainLikeNum": ["3 "], "mainBookmarkNum": "1"}