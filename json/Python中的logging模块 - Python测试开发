{"title": "Python中的logging模块 - Python测试开发 ", "index": "python", "content": "最近修改了项目里的logging相关功能，用到了python标准库里的logging模块，在此做一些记录。主要是从官方文档和stackoverflow上查询到的一些内容。\n\n官方文档\n技术博客\n\n基本用法\n下面的代码展示了logging最基本的用法。\n# -*- coding: utf-8 -*-\n\nimport logging\nimport sys\n\n# 获取logger实例，如果参数为空则返回root logger\nlogger = logging.getLogger(\"AppName\")\n\n# 指定logger输出格式\nformatter = logging.Formatter('%(asctime)s %(levelname)-8s: %(message)s')\n\n# 文件日志\nfile_handler = logging.FileHandler(\"test.log\")\nfile_handler.setFormatter(formatter)  # 可以通过setFormatter指定输出格式\n\n# 控制台日志\nconsole_handler = logging.StreamHandler(sys.stdout)\nconsole_handler.formatter = formatter  # 也可以直接给formatter赋值\n\n# 为logger添加的日志处理器\nlogger.addHandler(file_handler)\nlogger.addHandler(console_handler)\n\n# 指定日志的最低输出级别，默认为WARN级别\nlogger.setLevel(logging.INFO)\n\n# 输出不同级别的log\nlogger.debug('this is debug info')\nlogger.info('this is information')\nlogger.warn('this is warning message')\nlogger.error('this is error message')\nlogger.fatal('this is fatal message, it is same as logger.critical')\nlogger.critical('this is critical message')\n\n# 2016-10-08 21:59:19,493 INFO    : this is information\n# 2016-10-08 21:59:19,493 WARNING : this is warning message\n# 2016-10-08 21:59:19,493 ERROR   : this is error message\n# 2016-10-08 21:59:19,493 CRITICAL: this is fatal message, it is same as logger.critical\n# 2016-10-08 21:59:19,493 CRITICAL: this is critical message\n\n# 移除一些日志处理器\nlogger.removeHandler(file_handler)\n除了这些基本用法，还有一些常见的小技巧可以分享一下。\n格式化输出日志\n# 格式化输出\n\nservice_name = \"Booking\"\nlogger.error('%s service is down!' % service_name)  # 使用python自带的字符串格式化，不推荐\nlogger.error('%s service is down!', service_name)  # 使用logger的格式化，推荐\nlogger.error('%s service is %s!', service_name, 'down')  # 多参数格式化\nlogger.error('{} service is {}'.format(service_name, 'down')) # 使用format函数，推荐\n\n# 2016-10-08 21:59:19,493 ERROR   : Booking service is down!\n记录异常信息\n当你使用logging模块记录异常信息时，不需要传入该异常对象，只要你直接调用logger.error() 或者 logger.exception()就可以将当前异常记录下来。\n# 记录异常信息\n\ntry:\n    1 / 0\nexcept:\n    # 等同于error级别，但是会额外记录当前抛出的异常堆栈信息\n    logger.exception('this is an exception message')\n\n# 2016-10-08 21:59:19,493 ERROR   : this is an exception message\n# Traceback (most recent call last):\n#   File \"D:/Git/py_labs/demo/use_logging.py\", line 45, in <module>\n#     1 / 0\n# ZeroDivisionError: integer division or modulo by zero\nlogging配置要点\nGetLogger()方法\n这是最基本的入口，该方法参数可以为空，默认的logger名称是root，如果在同一个程序中一直都使用同名的logger，其实会拿到同一个实例，使用这个技巧就可以跨模块调用同样的logger来记录日志。\n另外你也可以通过日志名称来区分同一程序的不同模块，比如这个例子。\nlogger = logging.getLogger(\"App.UI\")\nlogger = logging.getLogger(\"App.Service\")\nFormatter日志格式\nFormatter对象定义了log信息的结构和内容，构造时需要带两个参数：\n\n一个是格式化的模板fmt，默认会包含最基本的level和 message信息\n一个是格式化的时间样式datefmt，默认为 2003-07-08 16:49:45,896 (%Y-%m-%d %H:%M:%S)\n\nfmt中允许使用的变量可以参考下表。\n\n%(name)s       Logger的名字\n%(levelno)s    数字形式的日志级别\n%(levelname)s  文本形式的日志级别\n%(pathname)s    调用日志输出函数的模块的完整路径名，可能没有\n%(filename)s       调用日志输出函数的模块的文件名\n%(module)s      调用日志输出函数的模块名|\n%(funcName)s   调用日志输出函数的函数名|\n%(lineno)d           调用日志输出函数的语句所在的代码行\n%(created)f         当前时间，用UNIX标准的表示时间的浮点数表示|\n%(relativeCreated)d  输出日志信息时的，自Logger创建以来的毫秒数|\n%(asctime)s     字符串形式的当前时间。默认格式是“2003-07-08 16:49:45,896”。逗号后面的是毫秒\n%(thread)d         线程ID。可能没有\n%(threadName)s     线程名。可能没有\n%(process)d        进程ID。可能没有\n%(message)s        用户输出的消息\n\nSetLevel 日志级别\nLogging有如下级别: DEBUG，INFO，WARNING，ERROR，CRITICAL默认级别是WARNING，logging模块只会输出指定level以上的log。这样的好处, 就是在项目开发时debug用的log，在产品release阶段不用一一注释，只需要调整logger的级别就可以了，很方便。\nHandler 日志处理器\n最常用的是StreamHandler和FileHandler, Handler用于向不同的输出端打log。Logging包含很多handler, 可能用到的有下面几种\n\nStreamHandler instances send error messages to streams (file-like objects).\nFileHandler instances send error messages to disk files.\nRotatingFileHandler instances send error messages to disk files, with support for maximum log file sizes and log file rotation.\nTimedRotatingFileHandler instances send error messages to disk files, rotating the log file at certain timed intervals.\nSocketHandler instances send error messages to TCP/IP sockets.\nDatagramHandler instances send error messages to UDP sockets.\nSMTPHandler instances send error messages to a designated email address.\n\nConfiguration 配置方法\nlogging的配置大致有下面几种方式。\n\n通过代码进行完整配置，参考开头的例子，主要是通过getLogger方法实现。\n通过代码进行简单配置，下面有例子，主要是通过basicConfig方法实现。\n通过配置文件，下面有例子，主要是通过 logging.config.fileConfig(filepath)\n\nlogging.basicConfig\nbasicConfig()提供了非常便捷的方式让你配置logging模块并马上开始使用，可以参考下面的例子。具体可以配置的项目请查阅官方文档。\nimport logging\n\nlogging.basicConfig(filename='example.log',level=logging.DEBUG)\nlogging.debug('This message should go to the log file')\n\nlogging.basicConfig(format='%(levelname)s:%(message)s', level=logging.DEBUG)\nlogging.debug('This message should appear on the console')\n\nlogging.basicConfig(format='%(asctime)s %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p')\nlogging.warning('is when this event was logged.')\n备注： 其实你甚至可以什么都不配置直接使用默认值在控制台中打log，用这样的方式替换print语句对日后项目维护会有很大帮助。\n通过文件配置logging\n如果你希望通过配置文件来管理logging，可以参考这个官方文档。在log4net或者log4j中这是很常见的方式。\n# logging.conf\n[loggers]\nkeys=root\n\n[logger_root]\nlevel=DEBUG\nhandlers=consoleHandler\n#,timedRotateFileHandler,errorTimedRotateFileHandler\n\n#################################################\n[handlers]\nkeys=consoleHandler,timedRotateFileHandler,errorTimedRotateFileHandler\n\n[handler_consoleHandler]\nclass=StreamHandler\nlevel=DEBUG\nformatter=simpleFormatter\nargs=(sys.stdout,)\n\n[handler_timedRotateFileHandler]\nclass=handlers.TimedRotatingFileHandler\nlevel=DEBUG\nformatter=simpleFormatter\nargs=('debug.log', 'H')\n\n[handler_errorTimedRotateFileHandler]\nclass=handlers.TimedRotatingFileHandler\nlevel=WARN\nformatter=simpleFormatter\nargs=('error.log', 'H')\n\n#################################################\n[formatters]\nkeys=simpleFormatter, multiLineFormatter\n\n[formatter_simpleFormatter]\nformat= %(levelname)s %(threadName)s %(asctime)s:   %(message)s\ndatefmt=%H:%M:%S\n\n[formatter_multiLineFormatter]\nformat= ------------------------- %(levelname)s -------------------------\n Time:      %(asctime)s\n Thread:    %(threadName)s\n File:      %(filename)s(line %(lineno)d)\n Message:\n %(message)s\n\ndatefmt=%Y-%m-%d %H:%M:%S\n假设以上的配置文件放在和模块相同的目录，代码中的调用如下。\nimport os\nfilepath = os.path.join(os.path.dirname(__file__), 'logging.conf')\nlogging.config.fileConfig(filepath)\nreturn logging.getLogger()\n日志重复输出的坑\n你有可能会看到你打的日志会重复显示多次，可能的原因有很多，但总结下来无非就一个，日志中使用了重复的handler。\n第一坑\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\nfmt = '%(levelname)s:%(message)s'\nconsole_handler = logging.StreamHandler()\nconsole_handler.setFormatter(logging.Formatter(fmt))\nlogging.getLogger().addHandler(console_handler)\n\nlogging.info('hello!')\n\n# INFO:root:hello!\n# INFO:hello!\n上面这个例子出现了重复日志，因为在第3行调用basicConfig()方法时系统会默认创建一个handler，如果你再添加一个控制台handler时就会出现重复日志。\n第二坑\nimport logging\n\ndef get_logger():\n    fmt = '%(levelname)s:%(message)s'\n    console_handler = logging.StreamHandler()\n    console_handler.setFormatter(logging.Formatter(fmt))\n    logger = logging.getLogger('App')\n    logger.setLevel(logging.INFO)\n    logger.addHandler(console_handler)\n    return logger\n\ndef call_me():\n    logger = get_logger()\n    logger.info('hi')\n\ncall_me()\ncall_me()\n\n# INFO:hi\n# INFO:hi\n# INFO:hi\n在这个例子里hi居然打印了三次，如果再调用一次call_me()呢？我告诉你会打印6次。why? 因为你每次调用get_logger()方法时都会给它加一个新的handler，你是自作自受。正常的做法应该是全局只配置logger一次。\n第三坑\nimport logging\n\ndef get_logger():\n    fmt = '%(levelname)s: %(message)s'\n    console_handler = logging.StreamHandler()\n    console_handler.setFormatter(logging.Formatter(fmt))\n    logger = logging.getLogger('App')\n    logger.setLevel(logging.INFO)\n    logger.addHandler(console_handler)\n    return logger\n\ndef foo():\n    logging.basicConfig(format='[%(name)s]: %(message)s')\n    logging.warn('some module use root logger')\n\ndef main():\n    logger = get_logger()\n    logger.info('App start.')\n    foo()\n    logger.info('App shutdown.')\n\nmain()\n\n# INFO: App start.\n# [root]: some module use root logger\n# INFO: App shutdown.\n# [App]: App shutdown.\n为嘛最后的App shutdown打印了两次？所以在Stackoverflow上很多人都问，我应该怎么样把root logger关掉，root logger太坑爹坑妈了。只要你在程序中使用过root logger，那么默认你打印的所有日志都算它一份。上面的例子没有什么很好的办法，我建议你招到那个没有经过大脑就使用root logger的人，乱棍打死他或者开除他。\n如果你真的想禁用root logger，有两个不是办法的办法：\nlogging.getLogger().handlers = []  # 删除所有的handler\nlogging.getLogger().setLevel(logging.CRITICAL)  # 将它的级别设置到最高\n小结\nPython中的日志模块作为标准库的一部分，功能还是比较完善的。个人觉得上手简单，另外也支持比如过滤，文件锁等高级功能，能满足大多数项目需求。\n不过切记，小心坑。\n\n关于作者：Python技术爱好者，目前从事测试开发相关工作，转载请注明原文出处。\n欢迎关注我的博客 https://betacat.online，你可以到我的公众号中去当吃瓜群众。\n\n\n\n                ", "mainLikeNum": ["3 "], "mainBookmarkNum": "11"}