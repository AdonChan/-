{"title": "Django 博客开发教程 1 - 搭建开发环境 - Django学习小组 ", "index": "web,教程,学习资料,django,python", "content": "本教程使用的开发环境\n本教程写作时开发环境的系统平台为 Windows 10 （64 位），Python 版本为 3.5.2 （64 位），Django 版本为 1.10.6。\n建议尽可能地与教程的开发环境保持一致（尤其是 Python 与 Django 版本），避免不必要的麻烦。推荐的 Python 版本为 Python 3.4 或以上，Django 版本号必须为 Django 1.10.x。\n注意：本教程将尽量保证兼容 Python 2，但不会在 Python 2 环境下做测试。如果你因为某种原因必须使用 Python 2，你可以在 Python 2 环境下尝试运行教程里的代码，应该能够顺利运行。\n安装 Python\nWindows 下安装 Python 非常简单，去 Python 官方网站找到 Python 3 的下载地址，根据你的系统选择 32 位或者 64 位的安装包，下载好后双击安装即可。\n安装完后检测 Python 是否可以正常运行。在命令行输入 python -v ，如果输出了 Python 的版本号，说明 Python 已安装成功。\nC:\\WINDOWS\\system32>python -V\nPython 3.5.2\n如果提示命令未找到，而你又确定已经安装了 Python，多半是因为没有把 Python 添加到环境变量。可搜索如何把 Python 添加到环境变量的相关教程，将安装的Python 添加到环境变量即可。\n使用虚拟环境 Virtualenv\n强烈推荐在 Virtualenv 下进行 Django 的开发。Virtualenv 是一个 Python 工具，使用它可以创建一个独立的 Python 环境。\n为什么要使用 Virtualenv 呢？举个例子，假设你已经在系统中安装了 Python，并且在阅读此教程前你已经进行过一些 Django 的学习，但那时候安装的 Django 还是 1.8 版本。我们教程使用的是最新版的 Django 1.10.6 版本，你可能不愿意删除掉旧版的 Django 1.8，因为那可能导致你以前的项目无法运行。既想让原本项目在 Django 1.8 环境下运行，又想再安装 Django 1.10.6 来开启本教程的项目，怎么办呢？使用 Virtualenv 就能够完美解决这个问题。\nVirtualenv 帮我们从系统的 Python 环境中克隆一个全新的 Python 环境出来，这个环境独立于原来的 Python 环境。我们可以在这个新克隆的环境下安装 Django 1.10.6，并且在这个新环境下运行我们的新项目。\nVirtualenv 的使用非常简单，首先安装 Virtualenv，打开命令行工具，输入 pip install virtualenv 命令即可安装 Virtualenv。\nC:\\WINDOWS\\system32>pip install virtualenv\n安装成功后就可以开始创建虚拟环境，指定一个你喜欢的目录，Virtualenv 会把这个新的虚拟环境装到你指定目录下。例如我把它装到 C:UsersyangxgEnvs 目录下，并将虚拟环境命名为 blogproject_env（也可以取任何你喜欢的名字）。在命令栏运行如下命令：\nC:\\WINDOWS\\system32>virtualenv C:\\Users\\yangxg\\Envs\\blogproject_env\n虚拟环境已经创建好了，我们需要激活这个环境，运行 blogproject_envScripts 目录下的 activate 程序激活它：\nC:\\WINDOWS\\system32>C:\\Users\\yangxg\\Envs\\blogproject_env\\Scripts\\activate\n(blogproject_env) C:\\WINDOWS\\system32>\n注意 Linux 下没有 Scripts 这个目录，取而代之的是 bin/ 目录。且激活命令为：\n$ source blogproject_env/bin/activate\n可以看到命令提示符前面多了 (blogproject_env)，说明我们已经成功激活了虚拟环境，接下来就可以开始安装 Django 了。\n安装 Django\nDjango 的官方文档对 如何安装 Django 给出了详细且明确的指导，不过我们目前用不上这些，只需使用 pip 命令就可以解决问题。\n(blogproject_env) C:\\WINDOWS\\system32>pip install django==1.10.6\n我们用 django==1.10.6 来安装指定的 Django 版本以保证和教程中的一致。如果直接 pip install django 的话有可能安装最新的 Django 发行版本，而不是 Django 1.10.6。\n注意命名提示符前的 (blogproject_env) 以确保你始终处在虚拟环境中，如果不小心退出了虚拟环境，先按上面的步骤重新进入再安装 Django。\n测试一下安装是否成功，先在命令行输入 python 以打开 Python 自带的命令栏，然后输入 import django，如果没有报错就说明 Django 安装成功。通过运行 print(django.get_version()) 打印出 Django 的版本号，确保安装了正确版本的 Django。\n(blogproject_env) C:\\WINDOWS\\system32>python\nPython 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import django\n>>> print(django.get_version())\n1.10.6\n>>>\n建立 Django 工程\n万事已经具备了，让我们来建立 Django 项目工程。 \nDjango 工程（Project）是我们项目代码的容器，例如我们博客项目中所有的代码（包括 Django 为我们自动生成的以及我们自己写的）都包含在这个工程里。其实说通俗一点就是用一个文件夹把一系列 Python 代码文件和 Django 配置文件包裹起来，这个文件夹就可以看做一个 Django 工程。我们不必亲自动手新建这个文件夹和代码文件，Django 的内置命令已经帮我们做了这些事情。例如我把博客工程的代码放在 C:UsersyangxgWorkspace ，工程名我把它叫做 blogproject 。\n首先在命令行进入到 C:UsersyangxgWorkspace 这个目录（如果你还停留在 Python 的命令栏里，先多按几次 Ctrl + c 键跳出来）：\n(blogproject_env) C:\\WINDOWS\\system32>cd C:\\Users\\yangxg\\Workspace\n然后运行如下命令创建工程：\n(blogproject_env) C:\\Users\\yangxg\\Workspace>django-admin startproject blogproject\n再次申明一定要在虚拟环境下运行这些命令，虚拟环境的标志就是命令提示符前有 (blogproject_env) 这样的标记。以后几乎所有和 Django 有关的命令都是在虚拟环境下运行，因此在运行前一定确保先开启了虚拟环境。\n进入工程所在目录 C:UsersyangxgWorkspace（你可能设置在其它路径），会发现多了一个 blogproject 的目录，其内部的文件结构如下：\nblogproject\\\n    manage.py\n    blogproject\\\n        __init__.py\n        settings.py\n        urls.py\n        wsgi.py\n最顶层的 blogproject 目录是我们刚刚指定的工程目录。blogproject 目录下面有一个 manage.py 文件，manage 是管理的意思，顾名思义 manage.py 就是 Django 为我们生成的管理这个项目的 Python 脚本文件，以后用到时会再次介绍。与 manage.py 同级的还有一个 blogproject 的目录，这里面存放了一些 Django 的配置文件，例如 settings.py、urls.py 等等，以后用到时会详细介绍。\nHello Django\n网站需要运行在一个 Web 服务器上，Django 已经为我们提供了一个用于本地开发的 Web 服务器。在命令行工具里进入到 manage.py 所在目录，即最外层的 blogproject 目录下。运行 python manage.py runserver 命令就可以在本机上开启一个 Web 服务器：\n(blogproject_env) C:\\Users\\yangxg\\Workspace>cd C:\\Users\\yangxg\\Workspace\\blogproject\n\n(blogproject_env) C:\\Users\\yangxg\\Workspace\\blogproject>python manage.py runserver\nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\n\nYou have 13 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.\nRun 'python manage.py migrate' to apply them.\nDecember 21, 2016 - 20:23:07\nDjango version 1.10.4, using settings 'blogproject.settings'\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CTRL-BREAK.\n看到这样的信息表明我们的服务器开启成功。\n在浏览器输入 http://127.0.0.1:8000/ ，看到如下的页面提示信息：\n\nIt worked!  Django 工作了！\n注意：如果在浏览器输入 http://127.0.0.1:8000/ 后显示无法访问该网站，请检查是不是浏览器代理的问题。比如开启了某些 VPN 代理服务等，将它们全部关闭即可。\n这是 manage.py 的第一个用法，运行它的 runserver 命令开启本地开发服务器，以后我们还会遇到更多的命令。\n命令栏工具下按 Ctrl + c 可以退出开发服务器（按一次没用的话连续多按几次）。重新开启则再次运行 python manage.py runserver 。\nDjango 默认的语言是英语，所以显示给我们的欢迎页面是英文的。我们在 Django 的配置文件里稍作修改，让它支持中文。用任何一个文本编辑器打开 settings.py 文件，找到如下的两行代码：\nblogproject/blogproject/settings.py\n\n## 其它配置代码...\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\n\n## 其它配置代码...\n把 LANGUAGE_CODE 的值改为 zh-hans，TIME_ZONE 的值改为 Asia/Shanghai：\nblogproject/blogproject/settings.py\n\n## 其它配置代码...\n\n# 把英文改为中文\nLANGUAGE_CODE = 'zh-hans'\n\n# 把国际时区改为中国时区\nTIME_ZONE = 'Asia/Shanghai'\n\n## 其它配置代码...\n保存更改后关闭 settings.py 文件。\n再次运行开发服务器，并在浏览器打开 http://127.0.0.1:8000/，可以看到 Django 已经支持中文了。\n\n一切准备就绪，开始进入我们的 Django 博客开发之旅吧！\n总结\n本章节的代码位于：Step1: build development environment。\n如果遇到问题，请通过下面的方式寻求帮助。\n\n在 搭建开发环境 - 追梦人物的博客 的评论区留言。\n将问题的详细描述通过邮件发送到 djangostudyteam@163.com，一般会在 24 小时内回复。\n\n更多Django 教程，请访问 追梦人物的博客。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "7"}