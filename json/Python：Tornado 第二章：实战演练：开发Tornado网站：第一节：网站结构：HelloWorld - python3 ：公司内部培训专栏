{"title": "Python：Tornado 第二章：实战演练：开发Tornado网站：第一节：网站结构：HelloWorld - python3 ：公司内部培训专栏 ", "index": "python", "content": "上一篇文章：Python：Tornado 第一章：异步及协程基础：第三节：协程下一篇文章：Python：Tornado 第二章：实战演练：开发Tornado网站：第二节：网站结构：路由解析\n\n实例：HelloWorld\nimport tornado.ioloop\nimport tornado.web\n\nclass MainHandler(tornado.web.RequestHandler):\n    def get(self):\n        self.write(\"Hello World\")\n\ndef make_app():\n    return tornado.web.Application([\n        (r\"/\",MainHandler),\n\n    ])\n\ndef main():\n    app=make_app()\n    app.listen(8888)\n    tornado.ioloop.IOLoop.current().start()\n\nif __name__==\"__main__\":\n    main()\n浏览器输入链接：http://localhost:8888\n页面显示：\nHello World\n下面逐行解析上面的代码做了些什么：\n\n首先通过import语句引入tornado包中的ioloop和web类。这两个类是Tornado程序的基础。\n实现一个web.RequestHandler子类，重载其中的get()函数，该函数负责相应定位到该RequestHandler的HTTP GET请求的处理。本实例通过self.write()函数输出『Hello world』。\n定义了make_app()函数，该函数返回一个web.Application对象。该对象的第一个餐食用于定义Tornado程序的路由映射。本例将对跟URL的访问映射到了RequestHandler子类MainHandler中。\n用web.Application.listen()函数指定服务器监听的端口。\n用tornado.ioloop.IOLoop.current().start()启动IOLoop，该函数将一直运行且不退出，用于处理所有客户端的请求。\n\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "1"}