{"title": "flask入门5-model - Python全栈玩起来 ", "index": "python,flask", "content": "Flask-SQLalchemy  flask的ORM模型\n使用ORM模型的原因\n当项目越来越大的时候 会出现很多问题\n\n原生SQL较多   重复使用率低\n如果你的数据库发生了改变  所有的原生SQL就都要进行修改\n写原生SQL的时候  会有安全隐患\n\nORM：中文件关系对象的映射  使用ORM去操作数据库的时候 不会再去写原生的SQL了 通过把表映射成 类  字段为你的属性  ORM在执行的时候 也会最终转换为 SQL语句 去操作数据库\n\n易用性   使用ORM可以减少重复SQL的概率  写出来的模型也更加的直观清晰\n可移植性   ORM支持很多不同的数据库\n\n安装：\nsudo pip3 install flask-sqlalchemy\n一、执行原生SQL\n(1) 创建数据库\ncreate database if not exists 库名 character set utf8;\n(2) 安装pymysql\nsudo pip3 install pymysql\n(3) 配置数据库\nDB_URI = 'mysql+pymysql://用户名:密码@主机:端口号/库名'\n实例\nfrom sqlalchemy import create_engine\n\nDATABASE = 'hz03'\nUSERNAME = 'root'\nPASSWORD = '123456'\nHOST = '127.0.0.1'\nPORT = '3306'\n#创建连接和操作数据库的URI\nDB_URI = 'mysql+pymysql://{}:{}@{}:{}/{}'.format(USERNAME,PASSWORD,HOST,PORT,DATABASE)\n\n#创建操作数据库的引擎\nengine = create_engine(DB_URI)\n\nwith engine.connect() as con:\n    # con.execute('create table user(id int,username varchar(255),sex tinyint)')\n    con.execute('insert into user values(1,\"xxx\",1)')\n二、在flask中使用ORM\n(1) 当前字段类型\n\n\n类型名\n说明\n\n\n\ninteger\n整形\n\n\nSmallInteger\n小整形\n\n\nBigInteger\n长整型\n\n\nFloat\n浮点型\n\n\nString\nvarchar类型\n\n\nText\n长文本\n\n\nBoolean\ntingint\n\n\nDate\n日期   datetime.date\n\n\nTime\n时间   datetime.time\n\n\nDateTime\n时间和日期  datetime.datetim\n\n\n\n(2) 约束条件\n\n\n选项\n选项说明\n\n\n\nprimary_key\n主键 默认 False\n\n\nindex\n常规  默认 False\n\n\nUnique\n唯一 默认 False\n\n\nnullable\n是否为null 默认True\n\n\ndefault\n默认值\n\n\n\n注意：\n其中的default默认值 并不是更改表结构的默认值 而是在插入数据的时候 如果不插入数据 则插入默认值\n实例\n配置\nfrom flask import Flask,render_template\nfrom flask_script import Manager\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\n#创建连接数据的URI\napp.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://root:123456@127.0.0.1:3306/hz03'\n\napp.config['SQLALCHEMY_COMMIT_ON_TEARDOWN'] = True #开启自动提交\n#数据的追踪 当数据发生改变时 会返回信号量 进行关闭 \napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\nmanager = Manager(app)\n\n创建模型\nclass User(db.Model):\n    id = db.Column(db.Integer,primary_key=True)\n    username = db.Column(db.String(20),index=True)\n    age = db.Column(db.Integer)\n    icon = db.Column(db.String(40),default='default.jpg')\n数据的添加修改删除\n@app.route('/create_table/')\ndef create_table():\n    db.drop_all() #删除 和当前模型类同名的表\n    db.create_all() #创建当前模型类的表\n    return '创建表'\n\n\n@app.route('/insert/')\ndef insert():\n    try:\n        u = User(username='张三',age=18)\n        # print(u)\n        db.session.add(u)\n        db.session.commit() #因为sqlalchemy开启事物 所有所以需要提交或者回滚\n    except:\n        db.session.rollback()\n    return '添加数据'\n#开启了自动提交功能 不需要手动commit了\n@app.route('/insert_two/')\ndef insert_two():\n    u = User(username='李四',age=20)\n    db.session.add(u)\n    return '走我了'\n#修改\n@app.route('/update/')\ndef update():\n    u = User.query.get(1)\n    # print(u.id)\n    # print(u.username)\n    u.username = '王五'\n    db.session.add(u)\n    return 'update'\n\n#删除\n@app.route('/delete/')\ndef delete():\n    u = User.query.get(2) #查询成功返回 对象 失败返回None\n    # print(u)\n    db.session.delete(u)\n    return '删除'\n拆分MVT\n目录结构\nproject/\n    App/\n        __init__.py  包文件必须的\n        model.py    模块\n        views.py    视图\n    ext.py  extensions.py  加载第三方扩展的文件\n    settings.py    配置文件\n    static/\n    templates/\n    manage.py 启动项\n细致的\nproject/\n    App/\n        __init__.py\n        static/\n            js/\n            img/\n            upload/\n            css/\n        templates/\n            common/\n            ...\n        forms/\n            __init__.py\n            ...\n        models/\n            __init__.py\n        views/\n            __init.py__.py\n            ...\n        settings.py\n        email.py\n        extensions.py\n    manager.py\n    migrations/\n    venv/\n三、数据的操作\n创建模型类\nclass User(Base,db.Model):\n    __tablename__ = 'user' #给表起名\n    id = db.Column(db.Integer,primary_key=True)\n    username = db.Column(db.String(20),index=True)\n    age = db.Column(db.Integer)\n    icon = db.Column(db.String(40),default='default.jpg')\n    def __init__(self,username='',age=0,icon='default.jpg'):\n        self.username = username\n        self.age = age\n        self.icon = icon\n(1) 添加  add    add_all\n添加一条\n@main.route('/add/')\ndef add():\n    u = User(username='张三',age=18)\n    db.session.add(u)\n    db.session.commit()\n    return '数据添加一条成功'\n添加多条\n@main.route('/add_all/')\ndef add_all():\n    u1 = User(username='李四',age=20)\n    u2 = User(username='王五',age=22)\n    db.session.add_all([u1,u2])\n    db.session.commit()\n    return '添加多条'\n(2) 自定义增删改的基础类\nclass Base:\n    #定义一个添加一条数据的方法\n    def save(self):\n        try:\n            db.session.add(self)\n            db.session.commit()\n        except:\n            db.session.rollback()\n\n    #定义添加多条数据的方法\n    @staticmethod\n    def save_all(*args):\n        try:\n            db.session.add_all(args)\n            db.session.commit()\n        except:\n            db.session.rollback()\n\n    #自定义删除方法\n    def delete(self):\n        try:\n            db.session.delete(self)\n            db.session.commit()\n        except:\n            db.session.rollback()\n\n使用\nclass User(Base,db.Model):\n    ...\n在视图中使用\n@main.route('/add/')\ndef add():\n    # u = User(username='张三',age=18)\n    u = User('张三',18)\n    # db.session.add(u)\n    # db.session.commit()\n    u.save() #使用自定义的添加方法\n    return '数据添加一条成功'\n\n@main.route('/add_all/')\ndef add_all():\n    # u1 = User(username='李四',age=20)\n    # u2 = User(username='王五',age=22)\n    u1 = User('赵六',27)\n    u2 = User('李七',12)\n    # db.session.add_all([u1,u2])\n    # db.session.commit()\n    User.save_all(u1,u2)\n    return '添加多条'\n\n@main.route('/delete/')\ndef delete():\n    u = User.query.get(1)\n    u.delete()\n    return '删除'\n四、数据库操作\n查询集\n查询数据的集合\n分类\n\n原始查询集类名.query得到的结果就为原始查询集\n\n数据查询集加上各种的过滤器的方法  最终返回的结果 为数据查询集  都使用数据查询集\n\n\n过滤器\n(1) all  查询所有 以列表形式返回  不支持连贯操作\n类名.query.all()\n@main.route('/all/')\ndef all():\n    data = User.query.all()\n    print(data)\n    return render_template('show.html',data=data)\n(2) filter()  过滤\n类名.query.filter([类名.属性名 条件操作符 值]) \n默认返回所有\n#支持连贯操作\n@main.route('/filter/')\ndef filter():\n    # data = User.query.filter() #返回所有\n    # data = User.query.filter(User.age>20) #查询年龄大于20的数据\n    data = User.query.filter(User.age>20,User.age<40) #查询年龄大于20的数据 and 小于40\n    print(data)\n    return render_template('show.html',data=data)\n(3) filter_by 只支持参数为关键字参数\n类名.query.filter_by(属性名=值...)\n@main.route('/filter_by/')\ndef filter_by():\n    # data = User.query.filter_by(id=2)\n    # data = User.query.filter_by(id>2) #错误写法\n    data = User.query.filter_by(id=2,age=27)\n    return render_template('show.html',data=data)\n(4) offset 偏移量\noffset(num)\n#偏移量取值\n@main.route('/offset/')\ndef offset():\n    data = User.query.filter().offset(2)\n    return render_template('show.html',data=data)\n(5) limit 取值\nlimit(num)\n@main.route('/limit/')\ndef limit():\n    # data = User.query.limit(2)\n    data = User.query.filter(User.age>30).limit(2)\n    return render_template('show.html',data=data)\n(6) offset和limit组合使用\n@main.route('/offsetlimit/')\ndef offsetlimit():\n    data = User.query.offset(2).limit(2)\n    # limit 2,2\n    return render_template('show.html',data=data)\n(7) order_by()  排序\n@main.route('/order_by/')\ndef order_by():\n    # data = User.query.order_by(User.age) #升序\n    data = User.query.order_by(-User.age) #降序\n    return render_template('show.html',data=data)\n(8) first 取出第一条数据 返回对象\n@main.route('/first/')\ndef first():\n    # data = User.query.first() == User.query.get(2)\n    print(data)\n    print(data.id)\n    print(data.username)\n    return '取出第一条数据'\n(9) get 获取id对应的数据\n查询成功返回对象 查询失败 返回None\n@main.route('/first/')\ndef first():\n    data = User.query.get(2)\n    return '取出第一条数据'\n(10)  contains 包含关系\n@main.route('/contains/')\ndef contains():\n    #username中包含数字7的数据\n    data = User.query.filter(User.username.contains('7'))\n    return render_template('show.html',data=data)\n(11) like 模糊查询\n@main.route('/like/')\ndef like():\n    #username中包含数字7的数据\n    # data = User.query.filter(User.username.like('%7%'))\n    # data = User.query.filter(User.username.like('李%')) #以李作为开头的\n    data = User.query.filter(User.username.like('%6')) #以6作为结尾的数据\n    return render_template('show.html',data=data)\n(12) startswith  endswith 以...开头 以...结尾\n#startswith  endswith\n@main.route('/startend/')\ndef startend():\n    # data = User.query.filter(User.username.startswith('李'))\n    data = User.query.filter(User.username.endswith('6'))\n    return render_template('show.html',data=data)\n(13) 比较运算符\n\n__gt__\n__ge__\n__lt__\n__le__\n>\n<\n>=\n<=\n==\n!=\n\n@main.route('/bjiao/')\ndef bjiao():\n    # data = User.query.filter(User.age.__gt__(20))\n    # data = User.query.filter(User.age.__ge__(99))\n    data = User.query.filter(User.age!=99)\n    return render_template('show.html',data=data)\n(14) in 和 not in\n@main.route('/in/')\ndef myIn():\n    # data = User.query.filter(User.age.in_([27,12,1,30,40,50]))\n    data = User.query.filter(~User.age.in_([27,12,1,30,40,50]))\n    return render_template('show.html',data=data)\n(15) is null\n@main.route('/null/')\ndef null():\n    # data = User.query.filter(User.username == None)\n    # data = User.query.filter(User.username != None)\n    # data = User.query.filter(User.username.is_(None))\n    data = User.query.filter(User.username.isnot(None))\n    return render_template('show.html',data=data)\n(16) and_\n多个条件 用逗号隔开，为and操作\nfrom sqlalchemy import and_\n@main.route('/and/')\ndef myAnd():\n    # data = User.query.filter(User.age==27,User.id==2)\n    data = User.query.filter(and_(User.age==27,User.id==2))\n    return render_template('show.html',data=data)\n(17) or_\nfrom sqlalchemy import or_\n@main.route('/and/')\ndef myAnd():\n    data = User.query.filter(or_(User.age==27,User.id==2))\n    data = User.query.filter(and_(User.username.like('%6%')),or_(User.age>=27,User.id==2))\n    return render_template('show.html',data=data)\n\n(18) not_\nfrom sqlalchemy import not_\n@main.route('/and/')\ndef myAnd():    \n    # data = User.query.filter(not_(User.age>27,User.id==1))\\\n    #错误写法只能给一个条件取反\n    data = User.query.filter(not_(User.age>27))\n    return render_template('show.html',data=data)\n(19) count 统计\n    data = User.query.filter(not_(User.age>27)).count()\n四、文件的迁移\n模块：\npip install flask-migrate\npip install flask-script\n使用\n(1) 实例化\nfrom flask_migrate import Migrate,MigrateCommand\nfrom flask_sqlalchemy import SQLalchemy\napp = Flask(__name__)\ndb = SQLalchemy(app)\nmigrate = Migrate(app,db=db)\nmanager = Manager(app)\nmanager.add_command('db',MigrateCommand)\n(2) 初始化 迁移文件目录\npython manage.py db init\n(3) 生成迁移文件\npython manage.py db migrate\n(4) 执行迁移文件\npython manage.py db upgrade\n注意\n如果当前存在 模型 但是执行创建迁移文件的时候 提示没有任何改变的时候  需要查看当前的模型类是否有使用(导入)\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}