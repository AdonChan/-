{"title": "Python复习笔记跳跃版 - 个人文章 ", "index": "python", "content": "1.列表和字符串，以及字典的使用方法和区别Python字符串\n>>> s = 'abcdef'\n>>> s[1:5]\n'bcde'\n\n**str = 'Hello World!'**\n \nprint str           # 输出完整字符串\nprint str[0]        # 输出字符串中的第一个字符\nprint str[2:5]      # 输出字符串中第三个至第五个之间的字符串\nprint str[2:]       # 输出从第三个字符开始的字符串\nprint str * 2       # 输出字符串两次\nprint str + \"TEST\"  # 输出连接的字符串\n\n以上实例输出结果：\nHello World!\nH\nHello World!TEST\n\nPython列表List（列表） 是 Python 中使用最频繁的数据类型。列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（即嵌套）。列表用 [ ] 标识，是 python 最通用的复合数据类型。\n**list = [ 'runoob', 786 , 2.23, 'john', 70.2 ]**\ntinylist = [123, 'john']\n \nprint list               # 输出完整列表\nprint list[0]            # 输出列表的第一个元素\nprint list[1:3]          # 输出第二个至第三个元素 \nprint list[2:]           # 输出从第三个开始至列表末尾的所有元素\nprint tinylist * 2       # 输出列表两次\nprint list + tinylist    # 打印组合的列表\n\n以上实例输出结果：\n['runoob', 786, 2.23, 'john', 70.2]\n\nPython 字典字典(dictionary)是除列表以外python之中最灵活的内置数据结构类型。列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。字典用\"{ }\"标识。字典由索引(key)和它对应的值value组成。\ndict = {}\ndict['one'] = \"This is one\"\ndict[2] = \"This is two\"\n\ntinydict = {'name':'john','code':6743,'dept':'sales'}\n\nprint (dict['one'])          # 输出键为'one' 的值\nprint (dict[2])              # 输出键为 2 的值\nprint (tinydict)             # 输出完整的字典\nprint (tinydict.keys())      # 输出所有键\nprint (tinydict.values())    # 输出所有值\n输出结果为：\nThis is one\nThis is two\n{'dept': 'sales', 'code': 6734, 'name': 'john'}\n['dept', 'code', 'name']\n['sales', 6734, 'john']\n\n2. Python的内置函数\n2.1内置函数set( )set() 函数创建一个无序不重复元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等。set 语法：\nclass set([iterable])\n参数说明：iterable -- 可迭代对象对象；返回值返回新的集合对象。\n>>>x = set('runoob')\n>>> y = set('google')\n>>> x, y\n(set(['b', 'r', 'u', 'o', 'n']), set(['e', 'o', 'g', 'l']))   # 重复的被删除\n>>> x & y         # 交集\nset(['o'])\n>>> x | y         # 并集\nset(['b', 'e', 'g', 'l', 'o', 'n', 'r', 'u'])\n>>> x - y         # 差集\nset(['r', 'b', 'u', 'n'])\n\n2.1内置函数sorted( )sorted() 函数对所有可迭代的对象进行排序操作。sort 与 sorted 区别：sort 是应用在 list 上的方法，sorted 可以对所有可迭代的对象进行排序操作。list 的 sort 方法返回的是对已经存在的列表进行操作，而内建函数 sorted 方法返回的是一个新的 list，而不是在原来的基础上进行的操作。sorted 语法：\nsorted(iterable[, cmp[, key[, reverse]]])\n\n参数说明：iterable -- 可迭代对象。cmp -- 比较的函数，这个具有两个参数，参数的值都是从可迭代对象中取出，此函数必须遵守的规则为，大于则返回1，小于则返回-1，等于则返回0。key -- 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。reverse -- 排序规则，reverse = True 降序 ， reverse = False 升序（默认）。返回值返回重新排序的列表。\n>>>a = [5,7,6,3,4,1,2]\n>>> b = sorted(a)       # 保留原列表\n>>> a \n[5, 7, 6, 3, 4, 1, 2]\n>>> b\n[1, 2, 3, 4, 5, 6, 7]\n\n难点：https://www.runoob.com/python...\n>>> L=[('b',2),('a',1),('c',3),('d',4)]\n>>> sorted(L, cmp=lambda x,y:cmp(x[1],y[1]))   # 利用cmp函数\n[('a', 1), ('b', 2), ('c', 3), ('d', 4)]\n>>> sorted(L, key=lambda x:x[1])               # 利用key\n[('a', 1), ('b', 2), ('c', 3), ('d', 4)]\n\n例二：\nstudents = [('john', 'A', 15), ('jane', 'B', 12), ('dave', 'B', 10)]\nprint(sorted(students, key=lambda s: s[2]))\nprint(type(students))\n[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]\n<class 'list'>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}