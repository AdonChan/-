{"title": "利用线性回归模型进行卫星轨道预报 - 个人文章 ", "index": "python", "content": "数据\n300,21182.88,-7044.56,14639.48\n600,21707.87,-6930.28,13906.68\n900,22207.04,-6828.65,13147.66\n1200,22679.16,-6738.66,12363.84\n1500,23123.06,-6659.23,11556.71\n1800,23537.69,-6589.21,10727.78\n2100,23922.07,-6527.40,9878.61\n2400,24275.33,-6472.54,9010.81\n2700,24596.67,-6423.32,8126.00\n3000,24885.42,-6378.40,7225.86\n3300,25141.01,-6336.41,6312.08\n3600,25362.96,-6295.93,5386.38\n3900,25550.92,-6255.54,4450.51\n问题\n\n解\ndef read_m(path):\n    # 　所有数据\n    m = []\n    # x\n    xlist = []\n    # y\n    ylist = []\n    # z\n    zlist = []\n    # time\n    time_list = []\n\n    with open(path, 'r') as f:\n        for i in f.readlines():\n            aa = i.replace('\\n', '').split(\",\")\n            bb = [eval(a) for a in aa]\n            m.append(bb)\n            time_list.append(bb[0])\n            xlist.append(bb[1])\n            ylist.append(bb[2])\n            zlist.append(bb[3])\n    return {\n        \"alldata\": m,\n        \"time\": time_list,\n        \"x\": xlist,\n        \"y\": ylist,\n        \"z\": zlist,\n    }\n\n\nXXX = None\nYYY = None\n\n\ndef xpj():\n    \"\"\"\n    X平均值\n    :return:\n    \"\"\"\n    sum = 0\n\n    for i in range(XXX.__len__()):\n        sum += XXX[i]\n\n    return sum / XXX.__len__()\n\n\ndef ypj():\n    \"\"\"\n    Y 平均值\n    :return:\n    \"\"\"\n    sum = 0\n\n    for i in range(YYY.__len__()):\n        sum += YYY[i]\n\n    return sum / YYY.__len__()\n\n\ndef sse():\n    \"\"\"\n    回归方程\n    :return:\n    \"\"\"\n    sum = 0\n    xa = xpj()\n    ya = ypj()\n\n    for i in range(XXX.__len__()):\n        sum += (XXX[i] - xa) * (YYY[i] - ya)\n\n    return sum\n\n\ndef ssx():\n    \"\"\"\n    回归方程\n    :return:\n    \"\"\"\n    sum = 0\n    xa = xpj()\n    for i in range(XXX.__len__()):\n        sum += (XXX[i] - xa) * (XXX[i] - xa)\n    return sum\n\n\ndef getbeta1():\n    \"\"\"\n    bate1\n    :return:\n    \"\"\"\n    bbeta = sse() / ssx()\n    return bbeta\n\n\ndef getbeta0():\n    \"\"\"\n    beta0\n    :return:\n    \"\"\"\n    return ypj() - getbeta1() * xpj()\n\n\ndef huiguixishu(x, y):\n    \"\"\"\n    回归系数\n    :param x:\n    :param y:\n    :return:\n    \"\"\"\n    global XXX\n    global YYY\n    XXX = x\n    YYY = y\n\n    beta1 = getbeta1()\n    beta0 = getbeta0()\n    return [beta0, beta1]\n\n\ndef predic(x, beta0, beta1):\n    \"\"\"\n    估计\n    :param x:\n    :param beta0:\n    :param beta1:\n    :return:\n    \"\"\"\n    a = beta0 + beta1 * x\n    return a\n\n\nif __name__ == '__main__':\n    d = read_m(\"轨道文件.txt\")\n    tm = d[\"time\"]\n    x = d[\"x\"]\n    y = d[\"y\"]\n    z = d[\"z\"]\n\n\n    print(\"========回归系数=========\")\n    a = huiguixishu(tm, x)\n    b = huiguixishu(tm, y)\n    c = huiguixishu(tm, z)\n\n    print(a)\n    print(b)\n    print(c)\n\n    print(\"========预测=========\")\n    guji_time = [4200,4500,4800]\n    beta0_list = [a[0],b[0],c[0]]\n    beta1_list = [a[1],b[1],c[1]]\n\n    for i in range(guji_time.__len__()):\n        x = predic(guji_time[i],beta0_list[0],beta1_list[0])\n        y = predic(guji_time[i],beta0_list[1],beta1_list[1])\n        z = predic(guji_time[i],beta0_list[2],beta1_list[2])\n\n        print(guji_time[i],format(x,'0.3f') ,format(y,'0.3f'),format(z,'0.3f'))\n结果\n========回归系数=========\n[21146.959615384614, 1.2183738095238088]\n[-7019.398461538461, 0.21143040293040288]\n[15712.87576923077, -2.8401093406593407]\n========预测=========\n4200 26264.130 -6131.391 3784.417\n4500 26629.642 -6067.962 2932.384\n4800 26995.154 -6004.533 2080.351\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}