{"title": "204. Count Primes - 卢卡斯 ", "index": "leetcode,python", "content": "题目链接：Counting Primes\n思路：首先要知道如何判断一个数字是否为素数。具体方法可以看这里\n其次，如果朴素的判断，那么会因为效率底下而超时。所以在我们每次找到素数的时候，可以把素数的倍数都标记为非素数。这样可以节省轮询的时间。\n算法复杂度：\n时间：O(nloglogn) (time complexity for Sieve of Eratosthenes Algorithm)\n空间：O(n)\n\n代码：\nclass Solution(object):\n    def countPrimes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n < 3:\n            return 0\n        primes = [True] * n\n        primes[0] = primes[1] = False\n        for i in range(2, int(n**0.5)+1):\n            if primes[i]:\n                for j in range(i*i, n, i):\n                    primes[j] = False\n        \n        return sum(primes)\n\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}