{"title": "Python中的正则表达式 - 个人文章 ", "index": "python,正则表达式", "content": "简介\n\n\n正则表达式 是包含文本和特殊字符的字符串, 为高级的文本模式匹配, 抽取, 与文本形式的搜索和替换功能提供了基础\n\nPython通过标准库re模块来支持正则表达式\n\n模式匹配的两种方法完成匹配(模式匹配)\n\n搜索(search())\n匹配(match())\n\n\n\n特殊符号和字符\n元字符指正则表达式中的特殊符号和字符。\n符号\n\n\n符号\n描述\n示例\n\n\n\nliteral\n匹配文本字符串的字面值literal\n\nfoo\n\n\n`re1\\\nre2`\n匹配正则表达式re1和re2\n\n`foo\\\nbar`\n\n\n.\n匹配任何字符(除\\n之外)\nf.o\n\n\n^\n匹配字符串起始部分\n^foo\n\n\n$\n匹配字符串终止部分\nbar$\n\n\n*\n匹配0次或者多次前面出现的正则表达式\n[A-Za-z0-9]*\n\n\n+\n匹配1次或者多次前面出现的正则表达式\n[a-z]+\\\\.com\n\n\n?\n匹配0次或者1次前面出现的正则表达式\ngoo?\n\n\n{N}\n匹配N次前面出现的正则表达式\n[0-9]{3}\n\n\n{M,N}\n匹配M~N次前面出现的正则表达式\n[0-9]{5,9}\n\n\n[…]\n匹配来自字符集的任意单一字符\n[aeiou]\n\n\n[x-y]\n匹配x~y范围中的任意单一字符\n[0-9], [A-Za-z]\n\n\n[^…]\n不匹配此字符集中出现的任何一个字符, 包括某一范围的字符\n[^aeiou], \\[^A-Za-z]\n\n\n`(*\n+\n?\n{})?`\n用于匹配上面频繁出现/重复出现符号的非贪婪版本(*、+、？、{})\n\n.*?[a-z]\n\n\n(…)\n匹配封闭的正则表达式，然后另存为子组\n`([0-9]{3})?,f(oo\nu)bar`\n\n\n\n特殊符号\n\n\n符号\n描述\n示例\n\n\n\n\\d\n匹配任何十进制数字，与[0-9]一致\ndata\\d+.txt\n\n\n\\D\n与\\d相反\n \n\n\n\\w\n匹配任何字母数字字符，与[A-Za-z0-9]相同\n \n\n\n\\W\n与\\w相反\n \n\n\n\\s\n匹配任何空格字符，与[\\n\\t\\r\\v\\f]相同\n \n\n\n\\S\n与\\s相反\n \n\n\n\\N\n匹配已保存的子组 N\nprice:\\1\n\n\n\\c\n逐字匹配任何特殊字符c\n\n\\.,\\\\,\\*\n\n\n\\A\n匹配字符串起始，与^相同\n \n\n\n\\Z\n匹配字符串结束，与$相同\n \n\n\n\n扩展符号\n\n\n符号\n描述\n示例\n\n\n\n (?iLmsux) \n在正则表达式本身中嵌入一个或多个特殊特殊标记 (vs. via function/method)\n(?x),(?im)\n\n\n(?:...)\n匹配一个不用保存的分组\n(?:\\w+\\.)\n\n\n (?P<name>...) \n使用名字表示的正则分组\n(?P<data>)\n\n\n(?#...)\n表示注释，所有内容会被忽略\n(?#comment)\n\n\n(?=...)\n匹配条件是如果...出现在之后的位置，而不使用输入字符串；称作正向前视断言(positive lookahead assertion)\n(?=.com)\n\n\n(?!...)\n匹配条件是如果...不出现在之后的位置，而不使用输入字符串；称作负向前视断言(negative lookahead assertion)\n(?!.net)\n\n\n(?<=...)\n匹配条件是如果...出现在之前的位置，而不使用输入字符串；称作正向后视断言(positive lookbehind assertion)\n(?<=800-)\n\n\n(?<!...)\n匹配条件是如果...不出现在之前的位置，而不使用输入字符串；称作负向后视断言(negative lookbehind assertion)\n(?<!192\\.168\\.)\n\n\n`(?(id/name)Y\nN)`\nConditional match of regex Y if group with given id or name exists else N; \\\nN is optional\n`(?(1)y\nx)`\n\n\n\n使用管道符匹配多个正则表达式\n管道符号在正则表达式中又称为择一匹配符，表示 从多个模式中选择其一 的操作。\n\n\n正则表达式\n匹配的字符串\n\n\n\n`at\nhome`\nat,home\n\n\n`r2d2\nc3po`\nr2d2,c3po\n\n\n`bat\nbet\nbit`\nbat,bet,bit\n\n\n\n匹配任意单个字符\n句点(.)符号匹配除了换行符\\n以外的任何字符。无论字母、数字、空格(不包括\\n换行符)、可打印字符、不可打印字符，使用.都可以匹配。\n\n\n正则表达式\n匹配的字符串\n\n\n\nf.0\n匹配在字母f和o之间的任意一个字符，如:fao,f9o,f#o等\n\n\n..\n任意两个字符\n\n\n.end\n匹配在字符串end之前的任意一个字符\n\n\n\n注意\n要显式匹配一个句点符号本身，必须使用反斜线转义句点符号的功能，例如\\.。\n匹配起始或结尾\n有些符号和相关的特殊字符用于在字符串的起始或结尾部分指定用于搜索的模式。\n\n\n符号\n位置\n\n\n\n\n^ 或 \\A\n\n起始\n\n\n\n$ 或 \\Z\n\n结尾\n\n\n\n简单示例如下。\n\n\n正则表达式\n匹配的字符串\n\n\n\n^Froms\n任何以From作为开头的字符串\n\n\n/bin/bash$\n任何以/bin/bash结尾的字符串\n\n\n^Subject:hi$\n匹配Subject:hi\n\n\n\n\n匹配单词边界\n\n\n符号\n说明\n\n\n\n\\b\n匹配一个单词的边界\n\n\n\\B\n匹配不是一个单词的边界\n\n\n\n简单示例如下。\n\n\n正则表达式\n匹配的字符串\n\n\n\nthe\n任何包含the的字符串\n\n\n\\bthe\n任何以the开始的字符串\n\n\n\\bthe\\b\n仅仅匹配单词the\n\n\n\n\\Bthe\n任何包含但并不以the作为起始的字符串\n\n\n\n创建字符集\n使用[]创建字符集，可以匹配某些特定字符。\n\n\n正则表达式\n匹配的字符串\n\n\n\nb[aeiu]t\nbat,bet,bit,but\n\n\n[cr][23]\nc2,c3,r2,r3\n\n\n\n限定范围和否定\n除了单字符外，字符集还支持匹配指定的字符范围。两个字符中间用连字符-连接，用于指定一个字符的范围。如果^紧跟在左括号后面，这个符号就表示不匹配给定字符集中任何一个字符。\n\n\n正则表达式\n匹配的字符串\n\n\n\nz.[0-9]\n\nz 后面跟着任何一个字符，然后跟着一个数字\n\n\n[r-u][env-y][us]\n等价于[rstu][envwxy][us] ，比如匹配res\n\n\n\n[^aeiou]\n匹配一个非元音字符\n\n\n[^\\t\\n]\n不匹配制表符或换行符\n\n\n\n使用闭包操作符实现存在性和频数匹配\n\n\n符号\n说明\n\n\n\n*\n匹配左侧的正则表达式出现零次或多次的情形，这称作Kleene闭包\n\n\n+\n匹配一次或多次出现的正则表达式，这称作正闭包操作符\n\n\n?\n操作符将匹配零次或者一次出现的正则表达式\n\n\n{}\n里面或者是单值，或者是一对由逗号分隔的数值；{N}表示匹配N次；{N,M}表示匹配N~M次\n\n\n\n如果问号紧跟在任何使用闭包操作符的匹配后面，它将直接要求正则表达式引擎匹配尽可能少的次数。当模式匹配使用分组操作符时，正则表达式引擎将试图吸收匹配该模式的尽可能多的字符，这通常叫做贪婪匹配。问号要求正则表达式引擎在当前正则表达式中尽可能少地匹配字符。\n简单示例。\n\n\n正则表达式\n匹配的字符串\n\n\n\n[dn]ot\ndo,dot,no,not\n\n\n0?[1-9]\n可能存在前置0的数字\n\n\n[0-9]{15,16}\n匹配15或者16个数字\n\n\n</?[^>]+>\n匹配HTML标签\n\n\n\n表示字符集的特殊字符\n有一些特殊字符能够表示字符集。\n\n\n符号\n描述\n\n\n\n\\d\n匹配任何十进制数字，与[0-9]一致\ndata\\d+.txt\n\n\n\\D\n与\\d相反\n \n\n\n\\w\n匹配任何字母数字字符，与[A-Za-z0-9]相同\n \n\n\n\\W\n与\\w相反\n \n\n\n\\s\n匹配任何空格字符，与[\\n\\t\\r\\v\\f]相同\n \n\n\n\\S\n与\\s相反\n \n\n\n\n简单示例。\n\n\n正则表达式\n匹配的字符串\n\n\n\\w+-\\d+\n一个由字母数字组成的字符串和一串由一个连字符分割的数字\n\n\n使用圆括号指定分组\n有时候不仅想要知道整个字符串是否匹配我们的标准，而且想要知道能否提取任何已经成功匹配的特定字符串或者子字符串，可以使用分组来实现。\n一对圆括号可以实现一下任意一个功能：\n\n对正则表达式进行分组\n匹配子组\n\n对正则表达式分组，可以在整个正则表达式中使用重复的操作符。\n使用圆括号进行分组的一个副作用就是，匹配模式的子字符串可以保存起来供后续使用。这些子组能够被同一次的匹配或者搜索重复调用，或者提取出来用于后续处理。\n匹配子组的重要性在于，很多时候除了进行匹配操作以外，我们还想要提取所匹配的模式。\n简单示例如下。\n\n\n正则表达式\n匹配的字符串\n\n\n\\d+(\\.\\d*)?\n表示简单浮点数的字符串\n\n\n扩展表示法\n正则表达式的扩展表示法，以问号开始(?...)。他们通常用于在判断匹配之前提供标记，实现一个前视或者后视匹配，或者条件检查。\n尽管这些符号使用圆括号，但是只有(?P<name>) 表示一个分组匹配，其他的都没有创建一个分组。\n\n\n正则表达式\n匹配的字符串\n\n\n\n(?:\\w+\\.)*\n以句点作为结尾的字符串，例如 google.，但是这些匹配不会保存下来供后续使用和数据检索\n\n\n(?#comment)\n注释\n\n\n(?=.com)\n如果一个字符串和后面跟着 .com 才做匹配操作，并不使用任何目标字符串\n\n\n(?!.net)\n如果一个字符串后面不是跟着.net才做匹配操作\n\n\n(?<=800-)\n如果字符串之前为800-才做匹配\n\n\n(?<!192\\.168\\.)\n如果一个字符串之前不是192.168.才做匹配操作\n\n\n`(?(1)y\nx)`\n如果一个匹配组1(\\1)存在，就与y匹配；否则与x匹配\n\n\n\nPython中的正则表达式\n在Python中，re模块支持更强大而且更通用的Perl风格的正则表达式，该模块允许多个线程共享同一个已编译的正则表达式对象，也支持命名子组。\nre模块\nre模块函数\n\n\n函数\n描述\n\n\ncompile(pattern, flags=0)\n使用任何可选的标记来编译正则表达式的模式，然后返回一个正则表达式对象\n\n\nre模块函数和正则表达式对象的方法\n\n\n函数\n描述\n返回值\n\n\n\nmatch(pattern, string, flags=0)\n使用带有可选标记的正则表达式模式匹配字符串\n匹配成功，返回匹配对象；如果失败，返回None\n\n\nsearch(pattern, string, flags=0)\n使用可选标记搜索字符串中第一次出现的正则表达式模式\n匹配成功，返回匹配对象；如果失败，返回None\n\n\nfindall(pattern, string[, flags])\n查找字符串中所有(非重复)出现的正则表达式模式\n匹配列表\n\n\nfinditer(pattern, string[, flags])\n与findall相同，但返回的不是列表\n一个迭代器\n\n\nsplit(pattern, string,max=0 )\n根据正则表达式的模式分隔符，split函数将字符串分割为列表，然后返回成功匹配的列表，分割最多操作max次，默认分割所有匹配成功的位置\n分割后的列表\n\n\nsub(pattern, repl, string, count=0)\n使用repl替换count次正则表达式的模式在字符串中出现的位置；默认替换所有\n替换操作数目\n\n\npurge()\n清除隐式编译的正则表达式模式；清除缓存\n \n\n\n\n常用的匹配对象方法\n\n\n函数\n描述\n\n\n\ngroup(num=0)\n返回整个匹配对象；或者编号为num的特定子组\n\n\ngroups(default=None)\n返回一个包含所有匹配子组的元组(如果没有成功匹配，则返回一个空元组)\n\n\ngroupdict(default=None)\n返回一个包含所有匹配的命名子组的字典，所有的子组名称作为字典的键(如果没有匹配成功返回一个空元组)\n\n\n\n常用的模块属性\n\n\n属性\n描述\n\n\n\nre.I,re.IGNORECASE\n不区分大小写的匹配\n\n\nre.L,re.LOCALE\n根据所使用的本地语言环境通过\\w,\\W,\\b,\\B,\\s,\\S实现匹配\n\n\nre.M,re.MULTILINE\n\n^和$分别匹配目标字符串中行的起始和结尾，而不是严格匹配整个字符串本身的起始和结尾\n\n\nre.S,re.DOTALL\n\n. 通常匹配除了\\n 之外的所有单个字符，该标记可以使.匹配换行符\n\n\nre.X, re.VERBOSE\n通过反斜线转义，否则所有空格加上#都被忽略\n\n\n\n使用compile函数编译正则表达式\n\n\n在Python中可以通过两种途径使用正则表达式：\n\nre模块函数\n调用编译后的正则表达式对象方法\n\n\n\n在Python中由两类对象和正则表达式有关：\n\n\nre.compile生成的表达式对象\n匹配对象（成功调用 match() 或 search() 之后返回的对象）\n\n\n几乎所有的re模块函数都可以作为regex对象的方法。\n可以通过按位或操作符(|)合并使用多个标记\n\n可以使用(?FLAG)将标记嵌入到正则表达式\n>>> re.match(r'(?i)the', 'the')\n<_sre.SRE_Match object; span=(0, 3), match='the'>\n>>> re.match(r'(?i)the', 'The')\n<_sre.SRE_Match object; span=(0, 3), match='The'>\n>>> re.match(r'the', 'The')\n>>>\n\n\n匹配对象以及group()和groups()方法\n匹配对象是成功调用match()或者search()返回的对象。匹配对象有两个主要的方法: group()和groups()。\ngroup()要么返回整个匹配对象，要么根据要求返回特定子组。groups()则仅返回一个包含唯一或者全部子组的元组。如果没有子组的要求，那么当group()仍返回整个匹配时，groups()返回一个空元组。\nPython正则表达式允许命名匹配。\n使用match方法匹配字符串\nmatch方法试图从字符串的起始部分对模式进行匹配。\n如果匹配成功，就返回一个匹配对象；如果匹配对象失败，就返回None。\n匹配对象的group()方法能够用于显示那个成功的匹配。\nPython 3.5.4rc1 (default, Jul 25 2017, 08:53:34) \n[GCC 6.4.0 20170704] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import re\n>>> m = re.match('foo', 'foo')\n>>> if m is not None:\n...     m.group()\n... \n'foo'\n>>> m\n<_sre.SRE_Match object; span=(0, 3), match='foo'>\n只要模式从字符串的起始部分匹配，即使字符串比模式长，匹配也仍然能够成功。匹配结果是从较长字符串中抽取的匹配部分。\n>>> re.match('foo', 'food on the table').group()\n'foo'\n使用search在字符串中查找模式\nsearch函数在任意位置对给定正则表达式模式搜索第一次出现的匹配情况。如果搜索到成功的匹配，就会返回一个匹配对象；否则，返回None。\n与match相比，match只能从起始开始匹配，search可以匹配任意位置。\n>>> m = re.match('foo', 'seafood')\n>>> m.group() if m is not None else print(m)\nNone\n>>> m = re.search('foo', 'seafood')\n>>> m.group() if m is not None else print(m)\n'foo'\n上面代码，使用match匹配失败，使用search则匹配成功。\n匹配多个字符串\n管道符号或择一匹配符号(|)的使用。\n>>> bt = 'bat|bet|bit'\n>>> m = re.match(bt, 'bat')\n>>> m.group() if m is not None else print(m)\n'bat'\n>>> m = re.match(bt, 'blt')                   # 不能匹配\n>>> m.group() if m is not None else print(m)\nNone\n>>> m = re.match(bt, 'He bit me')          # 不能匹配\n>>> m.group() if m is not None else print(m)\nNone\n>>> m = re.search(bt, 'He bit me')      # 可以搜索到\n>>> m.group() if m is not None else print(m)\n'bit'\n匹配任何单个字符\n点号.不能匹配换行符和空字符串。\n>>> dote = '.end'\n>>> m = re.match(dote, 'bend')  # OK\n>>> m.group() if m is not None else print(m)\n'bend'\n>>> m = re.match(dote, 'end')   # 不能匹配空内容\n>>> m.group() if m is not None else print(m)\nNone\n>>> m = re.match(dote, '\\nend') # 不能匹配换行符\n>>> m.group() if m is not None else print(m)\nNone\n>>> m = re.search(dote, 'The end.')  # 搜索匹配\n>>> m.group() if m is not None else print(m)\n' end'\n使用转义符，匹配点号。\n>>> pi = '3.14'\n>>> pit = '3\\.14'\n>>> m = re.match(pit, '3.14')   # 精确匹配\n>>> m.group() if m is not None else print(m)\n'3.14'\n>>> m = re.match(pi, '3014')    # 点号匹配0\n>>> m.group() if m is not None else print(m)\n'3014'\n>>> m = re.match(pi, '3.14')    # 点号匹配.\n>>> m.group() if m is not None else print(m)\n'3.14'\n创建字符集\n>>> selc = '[cr][23][dp][o2]'\n>>> m = re.match(selc, 'c3po')\n>>> m.group() if m is not None else print(m)\n'c3po'\n>>> m = re.match(selc, 'c3p1')\n>>> m.group() if m is not None else print(m)\nNone\n重复、特殊字符以及分组\n正则表达式中最常见的情况包括：\n\n特殊字符的使用\n正则表达式模式的重复出现\n使用圆括号对匹配模式的各部分进行分组和提取操作\n\n特殊字符与重复出现\n匹配0~1个中间子域名\n>>> import re\n>>> patt = '\\w+@(\\w+\\.)?\\w+\\.com'\n>>> m = re.match(patt, 'nobody@xxx.com')            # 匹配0个中间子域名\n>>> m.group() if m is not None else print(m)\n'nobody@xxx.com'\n>>> m = re.match(patt, 'nobody@xxx.yyy.com')        # 匹配1个中间子域名\n>>> m.group() if m is not None else print(m)\n'nobody@xxx.yyy.com'\n>>> m = re.match(patt, 'nobody@xxx.yyy.zzz.com')    # 不能匹配2个中间子域名\n>>> m.group() if m is not None else print(m)\nNone\n匹配任意多个子域名\n>>> patt = '\\w+@(\\w+\\.)*\\w+\\.com'                    # 将 ? 替换为 *\n>>> m = re.match(patt, 'nobody@xxx.yyy.zzz.com')    # 匹配2个中间子域名\n>>> m.group() if m is not None else print(m)\n'nobody@xxx.yyy.zzz.com'\n分组\n使用圆括号来匹配和保存子组，以便于后续处理。\n使用group()和groups()方法获取分组，其两者区别：\n\n\ngroup()\n\n访问每个独立的子组\n获取完整匹配(不传递参数)\n\n\n\ngroups()\n获取一个包含所有匹配子组的元组\n\n\n>>> m = re.match('(\\w\\w\\w)-(\\d\\d\\d)', 'abc-123')\n>>> m.group()                   # 完整匹配\n'abc-123'\n>>> m.group(1)                  # 子组1\n'abc'\n>>> m.group(2)                  # 子组2\n'123'\n>>> m.groups()                  # 全部子组\n('abc', '123')\n一个完整示例\n>>> m = re.match('ab', 'ab')            # 没有分组\n>>> m.group()                           # 完整匹配\n'ab'\n>>> m = re.match('ab', 'ab')            # 没有分组\n>>> m.group()                           # 完整匹配\n'ab'\n>>> m.groups()                          # 所有子组\n()\n>>>\n>>> m = re.match('(ab)', 'ab')          # 一个子组\n>>> m.group()                           # 完整匹配\n'ab'\n>>> m.group(1)                          # 子组1\n'ab'\n>>> m.groups()                          # 全部子组\n('ab',)\n>>>\n>>> m = re.match('(a)(b)', 'ab')        # 两个子组\n>>> m.group()\n'ab'\n>>> m.group(1)                          # 子组1\n'a'\n>>> m.group(2)                          # 子组2\n'b'\n>>> m.groups()                          # 全部子组\n('a', 'b')\n>>>\n>>> m = re.match('(a(b))', 'ab')        # 两个嵌套子组\n>>> m.group()                           # 完整匹配\n'ab'\n>>> m.group(1)                          # 子组1\n'ab'\n>>> m.group(2)                          # 子组2\n'b'\n>>> m.groups()                          # 全部子组\n('ab', 'b')\n匹配字符串的起始和结尾以及单词边界\n>>> m = re.search('^The', 'The end.')   # 匹配\n>>> m.group() if m is not None else print(m)\n'The'\n>>> m = re.search('^The', 'end. The')   # 不做为开始\n>>> m.group() if m is not None else print(m)\nNone\n>>> m = re.search(r'\\bthe', 'bite the dog')     # 匹配左侧边界\n>>> m.group() if m is not None else print(m)\n'the'\n>>> m = re.search(r'\\bthe', 'bitethe dog')      # 匹配左侧边界\n>>> m.group() if m is not None else print(m)\nNone\n>>> m = re.search(r'\\Bthe', 'bitethe dog')      # 匹配左侧没有边界\n>>> m.group() if m is not None else print(m)\n'the'\n>>> m = re.search(r'\\Bthe\\B', 'bitethe dog')    # 匹配两侧没有边界\n>>> m.group() if m is not None else print(m)\nNone\n>>> m = re.search(r'\\Bthe\\b', 'bitethe dog')    # 匹配左侧没有边界，右侧有边界\n>>> m.group() if m is not None else print(m)\n'the'\n使用findall和finditer查找每一次出现的位置\nfindall()\n\n查询字符串中某个正则表达式模式全部的非重复出现情况\n与match()和search()的区别是，findall()总是返回一个列表\n\nfinditer()与findall()类似，不过返回结果是一个迭代器。\n>>> re.findall('car', 'car')\n['car']\n>>> re.findall('car', 'carry')\n['car']\n>>> re.findall('car', 'carry the barcardi to the car')\n['car', 'car', 'car']\n结合分组使用\n>>> s = 'This and that.'\n>>> re.findall(r'(th\\w+) and (th\\w+)', s, re.I)\n[('This', 'that')]\n>>> list(re.finditer(r'(th\\w+) and (th\\w+)', s, re.I))[0].groups()\n('This', 'that')\n>>> list(re.finditer(r'(th\\w+) and (th\\w+)', s, re.I))[0].group(1)\n'This'\n>>> list(re.finditer(r'(th\\w+) and (th\\w+)', s, re.I))[0].group(2)\n'that'\n单个分组的多重匹配\n\n如果模式中只有一个分组，则匹配结果作为结果集合的单个元素\n如果模式中由多个分组，则匹配结果为元组，作为结果集的单个元素\n\n>>> s = 'this and that'\n>>> re.findall(r'(th\\w+) and (th\\w+)', s, re.I)\n[('this', 'that')]\n>>> re.findall(r'(th\\w+)', s, re.I)\n['this', 'that']\n>>>\n>>>\n>>> s = 'This and that. What, where, when, and who'\n>>> re.findall(r'th\\w+|wh\\w+', s, re.I)\n['This', 'that', 'What', 'where', 'when', 'who']\n>>> re.findall(r'(th\\w+)|(wh\\w+)', s, re.I)\n[('This', ''), ('that', ''), ('', 'What'), ('', 'where'), ('', 'when'), ('', 'who')]\n>>> re.findall(r'(wh\\w+)', s, re.I)\n['What', 'where', 'when', 'who']\n>>>\n>>>\n>>> s = 'This where. That when. There who.'\n>>> re.findall(r'(th\\w+)\\s(wh\\w+)', s, re.I)\n[('This', 'where'), ('That', 'when'), ('There', 'who')]\n使用sub和subn搜索和替换\n有两个函数用于实现搜索和替换功能: sub() 和 subn()。sub()返回一个替换后的字符串；subn()还返回一个表示替换的总数，替换后的字符串和替换总数作为元组返回。\n>>> re.sub('X', 'Mr. Smith', 'attn: X\\n\\nDear X,\\n')\n'attn: Mr. Smith\\n\\nDear Mr. Smith,\\n'\n>>> re.subn('X', 'Mr. Smith', 'attn: X\\n\\nDear X,\\n')\n('attn: Mr. Smith\\n\\nDear Mr. Smith,\\n', 2)\n>>> re.sub('[ae]', 'X', 'abcdef')\n'XbcdXf'\n>>> re.subn('[ae]', 'X', 'abcdef')\n('XbcdXf', 2)\n使用匹配对象的group()方法除了能够取出匹配分组编号外，还可以使用\\N，其中N是在替换字符串中使用的分组编号。\n>>> re.sub(r'(\\d{1,2})/(\\d{1,2})/(\\d{2}|\\d{4})', r'\\2/\\1/\\3', '2/20/1992')\n'20/2/1992'\n>>> re.sub(r'(\\d{1,2})/(\\d{1,2})/(\\d{2}|\\d{4})', r'\\2/\\1/\\3', '2/20/92')\n'20/2/92'\n在限定模式上使用split分隔字符串\nsplit 基于正则表达式的模式分隔字符串。可以通过为max参数设定一个值（非零）来指定最大分割数。\n>>> import re\n>>> DATA = ()\n>>> DATA = (\n...     'Mountain View, CA 94040',\n...     'Sunnyvale, CA',\n...     'Los Altos, 94023',\n...     'Cupertino 95014',\n...     'Palo Alto CA'\n... )\n>>> for datum in DATA:\n...     print(re.split(', |(?= (?:\\d{5}|[A-Z]{2})) ', datum))\n...\n['Mountain View', 'CA', '94040']\n['Sunnyvale', 'CA']\n['Los Altos', '94023']\n['Cupertino', '95014']\n['Palo Alto', 'CA']\n扩展符号\n通过使用(?iLmsux)系列选项，用户可以直接在正则表达式里面指定一个或者多个标记。\nre.I/re.IGNORECASE, re.M/MULTILINE\n>>> re.findall(r'(?i)yes', 'yes? Yes. YES!~')        # 忽略大小写\n['yes', 'Yes', 'YES']\n>>> re.findall(r'(?i)th\\w+', 'The quickest way is through this tunnel.')    # 忽略大小写\n['The', 'through', 'this']\n>>> re.findall(r'(?im)(^th[\\w ]+)', \"\"\"                # 忽略大小写；多行\n... This line is the first,\n... another line,\n... that line, it's the best.\n... \"\"\")\n['This line is the first', 'that line']\nre.S/re.DOTALL\n使用re.S,re.DOTALL标记，使得点号.能够用来表示换行符。\n>>> re.findall(r'th.+', '''\n... The first line\n... the second line\n... the third line\n... ''')\n['the second line', 'the third line']\n>>> re.findall(r'(?s)th.+', '''\n... The first line\n... the second line\n... the third line\n... ''')\n['the second line\\nthe third line\\n']\nre.X/re.VERBOSE\nre.X/re.VERBOSE标记允许用户通过抑制在正则表达式中使用空白符（除了在字符类中或者在反斜线转义中）来创建更易读的正则表达式。\n>>> re.search(r'''(?x)\n...     \\((\\d{3})\\)     # 匹配区号\n...     [ ]             # 匹配空格\n...     (\\d{3})         # 匹配前缀\n...     -               # 横线\n...     (\\d{4})         # 终点数字\n... ''', '(800) 555-1212').groups()\n('800', '555', '1212')\n(?:...)\n通过使用(?:...)符号，可以对部分正则表达式进行分组，但是并不会保存该分组用于后续的检索或应用。\n>>> re.findall(r'http://(?:\\w+\\.)*(\\w+\\.com)',\n...             'http://goole.com http://www.google.com http://code.google.com')\n['goole.com', 'google.com', 'google.com']\n>>> re.search(r'\\((?P<areacode>\\d{3})\\) (?P<prefix>\\d{3})-(?:\\d{4})',\n...             '(800) 555-1212').groupdict()\n{'areacode': '800', 'prefix': '555'}\n结合\\g，使用(?P<name>) 和 (?P=name)符号。\n>>> re.sub(r'\\((?P<areacode>\\d{3})\\) (?P<prefix>\\d{3})-(?:\\d{4})',\n...     '(\\g<areacode>) \\g<prefix>-xxxx', '(800) 555-1212')\n'(800) 555-xxxx'\n检索元组\n\n对于没有命名的元组，使用\\N，其中N为数字\n对于命名的元组，可以使用\\g<name>，也可以使用\\N\n\n\n>>> m = re.search(r'(\\d{4}) (?P<prefix>\\d{4}) (\\d{3})', '0530 8023 123')\n>>> m.group()\n'0530 8023 123'\n>>> m.group(1)\n'0530'\n>>> m.group(2)\n'8023'\n>>> m.group(3)\n'123'\n>>> m.groupdict()\n{'prefix': '8023'}\n>>>\n>>> re.sub(r'(\\d{4}) (\\d{4}) (\\d{3})', r'\\3 \\2 \\1', '0530 8023 123')\n'123 8023 0530'\n>>> re.sub(r'(\\d{4}) (?P<prefix>\\d{4}) (\\d{3})', r'\\3 \\2 \\1 - \\g<prefix>', '0530 8023 123')\n'123 8023 0530 - 8023'\n在一个相同的正则表达式中重用模式。\n>>> re.match(r'(?P<num>\\d{2})(?P=num)', '1212')            # 只能匹配相同的内容\n>>> print(m) if m is None else m.group()\n'1212'\n>>> m = re.match(r'(?P<num>\\d{2})(?P=num)', '1234')        # 不能匹配不同的内容\n>>> print(m) if m is None else m.group()\nNone\n>>> bool(re.match(r'\\((?P<areacode>\\d{3})\\) (?P<prefix>\\d{3})-(?P<number>\\d{4}) (?P=areacode)-(?P=prefix)-(?P=number)',\n...     '(800) 555-1212 800-555-1212'))\nTrue\n>>> bool(re.match(r'''(?x)\n...     # match (800) 555-1212, save areacode, prefix, no.\n...     \\((?P<areacode>\\d{3})\\)[ ](?P<prefix>\\d{3})-(?P<number>\\d{4})\n... \n...     # space\n...     [ ]\n... \n...     # match 800-555-1212\n...     (?P=areacode)-(?P=prefix)-(?P=number)\n... \n...     # space\n...     [ ]\n... \n...     # match 18005551212\n...     1(?P=areacode)(?P=prefix)(?P=number)\n... ''', '(800) 555-1212 800-555-1212 18005551212'))\nTrue\n前视匹配\n可以使用(?=...) 和 (?!...) 符号在目标字符串中实现一个前视匹配，而不必实际使用这些字符串。\n\n\n(?=...) : 正向前视断言\n\n(?!...) : 负向前视断言\n\n>>> re.findall(r'\\w+(?= van Rossum)',    # 正向前视断言\n... '''\n...     Guido van Rossum\n...     Tim Peters\n...     Alex Martelli\n...     Just van Rossum\n...     Raymond Hettinger\n... ''')\n['Guido', 'Just']\n>>> re.findall(r'(?m)^\\s+(?!noreply|postmaster)(\\w+)',    # 负向前视断言\n... '''\n...     sales@phptr.com\n...     postmaster@phptr.com\n...     eng@phptr.com\n...     noreply@phptr.com\n...     admin@phptr.com\n... ''')\n['sales', 'eng', 'admin']\n>>> ['%s@aw.com' % e.group(1) for e in \\\n... re.finditer(r'(?m)^\\s+(?!noreply|postmaster)(\\w+)',\n... '''\n...     sales@phptr.com\n...     postmaster@phptr.com\n...     eng@phptr.com\n...     noreply@phptr.com\n...     admin@phptr.com\n... ''')]\n['sales@aw.com', 'eng@aw.com', 'admin@aw.com']\n条件正则表达式匹配 \n(?(id/name)yes-pattern|no-pattern)\nWill try to match with yes-pattern if the group with given id or name exists, and with no-pattern if it doesn’t. no-pattern is optional and can be omitted. For example, (<)?(\\w+@\\w+(?:\\.\\w+)+)(?(1)>|$) is a poor email matching pattern, which will match with '<user@host.com>' as well as 'user@host.com', but not with '<user@host.com' nor 'user@host.com>'.\n>>> r = r'(<)?(\\w+@\\w+(?:\\.\\w+)+)(?(1)>|$)'\n>>> m = re.match(r, '<user@host.com>')\n>>> print(m) if m is None else m.group()\n'<user@host.com>'\n>>> m = re.match(r, 'user@host.com')\n>>> print(m) if m is None else m.group()\n'user@host.com'\n>>> m = re.match(r, '<user@host.com')\n>>> print(m) if m is None else m.group()\nNone\n>>> m = re.match(r, 'user@host.com>')\n>>> print(m) if m is None else m.group()\n贪婪搜索\n加入由一系列类似如下格式的字符串\nThu Feb 15 17:32:12 2007::szhkai@qq.com::1123242-3-5\n我们所感兴趣的是，数据记录内包含由连字符连接的三个整数的整行数据\n>>> s = '''\nThu Feb 15 17:41:42 2007::szhkai@qq.com::1123242-3\nSun Jul 22 13:32:25 2007::szhkai@qq.com::1123242-5\nThe May 12 17:02:52 2007::szhkai@qq.com::1123242-3-5\nThu Apr 18 12:22:42 2007::szhkai@qq.com::12323-3-5\n'''\n>>> re.findall(r'(?m).+\\d+-\\d+-\\d+', s)\n['\\tThe May 12 17:02:52 2007::szhkai@qq.com::1123242-3-5', '\\tThu Apr 18 12:22:42 2007::szhkai@qq.com::12323-3-5']\n如果我们对\\d+-\\d+-\\d+这一部分感兴趣，可以使用元组提取\n>>> re.findall(r'(?m).+(\\d+-\\d+-\\d+)', s)\n['2-3-5', '3-3-5']\n但是不能提取第一个整数。这是因为正则表达式在实现上是采用贪婪匹配，试图匹配该模式尽可能多的字符。可以使用非贪婪操作符?解决这个问题。可以在*, +, ?后使用?。该操作符要求正则表达式引擎匹配尽可能少的字符。在.+后放置一个?可以获得期望的结果。\n>>> re.findall(r'(?m).+?(\\d+-\\d+-\\d+)', s)\n['1123242-3-5', '12323-3-5']\n注意事项\nASCII码冲突\n如果符号同时使用于ASCII码和正则表达式特殊符号，就会出现问题，如\\b表示ASCII字符的退格符，但是\\b同时也是一个正则表达式的特殊符号，表示匹配一个单词的边界。对于正则表达式编译器而言，若将\\b视为正则表达式特殊字符，需要使用\\进行转义。\n>>> m = re.match('\\bblow', 'blow')      # 退格键; 没有匹配\n>>> print(m) if m is None else m.group()\nNone\n>>> m = re.match('\\\\bblow', 'blow')     # 匹配单词边界\n>>> print(m) if m is None else m.group()\n'blow'\n>>> m = re.match(r'\\bblow', 'blow')     # 使用 raw string\n>>> print(m) if m is None else m.group()\n'blow'\nw和W字母数字字符集同时受re.L/LOCALE和Unicode(re.U/UNICODE)标记影响。\n参考\n\n《Python 核心编程》\nPython文档\n\n说明\nPython版本\n# 对于Python2\nbovenson@ThinkCentre:~$ python2\nPython 2.7.13+ (default, Jul 19 2017, 18:15:03) \n[GCC 6.4.0 20170704] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n# 对于Python3\nbovenson@ThinkCentre:~$ python3\nPython 3.5.4rc1 (default, Jul 25 2017, 08:53:34) \n[GCC 6.4.0 20170704] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}