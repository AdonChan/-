{"title": "leetcode-152-Maximum Product Subarray - 个人文章 ", "index": "python", "content": "Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product.\nExample 1:\nInput: [2,3,-2,4]Output: 6Explanation: [2,3] has the largest product 6.\nExample 2:\nInput: [-2,0,-1]Output: 0Explanation: The result cannot be 2, because [-2,-1] is not a subarray.\n问题本质：\n本质：动态规划问题。 局部最优，全局最优。\n product-乘法问题，存在的情况是 负数或者正数，或者从当前数开始新的连续元素相乘\n 可能发生的情况： 在某个节点，继续之前的增大/减小，从此节点转折。\n 所以只要在局部动态中，保持最大/最小/当前，进行判断保留即可。\n应用：挖掘问题的本质，将问题抽象化，  局部：之前的值和当前值是同乡还是异向的问题，同向则被覆盖，异向则被保留。如此迭代。\nclass Solution:\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        final_max=max_num=min_num=nums[0]\n        for num_cur in nums[1:]:\n            # min_num=min(num_cur*min_num,num_cur)\n            max_num_tmp=max(num_cur*min_num,num_cur*max_num)\n            min_num=min(num_cur*min_num,num_cur*max_num,num_cur)\n            max_num=max(max_num_tmp,num_cur)\n            final_max=max(max_num,final_max)\n        return final_max\nif __name__=='__main__':\n    st=Solution()\n    num=[2,3,-2,-5,4,-5,8]\n    # num=[-2,0,-1]\n    # num=[2,3,-2,4]\n    num=[-1,-2,-9,-6]\n    out=st.maxProduct(num)\n    print(out)\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}