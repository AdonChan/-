{"title": "python实现web服务器 - 赵永祥 ", "index": "nginx,linux,python", "content": "本想写一篇关于http->nginx->php这个过程中数据是怎么传输的文章，想了半天，实在没有心情去写。刚好看了一下python，就想着用python实现一下web服务器的过程。这个很简单，目前只支持静态文件的加载，动态语言就要接入fastcgi了(目前还在看fastcgi，下一版本更新吧)。以前没写过python也是边写边查，好多东西用的不是特别好，还有，可以在这个基础上改动，可以支持access.log，多server配置。这里就不写了。\n其实过程很简单，nginx大体也是这个逻辑（但是，nginx内部就复杂多了）。\n\n创建socket，监听80端口（可以自设）\n解析http协议中的request（获取你想要的参数）\n通过获取的参数取服务器上找到相应的静态资源（这里只说静态资源，动态的下一篇再说）\n组织http协议的response\n通过80端口返回给客服端\n\n#/usr/bin/python\nimport socket\nimport sys\nimport os\nfrom thread import *\n\nHOST = '';PORT = 8887\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nprint 'Socket created'\n\ntry:\n    s.bind((HOST, PORT))\nexcept socket.error , msg:\n    print 'Bind failed. Error Code : ' + str(msg[0]) + ' Message ' + msg[1]\n    sys.exit()\n\nprint 'Socket bind complete'\n\ns.listen(10)\n\nprint 'Socket now listening'\n\ndef assces_log(request):\n    fp = open('http.log', \"aw\")\n    fp.write(request+\"\\r\\n\")\n    fp.close()\n\ndef parse_request(request):\n    request = request.splitlines()\n    line = request[0]\n    line = line.split();\n    dict_request = {'method':line[0], 'path':line[1], 'version':line[2]}\n    return dict_request\n\nwhile True:\n    conn, addr = s.accept()\n    request = conn.recv(1024)\n    print request\n    print \"\\r\\n\"\n\n    dist_request = parse_request(request)\n    path = dist_request['path']\n    path = os.getcwd() + path\n\n    if os.path.isfile(path):\n        if os.path.exists(path):\n            fp = open(path, \"r\")\n            reply = fp.read()\n            fp.close()\n            response_errno = 200\n            response_msg = 'OK'\n        else:\n            reply = 'Not found page'\n            response_errno = 404\n            response_msg = 'Not found'\n    else:\n        reply = 'Forbidden'\n        response_errno = 403\n        response_msg = 'Forbidden'\n\n    response = \"HTTP/1.1 \" + str(response_errno) + \" \" + response_msg + \"\\r\\n\"\n    response += \"\\r\\n\"\n    response += reply\n    print response\n\n    assces_log(request)\n\n    conn.sendall(response)\n    conn.close()\n\ns.close()\n\n\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "9"}