{"title": "使用Python解析nginx日志文件 - _Zhao ", "index": "nginx,python", "content": "项目的一个需求是解析nginx的日志文件。\n简单的整理如下：\n\n\n日志规则描述\n\n首先要明确自己的Nginx的日志格式，这里采用默认Nginx日志格式：\n\n log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                   '$status $body_bytes_sent \"$http_referer\" '\n                   '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n\n其中一条真实记录样例如下：\n\n172.22.8.207 - - [16/Dec/2014:17:57:35 +0800] \"GET /report?DOmjjuS6keWJp+WculSQAgdUkAIPODExMzAwMDJDN0FC HTTP/1.1\" 200 0 \"-\" \"XXXXXXX/1.0.16; iPhone/iOS 8.1.2; ; 8DA77E2F91D0\"\n\n\n其中，客户端型号信息用XXXXXXX代替。\n\n项目中已经按照业务规则对Nginx日志文件进行了处理命名规则如下：\n\nID-ID-YYMMDD-hhmmss\n\n\n并且所有的日志文件存放在统一路径下。\n\n解决思路\n\n\n获取所有日志文件path\n\n\n这里使用Python的glob模块来获取日志文件path\n\nimport glob\n\n\ndef readfile(path):\n    return glob.glob(path + '*-*-*-*')\n\n\n获取日志文件中每一行的内容\n\n使用Python的linecache模块来获取文件行的内容\n\nimport linecache\n\n\ndef readline(path):\n    return linecache.getlines(path)\n\n\n注意：linecache模块使用了缓存，所以存在以下问题：\n\n\n在使用linecache模块读取文件内容以后，如果文件发生了变化，那么需要使用linecache.updatecache(filename)来更新缓存，以获取最新变化。\nlinecache模块使用缓存，所以会耗费内存，耗费量与要解析的文件相关。最好在使用完毕后执行linecache.clearcache()清空一下缓存。\n\n当然，作为优化，这里可以利用生成器来进行优化。暂且按下不表。\n\n处理日志条目\n\n一条日志信息就是一个特定格式的字符串，因此使用正则表达式来解析，这里使用Python的re模块。\n下面，一条一条建立规则：\n\n规则\n\n    ip = r\"?P<ip>[\\d.]*\"\n    date = r\"?P<date>\\d+\"\n    month = r\"?P<month>\\w+\"\n    year = r\"?P<year>\\d+\"\n    log_time = r\"?P<time>\\S+\"\n    method = r\"?P<method>\\S+\"\n    request = r\"?P<request>\\S+\"\n    status = r\"?P<status>\\d+\"\n    bodyBytesSent = r\"?P<bodyBytesSent>\\d+\"\n    refer = r\"\"\"?P<refer>\n             [^\\\"]*\n             \"\"\"\n    userAgent=r\"\"\"?P<userAgent>\n                .*\n               \"\"\"\n\n\n解析\n\np = re.compile(r\"(%s)\\ -\\ -\\ \\[(%s)/(%s)/(%s)\\:(%s)\\ [\\S]+\\]\\ \\\"(%s)?[\\s]?(%s)?.*?\\\"\\ (%s)\\ (%s)\\ \\\"(%s)\\\"\\ \\\"(%s).*?\\\"\" %( ip, date, month, year, log_time, method, request, status, bodyBytesSent, refer, userAgent ), re.VERBOSE)\nm = re.findall(p, logline)\n\n\n这样，就可以得到日志条目中各个要素的原始数据。\n\n\n格式及内容转化\n\n得到日志原始数据之后，需要根据业务要求，对原始数据进行格式及内容转化。\n这里需要处理的内容包括：时间，request，userAgent\n\n时间格式转化\n\n在日志信息原始数据中存在Dec这样的信息，利用Python的time模块可以方便的进行解析\n\nimport time\n\n\ndef parsetime(date, month, year, log_time):\n    time_str = '%s%s%s %s' %(year, month, date, log_time)\n    return time.strptime(time_str, '%Y%b%d %H:%M:%S')\n\n\n解析request\n\n在日志信息原始数据中得到的request的内容格式为：\n\n/report?XXXXXX\n\n\n这里只需要根据协议取出XXXXXX即可。\n这里仍然采用Python的re模块\n\nimport re\n\n\ndef parserequest(rqst):\n    param = r\"?P<param>.*\"\n    p = re.compile(r\"/report\\?(%s)\" %param, re.VERBOSE)\n    return re.findall(p, rqst)\n\n\n接下来需要根据业务协议解析参数内容。这里需要先利用base64模块解码，然后再利用struct模块解构内容：\n\nimport struct\nimport base64\n\n\ndef parseparam(param):\n    decodeinfo = base64.b64decode(param)\n    s = struct.Struct('!x' + bytes(len(decodeinfo) - (1 + 4 + 4 + 12)) + 'xii12x')\n    return s.unpack(decodeinfo)\n\n\n解析userAgent\n\n在日志信息原始数据中userAgent数据的格式为：\n\nXXX; XXX; XXX; XXX\n\n\n根据业务要求，只需要取出最后一项即可。\n这里采用re模块来解析。\n\nimport re\n\n\ndef parseuseragent(useragent):\n    agent = r\"?P<agent>.*\"\n    p = re.compile(r\".*;.*;.*;(%s)\" %agent, re.VERBOSE)\n    return re.findall(p, useragent)\n\n\n\n至此，nginx日志文件解析基本完成。\n剩下的工作就是根据业务需要，对获得的基本信息进行处理。\n（完）\n\n                ", "mainLikeNum": ["6 "], "mainBookmarkNum": "38"}