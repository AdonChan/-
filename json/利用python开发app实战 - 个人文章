{"title": "利用python开发app实战 - 个人文章 ", "index": "python", "content": "\n你说，我们的未来\n被装进棺材，染不上尘埃\n\n\n我很早之前就想开发一款app玩玩，无奈对java不够熟悉，之前也没有开发app的经验，因此一直耽搁了。最近想到尝试用python开发一款app，google搜索了一番后，发现确实有路可寻，目前也有了一些相对成熟的模块，于是便开始了动手实战，过程中发现这其中有很多坑，好在最终依靠google解决了，因此小记一番。\n[](https://thief.one/2018/05/08/... \"说在前面的话\")说在前面的话\n　　python语言虽然很万能，但用它来开发app还是显得有点不对路，因此用python开发的app应当是作为编码练习、或者自娱自乐所用，加上目前这方面的模块还不是特别成熟，bug比较多，总而言之，劝君莫轻入。\n[](https://thief.one/2018/05/08/... \"准备工作\")准备工作\n　　利用python开发app需要用到python的一个模块–kivy，kivy是一个开源的，跨平台的Python开发框架，用于开发使用创新的应用程序。简而言之，这是一个python桌面程序开发框架（类似wxpython等模块），强大的是kivy支持linux、mac、windows、android、ios平台，这也是为什么开发app需要用到这个模块。　　虽然kivy是跨平台的，但是想要在不同的平台使用python代码，还需要将python代码打包成对应平台的可执行程序，好在kivy项目下有个打包工具项目–buildozer，这是官方推荐的打包工具，因为相对比较简单，自动化程度高，其他项目比如：python-for-android也能起到类似的作用，这里不展开介绍。\n[](https://thief.one/2018/05/08/... \"搭建kivy开发环境\")搭建kivy开发环境\n需要在pc上安装kivy开发环境，这里演示下mac与linux下的安装过程。install kivy for mac安装一些依赖包：\nbrew install pkg-config sdl2 sdl2_image sdl2_ttf sdl2_mixer gstreamer\n安装cython以及kivy：\npip install cython==0.25\npip install kivy\n如果安装kivy报错，则使用下面的方式安装kivy：\ngit clone https://github.com/kivy/kivy\npython setup.py install\n安装后测试：\n$python\nPython 2.7.10 (default, Jul 15 2017, 17:16:57)\n[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.31)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n>>> import kivy\n[INFO   ] [Logger      ] Record log in /Users/didi/.kivy/logs/kivy_18-05-08_4.txt\n[INFO   ] [Kivy        ] v1.10.1.dev0, git-5f6c66e, 20180507\n[INFO   ] [Python      ] v2.7.10 (default, Jul 15 2017, 17:16:57)\n[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.31)]\n说明：导入kivy模块没有报错则说明安装成功。\n[](https://thief.one/2018/05/08/... \"install kivy for centos7\")install kivy for centos7\n先安装依赖：\nyum install \\\n    make \\\n    mercurial \\\n    automake \\\n    gcc \\\n    gcc-c++ \\\n    SDL_ttf-devel \\\n    SDL_mixer-devel \\\n    khrplatform-devel \\\n    mesa-libGLES \\\n    mesa-libGLES-devel \\\n    gstreamer-plugins-good \\\n    gstreamer \\\n    gstreamer-python \\\n    mtdev-devel \\\n    python-devel \\\n    python-pip \\\n    java-devel\n安装cython以及kivy:\npip install Cython==0.20\npip install kivy\ncentos安装kivy参考：https://kivy.org/docs/installation/installation-linux.html#using-software-packages\n说明：其他安装kivy方式可移步：https://kivy.org/#download（需要翻墙）\n[](https://thief.one/2018/05/08/... \"用kivy开发第一个python app\")用kivy开发第一个python app\n安装完kivy就可以开发app程序了，这里演示下hello-world程序，关于kivy更复杂的用法不是本文重点，后面再成文介绍。1) 创建一个main.py文件，写入：\n#! -*- coding:utf-8 -*-\nfrom kivy.app import App\nclass HelloApp(App):\n    pass\nif __name__ == '__main__':\n    HelloApp().run()\n2)创建一个hello.kv文件，写入：\nLabel:\n    text: 'Hello, World! I am nMask'\n简单说明：main.py是入口函数，定义了一个HelloApp类，该类继承kivy.app；hello.kv文件是kivy程序，相当于定义界面风格等，该文件命名规则为类名小写且去除app。\n[](https://thief.one/2018/05/08/... \"运行第一个python app\")运行第一个python app\npython main.py\n运行结果：\n[](https://thief.one/2018/05/08/... \"安装buildozer工具\")安装buildozer工具\n　　通过以上的编码，我创建了自己的第一个python app程序，该程序可以直接在mac、linux、windows平台下运行，那么如何让它在安卓或者苹果手机上运行呢？我们知道在安卓上运行，需要将其打包成apk安装程序，因此就需要用到前面提到过的buildozer工具，（buildozer工具可以打包kivy程序，支持android、ios等），buildozer的安装过程比较简单：\npip install buildozer\n\n使用buildozer工具将kivy程序打包成apk\n在python项目目录下运行：\nbuildozer init\n运行成功将会创建一个配置文件buildozer.spec，可以通过修改配置文件更改app的名称等，然后运行：\nbuildozer android debug deploy run\n运行以上命令将会生成跨平台的安装包，可适用安卓、ios等，如果用于安卓，则是利用python-for-android项目。\n在第一次运行以上命令的时候，会自动在系统中下载安卓sdk等必要文件，如下图。（过程需要翻墙，而且有很多依赖需要下载）\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "2"}