{"title": "Python模块文档学习之抽象基类abc模块 - 倚楼听风雨 ", "index": "python", "content": "PEP里面关于抽象类的相关介绍:https://www.python.org/dev/pe...python中并没有提供抽象类与抽象方法，但是提供了内置模块abc(abstract base class)来模拟实现抽象类。主要类或函数：abc.ABCMeta 这是用来生成抽象基础类的元类。由它生成的类可以被直接继承。 abc.ABC辅助类，让你可以不用关心元类概念，直接继承它，就有了ABCMeta元类。使用时注意元类冲突@abc.abstractmethod 定义抽象方法，除了这个装饰器，其余装饰器都被deprecated了。\nfrom abc import ABCMeta\n\nclass MyABC(metaclass=ABCMeta):\n    pass\n\nMyABC.register(tuple)\n\nassert issubclass(tuple, MyABC)\nassert isinstance((), MyABC)\n上面这个例子中，首先生成了一个MyABC的抽象基础类，然后再将tuple变成它的虚拟子类。然后通过issubclass或者isinstance都可以判断出tuple是不是出于MyABC类。另外，也可以通过复写__subclasshook__(subclass)来改变issubclass或者isinstance的行为，__subclasshook__(subclass)必须定义为classmethod\nclass Foo:\n    def __getitem__(self, index):\n        ...\n    def __len__(self):\n        ...\n    def get_iterator(self):\n        return iter(self)\n\nclass MyIterable(metaclass=ABCMeta):\n\n    @abstractmethod\n    def __iter__(self):\n        while False:\n            yield None\n\n    def get_iterator(self):\n        return self.__iter__()\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is MyIterable:\n            if any(\"__iter__\" in B.__dict__ for B in C.__mro__):\n                return True\n        return NotImplemented\n\nMyIterable.register(Foo)\n通过@abc.abstractmethod将方法声明为抽象方法。具体化抽象类可以有两种方式，一种通过注册（register），另外一种通过继承。上面介绍的是注册方式，注册方式的缺点：不会出现在类的MRO (Method Resolution Order)，故而也不能通过super()来调用抽象方法。当没有实现抽象方法时，实例化时候不会报错，只有在调用时候才会报错。\n下面介绍继承方式：继承方式的优点：直接从抽象基类派生子类有一个好处，除非子类实现抽象基类的抽象方法，否则子类不能实例化。\n继承方式：\nimport abc\n\nclass PluginBase(metaclass= abc.ABCMeta):\n    #__metaclass__ = abc.ABCMeta\n    \n    @abc.abstractmethod\n    def load(self, input):\n        \"\"\"Retrieve data from the input source and return an object.\"\"\"\n        return\n    \n    @abc.abstractmethod\n    def save(self, output, data):\n        \"\"\"Save the data object to the output.\"\"\"\n        return\n        \nclass SubclassImplementation(PluginBase):\n    \n    def load(self, input):\n        return input.read()\n    \n    def save(self, output, data):\n        return output.write(data)\n \nif __name__ == '__main__':\n    print 'Subclass:', issubclass(SubclassImplementation, PluginBase)\n    print 'Instance:', isinstance(SubclassImplementation(), PluginBase)\ncollections中的抽象类\ncollections.abc模块定义了几个抽象类。具体请看文档。\n参考：https://docs.python.org/3/lib...https://www.python.org/dev/pe...https://my.oschina.net/u/2253...http://yansu.org/2013/06/09/l...http://www.cnblogs.com/Securi...\n\n                ", "mainLikeNum": ["3 "], "mainBookmarkNum": "2"}