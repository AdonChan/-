{"title": "python的虚拟环境 - Python ", "index": "python", "content": "什么是虚拟环境\npython特有的一种软件环境,创建多个python环境，各个环境之间完全隔离，互不影响。它可以用来解决Python项目开发和运行过程中的依赖项和版本问题，而不必和其他项目的Python环境以及全局的Python环境发生冲突。\n安装\n$ pip install virtualenv\n\n注：Linux下默认未安装pip，需要手动安装pip命令。\nsudo apt install python-pip    #python2.7安装\nsudo apt install python3-pip   # python3安装 \npip install --upgrade pip      #pip 更新\n\n创建虚拟环境\n安装完成后，可以使用 virtualenv 命令创建放置虚拟环境的目录：\n$ virtualenv  [OPTIONS]  [虚拟环境名称]\n\n-p PYTHON_EXE, --python=PYTHON_EXE 指定生成的虚拟环境使用的Python解释器：\n #顺序都可以\n virtualenv -p /usr/bin/python3.6 ENV\n virtualenv  ENV --python=python3.6\n virtualenv  --python=python3.6 ENV \n\nENV/lib 和 ENV/include 目录中包含了虚拟环境ENV使用的库文件。在虚拟环境中安装的第三方包会安装在 ENV/lib/python3.4/site-packages 目录下。\nENV/bin 目录里面放置了可执行文件，在里面有新安装的Python 包中的可执行程序，包括pip等相关工具。\nOPTIONS参数：\n--no-site-packages 参数：\n默认情况下，虚拟环境会依赖系统环境中的 sit package，就是说系统中已经安装好的第三方 package 也会安装在虚拟环境中，如果不想依赖这些 package，那么可以加上 --no-site-packages 参数建立虚拟环境。\n$  virtualenv --no-site-packages [虚拟环境名称]\n\n--version 显示软件的版本号：\n# virtualenv --version\n\n-h, --help 显示帮助信息：\n# virtualenv -h\n\n--no-setuptools 在新建的虚拟环境中不安装工具包:\n# virtualenv --no-setuptools ENV\n\n--no-pip 在新建的虚拟环境中不安装pip：\n# virtualenv --no-pip ENV\n\n--no-wheel 在新建的虚拟环境中不安装 wheel：\n# virtualenv --no-wheel ENV\n\n启动环境\n新创建的虚拟环境目录中有一个启动脚本 ENV/bin/activate ，直接使用 source 命令来启动虚拟环境。\n$ source ENV/bin/activate\n\n退出环境\n退出当前虚拟环境使用 deactivate 命令。\n$ deactivate\n\n安装 virtualenvwrapper 扩展包\nVirtaulenvwrapper 是 virtualenv 的扩展包，可以把新创建的环境记录下来，不需要每次启动虚拟环境时都执行一遍 source 命令，可以更方便的管理虚拟环境。它可以实现：1、将所有虚拟环境整合在一个目录下2、管理（新增，删除，复制）虚拟环境3、快速切换虚拟环境\n安装 virtualenvwrapper\n$ pip install virtualenvwrapper \n\n此时还不能使用virtualenvwrapper，默认virtualenvwrapper安装在/usr/local/bin下面，实际上你需要运行virtualenvwrapper.sh文件才行，里面有安装步骤，我们照着操作把环境设置好。\n创建存放虚拟环境的目录\n# $HOME是用户主目录\n$ mkdir $HOME/.virtualenvs\n\n进入 用户主目录，打开 .bashrc 文件，添加如下代码：\nexport WORKON_HOME=$HOME/.virtualenvs\n#export PROJECT_HOME=$HOME/Devel\nexport VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3\nsource /usr/local/bin/virtualenvwrapper.sh\n\nWORKON_HOME： 告诉 virtualenvwrapper 在哪里放置你的虚拟环境，默认是在 $HOME/.virtualenvs 目录下。如果这个目录不存在，virtualenvwrapper 运行的时候会自动创建它。PROJECT_HOME ：告诉virtualenvwrapper在哪里存放你的项目的工作目录\n\n执行 source 命令，使刚添加的代码生效：\n$ source .bashrc\n\nwindows下安装virtualenvwrapper\npip install virtualenvwrapper-win\n设置环境变量\n在系统变量中新建“变量名”：WORKON_HOME：“你自定义的路径”。\n使用 virtualenvwrapper\n虚拟环境相关操作：\nlsvirtualenv:                     列出虚拟环境列表(个人喜欢用第二个)workon+Enter:                           列出虚拟环境列表mkvirtualenv [虚拟环境名称]:   新建虚拟环境workon [虚拟环境名称]:              切换虚拟环境rmvirtualenv [虚拟环境名称]:    删除虚拟环境deactivate:                                    离开虚拟环境\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "0"}