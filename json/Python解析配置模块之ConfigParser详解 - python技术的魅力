{"title": "Python解析配置模块之ConfigParser详解 - python技术的魅力 ", "index": "python", "content": "Python 解析配置模块之ConfigParser详解\n1.基本的读取配置文件\n-read(filename) 直接读取ini文件内容\n-sections() 得到所有的section，并以列表的形式返回\n-options(section) 得到该section的所有option\n-items(section) 得到该section的所有键值对\n-get(section,option) 得到section中option的值，返回为string类型\n-getint(section,option) 得到section中option的值，返回为int类型，还有相应的getboolean()和getfloat() 函数。\n2.基本的写入配置文件\n-add_section(section) 添加一个新的section\n-set( section, option, value) 对section中的option进行设置，需要调用write将内容写入配置文件。\n3.基本例子\ntest.conf\n[a]\na_key1 = 20\na_key2 = 10\n[b]\nb_key1 = 121\nb_key2 = b_value2\nb_key3 = $r\nb_key4 = 127.0.0.1\nConfigParser_example.py\ncf = ConfigParser.ConfigParser()\ncf.read(\"test.conf\")  # 读取配置文件内容\nsecs = cf.sections()    # 对内容进行划分，得到所有的章节名\nprint 'sections:', secs     # 以列表形式打印章节名\nopts = cf.options('a')\nprint 'options:', opts  # 以列表形式打印a章节里面的Key\nkvs = cf.items('a')\nprint 'sec_a:', kvs     # 以列表形式打印a章节的(key, value)\nstr_val = cf.get('a', 'a_key1')     # 返回a章节里面key为a_key1的值，返回为string类型\nint_val = cf.getint('a', 'a_key2')  # 返回_a章节里面key为a_key2的值，返回为int类型\nprint \"value for a's a_key1:\", str_val\nprint \"value for a's a_key2:\", int_val\ncf.set(\"b\", \"b_key3\", \"new-$r\")     # 章节a里面添加一个key为b_key3，值为new-$r，如果key存在就更新key的值\ncf.set(\"b\", \"b_newkey\", \"new-value\")    # 章节b里面添加一个key为b_newkey，值为new-value，key存在就更新key的值\ncf.add_section('a_new_section')     # 新建一个章节a_new_section\ncf.set('a_new_section', 'new_key', 'new_value')     # 章节a_new_section里面新建一个key为new_key，值为new_value\ncf.write(open(\"test.conf\", \"w\"))    # 把修改写入到文件test.conf中\n终端输出：\nsections: ['a', 'b']\noptions: ['a_key1', 'a_key2']\nsec_a: [('a_key1', '20'), ('a_key2', '10')]\nvalue for a's a_key1: 20\nvalue for a's a_key2: 10\n更新后的test.conf\n[a]\na_key1 = 20\na_key2 = 10\n[b]\nb_key1 = 121\nb_key2 = b_value2\nb_key3 = new-$r\nb_key4 = 127.0.0.1\nb_newkey = new-value\n[a_new_section]\nnew_key = new_value\n4.Python的ConfigParser Module中定义了3个类对INI文件进行操作。\n分别是RawConfigParser、ConfigParser、SafeConfigParser。RawCnfigParser是最基础的INI文件读取类，ConfigParser、SafeConfigParser支持对%(value)s变量的解析。\n设定配置文件test2.conf\n[portal]\nurl = http://%(host)s:%(port)s/Portal\nhost = localhost\nport = 8080\n使用RawConfigParser:\nimport ConfigParser\ncf2 = ConfigParser.RawConfigParser()\nprint \"use RawConfigParser() read\"\ncf2.read(\"test2.conf\")  # 读取配置文件内容\nprint cf2.get(\"portal\", \"url\")  # 获得章节portal中key为url的值\nprint \"use RawConfigParser() write\"\ncf2.set(\"portal\", \"url12\", \"%(host)s:%(port)s\") # 章节portal中添加一个key为url12，值为%(host)s:%(port)s\nprint cf2.get(\"portal\", \"url12\")    # 获得章节portal中key为url12的内容\n终端输出：\nuse RawConfigParser() read\nhttp://%(host)s:%(port)s/Portal\nuse RawConfigParser() write\n%(host)s:%(port)s\n改用ConfigParser：\nimport ConfigParser\ncf3 = ConfigParser.ConfigParser()\nprint \"use ConfigParser() read\"\ncf3.read(\"test2.conf\")\nprint cf3.get(\"portal\", \"url\")\nprint \"use ConfigParser() write\"\ncf3.set(\"portal\", \"url12\", \"%(host)s:%(port)s\")\nprint cf3.get(\"portal\", \"url12\")\n终端输出：\nuse ConfigParser() read\nhttp://localhost:8080/Portal\nuse ConfigParser() write\nlocalhost:8080\n改用SafeConfigParser：\nimport ConfigParser\ncf4 = ConfigParser.SafeConfigParser()\nprint \"use SafeConfigParser() read\"\ncf4.read(\"test2.conf\")\nprint cf4.get(\"portal\", \"url\")\nprint \"use SateConfigParser() write\"\ncf4.set(\"portal\", \"url2\", \"%(host)s:%(port)s\")\nprint cf4.get(\"portal\", \"url2\")\n终端输出（效果同ConfigParser）：\nuse SafeConfigParser() read\nhttp://localhost:8080/Portal\nuse SateConfigParser() write\nlocalhost:8080\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}