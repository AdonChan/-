{"title": "Pipenv – 超好用的 Python 包管理工具 - 个人文章 ", "index": "python", "content": "pipenv 是什么\npipenv 是 python 官方推荐的包管理工具，集成了 virtualenv、pyenv 和 pip 三者的功能于一身，类似于 php 中的 composer。\n我们知道，为了方便管理 python 的虚拟环境和库，通常使用较多的是 virtualenv 、pyenv 和 pip，但是他们不够好用或者说不够偷懒。于是 requests 的作者 Kenneth Reitz 开发了用于创建和管理 python 虚拟环境的工具 —- pipenv。\n它能够自动为项目创建和管理虚拟环境，从 Pipfile 文件中添加或者删除包，同时生成 Pipfile.lock 文件来锁定安装包的版本和依赖信息，避免构建错误。\npipenv 主要解决了以下问题：\n\n不用再单独使用 virtualenv、pyenv 和 pip 了，现在它们结合到了一起。\n不用再维护 requirement.txt 了，使用 Pipfile 和 Pipfile.lock 来代替。\n可以在开发环境使用多个 python 版本。\n在安装的 pyenv 条件下，可以自动安装需要的 python 版本。\n安全，广泛地使用 Hash 校验，能够自动曝露安全漏洞。\n随时查看图形化的依赖关系。\n\n安装 pipenv\n由于我的开发环境一直都是 Mac 笔记本，所以这里只介绍在 Mac 环境如何安装好了。\n使用 pip 安装\n$ pip install --user pipenv\n这个命令在用户级别（非系统全局）下安装 pipenv。如果安装后 shell 提示找不到 pipenv 命令，你需要添加当前 Python 用户主目录的 bin 目录到 PATH 环境变量。如果你不知道 Python 用户主目录在哪里，用下面的命令来查看：\n$ python -m site --user-base\n你会看到类似下面的输出\n/Users/liyafeng/Library/Python/3.6\n使用 brew 安装\nMac 下使用 brew 安装软件应该是最方便的了，推荐使用：\nbrew install pipenv\n升级 pipenv：\nbrew upgrade pipenv\nshell 自动补齐\nLinux or Mac 环境下，bash下如果能自动命令补全岂不是更好？请把如下语句追加到.bashrc或者.zshrc即可：\neval \"$(pipenv --completion)\"\n常用命令\npipenv 具有的选项：\n$ pipenv\nUsage: pipenv [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --where          显示项目文件所在路径\n  --venv           显示虚拟环境实际文件所在路径\n  --py             显示虚拟环境Python解释器所在路径\n  --envs           显示虚拟环境的选项变量\n  --rm             删除虚拟环境\n  --bare           最小化输出\n  --completion     完整输出\n  --man            显示帮助页面\n  --three / --two  使用Python 3/2创建虚拟环境（注意本机已安装的Python版本）\n  --python TEXT    指定某个Python版本作为虚拟环境的安装源\n  --site-packages  附带安装原Python解释器中的第三方库\n  --jumbotron      An easter egg, effectively.\n  --version        版本信息\n  -h, --help       帮助信息\npipenv 可使用的命令参数：\nCommands:\n  check      检查安全漏洞\n  graph      显示当前依赖关系图信息\n  install    安装虚拟环境或者第三方库\n  lock       锁定并生成Pipfile.lock文件\n  open       在编辑器中查看一个库\n  run        在虚拟环境中运行命令\n  shell      进入虚拟环境\n  uninstall  卸载一个库\n  update     卸载当前所有的包，并安装它们的最新版本\n一些例子：\nUsage Examples:\n   Create a new project using Python 3.6, specifically:\n   $ pipenv --python 3.6\n\n   Install all dependencies for a project (including dev):\n   $ pipenv install --dev\n\n   Create a lockfile containing pre-releases:\n   $ pipenv lock --pre\n\n   Show a graph of your installed dependencies:\n   $ pipenv graph\n\n   Check your installed dependencies for security vulnerabilities:\n   $ pipenv check\n\n   Install a local setup.py into your virtual environment/Pipfile:\n   $ pipenv install -e .\n\n   Use a lower-level pip command:\n   $ pipenv run pip freeze\n\npipenv 使用过程\n创建环境，安装指定 python 的版本信息：\nmkdir new_env & cd new_env\npipenv install     // pipenv install --three\n如果指定了 --two 或者 --three 选项参数，则会使用 python2 或者 python3 的版本安装，否则将使用默认的 python 版本来安装。当然也可以指定准确的版本信息：\n$ pipenv install --python 3\n$ pipenv install --python 3.6\n$ pipenv install --python 2.7.14\npipenv 会自动扫描系统寻找合适的版本信息，如果找不到的话，同时又安装了 pyenv 的话，则会自动调用 pyenv 下载对应版本的 python， 否则会报错。\n这时候在当前 new_env 环境下生成 Pipfile 和 Pipfile.lock 两个环境初始化文件。\n进入|退出环境：\n进入环境：\npipenv shell \n退出环境：\nexit //或者 ctrl+d\n安装第三方包：\n这里我们测试安装 urllib3 包好了：\npipenv install urllib3\n此时，Pipfile 里有最新安装的包文件的信息，如名称、版本等。用来在重新安装项目依赖或与他人共享项目时，你可以用 Pipfile 来跟踪项目依赖。\nPipfile 是用来替代原来的 requirements.txt 的，内容类似下面这样。source 部分用来设置仓库地址，packages 部分用来指定项目依赖的包，dev-packages 部分用来指定开发环境需要的包，这样分开便于管理。\n$ cat Pipfile\n[[source]]\nurl = \"https://pypi.org/simple\"\nverify_ssl = true\nname = \"pypi\"\n\n[packages]\n\"urllib3\" = \"*\"\n\n[dev-packages]\n\n[requires]\npython_version = \"3.6\"\nPipfile.lock 则包含你的系统信息，所有已安装包的依赖包及其版本信息，以及所有安装包及其依赖包的 Hash 校验信息。\n$ Pipfile.lock\n{\n    \"_meta\": {\n        \"hash\": {\n            \"sha256\": \"af58f3510cb613d4d9241128f9a0ceb9bb936ad907543e23ad8317011dcb6715\"\n        },\n        \"pipfile-spec\": 6,\n        \"requires\": {\n            \"python_version\": \"3.6\"\n        },\n        \"sources\": [\n            {\n                \"name\": \"pypi\",\n                \"url\": \"https://pypi.org/simple\",\n                \"verify_ssl\": true\n            }\n        ]\n    },\n    \"default\": {                \n         \"urllib3\": {\n            \"hashes\": [\n                \"sha256:a68ac5e15e76e7e5dd2b8f94007233e01effe3e50e8daddf69acfd81cb686baf\",\n                \"sha256:b5725a0bd4ba422ab0e66e89e030c806576753ea3ee08554382c14e685d117b5\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==1.23\"\n        }\n    },\n    \"develop\": {}\n}\n现在安装另一个包，再次查看这两个文件的内容。你会发现 Pipfile 现在包含两个安装包了，Pipfile.lock 也包含了所有已安装包的依赖包及其版本信息，以及所有安装包及其依赖包的 Hash 校验信息。每次你安装新的依赖包，这两个文件都会自动更新。\n安装指定版本包：\npipenv install urllib3==1.22\n安装开发环境下的包：\n加 --dev 表示包括 Pipfile 的 dev-packages 中的依赖。\npipenv install httpie --dev\n卸载第三方包：\npipenv uninstall urllib3 //或者 pipenv uninstall --all\n更新安装包：\npipenv update urllib3\n更新所有包：\npipenv update \n这个命令会删除所有软件包然后重新安装最新的版本。\n查看虚拟环境目录：\n$ pipenv --venv\n/Users/liyafeng/.local/share/virtualenvs/new_env-UVLdq9CB\n最后的虚拟环境目录是以当前环境 new_env 作为目录开头的。\n查看项目根目录：\n$ pipenv --where\n/Users/liyafeng/Documents/www/pythondemo/new_env\n检查软件包的完整性\n你是否担心已安装的软件包有没有安全漏洞？没关系，pipenv 可以帮你检查，运行下面的命令：\n$  pipenv check\nChecking PEP 508 requirements…\nPassed!\nChecking installed package safety…\nAll good!\n上面的命令根据 Pipfile 里的 PEP 508 标记检查安全漏洞。\n查看依赖树\n$ pipenv graph\nhttpie==0.9.9\n  - Pygments [required: >=2.1.3, installed: 2.2.0]\n  - requests [required: >=2.11.0, installed: 2.19.1]\n    - certifi [required: >=2017.4.17, installed: 2018.4.16]\n    - chardet [required: <3.1.0,>=3.0.2, installed: 3.0.4]\n    - idna [required: <2.8,>=2.5, installed: 2.7]\n    - urllib3 [required: >=1.21.1,<1.24, installed: 1.23]\n锁定版本\n更新 lock 文件锁定当前环境的依赖版本\npipenv lock\n环境变量管理\n如果你开发调试时需要配一堆环境变量，可以写到 .env 文件中，在 pipenv shell 进入虚拟环境时，它会帮你把这些环境变量加载好，非常方便。\n例如写一个 .env 文件：\necho \"FOO=hello foo\" > .env\n之后 pipenv shell 进入虚拟环境，echo $FOO 就能看环境变量的值 hello foo 已经设置好了。\n参考链接\nhttps://docs.pipenv.org/\npipenv 新款 Python 虚拟环境工具详解\npipenv 笔记\npipenv 使用指南\nPipenv – 官方推荐的 Python 包管理工具\n\n                ", "mainLikeNum": ["3 "], "mainBookmarkNum": "2"}