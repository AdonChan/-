{"title": "python加密与解密，加签与验签 - 个人文章 ", "index": "python", "content": "在与第三方服务对接时，加密与解密，加签与验签是这个过程中的关键一步\n一般情况下，对接服务中会有两对公私钥。使用对方公钥进行加密，使用自己私钥进行加签。传回来的数据，使用自己的私钥解密，使用对方的公钥验签。\nimport base64\nfrom Crypto.PublicKey import RSA\nfrom Crypto.Hash import SHA\nfrom Crypto.Cipher import PKCS1_v1_5\nfrom Crypto.Signature import PKCS1_v1_5 as SIGN_PKCS\n\nPUB_KEY = RSA.importKey(open('rsa_public_key.pem','r').read())\nPRI_KEY = RSA.importKey(open('rsa_private_key.pem','r').read())\n\n\n加密\n\ndef split_data(l, n):\n    for i in range(0, len(l), n):\n        yield l[i: i+n]\n        \ndef encrypt(params):\n    raw = params.encode('utf-8')\n    cipher = PKCS1_v1_5.new(PUB_KEY)\n    ＃ 加密超长字节117个字节一加密\n    content = b''.join([cipher.encrypt(x) for x in chunks(raw, 117)])\n    return base64.b64encode(content)\n    \n解密\ndef decrypt(data):\n    raw = data.encode('utf-8')\n    decrypt = PKCS1_v1_5.new(PRI_KEY).decrypt\n    # 解密超长字符128一解密\n    content = b''.join(decrypt(x, object()) for x in chunks(raw, 128))\n    return content.decode()\n加签\ndef signer(data):\n    signstr = data.encode('utf-8')\n    sign = SIGN_PKCS.new(PRI_KEY).sign(SHA.new(signstr))\n    return base64.b64encode(sign)\n验签\ndef verify_sign(unsign, raw_sign):\n    \"\"\"\n     unsign: 签名\n     raw_sign: 待验证签名\n    \"\"\"\n    assert SIGN_PKCS.new(PUB_KEY).verify(SHA.new(unsign.encode('utf-8')), raw_sign)\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}