{"title": "leetcode-44. Wildcard Matching - 个人文章 ", "index": "python", "content": "题目阐释：\n正则匹配字符串，用程序实现\n关键理解：\n正则匹配，动态规划思想，一个个向后追溯，后面的依赖前面的匹配成功。\n正则和待匹配的字符串长度不一，统一到正则字符串的index索引上，每次的字符串index移动，都以匹配到的正则的index为准。\n正则由于*?的存在，所以有多种状态，中间状态储存都需要记录下来。然后以这些状态为动态的中转，继续判断到最后。\n最后正则匹配字符串是否成功的判断依据，就是正则字符串的最大index，是否出现在遍历到最后的状态列表中。\n错误之处：\n多处动态变化，导致无法入手，*没有处理思路，没有找到匹配成功的条件\n应用：\n正则属于多条路径问题，可以推理到 多种渠道的问题，匹配成功当前的才往后推\n*相当于无限向后匹配，所以无限循环使用，看能否匹配成功。\n\nWildcard Matching\nGiven an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*'.\n\n'?' Matches any single character.\n'*' Matches any sequence of characters (including the empty sequence).\n\nThe matching should cover the entire input string (not partial).\n\nNote:\ns could be empty and contains only lowercase letters a-z.\np could be empty and contains only lowercase letters a-z, and characters like ? or *.\n\nExample 1:Input:\n\ns = \"aa\"\np = \"a\"\nOutput: falseExplanation: \"a\" does not match the entire string \"aa\".Example 2:\nInput:\n\ns = \"aa\"\np = \"*\"\nOutput: trueExplanation: '*' matches any sequence.Example 3:\nInput:\n\ns = \"cb\"\np = \"?a\"\nOutput: falseExplanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.Example 4:\nInput:\n\ns = \"adceb\"\np = \"*a*b\"\nOutput: trueExplanation: The first '' matches the empty sequence, while the second '' matches the substring \"dce\".Example 5:\nInput:\n\ns = \"acdcb\"\np = \"a*c?b\"\nOutput: false\nclass Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        transfer = {}\n        index=0\n        for char in p:\n            if char=='*':\n                transfer[index,char]=index\n            else:\n                transfer[index,char]=index+1\n                index+=1\n        accept=index\n\n        # index=0\n        state = {0}\n        for char in s:\n            state_tmp=set()\n            for index in state:\n                for char_prob in [char,'?','*']:\n                    index_next=transfer.get((index,char_prob))\n                    state_tmp.add(index_next)\n            state=state_tmp\n        return accept in state\n\n\nif __name__=='__main__':\n    s = \"acdcb\"\n    p = \"a*c?b\"\n    p = \"a**c?d\"\n    st=Solution()\n    out=st.isMatch(s,p)\n    print(out)\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}