{"title": "15.搜索功能的实现与页面倒计时跳转 - 后端开发——Flask初体验 ", "index": "flask,python", "content": "我们的导航条有搜索输入框和按钮，现在我们来完善这部分功能。首先搜索的逻辑，我们简单地设定为问题的title或者content包含搜索的关键字即可。假设搜索的关键字存在变量keyword里，那么获取所有符合搜索逻辑的question的代码如下：\nresult = Questions.query.filter(or_(Questions.title.contains(keyword),\n                                    Questions.content.contains(keyword))).order_by(\n                                    Questions.create_time.desc()).all()\n虽然看着眼花缭乱，但是很容易理解，使用Model.Column.Contains(keyword)与filter结合来筛选指定的Column字段包含keyword的内容，由于我们的逻辑是或的关系，所以使用了一个从sqlalchemy中导出的or_函数。当然我们也完全可以自己写一个函数去实现同样的搜索功能，毕竟这部分逻辑很简单。\n\n搜索功能一般都是用GET方法来传递参数的，对应成url为'/search?keyword=XXX'，我们需要处理的是'/search'，编写一个与之对应的视图函数，检索结果我们可以完全使用首页模板home.html去展示，只是内容不一样而已：\n@app.route('/search')\ndef search():\n    # 获取GET数据，注意和获取POST数据的区别\n    keyword = request.args.get('keyword')\n    result = Questions.query.filter(or_(Questions.title.contains(keyword),\n                                    Questions.content.contains(keyword))).order_by(\n                                    Questions.create_time.desc()).all()\n    if result:\n        return render_template('home.html', questions=result)\n    else:\n        return 'Not Found'\n\nbase.html中，我们为搜索框添加name=\"keyword\"属性，对应form表单添加action=\"{{ url_for('search') }}和method=\"GET\"，如下：\n<form class=\"navbar-form navbar-left\" action=\"{{ url_for('search') }}\" method=\"GET\">\n    <div class=\"form-group\">\n      <input type=\"text\" class=\"form-control\" placeholder=\"Key Words\" name=\"keyword\">\n    </div>\n    <button type=\"submit\" class=\"btn btn-default\" >搜索</button>\n  </form>\n此时搜索功能已经基本实现，如搜索GDP，url变为'http://127.0.0.1:5000/search?keyword=GDP'，结果只有一条如下：\n\n我们再优化一下未找到结果的情况，如之前所说，无搜索结果时页面显示提示并通过倒计时返回首页。页面的倒计时跳转，我们可以用js来实现，代码如下：\nfunction timetojump(second,jumpurl){\n    var timer= document.getElementById('timer');\n    timer.innerHTML=second;\n    if(--second>0){\n        setTimeout(\"timetojump(\"+second+\",'\"+jumpurl+\"')\",1000);\n        }\n    else{\n        location.href=jumpurl;\n        }\n    }\n函数timetojump获取一个id为timer的html元素，将second秒数写入其内容，秒数如果减1后大于0，则用setTimeout继续执行timetojump，此时的second已经减1了，这样就实现了html倒计时的效果，当second等于0时，就执行location.href跳转到jumpurl，我们将js代码存在static/javascript/timer.js中。然后设计一个warn.html，其样式如下：\n\n不仅在倒计时结束后跳转回首页，还增加了一个立即跳转的按钮(通过onclick=\"location=url\"实现)，其html代码如下：\n{% extends 'base.html' %}\n\n{% block static_files %}\n<link rel=\"stylesheet\" href=\"{{ url_for('static',filename='css/warn.css') }}\" />\n<script src=\"{{ url_for('static',filename='javascript/timer.js') }}\"></script>\n{% endblock %}\n\n{% block page_name %}提示{% endblock %}\n\n{% block body_part %}\n<div class=\"informs\">\n    <h4>提示信息</h4>\n    <p>\n        <span class=\"key-message\">未找到相关结果</span>，\n        <span id=\"timer\">5</span>秒后将自动跳转回首页。\n    </p>\n    <div class=\"jump-button\">\n        <button type=\"submit\" class=\"btn btn-default pull-right\" onclick=\"location='{{ url_for('home') }}'\">立即跳转</button>\n    </div>\n</div>\n<script type=\"text/javascript\">timetojump(5,\"{{ url_for('home') }}\");</script>\n{% endblock %}\nsearch视图函数结尾的else部分修改为\nelse:\n    return render_template('warn.html')\ncss代码如下：\n.body-container{\n    overflow: hidden;\n}\n\n.informs{\n    width: 560px;\n    margin: 20px;\n    padding: 5px;\n    border: 1px solid cornflowerblue;\n    border-radius: 5px;\n    overflow: hidden;\n}\n\nspan.key-message{\n    color: #225599;\n}\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}