{"title": "跳出ping++退款的坑 - 曾经的自己 ", "index": "python", "content": "近期在项目的开发过程中,需要用到ping++的退款功能,由于使用的版本比官方提供的要低2个小版本,因此问题并不是很大。但是由于官方文档有些内容写的比较含蓄,因此遇到了一些问题。  我们可以通过如下的方式来获取SDK的版本:\n>>> import pingpp\n>>> pingpp.VERSION\n'2.0.7'\n>>> pingpp.api_version\n'2.0.7'\n在官方文档得说明中,我们可以看到这样3句代码:\nimport pingpp\npingpp.api_key = 'sk_test_ibbTe5jLGCi5rzfH4OqPW9KC'\nch = pingpp.Charge.retrieve('CH-ID')\nre = ch.refunds.create(description='desc', amount=1)\n入坑\n在这里,我们看到我们先导入pingpp库,然后通过赋值的方式将其传入。然后我们通过pingpp得Charge类的retrieve方法获取给定ch_id,然后再根据其refunds属性得create方法传入关键字参数来实现退款的操作。  如果我们没有传入api_key,将得到1个AuthenticationError权限错误:\nAuthenticationError: No API key provided. (HINT: set your API key using \"pingpp.api_key = <API-KEY>\"). You can generate\n API keys from the Ping++ web interface.  See https://pingxx.com for details, or email support@pingxx.com if you have a\nny questions.\n\n在这里,我按照官方提供的方式进行赋值,直接就出现上面的情况了,让人比较纳闷。\n出坑\n下面我们来看下其实现的源码,在resource模块下的Charge类继承自3个类,分别为CreateableAPIResource, ListableAPIResource,UpdateableAPIResource。其源码如下:\nclass Charge(CreateableAPIResource, ListableAPIResource,\n             UpdateableAPIResource):\n    def refund(self, **params):\n        ...\n而这3个父类继承自APIResource类,而APIResource类继承自PingppObject类,它是1个Pingpp对象。\nclass CreateableAPIResource(APIResource):\n    @classmethod\n    def create(cls, api_key=None, **params):\n        requestor = api_requestor.APIRequestor(api_key)\n        url = cls.class_url()\n        response, api_key = requestor.request('post', url, params)\n        return convert_to_pingpp_object(response, api_key)\n\nclass APIResource(PingppObject):\n    @classmethod\n    def retrieve(cls, id, api_key=None, **params):\n        instance = cls(id, api_key, **params)\n        instance.refresh()\n        return instance\n\n    def refresh(self):\n        self.refresh_from(self.request('get', self.instance_url()))\n        return self\n    @classmethod\n    def class_name(cls):\n        ...\n        return str(urllib.quote_plus(cls.__name__.lower()))\n\n    @classmethod\n    def class_url(cls):\n        cls_name = cls.class_name()\n        return \"/v1/%ss\" % (cls_name,)\n\n    def instance_url(self):\n        ...\n        extn = urllib.quote_plus(id)\n        return \"%s/%s\" % (base, extn)\n从上述代码,我们可以发现,我们还可以直接将api_key以关键字参数的形式传入到retrieve方法中。  我们调用Charge类的retrieve方法时,其会生成1个实例,然后调用该实例得refresh方法。而后调研该实例的refresh_from方法,使用get请求,而地址为该实例的url。  因此,最终的url地址为https://api.pingxx.com/v1/charges/,首先class_name方法返回Charge类名的小写名称,而后在class_url方法中进行组装后返回给instance_url方法。  而在调用request方法的过程中,我们会涉及到1个convert_to_pingpp_object方法,其将响应的内容转换为pingpp对象。  通过这种方式我们完成了官方文档中查询Charge对象的操作,即进行如下的操作:\nGET https://api.pingxx.com/v1/charges/{CHARGE_ID}\n\n因此,上面ch最终的结果为我们使用API调用后得到的JSON数据结果,而后我们通过ch的refunds属性得到这样1个对象:\n ...\n   \"refunds\": {\n    \"url\": \"/v1/charges/ch_xxx/refunds\", \n    \"has_more\": false,\n    \"object\": \"list\",\n    \"data\": [\n      {\n        ...\n      }\n    ]\n  }\n\n而这个转换的过程是在refresh_from函数中进行的:\ndef refresh_from(self, values, api_key=None, partial=False):\n        ...\n        for k, v in values.iteritems():\n            super(PingppObject, self).__setitem__(\n                k, convert_to_pingpp_object(v, api_key))\n而后我们通过object属性获取到ch.refunds的结果为list。通过如下的方式我们得到的ch.refunds为1个ListObject:\ndef convert_to_pingpp_object(resp,api_key):\n    klass_name = resp.get('object')\n    if isinstance(klass_name, basestring):\n       klass = types.get(klass_name, PingppObject)\n这样,我们在create方法中传入的参数与API文档中创建Refund对象的参数一一对应了。而这些传入的参数将在调用api_requestor模块中得APIRequestor类时传入。其中,url为refund对象中的url属性,即上面的/v1/charges/ch_xxx/refunds。  因此,第3行中的关键字参数description和amount正好对应官方文档中的说明。需要提示的是,description参数只能是最大255个unicode字符,不然又会出现一些问题。\n总结\n其实ping++的SDK是与其API接口对应的,如果你在使用SDK的过程中对其传入的参数不明确,可以查看API文档相应篇章中的说明。不然你会遇到ping++平台给你返回一些让你摸不着头脑的回复。\n原文:\nhttp://yuki-onna.github.io/jump-out-of-the-refund-of-ping++/\n参考文章:\nhttps://www.pingxx.com/api#api-r-newhttps://www.pingxx.com/guidance/server/charge/refundhttps://github.com/PingPlusPlus/pingpp-python/blob/2.0.7/example/refund.py\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}