{"title": "Python Numpy 笔记 - 个人文章 ", "index": "numpy,python", "content": "这次机器学习的作业可以用第三方库了，果断抛弃 MATLAB 改用 Python但是操作数组的 Numpy 之前一直没用过，今天先看看官方教程入个门\nThe Basics\nNumpy 中主要的对象是同类元素组成的多维数组，可以通过一个正整数的元组进行索引。在 Numpy 中维度(dimension)称为轴(axes)，轴的数量称为秩rank\n[[1., 0., 0.], [0., 1., 2.]] ：rank=2the first dimension has a length of 2, the second dimension has a length of 3\nNumpy 的数组类叫做 ndarray or arrayattributes:\n\nndarray.ndim\nndarray.shape\nndarray.size\n\nndarray.dtype：ndarray.dtype.name 返回字符串表示的类型名称\nndarray.data\n\nExample:\n>>> import numpy as np\n>>> a = np.arange(15).reshape(3, 5)\n>>> a\narray([[ 0,  1,  2,  3,  4],\n       [ 5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14]])\n>>> a.shape\n(3, 5)\n>>> a.ndim\n2\n>>> a.dtype.name\n'int64'\n>>> a.itemsize\n8\n>>> a.size\n15\n>>> type(a)\n<type 'numpy.ndarray'>\n>>> b = np.array([6, 7, 8])\n>>> b\narray([6, 7, 8])\n>>> type(b)\n<type 'numpy.ndarray'>\nArray Creation\n\n\ncreate from list/tupe:\n\na = np.array([1, 2, 3])\nb = np.array([[1, 2, 3], [4, 5, 6]], dtype=float)\n\n\n\ncreate with shape:\n\nzeros: np.zeros((3, 4))\n\nones: np.ones((2, 4, 3))\n\nempty: np.empty((2, 3))  uninitialized\n\n\n\ncreate sequences of number (similar to range()):\n\n\narange: np.arange(10, 30, 5) syntax is the same as range() but returns array\n接受浮点数，但是由于精度影响，输出的元素个数不确定。这种情况应使用 linspace\n\n\nlinspace: np.linspace(0, 2, 9) return an array contains 9 numbers from 0 to 2\n\n\n\nBasic Operations\n算数操作对于 array 是按元素运算的，并返回一个新的 array\n\n>>> a = np.array( [20,30,40,50] )\n>>> b = np.arange( 4 )\n>>> b\narray([0, 1, 2, 3])\n>>> c = a-b\n>>> c\narray([20, 29, 38, 47])\n>>> b**2\narray([0, 1, 4, 9])\n>>> 10*np.sin(a)\narray([ 9.12945251, -9.88031624,  7.4511316 , -2.62374854])\n>>> a<35\narray([ True, True, False, False], dtype=bool)\n>>> A = np.array( [[1,1],\n...             [0,1]] )\n>>> B = np.array( [[2,0],\n...             [3,4]] )\n>>> A*B                         # elementwise product\narray([[2, 0],\n       [0, 4]])\n\n# 两种矩阵乘法\n>>> A.dot(B)\narray([[5, 4],\n       [3, 4]])\n>>> np.dot(A, B)\narray([[5, 4],\n       [3, 4]])\n一元运算 (sum, min, max)\n>>> a = np.random.random((2,3))\n>>> a\narray([[ 0.18626021,  0.34556073,  0.39676747],\n       [ 0.53881673,  0.41919451,  0.6852195 ]])\n>>> a.sum()\n2.5718191614547998\n>>> a.min()\n0.1862602113776709\n>>> a.max()\n0.6852195003967595\n>>> b = np.arange(12).reshape(3,4)\n>>> b\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11]])\n>>>\n>>> b.sum(axis=0)                            # sum of each column\narray([12, 15, 18, 21])\n>>>\n>>> b.min(axis=1)                            # min of each row\narray([0, 4, 8])\nIndexing, slicing and iterating\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}