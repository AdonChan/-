{"title": "Python学习之路16-使用API - VPointer ", "index": "python,数据可视化", "content": "《Python编程：从入门到实践》笔记。本篇是Python数据处理的第三篇，本篇将使用Web应用程序接口自动请求网站的特定信息并可视化。\n1. 前言\n本将需要用到requests模块来请求网站数据。主要内容如下：\n\n向GitHub请求项目数据，按星排序；\n使用pygal可视化上述数据；\n调用Hacker News的API\n\n2. GitHub repositories\n获取GitHub中仓库的描述信息，并按星数排序：\n# 代码：\nimport requests\n\n# 执行API调用并存储响应,注意不要输错了！\nurl = \"https://api.github.com/search/repositories?q=language:python&sort=stars\"\nr = requests.get(url)\nprint(\"Status code:\", r.status_code)\n\n# 将API响应存储在一个变量中\nresponse_dict = r.json()\nprint(\"Total repositories:\", response_dict[\"total_count\"])\n\n# 探索有关仓库的信息\nrepo_dicts = response_dict[\"items\"]\nprint(\"Repositories returned:\", len(repo_dicts))\n\n# 研究第一个仓库\nrepo_dict = repo_dicts[0]\nprint(\"\\nKeys:\", len(repo_dict))\nfor key in sorted(repo_dict.keys()):\n    print(key)\n    \n# 结果：\nStatus code: 200\nTotal repositories: 2563652\nRepositories returned: 30\n\nKeys: 72\narchive_url\narchived\nassignees_url\nblobs_url\n-- snip --\n有些请求可能并不能成功，可能需要你的个人授权码：\nheaders = {\"Authorization\":\"your perosonal token\"}\nurl = \"https://api.github.com/search/repositories?q=language:python&sort=stars\"\nr = requests.get(url, headers=headers)\n大多数API都存在速率限制，即特定时间内可执行的请求数。对于GitHub的速率限制可以访问 https://api.github.com/rate_l... 访问，时间是“每分钟”。\n3. 使用Pygal可视化仓库\n使用一个参数配置类来定义图表的参数，并自定义图表中每个条形的描述信息，并给这些条形添加网址链接。\nimport requests\nimport pygal\nfrom pygal.style import LightColorizedStyle as LCS, LightenStyle as LS\n\n-- snip --\nrepo_dicts = response_dict[\"items\"]\n\nnames, plot_dicts = [], []\nfor repo_dict in repo_dicts:\n    names.append(repo_dict[\"name\"])\n\n    plot_dict = {\n        # 每个数据的值\n        \"value\": repo_dict[\"stargazers_count\"],\n        # 自定义每个数据的描述信息\n        # 原文中没有将其转换成str，报错；可能现在数据类型更改了？\n        \"label\": str(repo_dict[\"description\"]),\n        # 为每个条添加网址链接\n        \"xlink\": repo_dict[\"html_url\"],\n    }\n    plot_dicts.append(plot_dict)\n\n# 可视化\nmy_style = LS(\"#333366\", base_style=LCS)\n# 图表配置类\nmy_config = pygal.Config()\n# x轴标签顺时针旋转45度\nmy_config.x_label_rotation = 45\n# 不显示图例\nmy_config.show_legend = False\nmy_config.title_font_size = 24\nmy_config.label_font_size = 14\n# 主标签大小，y轴\nmy_config.major_label_font_size = 18\n# x轴标签最长15个字符\nmy_config.truncate_label = 15\n# 隐藏水平线\nmy_config.show_y_guides = False\nmy_config.width = 1000\n\nchart = pygal.Bar(my_config, style=my_style)\nchart.title = \"Most-Starred Python Projects on GitHub\"\nchart.x_labels = names\n\nchart.add(\"\", plot_dicts)\nchart.render_to_file(\"python_repos.svg\")\n得到如下表格：\n\n现在每一个数据都有自己的描述信息，并且点击它们还能跳到它们的项目网站。注意左侧y轴上的刻度，书中的刻度很密集，但同样的代码在这里不知道为什么很稀疏，所以这里没有体现出第34行代码的效果。\n4. Hacker News API\nHacker News的API能让你访问该网站所有文章和评论的信息，且不用注册获取秘钥。下面通过一个API调用获取其上当前热门文章的ID，再查看前30篇文章(有可能访问不了，至于原因以及具体怎么做，你懂的)：\nimport requests\nfrom operator import itemgetter\n\n# 执行API调用并存储响应\nurl = \"https://hacker-news.firebaseio.com/v0/topstories.json\"\nr = requests.get(url)\nprint(\"Status code:\", r.status_code)\n\n# 处理有关每篇文章的信息\nsubmission_ids = r.json()\nsubmission_dicts = []\nfor submission_id in submission_ids[:30]:\n    # 对于每篇文章，都执行一个API调用\n    url = (\"https://hacker-news.firebaseio.com/v0/item/\" + str(submission_id) + \".json\")\n    submission_r = requests.get(url)\n    print(submission_r.status_code)\n    response_dict = submission_r.json()\n\n    submission_dict = {\n        \"title\": response_dict[\"title\"],\n        \"link\": \"http://news.ycombinator.com/item?id=\" + str(submission_id),\n        \"comments\": response_dict.get(\"descendants\", 0)\n    }\n    submission_dicts.append(submission_dict)\n\nsubmission_dicts = sorted(submission_dicts, key=itemgetter(\"comments\"), reverse=True)\n\nfor submission_dict in submission_dicts:\n    print(\"\\nTitle:\", submission_dict[\"title\"])\n    print(\"Discussion link:\", submission_dict[\"link\"])\n    print(\"Comments:\", submission_dict[\"comments\"])\n以下是输出结果：\nStatus code: 200\n200\n200\n-- snip --\n\nTitle: Wells Fargo Hit with $1B in Fines\nDiscussion link: http://news.ycombinator.com/item?id=16886328\nComments: 358\n\nTitle: Want airline food? Take Amtrak\nDiscussion link: http://news.ycombinator.com/item?id=16882231\nComments: 160\n\n-- snip --\n5. 小结\n目前已经完成了两个项目，这本书还剩最后一个Django项目，从下一篇开始，也是用三篇文章来初步了解Django，制作一个简单的web应用。\n\n迎大家关注我的微信公众号\"代码港\" & 个人网站 www.vpointer.net ~\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "2"}