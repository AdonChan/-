{"title": "python大佬养成计划----flask应用 - python太阳花 ", "index": "python,mysql", "content": "将用户登陆信息绑定数据库\n要求将用户登陆时的信息，发送至后台与数据库进行比对，来判断用户是否可登陆\n#config.py文件，用来创建远程连接的类\nclass DB:\n    HOST = '192.168.1.227'\n    USER= 'root'\n    PASSWD = 'sheen'\n    PORT = 3306\n    DBNAME = 'test'\n# 主程序\nimport pymysql\nfrom config import DB\n# 1. 创建连接\nconn = pymysql.connect(\n    host=DB.HOST,\n    user=DB.USER,\n    passwd=DB.PASSWD,\n    port=DB.PORT,\n    db=DB.DBNAME,\n)\ncur = conn.cursor()\n\ndef isUserExist(username):\n    \"\"\"判断用户名是否存在\"\"\"\n    sqli = \"select * from users where name='%s'\" %(username)\n    res = cur.execute(sqli)\n    # res返回的是sql语句查询结果的个数；\n    #  如果为0， 没有查到。\n    if res == 0:\n        return  False\n    else:\n        return  True\ndef isPasswdOk(username, passwd):\n    sqli = \"select * from users where name='%s' and passwd='%s'\" %(\n        username, passwd)\n    res = cur.execute(sqli)\n    if res == 0 :\n        return  False\n    else:\n        return  True\ndef addUser(username, passwd):\n    \"\"\"用户注册时， 添加信息到数据库中\"\"\"\n    sqli = \"insert into users(name, passwd) values('%s', '%s')\" %(\n        username, passwd)\n    try:\n        res = cur.execute(sqli)\n        conn.commit()\n    except Exception as e:\n        conn.rollback()\n        return e\n# cur.close()\n# conn.close()\nif __name__ == \"__main__\":\n    addUser('root', 'root')\n    print(isUserExist('root'))\n    print(isPasswdOk('root', 'root'))\n\n判断用户是否登陆\n某些网站的部分内容，只对已经登陆的用户显示，这时候，需要我们判断用户是否登陆\nimport random\nimport os\nfrom datetime import  datetime\nimport psutil\nfrom flask import Flask, request, render_template, redirect, url_for, abort, session\nfrom models import isPasswdOk, isUserExist, addUser\nimport platform\napp = Flask(__name__)\napp.config['SECRET_KEY'] =  random._urandom(24)\n\nimport  functools\n\ndef is_login(f):\n    \"\"\"判断用户是否登陆的装饰器\"\"\"\n    @functools.wraps(f)\n    def wrapper(*args, **kwargs):\n        # run函数代码里面， 如果登陆， session加入user， passwd两个key值；\n        # run函数代码里面， 如果注销， session删除user， passwd两个key值；\n        # 如果没有登陆成功， 则跳转到登陆界面\n        if 'user' not in session:\n            return  redirect('/login/')\n        # 如果用户是登陆状态， 则访问哪个路由， 就执行哪个路由对应的视图函数；\n        return  f(*args, **kwargs)\n    return  wrapper\n\n# 用户主页\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n# 用户登陆按钮\n@app.route('/login/', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        print(request.form)\n        # 1. 如何获取到用户提交的信息呢?\n        user = request.form['user']\n        passwd = request.form['passwd']\n\n        # 2. 判断用户名和密码是否正确\n\n        if isPasswdOk(user, passwd):\n                # 将用户名和密码信息存储到session中;\n                session['user'] = user\n                session['passwd'] = passwd\n                # 如果登陆成功, 跳转到主页;\n                return redirect(url_for('index'))\n        else:\n            # 如果登陆失败, 重新登陆;\n            return  render_template('login.html', message=\"用户名或者密码错误\")\n\n    else:\n        # 用户是GET请求, 返回登陆的html页面\n        # 1. 读取login.html文件的内容\n        # 2. 将读取的内容返回给用户界面\n        return render_template('login.html')\n\n# 用户注销\n@app.route('/logout/')\ndef logout():\n    session.pop('user', None)\n    session.pop('passwd', None)\n    # 注销即删除用户的session信息， 注销成功， 跳转到首页;\n    return  redirect(url_for('index'))\n    # return  redirect('/')\n\n# 用户注册# http方法: get, post(需要提交用户名和密码信息)\n@app.route('/register/', methods=['GET', 'POST'])\ndef register():\n    # 判断是否提交注册信息；\n    if request.method == 'POST':\n        user = request.form['user']\n        passwd = request.form['passwd']\n        if isUserExist(user):\n            message = \"用户已经存在\"\n            return  render_template('register.html', message=message)\n        else:\n            addUser(user, passwd)\n            return  redirect(url_for('login'))\n    else:\n        return  render_template('register.html')\n\n# 系统监控\n@app.route('/sysinfo/')\n@is_login\ndef sysinfo():\n    info = platform.uname()\n    # 获取开机时间的时间戳， 需要安装psutil模块;\n    boot_time = psutil.boot_time()\n    # 将时间戳转换为字符串格式, 两种方法， 任选一种l\n    # print(time.ctime(boot_time))\n    boot_time = datetime.fromtimestamp(boot_time)\n\n    # 获取当前时间\n    now_time = datetime.now()\n\n    # 获取时间差\n    delta_time = now_time - boot_time\n    delta_time = str(delta_time).split('.')[0]\n    return  render_template('sysinfo.html',\n                        hostname = info.node,\n                        sysname = info.system,\n                        release = info.release,\n                        machine = info.machine,\n                        now_time =  now_time,\n                        boot_time = boot_time,\n                        delta_time = delta_time\n                            )\n\n\n# 404异常处理： 类似于捕获异常\n@app.errorhandler(404)\ndef not_found(e):\n    return  render_template('404.html')\n\n\n# 抛出异常\n@app.route('/user/<int:user_id>/')\ndef user(user_id):\n    if 0<int(user_id)<=100:\n        return  \"欢迎访问: %s\" %(user_id)\n    else:\n        abort(404)\n\napp.run(port=5005)\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}