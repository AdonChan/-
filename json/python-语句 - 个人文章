{"title": "python-语句 - 个人文章 ", "index": "if语句,for循环,while,python", "content": "（一）条件语句Python条件语句是通过一条或多条语句的执行结果（True或者False）来决定执行的代码块。if 语句用于控制程序的执行，基本形式为：\nif 判断条件：\n    执行语句……\nelif 判断条件：\n    执行语句……\nelse：\n    执行语句……\n注意：（1）elif语句可以有0个或多个（1）由于 python 并不支持 switch 语句，所以多个条件判断，只能用 elif 来实现，如果判断需要多个条件需同时判断时，可以使用 or （或），表示两个条件有一个成立时判断条件成功；使用 and （与）时，表示只有两个条件同时成立的情况下，判断条件才成功。练习1：if语句练习-多个elif-判断成绩等级\n#encoding=utf-8\ndef print_grade_level(grades):\n    if 90<=grades<=100:\n        print u'优秀'\n    elif 80<=grades<90:\n        print u'良好'\n    elif 60<=grades<80:\n        print u'及格'\n    else:\n        print u'不及格'\n\ntry:\n    grades=float(raw_input('please input your grade:'))\n    print_grade_level(grades)\nexcept Exception,e:\n    print u\"请输入正确的分数！\"\n\n练习2:猜数\n>>> import random\n>>> target_number=random.randint(1,5)\n>>> guess_number=int(raw_input(\"input your guess number:\"),)\ninput your guess number:4\n>>> if guess_number ==target_number:\n...     print \"you got it\"\n... elif guess_number>target_number:\n...     print \"bigger\"\n... else:\n...     print \"less\"\nyou got it\n\n（二）循环语句1while循环在给定的判断条件为 true 时执行循环体，否则退出循环体。语句格式为：\nwhile 判断条件：\n    执行语句……\nelse:\n    执行语句……\n注意：执行语句可以是单个语句或语句块；判断条件可以是任何表达式，任何非零、或非空（null）的值均为True；当判断条件为假即False时（参考bool中false的情况），循环结束。练习1：打印出count计算\n>>> count=0\n>>> while(count<9):\n...     print \"the index is:\",count\n...     count+=1\n\n练习2：列表倒序打印\n>>> number=-1\n>>> while number>=-len(lista):\n...        print lista[number]\n...        number-=1 \n练习3：猜数，循环猜数直到猜中为止\n#coding=utf-8\nimport random\ntarget_number=random.randint(1,5)\nprint target_number\nguess_times=0\nwhile 1:\n    guess_number=int(raw_input(\"please input your guess number:\"))\n    guess_times+=1\n    if guess_number>target_number:\n        print \"bigger\"\n    elif guess_number<target_number:\n        print \"less\"\n    else:\n        print \"you got it\"\n        break \nprint \"guess times :%s\"  %guess_times\n\nfor循环Python for循环可以遍历任何序列的项目，如一个列表或者一个字符串。for iterating_var in sequence:statements(s)此处的sequence为序列，可以为元组、列表、字符串、字典。for … else结构下1.for里面的语句和普通的(没有else的for语句)没有区别；2.else中的语句会在循环正常执行完后执行;3.当for中语句通过break跳出而中断时，不会执行else。\n练习1：用于序列类型\nfor eachLetter in \"names\":\n...     print \"current letter:\",eachLetter\n\n练习2：通过序列项迭代\n>>> nameList=['walter','nicole','steven','henry']\n>>> for eachName in nameList:\n...     print eachName,\"lim\"\n\n练习3：通过索引迭代\n>>> nameList=['walter','nicole','steven','henry']\n>>> for nameIdex in range(len(nameList)):\n...      print \"liu\",nameList[nameIdex]\n\n练习4：\n>>> nameList=[\"Donn\",\"Shirley\",\"Ben\",\"Janice\",\"David\",\"Yen\",\"Wendy\"]\n>>> for i,eachLee in enumerate(nameList):\n...     print \"%d %s Lee\"%(i+1,eachLee)\n\n练习5：判断质数\n>>>import math\n>>>ss=int(raw_input(\"enter:\"))\n>>>for i in range(2,int(math.sqrt(ss))+1):\n>>>    if ss%i==0:\n>>>        print \"%d is not prime\"%ss\n>>>        break\n>>>else:\n>>>    print \"%d is prime\"%ss\n\n练习6：递规的用法\n>>>def fact(n):\n>>>    if n<=1:\n>>>        return 1\n>>>    else:\n>>>        return n*fact(n-1)\n注：当递归函数有return时，在递归的地方也要return，不然永远返回是None\n练习6：嵌套输出10-50个数是1-5的数方法一：\n>>> for i in range(1,5):\n...     for j in range(1,6):\n...         print str(i)+str(j) \n方法二：\n>> for i in range(10,50):\n..     if str(i)[1] in [\"1\",\"2\",\"3\",\"4\",\"5\"]:\n..         print i \n方法三：\nlis=[1,2,3,4,5]\nfor i in range(10,51):\n    j=i%10\n    if j in lis:\n        print i\n\n（三）break/continue/pass语句（1）breakcontinuebreak:跳出最近所在的循环（跳过整个循环语句）continue：跳到最近所在循环的开头处（来到循环的首行）pass:什么事也不做，只是空占位语句循环else块：只有当循环正常离开时才会执行（也就是没有碰到break语句）\n（3）直接退出多重循环三种方式方法一：\nclass getoutofloop(Exception): pass\ntry:\n    for i in range(5):\n        for j in range(5):\n            for k in range(5):\n                if i == j == k == 3:\n                    raise getoutofloop()\n                else:\n                    print i, '----', j, '----', k\nexcept getoutofloop:\n    Pass\n\n方法二：\ndef test():\n    for i in range(5):\n        for j in range(5):\n            for k in range(5):\n                if i == j == k == 3:\n                    return\n                else:\n                    print i, '----', j, '----', k\ntest()\n方法三：\nfor i in range(5):\n    for j in range(5):\n        for k in range(5):\n            if i == j == k == 3:\n                break\n            else:\n                print i, '----', j, '----', k\n        else: continue\n        break\n    else: continue\n    Break\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}