{"title": "Python之浅谈exec()函数 - 个人文章 ", "index": "python", "content": "  在Python中，exec()是一个十分有趣且实用的内置函数，不同于eval()函数只能执行计算数学表达式的结果的功能，exec()能够动态地执行复杂的Python代码，能够十分强大。具体的介绍可以参考官方文档： https://docs.python.org/3/lib... 。  本次分享讲简单聊聊exec()函数的用法，希望能给读者一点启示和参考。  首先是一个简单的小例子，代码如下：\ni = 12\nj = 13\nexec(\"answer=i*j\")\nprint(\"Answer is %s\"%answer)\n该代码的输出结果为：\nAnswer is 156\n这表明第三句的exec()函数能够正确地执行Python代码，并且能将计算结果赋予answer变量，就像真正的Python代码一样。  那么，我们能不能让exec()函数执行一个复杂的Python代码呢？Why not?请看一下例子：\nfunc = \"def fact(n):\\n\\treturn 1 if n==1 else n*fact(n-1)\"\nexec(func)\na = fact(5)\nprint(a)\nfunc为字符串，它是一个递归地计算整数阶乘的函数。因为exec()仅支持string和code object参数，所以我们要将该递归函数转化成一个字符串，当然，格式还是要Python代码的格式来，注意换行和缩进。刚才例子的输出结果为：\n120\n  可能有些读者纳了闷了，这些代码不是直接能够在Python中执行吗，为何还要多此一举地把它写成字符串，并用exec()执行呢？笔者的答案是，刚才的例子只是为了演示exec()函数的基本用法，它的强大之处远不止于此。  在实际项目中，我们有些时候会将Python代码写入一些文件中，举个例子，如以下的eg.txt,它储存了我们想要的Python代码，如下：\ndef fact(n):\n    if n==1:\n        return 1\n    else:\n        return n*fact(n-1)\nt = fact(6)\nprint(t)\n请再次注意，这是一个txt格式的Python代码。那么，我们如何调用它呢？答案就是exec()函数，代码如下：\nwith open('E://eg.txt', 'r') as f:\n    s = f.read()\n\nexec(s)\n在上述代码中，我们先读取eg.txt文件的内容，再转交exec()函数执行，输出结果如下：\n720\n  是不是有点棒呢？除了能执行string和code object外，还可以在exec()函数中加入参数,参数的传递可以写成字典(dict)形式。具体的使用方法可以参考下面的例子：\nx = 10\n\nexpr = \"\"\"\nz = 30\nsum = x + y + z\nprint(sum)\n\"\"\"\n\ndef func():\n    y = 20\n    exec(expr)\n    exec(expr, {'x': 1, 'y': 2})\n    exec(expr, {'x': 1, 'y': 2}, {'y': 3, 'z': 4})\n\nfunc()\n其输出结果如下：\n603334\n在expr语句中，有三个变量x,y,z,其中z值已给定，我们可以在exec()函数外指定x,y的值，也可以在exec()函数中以字典的形式指定x,y的值。在最后的语句中，我们给出了x,y,z的值，并且y值重复，exec()函数接收后面一个y值，且z值传递不起作用，因此输出结果为34.  本次分享到此结束。本文介绍了几个exec()函数使用的例子，希望能抛砖引玉，也欢迎大家多多交流~~\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}