{"title": "python基础 - study ", "index": "python", "content": "python基础\n索引\n字符串、列表和元组字典\n切片\n切片是指对操作的对象截取其中一部分的操作。字符串、列表、元组都支持切片操作。切片的语法：[起始:结束:步长]，选取的区间前闭后开。下面以字符串为例进行示范：\nlist\n列表是写在方括号([])之间、用逗号分隔开的元素列表。列表可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。列表的常见操作如下：\n添加元素append,extend,insert\nappend() 方法用于在列表末尾添加新的对象。\na=[1,2,3,4]\na.append(5)\nprint(a)   # [1,2,3,4,5]\n\nextend() 函数用于在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）。\na=[1,2]\nb=[\"xiaoming\",\"jack\"]\na.extend(b)\nprint(a) # [1, 2, 'xiaoming', 'jack']\n\ninsert() 函数用于将指定对象插入列表的指定位置。\na=[1,2,3,4,5,6,7,8]\na.insert(1,100)\nprint(a) #  [1, 100, 2, 3, 4, 5, 6, 7, 8]\n查找元素index、count\ncount() 方法用于统计某个元素在列表中出现的次数。\na=[1,2,3,4,5,23,4]\na.count(2)   # 1\n\nindex() 函数用于从列表中找出某个值第一个匹配项的索引位置。\na=[1,2,3,4,5,23,4]\na.index(4) # 3\n删除元素del、pop、remove、clear\ndel 删除引用而不是删除对象，对象由自动垃圾回收机制删除 \na=[1, 2, 3, 4, 5, 23, 4]\ndel a[0]\nprint(a) #[2, 3, 4, 5, 23, 4]\ndel a \nprint(a) # NameError: name 'a' is not defined\n\npop() 函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。\na=[1,2,3,4,5,6]\nb=a.pop()  # b=6\nprint(a) # [1, 2, 3, 4, 5]\na.pop(3)  # 删除 4\nprint(a) # [1, 2, 3, 5]\n\nremove() 函数用于移除列表中某个值的第一个匹配项。\na=[1,2,2,3,4,5,5,4,3,2]\na.remove(2)\nprint(a) # [1, 2, 3, 4, 5, 5, 4, 3, 2]\n\nclear() 函数用于清空列表，类似于 del a[:]。\na=[1,2,3,4,5,6,7,8]\na.clear()\nprint(a) # []\n排序sort、reverse\nsort() 函数用于对原列表进行排序，如果指定参数，则使用比较函数指定的比较函数。\nsort(...)\n    L.sort(key=None, reverse=False) -> None -- stable sort *IN PLACE*\na=[1,2,2,1,2,1,3,4,5]\na.sort() # [1, 1, 1, 2, 2, 2, 3, 4, 5]\n或\na.sort(reverse=True) # [5, 4, 3, 2, 2, 2, 1, 1, 1]\n\nreverse() 函数用于反向列表中元素。\na=[5, 4, 3, 2, 2, 2, 1, 1, 1]\na.reverse() # [1, 1, 1, 2, 2, 2, 3, 4, 5]\n复制列表copy\ncopy() 函数用于复制列表，类似于 a[:]。\na=[1,2,3,4,5]\nb=a.copy() # b=[1, 2, 3, 4, 5]\ncopy()和直接=赋值的区别:\n使用=直接赋值，是引用赋值，更改一个，另一个同样会变;\ncopy() 则顾名思义，复制一个副本，原值和新复制的变量互不影响 \n元组\n元组（tuple）与列表类似，不同之处在于元组的元素不能修改，元组写在小括号(())里。可以把字符串看作一种特殊的元组。虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则：\ntup1 = ()    # 空元组\ntup2 = (20,) # 一个元素，需要在元素后添加逗号\n见上述list的count、index\n字典\n字典是一种映射类型，字典用\"{ }\"标识，它是一个无序的键(key) : 值(value)对集合。键(key)必须使用不可变类型。\n删除元素clear、pop、popitem\nclear() 函数用于删除字典内所有元素。\na={\"name\":\"jack\",\"age\":18}\n a.clear() # {}\n\npop()通过指定的key值，删除字典的一个键值对,返回被删除的key对应的value\na={\"name\":\"jack\",\"age\":18}\na.pop(\"name\") # return \"jack\"  a={\"age\":18}\n\npopitem()随机返回并删除字典中的一对键和值（项）。为什么是随机删除呢？因为字典是无序的，没有所谓的“最后一项”或是其它顺序。在工作时如果遇到需要逐一删除项的工作，用popitem()方法效率很高。\n其返回值是元组，例如上述例子会返回：(\"name\":\"jack\"),(\"age\":18)\ncopy\ncopy()：返回一个字典的浅复制，如上list。\nfromkeys、items、keys、values\n fromkeys() 函数用于创建一个新字典，以序列seq中元素做字典的键，value为字典所有键对应的初始值。\nfromkeys(iterable, value=None, /) method of builtins.type instance\n    Returns a new dict with keys from iterable and values equal to value.\na=[\"a\",\"b\",\"c\"]\ndict.fromkeys(a) # {'b': None, 'c': None, 'a': None}\ndict.fromkeys(a，10) # {'b': 10, 'c': 10, 'a': 10}\n\n items() 方法以列表返回可遍历的(键, 值) 元组数组。\na={\"name\":\"jack\",\"age\":18}\na.items() # [('name', 'jack'), ('age', 18)]\n\nkeys() 方法以列表返回一个字典所有的键。\na.keys() # ['name', 'age']\n\nvalues()方法以列表返回字典中的所有值。\na.values() # ['jack', 18]\nget、update、setdefault\nget() 函数返回指定键的值，如果值不在字典中返回默认值。\na.get(\"name\") # \"jack\"\n\nupdate() 函数把字典dict2的键/值对更新到dict里。\nb={\"adress\":\"china\"}\n a.update(b) # {'name': 'jack', 'adress': 'china', 'age': 18}\n\nsetdefault() 方法和get()方法类似, 如果键不已经存在于字典中，将会添加键并将值设为默认值。\na={\"name\":\"jack\",\"age\":18}\na.setdefault(\"name\",None) # \"jack\"\na.setdefault(\"adress\") # {'name': 'jack', 'adress': None, 'age': 18}\n字符串\nPython中的字符串用单引号(')或双引号(\")括起来，同时使用反斜杠()转义特殊字符。\n+是字符串的连接符，*表示复制当前的字符串，紧跟的数字为复制的次数。\nPython 使用反斜杠(\\)转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个 r，表示原始字符串：\nprint(r'Ru\\noob')\nPython中的字符串不能改变。\n\n判断类型方法(11)\n\nisalnum():至少有一个字符并且所有字符都是字母或数字则返回True。\nisalpha():至少有一个字符并且所有字符都是字母则返回True。\nisdecimal():只包含数字则返回True。\nisdigit():只包含数字则返回True。\nisnumeric():只包含数字则返回True。包括汉字数字。\nisidentifier():检测字符串是否是字母开头。\nislower():至少包含一个区分大小写的字符，且这些字符都是小写则返回True。\nisprintable():判断字符串中所有字符是否都属于可见字符。 a = \"tPuppy\"-》False\nisspace():只包含空格则返回True。\nistitle():是标题化（每个单词的首字母大写）则返回True。\nisupper():至少包含一个区分大小写的字符，且这些字符都是大写则返回True。\n\n大小写转换(5)\n\ncapitalize():首字母大写\nlower():将所有的字母转换成小写字母\ntitle():每个单词首字母大写\nupper():将所有的字母转换成大写字母\nswapcase():反转字符串的大小写。大写变小写，小写变大写。\n\n去除空白字符(3)\n\nstrip():去除字符串两边的空格。\nlstrip():去除字符串左边开头的空格。\nrstrip():去除字符串右边开头的空格。\n\n查找和替换(7)\n\nstartswith():判断字符串是否以某个字符串开头的，返回值为bool型\nendswith():判断字符串是否以某个字符串结尾的，返回值为bool型\nfind(str[, start[, end]]):检测str是否包含在字符串中，start和end是指定范围。找不到返回-1。\nrfind():类似find，只不过从右开始查找。\nindex(sub[, start[, end]]):类似find，只不过找不到会报错。\nrindex():类似index，只不过从右开始查找。\nreplace(old, new[, count]):把字符串中的 old（旧字符串） 替换成 new(新字符串)，如果指定第三个参数count，则替换不超过 count次。\n\nstr = \"this is string example....wow!!! this is really string\"\nstr.replace(\"is\", \"was\", 3)\n返回结果：'thwas was string example....wow!!! thwas is really string'\n拆分与链接(6)\n\npartition(sep):如果字符串包含指定的分隔符，则返回一个3元的元组，第一个为分隔符左边的子串，第二个为分隔符本身，第三个为分隔符右边的子串。如果不包含，则返回原字符串和两个空字符串。\nrpartition():类似partition，只不过从右边开始查找。\nsplit(sep=None, maxsplit=-1):字符串分割，默认为所有的空字符，包括空格、换行(n)、制表符(t)等。。如果maxsplit有指定值，则仅分割maxsplit+1个字符串，例：b=\"a b c x s d f g h j\"，b.split(maxsplit=3)， ['a', 'b', 'c', 'x s d f g h j']\nrsplit():类似split\nsplitlines([keepends]):在输出结果里是否去掉换行符('r', 'rn', n')，默认为 False，不包含换行符，如果为 True，则保留换行符。\n\n>>> 'ab c\\n\\nde fg\\rkl\\r\\n'.splitlines()\n['ab c', '', 'de fg', 'kl']\n>>> 'ab c\\n\\nde fg\\rkl\\r\\n'.splitlines(True)\n['ab c\\n', '\\n', 'de fg\\r', 'kl\\r\\n']\njoin(seq):用于将序列中的元素以指定的字符连接生成一个新的字符串。\na=\"dufhskmakndkac\"\n \"-\".join(a) # 'd-u-f-h-s-k-m-a-k-n-d-k-a-c'\n其他(12)\n\ncasefold():\ncenter(width[, fillchar):返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格。fillchar 默认是空格，只能是单个字符。如果 width 小于字符串宽度直接返回字符串，不会截断。\ncount(sub[, start[, end]]):用于统计字符串里某个字符出现的次数。可选参数为在字符串搜索的开始与结束位置。\nencode(encoding='UTF-8',errors='strict')):以指定的编码格式编码字符串。errors参数可以指定不同的错误处理方案。\nexpandtabs(tabsize=8):把字符串中的 tab 符号('t')转为空格，tab 符号('t')默认的空格数是 8。\nformat():格式化输出字符串。参考\n\nformat_map():\nljust(width[, fillchar]):返回一个原字符串左对齐,并使用空格填充至指定长度的新字符串。如果指定的长度小于原字符串的长度则返回原字符串。类似center\nrjust(width[, fillchar]):返回一个原字符串右对齐,并使用空格填充至指定长度的新字符串。如果指定的长度小于原字符串的长度则返回原字符串。类似center\nmaketrans(intab, outtab):用于创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。\n\n两个字符串的长度必须相同，为一一对应的关系。\nintab = \"aeiou\"\nouttab = \"12345\"\ntrantab = str.maketrans(intab, outtab)\n\nstr = \"this is string example....wow!!!\"\nprint (str.translate(trantab))\nOut:\nth3s 3s str3ng 2x1mpl2....w4w!!!\n\ntranslate(table):根据参数table给出的表(包含 256 个字符)转换字符串的字符,要过滤掉的字符放到 deletechars 参数中。参考\n\nzfill():返回指定长度的字符串，原字符串右对齐，前面填充0。\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}