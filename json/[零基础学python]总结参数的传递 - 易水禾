{"title": "[零基础学python]总结参数的传递 - 易水禾 ", "index": "零基础,python", "content": "就前面所讲，函数的基本内容已经完毕。但是，函数还有很多值得不断玩味的细节。这里进行阐述。\n\n参数的传递\n\npython中函数的参数通过赋值的方式来传递引用对象。下面总结通过总结常见的函数参数定义方式，来理解参数传递的流程。\n\ndef foo(p1,p2,p3,...)\n\n这种方式最常见了，列出有限个数的参数，并且彼此之间用逗号隔开。在调用函数的时候，按照顺序以此对参数进行赋值，特备注意的是，参数的名字不重要，重要的是位置。而且，必须数量一致，一一对应。第一个对象（可能是数值、字符串等等）对应第一个参数，第二个对应第二个参数，如此对应，不得偏左也不得偏右。\n\n>>> def foo(p1,p2,p3):\n...     print \"p1==>\",p1\n...     print \"p2==>\",p2\n...     print \"p3==>\",p3\n... \n>>> foo(\"python\",1,[\"qiwsir\",\"github\",\"io\"])    #一一对应地赋值\np1==> python\np2==> 1\np3==> ['qiwsir', 'github', 'io']\n\n>>> foo(\"python\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: foo() takes exactly 3 arguments (1 given)    #注意看报错信息\n\n>>> foo(\"python\",1,2,3)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: foo() takes exactly 3 arguments (4 given)    #要求3个参数，实际上放置了4个，报错\n\n\ndef foo(p1=value1,p2=value2,...)\n\n这种方式比前面一种更明确某个参数的赋值，貌似这样就不乱子了，很明确呀。颇有一个萝卜对着一个坑的意味。\n\n还是上面那个函数，用下面的方式赋值，就不用担心顺序问题了。\n\n>>> foo(p3=3,p1=10,p2=222)\np1==> 10\np2==> 222\np3==> 3\n\n\n也可以采用下面的方式定义参数，给某些参数有默认的值\n\n>>> def foo(p1,p2=22,p3=33):    #设置了两个参数p2,p3的默认值\n...     print \"p1==>\",p1\n...     print \"p2==>\",p2\n...     print \"p3==>\",p3\n... \n>>> foo(11)     #p1=11，其它的参数为默认赋值\np1==> 11\np2==> 22\np3==> 33\n>>> foo(11,222)     #按照顺序，p2=222,p3依旧维持原默认值\np1==> 11\np2==> 222\np3==> 33\n>>> foo(11,222,333)  #按顺序赋值\np1==> 11\np2==> 222\np3==> 333\n\n>>> foo(11,p2=122)\np1==> 11\np2==> 122\np3==> 33\n\n>>> foo(p2=122)     #p1没有默认值，必须要赋值的，否则报错\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: foo() takes at least 1 argument (1 given)\n\n\ndef foo(*args)\n\n这种方式适合于不确定参数个数的时候，在参数args前面加一个*，注意，仅一个哟。\n\n>>> def foo(*args):         #接收不确定个数的数据对象\n...     print args\n... \n>>> foo(\"qiwsir.github.io\") #以tuple形式接收到，哪怕是一个\n('qiwsir.github.io',)\n>>> foo(\"qiwsir.github.io\",\"python\")\n('qiwsir.github.io', 'python')\n\n\n上一讲中已经有例子说明，可以和前面的混合使用。此处不赘述。\n\ndef foo(**args)\n\n这种方式跟上面的区别在于，必须接收类似arg=val形式的。\n\n>>> def foo(**args):    #这种方式接收，以dictionary的形式接收数据对象\n...     print args\n... \n\n>>> foo(1,2,3)          #这样就报错了\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: foo() takes exactly 0 arguments (3 given)\n\n>>> foo(a=1,b=2,c=3)    #这样就可以了，因为有了键值对\n{'a': 1, 'c': 3, 'b': 2}\n\n\n下面来一个综合的，看看以上四种参数传递方法的执行顺序\n\n>>> def foo(x,y=2,*targs,**dargs):\n...     print \"x==>\",x\n...     print \"y==>\",y\n...     print \"targs_tuple==>\",targs\n...     print \"dargs_dict==>\",dargs\n... \n\n>>> foo(\"1x\")\nx==> 1x\ny==> 2\ntargs_tuple==> ()\ndargs_dict==> {}\n\n>>> foo(\"1x\",\"2y\")\nx==> 1x\ny==> 2y\ntargs_tuple==> ()\ndargs_dict==> {}\n\n>>> foo(\"1x\",\"2y\",\"3t1\",\"3t2\")\nx==> 1x\ny==> 2y\ntargs_tuple==> ('3t1', '3t2')\ndargs_dict==> {}\n\n>>> foo(\"1x\",\"2y\",\"3t1\",\"3t2\",d1=\"4d1\",d2=\"4d2\")\nx==> 1x\ny==> 2y\ntargs_tuple==> ('3t1', '3t2')\ndargs_dict==> {'d2': '4d2', 'd1': '4d1'}\n\n\n通过上面的例子，看官是否看出什么名堂了呢？\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "3"}