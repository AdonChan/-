{"title": "Flask-restful 用法及自定义参数错误信息 - 个人文章 ", "index": "restful,flask,python", "content": "flask-restful 是一款比较好用的 flask 插件，它不仅自动为我们实现了数据的 json 化，还能对传入参数进行验证，优雅的替代了 form 表单。\n代码结构：\napp\n |_api\n |  |_ __init__.py\n |  |_ parser.py\n |  |_ view.py\n |\n |_ __init__.py\n |_ code.py\n |_ util.py\napp.py\n\n具体代码如下：\nparser.py\n\nfrom flask_restful.reqparse import RequestParser\n\nparser = RequestParser()\nparser.add_argument(\"id\", type=int, location=\"args\", required=True)\n# get 请求为args， post请求为json\n\n在 view 中的使用\nview.py\nfrom flask_restful import Resource\n\nfrom app.util import make_result\nfrom .parser import parser\n\n\nclass Test(Resource):\n    def get(self):\n        req = parser.parse_args(strict=True)\n        id = req.get(\"id\")\n        return make_result(data={\"id\": id})\n\n还有 __init__.py 文件设置路由\n__init__.py\nfrom .view import Test\nfrom flask_restful import Api\nfrom flask import Blueprint\n\napi = Blueprint(\"api\", __name__) # 设置蓝图\nresource = Api(api)\nresource.add_resource(Test, \"/\") # 设置路由\n\nutil.py 为一个设置文件， 用来放我们自己定义的输出规范。\nutil.py\nfrom flask import jsonify\nfrom app.code import Code\n\n\ndef make_result(data=None, code=Code.SUCCESS):\n    return jsonify({\"code\": code, \"data\": data, \"msg\": Code.msg[code]})\n\ncode.py 是我们自定义的错误码\ncode.py\nclass Code:\n    SUCCESS = 1200\n    NO_PARAM = 1300\n\n    msg = {\n        SUCCESS: \"success\",\n        NO_PARAM: \"no param\"\n    }\n\napp.py 为启动文件\napp.py\n\nfrom flask import Flask\nfrom app.api import api\n\napp = Flask(__name__)\napp.register_blueprint(api)\n\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n\n当我们运行 python app.py 的时候，程序便启动了起来。\n我们在浏览器中输入：localhost:5000/?id=123\n即可看到：\n{\n\"code\": 1200,\n\"data\":{\n\"id\": 123\n},\n\"msg\": \"success\"\n}\n\n那当我们输入: localhost:5000/?id=api\n得到了：\n{\n\"message\":{\n\"id\": \"invalid literal for int() with base 10: 'api'\"\n}\n}\n\n很明显，我们期望得到一个 int 型的 id，这里给了一个 str 类型的字符串，于是得到了 status_code 为 40 0的 response。\n我们肯定是希望以我们自己的定义消息来输出，即：\n{\n\"code\": 1300,\n\"data\": null,\n\"msg\": \"no param\"\n}\n\nflask-restful 并没有提供相应的 api，经过查看源码，发现 flask-restful abort 的代码是改写的 flask 的 abort 代码，于是我们也改写 flask-restful 的 abort 代码。\nflask abort 源码：\ndef abort(status, *args, **kwargs):\n    return _aborter(status, *args, **kwargs)\n\n非常简单。\nflask-restful 的 abort 源码：\ndef abort(http_status_code, **kwargs):\n    try:\n        original_flask_abort(http_status_code)\n    except HTTPException as e:\n        if len(kwargs):\n            e.data = kwargs\n        raise\n\n也是非常的简单，这里的 original_flask_abort 即 flask 的 abort。\n那现在改代码就很容易了，只要 http_status_code == 400，那么就是我们的参数没有接受正确，需要爆出格式化以后的错误。\n在 app.py 中修改：\napp.py\nfrom flask import Flask, abort\nimport flask_restful\nfrom app.api import api\nfrom app.util import make_result\nfrom app.code import Code\n\napp = Flask(__name__)\napp.register_blueprint(api)\n\n\ndef custom_abord(http_status_code, *args, **kwargs):\n    # 只要http_status_code 为400， 报参数错误\n    if http_status_code == 400:\n        abort(make_result(code=Code.NO_PARAM))\n    # 正常返回消息\n    return abort(http_status_code)\n\n# 把flask_restful中的abort方法改为我们自己定义的方法\nflask_restful.abort = custom_abord\n\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n\n现在再次运行 python app.py\n浏览器输入：http://localhost:5000/?id=api\n即可得到：\n{\n\"code\": 1300,\n\"data\": null,\n\"msg\": \"no param\"\n}\n\n输入：http://localhost:5000/?id=111 检测一下正常输出：\n{\n\"code\": 1200,\n\"data\":{\n\"id\": 111\n},\n\"msg\": \"success\"\n}\n\n完美！\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "3"}