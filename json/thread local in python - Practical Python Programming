{"title": "thread local in python - Practical Python Programming ", "index": "multi-thread,python", "content": "thread local in python\n参考 Thread Locals in Python: Mostly easy\n线程局部变量\nimport threading\n\nmydata = threading.local()\nmydata.x = 'hello'\n\nclass Worker(threading.Thread):\n    def run(self):\n        mydata.x = self.name\n        print mydata.x\n\nw1, w2 = Worker(), Worker()\nw1.start(); w2.start(); w1.join(); w1.join()\nThread-1\nThread-2\n各线程独享自己的变量，但是使用全局变量 mydata\n主线程也有自己的线程局部变量\nimport threading\n\nmydata = threading.local()\nmydata.x = {}\n\nclass Worker(threading.Thread):\n    def run(self):\n        mydata.x['message'] = self.name\n        print mydata.x['message']\nw1, w2 = Worker(), Worker()\nw1.start(); w2.start(); w1.join(); w2.join()\nException in thread Thread-1:\nTraceback (most recent call last):\n  File \"C:\\Python27\\lib\\threading.py\", line 801, in __bootstrap_inner\n    self.run()\n  File \"E:/learn/python/test/thread_local.py\", line 15, in run\n    mydata.x['message'] = self.name\nAttributeError: 'thread._local' object has no attribute 'x'\n\nException in thread Thread-2:\nTraceback (most recent call last):\n  File \"C:\\Python27\\lib\\threading.py\", line 801, in __bootstrap_inner\n    self.run()\n  File \"E:/learn/python/test/thread_local.py\", line 15, in run\n    mydata.x['message'] = self.name\nAttributeError: 'thread._local' object has no attribute 'x'\n线程 w1,w2 没有 x 属性，子线程与主线程拥有各自的变量\n继承 threading.local\nimport threading\n\nclass MyData(threading.local):\n    def __init__(self):\n        self.x = {}\n\nmydata = MyData()\n\nclass Worker(threading.Thread):\n    def run(self):\n        mydata.x['message'] = self.name\n        print mydata.x['message']\n\nw1, w2 = Worker(), Worker()\nw1.start(); w2.start(); w1.join(); w2.join()\nThread-1\nThread-2\n应用实例\nbottle 0.4.10\n\nclass Request(threading.local):\n    \"\"\" Represents a single request using thread-local namespace. \"\"\"\n\n    def bind(self, environ):\n        \"\"\" Binds the enviroment of the current request to this request handler \"\"\"\n        self._environ = environ\n        self._GET = None\n        self._POST = None\n        self._GETPOST = None\n        self._COOKIES = None\n        self.path = self._environ.get('PATH_INFO', '/').strip()\n        if not self.path.startswith('/'):\n            self.path = '/' + self.path\n\n#----------------------\nrequest = Request()\n#----------------------\n\n\ndef WSGIHandler(environ, start_response):\n    \"\"\"The bottle WSGI-handler.\"\"\"\n    global request\n    global response\n    request.bind(environ)\n    response.bind()\n    try:\n        handler, args = match_url(request.path, request.method)\n        if not handler:\n            raise HTTPError(404, \"Not found\")\n        output = handler(**args)\n    except BreakTheBottle, shard:\n        output = shard.output\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}