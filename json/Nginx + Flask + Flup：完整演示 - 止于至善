{"title": "Nginx + Flask + Flup：完整演示 - 止于至善 ", "index": "ubuntu,flup,flask,python,nginx", "content": "最近想学点 Nginx，发现大家一般都是自己编译。自己编译也不难，但是考虑到 Ubuntu 自带的安装包就已经够用了，所以姑且先用起来再说。\n安装 Nginx\nUbuntu 提供了四种 nginx 的安装包，功能由简到繁依次为：nginx-light，nginx-core，nginx-full，nginx-extras。\n安装前，可以用 aptitude show 查看各个安装包支持的模块。比如 nginx-extras 比 nginx-full 多了 perl 和 lua 支持。\n权衡之后，发现最佳选择为 nginx-full，也就是「标准版」。\n$ sudo apt-get install nginx-full\n\nnginx-full:\n     nginx-common (= 1.9.3-1ubuntu1), libc6 (>= 2.14), libexpat1 (>= 2.0.1), libgd3 (>=\n     2.1.0~alpha~), libgeoip1, libpam0g (>= 0.99.7.1), libpcre3, libssl1.0.0 (>= 1.0.2~beta3),\n     libxml2 (>= 2.7.4), libxslt1.1 (>= 1.1.25), zlib1g (>= 1:1.2.0)\n如果不清楚到底安装了哪些文件，可以通过 dpkg --listfiles 命令查看：\nadam@t450s:~/study/nginx$ dpkg --listfiles nginx-full\n/.\n/usr\n/usr/sbin\n/usr/sbin/nginx\n/usr/share\n/usr/share/doc\n/usr/share/doc/nginx-full\n/usr/share/doc/nginx-full/copyright\n/usr/share/doc/nginx-full/changelog.Debian.gz\n/usr/share/man\n/usr/share/man/man8\n/usr/share/man/man8/nginx.8.gz\n/usr/share/lintian\n/usr/share/lintian/overrides\n/usr/share/lintian/overrides/nginx-full\n可以顺带安装一下文档：\n$ sudo apt-get install nginx-doc\nNginx 命令\n重启等操作可以通过 /etc/init.d/nginx 执行：\n$ sudo /etc/init.d/nginx restart\n这是一个 shell 脚本（/etc/init.d/ 目录下都是 shell 脚本），有如下命令可用：\nconfigtest    reload        rotate        status        upgrade\nforce-reload  restart       start         stop\n当然，直接用 /usr/sbin/nginx 也行，通过 -s 给 nginx 进程发送信号。\n用 Flask 写一个应用\nFlask 是 Python 的微型 Web 框架，之前在文章里有过介绍，现在写一个最简单的应用。\n在 HOME 下建一个项目目录：\nadam@t450s:~$ mkdir flaskr\n在 flaskr 目录下创建文件 app.py，内容为：\n# encoding: utf-8\n\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    return 'Hello World!'\n再创建文件 flaskr.fcgi，内容为：\n#!/usr/bin/python\n\nfrom flup.server.fcgi import WSGIServer\nfrom app import app\n\nif __name__ == '__main__':\n    WSGIServer(app, bindAddress='/tmp/flaskr-fcgi.sock').run()\n这就是 FastCGI wrapper。需要安装 Flup 以支持 FastCGI：\n$ sudo pip install flup\n注意启动 WSGI Server 时，绑定的 socket 文件。这个文件后续配置 Nginx 时要用到，它是 Flup 和 Nginx 通信的桥梁。\n为 flaskr.fcgi 文件添加执行权限，不加也行，反正它就是个 Python 文件。\n$ chmod +x flaskr.fcgi\n配置 Nginx\n简单起见，直接编辑 nginx.conf 文件：\n$ sudo vim /etc/nginx/nginx.conf\n添加一个 server 配置到 http 模块：\nhttp {\n    server {\n        listen 80;\n        server_name localhost;\n\n        location / {\n            try_files $uri @flaskr;\n        }\n        location @flaskr {\n            include fastcgi_params;\n            fastcgi_param SCRIPT_NAME \"\";\n            fastcgi_param PATH_INFO $fastcgi_script_name;\n            fastcgi_pass unix:/tmp/flaskr-fcgi.sock;\n        }\n    }\n}\n最后一行指定了 Nginx 和 FastCGI 通信的 socket 文件：\nfastcgi_pass unix:/tmp/flaskr-fcgi.sock;\n运行程序\n启动 FastCGI wrapper：\nadam@t450s:~/flaskr$ ./flaskr.fcgi \n或者：\nadam@t450s:~/flaskr$ python flaskr.fcgi \n切换到 root 用户，修改 socket 文件的权限：\nadam@t450s:/tmp$ sudo su\n[sudo] adam 的密码： \nroot@t450s:/tmp# chmod 777 flaskr-fcgi.sock\n否则 Nginx 无权访问这个 socket 文件。查看 /var/log/nginx/error.log 的话，会看到如下错误：\n2015/11/09 22:23:21 [crit] 15357#15357: *1 connect() to unix:/tmp/flaskr-fcgi.sock failed (13: Permission denied) while connecting to upstream, client: 127.0.0.1, server: localhost, request: \"GET / HTTP/1.1\", upstream: \"fastcgi://unix:/tmp/flaskr-fcgi.sock:\", host: \"localhost\"\n修改 socket 文件的权限后，Nginx 好像并不需要重启。\n访问 http://localhost/，不出意外即可看到 \"Hello World!\"\n另请参阅：http://segmentfault.com/a/1190000002652109\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "24"}