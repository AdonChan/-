{"title": "[零基础学Python]做一个小游戏 - 易水禾 ", "index": "零基础,python", "content": "在讲述有关list的时候，提到做游戏的事情,后来这个事情一直没有接续。不是忘记了，是在想在哪个阶段做最合适。经过一段时间学习，看官已经不是纯粹小白了，已经属于python初级者了。现在就是开始做那个游戏的时候了。\n\n游戏内容：猜数字游戏\n\n太简单了吧。是的，游戏难度不大，不过这个游戏中蕴含的东西可是值得玩味的。\n\n游戏过程描述\n\n\n程序运行起来，随机在某个范围内选择一个整数。\n提示用户输入数字，也就是猜程序随即选的那个数字。\n程序将用户输入的数字与自己选定的对比，一样则用户完成游戏，否则继续猜。\n使用次数少的用户得胜.\n\n分析\n\n在任何形式的程序开发之前，不管是大还是小，都要进行分析。即根据功能需求，将不同功能点进行分解。从而确定开发过程。我们现在做一个很小的程序，也是这样来做。\n\n随机选择一个数\n\n要实现随机选择一个数字，可以使用python中的一个随机函数：random。下面对这个函数做简要介绍，除了针对本次应用之外，还扩展点，也许别处看官能用上。\n\n还是要首先强化一种学习方法，就是要学会查看帮助文档。\n\n>>> import random  #这个是必须的，因为不是内置函数\n>>> dir(random)\n['BPF', 'LOG4', 'NV_MAGICCONST', 'RECIP_BPF', 'Random', 'SG_MAGICCONST', 'SystemRandom', 'TWOPI', 'WichmannHill', '_BuiltinMethodType', '_MethodType', '__all__', '__builtins__', '__doc__', '__file__', '__name__', '__package__', '_acos', '_ceil', '_cos', '_e', '_exp', '_hashlib', '_hexlify', '_inst', '_log', '_pi', '_random', '_sin', '_sqrt', '_test', '_test_generator', '_urandom', '_warn', 'betavariate', 'choice', 'division', 'expovariate', 'gammavariate', 'gauss', 'getrandbits', 'getstate', 'jumpahead', 'lognormvariate', 'normalvariate', 'paretovariate', 'randint', 'random', 'randrange', 'sample', 'seed', 'setstate', 'shuffle', 'triangular', 'uniform', 'vonmisesvariate', 'weibullvariate']\n\n>>> help(random.randint)\n\nHelp on method randint in module random:\n\nrandint(self, a, b) method of random.Random instance\n    Return random integer in range [a, b], including both end points.\n\n\n耐心地看文档，就明白怎么用了。不过，还是把主要的东西列出来，但仍然建议看官在看每个函数的使用之前，在交互模式下通过help来查看文档。\n\n随机整数：\n\n>>> import random\n>>> random.randint(0,99)\n21\n\n\n随机选取0到100间的偶数：\n\n>>> import random\n>>> random.randrange(0, 101, 2)\n42\n\n\n随机浮点数：\n\n>>> import random\n>>> random.random() \n0.85415370477785668\n>>> random.uniform(1, 10)\n5.4221167969800881\n\n\n随机字符：\n\n>>> import random\n>>> random.choice('qiwsir.github.io')\n'g'\n\n\n多个字符中选取特定数量的字符：\n\n>>> import random\nrandom.sample('qiwsir.github.io',3) \n['w', 's', 'b']\n\n\n随机选取字符串：\n\n>>> import random\n>>> random.choice ( ['apple', 'pear', 'peach', 'orange', 'lemon'] )\n'lemon'\n\n\n洗牌：把原有的顺序打乱，按照随机顺序排列\n\n>>> import random\n>>> items = [1, 2, 3, 4, 5, 6]\n>>> random.shuffle(items)\n>>> items\n[3, 2, 5, 6, 4, 1]\n\n\n有点多了。不过，本次实验中，值用到了random.randint()即可。多出来是买一送一的（哦。忘记了，没有人买呢，本课程全是白送的）。\n\n关键技术点之一已经突破。可以编程了。再梳理一下流程。画个图展示：\n\n（备注：这里我先懒惰一下吧，看官能不能画出这个程序的流程图呢？特别是如果是一个初学者，流程图一定要自己画哦。刚才看到网上一个朋友说自己学编程，但是逻辑思维差，所以没有学好。其实，画流程图就是帮助提高逻辑思维的一种好方式，请画图吧。）\n\n图画好了，按照直观的理解，下面的代码是一个初学者常常写出来的（老鸟们不要喷，因为是代表初学者的）。\n\n#!/usr/bin/env python\n#coding:utf-8\n\nimport random\n\nnumber = random.randint(1,100)\n\nprint \"请输入一个100以内的自然数：\"\n\ninput_number = raw_input()\n\nif number == int(input_number):\n    print \"猜对了，这个数是：\"\n    print number\nelse:\n    print \"错了。\"\n\n\n上面的程序已经能够基本走通，但是，还有很多缺陷。\n\n最明显的就是只能让人猜一次，不能多次。怎么修改，能够多次猜呢？动动脑筋之后看代码，或者看官在自己的代码上改改，能不能实现多次猜测？\n\n另外，能不能增强一些友好性呢，让用户知道自己输入的数是大了，还是小了。\n\n根据上述修改想法，新代码如下：\n\n#!/usr/bin/env python\n#coding:utf-8\n\nimport random\n\nnumber = random.randint(1,100)\n\nprint \"请输入一个100以内的自然数：\"\n\ninput_number = raw_input()\n\nif number == int(input_number):\n    print \"猜对了，这个数是：\"\n    print number\nelif number > int(input_number):\n    print \"小了\"\n    input_number = raw_input()\nelif number < int(input_number):\n    print \"大了\"\n    input_number = raw_input()\nelse:\n    print \"错了。\"\n\n\n嗯，似乎比原来进步一点点，因为允许用户输入第二次了。同时也告诉用户输入的是大还是小了。但，这也不行呀。应该能够输入很多次，直到正确为止。\n\n是的。这就要用到一个新的东西：循环。如果看官心急，可以google一下while或者for循环，来进一步完善这个游戏，如果不着急，可以等等，随后我也会讲到这部分。\n\n这个游戏还没有完呢，即使用了循环，后面还会继续。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "3"}