{"title": "[零基础学python]有容乃大的list(3) - 易水禾 ", "index": "零基础,python", "content": "现在是讲lis的第三章了。俗话说，事不过三，不知道在开头，我也不知道这一讲是不是能够把基础的list知识讲完呢。哈哈。其实如果真正写文章，会在写完之后把这句话删掉的。而我则是完全像跟看官聊天一样，就不删除了。\n\n继续。\n\n对list的操作\n\n向list中插入一个元素\n\n前面有一个向list中追加元素的方法，那个追加是且只能是将新元素添加在list的最后一个。如：\n\n>>> all_users = [\"qiwsir\",\"github\"]\n>>> all_users.append(\"io\")\n>>> all_users\n['qiwsir', 'github', 'io']\n\n\n从这个操作，就可以说明list是可以随时改变的。这种改变的含义只它的大小即所容纳元素的个数以及元素内容，可以随时直接修改，而不用进行转换。这和str有着很大的不同。对于str，就不能进行字符的追加。请看官要注意比较，这也是str和list的重要区别。\n\n与list.append(x)类似，list.insert(i,x)也是对list元素的增加。只不过是可以在任何位置增加一个元素。\n\n我特别引导列为看官要通过官方文档来理解：\n\n\n  list.insert(i, x)\n\n\n\n  \n    Insert an item at a given position. The first argument is the index of the element before which to insert, so a.insert(0, x) inserts at the front of the list, and a.insert(len(a), x) is equivalent to a.append(x).\n  \n\n\n这次就不翻译了。如果看不懂英语，怎么了解贵国呢？一定要硬着头皮看英语，不仅能够学好程序，更能...（此处省略两千字）\n\n根据官方文档的说明，我们做下面的实验，请看官从实验中理解：\n\n>>> all_users\n['qiwsir', 'github', 'io']\n>>> all_users.insert(\"python\")      #list.insert(i,x),要求有两个参数，少了就报错\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: insert() takes exactly 2 arguments (1 given)\n\n>>> all_users.insert(0,\"python\")\n>>> all_users\n['python', 'qiwsir', 'github', 'io']\n\n>>> all_users.insert(1,\"http://\")\n>>> all_users\n['python', 'http://', 'qiwsir', 'github', 'io']\n\n>>> length = len(all_users)\n>>> length\n5\n\n>>> all_users.insert(length,\"algorithm\")\n>>> all_users\n['python', 'http://', 'qiwsir', 'github', 'io', 'algorithm']\n\n\n小结：\n\n\nlist.insert(i,x),将新的元素x 插入到原list中的list[i]前面\n如果i==len(list)，意思是在后面追加，就等同于list.append(x)\n\n删除list中的元素\n\nlist中的元素，不仅能增加，还能被删除。删除list元素的方法有两个，它们分别是：\n\n\n  list.remove(x)\n\n\n\n  \n    Remove the first item from the list whose value is x. It is an error if there is no such item.\n  \n\n\n\n  list.pop([i])\n\n\n\n  \n    Remove the item at the given position in the list, and return it. If no index is specified, a.pop() removes and returns the last item in the list. (The square brackets around the i in the method signature denote that the parameter is optional, not that you should type square brackets at that position. You will see this notation frequently in the Python Library Reference.)\n  \n\n\n我这里讲授python，有一个习惯，就是用学习物理的方法。如果看官当初物理没有学好，那么一定是没有用这种方法，或者你的老师没有用这种教学法。这种方法就是：自己先实验，然后总结规律。\n\n先实验list.remove(x)，注意看上面的描述。这是一个能够删除list元素的方法，同时上面说明告诉我们，如果x没有在list中，会报错。\n\n>>> all_users\n['python', 'http://', 'qiwsir', 'github', 'io', 'algorithm']\n>>> all_users.remove(\"http://\")\n>>> all_users       #的确是把\"http://\"删除了\n['python', 'qiwsir', 'github', 'io', 'algorithm']\n\n>>> all_users.remove(\"tianchao\")        #原list中没有“tianchao”，要删除，就报错。\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: list.remove(x): x not in list\n\n\n注意两点：\n\n\n如果正确删除，不会有任何反馈。没有消息就是好消息。\n如果所删除的内容不在list中，就报错。注意阅读报错信息：x not in list\n\n看官是不是想到一个问题？如果能够在删除之前，先判断一下这个元素是不是在list中，在就删，不在就不删，不是更智能吗？\n\n如果看官想到这里，就是在编程的旅程上一进步。python的确让我们这么做。\n\n>>> all_users\n['python', 'qiwsir', 'github', 'io', 'algorithm']\n>>> \"python\" in all_users       #这里用in来判断一个元素是否在list中，在则返回True，否则返回False\nTrue\n\n>>> if \"python\" in all_users:\n...     all_users.remove(\"python\")\n...     print all_users\n... else:\n...     print \"'python' is not in all_users\"\n... \n['qiwsir', 'github', 'io', 'algorithm']     #删除了\"python\"元素\n\n>>> if \"python\" in all_users:\n...     all_users.remove(\"python\")\n...     print all_users\n... else:\n...     print \"'python' is not in all_users\"\n... \n'python' is not in all_users        #因为已经删除了，所以就没有了。\n\n\n上述代码，就是两段小程序，我是在交互模式中运行的，相当于小实验。\n\n另外一个删除list.pop([i])会怎么样呢？看看文档，做做实验。\n\n>>> all_users\n['qiwsir', 'github', 'io', 'algorithm']\n>>> all_users.pop()     #list.pop([i]),圆括号里面是[i]，表示这个序号是可选的\n'algorithm'             #如果不写，就如同这个操作，默认删除最后一个，并且将该结果返回\n\n>>> all_users\n['qiwsir', 'github', 'io']\n\n>>> all_users.pop(1)        #指定删除编号为1的元素\"github\"\n'github'\n\n>>> all_users\n['qiwsir', 'io']\n>>> all_users.pop()\n'io'\n\n>>> all_users           #只有一个元素了，该元素编号是0\n['qiwsir']\n>>> all_users.pop(1)    #但是非要删除编号为1的元素，结果报错。注意看报错信息\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nIndexError: pop index out of range      #删除索引超出范围，就是1不在list的编号范围之内\n\n\n给看官留下一个思考题，如果要向前面那样，能不能事先判断一下要删除的编号是不是在list的长度范围（用len(list)获取长度)以内？然后进行删除或者不删除操作。\n\nlist是一个有意思的东西，内涵丰富。看来下一讲还要继续讲list。并且可能会做一个有意思的游戏。请期待。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "2"}