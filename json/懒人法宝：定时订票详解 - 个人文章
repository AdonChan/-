{"title": "懒人法宝：定时订票详解 - 个人文章 ", "index": "linux,github,shell,python", "content": "前言\n暑假闲来无事，每天上午的宝贵时间想去游泳，减减肚子，练练耐力，正好我们那个地方游泳馆上午提供免费的票，但是，需要前一天早上七点开始预定第二天上午的免费游泳票。往年暑假，我是每天早上六点五十五准时起床，眼睛半睁不睁的等着七点一到，立马抢票！抢完一脸解脱地瘫倒在床上继续睡觉。简直就是煎熬啊，我在学校都没起这么早过。\n今年暑假，我实在是不想再早起了，考虑到订票网站的订票流程非常简易，是否能写一个脚本代替我每天早上完成订票任务呢。答案是肯定的。最后我大概虽然其实用到的方法很简单，但是既然是在生活中难得遇到的实际问题，我也做一个分享。之前我是没有任何刷票、爬虫经历的。（本人专注数据挖掘）\n技术改变生活，本篇博客的目的仅仅是分享并记录一下用互联网方法解决懒人在生活中的实际问题。\n\n背景\n订票网站：韵动株洲游泳馆订票网站订票规则：用户当天7:00—22:00，预约第二日免费游泳公益券领取资格，每位用户每天只能预订一张（如有余票当天也可预订）。游泳馆概况：（嘿嘿，我大株洲就是厉害）注意：本脚本只实现简单的订票功能，因为该网站无需验证码（很多外行的朋友，虽然我也是外行，都问我能不能帮忙去12306抢票。。。）\n功能目标\n\n自动登录功能（无验证码！）\n自动选择预定场地、时间等信息，并提交表单\n支持多账号同时进行刷票任务\n定时任务\n邮件提醒抢票结果\n\n工具模块\n\npython\nsplinter\nshell\ncrontab或plist\n\n流程分析\n直接进入游泳馆预订界面（还有很多其他的运动项目可以预约哦，羽毛球、室内足球...真想给株洲政府点个赞）点击右上角登录按钮进入登录页面输入手机账号和密码，点击登录按钮进入登录状态，此时页面会跳转到预订界面选择好预定日期、预定时间，点击确认预订按钮确认预订确认对话框点击确认，完成所有预订过程（非预订时间或者预定完了所以这里显示\"undefined\"）以上就是整个预定流程，很简单吧！正是这么简单，让我萌生了花点时间写个脚本来代替我订票的邪恶想法！\n功能实现\nSplinter环境配置\n\n下载并安装splinter\n下载并安装chrome Web驱动\npython splinter参考教程\n\n访问游泳馆预定界面\n\nfrom splinter.browser import Browser\nfrom time import sleep\nimport datetime\nimport mail\nimport sys\nurl = \"http://www.wentiyun.cn/venue-722.html\"\n#配置自己的chrome驱动路径\nexecutable_path = {'executable_path':'/usr/local/Cellar/chromedriver/2.31/bin/chromedriver'}\n\ndef visitWeb(url):\n    #访问网站\n    b = Browser('chrome', **executable_path)\n    b.visit(url)\n    return b\n进入登录页面并账号密码登录\ndef login(b, username, passwd):\n    try:\n        lf = b.find_link_by_text(u\"登录\")#登录按钮是链接的形式\n        sleep(0.1)\n        b.execute_script(\"window.scrollBy(300,0)\")#下滑滚轮，将输入框和确认按钮移动至视野范围内\n        lf.click()\n        b.fill(\"username\",username) # username部分输入自己的账号\n        b.fill(\"password\",passwd) # passwd部分输入账号密码\n        button = b.find_by_name(\"subButton\")\n        button.click()\n    except Exception, e:\n        print \"登录失败，请检查登陆相关:\", e\n        sys.exit(1)\n持续刷票策略\n一旦以用户的身份进入到预订界面，就需要按时间、场地信息要求进行选择，并确认。考虑到很可能提前预约或其他情况导致某次订票失败，所以，仅仅一次订票行为是不行的，需要反复订票行为，直到订票成功，于是，订票策略如下：\n\n反复订票行为，退出条件：订票一分钟，即到七点过一分后退出，或预订成功后退出\n一次完整的订票退出后（满足1退出条件），为了保险，重启chrome，继续预订操作，十次操作后，退出预订程序\n时间选择：获取明天日期，选择预订明天的游泳票\n\ndef getBookTime():\n    #今天订明天，时间逻辑\n    date = datetime.datetime.now() + datetime.timedelta(days=1)\n    dateStr = date.strftime('%Y-%m-%d')\n    year, month, day = dateStr.split('-')\n    date = '/'.join([month, day])\n    return date\ndef timeCondition(h=7.0,m=1.0,s=0.0):\n    #退出时间判断\n    now = datetime.datetime.now()\n    dateStr = now.strftime('%H-%M-%S')\n    hour, minute, second = dateStr.split('-')\n    t1 = h*60.0 + m + s/60.0\n    t2 = float(hour)*60.0 + float(minute) + float(second)/60.0\n    if t1 >= t2:\n        return True\n    return False\ndef book(b):\n    #反复订票行为,直到时间条件达到或预订成功退出\n    while(True):\n        start = datetime.datetime.now()\n        startStr = start.strftime('%Y-%m-%d %H:%M:%S')\n        print \"********** %s ********\" % startStr\n        try:\n            #选择日期\n            date = getBookTime()\n            b.find_link_by_text(date).click()\n            #按钮移到视野范围内\n            b.execute_script(\"window.scrollBy(0,100)\")\n            #css显示确认按钮\n            js = \"var i=document.getElementsByClassName(\\\"btn_box\\\");i[0].style=\\\"display:true;\\\"\"\n            b.execute_script(js)\n            #点击确认\n            b.find_by_name('btn_submit').click()\n            sleep(0.1)\n            b.find_by_id('popup_ok').click()\n            sleep(0.1)\n            #测试弹出框\n            #test(b)\n            #sleep(0.1)\n            result = b.evaluate_script(\"document.getElementById(\\\"popup_message\\\").innerText\")\n            b.find_by_id('popup_ok').click()\n            sleep(0.1)\n            print result\n            end = datetime.datetime.now()\n            print \"预订页面刷票耗时:%s秒\" % (end-start).seconds\n            if result == \"预订成功!\".decode(\"utf-8\"):\n                return True\n            elif not timeCondition():\n                return False\n            b.reload()\n        except Exception, e:\n            print '预订页面刷票失败,原因:', e\n            end = datetime.datetime.now()\n            print \"共耗时:%s秒\" % (end-start).seconds\n            #判读当前时间如果是7点过5分了，放弃订票\n            if not timeCondition():\n                return False\n            b.reload()\ndef tryBook(username, passwd):\n    #持续刷票10次后，退出程序\n    r = False\n    for i in xrange(10):\n        try:\n            start = datetime.datetime.now()\n            startStr = start.strftime('%Y-%m-%d %H:%M:%S')\n            print \"========== 第%s次尝试,开始时间%s ========\" % (i, startStr)\n            b = visitWeb(url)\n            login(b, username, passwd)\n            r = book(b)\n            if r:\n                print \"book finish!\"\n                b.quit()\n                break\n            else:\n                print \"try %s again, 已经七点1分，抢票进入尾声\" % i\n                b.quit()\n            end = datetime.datetime.now()\n            print \"========== 第%s次尝试结束,共耗时%s秒 ========\" % (i, (end-start).seconds)\n        except Exception, e:\n            print '第%s次尝试失败，原因:%s' % (i, e)\n            end = datetime.datetime.now()\n            print \"========== 第%s次尝试结束,共耗时%s秒 ========\" % (i, (end-start).seconds)\n            return False\n    return r\n邮件服务\n\n参考廖雪峰老师的实现哦，程序其实不麻烦，主要是邮箱的SMTP服务！\n需要邮箱开通SMTP代理服务，如果你qq号是很久之前注册的了，那我不推荐使用qq邮箱，一系列的密保会让你崩溃。推荐使用新浪邮箱。\n发送程序如下mail.py\n\nimport smtplib  \nimport traceback  \nfrom email.mime.text import MIMEText  \nfrom email.mime.multipart import MIMEMultipart  \nfrom email.header import Header\nfrom email.utils import parseaddr, formataddr\n'''\nto_addr = \"844582201@qq.com\"  \npassword = \"*****\"  \nfrom_addr = \"m13072163887@163.com\"  \nmsg = MIMEText('hello, send by Python...', 'plain', 'utf-8')\nserver = smtplib.SMTP(\"smtp.163.com\") # SMTP协议默认端口是25\nserver.login(from_addr, password)\nserver.sendmail(from_addr, [to_addr], msg.as_string())\nserver.quit()\n'''\n'''\n    @subject:邮件主题 \n    @msg:邮件内容 \n    @toaddrs:收信人的邮箱地址 \n    @fromaddr:发信人的邮箱地址 \n    @smtpaddr:smtp服务地址，可以在邮箱看，比如163邮箱为smtp.163.com \n    @password:发信人的邮箱密码 \n''' \ndef _format_addr(s):\n    name, addr = parseaddr(s)\n    return formataddr((Header(name, 'utf-8').encode(), addr))\n    \ndef sendmail(subject,msg,toaddrs,fromaddr,smtpaddr,password):  \n    mail_msg = MIMEMultipart()  \n    if not isinstance(subject,unicode):  \n        subject = unicode(subject, 'utf-8')  \n    mail_msg['Subject'] = subject  \n    mail_msg['From'] = _format_addr('Python-auto <%s>' % fromaddr)\n    mail_msg['To'] = ','.join(toaddrs)  \n    mail_msg.attach(MIMEText(msg, 'plain', 'utf-8'))  \n    try:  \n        s = smtplib.SMTP()  \n        s.set_debuglevel(1)\n        s.connect(smtpaddr,25)  #连接smtp服务器  \n        s.login(fromaddr,password)  #登录邮箱  \n        s.sendmail(fromaddr, toaddrs, mail_msg.as_string()) #发送邮件  \n        s.quit()  \n    except Exception,e:  \n       print \"Error: unable to send email\", e  \n       print traceback.format_exc()  \n\ndef send(msg):\n    fromaddr = \"mynameislps@sina.com\"  \n    smtpaddr = \"smtp.sina.com\"\n    password = \"*****\"  \n    subject = \"这是邮件的主题\"\n    toaddrs = [\"844582201@qq.com\"]\n    sendmail(subject,msg,toaddrs,fromaddr,smtpaddr,password)\n定时任务策略\n每天七点，抢票开始。为了保险并且考虑到上文所构建的抢票策略，我们可以六点五十九分开始操作（考虑到还要访问预订页面、登录页面以及登录操作等，万一有一定的延时）。于是我们将任务布置在每天早上的六点五十九分。定时任务的工具有两种，一种是使用Linux自带的定时工具crontab，一种是使用比较优雅的Mac自带的定时工具plist。这两种工具非常简单实用，这里也不做太多介绍。\n多账号同时订票操作策略\n这就需要借助强大的shell脚本，我们把需要订票的帐号密码信息配置在shell内，同时shell根据这些帐号信息启动不同的进程来同时完成订票任务。\n#!/bin/bash\nmy_array=(\"130****3887\" \"****\"\\\n        \"187****4631\" \"****\")\n#待操作用户个数\nlen=${#my_array[@]}\nlen=`expr $len / 2`\ni=0\nwhile (($i < $len))\ndo \n    echo \"第($i)个用户为: ${my_array[2*i]}\"\n    logname=\"/Users/lps/work/program/ticketReservation/log/${my_array[2*i]}.log\"\n    nohup /Users/lps/anaconda/bin/python /Users/lps/work/program/ticketReservation/book.py ${my_array[2*i]} ${my_array[2*i+1]} > ${logname} 2>&1 &\n    i=`expr $i + 1`\ndone\n日志服务\n良好、健壮的程序需要一套比较完备的日志系统，本程序的日志服务都在上文中的程序中反映了，当然不见得是最好的。仅供参考。这方便我们定位错误或失败的发生位置！\n完整的工程在Github上：https://github.com/lps683/tic...\n某些蛋疼的问题\n需要将按钮／链接显示在视野范围内才能进行点击操作。上文程序中诸如b.execute_script(\"window.scrollBy(300,0)\")等操作都是上下调整页面位置，将按钮显示在视野范围内；如果某些按钮是invisible的，那么我们可以通过修改JS中控件的属性来显示按钮。如上文程序中的\n#css显示确认按钮\njs = \"var i=document.getElementsByClassName(\\\"btn_box\\\");i[0].style=\\\"display:true;\\\"\"\nb.execute_script(js)\n弹出框定位问题：最后预定成功会弹出一个确认框：\n那要获得这个对话框并不容易。我尝试过诸如alert = browser.get_alert() alert.text alert.accept() alert.dismiss()之类的办法都没有成功。最后右键这个对话框，找到它的源码，根据ID信息找到这个对话框才解决的！\n总结\n\n技术上来说，本文并没有什么亮点，如果要应付12306等一系列的网站，那还有很多很麻烦的东西要研究。但是，能用技术来解决生活中的实际问题，何乐而不为呢！\n其实这个定时订票程序是一个很流程化的东西，实际上就是程序在模拟人的各种行为，所以在coding前一定要好好测试网站订票流程，把握订票的规律。\n有和同学交流，如果能catch到预定的消息格式，那岂不是更加简便了！嗯，我觉得很有道理，不过没有作尝试，我对真正的那些刷票软件也非常感兴趣，但是现在还没有时间去研究，也欢迎大牛指点！\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}