{"title": "Python中必备的字符串拼接方法，你知道多少？ - 个人文章 ", "index": "python", "content": "python拼接字符串一般有以下几种方法：\n①直接通过（+）操作符拼接\ns = 'Hello'+' '+'World'+'!'print(s)\n输出结果：Hello World!\n使用这种方式进行字符串连接的操作效率低下，因为python中使用 + 拼接两个字符串时会生成一个新的字符串，生成新的字符串就需要重新申请内存，当拼接字符串较多时自然会影响效率。\n②通过str.join()方法拼接\nstrlist=['Hello',' ','World','!']print(''.join(strlist))\n输出结果：Hello World!\n这种方式一般常使用在将集合转化为字符串，''.join()其中''可以是空字符，也可以是任意其他字符，当是任意其他字符时，集合中字符串会被该字符隔开，例如：\n​strlist=['Hello',' ','World','!']print(','.join(strlist))输出结果：Hello, ,World,!\n③通过str.format()方法拼接\ns='{} {}!'.format('Hello','World')print(s)输出结果：Hello World!\n通过这种方式拼接字符串需要注意的是字符串中{}的数量要和format方法参数数量一致，否则会报错。\n④通过(%)操作符拼接\ns = '%s %s!' % ('Hello', 'World')print(s)输出结果：Hello World!\n这种方式与str.format()使用方式基本一致。\n⑤通过()多行拼接\ns = (\n'Hello'\n' '\n'World'\n'!'\n)print(s)\n输出结果：Hello World!\npython遇到未闭合的小括号，自动将多行拼接为一行。\n⑥通过string模块中的Template对象拼接\nfrom string import Templates = Template('${s1} ${s2}!') print(s.safe_substitute(s1='Hello',s2='World')) \n输出结果：Hello World!\nTemplate的实现方式是首先通过Template初始化一个字符串。这些字符串中包含了一个个key。通过调用substitute或safe_subsititute，将key值与方法中传递过来的参数对应上，从而实现在指定的位置导入字符串。这种方式的好处是不需要担心参数不一致引发异常，如：\nfrom string import Templates = Template('${s1} ${s2} ${s3}!') print(s.safe_substitute(s1='Hello',s2='World')) \n输出结果：Hello World ${s3}!\n⑦通过F-strings拼接\n在python3.6.2版本中，PEP 498 提出一种新型字符串格式化机制，被称为“字符串插值”或者更常见的一种称呼是F-strings，F-strings提供了一种明确且方便的方式将python表达式嵌入到字符串中来进行格式化：\ns1='Hello's2='World'print(f'{s1} {s2}!')输出结果：Hello World!\n在F-strings中我们也可以执行函数：\ndef power(x):\nreturn x*x\nx=4print(f'{x} * {x} = {power(x)}')\n输出结果：4 * 4 = 16\n而且F-strings的运行速度很快，比%-string和str.format()这两种格式化方法都快得多。\n原文：https://blog.csdn.net/weixin_...\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "2"}