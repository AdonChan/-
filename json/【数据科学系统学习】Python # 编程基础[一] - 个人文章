{"title": "【数据科学系统学习】Python # 编程基础[一] - 个人文章 ", "index": "python", "content": "关于数据科学在做什么，我们已经在前两篇文章中进行了总结，即专题概述和描述性统计分析。要进行数据科学的探索，需要一个“好工具”，就是Python。从本篇开始，将总结学习Python的学习要点。\n\nPython是什么\n官方对 Python 的介绍如下：\n“Python 是一款易于学习且功能强大的编程语言。 它具有高效率的数据结构，能够简单又有效地实现面向对象编程。Python 简洁的语法与动态输入之特性，加之其解释性语言的本质，使得它成为一种在多种领域与绝大多数平台都能进行脚本编写与应用快速开发工作的理想语言。”\nPython 名字的由来：\n“Python 的创造者吉多·范罗苏姆（Guido van Rossum）采用 BBC 电视节目《蒙提·派森的飞行马戏团（Monty Python's Flying Circus，一译巨蟒剧团）》的名字来为这门编程语言命名。尽管他本人并不特别喜欢蟒蛇这种通过在猎物身边卷曲自己的身体以此来碾碎猎物身体来进食的动物。”\n基础\n字面常量\n字面常量（Literal Constants）是诸如 5、1.23 这样的数字，或者是如“这是一串文本”或“This is a string”这样的文本。它们是字面上的，所用的就是它字面意义上的值或是内容。\n数字\n数字主要分为两种类型——整数（Integers）与浮点数（Floats）。如 2 和 3.23 或 52.3E-4，其中 E 表示 10 的幂。\n字符串\n字符串（String）是字符（Characters）的序列（Sequence）。字符串是不可变的。\n格式化方法一个字符串可以使用某些特定的格式（Specification），随后，format 方法将被调用，使用这一方法中与之相应的参数替换这些格式。即将每个参数值替换至格式所在的位置。举例如下：\nage = 14\nname = 'Tom'\n\nprint('{0} is a {1} years old boy'.format(name, age))\nprint('{0} is a good boy'.format(name))”\n\n此外，可以指定更详细的格式：\n# 对于浮点数 '0.333' 保留小数点(.)后三位\nprint('{0:.3f}'.format(1.0/3))\n\n# 使用下划线填充文本，并保持文字处于中间位置\n# 使用 (^) 定义 '___hello___'字符串长度为 11\nprint('{0:_^11}'.format('hello'))\n\n# 基于关键词输出 'Jack was confirmed as captain for the rest of the season'  \nprint('{name} was confirmed as {position} for the rest of the season'.format(name='Jack', position='captain'))\n每次调用print将在独立的一行中打印，即总是以换行符\\n结尾，若有时需避免这一换行符，可以end指定其结尾方式。例如以空白结尾：\nprint('a', end=' ')\nprint('b', end=' ')\nprint('c')\n输出a b c.\n转义序列要输入如What's your name?这样的字符串有两种方式。一种是使用双引号\"What's your name?\"，另一种需要用到反斜杠\\来指定单引号'What\\'s your name?'。其它需要转义的字符同理，通过反斜杠\\来转义，包括它自身。\n原始字符串在处理正则表达式时，应全程使用原始字符串，即在字符串前增加r或R来指定一个原始字符串。如'\\\\1'可以通过'r\\1'来实现。\n变量\n变量的值是可以变化的，即可以用变量储存任何东西，只需通过一些方式访问这些变量。\n标识符命名\n标识符（Identifiers）是为某些东西提供的给定名称。变量是标识符的一个例子。命名规则如下：\n\n第一个字符必须是字母表中的字母（大写 ASCII 字符或小写 ASCII 字符或 Unicode 字符）或下划线（_）。\n标识符的其它部分可以由字符（大写 ASCII 字符或小写 ASCII 字符或 Unicode 字符）、下划线（_）、数字（0~9）组成。\n标识符名称区分大小写。\n\n数据类型\n变量可以将各种形式的值保存为不同的数据类型（Data Type）。基本的类型是数字与字符串，在面向对象编程中将介绍如何通过类来创建我们自己的类型。\n对象\nPython 是强（Strongly）面向对象的，因为所有的一切都是对象， 包括数字、字符串与函数。\n运算符与表达式\n运算符\n\n加+\n\n减-\n\n乘*\n\n乘方**\n\n除/\n\n整除//\n\n取模%\n\n左移<<\n\n右移>>\n\n按位与&\n\n按位或|\n\n按位异或^\n\n按位取反~\n\n小于<\n\n大于>\n\n小于等于<=\n\n大于等于>=\n\n等于==\n\n不等于!=\n\n布尔“非”not\n\n布尔“与”and\n\n布尔“或”or\n\n\n表达式在下面的例子中：\nlength = 5\nbreadth = 2\n\narea = length * breadth\nprint('Area is', area)\nprint('Perimeter is', 2 * (length + breadth))\n我们将表达式 length * breadth 的结果存储在变量 area 中并将其通过使用 print 函数打印出来。在第二种情况中，我们直接在 print 函数中使用了表达式 2 * (length + breadth) 的值。\n控制流\n在 Python 中有三种控制流语句，if、for和while。\n条件\nif age >= 18:\n\n注意不要少写了冒号:。\nelif是else if的缩写，完全可以有多个elif，所以if语句的完整形式就是：\nif <条件判断1>:\n    <执行1>\nelif <条件判断2>:\n    <执行2>\nelif <条件判断3>:\n    <执行3>\nelse:\n    <执行4>\n\nif语句执行有个特点，它是从上往下判断，如果在某个判断上是True，把该判断对应的语句执行后，就忽略掉剩下的elif和else。\nif判断条件还可以简写，比如写：\nif x:\n    print('True')\n\n只要x是非零数值、非空字符串、非空list等，就判断为True，否则为False。\n循环Python 的循环有两种。\n第一种是for...in循环，依次把list或tuple中的每个元素迭代出来\n所以for x in ...循环就是把每个元素代入变量x，然后执行缩进块的语句。\nPython 提供一个range()函数，可以生成一个整数序列，再通过list()函数可以转换为list。比如range(5)生成的序列是从 0 开始小于 5 的整数：\n计算：\n第二种循环是while循环：\n在循环中，break语句可以提前退出循环。\n在循环过程中，也可以通过continue语句，跳过当前的这次循环，直接开始下一次循环。continue的作用是提前结束本轮循环，并直接开始下一轮循环。\n要特别注意，不要滥用break和continue语句。break和continue会造成代码执行逻辑分叉过多，容易出错。大多数循环并不需要用到break和continue语句，上面的两个例子，都可以通过改写循环条件或者修改循环逻辑，去掉break和continue语句。\n有些时候，如果代码写得有问题，会让程序陷入“死循环”，也就是永远循环下去。这时可以用Ctrl+C退出程序，或者强制结束 Python进程。\n函数\n函数是什么\n函数（Functions）是指可重复使用的程序片段。它们允许你为某个代码块赋予名字，允许你通过这一特殊的名字在你的程序任何地方来运行代码块，并可重复任何次数。这就是所谓的调用（Calling）函数。\n在 Python 中，函数可以通过关键字 def 来定义。这一关键字后跟一个函数的标识符名称，再跟一对圆括号，其中可以包括一些变量的名称，再以冒号结尾，结束这一行。随后而来的语句块是函数的一部分。\n在定义函数时给定的名称称作“形参”（Parameters），在调用函数时你所提供给函数的值称作“实参”（Arguments）。\n调用函数\n要调用一个函数，需要知道函数的名称和参数。函数的参数只是输入到函数之中，以便我们可以传递不同的值给它，并获得相应的结果。\nPython 内置的常用函数包括数据类型转换函数，比如int()函数可以把其他数据类型转换为整数。用input()读取用户的输入：\n因为input()返回的数据类型是str，str不能直接和整数比较，必须先把str转换成整数。Python 提供了int()函数来完成这件事情：\n函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”：\n如果函数调用出错，一定要学会看错误信息。\n定义函数\n在 Python 中，定义一个函数要使用def语句，依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，函数的返回值用return语句返回。\n在 Python 交互环境中定义函数时，注意 Python 会出现...的提示。函数定义结束后需要按两次回车重新回到>>>提示符下：\n如果你已经把my_abs()的函数定义保存为abstest.py文件了，那么，可以在该文件的当前目录下启动Python 解释器，用from abstest import my_abs来导入my_abs()函数，注意abstest是文件名（不含.py扩展名）。\n定义一个什么事也不做的空函数，可以用pass语句：\ndef nop():\n    pass\n\npass语句什么都不做，实际上它可以用作为占位符，比如现在还没想好怎么写函数的代码，就可以先放一个pass，让代码能运行起来。\npass还可以用在其他语句里，比如：\nif age >= 18:\n    pass\n\n缺少了pass，代码运行就会有语法错误。\n数据类型检查可以用内置函数isinstance()实现。\nPython 的函数返回多值其实就是返回一个tuple；Python 函数返回的是单一值时，返回值仍然是一个tuple。但是，在语法上，返回一个tuple可以省略括号，而多个变量可以同时接收一个tuple，按位置赋给对应的值。函数可以同时返回多个值，但其实就是一个tuple。\n函数执行完毕也没有return语句时，自动return None。\n函数的参数\nPython 的函数定义非常简单，但灵活度却非常大。除了正常定义的必选参数外，还可以使用默认参数、可变参数和关键字参数，使得函数定义出来的接口，不但能处理复杂的参数，还可以简化调用者的代码。\n位置参数：\npower(x, n)函数有两个参数：x和n，这两个参数都是位置参数，调用函数时，传入的两个值按照位置顺序依次赋给参数x和n。\n默认参数：对于一些函数来说，你可能为希望使一些参数可选并使用默认的值，以避免用户不想为他们提供值的情况。默认参数值可以有效帮助解决这一情况。你可以通过在函数定义时附加一个赋值运算符=来为参数指定默认参数值。要注意到，默认参数值应该是常数。更确切地说，默认参数值应该是不可变的。\n\nn = 2 是默认参数\n定义默认参数要牢记一点：默认参数必须指向不变对象。且只有那些位于参数列表末尾的参数才能被赋予默认参数值，意即在函数的参数列表中拥有默认参数值的参数不能位于没有默认参数值的参数之前。 \n可变参数：有时你可能想定义的函数里面能够有任意数量的变量，也就是参数数量是可变的，这可以通过使用星号来实现。即传入的参数个数是可变的。\n\n我们声明一个诸如 *param 的星号参数时，从此处开始直到结束的所有位置参数（Positional Arguments）都将被收集并汇集成一个称为param的元组（Tuple）。\n类似地，当我们声明一个诸如 **param 的双星号参数时，从此处开始直至结束的所有关键字参数都将被收集并汇集成一个名为 param 的字典（Dictionary）。\n关键字参数：如果你有一些具有许多参数的函数，而你又希望只对其中的一些进行指定，那么你可以通过命名它们来给这些参数赋值——这就是关键字参数（Keyword Arguments）——我们使用命名（关键字）而非位置来指定函数中的参数。\n关键字参数允许你传入 0 个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。\n举个例子，扩展函数的功能。试想你正在做一个用户注册的功能，除了用户名和年龄是必填项外，其他都是可选项，利用关键字参数来定义这个函数就能满足注册的需求。\n和可变参数类似，也可以先组装出一个dict，然后，把该dict转换为关键字参数传进去：\n命名关键字参数：如果要限制关键字参数的名字，就可以用命名关键字参数，例如，只接收city和job作为关键字参数。这种方式定义函数并调用：\n和关键字参数**kw不同，命名关键字参数需要一个特殊分隔符*，*后面的参数被视为命名关键字参数。\n命名关键字参数必须传入参数名，这和位置参数不同。如果没有传入参数名，调用将报错。\n使用命名关键字参数时，要特别注意，如果没有可变参数，就必须加一个*作为特殊分隔符。如果缺少*，Python 解释器将无法识别位置参数和命名关键字参数，即缺少 *，city和job被视为位置参数。\n\n参数组合：在 Python 中定义函数，可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这 5 种参数都可以组合使用。\n但是参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。虽然可以组合多达 5 种参数，但不要同时使用太多的组合，否则函数接口的可理解性很差。\n通过一个tuple和dict，你也可以调用函数：\n对于任意函数，都可以通过类似func(*args, **kw)的形式调用它，无论它的参数是如何定义的。\n递归函数\n如果一个函数在内部调用自身本身，这个函数就是递归函数。理论上，所有的递归函数都可以写成循环的方式，但循环的逻辑不如递归清晰。\n使用递归函数需要注意防止栈溢出。在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出。\n通过下面的代码可以查看你的电脑最大算到多少：\n解决递归调用栈溢出的方法是通过尾递归优化，事实上尾递归和循环的效果是一样的，所以，把循环看成是一种特殊的尾递归函数也是可以的。\n尾递归是指，在函数返回的时候，调用自身本身，并且，return语句不能包含表达式。这样，编译器或者解释器就可以把尾递归做优化，使递归本身无论调用多少次，都只占用一个栈帧，不会出现栈溢出的情况。\n要改成尾递归方式，需要多一点代码，主要是要把每一步的乘积传入到递归函数中。Python 标准的解释器没有针对尾递归做优化，任何递归函数都存在栈溢出的问题。\n\n\n参考链接：简明Python教程（电子书可阅读）廖雪峰Python教程\n如有不足，欢迎指正。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "1"}