{"title": "【译】自己动手写区块链 - 戎码半生的精选集 ", "index": "python", "content": "目前大多数对于区块链的文章都是停留在概念性的描述，大肆宣扬其颠覆性，本文则反其道行之，以一个程序员的视角，通过300行代码，快速实现了一个区块链原型。虽然没有覆盖区块链的全部内容（如Merkle树），但对于理解区块链的核心技术仍大有裨益。----译者注能够点进这篇文章，说明你也像我一样对加密货币的兴起十分激动，并想了解加密货币的支撑技术---区块链是如何工作的。但理解区块链并不那么轻松，至少对我来说如此。我看了很多相关的视频和教程，却沮丧地发现实例真是太少了。我喜欢通过实践学习。这种方式使我在代码层面思考问题，并发现关键所在。如果你和我一样，那么在本文结尾你将构建一个功能完备的区块链并对其工作机制有深刻的理解。\n写在开始之前。。。\n首先，区块链是一系列称作区块（Block）的结构顺序链接而成的不可改变的记录。块中可以包含交易记录、文件或者其他任何你想存储的数据。需要注意的是块与块之间通过hash值链接。如果你不清楚hash是什么，请参考What Are Hash Functions。\n本文适合哪些人看？你应该懂得一些基本的Python知识，同时也应该对HTTP请求有所理解，因为我们的区块链是运行在HTTP协议之上的。\n我需要准备什么？请确保Python3.6及以上版本和pip工具已经安装。还需要安装Flask和requests库。\npip install Flask==0.12.2 requests==2.18.4\n对了，你还需要一个HTTP客户端，比如Postman或者cURL，当然，其他的也可以。\n最终的代码哪里可以获取？点击这里\n第一步：构建区块链\n创建一个新的Python文件，名为blockchain.py，我们所有的逻辑都在一个文件完成。\n表示一个区块链\n我们创建一个BlockChain类，其构造器会创建两个列表，一个存储区块链，另一个存储交易。下面是我们这个类的第一个版本：\nclass Blockchain(object):\n    def __init__(self):\n        self.chain = []\n        self.current_transactions = []\n        \n    def new_block(self):\n        # Creates a new Block and adds it to the chain\n        pass\n    \n    def new_transaction(self):\n        # Adds a new transaction to the list of transactions\n        pass\n    \n    @staticmethod\n    def hash(block):\n        # Hashes a Block\n        pass\n\n    @property\n    def last_block(self):\n        # Returns the last Block in the chain\n        pass\n我们的BlockChain类负责管理整个区块链，它会存储交易并为新增区块等操作提供辅助方法。下面，我们来实现这些方法。\n区块是什么\n每个区块都有一个索引（index），一个时间戳（timestamp），一系列交易，一个工作量证明（稍后详述）和前置区块的哈希值。下面是单个区块的一个简单实例：\nblock = {\n    'index': 1,\n    'timestamp': 1506057125.900785,\n    'transactions': [\n        {\n            'sender': \"8527147fe1f5426f9dd545de4b27ee00\",\n            'recipient': \"a77f5cdfa2934df3954a5c7c7da5df1f\",\n            'amount': 5,\n        }\n    ],\n    'proof': 324984774000,\n    'previous_hash': \"2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824\"\n}\n显而易见，所有的区块会构成一条链---因为每个区块都保存了前一区块的hash值。这就是区块链不可篡改的重要原因：如果攻击者损坏了某一区块，那么后面所有的区块都会作废。如果你不明白上面的话，请花一些时间理解，因为这是区块链的核心思想。\n向区块添加交易\n我们需要一个方法来向区块中添加交易记录，这里命名为new_transaction()，代码写的十分直白易懂：\nclass Blockchain(object):\n    ...\n    \n    def new_transaction(self, sender, recipient, amount):\n        \"\"\"\n        Creates a new transaction to go into the next mined Block\n        :param sender: <str> Address of the Sender\n        :param recipient: <str> Address of the Recipient\n        :param amount: <int> Amount\n        :return: <int> The index of the Block that will hold this transaction\n        \"\"\"\n\n        self.current_transactions.append({\n            'sender': sender,\n            'recipient': recipient,\n            'amount': amount,\n        })\n\n        return self.last_block['index'] + 1\n在new_transaction()方法将交易添加进区块之后，区块索引将会被返回，该区块将可能被开采为链的最新区块，这在之后用户提交交易的时候十分有用。\n创建新区块\n当BlockChain类初始化的时候，我们需要产生一个创世区块（genesis block，即没有前置区块的区块）作为区块链的第一个区块。我们还需要添加一个proof字段在创世区块中作为挖矿的结果（或者说本次工作量的证明），我们将在后文继续讨论挖矿。除了产生创世区块，我们还需要完成一些其他辅助方法(new_block(),new_transaction()和hash())：\nimport hashlib\nimport json\nfrom time import time\n\n\nclass Blockchain(object):\n    def __init__(self):\n        self.current_transactions = []\n        self.chain = []\n\n        # Create the genesis block\n        self.new_block(previous_hash=1, proof=100)\n\n    def new_block(self, proof, previous_hash=None):\n        \"\"\"\n        Create a new Block in the Blockchain\n        :param proof: <int> The proof given by the Proof of Work algorithm\n        :param previous_hash: (Optional) <str> Hash of previous Block\n        :return: <dict> New Block\n        \"\"\"\n\n        block = {\n            'index': len(self.chain) + 1,\n            'timestamp': time(),\n            'transactions': self.current_transactions,\n            'proof': proof,\n            'previous_hash': previous_hash or self.hash(self.chain[-1]),\n        }\n\n        # Reset the current list of transactions\n        self.current_transactions = []\n\n        self.chain.append(block)\n        return block\n\n    def new_transaction(self, sender, recipient, amount):\n        \"\"\"\n        Creates a new transaction to go into the next mined Block\n        :param sender: <str> Address of the Sender\n        :param recipient: <str> Address of the Recipient\n        :param amount: <int> Amount\n        :return: <int> The index of the Block that will hold this transaction\n        \"\"\"\n        self.current_transactions.append({\n            'sender': sender,\n            'recipient': recipient,\n            'amount': amount,\n        })\n\n        return self.last_block['index'] + 1\n\n    @property\n    def last_block(self):\n        return self.chain[-1]\n\n    @staticmethod\n    def hash(block):\n        \"\"\"\n        Creates a SHA-256 hash of a Block\n        :param block: <dict> Block\n        :return: <str>\n        \"\"\"\n\n        # We must make sure that the Dictionary is Ordered, or we'll have inconsistent hashes\n        block_string = json.dumps(block, sort_keys=True).encode()\n        return hashlib.sha256(block_string).hexdigest()\n  \n上面的代码十分直白，我还添加了一些注释帮助理解。我们几乎完成了表示一个区块链的工作。但此时，你应该思考下一个区块是如何产生或者说被开采出来的。\n理解工作量证明机制（Proof of Work）\n工作量证明（PoW）算法是用来产生或开采区块的一种机制，PoW的目标是找到一个符合要求的数字，从算力的角度来说这个数字对任何人来说都很难找到却十分容易验证（是否符合要求）。这就是PoW算法的核心思想。我们举一个非常简单的例子来帮助理解：假定我们需要找到一个整数y，使得他和整数x的乘积的哈希值以0结尾，即hash(x*y) = ac23dc...0。如果x=5那么用Python实现如下：\nfrom hashlib import sha256\nx = 5\ny = 0  # We don't know what y should be yet...\nwhile sha256(f'{x*y}'.encode()).hexdigest()[-1] != \"0\":\n    y += 1\nprint(f'The solution is y = {y}')\n第一个符合要求的数是y=21，因为：\nhash(5 * 21) = 1253e9373e...5e3600155e860\n在比特币世界中，PoW算法被称为哈希现金（Hashcash）,它和我们上面的例子没有本质区别。在这算法中，矿工们开始了解决问题的竞赛，优胜者可以产生一个新的区块。通常来说，难度取决于限制字符的数量。矿工将会因为找到一个合法的解答收到一些比特币作为奖励，整个比特币网络能够很容易验证矿工挖掘的区块是否合法有效。\n实现基本的PoW算法\n下面来为我们的区块链实现一个类似的算法，我们的规则将会和上面的例子十分接近：找到一个数p，使得它与前置区块的哈希值由4个0开头。\nimport hashlib\nimport json\n\nfrom time import time\nfrom uuid import uuid4\n\n\nclass Blockchain(object):\n    ...\n        \n    def proof_of_work(self, last_proof):\n        \"\"\"\n        Simple Proof of Work Algorithm:\n         - Find a number p' such that hash(pp') contains leading 4 zeroes, where p is the previous p'\n         - p is the previous proof, and p' is the new proof\n        :param last_proof: <int>\n        :return: <int>\n        \"\"\"\n\n        proof = 0\n        while self.valid_proof(last_proof, proof) is False:\n            proof += 1\n\n        return proof\n\n    @staticmethod\n    def valid_proof(last_proof, proof):\n        \"\"\"\n        Validates the Proof: Does hash(last_proof, proof) contain 4 leading zeroes?\n        :param last_proof: <int> Previous Proof\n        :param proof: <int> Current Proof\n        :return: <bool> True if correct, False if not.\n        \"\"\"\n\n        guess = f'{last_proof}{proof}'.encode()\n        guess_hash = hashlib.sha256(guess).hexdigest()\n        return guess_hash[:4] == \"0000\"\n我们可以通过设置前导0的个数调整算法的难度，但4个足够了，你会发现增加一个0会使找到一个答案的时间大大增加。我们的类几乎完成了，现在我们将通过HTTP请求与区块链进行交互。\n第二步：将区块链作为API\n我们将使用Flask，它是一个轻量级的框架，可以很容易将一个网络节点映射为Python函数，这让我们可以通过HTTP请求与区块链交互。我们将创建以下方法：\n\n\n/transactions/new建立一个新的区块。\n\n/mine告诉服务器开采一个新的区块\n\n/chain返回整个区块链\n\n设置Flask\n我们的每个服务器将对应区块链网络中的一个单一节点。下面是样板代码：\nimport hashlib\nimport json\nfrom textwrap import dedent\nfrom time import time\nfrom uuid import uuid4\n\nfrom flask import Flask\n\n\nclass Blockchain(object):\n    ...\n\n\n# Instantiate our Node\napp = Flask(__name__)\n\n# Generate a globally unique address for this node\nnode_identifier = str(uuid4()).replace('-', '')\n\n# Instantiate the Blockchain\nblockchain = Blockchain()\n\n\n@app.route('/mine', methods=['GET'])\ndef mine():\n    return \"We'll mine a new Block\"\n  \n@app.route('/transactions/new', methods=['POST'])\ndef new_transaction():\n    return \"We'll add a new transaction\"\n\n@app.route('/chain', methods=['GET'])\ndef full_chain():\n    response = {\n        'chain': blockchain.chain,\n        'length': len(blockchain.chain),\n    }\n    return jsonify(response), 200\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\n下面是简单的解释：\n\n15行：实例化节点，关于Flask点击Quick Start\n\n18行：为节点创建一个随机名字\n21行：实例化BlockChain类\n24-26行：创建/mine节点，这是一个GET请求。\n28-30行：创建/transactions/new节点，因为需要发送数据，所以是POST请求。\n32-38行：创建/chain节点，返回整个区块链\n40-41行：运行服务器5000端口\n\n交易节点\n用户会想服务器发送交易请求，格式类似下面这样：\n{\n \"sender\": \"my address\",\n \"recipient\": \"someone else's address\",\n \"amount\": 5\n}\n因为我们已经实现了将交易加入区块的方法，所以剩余部分十分容易：\nimport hashlib\nimport json\nfrom textwrap import dedent\nfrom time import time\nfrom uuid import uuid4\n\nfrom flask import Flask, jsonify, request\n\n...\n\n@app.route('/transactions/new', methods=['POST'])\ndef new_transaction():\n    values = request.get_json()\n\n    # Check that the required fields are in the POST'ed data\n    required = ['sender', 'recipient', 'amount']\n    if not all(k in values for k in required):\n        return 'Missing values', 400\n\n    # Create a new Transaction\n    index = blockchain.new_transaction(values['sender'], values['recipient'], values['amount'])\n\n    response = {'message': f'Transaction will be added to Block {index}'}\n    return jsonify(response), 201\n挖矿节点\n挖矿节点很简单但也很神奇，他需要完成以下任务：\n\n计算执行PoW算法\n通过添加一笔交易奖励矿工1比特币\n产生新的区块并添加入链\n\nimport hashlib\nimport json\n\nfrom time import time\nfrom uuid import uuid4\n\nfrom flask import Flask, jsonify, request\n\n...\n\n@app.route('/mine', methods=['GET'])\ndef mine():\n    # We run the proof of work algorithm to get the next proof...\n    last_block = blockchain.last_block\n    last_proof = last_block['proof']\n    proof = blockchain.proof_of_work(last_proof)\n\n    # We must receive a reward for finding the proof.\n    # The sender is \"0\" to signify that this node has mined a new coin.\n    blockchain.new_transaction(\n        sender=\"0\",\n        recipient=node_identifier,\n        amount=1,\n    )\n\n    # Forge the new Block by adding it to the chain\n    previous_hash = blockchain.hash(last_block)\n    block = blockchain.new_block(proof, previous_hash)\n\n    response = {\n        'message': \"New Block Forged\",\n        'index': block['index'],\n        'transactions': block['transactions'],\n        'proof': block['proof'],\n        'previous_hash': block['previous_hash'],\n    }\n    return jsonify(response), 200\n需要注意的是接受被开采区块的地址就是我们的节点，并且我们的大部分工作就是和BlockChain类的方法交互。我们已经完成了这部分，现在可以开始和区块链交互了。\n第三步：和区块链交互\n你可以使用简单古老的cURL或者Postman来和这些网络中的API交互，首先启动服务器：\n$ python blockchain.py\n* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n让我们发送一个GET请求来开采一个区块：\nhttp://localhost:5000/mine\n\n再向http://localhost:5000/transactions/new发送一个POST请求，参数是JSON格式的交易数据：\n\n如果不想用Postman，cURL也可以做到：\n$ curl -X POST -H \"Content-Type: application/json\" -d '{\n \"sender\": \"d4ee26eee15148ee92c6cd394edd974e\",\n \"recipient\": \"someone-other-address\",\n \"amount\": 5\n}' \"http://localhost:5000/transactions/new\"\n我重启了服务器并开采了两个区块，所以现在总共有3个了，通过http://localhost:5000/chain节点可以获取整个区块：\n{\n  \"chain\": [\n    {\n      \"index\": 1,\n      \"previous_hash\": 1,\n      \"proof\": 100,\n      \"timestamp\": 1506280650.770839,\n      \"transactions\": []\n    },\n    {\n      \"index\": 2,\n      \"previous_hash\": \"c099bc...bfb7\",\n      \"proof\": 35293,\n      \"timestamp\": 1506280664.717925,\n      \"transactions\": [\n        {\n          \"amount\": 1,\n          \"recipient\": \"8bbcb347e0634905b0cac7955bae152b\",\n          \"sender\": \"0\"\n        }\n      ]\n    },\n    {\n      \"index\": 3,\n      \"previous_hash\": \"eff91a...10f2\",\n      \"proof\": 35089,\n      \"timestamp\": 1506280666.1086972,\n      \"transactions\": [\n        {\n          \"amount\": 1,\n          \"recipient\": \"8bbcb347e0634905b0cac7955bae152b\",\n          \"sender\": \"0\"\n        }\n      ]\n    }\n  ],\n  \"length\": 3\n}\n第四步：共识机制\n我们已经拥有了一个能接收交易的初级区块链，并且能够开采出新的区块。但整个区块链最核心的是去中心化，如果去中心了，我们又如何保证所有节点对应的是统一区块链呢？这就是共识问题，如果我们希望网络中有不止一个节点，就必须实现共识算法。\n注册新节点\n在实现共识算法之前，我们需要让节点知道有其他节点加入了网络。网络中的每一个节点应该存留其他全部节点的注册表，因此我们需要一些其他的服务器节点：\n\n\n/nodes/register用来从URL中接收一系列节点\n\n/nodes/resolve实现共识算法，并解决冲突以保证节点拥有正确的链\n\n我们需要修改BlockChain类的构造器并提供一个方法来注册节点：\n...\nfrom urllib.parse import urlparse\n...\n\n\nclass Blockchain(object):\n    def __init__(self):\n        ...\n        self.nodes = set()\n        ...\n\n    def register_node(self, address):\n        \"\"\"\n        Add a new node to the list of nodes\n        :param address: <str> Address of node. Eg. 'http://192.168.0.5:5000'\n        :return: None\n        \"\"\"\n\n        parsed_url = urlparse(address)\n        self.nodes.add(parsed_url.netloc)\n现在可以使用set()来存储节点列表。这保证了节点的添加是幂等的，即一个节点无论添加多少次只会出现一次。\n实现共识算法\n当一个节点的区块链和另一节点的区块链不同时，冲突就发生了。为了解决这个问题，我们需要制定规则：最长有效链最有权威性，即网络中最长的那条链是真正的区块链。使用这个算法，我们能够达成大多数节点的一致。\n...\nimport requests\n\n\nclass Blockchain(object)\n    ...\n    \n    def valid_chain(self, chain):\n        \"\"\"\n        Determine if a given blockchain is valid\n        :param chain: <list> A blockchain\n        :return: <bool> True if valid, False if not\n        \"\"\"\n\n        last_block = chain[0]\n        current_index = 1\n\n        while current_index < len(chain):\n            block = chain[current_index]\n            print(f'{last_block}')\n            print(f'{block}')\n            print(\"\\n-----------\\n\")\n            # Check that the hash of the block is correct\n            if block['previous_hash'] != self.hash(last_block):\n                return False\n\n            # Check that the Proof of Work is correct\n            if not self.valid_proof(last_block['proof'], block['proof']):\n                return False\n\n            last_block = block\n            current_index += 1\n\n        return True\n\n    def resolve_conflicts(self):\n        \"\"\"\n        This is our Consensus Algorithm, it resolves conflicts\n        by replacing our chain with the longest one in the network.\n        :return: <bool> True if our chain was replaced, False if not\n        \"\"\"\n\n        neighbours = self.nodes\n        new_chain = None\n\n        # We're only looking for chains longer than ours\n        max_length = len(self.chain)\n\n        # Grab and verify the chains from all the nodes in our network\n        for node in neighbours:\n            response = requests.get(f'http://{node}/chain')\n\n            if response.status_code == 200:\n                length = response.json()['length']\n                chain = response.json()['chain']\n\n                # Check if the length is longer and the chain is valid\n                if length > max_length and self.valid_chain(chain):\n                    max_length = length\n                    new_chain = chain\n\n        # Replace our chain if we discovered a new, valid chain longer than ours\n        if new_chain:\n            self.chain = new_chain\n            return True\n\n        return False\nvalid_chain()通过遍历每一区块并检查proof和hash的正确与否判断链的有效性。resolve_conflicts()遍历所有节点，并通过上面的方法验证其有效性。如果一个有效链的长度大于当前链，那么当前链将会被替换。现在添加两个API端口，一个用来添加节点，一个用来解决冲突：\n@app.route('/nodes/register', methods=['POST'])\ndef register_nodes():\n    values = request.get_json()\n\n    nodes = values.get('nodes')\n    if nodes is None:\n        return \"Error: Please supply a valid list of nodes\", 400\n\n    for node in nodes:\n        blockchain.register_node(node)\n\n    response = {\n        'message': 'New nodes have been added',\n        'total_nodes': list(blockchain.nodes),\n    }\n    return jsonify(response), 201\n\n\n@app.route('/nodes/resolve', methods=['GET'])\ndef consensus():\n    replaced = blockchain.resolve_conflicts()\n\n    if replaced:\n        response = {\n            'message': 'Our chain was replaced',\n            'new_chain': blockchain.chain\n        }\n    else:\n        response = {\n            'message': 'Our chain is authoritative',\n            'chain': blockchain.chain\n        }\n\n    return jsonify(response), 200\n现在你可以用不同的计算机来构建网络中的这些节点，当然也可以用同一机器的不同端口。例如，将5001端口也注册进区块链网络：\n\n现在，如果我在第二个节点开采一个新的区块，当我在节点1调用GET /nodes/resolve的时候，共识算法会保证链被更新到现有网络中的最长链：\n\n现在你可以找一些朋友来和你一起测试这个区块链了。\n后记\n我希望这篇文章能够激发你的灵感，毕竟我对加密货币十分狂热，我相信他会改变我们对金融、政府和记录存储的思考方式。\nUpdate：我计划写这个话题的第二部分，我将进一步拓展这个区块链并支持交易验证（ Transaction Validation Mechanism），同时也将讨论如何将你的区块链产业化。\n\n                ", "mainLikeNum": ["4 "], "mainBookmarkNum": "3"}