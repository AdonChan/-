{"title": "在Mac OSX 上配置Appium+Android自动化测试环境 - Python测试开发 ", "index": "macos,appium,python", "content": "前提准备\n开始正文之前，你需要准备好一些基本条件：\n\n安装好Mac OSX 操作系统的设备\n能够访问中国局域网以外资源的方法（没有也行，但很痛苦）\n已经安装好 homebrew\n\n已经安装好 Python3.x\n已经安装好 Java Runtime Environment\n\n安装 Android Studio / SDK\n本文主要为了测试安卓应用，那么这里我们就需要安装Android Studio或者Android SDK。\n\nAndroid Studio - 完整的开发以及测试工具，需要梯子\nAndroid SDK - 足够完成自动化测试，通过homebrew安装\n\n如果只是为了自动化测试我建议安装SDK足矣，使用brew命令安装。\nbrew install android-sdk\n在国内使用brew可以事先配置好国内源，速度会快很多。\n如果有梯子建议选择Android Studio，安装方法很简单，官网下载后一路Next，启动后会让你把SDK等等一系列依赖都装好，一步到位。\n准备Android 模拟器或者使用真机\n如果SDK已经安装完毕，应该可以使用adb命令来检查可用的模拟器或者已经连接到电脑上的实体手机。\nadb devices\n如果不知道adb工具在哪，可以先在命令行里通过find搜索。\nfind /Users -name adb  # 搜索用户目录\nfind / -name adb  # 搜索全盘\n找到之后可以把 adb 目录加入PATH，方便后续使用。\n安装Appium\nAppium 可以通过多种方式安装。\n方式一：使用 NodeJS 安装\n首先通过brew安装nodejs：\nbrew install node\n配置国内源，在个人目录下新建一个.npmrc文件，写入：\nregistry=https://registry.npm.taobao.org/\n开始安装Appium：\nnpm install -g appium\nnpm install -g appium-doctor\nAppium-doctor 可以帮你诊断测试环境，建议安装。\n方式二：下载Appium桌面版安装\n官方的Appium桌面安装包可以从github下载，需要梯子。\nhttps://github.com/appium/app...\n下载到的dmg文件双击装载，把Appium拖到Application里完成安装。\n安装 Appium-Client\n本文只讨论Python实现的Appium测试，所以你只需要允许以下命令：\npip install Appium-Python-Client\n如果需要使用其他编程语言，下表供参考：\n\n\n语言/框架\nGithub版本库以及安装指南\n\n\n\nRuby\nhttps://github.com/appium/rub...\n\n\nPython\nhttps://github.com/appium/pyt...\n\n\nJava\nhttps://github.com/appium/jav...\n\n\nJavaScript (Node.js)\nhttps://github.com/admc/wd\n\n\nObjective C\nhttps://github.com/appium/sel...\n\n\nPHP\nhttps://github.com/appium/php...\n\n\nC# (.NET)\nhttps://github.com/appium/app...\n\n\nRobotFramework\nhttps://github.com/jollychang...\n\n\n\n必要的环境变量设置\n如果你已经安装了appium-doctor，那么你只要运行appium-doctor命令就可以知道你还需要设置哪些环境变量，比如：\ntobyqin@CatBook ~> appium-doctor\ninfo AppiumDoctor Appium Doctor v.1.4.3\ninfo AppiumDoctor ### Diagnostic starting ###\ninfo AppiumDoctor  ✔ The Node.js binary was found at: /usr/local/bin/node\ninfo AppiumDoctor  ✔ Node version is 7.10.0\ninfo AppiumDoctor  ✔ Xcode is installed at: /Applications/Xcode.app/Contents/Developer\nWARN AppiumDoctor  ✖ Xcode Command Line Tools are NOT installed!\ninfo AppiumDoctor  ✔ DevToolsSecurity is enabled.\ninfo AppiumDoctor  ✔ The Authorization DB is set up properly.\nWARN AppiumDoctor  ✖ Carthage was NOT found!\ninfo AppiumDoctor  ✔ HOME is set to: /Users/tobyqin\ninfo AppiumDoctor  ✔ ANDROID_HOME is set to: /Users/tobyqin/Library/Android/sdk/\ninfo AppiumDoctor  ✔ JAVA_HOME is set to: /Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home\ninfo AppiumDoctor  ✔ adb exists at: /Users/tobyqin/Library/Android/sdk/platform-tools/adb\ninfo AppiumDoctor  ✔ android exists at: /Users/tobyqin/Library/Android/sdk/tools/android\ninfo AppiumDoctor  ✔ emulator exists at: /Users/tobyqin/Library/Android/sdk/tools/emulator\ninfo AppiumDoctor  ✔ Bin directory of $JAVA_HOME is set\ninfo AppiumDoctor ### Diagnostic completed, 2 fixes needed. ###\ninfo AppiumDoctor\ninfo AppiumDoctor ### Manual Fixes Needed ###\ninfo AppiumDoctor The configuration cannot be automatically fixed, please do the following first:\nWARN AppiumDoctor - Please install Carthage. Visit https://github.com/Carthage/Carthage#installing-carthage for more information.\ninfo AppiumDoctor ###\ninfo AppiumDoctor\ninfo AppiumDoctor Bye! Run appium-doctor again when all manual fixes have been applied!\n其实你不一定需要把通过所有检查项，如果只是为了完成Android的Appium测试，只要确保ANDROID_HOME 和 JAVA_HOME 正确配置，另外SDK Tools 和Platform Tools都加入PATH就基本完成了。可以参考我个人目录下的.bash_profile设置：\nexport ANDROID_HOME=~/Library/Android/sdk/\nexport JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home\n\nexport PATH=~/bin:$PATH:/usr/local/bin:$ANDROID_HOME/platform-tools/:$JAVA_HOME/bin\n开始编写自动化测试\n终于到了开始写代码的时候了，相信你已经迫不及待了，别急，你还要准备以下条件：\n\n模拟器或者测试机必须是Ready的状态，每次启动模拟器都很费时间，所以建议模拟器不要关闭，通过代码来启动模拟器是一个办法，但是时间成本有点高。\n如果是调试代码阶段，建议保持Appium桌面版长期运行，但是Appium和uiautomator有冲突，只能二选一。\nAppium会根据你的测试代码去寻找符合要求的设备，如果你启动了多台虚拟机或者连接了多台实体机，请显式地在代码中指定设备名称或者版本号。\n\n自动化测试代码例子如下，启动内置拨号软件，搜索关键字。\nfrom appium import webdriver\n\ndesired_caps = {}\ndesired_caps['platformName'] = 'Android'\ndesired_caps['platformVersion'] = '7.1.1'\ndesired_caps['deviceName'] = 'Android Emulator'\ndesired_caps['appPackage'] = 'com.android.dialer'\ndesired_caps['appActivity'] = 'DialtactsActivity'\n\ndriver = webdriver.Remote('http://localhost:4723/wd/hub', desired_caps)\ndriver.find_element_by_id('com.android.dialer:id/search_box_collapsed').click()\nsearch_box = driver.find_element_by_id('com.android.dialer:id/search_view')\nsearch_box.click()\nsearch_box.send_keys('hello toby')\n恭喜你，解锁了移动应用测试的新成就！\n参考\n在 Windows 下搭建 Appium + Android 自动化测试环境\n\n关于作者：Toby Qin, Python 技术爱好者，目前从事测试开发相关工作，转载请注明原文出处。\n欢迎关注我的博客 https://betacat.online，你可以到我的公众号中去当吃瓜群众。\n\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}