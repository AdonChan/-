{"title": "rabbitmq常用的三种exchange类型和python库pika接入rabbitmq - wednesday ", "index": "pika,exchange,rabbitmq,python", "content": "现在很多开源软件都提供了对应的web管理界面，rabbitmq也不例外，rabbitmq提供了一个web插件。当rabbit-server启动之后，即在浏览器中通过http://localhost:15672/地址访问页面，提供一个比命令rabbitmqctl更友好的学习rabbitmq的方式。可以简单方便的通过配置rabbitmq，并可以向exchange和queue中发消息来验证自己的理解。如下图：\n\nRabbitmq 常用三种exchange类型：\nFanout exchange：\n这是处理逻辑最简单的exchange类型，实际上它没有任何逻辑，它把进入该exchange的消息全部转发给每一个绑定的队列中，如果这个exchange没有队列与之绑定，消息会被丢弃。\n\n测试：新建一个fanout类型的exchange，名称叫fanoutTest，并绑定两个routing key是hello.world的队列，如下图所示。\n\n然后通过exchange发送消息，routing key可以随便填写，因为是fanout类型的exchange，routing key不起作用。点击publish按钮，即可发送消息。\n\n两个消息队列都接收到了对应的消息，如下图所示，（消费队列的时候有个Requeue的选项，如果是“Yes”，消息会再入队，如果是“NO”，则消息被消费之后队列中就不会存在这个消息了）\n\nDirect exchange\n这种类型的交换机Fancout 类型的交换机智能一些，它会根据routing key来决定把消息具体扔到哪个消息队列中。通过exchange发消息的时候会指定一个routing key，只有当routing key和与队列绑定的routing key一样的时候，消息才对发送到对应的消息队列。即，如果与某个队列绑定的routing key叫hello.world，则通过exchange发送的routing key必须也是hello.world，该队列才能接收到消息（可按上述步骤进行验证）。这种情况下，队列之间是互斥关系，一个消息最多只能进入一个队列。\n\nTopic exchange\nTopic exchange是最灵活的exchange，它会把exchange的routing key与绑定队列的routing key进行模式匹配。Routing key中可以包含  和#两种符号，#号可以用来匹配一个或者多个单词，用来匹配正好一个单词。官方的下图很好地说明了这个问题，读者最好自己动手验证一下。\n\nPython脚本操作Rabbitmq\npython有多个可以接入rabbitmq的库，pika是官方推荐的一个。我在公司批量创建消息队列的需求，于是写了一个python批量创建消息队列的脚本。首先安装pika：sudo pip install pika==0.10.0\n请输入代码\n\n__author__ = 'tianbing'\n \nimport os\nimport sys\nimport pika\n \n \ndef createVerifyCardQueues():\n    credentials = pika.PlainCredentials('your user', 'your password')\n    connection = pika.BlockingConnection(pika.ConnectionParameters('127.0.0.1',5672,\"/\",credentials))\n    channel = connection.channel()\n \n    name_prefix = \"merchant.verifycard.async\"\n    exchange_name = \"paybiz.merchant.exchange\"\n    channel.queue_declare()\n    start=10\n    end = 26\n    for biz_type in range(start, end):\n        queue_name = name_prefix + str(biz_type)\n        channel.queue_declare(queue_name,False,True)\n        channel.queue_bind(queue_name,exchange_name,queue_name)\n \nif __name__ == \"__main__\":\n    createVerifyCardQueues()\n\n\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "7"}