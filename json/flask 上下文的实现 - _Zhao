{"title": "flask 上下文的实现 - _Zhao ", "index": "flask,python", "content": "引言\n本文主要梳理了flask的current_app, request, session, g的实现原理\n源码说明\n本文使用flask 0.5 版本\napplication context 和request context\nflask有两个context: application context和request context\n\n\napplication context\nrequest context\n\n\n\ncurrent_app\nrequest\n\n\ng\nsession\n\n\n\n这里需要通俗地解释一下application context与request context：\n\napplication 指的就是当你调用app = Flask(__name__)创建的这个对象app；\nrequest 指的是每次http请求发生时，WSGI server(比如gunicorn)调用Flask.__call__()之后，在Flask对象内部创建的Request对象；\napplication 表示用于响应WSGI请求的应用本身，request 表示每次http请求；\napplication的生命周期大于request，一个application存活期间，可能发生多次http请求，所以，也就会有多个request\n\n下面通过源码了解一下 flask 如何实现这两种context：\n# 代码摘选自flask 0.5 中的ctx.py文件, 进行了部分删减\nclass _RequestContext(object):\n    \n    def __init__(self, app, environ):\n        self.app = app\n        self.request = app.request_class(environ)\n        self.session = app.open_session(self.request)\n        self.g = _RequestGlobals()\nflask 使用_RequestContext的代码如下：\nclass Flask(object):\n\n    def request_context(self, environ):\n        return _RequestContext(self, environ)\n在Flask类中，每次请求都会调用这个request_context函数。这个函数则会创建一个_RequestContext对象。\n值得注意的是：这个对象在创建时，将Flask实例的本身作为实参传入_RequestContext自身，因此，self.app = Flask()。\n所以，虽然每次http请求都会创建一个_RequestContext对象，但是，每次创建的时候都会将同一个Flask对象传入该对象的app成员变量，使得：\n由同一个Flask对象响应的请求所创建的_RequestContext对象的app成员变量都共享同一个application\n通过在Flask对象中创建_RequestContext对象，并将Flask自身作为参数传入_RequestContext对象的方式，实现了多个request context对应一个application context 的目的。\n接下来，看self.request = app.request_class(environ)这句。由于app成员变量就是app = Flask(__name__)这个对象，所以，app.request_class就是Flask.request_class。在Flask类的定义中：\nrequest_class = Request # Request 是一个类，定义如下：\n\nclass Request(RequestBase):\n    ...\n所以：self.request = app.request_class(environ)实际上是创建了一个Request对象。由于，一个http请求对应一个_RequestContext对象的创建，而每个_RequestContext对象的创建对应一个Request对象的创建，所以，每个http请求对应一个Request对象。\n到这里想必已经很清楚了：\napplication 就是指app = Flask(__name__)对象request 就是对应每次http 请求创建的Request对象flask通过_RequestContext将app与Request关联起来\n总结\n\napp = Flask(__name__)创建了application， 这个application对应的上下文，就是application context\nFlask每响应一个http请求，就会创建一个Request对象，这个request对象对应的上下文，就是request context\n\n\n                ", "mainLikeNum": ["8 "], "mainBookmarkNum": "36"}