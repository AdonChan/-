{"title": "一、python服务端入门：读取文件并返回给前端 - 个人文章 ", "index": "html,javascript,python", "content": "python读取文件内容并通过接口给前端使用\n常规的python web开发是在服务器端根据url动态生成html这里还是采取前后端分离思想，通过python读取文件数据，通过接口给前端调用。\n\n注意事项\n确保python版本为3.x\n\n框架选型：\n\nDjango：全能型Web框架；\nFlask：轻量实用的Web框架；\nweb.py：一个小巧的Web框架；\nBottle：和Flask类似的Web框架；\nTornado：Facebook的开源异步Web框架。\n\n只是实现一个小工具实用Flask就好\n安装方式\npip install flask\n初衷和思路\n博客的文章管理方式大体分两种：静态html、动态加载。动态加载文章一般通过数据库存取，为了简化此过程，就想通过直接加载文件的方式。markdown语法在写文章上很受开发者青睐，因此直接加载md文件就比较便于维护。现行方案中github采用的后端加载方式，已有的一种前端直接加载md文件的方式是vue-markdown-loader对此方式感兴趣可以直接采用这种loader方式，以下内容就可以忽略了。之所以采取python读取文档并返回给前端而不是其他语言主要是因为python比较火热，应用面广。作为一枚小前端果断选择python来研究学习，这个小项目也是用来练练手。注：md文章放在项目./static下就好\n\n1.注册接口，绑定处理函数\n2.接收前端传递的参数（文件名）\n3.读取文件，返回到前端\n\n代码如下：\npython代码就是简洁\n@app.route('/getdata/md', methods=['post'])\ndef ajax_test_add():\n    params = request.get_json()\n    childPath = params.get('title')\n    if(params.get('title') == None):\n        print('未传title字段！')\n        return json.dumps({'resCode':'4001','msg':'参数错误title为必传'})\n    else:\n        path = './static' + childPath + '.md'\n        try:\n            f_name = open(path, 'r', encoding='UTF-8').read()\n            print(f_name)\n            # 成功获取到md文件内容啦\n            return json.dumps({'content':f_name,'resCode':2000})\n        except OSError as reason:\n            print('读取文件出错了T_T')\n            print('出错原因是%s' % str(reason))\n        return json.dumps({'err': str(reason),'resCode':5000})\n问题总结\n跨域问题\n\nfrom flask_cors import CORSCORS(app, resources=r'/*')r'/*' 是通配符，让本服务器所有的URL 都允许跨域请求\n主机端口号设置\n\napp.run(host = '0.0.0.0', port = 9001, debug = True)\n前端代码\n<article class=\"post post-1\" repeat=\"blogData.data\">\n    <header class=\"entry-header\">\n        <h1 class=\"entry-title\">\n            <a href=\"javascript:;\" data-id=\"{{item.key}}\" onclick=\"showArticle(this)\" >{{item.title}}</a>\n        </h1>\n        <div class=\"entry-meta\">\n            <span class=\"post-category\"><a href=\"#\">{{item.category}}</a></span>\n            <span class=\"post-date\"><a href=\"#\">\n                <time class=\"entry-date\">{{item.updateAt}}</time>\n            </a></span>\n            <span class=\"post-author\"><a href=\"#\">{{item.author}}</a></span>\n            <span class=\"comments-link\"><a href=\"#\">{{item.segs}} 评论</a></span>\n            <span class=\"views-count\"><a href=\"#\">{{item.count}} 阅读</a></span>\n        </div>\n    </header>\n    <div class=\"entry-content clearfix\">\n        <p>{{item.content}}</p>\n        <div class=\"read-more cl-effect-14\">\n            <a href=\"#\" class=\"more-link\">继续阅读<span class=\"meta-nav\">→</span></a>\n        </div>\n    </div>\n</article>\n在点击文章标题是，获取data-id属性的值，该值即为传给后端的文件名。前端调用的接口地址：http://hostname:9001/getdata/md请求方式：POST必传参数：{\"title\": 文章名(不用加后缀)},该文章要放在python项目的./static目录下\n源码：https://github.com/idongchen/docs/blob/master/example/getfile.py\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}