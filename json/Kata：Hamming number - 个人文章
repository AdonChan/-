{"title": "Kata：Hamming number - 个人文章 ", "index": "python", "content": "题目：求第n个Hamming numbers\nHamming number\n$$H = 2^i * 3^j * 5^k$$\n其中：\n$$i, j, k >= 0$$\n解这道题倒是不难，只要暴力循环就好了，只不过这样挺蠢的，而且浪费资源也挺多的，所以也没有通过测试。\n我想着Hamming number如何预测某个数的2倍或者3、5倍在整体数列中的位置，想了半天都没什么头绪。于是上网看了个解决方案，理解了下，思路大概是这样的：\nHamming number数列是这样的：\n1，2，3，4，5，6，8，9，10，12，15，16……\n观察其中2的数列，有：\n2×1，2×2，2×3，2×4，2×5，2×6，2×8……\n可以发现Hamming number除以2以后仍然在该数列中，观察可以得出数列第一个2的倍数，其实就是2乘以数列中的第一个数，第二个2的倍数是2乘以数列中的第二个数，后面的数字都是如此。也就是说如果我要求第5个2的倍数，就让2乘以数列中第5个数。\n同理，3、5的倍数也是如此。知道这个递增关系，就可以保存当前是第几个倍数，方便计算下一个数。\n按上面的思路，有下面这个算法：\ndef hamming(limit):\n    h = [1] * limit\n    x2, x3, x5 = 2, 3, 5\n    i = j = k = 0\n\n    for n in range(1, limit):\n        h[n] = min(x2, x3, x5)\n        if x2 == h[n]:\n            i += 1\n            x2 = 2 * h[i]\n        if x3 == h[n]:\n            j += 1\n            x3 = 3 * h[j]\n        if x5 == h[n]:\n            k += 1\n            x5 = 5 * h[k]\n    return h[-1]\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}