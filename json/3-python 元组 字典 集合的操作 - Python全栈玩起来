{"title": "3-python 元组 字典 集合的操作 - Python全栈玩起来 ", "index": "python", "content": "元组 tuple\n\n本质是一种有序集合\n和list相似\n元组是不可变的\n用()创建\n其中类型可以不同\n如果一个元组中只有一个元素，在这个元素后面加一个逗号, 来消除歧义tuple5 = (100,)\n修改元组\n\ntuple13 = (1, [100, 200, 300, 400], 3)\nprint(tuple13)\ntuple13[1][2] = 666\nprint(tuple13) # 表面上看，tuple的元素改变了，但实际上变得不是tuple的元素，是list的元素\n删除\ndel tuple1 #被直接删除\n数据类型转换\ntuple(list) list(tuple)\n字典\n\n字典中的key必须唯一\nkey值必须是不可变的数据类型：字符串，元组，Number\nlist可变，不能作为key使用\nvalue为任意数据类型，可以重复\n字典的本质是一种无序集合\n字典的访问\n\nprint(dic1.get(\"hmm\"))\n# get获取字典中的值，如果当前key值不存在，返回None，而常规访问会Error\n\n删除  pop(key)\n\n遍历\n\nfor key in dict1.keys()\nfor values in dict1.values()\nfor key, values in dict1.items()\n\n更新 dict1.update(dict2)  将 dict2中的键值对 更新到 dict1中\ndict与list相比：\n\ndict：1、查找及插入速度块，不会随着key及value的增加而变慢\n      2、需要占用的内存大，内存浪费多\nlist：1、查找及插入速度会随着数据的增加而变慢\n      2、需要占用的内存小，内存浪费少\n案例：词频统计\n提供了下面4个方法，个中优劣，自行体会。\nitems = ['bobby', 'bobby', 'kate', 'tom','tom','tom','tom']\ndict1 = {}\n\nfor item in items:\n     if item not in dict1:\n         dict1[item] = 0\n     dict1[item] += 1\nprint(dict1)\n\nfor item in items:\n    dict1.setdefault(item,0)\n    dict1[item] += 1\nprint(dict1)\n\nfor item in items:\n    dict1[item] = dict1.setdefault(item,0) + 1\nprint(dict1)\n\n\nfor item in items:\n    try:\n        dict1[item] += 1\n    except:\n        dict1[item] = 1\nprint(dict1)\nset集合\n\n与dict相比，set是一组存储key的集合，但不存储value\n本质：一个无序的及元素不重复的集合\n\nset1 = set([1,2,3,4])\nset2 = set([1,2,3,4,2,2,2,3,3,1,4,5,6,2,1]) #重复会被过滤\nprint(set2)  # {1，2，3，4，5，6}\n       \n# tuple\nset3 = set((1,2,3,2,1))\nprint(set3)\n       \n# dict\nset4 = set({\"a\":1, \"b\":2, \"c\":3})\nprint(set4)  # 只保留字典的key值  # {'a','b','c'}\n       \ndic5 = {\"a\":1, \"b\":2, \"c\":3}\nset5 = set(dic5.values())\nprint(set5)\n       \n# 数据类型不匹配\n# set6 = set(100)\n# print(set6)  # TypeError: 'int' object is not iterable(迭代器)\n# 迭代器就是一种集合数据类型\n添加数据\nadd() #只添加不可变的数据类型 元组字符串数字\nupdate(iter) # list，tuple，string，dict(只有key)\n\n删除 remove()\n\nset不支持下标访问\n集合的操作\n\nset10 = set([1,2,3,4,5])\nset11 = set([4,5,6,7,8])\n# 1、&  交集\nset12 = set10 & set11\nprint(set12)\n# 2、|   并集\nset13 = set10 | set11\nprint(set13)\n# 3、^   补集\nset14 = set10 ^ set11\nprint(set14)\n不同数据类型的装换\nlist-set\ntuple->set\nset->list\nset->tuple\nlist->tuple\ntuple->list\n将list中的重复数据删除可以用set\nlist1 = [1,2,3,6,3,2,1,1,1,9]\nset1 = set(list1)  # 过滤重复数据\nlist2 = list(set1)\nprint(list2)\n枚举遍历\n可以将下标及元素同时遍历\nfor i in enumerate(list1):\n    print(i)\nfor index,data in enumerate(list1):\n    print(index, data)\n\nset1 = set([1,2,3]) # 让set也能有下标\nfor index,data in enumerate(set1):\n    print(index, data)\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}