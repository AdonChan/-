{"title": "Django搭建个人博客：用户的注册 - Django搭建个人博客 ", "index": "python,django", "content": "既然有登录登出，那么用户的注册肯定也是少不了的。\n注册表单类\n用户注册时会用到表单来提交账号、密码等数据，所以需要写注册用的表单/userprofile/forms.py：\n/userprofile/forms.py\n\n...\n\n# 注册用户表单\nclass UserRegisterForm(forms.ModelForm):\n    # 复写 User 的密码\n    password = forms.CharField()\n    password2 = forms.CharField()\n\n    class Meta:\n        model = User\n        fields = ('username', 'email')\n\n    # 对两次输入的密码是否一致进行检查\n    def clean_password2(self):\n        data = self.cleaned_data\n        if data.get('password') == data.get('password2'):\n            return data.get('password')\n        else:\n            raise forms.ValidationError(\"密码输入不一致,请重试。\")\n上一章也讲过，对数据库进行操作的表单应该继承forms.ModelForm，可以自动生成模型中已有的字段。\n这里我们覆写了password字段，因为通常在注册时需要重复输入password来确保用户没有将密码输入错误，所以覆写掉它以便我们自己进行数据的验证工作。def clean_password2()中的内容便是在验证密码是否一致了。def clean_[字段]这种写法Django会自动调用，来对单个字段的数据进行验证清洗。\n覆写某字段之后，内部类class Meta中的定义对这个字段就没有效果了，所以fields不用包含password。\n需要注意：\n\n验证密码一致性方法不能写def clean_password()，因为如果你不定义def clean_password2()方法，会导致password2中的数据被Django判定为无效数据从而清洗掉，从而password2属性不存在。最终导致两次密码输入始终会不一致，并且很难判断出错误原因。\n从POST中取值用的data.get('password')是一种稳妥的写法，即使用户没有输入密码也不会导致程序错误而跳出。前面章节提取POST数据我们用了data['password']，这种取值方式如果data中不包含password，Django会报错。另一种防止用户不输入密码就提交的方式是在表单中插入required属性，后面会讲到。\n\n视图函数\n编写注册的视图/userprofile/views.py：\n/userprofile/views.py\n\n# 引入 UserRegisterForm 表单类\nfrom .forms import UserLoginForm, UserRegisterForm\n\n# 用户注册\ndef user_register(request):\n    if request.method == 'POST':\n        user_register_form = UserRegisterForm(data=request.POST)\n        if user_register_form.is_valid():\n            new_user = user_register_form.save(commit=False)\n            # 设置密码\n            new_user.set_password(user_register_form.cleaned_data['password'])\n            new_user.save()\n            # 保存好数据后立即登录并返回博客列表页面\n            login(request, new_user)\n            return redirect(\"article:article_list\")\n        else:\n            return HttpResponse(\"注册表单输入有误。请重新输入~\")\n    elif request.method == 'GET':\n        user_register_form = UserRegisterForm()\n        context = { 'form': user_register_form }\n        return render(request, 'userprofile/login.html', context)\n    else:\n        return HttpResponse(\"请使用GET或POST请求数据\")\n逻辑上结合了发表文章视图和用户登录视图，没有新的知识。\n用户在注册成功后会自动登录并返回博客列表页面。\n模板和url\n表单有关的模板文件我们也很熟悉了，新建/templates/userprofile/register.html：\n/templates/userprofile/register.html\n\n{% extends \"base.html\" %} {% load staticfiles %}\n{% block title %} 登录 {% endblock title %}\n{% block content %}\n<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-12\">\n            <br>\n            <form method=\"post\" action=\".\">\n                {% csrf_token %}\n                <!-- 账号 -->\n                <div class=\"form-group col-md-4\">\n                    <label for=\"username\">昵称</label>\n                    <input type=\"text\" class=\"form-control\" id=\"username\" name=\"username\" required>\n                </div>\n                <!-- 邮箱 -->\n                <div class=\"form-group col-md-4\">\n                    <label for=\"email\">Email</label>\n                    <input type=\"text\" class=\"form-control\" id=\"email\" name=\"email\">\n                </div>\n                <!-- 密码 -->\n                <div class=\"form-group col-md-4\">\n                    <label for=\"password\">设置密码</label>\n                    <input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" required>\n                </div>\n                <!-- 确认密码 -->\n                <div class=\"form-group col-md-4\">\n                    <label for=\"password2\">确认密码</label>\n                    <input type=\"password\" class=\"form-control\" id=\"password2\" name=\"password2\" required>\n                </div>\n                <!-- 提交按钮 -->\n                <button type=\"submit\" class=\"btn btn-primary\">提交</button>\n            </form>\n        </div>\n    </div>\n</div>\n{% endblock content %}\n上面的模板文件中，我们在昵称、密码input 标签中添加了required属性（前面提到过）。如果用户不填写带有required属性的字段，表单就不能提交，并提示用户填写。实际上前面学习的很多表单都可以添加required属性来提前验证数据的有效性。\n注册的入口你可以放在任何喜欢的地方。本文放在登录页面中/templates/userprofile/login.html：\n/templates/userprofile/login.html\n\n...\n<div class=\"col-12\">\n    <br>\n    <h5>还没有账号？</h5>\n    <h5>点击<a href='{% url \"userprofile:register\" %}'>注册账号</a>加入我们吧！</h5>\n    <br>\n    <form method=\"post\" action=\".\">\n        ...\n    </form>\n</div>\n\n...\n最后就是在app中配置路由文件/userprofile/urls.py了：\n/userprofile/urls.py\n\n...\n\nurlpatterns = [\n    ...\n    # 用户注册\n    path('register/', views.user_register, name='register'),\n]\n测试\n运行服务器，进入到登录页面，多了注册的提示：\n\n点击注册账号进入注册页面：\n\n填写好表单后提交（Email地址是可以为空的）：\n\n成功登录并返回了博客列表，功能完成。\n总结\n本章用到了表单类、对数据进行验证清洗等知识，完成了用户的注册功能。\n接下来学习如何实现删除已有的用户。\n\n有疑问请在杜赛的个人网站留言，我会尽快回复。\n或Email私信我：dusaiphoto@foxmail.com\n项目完整代码：Django_blog_tutorial\n\n\n转载请告知作者并注明出处。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}