{"title": "django rest framework个人学习笔记（五）————Tutorial3.Class-based Views - 个人文章 ", "index": "django-rest-framework,python", "content": "(官网地址)[django rest framework个人学习笔记（四）————Tutorial]\nClass-based views\n我们也能够使用class-based view 来编写我们的API views，而不是基于function based views.正如我们所看到的，这是一个强大的模式，它使我们的功能能够复用，并保持我们的代码整洁。\n使用class-based views重写我们的API\n我们开始重写编写我们的root views。这一切都只涉及修改一点views.py文件。\nfrom snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\nfrom django.http import Http404\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework import status\n\nclass SnippetList(APIView):\n\"\"\"\n列出所有的snippet,或者创建一个新的snippet.\n\"\"\"\n    def get(self,request,format=None):\n        snippet = Snippet.objects.all()\n        serializer = SnippetSerializer(snippets,many=True)\n        return Response(serializer.data)\n        \n    def post(self,request,format=None):\n        serializer = SnippetSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data,status=status.HTTP_201_CREATED)\n        return Response(serializer.error,status=status.HTTP_400_BAD_REQUEST)\n它看起来和之前的实例相当的类似，但是我们更好的将不同的HTTP请求分离了。我们也能够更新我们的实例，在views.py文件中。\nclass SnippetDetail(APIView):\n    \"\"\"\n    检索，更新或者删除一个snippet 实例。\n    \"\"\"\n    def get_object(self,pk):\n        try:\n            return Snippet.objects.get(pk=pk)\n        except Snippet.DoesNotExist:\n            return Hppt404\n    \n    \n    def get(self,request,pk,format=None):\n        snippet = self.get_object(pk)\n        serializer = SnippetSerializer(snippet)\n        return Response(serializer.data)\n        \n    def put(self,request,pk,format=None):\n        snippet = self.get_object(pk)\n        serializer = SnippetSerializer(snippet,data=request.data)\n        if serializer.is_valid():\n            serlalizer.save()\n            return Response(serializer.data)\n        return Response(serializer.errors,status=status.HTTP_400_BAD_REQUEST)\n        \n    def delete(self,request,pk,format=None)\n        snippet = self.get_object(pk)\n        snippet.delete()\n        return Response(status=status.HTTP_204_NO_CONTENT)\n我们还需要为我们的calss-based views添加url.\nfrom django.conf.urls import url\nfrom rest_framework.urlpatterns import format_suffix_patterns\nfrom snippets import views\n\nurlpatterns = [\n    url(r'^snippets/$',views.SnippetList.as_view()),\n    url(r'^snippets/(?P<pk>[0-9]+/$',views.SnippetDatail.as_view()),\n]\n\nurlpatterns = format_suffix_patterns(urlpatterns)\nOk,我们完成了。\nmixins\n大量使用class-based views的好处之一，可以让我们轻易的组成可复用的组件。我们需要使用的操作就 创建/检索/更新/删除。这些常见的行为我们可以使用REST framework 的 mixin classes。接下来将展示使用mixin classes来组成我们的views。我们再一次来到views.py文件。\nfrom snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\nfrom rest_framework import mixins\nfrom rest_framework import generics\n\nclass SnippetList(mixins.ListModelMixin,mixins.CreateModelMixin,generics.GenericAPIView):\n    queryset = Snippet.objects.all()\n    serializer_class = SnippetSerializer\n    \n    def get(self,request,*args,**kwargs):\n        return self.list(request,*args,**kwargs)\n    \n    def post(self,request,*args,**kwargs):\n        return self.create(request,*args,**kwargs)\n来看看发生了什么，我们使用GenericAPIView来构建我们的view,并添加了ListModelMixin和CreateModelMixin.这个base class 包含了核心功能，mixin classes包含了.list()和.create()行为。我们能够使用这些行为来构建get和post.\nclass SnippetDetail(mixins.RetrieveModelMixin,\n                    mixins.UpdateModelMixin，                    \n                    mixins.DestroyModelMixin,\n                    generics.GenericAPIView)：\n                    \n    queryset = Snippet.objects.all()\n    serializer_class = SnippetSerializer\n    \n    def get(self,request,*args,**kwargs):\n        return self.retrieve(request,*args,**kwargs)\n        \n    def put(self,request,*args,**kwargs):\n        return self.update(request,*args,**kwargs)\n    \n    def delete(self,request,*args,**kwargs):\n        return self.destroy(request,*args,**kwargs)\n使用generic class-based views\n使用mixin classes来重写我们的代码，比之前要稍微少写一些，但是我们想更进一步。REST framework 提供了mixed-in generic views,我们能够使用它来装饰我们的views.\nfrom snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\nfrom rest_framework import generics\n\nclass SnippetList(generics.ListCreateAPIView):\n    queryset = Snippet.objects.all()\n    serializer = SnippetSerializer\n\nclass SnippetDetail(generics.RetrieveUpdateDestroyAPIView):\n    queryset = snippet.objects.all()\n    serializer = SnippetSerializer\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}