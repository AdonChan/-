{"title": "Python实用技法第11篇：找出序列中出现次数最多的元素 - python3 ：公司内部培训专栏 ", "index": "python", "content": "上一篇文章：Python实用技法第10篇：对切片命名下一篇文章：Python实用技法第12篇：通过公共键对字典列表排序：itemgetter\n\n1、需求🙀\n我们有一个元素序列，想知道在序列中出现次数最多的元素是什么？\n2、解决方案😸\ncollections模块中国的Counter类正是为此类问题而设计的。它甚至有一个非常方便的most_common()方法可以告诉我们答案。可以给Counter对象提供任何可哈希的对象序列作为输入。\n实例：假设一个列表，其中有一些列的单词，我们想找出哪些单词出现的最为频繁：\nfrom collections import Counter\nwords=[\n'a','b','c','d','e','f',\n'a','b','c','d','e','f',\n'a','b','c',\n'a','b',\n'a'\n]\n#利用Counter统计每个元素出现的个数\nwords_counts=Counter(words)\n#出现次数最多的3个元素\ntop_three=words_counts.most_common(3)\n#返回元素和出现次数\nprint(top_three)\n\n#Counter底层是一个字典，可以在元素和他们出现的次数之间做映射，例如：\n#输出元素【f】出现的次数\nprint(words_counts['f'])\n\n#如果想手动增加计数个数，只需要简单的自增\nwords_counts['f']+=1\nprint(words_counts['f'])\n\n#如果想手动增加计数个数,还可以使用update()方法：\n#只针对元素【f】增加一次计数\nwords_counts.update('f')\nprint(words_counts['f'])\n\n#为所有计数增加一次\nmorewords=[\n'a','b','c','d','e','f'\n]\nwords_counts.update(morewords)\nprint(words_counts['f'])\n运行结果：\n[('a', 5), ('b', 4), ('c', 3)]\n2\n3\n4\n5\nCounter对象另一个不为人知的特性，那就是他们可以轻松地同各种数学运算操作结合起来使用。\nfrom collections import Counter\nwords1=[\n'a','b','c','d','e','f',\n'a','b','c','d','e','f',\n'a','b','c',\n'a','b',\n'a'\n]\n\nwords2=[\n'a','b','c','d','e','f',\n'a','b','c',\n'a','b',\n'a'\n]\none=Counter(words1)\ntwo=Counter(words2)\nprint(one)\nprint(two)\n\nthree=one+two\nprint(three)\n\nfour=one-two\nprint(four)\n\n运行结果：\nCounter({'a': 5, 'b': 4, 'c': 3, 'd': 2, 'e': 2, 'f': 2})\nCounter({'a': 4, 'b': 3, 'c': 2, 'd': 1, 'e': 1, 'f': 1})\nCounter({'a': 9, 'b': 7, 'c': 5, 'd': 3, 'e': 3, 'f': 3})\nCounter({'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1})\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}