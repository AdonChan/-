{"title": "4 个快速的 Python 编译器 for 2018 - 极光推送 ", "index": "python", "content": "简评：Python 和其他的解释型语言一样经常被吐槽性能不行，所以开发人员为了提升性能创建了不少编译器，本文则选取其中的四个做了基准测试。\nPython 其实是一种相当快的语言，但它并不像编译型语言那么快。 这是因为官方实现的 CPython 解释执行的，更准确地说，是 Python 代码被编译为字节码，然后进行解释。这对学习是很有好处的，因为可以在 Python REPL 中运行代码并立即查看结果，而不必编译和执行。 但是由于 Python 程序并没有那么快，开发人员多年来创建了几个 Python 的编译器，包括 IronPython 和 Jython。\n快速的性能并不是编译的唯一原因，可能诸如 Python 之类的脚本语言最大的缺点是你需要隐式地向客户提供源代码。\n我想比较同一平台上的一些 Python 编译器，特别是那些支持 Python 3.x 的编译器。最后，我选择了四个，都在 Ubuntu Linux上运行，他们是 Nuitka，PyPy，Cython 和 cx_Freeze。\n比较 Python 编译器\n有人已经完成了创建 Python 基准测试的工作。我选择了 PyStone，这是 Python 的创建者Guido van Rossum 对 C 程序的翻译（而 C 程序本身是 Ada 程序的翻译）。 我在 GitHub 上找到了开发人员 Christopher Arndt 的转换版本，它能够兼容 Python 3。 下面是 Pystone 的CPython（即标准 Python）性能：\nPython 2.7.15Rc1 2 : 272,647 pystones/second.\nPython 3.6.5       : 175,817\n\n正如你所看到的，Python 2 和 Python 3 之间有很大的区别（每秒 Pystones 越多越好）。在下面的细分中，所有的 Python 编译器都针对 Python 3 进行基准测试。\nNuitka\n尽管可以按照下载页面上的说明操作，但 Ubuntu 上的只需：\n$ sudo apt install Nuitka\n\nNuitka 还需要一个 C 编译器，所以我下载了 clang。可以使用以下方法安装它：\n$ sudo apt install clang\n\nNuitka 默认使用 gcc，但是一个参数允许你使用 clang，所以我用两者测试了它。 clang 编译器是 llvm 系列的一部分，旨在作为 gcc 的现代替代品。使用 gcc 编译 pystone.py 就像这个（第一行）一样简单，或者使用 clang（第二行），并使用链接时间优化 gcc（第三行）：\n$ nuitka pystone.py\n$ nuitka pystone.py --clang\n$ nuitka pystone.py --lto\n\n编译（大约 10 秒钟）完成后，我从终端运行了 pystone：\n$ ./pystone.exe 500000 \n\n结果是\nSize  Execution pystones/sec\n1. 223.176 Kb  597,000\n2. 195,424 Kb  610,000\n3. 194.2   kb  600,000\n\n这些是 5 次运行的平均值，我尽可能多地关闭了进程。\nPyPy\nGuido van Rossum 曾经说过：「如果你希望你的代码运行得更快，你应该只使用PyPy。」我将编译好的二进制文件下载到一个文件夹中，并将 pystone.py 复制到其下的 bin 文件夹中。然后我像这样运行：\n$ ./pypy3.5 pystone.py\n\n结果是惊人的 1,776,001 pystones/sec，几乎是 Nuitka 的三倍。\nPyPy 使用即时编译器并做了一些非常巧妙的东西来实现它的速度。根据基准测试的报告，它平均比 CPython 快 7.6 倍。 我很容易相信。 唯一（轻微）的缺点是它总是落后于 Python 版本。\n生成一个 EXE 需要一些工作，你必须将你的 Python 编写成一个名为 RPython 的子集。\nCython\nCython 不仅仅是 Python 的编译器，它是 Python 的超集，支持与 C / C++ 的互操作性。 CPython是用 C 编写的，所以它是一种通常可以很好地与 Python 混编的语言。\n使用 Cython 进行设置有点繁琐，它不像 Nuitka 那样开箱即用。首先，必须从扩展名为 .pyx的 Python 文件开始，你运行 Cython 来创建一个 pystone.c 文件：\n$ cython pystone.pyx --embed\n\n不要忽略 –embed 参数，接下来，你用这条命令编译 pystone.c：\n$ gcc $(python3-config --includes) pystone.c -lpython3.6m -o pystone.exe\n\n如果遇到任何错误，例如「找不到 -lpython 版本」，则可能是因为你的 Python 版本。要查看安装的版本，请运行以下命令：\n$ pkg-config --cflags python3\n\n毕竟，Cython 只给出 228,527 pystones/sec，但是，Cython 需要你做一些指定变量类型的工作。Python 是一种动态语言，因此没有指定类型， Cython 使用静态编译，使用 C 类型变量可以产生更好的优化代码。 （文档相当广泛，需要阅读。）\nSize  Execution pystones/sec\n1. 219,552 Kb  228,527\ncx_freeze\n\n这是一套用于将 Python 脚本「冻结」为可执行文件的脚本和模块，可以在GitHub上找到。我安装了它并创建了一个冻结文件夹来管理内容：\n$ sudo pip3 install cx_Freeze --upgrade\n\n我在安装脚本中发现的一个问题是缺少“lz”的错误。你需要安装 zlib 运行它来安装它：\n$ sudo apt install zlib1g-dev\n\n之后，cx_Freeze 命令使用 pystone.py 脚本创建了一个 dist 文件夹，其中包含一个 lib 文件夹，一个 5MB 的 lib 文件和 pystone 应用程序文件：\n$ cxfreeze pystone.py --target-dir dist\nSize  Execution pystones/sec\n1. 10,216   174,822\n\n不是最快的性能，因为它与 CPython 的速度相同。 （Python 冻结包括将应用程序与所需的Python 元素一起放在单个文件（或文件夹）中，而不是编译，这意味着目标不需要Python。）\n结论\n我对 PyPy 的表现感到敬畏，编译非常快，在按下回车键后不到一秒就产生了结果。 如果你想要一个 exe，我推荐 Nuitka，这是一个不费吹灰之力的编译，运行速度比 CPython 快。你也可以自己试用这些 Python 编译器，看看哪种方法最适合特定需求。\n原文：4 Fast Python Compilers for 2018\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}