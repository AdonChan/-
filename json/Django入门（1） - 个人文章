{"title": "Django入门（1） - 个人文章 ", "index": "python,linux", "content": "Django入门\n项目创建和APP创建\n准备环境\npython3 \nvirtualenv\npip3\npip3 install django==1.1\n项目创建,APP创建\ndjango-admin startproject ops\ncd ops\npython3 manage.py startapp darshboard\ncd darshboard #进入项目路径\ntouch urls.py #创建路由文件\n项目结构如下：\nops/\n|-- darshboard\n| |-- admin.py\n| |-- apps.py\n| |-- __init__.py\n| |-- migrations\n| |-- models.py\n| |-- tests.py\n| |-- urls.py\n| `-- views.py\n|-- db.sqlite3\n|-- manage.py\n`-- ops\n    |-- __init__.py\n    |-- settings.py\n    |-- urls.py\n    `-- wsgi.py\n项目注册\n# vim ops/ops/settings.py\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'darshboard.apps.DarshboardConfig' #在此处注册darshboard项目\n]\n路由注册\n# vim ops/ops/urls.py\n\nfrom django.conf.urls import url,include\nfrom django.contrib import admin\n\nurlpatterns = [\n    url(r'^admin/', admin.site.urls),\n    url(r'^darshboard/',include(\"darshboard.urls\")), #注册app的urls\n]\n此时，一个完整的流程就好了\nhello world\n修改darshboard的路由\n# vim ops/darshboard/urls.py\n\nfrom django.conf.urls import url\nfrom .views import index\n\nurlpatterns = [\n    url(r'^hello/', index,name='index'),\n]\n写一个视图函数\n函数视图的定义：a. 就是一个普通函数b. 接收一个HttpRequest实例作为第一个参数c. 然后返回一个HttpResponse的实例\n# vim ops/darshboard/views.py\n\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\n\ndef index(request):\n    return HttpResponse('hello world')\n\n项目启动&测试\n启动项目\npython manage.py runserver 0:8080\n访问：\n打开本地浏览器输入：\nhttp://211.159.156.251:8080/darshboard/hello/\n即可访问！\nHttpRequest对象\n由Django创建\n属性如下：\nHttpRequest.scheme\nHttpRequest.body\nHttpRequest.path\nHttpRequest.method\nHttpRequest.encoding\nHttpRequest.GET\nHttpRequest.POST\nHttpRequest.META\n方法如下：\nHttpRequest.get_host()\nHttpRequest.get_port()\nHttpRequest.get_full_path()\nHttpRequest.is_secure()\nHttpRequest.is_ajax()\n传递一个字符串作为页面的内容到HttpResponse构造函数\nfrom django.http import HttpResponse\nresponse = HttpResponse(\"here is the web page\")\nresponse = HttpResponse(\"Text only .please,content_type=\"text/plain\")\n参考的views如下\nfrom django.shortcuts import render\nfrom django.http import HttpResponse,JsonResponse\nimport json\ndef index(request):\n    data = {\n        'name':'wanghui',\n        'age':20\n    }\n    data_1 = [\"devops\",\"python\"]\n    #return HttpResponse(json.dumps(data),content_type=\"application/json\")   #返回的content-typet\n    #return HttpResponse(json.dumps(data_1),content_type=\"application/json\")\n    return JsonResponse(data_1,safe=False)\n    # return HttpResponse(\"Hello World!!\",status=599)\n模板\n为了让数据更加美观。\nPOST和GET请求\nGET请求与传参\n- method\n- GET\nPOST提交数据\nQueryDict对象\n方法练习\n#  python manage.py shell\n>>> from django.http import QueryDict\n>>> data = QueryDict('a=12&a=123&b=233')\n>>> data.urlencode()\n'a=12&a=123&b=233'\n数据库同步\n官方给出的数据库连接设置\nhttps://docs.djangoproject.com/en/1.11/ref/settings/#databases\n数据库同步相关命令\npython manage.py showmigrations\npython manage.py sqlmigrate sessions 0001\npython manage.py dbshell   # 进入shell模式\n创建用户\ndjango-shell创建用户\n# 方式一：\n(venv3) [wanghui@www ops]$ python manage.py shell\nPython 3.6.1 (default, Jun 22 2018, 18:25:52) \n[GCC 4.8.5 20150623 (Red Hat 4.8.5-28)] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n(InteractiveConsole)\n>>> from django.contrib.auth.models import User\n>>> User.objects.create_user('rock','12272@qq.com','123456')   #创建普通用户\n>>> u = User.objects.get(username='rock')     #查找用户\n>>> u.set_password('654321')       #修改密码\n>>> u.save()                                   #保存\n-------------------------------------------------------------------------------------------------------------\n# 方式二：\n(venv3) [wanghui@www ops]$ python manage.py createsupperuser\n用户登录小练习\n重点在于对函数视图的练习\ndarshboard/views.py\nfrom django.shortcuts import render\nfrom django.http import HttpResponse,JsonResponse,QueryDict\nfrom django.template import loader,Context,Template\nfrom django.contrib.auth.models import User\nfrom django.contrib.auth import login,authenticate\n\ndef user_login(request):\n    # print(request.GET)\n    # 获取提交过来的用户名&密码\n    if request.method == \"GET\":     #get请求的话，就直接返回页面\n        return render(request, 'user_login.html')\n    elif request.method == \"POST\":  #post就要获取用户名和密码\n        username = request.POST.get(\"username\")\n        password = request.POST.get(\"password\")\n    # 根据用户名取出这个记录是否存在\n        user_obj = authenticate(username=username,password=password)\n        if user_obj:\n            login(request,user_obj)\n            print(\"登陆成功!\")\n        else:\n            print(\"登陆失败！\")\n    elif request.method == 'DELETE':      # 通过delete方法获取请求体\n        data = QueryDict(request.body)    # 获取delete的请求体\n        print(data)\n    return HttpResponse(\"\")\ndarshboard/urls.py   #指定路由\nfrom django.conf.urls import url,include\nfrom django.contrib import admin\nfrom .views import index,index_template,index_methods,user_login\nurlpatterns = [\n    url(r'^user_login',user_login)\n]\ndarshboard/user_login.html\n<ul>\n    <form method=\"DELETE\" action=\"#\">   \n        <li>用户名：<input type=\"text\" name=\"username\"></li>\n        <li>密码：<input type=\"text\" name=\"password\"></li>\n        <li><input type=\"submit\"></li>\n    </form>\n</ul>\n关于delete方法的请求方式\n在linux本地机器上执行：\ncurl -XDELETE http://127.0.0.1:8080/darshboard/user_login/ -d username=rock -d password=654321\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}