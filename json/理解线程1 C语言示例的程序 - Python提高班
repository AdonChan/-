{"title": "理解线程1 C语言示例的程序 - Python提高班 ", "index": "c,python", "content": "一个简单的C语言实现的线程示例\n\n在看《Beginning Linux Programming》时，为了更好的理解线程的概念，书中列举了这样一个小例子:\n#include <stdio.h>\n#include <unistd.h>\n#include <stdlib.h>\n#include <string.h>\n#include <pthread.h>\n\nvoid *thread_function(void *arg);\nchar message[] = \"Hello World\";\n\nint main() {\n  int res;\n  pthread_t a_thread;\n  void *thread_result;\n\n  res = pthread_create(&a_thread, NULL, thread_function, (void *)message);\n  if (res != 0) {\n    perror(\"Thread creation failed\");\n    exit(EXIT_FAILURE);\n  }\n  printf(\"Waiting for thread to finish...\\n\");\n  res = pthread_join(a_thread, &thread_result);\n  if (res != 0) {\n    perror(\"thread join failed\");\n    exit(EXIT_FAILURE);\n  }\n  printf(\"Thread joined, it returned %s\\n\", (char *)thread_result);\n  printf(\"Message is now %s\\n\", message);\n  exit(EXIT_SUCCESS);\n}\n\nvoid *thread_function(void *arg) {\n  printf(\"thread_function is running, Argument was %s\\n\", (char *)arg);\n  sleep(3);\n  strcpy(message, \"Bye!\");\n  pthread_exit(\"Thank you for the CPU time\");\n}\n\n将程序编译链接后运行，可以看到下面这样的结果\n➜  chapter12 ./thread\nWaiting for thread to finish...\nthread_function is running, Argument was Hello World\nThread joined, it returned Thank you for the CPU time\nMessage is now Bye!\n\n这里使用 pthread_create 创建新线程， pthread_create 的定义如下：\n#include <pthread.h>\n\nint pthread_create(pthread_t *thread, pthread_attr_t *attr, void *(*start_routine)(void *), void *arg);\n\n根据 pthread_create 要求， thread_function 只有一个指向void的指针作为参数，返回的也是指向void的指针。当创建新的线程后，新线程在 thread_function 中开始执行，打印自己的参数。原有线程在确保新线程启动后调用 pthread_join 函数等到线程结束，并且将新线程的返回值存在 thread_result 指针里。新线程可以直接访问 message 数组变量，如果是调用 fork() 的话就没有这种效果。\npython也提供了处理线程相关的 thread 和 基于它上面抽象的 threading 等模块，将在以后的文章中探究。\n不由感慨，如果不多懂一些C语言，那么很难提高自己Python水平啊。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}