{"title": "Python之subprocess库的使用 - 个人文章 ", "index": "python", "content": "介绍\n使用subprocess模块的目的是用于替换os.system等一些旧的模块和方法。\n导入模块\n>>> import subprocess\n命令执行call()\n执行由参数提供的命令，把数组作为参数运行命令。其功能类似于os.system(cmd)。\n>>> subprocess.call(['ls','-l')\n其中参数shell默认为False。在shell设置为True时，可以直接传字符串:\n>>> subprocess.call('ls -l',shell=True)\n获得返回结果check_output()\ncall()是不返回显示的结果的，可以使用check_ouput()来获得返回的结果：\n>>> result = subprocess.check_output(['ls','-l'],shell=True)\n>>> result.decode('utf-8')\n进程创建和管理Popen类\nsubprocess.popen代替os.popen。可以创建一个Popen类来创建进程和进行复杂的交互。\n创建不等待的子进程\nimport subprocess\n\nchild = subprocess.Popen(['ping','-c','4','www.baidu.com'])\nprint('Finished')\n添加子进程等待\nimport subprocess\n\nchild = subprocess.Popen(['ping','-c','4','www.baidu.com'])\nchild.wait()  # 等待子进程结束\nprint('Finished')\n添加了wait()后，主进程会等待子进程结束再执行下面的语句。\n子进程文本流控制\n标准输出重定向：\nimport subprocess\n\nchild = subprocess.Popen(['ls','-l'],stdout=subprocess.PIPE)　　　　#将标准输出定向输出到subprocess.PIPE\nprint(child.stdout.read())  \n使用stdin与其配合使用：\nimport subprocess\n\nchild1 = subprocess.Popen(['cat','/etc/passwd'],stdout=subprocess.PIPE)\nchild2 = subprocess.Popen(['grep','root'],stdin=child1.stdout,stdout=subprocess.PIPE)\n\nprint child2.communicate()\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}