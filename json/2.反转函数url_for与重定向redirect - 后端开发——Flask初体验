{"title": " 2.反转函数url_for与重定向redirect - 后端开发——Flask初体验 ", "index": "flask,python", "content": "在flask中，我们导入url_for和redirect两个函数。\nfrom flask import Flask, url_for, redirect   \n\n首先看url_for，简单来说，这个函数接受视图函数的名字（字符串形式）作为参数，返回视图函数对应的url，例如：\n@app.route('/')\ndef hello_world():\n    print(url_for('index'))\n    return 'Hello World'\n\n@app.route('/index/')\ndef index():\n    return 'index'\n在hello_world函数中使用print(url_for('index'))，将会打印出/index/。有传参的视图函数怎么办？同样将函数名字符串作为第一个参数，将参数以key=value的形式写在后面，如：\n@app.route('/')\ndef hello_world():\n    print(url_for('hello',name='harp'))\n    return 'Hello World'\n\n@app.route('/<name>/')\ndef hello(name):\n    return 'Hello %s' % name\n打印结果为/harp/。\n\nredirect则更简单，功能就是跳转到指定的url，大部分情况下，我们都是和url_for一起使用的，例如：\n@app.route('/')\ndef hello_world():\n    return 'Hello World'\n\n\n@app.route('/<name>/')\ndef hello(name):\n    if name == 'Harp':\n        return 'Hello %s' % name\n    else:\n        return redirect(url_for('hello_world'))\n在hello这个视图函数中，如果url传入的参数是Harp（即请求的网址是http://127.0.0.1:5000/Harp/），则返回'Hello Harp'，其他情况则重定向到hello_world这个视图函数对应的网址'/'。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}