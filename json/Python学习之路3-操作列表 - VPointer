{"title": "Python学习之路3-操作列表 - VPointer ", "index": "python,List", "content": "《Python编程：从入门到实践》笔记。本章内容主要是对列表的进一步操作，以及初识元组数据结构。\n1. 遍历列表\n本章主要是for循环：\n# 代码：\nmagicians = ['alice', 'david', 'carolina']\nfor magician in magicians:\n    print(magician.title() + \", that was a great trick\")\n    print(\"I can't wait to see your next trick, \" + magician.title() + \".\\n\")\n\nprint(\"Thank you, everyone. That was a great magic show!\")\n\n# 输出：\nAlice, that was a great trick!\nI can't wait to see your next trick, Alice.\n\nDavid, that was a great trick!\nI can't wait to see your next trick, David.\n\nCarolina, that was a great trick!\nI can't wait to see your next trick, Carolina.\n\nThank you, everyone. That was a great magic show!\n这里有两个值得注意的地方，一个是“冒号”：for关键字所在的行最后有一个冒号；一个是缩进问题，Python中的代码块都是以缩进为标准，不像C/C++，Java这样的语言以花括号表示代码块。IndentationError指缩进错误。\n2. 创建数值列表\n这有使用一个重要的生成数列的函数 range() ，以及将数据转换成列表的 list() 函数\n# 代码：\nprint(list(range(6)))         # 结束值（不包含结束值）\nprint(list(range(1, 6)))      # 起始值（包含），结束值（不含）\nprint(list(range(1, 6, 2)))   # 起始值，结束值，步长；最后一个数小于结束值\nprint(list(range(6, 1, -1)))  # 负数步长，此时起始值要大于结束值\nprint(list(range(1, 6, -1)))  # 负数步长，若起始值小于结束值，则输出空列表\n\n# 结果：\n[0, 1, 2, 3, 4, 5]\n[1, 2, 3, 4, 5]\n[1, 3, 5]\n[6, 5, 4, 3, 2]\n[]\nrange()函数也常用语for循环，用于标识循环次数，或者用于生成更复杂的列表：\n# 代码：\nsquares = []\nfor value in range(1, 11):\n    squares.append(value ** 2 + 1)\nprint(squares)\n\n# 结果：\n[2, 5, 10, 17, 26, 37, 50, 65, 82, 101]\n对于生成列表，还有一种更简洁的写法，即列表解析式，如上述生成列表的代码可以缩短为一行：\n# 代码：\nsquares = [value ** 2 for value in range(1, 11)]\nprint(squares)\n\nsquares_2 = [value ** 2 for value in range(1, 11) if value % 2 == 0]\nprint(squares_2)\n# 结果：\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n[4, 16, 36, 64, 100]\n列表解析式还可以更复杂，这里就不再赘述了。\n对数字列表执行简单的统计计算：求一个数字列表的最大、最小值以及所有元素之和：\n# 代码：\ndigits = list(range(10))\nprint(min(digits), max(digits), sum(digits))\n\n# 结果：\n0 9 45\n3. 使用列表的一部分\n3.1 切片\n切片操作用于取原始列表的一部分：\n# 代码：\nplayers = ['charles', 'martina', 'michael', 'florence', 'eli']\n# [起始：结束：步长]， 其中，结果列表包含起始索引，但不包含结束索引\nprint(players[0:3])\nprint(players[:3])   # 如果从0开始切片，0可以省略\nprint(players[1:3])\nprint(players[2:])   # 如果要便利到最后一个元素，结束索引可以省略，此时最后一个元素会被包含\nprint(players[-3:])  \nprint(players[::2])  # 设置了步长，但省略了结束索引，列表最后一个元素如果被遍历到，则会被包含\nprint(players[:4:2]) # 设置了步长和结束索引，索引4的元素也被遍历到了，但不会被包含在结果中\n\n# 结果：\n['charles', 'martina', 'michael']\n['charles', 'martina', 'michael']\n['martina', 'michael']\n['michael', 'florence', 'eli']\n['michael', 'florence', 'eli']\n['charles', 'michael', 'eli']\n['charles', 'michael']\n切片操作的参数设置和range()函数的参数设置十分相似，起始，结束，步长都可以为负值，这里先总结一条规律：如果步长为正数，则起始位置要在结束位置的左边；若步长为负数，则起始位置要在结束位置的右边。\n3.2 复制列表\n这里有深浅复制的问题。如果直接将一个变量赋值到另一个变量，那么内存中的数据依然只有一份，而不是两份，这两个变量都指向内存中同一个存放数据的内存区域，如果用C/C++的语言来描述，Python中的变量都相当于指针，这两个变量（指针）指向的是同一片内存，对这两个变量（指针）的操作会相互影响，因为都作用于同一内存块，如下：\n# 代码：\n# 浅复制\nplayers = ['charles', 'martina', 'michael', 'florence', 'eli']\nprint(players)\n\nnames = players\nnames.append(\"test\")\nprint(players)\n\n# 结果：\n['charles', 'martina', 'michael', 'florence', 'eli']\n['charles', 'martina', 'michael', 'florence', 'eli', 'test']\n如果想在内存中将原来的数据复制出一份新的，则需要深复制，切片操作则是实现深复制的一种方法：\n# 代码：\n# 深复制\nplayers = ['charles', 'martina', 'michael', 'florence', 'eli']\nprint(players)\n\nnames = players[:]\nnames.append(\"test\")\nprint(names)\nprint(players)\n\n# 结果：\n['charles', 'martina', 'michael', 'florence', 'eli']\n['charles', 'martina', 'michael', 'florence', 'eli', 'test']\n['charles', 'martina', 'michael', 'florence', 'eli']\n4. 元组（tuple）\n和列表紧密联系的一个数据结构则是元组。列表非常适合用于存储在程序运行期间可能变化的数据集，列表可以被修改。然而有时你需要创建一系列不可修改的元素，这个时候则需要用到元组。元组用圆括号来标识，以下是声明一个元组：\n# 代码：\nmy_tuple = ()    # 空元组\none_tuple = (1,) # 声明含有一个元素的元组。不是one_tuple = (1)\n对元组中元素的访问以及对元组的遍历都和对列表的操作一样；不同的是，元组中的元素不能被改变。虽然元组中的元素不能改变，但是元组变量的值可以改变。从C/C++的角度来看，元组变量是个指针，元组相当于一个const数组，数组虽然不能被改变，但指针可以指向别处。\n# 代码：\ntest_tuple = (1, 2, 3, 4, 5)\nprint(test_tuple)\ntest_tuple = (2, 3, 4, 5, 6)\nprint(test_tuple)\n\n# 结果：\n(1, 2, 3, 4, 5)\n(2, 3, 4, 5, 6)\n相比于列表，元组是更简单的数据结构。如果需要存储的一组值在程序的整个生命周期内都不变，则可使用元组。\n\n迎大家关注我的微信公众号\"代码港\" & 个人网站 www.vpointer.net ~\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}