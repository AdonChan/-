{"title": "Python函数定义与使用 - python3 ：公司内部培训专栏 ", "index": "python", "content": "Python函数定义与调用\n上一篇文章：Python常用运算符与常用内置函数下一篇文章：Python类的定义与操作\n\n1、函数定义与调用\n\n语法：\ndef 函数名():\n\n      函数代码\n\n实例：\ndef printHello():\n    print(\"Hello world\")\n\n#调用函数\nprintHello()\n结果：\nHello world\n2、函数的帮助文档\nhelp(函数名称)：返回对应函数的帮助文档。在函数定义中的首行，用“”添加的就是帮助文档。\n\n实例：\ndef printHello():\n    \"帮助文档：打印hello world\"\n    print(\"Hello world\")\n\nhelp(printHello)\n结果：\nHelp on function printHello in module __main__:\n\nprintHello()\n帮助文档：打印hello world\n3、参数与返回值\npython采用应用传参，当参数类型为不可变类型时，对参数没有影响，当参数类型为可变时，可能会修改参数\n实例：\n#定义b的默认值为3\ndef add(a,b=3):\n    return a+b\n\n#调用函数\nprint(add(1,2))\nprint(add(1))\n结果：\n3\n4\n4、函数嵌套调用\n实例：\ndef A():\n    print(\"A函数调用\")\n    def B():\n        print(\"B函数调用了\")\n    print(\"A函数调用B函数前\")\n    B()\n    print(\"函数A调用函数B后\")\n\n#调用函数\nA()\n结果：\nA函数调用\nA函数调用B函数前\nB函数调用了\n函数A调用函数B后\n5、不定长参数\n加了*的参数变量，还用元组来存储多个参数。加了**的参数，会用字典来存储多个参数\n\n实例：\n#定义b的默认值为3\n#c为元组\n#d为字典\ndef add(a,b=3,*c,**d):\n    print(\"a=\",a)\n    print(\"b=\",b)\n    print(\"c=\",c)\n    print(\"d=\",d)\n\n#调用函数\nadd(1,2)\nprint(\"*\"*30)\nadd(1)\nprint(\"*\"*30)\nadd(1,2,3,4,5)\nprint(\"*\"*30)\nadd(1,2,3,4,5,name=\"mark\",age=18)\n结果：\na= 1\nb= 2\nc= ()\nd= {}\n******************************\na= 1\nb= 3\nc= ()\nd= {}\n******************************\na= 1\nb= 2\nc= (3, 4, 5)\nd= {}\n******************************\na= 1\nb= 2\nc= (3, 4, 5)\nd= {'name': 'mark', 'age': 18}\n6、匿名函数\n用lambda关键词可以创建小型函数，省略了用def关键字来声明函数的标准步骤。\n匿名函数声明与调用\n实例：\nadd=lambda a,b:a+b\n\nprint(add(2,3))\n结果：\n5\n匿名函数作为参数传递\n实例：\ndef fun(a,b,lam):\n    print(\"a=\",a)\n    print(\"b=\",b)\n    print(\"a+b=\",lam(a,b))\n\nadd=lambda a,b:a+b\nfun(4,5,add)\n结果：\na= 4\nb= 5\na+b= 9\n匿名函数用来协助排序\n实例：\n#简单列表排序很简单\nages=[18,19,17]\nprint(ages)\nages.sort()\nprint(ages)\n\n#当列表内包含的是字典，怎么根据字典内的age排序呢？\ninfors=[\n    {\"name\":\"mark\",\"age\":18},\n    {\"name\":\"sq\",\"age\":19},\n    {\"name\":\"xman\",\"age\":17}\n]\nprint(infors)\n'''\n下面匿名函数等效于：\n     def  fun(x):\n         return x[\"age\"]\n'''\ninfors.sort(key=lambda x:x[\"age\"])\nprint(infors)\n\n结果：\n[18, 19, 17]\n[17, 18, 19]\n[{'name': 'mark', 'age': 18}, {'name': 'sq', 'age': 19}, {'name': 'xman', 'age': 17}]\n[{'name': 'xman', 'age': 17}, {'name': 'mark', 'age': 18}, {'name': 'sq', 'age': 19}]\n7、函数重用\n导入整个模块：import 模块名导入特定的函数：from 模块名 import 特定函数\n使用as给函数重命名：from 模块名 import 特定函数 as 新名称\n使用ad给模块冲命名 import 模块名 as 新名词\n导入模块的所有函数：from 模块名 import *\n\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "1"}