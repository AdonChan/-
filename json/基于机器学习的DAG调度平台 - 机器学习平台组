{"title": "基于机器学习的DAG调度平台 - 机器学习平台组 ", "index": "python,机器学习", "content": "什么是DAG?\n有向无环图\n树形结构：除根节点，每个节点有且仅有一个上级节点，下级节点不限。根节点没有上级节点。\n图结构：每个节点上级、下级节点数不限。\nDAG调度平台的定义及场景\n任务调度是在各行各业是个基础问题，当任务复杂同时存在任务复杂依赖的时候，就需要DAG调度。如：机器学习的可视化建模（PAI平台、第四范式），数据的抽取、转换、加载（ETL），在业务复杂情况下就需要DAG的调度管理等接下来说说基于机器学习的DAG调度平台\n系统架构\n构图：\n系统架构说明\nDAG调度平台主要的职责是:1.接受机器学习web传过来的yaml文件(dag定义文件)2.解析yaml文件，变成结构化数据存储到mysql数据库3.开始调度dag定义各个算子任务4.算子执行引擎根据算子类型分发到各个环境进行执行\n名词说明\nyaml:类型XML的数据描述语言，语法更加简单\n算子:机器学习的DAG中各个节点即为算子，在算子执行引擎中称为算子任务。算子背后是python实现的一些算法组件\n1.机器学习前端交互\n机器学习平台前端主要是将机器学习的流程装成一个dag，定义各个算子的出入参，以及算子的配置参数，组装成一个yaml文件，传给DAG调图平台（Azkaban是zip方式交互，Airflow是通过py文件定义，Oozie通过xml）。一个完整的DAG定义应包含以下算子：\n\n数据读取/数据预处理\n特征功能\n模型训练\n模型预测\n模型评估\n模型部署\n\n下图是个简化版的DAG定义，除去了模型部署算子\n2.DAG调度平台各模块介绍\ndag engine（图引擎）：\n负责解析传入的yaml文件。根据yaml的配置生成算子的出入参以及运行配置信息保存到数据库。同时负责任务的调用。\nopertor engine（算子执行引擎）:\n负责算子执行，根据算子类型分发到不同的执行器中。统一的启停接口，日志查询接口，任务状态查询接口\nexecutor（执行器）：\nlocal executor(本地执行器)：\n执行单机的python任务，执行单机文件方式的机器学习算法。当没有大数据平台的时候，只能通过本地执行器执行DAG\ndc executor（分布式计算平台执行器）：\n将python算法发送至大数据计算平台，使用大数据平台资源运行算子。\nbase executor (执行器接口):\n以后的执行器实现需要实现这个基类，方便拓展。\n3.分布式计算平台交互\n针对不同的的计算平台实现base executor去自定义扩充。本系统通过dc executor实现，分布式计算平台需要将python code通过http接口发送过去进行执行。\n部署架构图\nseparation方式\n\nmixture方式\n\n实现细节\nyaml定义格式\ndag:\n operator_list: [algo_local_read_file_45_1517360824080,algo_local_split_data_45_1517360836712,algo_local_model_2c_l_45_1517362008544,algo_local_model_predict_45_1517362016532,algo_local_model_2c_eval_45_1517362022452,algo_local_model_gbdt_111_1517801573063]\n operator_rels:\n  algo_local_read_file_45_1517360824080: [{\"target\":\"algo_local_split_data_45_1517360836712\",\"source_index\":0,\"target_index\":0}]\n  algo_local_split_data_45_1517360836712: [{\"target\":\"algo_local_model_2c_l_45_1517362008544\",\"source_index\":0,\"target_index\":0},{\"target\":\"algo_local_model_gbdt_111_1517801573063\",\"source_index\":1,\"target_index\":0}]\n  algo_local_model_predict_45_1517362016532: [{\"target\":\"algo_local_model_2c_eval_45_1517362022452\",\"source_index\":0,\"target_index\":0}]\n  algo_local_model_gbdt_111_1517801573063: [{\"target\":\"algo_local_model_predict_45_1517362016532\",\"source_index\":0,\"target_index\":0}]\n  algo_local_model_2c_l_45_1517362008544: [{\"target\":\"algo_local_model_predict_45_1517362016532\",\"source_index\":0,\"target_index\":1}]\n operator_details:\n  \n  algo_local_read_file_45_1517360824080:\n   algo_name: algo_local_read_file\n   data_type: 本地python\n   type: 数据源\n   cn_name: 读文件\n   coordinate:\n    x: 137\n    y: 69\n   params:\n    data_id: 40\n  algo_local_split_data_45_1517360836712:\n   algo_name: algo_local_split_data\n   data_type: 本地python\n   type: 数据预处理\n   cn_name: 拆分组件\n   coordinate:\n    x: 226\n    y: 164\n   params:\n    split_type: 1\n    ext1: 0.8\n    ext2: null\n  algo_local_model_2c_l_45_1517362008544:\n   algo_name: algo_local_model_2c_l\n   data_type: 本地python\n   type: 模型算法\n   cn_name: 逻辑回归二分类\n   coordinate:\n    x: 130\n    y: 262\n   params:\n    x_cols: [LIMIT_BAL,SEX,EDUCATION,MARRIAGE,AGE,PAY_0,PAY_2,PAY_3,PAY_4,PAY_5,PAY_6,BILL_AMT1,BILL_AMT2,BILL_AMT3,BILL_AMT4,BILL_AMT5,BILL_AMT6,PAY_AMT1,PAY_AMT2,PAY_AMT3,PAY_AMT4,PAY_AMT5,PAY_AMT6]\n    y_col: next_month\n    pre_value: 1\n    penalty: l2\n    C: 1\n    max_iter: 100\n    senior: true\n    class_weight: null\n    dual: false\n    fit_intercept: true\n    intercept_scaling: 1\n    multi_class: ovr\n    n_jobs: 1\n    random_state: null\n    solver: liblinear\n    tol: 0.0001\n    verbose: 0\n    warm_start: false\n  algo_local_model_predict_45_1517362016532:\n   algo_name: algo_local_model_predict\n   data_type: 本地python\n   type: 模型预测\n   cn_name: 模型预测\n   coordinate:\n    x: 258\n    y: 396\n   params:\n    x_cols: [LIMIT_BAL,SEX,EDUCATION,MARRIAGE,AGE,PAY_0,PAY_2,PAY_3,PAY_4,PAY_5,PAY_6,BILL_AMT1,BILL_AMT2,BILL_AMT3,BILL_AMT4,BILL_AMT5,BILL_AMT6,PAY_AMT1,PAY_AMT2,PAY_AMT3,PAY_AMT4,PAY_AMT5,PAY_AMT6]\n  algo_local_model_2c_eval_45_1517362022452:\n   algo_name: algo_local_model_2c_eval\n   data_type: 本地python\n   type: 模型评估\n   cn_name: 二分类评估\n   coordinate:\n    x: 270\n    y: 503\n   params:\n    y_col: next_month\n    pre_col: predict_result\n    pre_value: 1\n  algo_local_model_gbdt_111_1517801573063:\n   algo_name: algo_local_model_gbdt\n   data_type: 本地python\n   type: 模型算法\n   cn_name: GBDT\n   coordinate:\n    x: 432.1111111111111\n    y: 295.3333333333333\n   params:\n    x_cols: [LIMIT_BAL,SEX,EDUCATION,MARRIAGE,AGE,PAY_0,PAY_2,PAY_3,PAY_4,PAY_5,PAY_6,BILL_AMT1,BILL_AMT2,BILL_AMT3,BILL_AMT4,BILL_AMT5,BILL_AMT6,PAY_AMT1,PAY_AMT2,PAY_AMT3,PAY_AMT4,PAY_AMT5,PAY_AMT6]\n    y_col: next_month\n    pre_value: 1\n    n_estimators: 10\n    max_depth: 5\n    senior: true\n    criterion: friedman_mse\n    init: null\n    learning_rate: 0.1\n    loss: deviance\n    max_features: null\n    max_leaf_nodes: null\n    min_impurity_decrease: 0\n    min_impurity_split: null\n    min_samples_leaf: 1\n    min_samples_split: 2\n    min_weight_fraction_leaf: 0\n    presort: auto\n    random_state: null\n    subsample: 1\n    verbose: 0\n    warm_start: false\n params:\n  translate: [41,-20]\n  scale: 0.9\ndag engine实现逻辑\n1.当前节点，采用广度优先遍历获取所有需要执行的算子(节点)信息。2.轮询所有算子(节点)，判断上算子(节点)是否全部执行完成，执行完成开始执行当前算子(节点)。3.发送请求到operator engine开始执行当前算子(节点)任务。\noperator engine实现逻辑\n1.主进程接受task请求，添加任务执行队列、任务监听队列。2.任务执行进程轮询接受到的队列，根据不同任务类型调用不同executor3.任务监听进程轮询接受到的队列，调用不同executor查询任务执行状态，是任务执行的最终状态（成功、失败）回调dag engine\n\n\nlocal executor实现逻辑\n1.local executor接受任务，发送到队列中。2.local worker进程池(cpu数*2个进程)，轮询获取队列中任务，使用importlib的python去执行对应算子。\n\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "1"}