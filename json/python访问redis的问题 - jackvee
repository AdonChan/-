{"title": "python访问redis的问题 - jackvee ", "index": "python,redis", "content": "今天在本机上（windows）用python访问redis出错，有两种类型的错误：如果我配sentinel的方式，则会报 unknown command 'SENTINEL'这样的错误；如果我配StrictRedis的方式，则会报NOAUTH Authentication required.错误；\nmark一下，明天想办法解决。。。。\nps:最终发现mongo连接失败是密码没有设置导致（居然是因为把线上配置看成线下配置了。。。。）对于第一种错误，公司最近线上出现问题，正好遇到这样的错误，主要原因是sentinel没启动起来；不过这其中的过程有些坑爹，公司有3台redis sentinel机器，其中的一台机器宕机以后，另外两台机器始终无法选举出一台作为主，因为不知道哪位临时工在做redis配置的时候把选举机器的配置为3，导致只要宕掉一台就无法选举出来。实际上应该是把配置改为n-m, n为机器数，m为允许宕掉的机器数。\n附上redis的代码如下:\nimport redis\nimport ConfigParser\nimport redis.sentinel\n\n\nclass RedisConn:\n    _rp = None\n\n    def __init__(self):\n        cp = ConfigParser.SafeConfigParser()\n        cp.read('avatar_redis.conf')\n        host = cp.get('redis', 'host')\n        port = cp.get('redis', 'port')\n        db_name = cp.get('redis', 'dbName')\n        pass_word = cp.get('redis', 'passWord')\n        self._rp = redis.StrictRedis(host=host, port=port, db=0, password=pass_word)\n        # = redis.ConnectionPool(host=host, port=port, db=0, password='')\n        #sentinel = redis.sentinel.Sentinel([(host, port)], socket_timeout=0.1)\n        #self._rp = sentinel.master_for(db_name, socket_timeout=0.1)\n        #self._rp = redis.Redis(connection_pool=conn_pool)\n\n    def get_conn(self):\n        return self._rp\n\n    def set_value(self, key, value):\n        self._rp.set(key, value)\n\n    def get_value(self, key):\n        return self._rp.get(key)\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}