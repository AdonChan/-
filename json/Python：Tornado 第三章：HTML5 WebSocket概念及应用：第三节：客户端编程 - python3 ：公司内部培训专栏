{"title": " Python：Tornado 第三章：HTML5 WebSocket概念及应用：第三节：客户端编程 - python3 ：公司内部培训专栏 ", "index": "python", "content": "上一篇文章：Python：Tornado 第三章：HTML5 WebSocket概念及应用：第二节：服务端编程下一篇文章：Python：Tornado 第四章：Tornado网站部署：第一节：调试模式\n\n由于WebSocket是HTML5的标准之一，所以主流浏览器的Web客户端编程语音JavaScript已经支持WebSocket的客户端编程。\n客户端编程围绕着WebSocket对象展开，在JavaScript中可以通过如下代码初始化WebSocket对象：\nvar Socket=new WebSocket(url);\n在代码中只需给WebSocket构造函数传入服务器的URL地址，比如http://mysite.com/point.\n可以为该对象的如下事件指定处理函数以相应它们：\n\nWebSocket.onopen：此事件发生在WebSocket链接建立时。\nWebSocket.onmessage：此事件发生在收到了来自服务器的消息时。\nWebSocket.onerror：此事件发生在通信过程中有任何错误时。\nWebSocket.onclose：此事件发生在服务器的链接关闭时。\n\n除了这些事件处理函数，还可以通过WebSocket对象的两个方法进行主动操作：\n\nWebSocket.send(data)：向服务器发送消息。\nWebSocket.close()：主动关闭现有链接。\n\n客户端WebSocket编程实例程序如下：index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>WebSocket</title>\n</head>\n<body>\n<a href=\"javascript:WebSocketTest()\">运行WebSocket</a>\n<div id=\"messages\" style=\"height: 200px;background: black;color:white\"></div>\n\n</body>\n<script type=\"text/javascript\">\n    var messageContainer=document.getElementById(\"messages\");\n    function WebSocketTest() {\n        if(\"WebSocket\" in window){\n            messageContainer.innerHTML=\"浏览器支持WebSocket\";\n            var ws=new WebSocket(\"ws://localhost:8888/websocket?Id=12345\");\n            ws.onopen=function () {\n                ws.send(\"onopen\")\n            };\n            ws.onmessage=function (evt) {\n                var received_msg=evt.data;\n                messageContainer.innerHTML=messageContainer.innerHTML+\"<br/>收到的信息：\"+received_msg;\n            }\n            ws.onclose=function () {\n                messageContainer.innerHTML=messageContainer.innerHTML+\"<br/> 连接关闭了\";\n            }\n\n\n        }else{\n            messageContainer.innerHTML=\"浏览器不支持WebSocket\"\n        }\n    }\n</script>\n</html>\n对上述代码解析如下：\n\n客户端页面主体是有两部分组成：一个Run WebSocket链接用于让用户启动WebSocket；另一个id=message的<div>标签用于显示服务器端的消息。\n使用JavaScript语句if(\"WebSocket\" in window)可以判断当前浏览器是否支持WebSocket对象。\n如何浏览器支持WebSocket对象，则定义实例ws链接到服务器的WebSocket地址，并传入自己的标识符参数。然后通过js语法定义事件：onopen、onmessage、onclose的处理函数。除了在onopen事件中客户端向服务器用WebSocket.send()函数发送了消息，其余事件均只将事件结果显示在页面<div>标签中。\n\n运行效果如下：\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}