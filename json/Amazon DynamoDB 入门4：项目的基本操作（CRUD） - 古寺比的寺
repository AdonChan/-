{"title": "Amazon DynamoDB 入门4：项目的基本操作（CRUD） - 古寺比的寺 ", "index": "分布式,nosql,数据库,python,amazon-web-services", "content": "上一节我们介绍了DynamoDB 表的操作，这一节将介绍项目的添加 修改 获取 删除操作。\n创建项目\nAmazon DynamoDB 提供了 PutItem 和 BatchWriteItem 两种方式写入数据\n添加单个项目\n在 Amazon DynamoDB 中，使用 PutItem 操作向表添加项目：\n{\n    TableName: \"Music\",\n    Item: {\n        \"Artist\":\"No One You Know\",\n        \"SongTitle\":\"Call Me Today\",\n        \"AlbumTitle\":\"Somewhat Famous\",\n        \"Year\": 2015,\n        \"Price\": 2.14,\n        \"Genre\": \"Country\",\n        \"Tags\": {\n            \"Composers\": [\n                  \"Smith\",\n                  \"Jones\",\n                  \"Davis\"\n            ],\n            \"LengthInSeconds\": 214\n        }\n    }\n}\n此表的主键包含 Artist 和 SongTitle。您必须为这些属性指定值。以下是要了解的有关此 PutItem 示例的几个关键事项：\n\nDynamoDB 使用 JSON 提供对文档的本机支持。这使得 DynamoDB 非常适合存储半结构化数据，例如 Tags。您也可以从 JSON 文档中检索和操作数据。 \n除了主键（Artist 和 SongTitle），Music 表没有预定义的属性。 \n大多数 SQL 数据库是面向事务的。当您发出 INSERT 语句时，数据修改不是永久性的，直至您发出 COMMIT 语句。利用 Amazon DynamoDB，当 DynamoDB 通过 HTTP 200 状态代码 (OK) 进行回复时，PutItem 操作的效果是永久性的。 \n\nPython Example\nboto3\n# ...\ntable = db3.Table('Music')\ntable.put_item(\n      Item = {\n        \"Artist\": \"No One You Know\",\n        \"SongTitle\": \"My Dog Spot\",\n        \"AlbumTitle\": \"Hey Now\",\n        \"Price\": Decimal('1.98'),\n        \"Genre\": \"Country\",\n        \"CriticRating\": Decimal('8.4')\n    }\n)\n\nOut[98]:\n{'ResponseMetadata': {'HTTPHeaders': {'content-length': '2',\n   'content-type': 'application/x-amz-json-1.0',\n   'server': 'Jetty(8.1.12.v20130726)',\n   'x-amz-crc32': '2745614147',\n   'x-amzn-requestid': 'c7c6be12-9752-403f-97b1-a9ac451a0a98'},\n  'HTTPStatusCode': 200,\n  'RequestId': 'c7c6be12-9752-403f-97b1-a9ac451a0a98',\n  'RetryAttempts': 0}}\n  \ntable.put_item(\n      Item = {\n        \"Artist\": \"No One You Know\",\n        \"SongTitle\": \"Somewhere Down The Road\",\n        \"AlbumTitle\":\"Somewhat Famous\",\n        \"Genre\": \"Country\",\n        \"CriticRating\": Decimal('8.4'),\n        \"Year\": 1984\n    }\n)\ntable.put_item(\n      Item = {\n        \"Artist\": \"The Acme Band\",\n        \"SongTitle\": \"Still In Love\",\n        \"AlbumTitle\":\"The Buck Starts Here\",\n        \"Price\": Decimal('2.47'),\n        \"Genre\": \"Rock\",\n        \"PromotionInfo\": {\n            \"RadioStationsPlaying\":[\n                 \"KHCR\", \"KBQX\", \"WTNR\", \"WJJH\"\n            ],\n            \"TourDates\": {\n                \"Seattle\": \"20150625\",\n                \"Cleveland\": \"20150630\"\n            },\n            \"Rotation\": \"Heavy\"\n        }\n    }\n)\n\ntable.put_item(\n      Item = {\n        \"Artist\": \"The Acme Band\",\n        \"SongTitle\": \"Look Out, World\",\n        \"AlbumTitle\":\"The Buck Starts Here\",\n        \"Price\": Decimal('0.99'),\n        \"Genre\": \"Rock\"\n    }\n)\n\nNote\n\nPutItem 是覆盖操作，如果主键相同，第二次执行将覆盖掉之前的数据\n除了 PutItem 之外，Amazon DynamoDB 还支持同时写入多个（最多25个）项目的 BatchWriteItem 操作。\n\n添加多个项目\nPython Example\nboto3\n# ...\ntable = db3.Table('Music')\n\nwith table.batch_writer() as batch:\n    batch.put_item(\n        Item = {\n            \"Artist\": \"The Acme Band\",\n            \"SongTitle\": \"Look Out, World\",\n            \"AlbumTitle\":\"The Buck Starts Here\",\n            \"Price\": Decimal('0.99'),\n            \"Genre\": \"Rock\"\n        }\n    )\n    batch.put_item(\n        Item = {\n            \"Artist\": \"The Acme Band 0\",\n            \"SongTitle\": \"Look Out, World\",\n            \"AlbumTitle\":\"The Buck Starts Here\",\n            \"Price\": Decimal('1.99'),\n            \"Genre\": \"Rock\"\n        }\n    )\n    batch.put_item(\n        Item = {\n            \"Artist\": \"The Acme Band 1\",\n            \"SongTitle\": \"Look Out, World\",\n            \"AlbumTitle\":\"The Buck Starts Here\",\n            \"Price\": Decimal('2.99'),\n            \"Genre\": \"Rock\"\n        }\n    )\n    batch.put_item(\n        Item = {\n            \"Artist\": \"The Acme Band 1\",\n            \"SongTitle\": \"Look Out, World\",\n            \"AlbumTitle\":\"The Buck Starts Here\",\n        }\n    )\nBatchWriteItem 使用 overwrite_by_pkeys=['partition_key','sort_key'] 参数去除项目中重复的部分。\nwith table.batch_writer(overwrite_by_pkeys=['partition_key', 'sort_key']) as batch:\n    batch.put_item(\n        Item={\n            'partition_key': 'p1',\n            'sort_key': 's1',\n            'other': '111',\n        }\n    )\n    batch.put_item(\n        Item={\n            'partition_key': 'p1',\n            'sort_key': 's1',\n            'other': '222',\n        }\n    )\n去重后，等同于:\nwith table.batch_writer(overwrite_by_pkeys=['partition_key', 'sort_key']) as batch:\n    batch.put_item(\n        Item={\n            'partition_key': 'p1',\n            'sort_key': 's1',\n            'other': '222',\n        }\n    )\n读取数据\n利用 SQL，我们可以使用 SELECT 语句从表中检索一个或多个行。可使用 WHERE 子句来确定返回给您的数据\nDynamoDB 提供以下操作来读取数据：\n\nGetItem - 从表中检索单个项目。这是读取单个项目的最高效方式，因为它将提供对项目的物理位置的直接访问。（DynamoDB 还提供 BatchGetItem 操作，在单个操作中执行最多 100 个 GetItem 调用。）\nQuery - 检索具有特定分区键的所有项目。在这些项目中，您可以将条件应用于排序键并仅检索一部分数据。Query提供对存储数据的分区的快速高效的访问。\n\nScan - 检索指定表中的所有项目。\nNote\n\n\n利用关系数据库，您可以使用 SELECT 语句联接多个表中的数据并返回结果。联接是关系模型的基础。要确保联接高效执行，应持续优化数据库及其应用程序的性能。DynamoDB 是一个非关系 NoSQL 数据库且不支持表联接。相反，应用程序一次从一个表中读取数据。\n使用项目的主键读取项目\nDynamoDB 提供 GetItem 操作来按项目的主键检索项目。\n默认情况下，GetItem 将返回整个项目及其所有属性。\n{\n    TableName: \"Music\",\n    Key: {\n        \"Artist\": \"No One You Know\",\n        \"SongTitle\": \"Call Me Today\"\n    }\n}\n可以添加 ProjectionExpression 参数以仅返回一些属性：\n{\n    TableName: \"Music\",\n    Key: {\n        \"Artist\": \"No One You Know\",\n        \"SongTitle\": \"Call Me Today\"\n    },\n    \"ProjectionExpression\": \"AlbumTitle, Price\"\n}\n\nDynamoDB GetItem 操作非常高效：此操作使用主键值确定相关项目的准确存储位置，并直接此位置检索该项目。\nSQL SELECT 语句支持多种查询和表扫描。DynamoDB 通过其 Query 和 Scan 操作提供相似功能，如查询表和扫描表中所述。\nSQL SELECT 语句可执行表联接，这允许您同时从多个表中检索数据。DynamoDB 是一个非关系数据库。因此，它不支持表联接。\n\nQuery 和 Scan 操作将在之后的章节详细介绍。\nPython Example\nboto3\n# ...\ntable = db3.Table('Music')\nresponse = table.get_item(\n    Key={\n        \"Artist\": \"The Acme Band\",\n        \"SongTitle\": \"Still In Love\"\n    }\n)\nitem = response['Item']\nprint(item)\n\n# output\n{\n        \"Artist\": \"The Acme Band\",\n        \"SongTitle\": \"Still In Love\",\n        \"AlbumTitle\":\"The Buck Starts Here\",\n        \"Price\": Decimal('2.47'),\n        \"Genre\": \"Rock\",\n        \"PromotionInfo\": {\n            \"RadioStationsPlaying\":[\n                 \"KHCR\", \"KBQX\", \"WTNR\", \"WJJH\"\n            ],\n            \"TourDates\": {\n                \"Seattle\": \"20150625\",\n                \"Cleveland\": \"20150630\"\n            },\n            \"Rotation\": \"Heavy\"\n        }\n    }\n    \nresponse = table.get_item(\n    Key={\n        \"Artist\": \"The Acme Band\",\n        \"SongTitle\": \"Still In Love\"\n    },\n    ProjectionExpression = \"AlbumTitle, Price\"\n)\nitem = response['Item']\nprint(item)\n{\n    'AlbumTitle': u'The Buck Starts Here',\n    'Price': Decimal('2.47')\n} \n更新\nSQL 语言提供用于修改数据的 UPDATE 语句。DynamoDB 使用 UpdateItem 操作完成类似的任务。\n在 DynamoDB 中，可使用 UpdateItem 操作修改单个项目。（如果要修改多个项目，则必须使用多个 UpdateItem 操作。）示例如下：\n{\n    TableName: \"Music\",\n    Key: {\n        \"Artist\":\"No One You Know\",\n        \"SongTitle\":\"Call Me Today\"\n    },\n    UpdateExpression: \"SET RecordLabel = :label\",\n    ExpressionAttributeValues: { \n        \":label\": \"Global Records\"\n    }\n}\n\n必须指定要修改的项目的 Key 属性和一个用于指定属性值的 UpdateExpression。\nUpdateItem 替换整个项目，而不是替换单个属性。\nUpdateItem 的行为与“upsert”操作的行为类似：如果项目位于表中，则更新项目，否则添加（插入）新项目。\nUpdateItem 支持条件写入，在此情况下，操作仅在特定 ConditionExpression 的计算结果为 true 时成功完成\n\n{\n    TableName: \"Music\",\n    Key: {\n        \"Artist\":\"No One You Know\",\n        \"SongTitle\":\"Call Me Today\"\n    },\n    UpdateExpression: \"SET RecordLabel = :label\",\n    ConditionExpression: \"Price >= :p\",\n    ExpressionAttributeValues: { \n        \":label\": \"Global Records\",\n        \":p\": 2.00\n    }\n}\nUpdateItem 还支持原子计数器或类型为 Number 的属性（可递增或递减）。\n以下是一个 UpdateItem 操作的示例，它初始化一个新属性 (Plays) 来跟踪歌曲的已播放次数：\n{\n    TableName: \"Music\",\n    Key: {\n        \"Artist\":\"No One You Know\",\n        \"SongTitle\":\"Call Me Today\"\n    },\n    UpdateExpression: \"SET Plays = :val\",\n    ExpressionAttributeValues: { \n        \":val\": 0\n    },\n    ReturnValues: \"UPDATED_NEW\"\n}\n\nReturnValues 参数设置为 UPDATED_NEW，这将返回已更新的任何属性的新值。在此示例中，它返回 0（零）。\n当某人播放此歌曲时，可使用以下 UpdateItem 操作来将 Plays 增加 1：\n{\n    TableName: \"Music\",\n    Key: {\n        \"Artist\":\"No One You Know\",\n        \"SongTitle\":\"Call Me Today\"\n    },\n    UpdateExpression: \"SET Plays = Plays + :incr\",\n    ExpressionAttributeValues: { \n        \":incr\": 1\n    },\n    ReturnValues: \"UPDATED_NEW\"\n}\nPython Example\nboto3使用 UpdateItem 操作修改单个项目\nimport boto3\nimport json\nimport decimal\n\nclass DecimalEncoder(json.JSONEncoder):\n    def default(self, o):\n        if isinstance(o, decimal.Decimal):\n            if o % 1 > 0:\n                return float(o)\n            else:\n                return int(o)\n        return super(DecimalEncoder, self).default(o)\n\ndb3 = boto3.resource('dynamodb', region_name='us-west-2', endpoint_url=\"http://localhost:8000\")\n\ntable = db3.Table('Music')\n\nresponse = table.update_item(\n    Key={\n        \"Artist\":\"No One You Know\",\n        \"SongTitle\":\"Call Me Today\"\n    },\n    UpdateExpression=\"SET RecordLabel = :label\",\n    ExpressionAttributeValues={\n        \":label\": \"Global Records\"\n    },\n    ReturnValues=\"UPDATED_NEW\"\n)\n\nprint(json.dumps(response, indent=4, cls=DecimalEncoder))\nUpdateItem 条件写入 价格大于或等于 2.00 UpdateItem 执行更新\ntable = db3.Table('Music')\n\nresponse = table.update_item(\n    Key={\n        \"Artist\":\"No One You Know\",\n        \"SongTitle\":\"Call Me Today\"\n    },\n    UpdateExpression=\"SET RecordLabel = :label\",\n    ConditionExpression=\"Price >= :p\",\n    ExpressionAttributeValues={\n        \":label\": \"Global Records\",\n        \":p\": 2.00\n    },\n    ReturnValues=\"UPDATED_NEW\"\n)\n\nUpdateItem 操作的示例，它初始化一个新属性 (Plays) 来跟踪歌曲的已播放次数\ntable = db3.Table('Music')\n\nresponse = table.update_item(\n    Key={\n        \"Artist\":\"No One You Know\",\n        \"SongTitle\":\"Call Me Today\"\n    },\n    UpdateExpression=\"SET Plays = :val\",\n    ExpressionAttributeValues={ \n        \":val\": 0\n    },\n    ReturnValues=\"UPDATED_NEW\"\n)\n\n使用 UpdateItem 操作来将 Plays 增加 1\ntable = db3.Table('Music')\n\nresponse = table.update_item(\n    Key={\n        \"Artist\":\"No One You Know\",\n        \"SongTitle\":\"Call Me Today\"\n    },\n    UpdateExpression=\"SET Plays = Plays + :incr\",\n    ExpressionAttributeValues={ \n        \":incr\": 1\n    },\n    ReturnValues=\"UPDATED_NEW\"\n)\n\n删除项目\n在 SQL 中，DELETE 语句从表中删除一个或多个行。DynamoDB 使用 DeleteItem 操作一次删除一个项目。\n在 DynamoDB 中，可使用 DeleteItem 操作从表中删除数据（一次删除一个项目）。您必须指定项目的主键值。示例如下：\n{\n    TableName: \"Music\",\n    Key: {\n        Artist: \"The Acme Band\", \n        SongTitle: \"Look Out, World\"\n    }\n}\nNote\n除了 DeleteItem 之外，Amazon DynamoDB 还支持同时删除多个项目的 BatchWriteItem 操作。\nDeleteItem 支持条件写入，在此情况下，操作仅在特定 ConditionExpression 的计算结果为 true 时成功完成。例如，以下 DeleteItem 操作仅在项目具有 RecordLabel 属性时删除项目：\n{\n    TableName: \"Music\",\n    Key: {\n        Artist: \"The Acme Band\", \n        SongTitle: \"Look Out, World\"\n    },\n   ConditionExpression: \"attribute_exists(RecordLabel)\"\n}\nPython Example\nboto3\ntable = db3.Table('Music')\ntable.delete_item(\n    Key={\n        'AlbumTitle': 'Hey Now'\n        'Artist': 'No One You Know'\n    }\n)\n\n这一节我们介绍了项目的基本操作（CRUD），下一节将介绍索引的创建和管理。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "3"}