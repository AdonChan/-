{"title": "你没看错：Swift可以直接调用Python函数库 - Perfect ", "index": "perfect,swift,python", "content": "上周Perfect又推出了新一轮服务器端Swift增强函数库：Perfect-Python。对，你没看错，在服务器端Swift 其实可以轻松从其他语种的函数库中直接拿来调用，不需要修改任何内容。如果没有类似经验的童鞋可以参考拙作：（1）CSwift：https://github.com/RockfordWe... ，——如何在Swift程序中直接嵌入C语言源代码（2）csweet：https://github.com/RockfordWe...，——如何在Swift程序中直接嵌入C++语言源代码（周末刚做的，文档还没来得及写呢，凑合看源代码吧哈）\n而Perfect-Python不是简单嵌入源代码的问题，是允许用户直接调用Python函数库本身！！！！\n为什么花大力气做这些东西？很简单，程序员都是很懒的家伙，与其重新把几万行代码重写一遍，不如直接抓壮丁来的快——现成成熟的代码在快速原型法中起的作用之大难以想象。\n不错，是由一些很矫情的家伙宣称什么“语言的纯洁性”，比如Vapor，去年一直号称要“纯洁的Swift”，结果两周前终于顶不住压力，参考上一期Ryan的报告可以看到：\n\nVapor is no longer pure Swift as of Vapor 2, and includes at least chttp and LibreSSL / OpenSSL.\n翻译“Vapor已经不像Vapor 2那样使用纯Swift语言了，因为至少包括了一  个C语言组件chttp和LibreSSL / OpenSSL加密函数库”\n\n看见了吗？Vapor作为典型的反面教材，在陷入服务器性能问题的泥潭后终于招架不住投降了——用了两年时间证明一个光鲜的口号是错误的，这是什么样的代价！“实践是检验真理的唯一标准”——闭门思过去吧。\n实践证明，全栈开发需要扬长避短，然后用统一的一种编译型语言做主调是在性能和效率上达到最合理平衡点的，目的是：\n\n快速开发项目\n维持代码稳定性\n项目人工最小化\n最短学习曲线\n保持组件最新\n高性能服务器\n迅速增加更多新功能——这是最关键最关键的\n\n好了，言归正传，我们看一下Perfect-Python的具体用法：\n本项目提供了在Swift服务器应用上直接引用Python 2.7函数库的简便方法。\n本项目采用Swift Package Manager 软件包管理器编译，是Perfect 项目的一部分，但是也可以独立运行\n在使用之前请准备好最新的Swift 3.1 / 4.0 工具链\nLinux 编译事项\n首先请确保 libpython2.7-dev 已经在 Ubuntu 16.04 上正确安装：\n$ sudo apt-get install libpython2.7-dev\nMacOS 编译事项\n请确定 Xcode 8.3.3 / 9.0 以上版本已经正确安装\n快速上手\n首先在Package.swift中增加依存关系：\n.Package(url: \"https://github.com/PerfectlySoft/Perfect-Python.git\", majorVersion: 1)\n然后将下列头文件导入Swift源代码：\nimport PythonAPI\nimport PerfectPython\n请注意在任何程序调用之前，必须调用Py_Initialize()函数初始化python嵌入环境：\nPy_Initialize()\n导入Python函数库模块\n使用 PyObj 类对象用于导入python模块。下列参考范例中，一个名为/tmp/clstest.py的脚本被动态导入到当前Swift运行环境：\nlet pymod = try PyObj(path: \"/tmp\", import: \"clstest\")\n访问Python变量\n导入模块后，您可以使用PyObj.load()函数加载任何一个变量；也可以反过来用 PyObj.save()命令保存当前变量为一个新的值。\n比如，以下python脚本中有个叫做 stringVar 的字符串变量：\nstringVar = 'Hello, world'\n那么要取得这个字符串的值只需要这样做：\nif let str = pymod.load(\"stringVar\")?.value as? String {\n    print(str)\n    // 会打印变量的字符串值 \"Hello, world!\"\n}\n此时您还可以为该变量直接写入新的字符串值：\ntry pymod.save(\"stringVar\", newValue: \"Hola!\")\n注意 目前，Perfect-Python仅支持如下Swift / Python数据类型自动转换：\n\n\nPython 类型\nSwift 类型\n备注\n\n\n\nint\nInt\n\n\nfloat\nDouble\n\n\nstr\nString\n\n\nlist\n[Any]\n递归转换\n\n\ndict\n[String:Any]\n递归转换\n\n\n\n比如，您可以把一个字符串 String 转换为 PyObj，通过 let pystr = \"Hello\".python() 或者 let pystr = try PyObj(value:\"Hello\") 完成转换。\n反过来，如果要把 PyObj 类转换为Swift数据类型，比如字符串，则仍然有两种方法：let str = pystr.value as? String 和 let str = String(python: pystr)。\n执行Python函数\n方法 PyObj.call() 用于带参数执行某个python函数。以如下python脚本为例：\ndef mymul(num1, num2):\n    return num1 * num2\nPerfect-Python 可以用下列方法封装并调用以上函数，您所需要注意的仅仅是其函数名称以及参数。其中函数名称用字符串代替，而参数用一个数组表达：\nif let res = pymod.call(\"mymul\", args: [2,3])?.value as? Int {\n    print(res)\n    // 结果为 6\n}\nPython类对象\n请同样使用 PyObj.load() 函数用于家在Python类对象，但是注意后面一定要紧跟一个PyObj.construct() 用于初始化类对象实例。该方法同样支持用一个任意类型的数组作为参数进行对象构造。\n假设如下脚本的典型python类对象 Person，该类有两个属性姓名name 和年龄age，还有一个名为“自我介绍”的类对象方法intro():\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n        \n    def intro(self):\n        return 'Name: ' + self.name + ', Age: ' + str(self.age)\n在Swift中初始化上述类对象的方法需要进行以下两步走：\nif let personClass = pymod.load(\"Person\"),\n    let person = personClass.construct([\"rocky\", 24]) {\n    // person is now the object instance\n  }\n之后就可以访问类实例的属性变量和方法了，如同上文所提到的普通变量和函数调用的方法一样：\nif let name = person.load(\"name\")?.value as? String,\n    let age = person.load(\"age\")?.value as? Int,\n    let intro = person.call(\"intro\", args: [])?.value as? String {\n      print(name, age, intro)\n}\n回调函数\n参考以下python代码，此时如果执行 x = caller('Hello', callback) 则可以将函数作为参数进行回调:\ndef callback(msg):\n    return 'callback: ' + msg\n\ndef caller(info, func):\n    return func(info)\n在Swift中等效的代码平淡无奇，只不过将待调函数作为参数而已：:\nif let fun = pymod.load(\"callback\"),\n   let result = pymod.call(\"caller\", args: [\"Hello\", fun]),\n   let v = result.value as? String {\n           print(v)\n       // 结果是 \"callback: Hello\"\n}\n更多信息\n关于本项目更多内容，请参考perfect.org.\n扫一扫 Perfect 官网微信号\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}