{"title": "3-Django视图 - Python ", "index": "python,视图,django", "content": "概述\n作用：视图接收WEB请求并返回WEB响应方法：1.  FBV（function base views） 就是在视图里使用函数处理请求。\n​        2.  CBV（class base views） 就是在视图里使用类处理请求。        \n响应： 可以是一个HTML页面，一个重定向，一个404错误、一个JSON数据等等\n\n过程：\n\nURLConf\n\n视图函数\n\nHttpRequest对象\n概述: 服务器接收到http协议的请求后，会根据报文创建HttpRequest对象; 视图函数的一个形参就是HttpRequest对象\n属性\n\n方法\nis_ajax()： 如果请求是通过XMLHTTPRequest类发起的，返回True\nQueryDict对象clipboard.png\nGET属性\nhttp://127.0.0.1:8000/get1/?a=1&b=2&c=3\ndef get1(request):\n    a = request.GET.get(\"a\")\n    b = request.GET.get(\"b\")\n    c = request.GET.get(\"c\")\n    return HttpResponse(a+\"-\"+b+\"-\"+c)\nhttp://127.0.0.1:8000/get2/?a=1&a=2&c=3\ndef get2(request):\n    alist = request.GET.getlist(\"a\")\n    c = request.GET.get(\"c\")\n    return HttpResponse(alist[0]+\"-\"+alist[1]+\"-\"+c)\nPOST属性\n使用表单提交，需要将settings.py文件中的'django.middleware.csrf.CsrfViewMiddleware',中间件去掉\n或者加上{%csrf_token}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>注册</title>\n</head>\n<body>\n    <form action=\"/register/\" method=\"post\">\n        用户名:\n        <input type=\"text\" name=\"username\" value=\"\"><hr/>\n        密码:\n        <input type=\"password\" name=\"passwd\" value=\"\"><hr/>\n        爱好:\n        <input type=\"checkbox\" name=\"hobby\" value=\"power\">权利\n        <input type=\"checkbox\" name=\"hobby\" value=\"money\">金钱\n        <input type=\"checkbox\" name=\"hobby\" value=\"book\">阅读<hr/>\n        <input type=\"submit\" value=\"注册\">\n    </form>\n</body>\n</html>\n#views.py\ndef register(request):\n    if request.method == \"GET\":\n        return render(request, \"register.html\")\n    else:\n        username = request.POST.get(\"username\")\n        passwd   = request.POST.get(\"passwd\")\n        hobbys   = request.POST.getlist(\"hobby\")\n        print(username, passwd, hobbys)\n        return HttpResponse(\"注册成功\")\nHttpResponse对象\n概述： HttpRequest对象由Django自动创建的，但是HttpResponse对象由程序员创建的；存储服务器响应给客户端的数据\n用法\n\n常见的MIME类型(通用型)：\n\n超文本标记语言文本 .html text/html\nxml文档 .xml text/xml\nXHTML文档 .xhtml application/xhtml+xml\n普通文本 .txt text/plain\nRTF文本 .rtf application/rtf\nPDF文档 .pdf application/pdf\nMicrosoft Word文件 .word application/msword\nPNG图像 .png image/png\nGIF图形 .gif image/gif\nJPEG图形 .jpeg,.jpg image/jpeg\nau声音文件 .au audio/basic\nMIDI音乐文件 mid,.midi audio/midi,audio/x-midi\nRealAudio音乐文件 .ra, .ram audio/x-pn-realaudio\nMPEG文件 .mpg,.mpeg video/mpeg\nAVI文件 .avi video/x-msvideo\nGZIP文件 .gz application/x-gzip\nTAR文件 .tar application/x-tar\n任意的二进制数据 application/octet-stream\n\n属性\n\n\n属性\n描述\n\n\n\ncontent\n表示返回的内容，字符串类型\n\n\ncharset\n表示response采用的编码字符集，字符串类型\n\n\nstatus_code\n响应HTTP的状态码\n\n\ncontent_type\n指定输出的MIME类型\n\n\n\n方法\ninit: 使用页面实例化HttpResponse对象\nwrite(content):\n# 以文件的方式写入，将 content 写到报文的主体中，这使得 HttpResponse 的实例类似于文件对象\ndef index(request):\n    response = HttpResponse()\n    response.content = \"sunck is a good man\"\n    response.charset = \"utf-8\"\n    response.write(\"!\")\n    response.write(\"very good!\")\n    return response\nflush() : 以文件的方式输出缓冲区; 在flush之后就不要在写write了\nset_cookie():原型：set_cookie(self, key, value='', max_age=None, expires=None, path='/', domain=None, secure=False, httponly=False)\n作用： 设置cookie,cookie是保存在客户端的信息，以键值对的形式保存\n参数：\n\nkey ： cookie的键\nvalue：cookie的值\nmax_age： 过期时间 单位秒\nexpires：设置过期时间 datetime.datetime 对象\n\n示例：\ndef setcookie(request):\n    response = HttpResponse(\"sunck is a handsome man\")\n    response.set_cookie(\"sunck\", \"good\")\n    return response\n\nrequest.COOKIES.get(\"sunck\")\n子类HttpResponseRedirect\n功能： 重定向，服务器端跳转\n实现\nfrom django.http import HttpResponse, HttpResponseRedirect\ndef indexTemp(request):\n    # 重定向到/index/\n    return HttpResponseRedirect(\"/index/\")\n\nfrom django.shortcuts import render, redirect\nfrom django.http import HttpResponse, HttpResponseRedirect\n\ndef indexTemp(request):\n    # 重定向到/index/, HttpResponseRedirect很少用了，一般用redirect\n    # return HttpResponseRedirect(\"/index/\")\n    return redirect(\"/index\")\n子类JsonResponse\n返回JSON数据，一般用于异步请求\n优点： 帮助用户创建JSON编码响应； 参数是字典对象，如果传入不是字典格式比如列表，设置参数safe=False；JsonResponse的默认Content-Type为application/json，不需要我们写了。\n状态保持\n概述\n\n启用session\n# settings.py  默认已经启用\n'django.contrib.sessions',\n'django.contrib.sessions.middleware.SessionMiddleware'\n使用session\n启用session后，每个HttpRequest对象都将具有一个session属性，它是一个类似字典的对象\n\n\n方法\n解释\n\n\n\nget(key, default=None)\n根据键获取会话的值\n\n\nclear()\n清除所有会话\n\n\nflush()\n删除当前的会话并删除会话的cookie\n\n\ndel request.session[键]\n删除会话\n\n\n\n示例\ndef home(request):\n    userAccount = request.session.get(\"userAccount\", default=\"未登录\")\n    return render(request, \"home.html\", {\"userAccount\":userAccount})\ndef cart(request):\n    userAccount = request.session.get(\"userAccount\", default=\"未登录\")\n    return render(request, \"cart.html\", {\"userAccount\":userAccount})\ndef login(request):\n    if request.method == \"GET\":\n        fromPath = request.GET.get(\"from\")\n        return render(request, \"login.html\", {\"fromPath\":fromPath})\n    else:\n        userAccount = request.POST.get(\"userAccount\")\n        passwd      = request.POST.get(\"passwd\")\n        # 从哪里来\n        fromPath = request.GET.get(\"from\")\n        # 验证\n        if userAccount == \"sunck\" and passwd == \"sunck1999\":\n            #登陆成功\n            #状态保持，将用户名写入session\n            request.session[\"userAccount\"] = userAccount\n            \n            fromPath = \"/\" + fromPath + \"/\"\n            return redirect(fromPath)\n        else:\n            #登陆失败\n            return redirect(\"/login/?from=%s\"%fromPath)\nfrom django.contrib.auth import logout\ndef quit(request):\n    logout(request)\n    return redirect(\"/home/\")\n过期时间\n\n存储session\n基于数据库的会话： 默认的会话存储方式\nSESSION_ENGINE='django.contrib.sessions.backends.db'\n基于缓存的会话: 只存在本地内存中，如果丢失则不能找回，比数据库的方式读写更快\nSESSION_ENGINE='django.contrib.sessions.backends.cache'\n数据库用于做持久化，缓存用于提高效率,先去缓存中取数据，缓存没有再去数据库中取，然后在缓存中存一份\nSESSION_ENGINE='django.contrib.sessions.backends.cached_db'\n使用redis缓存session\nSESSION_ENGINE='redis_sessions.session'\nSESSION_REDIS_HOST='localhost'\nSESSION_REDIS_PORT=6379\nSESSION_REDIS_DB=0\nSESSION_REDIS_PASSWORD=''\nSESSION_REDIS_PREFIX='session'\n\n#通过redis-cli客户端可以查看：\n127.0.0.1:6379> select 0\nOK\n127.0.0.1:6379[4]> keys *\n1) \"session:0bjyuegx0i5ivyuzpb8ezgo0b35u2z4v\"\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "1"}