{"title": "Python特性之元组 - 终南山下 ", "index": "python", "content": "\n元组不仅仅是不可变列表\n\n元组其实是对数据的记录:元组中的每个元素都存放了记录中一个字段的数据,外加这个字段的位置。\n正是这个位置信息给数据赋予了意义\nlax_coordinates = (33.9425, -118.408056)\ncity, year, pop, chg, area = ('Tokyo', 2003, 32450, 0.66, 8014)\ntraveler_ids = [('USA', '31195855'), ('BRA', 'CE342567'), ('ESP', 'XDA205856')]\nfor passport in sorted(traveler_ids):\n    print('%s/%s' % passport)\n\nfor country, _ in traveler_ids:  # 元组拆包\n    print(country)\n元组拆包可以应用到任何可迭代对象\n\n唯一硬性要求:被迭代对象中的元素数量必须要跟接受这些元素的元组的空档数一致\n\n最好辨认的元组拆包形式就是平行赋值\n\n1 平行赋值\nlatitude, longitude = lax_coordinates\n2 不使用中间变量\nlatitude, longitude = longitude, latitude\n3 用*运算符把一个可迭代对象拆开作为函数的参数\nt = (20, 8)\nquotient, remainder = divmod(*t)\n4 让一个函数可以以元组的形式返回多个值\nimport os\n_, filename = os.path.split('/home/app/.ssh/idrsa.pub')\nprint(filename)\n用*来处理剩下的元素\na, b, *rest = range(5)\nprint(*rest)\n*前缀只能用在一个变量名前面，但是位置可以随意\na, *body, c, d = range(5)\nprint(*body)\n嵌套元组拆包\nmetro_areas = [\n    ('Tokyo', 'JP', 36.933, (35.689722, 139.691667)),\n    ('Delhi NCR', 'IN', 21.935, (28.613889, 77.208889)),\n    ('Mexico, City', 'MX', 20.142, (19.43333, -99.133333)),\n    ('New York-Newark', 'US', 20.142, (40.808611, -74.020386)),\n    ('Sao Paulo', 'BR', 19.649, (-23.547778, -46.635833)),\n]\n\nprint('{:15} |{:^9} |{:^9}'.format('', 'lat.', 'long.'))\nfmt = '{:15} | {:9.4f}|{:9.4f}'\nfor name, cc, pop, (latitude, longitude) in metro_areas:\n    if longitude <= 0:\n        print(fmt.format(name, latitude, longitude))\n具名元组\n\ncollections.namedtuple 是一个工厂函数，可以用来构建一个带字段名字的元组和一个有名字的类(利于调试)\n创建一个具名元组需要两个参数，一个是类名，另一个是类的各个字段的名字。\n存放在对应字段的数据要以一串参数的形式传入到构造函数中。\n通过字段名或者位置来获取一个字段的信息\n\nfrom collections import namedtuple\nCity = namedtuple('City', 'name country population coordinates')\ntokyo = City('Tokyo', 'JP', 36.933, (35.689722, 139.691667))\nprint(tokyo)\n\n_fields属性是一个包含这个类所有字段名称的元组\n用_make()通过接受一个可迭代对象来生成这个类的一个实例,作用跟City(*delhi_data)一样\n_asdict把具名元组以collections.OrderedDict形式返回\n\nprint(City._fields)\nLatLong = namedtuple('LatLong', 'lat long')\ndelhi_data = ('Delhi NCR', 'IN', 21.935, LatLong(28.613889, 77.208889))\ndelhi = City._make(delhi_data)\nprint(delhi._asdict())\nfor key, value in delhi._asdict().items():\n    print(key + ':', value)\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}