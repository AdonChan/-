{"title": "【python socket编程】—— 1.初探 - 个人文章 ", "index": "socket,python", "content": "Flask或者其他框架都是封装的比较完善，我们可以不去关注路由、SESSION等到底是怎么实现的，现在我们使用socket来实现一个带有注册、登录功能的To do网站，这样能对后端框架了解的稍微更深入一点（当然你也可以直接去看Flask源码）。\n\n主程序runserver.py代码如下：\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\nimport socket\nfrom exts import Request\nfrom route import response_for_request\nfrom datetime import datetime\n\n\ndef run_server(host='', port=1207):\n    # 建立一个socket.socket()类s\n    with socket.socket() as s:\n        # 设置s在服务端关闭后马上释放端口，避免Address already in use错误\n        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        # 绑定host和port\n        s.bind((host, port))\n        while 1:\n            # 开始监听传入连接，可以挂起的最大连接数为5\n            s.listen(5)\n            # 接受连接，根据buffer_size不断读取内容\n            connection, address = s.accept()\n            r = ''\n            buffer_size = 1024\n            while 1:\n                data = connection.recv(1024).decode('utf-8')\n                r += data\n                if len(data) < buffer_size:\n                    break\n            # 防止浏览器传空请求过来\n            if len(r.split()) < 2:\n                continue\n            # 最后取得的r是一个http请求头字符串，对其解析，然后使用sendall返回相应的内容  \n            request = Request(r)\n            # 每次请求时打印时间，请求的方法和路径\n            print(str(datetime.now())[:19], request.method, request.path)\n            response = response_for_request(request)\n            connection.sendall(response)\n            connection.close()\n\n\nif __name__ == '__main__':\n    run_server()\nrun_server函数代码的简单说明可以看注释；from exts import Request：从exts导入一个Request类，这个Request类是自己编写的，用于解析http请求头，这部分是很简单的，在网上搜索http请求相关内容，就可以自行写一个，包括返回请求头的路径、方法、各个字段以及body部分等，都是字符串相关的操作。from route import response_for_request：从route.py导入相应函数，即传入一个上一步中的Request类，返回对应的网页内容，具体实现将在后续讲解。\n\n可以说，主程序就已经编写好了，整个逻辑也很简单，使用socket监听连接，解析请求，返回请求对应的内容。后续只要去处理解析请求和响应部分即可，主程序可以不用再修改。\n\n下一篇文章：【python socket编程】—— 2.解析http请求头\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}