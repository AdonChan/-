{"title": "Python数据结构——双端队列 - Geek情怀 ", "index": "队列,数据结构与算法,python", "content": "双端队列（Deque），是一种类似于队列的元素的有序集合。它拥有两端，队首和队尾，并且元素保持在当前的位置。双端队列的一个不同点就是，添加和删除元素的位置不受限制。新元素可以在队首或者队尾添加。同样地，双端队列中的元素可以从两端弹出。在某种意义上，这种混合的线性结构同时具有栈和队列的性质。\n\n很重要的一点，即使双端队列具有栈和队列的特性，但它不会被强制执行的LIFO和FIFO操作。这取决于你做出统一的添加和删除操作。\n双端队列的操作如下：\nDeque()          创建一个空的双端队列，无参数，返回值是空队列。\nadd_front(item)  在队首添加入一个元素，参数是数据项，无返回值。\nadd_rear(item)   在队尾添加入一个元素，参数是数据项，无返回值。\nremove_front()   删除队首的元素，不需要参数，返回值是被删除的元素，队列本身有变化。\nremove_rear()    删除队尾的元素，不需要参数，返回值是被删除的元素，队列本身有变化。\nis_Empty()       检测队列是否为空。无参数，返回布尔值。\nsize()           返回队列元素的个数。无参数，返回一个整数。\n\n双端队列操作举例：\n\n\nDeque Operation\nDeque Contents\nReturn Value\n\n\n\nd.isEmpty()\n[]\nTrue\n\n\nd.addRear(4)\n[4]\n \n\n\nd.addRear('dog')\n['dog',4,]\n \n\n\nd.addFront('cat')\n['dog',4,'cat']\n \n\n\nd.addFront(True)\n['dog',4,'cat',True]\n \n\n\nd.size()\n['dog',4,'cat',True]\n4\n\n\nd.isEmpty()\n['dog',4,'cat',True]\nFalse\n\n\nd.addRear(8.4)\n[8.4,'dog',4,'cat',True]\n \n\n\nd.removeRear()\n['dog',4,'cat',True]\n8.4\n\n\nd.removeFront()\n['dog',4,'cat']\nTrue\n\n\n\n\n列表 VS 双端队列\n双端队列支持线程安全，在双端队列的任何一端执行添加和删除操作，它们的内存效率几乎相同（时间复杂度为O(1)）。\n虽然list也支持类似的操作，但是它对定长列表的操作表现很不错，而当遇到pop(0)和insert(0, v)这样既改变了列表的长度又改变其元素位置的操作时，其时间复杂度就变为O(n)了。\n在双端队列中最好不使用切片和索引，你可以用popleft和appendleft方法，双端队列对这些操作做了优化。在两端的索引访问时间复杂度为O(1)，但是访问中间元素的时间复杂度为O(n)，速度较慢，对于快速随机的访问，还是用列表代替。\n列表用于随机访问和定长数据的操作，包括切片，而双端队列适用于在两端压入或弹出元素，索引（但不包括切片）的效率可能低于列表。\n\n实现双端队列：\nclass Deque:\n    \"\"\"模拟双端队列\"\"\" \n    def __init__(self):\n        self.items = []\n\n    def isEmpty(self):\n        return self.items == []\n\n    def addFront(self, item):\n        self.items.append(item)\n\n    def addRear(self, item):\n        self.items.insert(0,item)\n\n    def removeFront(self):\n        return self.items.pop()\n\n    def removeRear(self):\n        return self.items.pop(0)\n\n    def size(self):\n        return len(self.items)\n\n以下是测试代码：\nd=Deque()\nprint(d.isEmpty())\nd.addRear(4)\nd.addRear('dog')\nd.addFront('cat')\nd.addFront(True)\nprint(d.size())\nprint(d.isEmpty())\nd.addRear(8.4)\nprint(d.removeRear())\nprint(d.removeFront())\n\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "16"}