{"title": "Python MySQLdb模块 - 个人文章 ", "index": "python", "content": "Python MySQLdb模块\n安装\n系统：Ubuntu 14.04\nMySQLdb\n$ pip install Mysql-python\n-> 报错：EnvironmentError: mysql_config not found （安装libmysqlclient-dev）\n$ apt-get install libmysqlclient-dev\n$ pip install Mysql-python\n\n如果是MAC系统，则需要先安装 mysql 服务。\n使用\n查数据示例（fetchall()获取数据）\nimport MySQLdb\n\n# 建立连接\nconn = MySQLdb.connect(host='127.0.0.1', user='sate', db='dbtest', passwd='password')\n\n# 设置游标\ncur = conn.cursor()\n\n# 执行SQL命令，并不会直接返回查询结果，而是返回SQL语句影响的行数\nreCount = cur.execute('select * from Products;')\nprint reCount        # 输出一个数字，是SQL影响的行数\n\n# 使用 fetchall()方法获取数据，循环输出结果，以元祖的方式输出\nfor data in cur.fetchall():\n    print data\n    \n# 关闭连接\ncur.close()\nconn.close()\n# 结果==》\n5\n('00001', 'hilife')\n('00002', 'GTL')\n('00003', 'GLA')\n('000004', 'TYA')\n('000005', 'TUH')\n\n插入或者更改数据\nimport MySQLdb\n\nconn = MySQLdb.connect(host='127.0.0.1', user='sate', db='dbtest', passwd='password')\ncur = conn.cursor()\n\n# 定义SQL语句\nsql = 'insert into Products(prod_id, prod_name) values(%s, %s);'\n# 定义数据\nparams = ('00002', 'GLA')\nreCount = cur.execute(sql, params)        #为了防止SQL注入,可以使用该方法\nconn.commit()   #提交\n\ncur.close()\nconn.close()\n批量插入数据\nimport MySQLdb\n\nconn = MySQLdb.connect(host='127.0.0.1', user='sate', db='dbtest', passwd='password')\ncur = conn.cursor()\n\n# 要批量插入的数据\nli = [\n    ('000004', 'TYA'),\n    ('000005', 'TUH')\n]\nsql = 'insert into Products(prod_id, prod_name) values(%s, %s);'\n# 批量使用executemany\nreCount = cur.executemany(sql, li)        #为了防止SQL注入,可以使用该方法\nconn.commit()   #提交\n\ncur.close()\nconn.close()\n之前查看数据时，返回是元祖形式，有时看起来并不明显，我们可以选择用字典的方式，将列名一起输出。\nimport MySQLdb\n\nconn = MySQLdb.connect(host='127.0.0.1', user='zheng', db='satezheng', passwd='satezheng')\n\n# 使用字典形式返回数据\ncur = conn.cursor(cursorclass = MySQLdb.cursors.DictCursor)\n\n# 执行命令，并不会直接打印,可以使用fetchall来读取。\nreCount1 = cur.execute('select * from Products')\n\nprint reCount1        # 输出一个数字，是SQL影响的行数\nfor data in cur.fetchall():\n    print data\ncur.close()\nconn.close()\n# 结果==》\n5\n{'prod_name': 'hilife', 'prod_id': '00001'}\n{'prod_name': 'GLA', 'prod_id': '00002'}\n{'prod_name': 'GTL', 'prod_id': '00003'}\n{'prod_name': 'TYA', 'prod_id': '000004'}\n{'prod_name': 'TUH', 'prod_id': '000005'}\n\ncursor读取执行结果的方法有：\n\n\nfetchall() 把所有的都读出来\n\nfetchmany(n) 输出指定数量n的行\n\nfetchone() 只返回第一条结果\n\nfetchone() 一次只返回一条结果，下次返回第二条，和文件的readlines类似\n\n对应的也会有指针的概念，scroll()可以指定读取的位置\ncur.scroll(0, mode='absolute')    # 绝对指针， 0 就是指针的位置\ncur.scroll(-1, mode='relative')    # 相对指针， -1 指针位置向前移一位（指针位置-1）\nimport MySQLdb\n\nconn = MySQLdb.connect(host='127.0.0.1', user='zheng', db='satezheng', passwd='satezheng')\ncur = conn.cursor()\n\nreCount = cur.execute('select * from Products;')\n\n# 使用 fetchone()方法获取数据\ndata = cur.fetchone()\nprint data\ndata = cur.fetchone()\nprint data\ndata = cur.fetchone()\nprint data\n# 结果==》\n('00001', 'hilife')\n('00002', 'GTL')\n('00003', 'GLA')\n\n# 使用绝对指针时\n...\ndata = cur.fetchone()\nprint data\ndata = cur.fetchone()\nprint data\ncur.scroll(0, mode='absolute')    # 将指针指向 0\ndata = cur.fetchone()\nprint data\n# 结果==》\n('00001', 'hilife')\n('00002', 'GTL')\n('00001', 'hilife')\n\n# 使用相对指针\ndata = cur.fetchone()\nprint data\ndata = cur.fetchone()\nprint data\ncur.scroll(-1, mode='relative')    # 指针位置减1\ndata = cur.fetchone()\nprint data\n# 结果==》\n('00001', 'hilife')\n('00002', 'GTL')\n('00002', 'GTL')\n\ncur.lastrawid() 获取自增id\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "3"}