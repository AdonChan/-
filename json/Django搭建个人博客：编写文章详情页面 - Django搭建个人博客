{"title": "Django搭建个人博客：编写文章详情页面 - Django搭建个人博客 ", "index": "blog,python,django", "content": "有了文章列表页面后，当然还需要详情页面，方便用户对某一篇感兴趣的文章深入阅读。\n编写视图函数\n打开article/views.py，增加文章详情页面的视图函数article_detail()：\narticle/views.py\n\n...\n\n# 文章详情\ndef article_detail(request, id):\n    # 取出相应的文章\n    article = ArticlePost.objects.get(id=id)\n    # 需要传递给模板的对象\n    context = { 'article': article }\n    # 载入模板，并返回context对象\n    return render(request, 'article/detail.html', context)\n\n\narticle_detail(request, id)函数中多了id这个参数。注意我们在写model的时候并没有写叫做id的字段，这是Django自动生成的用于索引数据表的主键（Primary Key，即pk）。有了它才有办法知道到底应该取出哪篇文章。\n\nArticlePost.objects.get(id=id)意思是在所有文章中，取出id值相符合的唯一的一篇文章。\n\n然后编写article/urls.py，配置路由地址：\narticle/urls.py\n\n...\n\nurlpatterns = [\n    ...\n    \n    # 文章详情\n    path('article-detail/<int:id>/', views.article_detail, name='article_detail'),\n]\n<int:id>：Django2.0的path新语法用尖括号<>定义需要传递的参数。这里需要传递名叫id的整数到视图函数中去。\n重申一下老版本的Django是没有path语法的。\n编写模板\n在templates/article/中新建detail.html文件，编写如下代码：\ntemplates/article/detail.html\n\n<!-- extends表明此页面继承自 base.html 文件 -->\n{% extends \"base.html\" %}\n{% load staticfiles %}\n\n<!-- 写入 base.html 中定义的 title -->\n{% block title %}\n    文章详情\n{% endblock title %}\n\n<!-- 写入 base.html 中定义的 content -->\n{% block content %}\n\n<!-- 文章详情 -->\n<div class=\"container\">\n    <div class=\"row\">\n        <!-- 标题及作者 -->\n        <h1 class=\"col-12 mt-4 mb-4\">{{ article.title }}</h1>\n        <div class=\"col-12 alert alert-success\">作者：{{ article.author }}</div>\n        <!-- 文章正文 -->\n        <div class=\"col-12\">\n            <p>{{ article.body }}</p>\n        </div>\n    </div>\n</div>\n\n{% endblock content %}\n这里我们用{{ article.xxx }}取出了文章标题、作者以及正文。\n前面我们已经通过后台创建了几篇文章，这里将取出id为1的一篇文章测试效果。\n运行开发服务器后，在浏览器中输入http://127.0.0.1:8000/article/article-detail/1/：\n\n优化网页入口\n虽然已经实现了文章详情功能，但是通过输入url访问的方式实在太不友好。\n改写header.html，让用户可通过导航栏右侧的文章链接返回首页：\ntemplates/header.html\n\n...\n<div>\n    <ul class=\"navbar-nav\">\n        <li class=\"nav-item\">\n        \n            <!-- 改写了这里的 href --> \n            <a class=\"nav-link\" href=\"{% url 'article:article_list' %}\">文章</a>\n          \n        </li>\n    </ul>\n</div>\n\n...\n注意看这里href是如何改写的：\n\nhref定义了链接跳转的地址\n\n{% url '...' %}是Django规定的语法，用于指明具体地址\n\n关于其中的'article:article_list'的解释：\n\n前面的article是在项目根目录的urls.py中定义的app的名称\n后面的article_list是在app中的urls.py中定义的具体的路由地址\n\n\n\n通过这样的方法就将链接跳转的指向给配置好了，只要对应url的名称不变，url本身无论怎么变化，Django都可以解析到正确的地址，很灵活。\n当然你也可以直接在href中写入url的地址，但是一旦url有变化，所有相关的链接都会失效，降低维护性。\n然后再改写list.html，让用户可点击阅读本文按钮进入文章详情：\ntemplates/article/list.html\n\n...\n\n<div class=\"card-footer\">\n\n    <!-- 同样改写 href -->\n    <a href=\"{% url 'article:article_detail' article.id %}\" class=\"btn btn-primary\">阅读本文</a>\n    \n</div>\n\n...\n留意文章的id是如何传递的：\n\n在list.html中，通过href=\"{% url 'article:article_detail' article.id %}\"，将id传递给article/urls.py\n\n在article/urls.py中，通过<int:id>传递给视图函数article_detail()\n\n在视图函数article_detail()中，通过形参id取得了文章的id值，并进行处理，最终定位了需要获取的文章对象\n\n现在我们可以通过链接访问网站上的不同页面了，而不需要手动输入url。当然这也是现代网站的基础。\n总结\n现在我们也拥有查看文章详情的功能了，并且优化了网页切换的体验。\n下一章将学习使用Markdown语法对文章正文进行排版。\n\n有疑问请在杜赛的个人网站留言，我会尽快回复。\n或Email私信我：dusaiphoto@foxmail.com\n项目完整代码：Django_blog_tutorial\n\n\n转载请告知作者并注明出处。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}