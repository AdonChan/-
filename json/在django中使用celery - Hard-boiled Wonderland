{"title": "在django中使用celery - Hard-boiled Wonderland ", "index": "redis,celery,python,django", "content": "前言: 针对高延时任务, 直接在一次网络请求中处理完毕会导致很不好的体验, celery则可以不阻塞请求后台处理这些任务, 并且可以使用django的models进行数据库操作.\n环境\npython models:\n\ncelery-4.1.1\nredis-2.10.6\ndjango-1.11.7\n\n其他:\n\nredis-3.2.9\nmacos\npython3.6\n\n创建django工程\ndjango-admin startproject dccd dcdjango-admin startapp main\n此时项目结构如下\ndc\n|-- __init__.py\n|-- main\n|   |-- __init__.py\n|   |-- admin.py\n|   |-- apps.py\n|   |-- migrations\n|   |   `-- __init__.py\n|   |-- models.py\n|   |-- tests.py\n|   `-- views.py\n|-- settings.py\n|-- urls.py\n`-- wsgi.py\n修改settings.py, 添加app\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'dc.main' //new added\n]\n修改dc/main/models.py, 创建新models\nfrom django.db import models\n\n# Create your models here.\n\nclass Person(models.Model):\n    first_name = models.CharField(max_length=30)\n    last_name = models.CharField(max_length=30)\n创建根访问节点\ndc/main/views.py\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\n# Create your views here.\n\n\ndef hello(request):\n    return HttpResponse('hello world')\ndc/urls.py\nurlpatterns = [\n    url(r'^admin/', admin.site.urls),\n    url(r'^$', hello) //new added\n]\n依次执行以下语句, 初始化django各功能模块\npython manage.py migrate\npython manage.py makemigrations main\npython manage.py sqlmigrate main 0001\npython manage.py migrate\n接下来python manage.py runserver, 访问http://127.0.0.1:8000 即可看到hello world.\n启动redis\nredis是作为celery中间件使用的, 用来存储消息队列.\nredis解压后, 直接运行src/redis-server即可启动, 默认端口6379\n配置celery\n参考文档\n创建dc/celery.py\n#-*- coding:utf-8 -*-\n\nimport os\nfrom celery import Celery\n\n# set the default Django settings module for the 'celery' program.\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'dc.settings')\n\napp = Celery('dc')\n\n# Using a string here means the worker doesn't have to serialize\n# the configuration object to child processes.\n# - namespace='CELERY' means all celery-related configuration keys\n#   should have a `CELERY_` prefix.\napp.config_from_object('django.conf:settings', namespace='CELERY')\n\n# Load task modules from all registered Django app configs.\napp.autodiscover_tasks()\n修改 dc/__init__.py\nfrom .celery import app as celery_app\n\n__all__ = ['celery_app']\n修改 dc/settings.py, 设定 redis URL\nCELERY_BROKER_URL = 'redis://127.0.0.1:6379/3'\n创建dc/main/tasks.py\n#-*- coding:utf-8 -*-\n\nfrom celery import shared_task\n\n@shared_task\ndef test():\n    import time\n    time.sleep(5)\n    from dc.main.models import Person\n    person = Person(first_name='smith', last_name='jhon')\n    person.save()\n    c = Person.objects.count()\n    print(f'person count is {c}')\n修改dc/main/views.py\ndef hello(request):\n    from dc.main.tasks import test\n    test.delay()\n    return HttpResponse('hello world')\n启动celery进程\ncelery -A dc worker -l info\n接下来访问http://127.0.0.1:8000, 即可发现页面立刻返回, 并没有被time阻塞, 查看启动celery的窗口, 即可发现log以及打印的信息, 确定models可以正常使用.\nおわり.\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}