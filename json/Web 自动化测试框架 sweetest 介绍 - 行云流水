{"title": "Web 自动化测试框架 sweetest 介绍 - 行云流水 ", "index": "自动化测试,selenium,python", "content": "介绍\nsweetest 是一款 Web 自动化测试框架，或者说是解决方案，名字取 Selenium, Web UI, Excel, Element, Test 含义。特点:\n\n简单快速，轻松上手\n无需编码能力\n在 Excel 中以文本编写测试用例\n维护成本低\n支持千、万级别的用例规模\n拥抱变化，支持敏捷\n\n背景\n目前，Web 自动化测试基本上是以 Selenium 为接口来编写测试代码，但效果往往不是很好，普遍遇到如下问题：\n\n用例设计人员的编码能力很弱，测试代码编写和维护成本高，效果差；\n测试代码量大，测试意图不直观，无法支撑千、万级别的用例规模；\nWeb 页面元素的定位非常繁琐，且页面结构经常变动，导致用例失效。\n\n我们知道，传统的测试用例一般是在 Excel 中用文本编写的，如果自动化测试用例也这么写，是不是就可以解决问题1和2？对于问题3，我想是时候对开发提出一些要求了，同时我们的元素定位也要优化，让页面自由的去变化，而我们的定位只做最小适用。\n实现思路\n\nSelenium 为底层接口；\n在 Excel 中用文本编写测试用例；\n元素定位表格化，且优先使用“板块通用定位法”；\n要求开发提供必要的、统一的元素属性；\n框架负责解析测试用例，执行用例，记录日志，输出测试结果。\n\n方案\n\n开发语言：Python\n底层接口：Selenium\n用例工具：Excel\n\n测试用例如下图：\n安装\n环境要求\n\n系统要求：Windows\nPython 版本：3.6+\nSelenium\n浏览器：Chrome\nChrome 驱动: chromedriver\n\n安装 sweetest\npip install sweetest\n快速体验\n打开 cmd 命令窗口，切换到某个目录，如：D:Autotest\nsweetest\ncd sweetest_sample\npython start.py\n\nOK，如果一切顺利的话，sweetest 已经跑起来了\n目录结构\n\n\n\n目录\n说明\n\n\n\nelement\\\n页面元素表目录\n\n\nBaidu-Elements.xlsx\n页面元素表，名称格式：project_name + \"-Elements.xlsx\"\n\n\njunit\\\njunit格式测试结果目录\n\n\nlog\\\n自动化测试运行日志目录\n\n\nreport\\\nExcel 格式测试结果目录\n\n\nsnapshot\\\n错误截图目录\n\n\ntestcase\\\n测试用例目录\n\n\nBaidu-TestCase.xlsx\n测试用例，名称格式：project_name + \"-TestCase.xlsx\"\n\n\nstart.py\n启动脚本，test = Autotest(project_name, sheet_name)\n\n\n\n\n备注：以上3处的 project_name 必须一致\n页面元素表\n页面元素表的作用主要是把元素定位独立出来，一是方便维护定位信息，二是测试用例中用元素名称书写，可读性更高。\n\n\n\n目录\n注释\n\n\n\npage\nelement 所在的页面，在所有页面都可用的 element 放在“通用”下面，如 title\n\n\nframe\nelement 所在的 frame id，如果是顶层 frame，可为空。\n\n\nname\nelement 名称，在不同的 page 下面可以同名\n\n\nby\nSelenium 定义方式\n\n\nvalue\nSelenium 定义的值\n\n\n备注\n注释作用\n\n\n\n元素定位\n\n\nid, link_text, partial_link_text, xpath, class_name\n如：\n\n\npage\nname\nby\nvalue\n\n\n百度搜索页面\n搜索框\nid\nkw\n\n\n则自动化运行时会以 find_element_by_id('kw') 来定位\n\n\n带变量的定位方式\n如示例中：\n\n\npage\nname\nby\nvalue\n\n\n百度搜索页面\n搜索结果#\nxpath\n//*[@id=\"#\"]/h3/a\n\n\n写用例时，需要在 搜索结果# 后面带上变量，如： 搜索结果#1\n\n\n操作\n页面\n元素\n\n\n点击\n百度搜索页面\n搜索结果#1\n\n\n则自动化运行时会以 find_element_by_xpath('//*[@id=\"1\"]/h3/a') 来定位\n已定义好的常用变量定位方式：\n\nid#\nlink#\n*link#\nxpath#\nclass#\nname#\nurl#\n\n如：url#www.baidu.com\n当然，如果#后面的变量不够直观的话，不建议太多使用这几个变量方式。\n\n页面标题页面的 title\n\n\n页面URL\n页面的 url\n一般来讲，导航栏在所有页面都存在，应该把导航栏放在“通用”下面，做成变量定位方式，如示例中的：\n\n\npage\nname\nby\nvalue\n\n\n通用\n搜索页导航栏#\nxpath\n//*[@class=\"s_tab\"]//a[text()=\"#\"]\n\n\n用例中的写法：\n\n\n操作\n页面\n元素\n\n\n点击\n通用\n搜索页导航栏#新闻\n\n\n\n\n测试用例\n\n下拉菜单配置\n操作、页面、元素这些列其实都是选项列表，利用 Excel 的下拉菜单功能，能够让书写用例更方便，且不易笔误。下图是测试用例文件中的 ElementsMap 页面：\n\n我们可以通过 Excel 的菜单栏“公式-名称管理器”来配置这些菜单，同时在用例页面通过“数据-数据有效性”配置好“操作”的下拉菜单，以及“页面-元素”的二级联动下拉菜单。\n用例字段\n必填字段：\n\n用例编号\n步骤编号\n操作\n页面\n元素\n\n前置条件：\n\nBASE： 整个测试套件的基础，必须通过才会执行下一步，如：登录；如果有的话应该为第一个测试用例。\nSETUP：每个测试用例执行前需要执行的用例，只有 SETUP 执行成功才会执行该用例，如：返回首页。\nMAIN：一组用例的第一用例，和 SUB 一起使用，一个 MAIN 后面可以带多个连续的 SUB 用例。此用例需要先执行 SETUP 用例。\nSUB：和 MAIN 一起使用，当前一个用例(MAIN or SUB)执行结果为通过时才会执行，否则测试结果置为 Blocked；且执行此用例前不会执行 SETUP 用例。\nSNIPPET：用例片段，运行到此用例时不会立即执行，需要在其他用例中使用“执行”关键字调用此“用例片段”，才会执行；配合“执行”关键字的变量赋值功能，可以实现用例复用。\n\n注意事项：\n\n一般必须有 SETUP 用例。当执行 SETUP 失败，会尝试执行一次 BASE->SETUP 作为 SETUP 的执行结果。\nBASE 用例可以有 0 到多个，但作为 SETUP 中  BASE->SETUP 的 BASE 只有最后一个 BASE 用例。\nSETUP 用例只能有 1 条，如果写了多条，只有最后一条起作用。\n\n操作(关键字)及对应的测试数据\n\n打开即 get 方法，打开一个链接。\n打开操作，一般要在测试数据中指定新窗口名称，如：新窗口=百度搜索窗口。\n\n\n检查\n取页面元素的值、属性和预期结果对比。\n测试数据中如果没有写“k=v”的方式，则默认是取元素的 text。\n检查 text：\n\n\n操作\n页面\n元素\n测试数据\n\n\n检查\n百度搜索页面\n搜索按钮\n百度一下\n\n\n等价于\n\n\n操作\n页面\n元素\n测试数据\n\n\n检查\n百度搜索页面\n搜索按钮\ntext=百度一下\n\n\n检查属性：\n\n\n操作\n页面\n元素\n测试数据\n\n\n检查\n百度搜索页面\n搜索框\nname=wd\n\n\n“页面标题”和“页面URL”直接在测试数据中写预期结果即可。\n\n\n操作\n页面\n元素\n测试数据\n\n\n检查\n百度搜索页面\n页面标题\n百度一下，你就知道\n\n\n注意：测试数据中，由于逗号(，or ,)是多个“k=v”的分隔符，所以如果 v 中有逗号，要用反斜杠(\\)转义；但等号(=)无需转义。\n\n输入在输入框中输入文本。\n测试数据列为要输入的内容。\n\n\n点击\n点击按钮或者链接等(一切可点击操作的)元素。此关键字支持在同一个页面上顺序点击多个元素，在元素列以竖杠(|)分割即可，如：\n\n\n操作\n页面\n元素\n\n\n点击\n百度搜索页面\n搜索按钮|搜索结果#1\n\n\n\n移动到有些页面元素，当鼠标移动到上面时，会弹出下拉菜单等。此操作同关键字“点击”类似。\n\n\n执行\n即执行测试用例片段，支持在测试数据中给变量赋值，如我们有用例片段 SNIPPET_001，则测试用例 BAIDU_002 中，步骤1如下：\n\n\n操作\n页面\n元素\n测试数据\n\n\n执行\n用例片段\nSNIPPET_001\nkeywords=搜狗\n\n\n把变量 keyswords 赋值为“搜狗”，此步骤会执行用例片段 SNIPPET_001，其搜索的关键字为“搜狗”。\n\n\n检查\n把检查结果反向，此关键字暂时未完整实现。\n\n\n测试数据：\n测试数据支持模糊匹配，如下：\n\n\n操作\n页面\n元素\n测试数据\n\n\n检查\n通用\n页面标题\n*知乎\n\n\n则，页面标题中含有“知乎”即为通过。注意星号(*)要写在开头。\n输出数据：\n在运行时，把元素的值或属性赋值给变量，此变量可以在之后的步骤中使用\"<>\"引用变量名。\n\n\n操作\n页面\n元素\n测试数据\n输出数据\n\n\n\n点击\n百度搜索页面\n搜索结果#1\n \ntitle=text\n\n\n检查\n通用\n页面标题\n<title>\n\n\n\n步骤编号：\n除了控制语句符号外，步骤编号必须为数字，建议在 Excel 中设置为文本格式。\n控制语句：\n\nif then else\n\n\n步骤编号\n操作\n页面\n元素\n测试数据\n\n\n\n^3\n检查\n通用\n页面标题\n*知乎\n\n\n>4\n点击\n通用\nlink#登录\n\n\n<5\n点击\n通用\nlink#注册机构号\n\n\n\n^ 表示 if 语句\n> 表示 then 语句\n< 表示 else 语句\nif(^) 语句为真时，执行 then(>) 语句，为否时执行 else(<) 语句。无论后面有没有 then 或者 else 语句，不影响后续步骤执行。\nthen 语句 或者 else 语句，当不被执行时，测试结果为 '-'，不影响测试用例结果和后续步骤执行。当执行时，和正常步骤一样，成功则继续，失败则该用例失败。\n\n进阶\n元素管理\n测试用例中元素是以 page + name 为唯一标识，来页面元素表中查找定位信息的。因此，不同 page 下的元素 name 可以相同，但不能和“通用”下的相同。\n测试用例中，如果 page 不为“通用”，当 <page> + name 查找不到，会继续以 “通用” + name 为标识符来查找。\n“通用”是方便我们写页面元素表的，写用例时我们建议还是用 <page> 来代替“通用”，甚至有时候我们必须这么做。\n窗口管理(页面，frame)\n在浏览器中，有可能会打开多个标签页，我们叫它为窗口。当你新打开一个标签页时，你可以在测试数据中给它起个名字，格式为：新窗口=<window_name>, 如：\n\n\n操作\n页面\n元素\n测试数据\n\n\n\n打开\n通用\n百度搜索链接\n新窗口=百度搜索窗口\n\n\n检查\n百度搜索页面\n页面标题\n百度一下，你就知道\n\n\n\n当你给新的标签页起了窗口名字，它之后步骤的页面(\"通用\"除外)就会绑定到这个窗口。如上面第 2 步，“百度搜索页面”会绑定到“百度搜索窗口”。那么之后的步骤或用例中，即使打开了多个标签页，只要页面是“百度搜索页面”，就会切换到“百度搜索窗口”这个标签页上操作。\n注意：“通用”是不绑定到任何窗口的，也不做窗口切换，它直接在“当前窗口”操作。\n“当前窗口”规则为：\n\n执行到某个步骤时，“当前窗口”是浏览器焦点所在的窗口，也就是上个步骤执行操作的窗口。\n如果此步骤的页面已绑定到其他窗口，则“当前窗口”会切换过去。\n如果此步骤的页面尚未捆定任何窗口，则会捆定到“当前窗口”。\n上个步骤如果是新打开的窗口，则“当前窗口”是新打开的窗口。\n\n注意：\n\n如果打开了 2 个或以上窗口，没有起名字的窗口，在执行到切换窗口的步骤时，会自动被关掉。\n起了名字的窗口不会被关掉。\n但如果起了同样的名字，则原先的那个窗口会被关掉，绑定在其上面的页面也会被注销。\n\n测试执行\npython start.py\n测试报告\n见 report 目录\n\nQQ交流群：158755338 (验证码：python)\n项目地址：https://github.com/tonglei100...\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "4"}