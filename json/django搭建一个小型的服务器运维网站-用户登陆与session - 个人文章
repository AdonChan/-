{"title": "django搭建一个小型的服务器运维网站-用户登陆与session - 个人文章 ", "index": "django,python,html,javascript", "content": "目录\n\n\n项目介绍和源码；\n\n拿来即用的bootstrap模板；\n\n服务器SSH服务配置与python中paramiko的使用；\n用户登陆与session;\n\n最简单的实践之修改服务器时间；\n\n查看和修改服务器配置与数据库的路由；\n\n基于websocket的实时日志实现；\n\n查看服务器中的日志与前端的datatable的利用；\n\n重启服务器进程。\n\n前言\n  这篇文章给出了网站的用户登陆模块，用户登录模块的网站后台实现主要通过Django权限系统auth来实现，相关逻辑可与参考这篇文章。作为一个网站新手，前后端交互基本上都是自己造轮子，利用javascript和ajax完成，登陆模块包括：用户登陆、用户注册、忘记密码，其中忘记密码是用简单的用户名+邮箱来验证的，时间充裕，可以进一步的通过发邮件链接跳转验证修改密码，图1简单描述了这个系统的结构。除此之外，这篇文章会涉及到第三方模态框sweetalert2的引用、给网页增加icon、对网页增加登陆验证、session保存登陆的用户名等小细节的完善。\n\n功能实现\n  前面文章已经提到，登陆网站时会优先进入登陆页面，进入app界面是由url控制的。先看下如何显示出登陆界面，这里依然秉承拿来即用的思想，把DASHGUM源文件夹的login.html文件改造下并将其重新命名为loginpage.html放在templates目录下，目录结构如下图2所示，其中login-bg.jpg为背景图，favicon.ico为网站的图标icon。\n\n显示登陆页面\n修改DASHGUM源文件夹的login.html文件\n  html代码中有两个模态框，一个管注册账号，一个管忘记密码，修改好的html重命名为loginpage.html放在上图的文件结构所示的位置。\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\">\n        <title>登陆服务器</title>\n        <!-- Bootstrap core CSS -->\n        <link href=\"/templates/servermaterial/assets/css/bootstrap.css\" rel=\"stylesheet\">\n        <!--external css-->\n        <link href=\"/templates/servermaterial/assets/font-awesome/css/font-awesome.css\" rel=\"stylesheet\" />\n        <!-- Custom styles for this template -->\n        <link href=\"/templates/servermaterial/assets/css/style.css\" rel=\"stylesheet\">\n        <link href=\"/templates/servermaterial/assets/css/style-responsive.css\" rel=\"stylesheet\">\n        <!-- sweetalert2插件的css -->\n        <link href=\"/templates/servermaterial/assets/SweetAlert2/dist/sweetalert2.css\" rel=\"stylesheet\">\n    </head>\n\n    <body>\n        <section id=\"login-page\">\n            <header>\n                <!--logo start-->\n                <a class=\"logo\" style=\"padding:10px 0 0 100px;\"><h3><b>欢迎来到服务器工具</b></h3></a>\n            </header>\n            <div class=\"container\" style=\"padding:200px 0 0 0\">\n                <form class=\"form-login\">\n                <h2 class=\"form-login-heading\">登陆服务器</h2>\n                <div class=\"login-wrap\">\n                    <input type=\"text\" name=\"username\" id=\"loginusername\" class=\"form-control\" placeholder=\"账号\" autofocus>\n                    <br>\n                    <input type=\"password\" name=\"password\" id=\"loginpassword\" class=\"form-control\" placeholder=\"密码\">\n                    <label class=\"checkbox\">\n                        <span class=\"pull-right\">\n                            <a data-toggle=\"modal\" href='#' onclick=\"show_forget_modal();\">忘记密码</a>\n                        </span>\n                    </label>\n                    <button class=\"btn btn-theme btn-block\" id='login' type=\"submit\"><i class=\"fa fa-lock\"></i> 登陆</button>\n                    <hr>\n\n                    <div class=\"registration\">\n                        <a data-toggle=\"modal\" href='#' onclick=\"show_create_modal();\">注册账号</a>\n                    </div>\n                </div>\n                <!-- 忘记密码模态框 -->\n                <div aria-hidden=\"true\" aria-labelledby=\"myModalLabel\" role=\"dialog\" tabindex=\"-1\" id=\"myModal_forget\" class=\"modal fade\">\n                    <div class=\"modal-dialog\">\n                        <div class=\"modal-content\">\n                            <div class=\"modal-header\">\n                                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n                                <h4 class=\"modal-title\">忘记密码 ?</h4>\n                            </div>\n                            <div class=\"modal-body\">\n                                <p id=\"pforgetusername\">请输入您的用户名:</p>\n                                <input type=\"text\" name=\"forgetusername\" placeholder=\"请输入需要找回的用户名\" autocomplete=\"off\" class=\"form-control placeholder-no-fix\">\n                                <br>\n                                <p id=\"pforgetemail\">请输入您的邮箱地址:</p>\n                                <input type=\"text\" name=\"forgetemail\" placeholder=\"请输入账号对应的Email\" autocomplete=\"off\" class=\"form-control placeholder-no-fix\">\n                                <br>\n                                <p id='pnewpassword'>请设定您的新密码:</p>\n                                <input type=\"password\" name=\"newpassword\" placeholder=\"请输入新密码\" autocomplete=\"off\" class=\"form-control placeholder-no-fix\">\n                            </div>\n                            <div class=\"modal-footer\">\n                                <button data-dismiss=\"modal\" class=\"btn btn-default\" type=\"button\">取消</button>\n                                <button class=\"btn btn-theme\" id=\"forget\" type=\"button\">提交</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <!-- 忘注册账号模态框 -->\n                <div aria-hidden=\"true\" aria-labelledby=\"myModalLabel\" role=\"dialog\" tabindex=\"-1\" id=\"myModal_create\" class=\"modal fade\">\n                    <div class=\"modal-dialog\">\n                        <div class=\"modal-content\">\n                            <div class=\"modal-header\">\n                                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n                                <h4 class=\"modal-title\">注册账号</h4>\n                            </div>\n                            <div class=\"modal-body\">\n                                <p id='pcreateusername'>请输入您的用户名:</p>\n                                <input type=\"text\" name=\"createusername\" placeholder=\"用户名（支持字母，数字，下划线）\" autocomplete=\"off\" class=\"form-control placeholder-no-fix\">\n                                <br>\n                                <p id='pcreateemail'>请输入您的邮箱:</p>\n                                <input type=\"text\" name=\"createemail\" placeholder=\"请填写有效的邮箱地址\" autocomplete=\"off\" class=\"form-control placeholder-no-fix\">\n                                <br>\n                                <p id='pcreatepassword'>请设定您的密码:</p>\n                                <input type=\"password\" name=\"createpassword\" placeholder=\"密码\" autocomplete=\"off\" class=\"form-control placeholder-no-fix\">\n                            </div>\n                            <div class=\"modal-footer\">\n                                <button data-dismiss=\"modal\" class=\"btn btn-default\" type=\"button\">取消</button>\n                                <button class=\"btn btn-theme\" id=\"create\" type=\"button\">注册</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <!-- modal -->\n                </form>          \n            </div>\n        </section>\n        <!-- js placed at the end of the document so the pages load faster -->\n        <script src=\"/templates/servermaterial/assets/js/jquery.js\"></script>\n        <script src=\"/templates/servermaterial/assets/js/bootstrap.min.js\"></script>\n        <!-- sweetalert2插件的js -->\n        <script src=\"/templates/servermaterial/assets/SweetAlert2/dist/sweetalert2.js\"></script>\n        <!--BACKSTRETCH-->\n        <!-- You can use an image of whatever size. This script will stretch to fit in any screen size.-->\n        <script type=\"text/javascript\" src=\"/templates/servermaterial/assets/js/jquery.backstretch.min.js\"></script>\n        <script>\n            // 在这里设置背景图\n            $.backstretch(\"/templates/login-bg.jpg\", {speed: 500});\n        </script>\n    </body>\n</html>\n为页面添加urls和views\n  在WebTool的urls.py中加入url如下:\nfrom django.conf.urls import include, url\nfrom django.contrib import admin\nimport views\n\nurlpatterns = [\n    url(r'^admin', admin.site.urls),\n    # 用127.0.0.1:8888访问网址时会默认转到loginpage\n    url(r'^$', views.loginpage),\n    # 用127.0.0.1:8888/loginpage访问网址时会转到loginpage\n    url(r'^loginpage/', views.loginpage),\n]\n  在WebTool的views.py添加代码：\nfrom __future__ import unicode_literals\nfrom django.shortcuts import render_to_response\nfrom django.http import JsonResponse\n\n# 登陆页面\ndef loginpage(request):\n    return render_to_response(\"loginpage.html\")\n  构建项目之后，访问127.0.0.1:8888或者127.0.0.1:8888/loginpage将会显示出登陆界面，如图3。\n\n修改网站的icon\n  默认情况下，网站是没有icon的，我们要向网站添加一个如图4中红框的icon。可以先把icon资源放在图2目录结构中(favicon.ico)，然后再在WebTool的urls.py中加入url如下：\n\nfrom django.conf.urls import include, url\nfrom django.contrib import admin\nfrom django.views.generic.base import RedirectView\nimport views\n\nurlpatterns = [\n    url(r'^admin', admin.site.urls),\n    url(r'^$', views.loginpage),\n    url(r'^loginpage/', views.loginpage),\n    # 为网站添加icon\n    url(r'^favicon.ico$', RedirectView.as_view(url='/templates/favicon.ico')),\n]\n用户注册\n  用户注册的html代码已经在前面一并给出了，其实就是一个模态框，如图5，现在我们只需要编写控制它的javascript代码就好。但是在写的时候需要考虑到一些情况，比如用户名、邮箱、密码未填写、不合法、用户名已经注册过了这些情况，用户名、邮箱、密码未填写、不合法可以直接在前端自己写逻辑判断（我这里都是自己造轮子，一些框架已经集成这些功能，并不需要写一堆javascript代码）。然后弹出来的提示框用了sweetalert2插件，这里会说一下该插件的引用。\n\n配合上面给出的html的javascript代码\n<script>\n    // 显示注册账号的模态框\n    function show_create_modal(){\n        $(\"input[name='createusername']\").val(\"\");\n        $(\"input[name='createpassword']\").val(\"\");\n        $(\"input[name='createemail']\").val(\"\");\n        document.getElementById(\"pcreateusername\").style.color = 'black';\n        document.getElementById(\"pcreatepassword\").style.color = 'black';\n        document.getElementById(\"pcreateemail\").style.color = 'black';\n        $('#myModal_create').modal('show');\n    }\n</script>\n<script>\n    // 注册按钮\n    $(\"#create\").click(function(){\n        var user = $(\"input[name='createusername']\").val();\n        var code = $(\"input[name='createpassword']\").val();\n        var email = $(\"input[name='createemail']\").val();\n        // 账号未填写\n        if (user==''){\n            document.getElementById(\"pcreateusername\").style.color = 'red';\n            $(\"input[name='createusername']\").focus();\n            return ;\n        }\n        // 账号名合法\n        var uPattern = /^[a-zA-Z0-9_]{4,16}$/;\n        if (!uPattern.test(user)){\n            document.getElementById(\"pcreateusername\").innerHTML = '请输入合法的用户名';\n            document.getElementById(\"pcreateusername\").style.color = 'red';\n            $(\"input[name='createusername']\").val(\"\").focus();\n            return ;\n        }\n        // 邮箱未填写\n        if (email==''){\n            document.getElementById(\"pcreateemail\").style.color = 'red';\n            $(\"input[name='createemail']\").focus();\n            return ;\n        }\n        // 邮箱合法\n        var ePattern = /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,4})$/;\n        if (!ePattern.test(email)){\n            document.getElementById(\"pcreateemail\").innerHTML = '请输入合法的邮箱';\n            document.getElementById(\"pcreateemail\").style.color = 'red';\n            $(\"input[name='createemail']\").val(\"\").focus();\n            return ;\n        }\n        // 密码未填写\n        if (code==''){\n            document.getElementById(\"pcreatepassword\").style.color = 'red';\n            $(\"input[name='createpassword']\").focus();\n            return ;\n        }\n        // ajax请求注册\n        $.ajax({\n            url:\"/createuser\",\n            type:'POST',\n            data:{'user': user, 'email': email,'code': code},\n            success: function(arg){\n                ret = eval(arg);\n                if(ret.status){\n                    swal({  \n                        type: 'success',  \n                        title: '注册成功！',  \n                        confirmButtonText: '确定',  \n                        confirmButtonColor: '#4cd964'  \n                    }).then(function(){\n                        // 注册成功后刷新页面\n                        window.location.reload();\n                    });  \n                }else{\n                    swal({  \n                        type: 'error',  \n                        title: '用户名已存在！',  \n                        confirmButtonText: '确定', \n                        confirmButtonColor: '#4cd964'  \n                    })\n                }\n            }\n        });\n    })\n</script>\n  上面中的ajax请求到后台的url即createuser。后台的urls和views代码响应前端的请求。\n注册账号的urls和views\n  WebTool中urls.py如下，增加一个处理createuser：\nfrom django.conf.urls import include, url\nfrom django.contrib import admin\nfrom django.views.generic.base import RedirectView\nimport views\n\nurlpatterns = [\n    url(r'^admin', admin.site.urls),\n    url(r'^$', views.loginpage),\n    url(r'^favicon.ico$', RedirectView.as_view(url='/templates/favicon.ico')),\n    url(r'^loginpage/', views.loginpage),\n    # 处理前端的ajax请求createuser\n    url(r'^createuser', views.createuser),\n]\n  WebTool中views.py如下：\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\nfrom django.shortcuts import render_to_response\nfrom django.http import JsonResponse\nfrom django.contrib.auth.models import User\nfrom django.contrib.auth import login, authenticate\n\n# 创建账户\ndef createuser(request):\n    ret = {'status': False, 'reason': ''}\n    if request.method == 'POST':\n        username = request.POST.get('user')\n        email = request.POST.get('email')\n        password = request.POST.get('code')\n        try:\n            # 创建用户\n            user = User.objects.create_user(username, email, password)\n            user.save()\n        except Exception as e:\n            # 用户名已经在数据库存在\n            if e[0] == 1062:\n                ret['reason'] = 'repeated'\n                ret['status'] = False\n                return JsonResponse(ret)\n        ret['status'] = True\n        return JsonResponse(ret)\nsweetalert2的引入\n  sweetalert2是一类提示模态框，可以在这个链接中体验,我们把插件应用在项目里取代原生的生硬警示框。首先，把这个资源下载下来放到本地的资源文件夹里。注意到，在上面的html文件中已经插入了两行关于这个插件的css和js地址：\n\n<link href=\"/templates/servermaterial/assets/SweetAlert2/dist/sweetalert2.css\" rel=\"stylesheet\">\n<script src=\"/templates/servermaterial/assets/SweetAlert2/dist/sweetalert2.js\"></script>\n  引入上面两个文件后，通过js代码中swal就可以使用这个警示框了，当我们利用ajax请求到后台注册成功时，前端就会弹出这个警示框告诉使用者已经注册成功了，然后刷新页面，下面的代码来自于上面注册用户的javascript代码中。注册成功的效果如图7，后面的警示框都会使用这个样式。\nswal({  \n    type: 'success',  \n    title: '注册成功！',  \n    confirmButtonText: '确定',  \n    confirmButtonColor: '#4cd964'  \n}).then(function(){\n    window.location.reload();\n});  \n\n用户登陆与session\n用户登陆的javascript代码与session\n$('form').submit(function(event){\n    event.preventDefault();\n    var username = $(\"input[name='username']\").val();\n    var password = $(\"input[name='password']\").val();\n    // 用户名未填写\n    if (username==''){\n        document.getElementById(\"loginusername\").setAttribute(\"placeholder\",\"请填写用户名\");\n        $(\"input[name='username']\").focus();\n        return ;\n    }\n    // 用户名合法\n    var uPattern = /^[a-zA-Z0-9_]{4,16}$/;\n    if (!uPattern.test(username)){\n        document.getElementById(\"loginusername\").setAttribute(\"placeholder\",\"请输入合法的用户名\");\n        $(\"input[name='username']\").val(\"\").focus();\n        return ;\n    }\n    // 密码未填写\n    if (password==''){\n        document.getElementById(\"loginpassword\").setAttribute(\"placeholder\",\"请输入密码\");\n        $(\"input[name='password']\").focus();\n        return ;\n    }\n    // 请求登陆\n    $.ajax({\n        url:\"/userlogin\",\n        type:'POST',\n        data:{'username': username, 'password': password},\n        success: function(arg){\n        ret = eval(arg);\n        if(ret.status){\n            window.location.href='/server';\n        }else{\n            swal({  \n                type: 'error',  \n                title: '密码错误,请重新登陆！',  \n                confirmButtonText: '确定',  \n                confirmButtonColor: '#4cd964'  \n                })\n            }\n        }\n    });\n})\n  上面中的ajax请求到后台的url即userlogin。后台的urls和views代码响应前端的请求。\n用户登陆的urls和views\n  WebTool中urls.py如下，增加一个处理createuser和url(r'^server/', include('server.urls', namespace=\"server\"))前者的目的是接受ajax的登录请求，后者的作用是当ajax返回可以登陆的时候，利用它进入到server这个app里面，即127.0.0.1/server，进入127.0.0.1/server之后的路由和响应由server中的urls和views控制，如当你请求127.0.0.1/server/home时。\nfrom django.conf.urls import include, url\nfrom django.contrib import admin\nfrom django.views.generic.base import RedirectView\nimport views\n\nurlpatterns = [\n    url(r'^admin', admin.site.urls),\n    url(r'^$', views.loginpage),\n    url(r'^favicon.ico$', RedirectView.as_view(url='/templates/favicon.ico')),\n    url(r'^loginpage/', views.loginpage),\n\n    url(r'^createuser', views.createuser),\n    # 用户登陆\n    url(r'^userlogin', views.userlogin),\n    # 登陆成功后进入127.0.0.1:8888/server页面\n    url(r'^server/', include('server.urls', namespace=\"server\")),\n]\n  WebTool中views.py如下，在这里使用到了session，方便在进入app页面之后依然能够让网站从session中提取到现在登陆的用户名，django中的session用起来很简单，因为它实际上是使用一个字典实现的，需要记录的时候调用request.session['XX'] = XXX。需要使用的时候可以调用request.session.get('XX'),我们在这里利用session保存了用户名，目的就是在后面的网页中可以随时取出来。  在使用session之前，需要在django的配置文件settings.py中添加与session相关的配置如下：\n# session配置\nSESSION_ENGINE = 'django.contrib.sessions.backends.cache'\nSESSION_EXPIRE_AT_BROWSER_CLOSE = True\n  SESSION_ENGINE是存储session的方式，常用的有两种，分别是django.contrib.sessions.backends.cache和django.contrib.sessions.backends.db，前者存储在缓存中，可能面临丢失和溢出的风险，后者存储在数据库中，有性能开销但是安全。  SESSION_EXPIRE_AT_BROWSER_CLOSE设置为True代表关闭浏览器就会清除session。\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\nfrom django.shortcuts import render_to_response\nfrom django.http import JsonResponse\nfrom django.contrib.auth.models import User\nfrom django.contrib.auth import login, authenticate\n\n# 用户登陆\ndef userlogin(request):\n    ret = {'status': False, 'reason': ''}\n    if request.method == 'POST':\n        username = request.POST.get('username')\n        password = request.POST.get('password')\n        user = authenticate(username=username, password=password)\n        if user is not None:\n            # 将用户名记录在session中，方便传递\n            request.session['username'] = username\n            if user.is_active:\n                login(request, user)\n                ret['status'] = True\n        else:\n            ret['reason'] = 'codewrong'\n        return JsonResponse(ret)\n忘记密码并通过邮箱重置\n  这个逻辑和用户注册逻辑很相似，唯独不一样的是，如果用户忘记了密码，可以通过邮箱找回来（这里为了方便，没有实现利用邮件中的链接重置密码），后台仅仅是核对邮箱和用户名匹配后就允许用户设置新密码，时间充裕可以实现完整的逻辑。忘记密码的模态框如图8所示。\n\n用户忘记密码的javascript代码\n<script>\n    function show_forget_modal(){\n        $(\"input[name='forgetusername']\").val(\"\");\n        $(\"input[name='forgetemail']\").val(\"\");\n        $(\"input[name='newpassword']\").val(\"\");\n        document.getElementById(\"pforgetusername\").style.color = 'black';\n        document.getElementById(\"pforgetemail\").style.color = 'black';\n        document.getElementById(\"pnewpassword\").style.color = 'black';\n        $('#myModal_forget').modal('show');\n    }\n</script>\n<script>\n    $(\"#forget\").click(function(){\n        var username = $(\"input[name='forgetusername']\").val();\n        var email = $(\"input[name='forgetemail']\").val();\n        var newpassword = $(\"input[name='newpassword']\").val();\n        // 账号未填写\n        if (username==''){\n            document.getElementById(\"pforgetusername\").style.color = 'red';\n            $(\"input[name='forgetusername']\").focus();\n            return ;\n        }\n        // 账号名合法\n        var uPattern = /^[a-zA-Z0-9_]{4,16}$/;\n        if (!uPattern.test(username)){\n            document.getElementById(\"pforgetusername\").innerHTML = '请输入合法的用户名';\n            document.getElementById(\"pforgetusername\").style.color = 'red';\n            $(\"input[name='forgetusername']\").val(\"\").focus();\n            return ;\n        }\n        // 邮箱未填写\n        if (email==''){\n            document.getElementById(\"forgetemail\").style.color = 'red';\n            $(\"input[name='pforgetemail']\").focus();\n            return ;\n        }\n        // 邮箱合法\n        var ePattern = /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,4})$/;\n        if (!ePattern.test(email)){\n            document.getElementById(\"pforgetemail\").innerHTML = '请输入合法的邮箱';\n            document.getElementById(\"pforgetemail\").style.color = 'red';\n            $(\"input[name='forgetemail']\").val(\"\").focus();\n            return ;\n        }\n        // 密码未填写\n        if (newpassword==''){\n            document.getElementById(\"pnewpassword\").style.color = 'red';\n            $(\"input[name='newpassword']\").focus();\n            return ;\n        }\n        $.ajax({\n            url:\"/forgetusr\",\n            type:'POST',\n            data:{'username': username, 'email': email, 'newpassword': newpassword},\n            success: function(arg){\n                ret = eval(arg);\n                if(ret.status){\n                    swal({  \n                        type: 'success',  \n                        title: '密码修改成功！',  \n                        confirmButtonText: '确定',  \n                        confirmButtonColor: '#4cd964'  \n                    }).then(function(){\n                        window.location.reload();\n                    });  \n                }else{\n                    // 账号不存在\n                    if(ret.reason == 'unexist'){\n                        swal({  \n                            type: 'error',  \n                            title: '账号不存在,请重试！',  \n                            confirmButtonText: '确定', \n                            confirmButtonColor: '#4cd964'  \n                        })\n                    }\n                    // 邮箱错误\n                    if(ret.reason == 'emailwrong'){\n                        swal({  \n                            type: 'error',  \n                            title: '账号对应邮箱不正确,请重试！',  \n                            confirmButtonText: '确定',  \n                            confirmButtonColor: '#4cd964'  \n                        })\n                    }\n                }\n            }\n        });\n    })\n</script>\n  上面中的ajax请求到后台的url即forgetusr。后台的urls和views代码响应前端的请求。\n忘记密码的urls和views\n  WebTool中urls.py如下，增加一个处理forgetusr的url：\nfrom django.conf.urls import include, url\nfrom django.contrib import admin\nfrom django.views.generic.base import RedirectView\nimport views\n\nurlpatterns = [\n    url(r'^admin', admin.site.urls),\n    url(r'^$', views.loginpage),\n    url(r'^favicon.ico$', RedirectView.as_view(url='/templates/favicon.ico')),\n    url(r'^loginpage/', views.loginpage),\n\n    url(r'^createuser', views.createuser),\n    url(r'^userlogin', views.userlogin),\n    # 处理ajax发起的忘记密码逻辑\n    url(r'^forgetusr', views.forgetusr),\n    url(r'^server/', include('server.urls', namespace=\"server\")),\n]\n  WebTool中views.py如下，增加一个处理forgetusr相应的请求：\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\nfrom django.shortcuts import render_to_response\nfrom django.http import JsonResponse\nfrom django.contrib.auth.models import User\nfrom django.contrib.auth import login, authenticate\n\n# 忘记密码\ndef forgetusr(request):\n    ret = {'status': False, 'reason': ''}\n    if request.method == 'POST':\n        username = request.POST.get('username')\n        email = request.POST.get('email')\n        newpassword = request.POST.get('newpassword')\n        try:\n            user = User.objects.get(username=username)\n        except User.DoesNotExist:\n            # 账号不存在\n            ret['reason'] = 'unexist'\n            return JsonResponse(ret)\n        email_ = User.objects.get(username=user).email\n        # 用户名对应邮箱错误\n        if email_ != email:\n            ret['reason'] = 'emailwrong'\n            return JsonResponse(ret)\n        user.set_password(newpassword)\n        user.save()\n        ret['status'] = True\n        return JsonResponse(ret)\napp中增加登出逻辑和用户名\n  app即server，用户登录后就会进入这个app页面，即服务器工具。\napp中显示登陆人的用户名\n  文章拿来即用的bootstrap模板显示出的网站页面中左上角的用户名其实是已经写好的，如图9，现在我们可以利用sessions来换成实际的登陆人的用户名。只需要把server/views.py中的homepage函数重新写下就好，然后重新走一遍登陆流程，就可以得到图10，显示为实际登陆人的用户名。\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\nfrom django.shortcuts import render_to_response\nfrom django.contrib.auth import logout\nfrom django.http import JsonResponse\nfrom django.contrib.auth.decorators import login_required\n\n# 服务器的名字\nhtmltitle = '服务器工具'\n\ndef homepage(request):\n    username = request.session.get('username')\n    pagedict = {'title': htmltitle, 'username': username}\n    return render_to_response('servermaterial/home.html', pagedict)\n\n\napp中增加用户登出\n  还记得在前面的文章拿来即用的bootstrap模板显示出的网站页面中，在右上角有一个退出服务器的按钮用来登出用户，如图11，我们这里对这个按钮完善一下。同样注意的是，这里修改的应该是app即server中的文件(urls.py、views.py)，资源文件base.html也是对应的。  在base.html中添加一个对这个按钮的控制代码：\n\n$(\".logout\").click(function(){\n    $.ajax({\n        url:\"userlogout\",\n        type:'GET',\n        success: function(arg){\n            ret = eval(arg);\n            if(ret.status){\n                window.location.href = '/loginpage'\n            }\n        }\n    })\n});\n  在server中的urls.py中添加一个url：url(r'^userlogout', views.userlogout)。  在server中的urls.py中添加一个后台响应：\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\nfrom django.shortcuts import render_to_response\nfrom django.contrib.auth import logout\nfrom django.http import JsonResponse\nfrom django.contrib.auth.decorators import login_required\n\n# 用户登出\ndef userlogout(request):\n    ret = {'status': True}\n    if request.method == 'GET':\n        # 用户登出\n        logout(request)\n        return JsonResponse(ret)\n为页面增加权限鉴定\n  虽然添加了用户登陆，但是我们依然可以通过输入完整的url来越过登陆，例如我们可以通过127.0.0.1:8888/server/home直接进入服务器工具的主页，而越过了127.0.0.1:8888/loginpage的登陆，这明显是不被允许的。为了防止这样做，我们可以将所有的可以通过直接输入url浏览到的页面的view函数加一个装饰器。例如：对127.0.0.1:8888/server/home对应的页面渲染函数homepage增加一个装饰器，加了装饰器之后用户就没有办法直接跳过登陆进入服务器工具页面。装饰器是python的一种特性，如果进一步了解可以看下这篇文章。\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\nfrom django.shortcuts import render_to_response\nfrom django.contrib.auth import logout\nfrom django.http import JsonResponse\nfrom django.contrib.auth.decorators import login_required\n\n# 服务器的名字\nhtmltitle = '服务器工具'\n\n@login_required(login_url='/loginpage')\ndef homepage(request):\n    username = request.session.get('username')\n    pagedict = {'title': htmltitle, 'username': username}\n    return render_to_response('servermaterial/home.html', pagedict)\n结语\n  本篇文章主要介绍了用户系统的实现，作为一个小白，里面的html和javascript都是手写，基本上基于ajax实现，但是其实这样并不效率，成熟的web网站会将前后端分开，使得开发人员更专注于后端或者前端的开发。\n\n                ", "mainLikeNum": ["3 "], "mainBookmarkNum": "10"}