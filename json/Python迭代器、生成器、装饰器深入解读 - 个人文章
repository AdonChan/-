{"title": "Python迭代器、生成器、装饰器深入解读 - 个人文章 ", "index": "python", "content": "前言\n首先，明确可迭代对象、迭代器和生成器这三个概念。\n\n可迭代对象(Iterable)\n可迭代对象（Iterable Object），简单的来理解就是可以使用 for 来循环遍历的对象。比如常见的 list、set和dict。\n可迭代对象具有__iter__ 方法，用于返回一个迭代器，或者定义了 getitem 方法，可以按 index 索引的对象（并且能够在没有值时抛出一个 IndexError 异常），因此，可迭代对象就是能够通过它得到一个迭代器的对象。所以，可迭代对象都可以通过调用内建的 iter() 方法返回一个迭代器。\n可迭代器对象具有如下的特性：\n\n可以 for 循环: for i in iterable；\n可以按 index 索引的对象，也就是定义了 getitem 方法，比如 list,str;\n定义了__iter__ 方法，可以随意返回；\n可以调用 iter(obj) 的对象，并且返回一个iterator。\n可以通过isinstance(obj, collections.Iterable) 来判断对象是否为可迭代对象。\n\n迭代器对象(Iterator)\n传送门之迭代器实现原理\n首先明确它是一个带状态的对象。\nPython的for循环本质上就是通过不断调用next()函数实现的，举个栗子，下面的代码\n x = [1, 2, 3] for elem in x:\n     ...\n\n实际上执行时是\n\n生成器(generator)\n传送门生成器解析传送门之协程解密\n生成器其实是一种特殊的迭代器，不过这种迭代器更加优雅。它不需要再像上面的类一样写__iter__()和__next__()方法了，只需要一个yiled关键字。\nPython对协程的支持是通过generator实现的。\n生成器表达式(generator expression)\n生成器表达式是列表推倒式的生成器版本，看起来像列表推导式，但是它返回的是一个生成器对象而不是列表对象。\n>>> a = (x*x for x in range(10))\n>>> a\n<generator object <genexpr> at 0x401f08>\n>>> sum(a)\n285\n\n总结\n\n容器是一系列元素的集合，str、list、set、dict、file、sockets对象都可以看作是容器，容器都可以被迭代（用在for，while等语句中），因此他们被称为可迭代对象。\n可迭代对象实现了__iter__方法，该方法返回一个迭代器对象。\n迭代器持有一个内部状态的字段，用于记录下次迭代返回值，它实现了__next__和__iter__方法，迭代器不会一次性把所有元素加载到内存，而是需要的时候才生成返回结果。\n生成器是一种特殊的迭代器，它的返回值不是通过return而是用yield。\n\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "5"}