{"title": "Python类的定义与操作 - python3 ：公司内部培训专栏 ", "index": "python", "content": "Python类的定义与操作\n上一篇文章：Python函数定义与使用下一篇文章：Python模块\n\n1、定义类、创建对象、__init__\n实例：\nclass People():\n    \"\"\"定义一个People类\"\"\"\n\n    #__init__方法是类创建对象时默认运行的函数，用来进行初始化操作,不需要手动调用\n    def __init__(self,name,age):\n        \"\"\"初始化属性\"\"\"\n        self.name=name\n        self.age=age\n\n    def run(self):\n        print(\"%s,快跑，帅到被人砍\"%self.name)\n\n#定义对象\nmark=People(\"mark\",18)\nmark.run()\n\n#返回对象在内存中的地址\nprint(mark)\n结果：\nmark,快跑，帅到被人砍\n<__main__.People object at 0x103b5c1d0>\n2、__str__:定义类的描述\n如果直接print(对象)，会直接返回该对象在内存中的地址，现在我们想要不直接返回这个地址呢？\n实例：\nclass People():\n    \"\"\"定义一个People类\"\"\"\n\n    #__init__方法是类创建对象时默认运行的函数，用来进行初始化操作,不需要手动调用\n    def __init__(self,name,age):\n        \"\"\"初始化属性\"\"\"\n        self.name=name\n        self.age=age\n\n    def run(self):\n        print(\"%s,快跑，帅到被人砍\"%self.name)\n\n    def __str__(self):\n        msg=\"我是一个类的介绍，我的作者是个大帅哥🤓️\"\n        return msg\n\n#定义对象\nmark=People(\"mark\",18)\nmark.run()\n\n#返回对象在内存中的地址\nprint(mark)\n结果：\nmark,快跑，帅到被人砍\n我是一个类的介绍，我的作者是个大帅哥🤓️\n3、私有属性、方法\n只需要在属性变量名或方法名前加上__就表示是私有的了，简单吧😄\n实例\nclass People():\n    \"\"\"定义一个People类\"\"\"\n\n    #__init__方法是类创建对象时默认运行的函数，用来进行初始化操作,不需要手动调用\n    def __init__(self,name,age):\n        \"\"\"初始化属性\"\"\"\n        #私有属性name\n        self.__name=name\n        self.age=age\n\n    def run(self):\n        self.__test()\n\n    def __test(self):\n        print(\"%s,快跑，帅到被人砍\" % self.__name)\n\n    def __str__(self):\n        msg=\"我是一个类的介绍，我的作者是个大帅哥🤓️\"\n        return msg\n\n#定义对象\nmark=People(\"mark\",18)\nmark.run()\n\n#返回对象在内存中的地址\nprint(mark)\n结果：\nmark,快跑，帅到被人砍\n我是一个类的介绍，我的作者是个大帅哥🤓️\n4、__del__():析构函数\n对象被销毁时调用\n实例：\nclass People():\n    \"\"\"定义一个People类\"\"\"\n\n    #__init__方法是类创建对象时默认运行的函数，用来进行初始化操作,不需要手动调用\n    def __init__(self,name,age):\n        \"\"\"初始化属性\"\"\"\n        #私有属性name\n        self.__name=name\n        self.age=age\n\n    def run(self):\n        self.__test()\n\n    def __test(self):\n        print(\"%s,快跑，帅到被人砍\" % self.__name)\n\n    def __str__(self):\n        msg=\"我是一个类的介绍，我的作者是个大帅哥🤓️\"\n        return msg\n\n    def __del__(self):\n        print(\"%s因为太帅了，要被干掉了\"%self.__name)\n\n#定义对象\nmark=People(\"mark\",18)\nmark.run()\n\n#返回对象在内存中的地址\nprint(mark)\n\n#删除销毁对象\ndel mark\n结果：\nmark,快跑，帅到被人砍\n我是一个类的介绍，我的作者是个大帅哥🤓️\nmark因为太帅了，要被干掉了\n5、继承\n私有方法和属性不会被继承\n单继承\n实例：\nclass Animal():\n    def __init__(self,name,age):\n        self.__name=name\n        self.age=age\n\nclass Dog(Animal):\n    def __init__(self,name,age):\n        #调用父类方法\n        super().__init__(name,age)\n    def getAge(self):\n        print(\"小狗年龄：\",self.age)\n\ndog=Dog(name=\"xDog\",age=5)\ndog.getAge()\n\n\n结果：\n小狗年龄： 5\n多继承\n实例：\n#python默认所有类都继承object，可写可不写\nclass Base(object):\n    def test(self):\n        print(\"Base--test\")\n\nclass A(Base):\n    def test(self):\n        print(\"A--test\")\n\nclass B(Base):\n    def test(self):\n        print(\"B--test\")\n\nclass C(A,B):\n    #pass表示暂时不写代码\n    pass\n\nc=C()\nc.test()\n结果：\nA--test\n6、类属性、实例属性\n实例：\n#python默认所有类都继承object，可写可不写\nclass Base(object):\n    #共有类属性\n    name=\"mark\"\n    #私有类属性\n    __age=18#我的年龄是保密的哟\n    pass\n\nbase=Base()\nprint(base.name)\nprint(Base.name)\n#下面两句句运行错误,不能在类外访问私有属性\n#print(base.__age)\n#print(Base.__age)\n\n结果：\nmark\nmark\n7、类方法、静态方法\n修饰器@classmethod来标识类方法，第一个参数必须是类对象修饰符@staticmethod来标识静态方法\n\n实例：\n#python默认所有类都继承object，可写可不写\nclass Base(object):\n    #共有类属性\n    name=\"mark\"\n    #私有类属性\n    __age=18#我的年龄是保密的哟\n\n    #类方法\n    @classmethod\n    def changeAge(cls):\n        cls.__age+=1\n        return cls.__age\n\n    @staticmethod\n    def staticFun():\n        return \"类静态方法被调用\"\n\n\nbase=Base()\n#实例调用类方法\nprint(base.changeAge())\n#类调用类方法\nprint(Base.changeAge())\n\n\n#实例调用类静态方法\nprint(base.staticFun())\n#类调用类静态方法\nprint(Base.staticFun())\n结果：\n19\n20\n类静态方法被调用\n类静态方法被调用\n8、__new__:创建实例时调用\n第一个参数必须是类对象。必须要有返回值，返回的是实例化后的对象，可以return 父类的__new__或者object的这个方法。\n\n实例：\nclass Base(object):\n    def __init__(self):\n        print(\"__init__被调用了\")\n    def __new__(cls, *args, **kwargs):\n        print(\"__new__被调用了\")\n        return super().__new__(cls)\n\n\n\nbase=Base()\n\n结果：\n__new__被调用了\n__init__被调用了\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "1"}