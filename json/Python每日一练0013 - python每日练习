{"title": "Python每日一练0013 - python每日练习 ", "index": "python3.x,python", "content": "问题\n现在有多个字典或者映射，你想将它们从逻辑上合并为一个单一的映射后执行某些操作， 比如查找值或者检查某些键是否存在。\n解决方案\n使用collections库的ChainMap类，可以快速的将多个dict合并在一起\n>>> from collections import ChainMap\n>>> a = {'x': 1, 'z': 3 }\n>>> b = {'y': 2, 'z': 4 }\n>>> c = ChainMap(a, b)\n>>> print(c['x'])\n1\n>>> print(c['y'])\n2\n>>> print(c['z'])\n3\n讨论\nChainMap可以将多个dict合并在一起，当做一个整体来处理，并且它比创建一个新的dict或者使用dict.update()速度要快\nChainMap的底层实现是将合并的字典存到一个list当中，这个list我们可以通过访问maps成员得到\n>>> from collections import ChainMap\n>>> a = {'x': 1, 'z': 3 }\n>>> b = {'y': 2, 'z': 4 }\n>>> c = ChainMap(a, b)\n>>> print(c.maps)\n[{'x': 1, 'z': 3}, {'y': 2, 'z': 4}]\n对于查询操作，ChainMap会扫描这个list，直到找到key存在然后返回，所以上面的例子，我们的c['z']得到的是3\n而对于增加和删除操作，ChainMap只会操作list中的第一个dict\n另外一点需要注意的是，ChainMap是按引用存储的，意思是如果我们修改了原来的dict，这个修改是会被反射到ChainMap里，举个例子：\n>>> from collections import ChainMap\n>>> a = {'x': 1, 'z': 3 }\n>>> b = {'y': 2, 'z': 4 }\n>>> c = ChainMap(a, b)\n>>> print(c['x'])\n1\n>>> a['x'] = 66\n>>> print(c['x'])\n关于ChainMap更详细的介绍可以参考：https://docs.python.org/3/lib...\n来源\nPython Cookbook\n关注\n欢迎关注我的微信公众号：python每日一练\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}