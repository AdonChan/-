{"title": "使用Visual Studio Code编写调试Python Flask程序 - Ethan Sun的技术博客 ", "index": "python,flask,visual-studio-code", "content": "最近由于工作关系，开始写flask web程序，同事有用Vim的，有用PyCharm的。在调研了一通python的编辑器，IDE之后，发现Visual Studio Code相对比较适合我。\nVSC有相对较全的功能，比较好看舒服的主题，良好的用户体验（我现在用Mac），启动速度较快，插件体系强大。现将VSC的安装配置过程记录如下。\n前置条件是，python 2.7 已经安装完成，pip也已经搞定。\n首先在Microsoft Visual Studio Code 网站上下载安装程序，选择对应的平台，我的是osx的。\n安装完成后，启动VSC，按 cmd+shift+P，启动快速命令拦，输入ext ins，就会发现第一个选项是安装插件，点击回车来到插件边栏。或者可以直接点击最左边一列图标最下面那个，也会弹出插件边栏。在插件边栏输入Python搜索，安装Python 0.6.0插件。\n安装插件完成之后，点击插件上的重新载入，或者重启VSC，以便于载入插件。至此安装完成，下面开始编辑器配置。\nVSC采用了类似Sublime Text的全局->用户->工作区层级配置的概念，后者可以覆盖前者，用户只能编辑用户配置喝工程配置，全局配置都是默认的。有一点VSC做的特别好的是，整个软件的本地化特别好，连配置文件中也都是中文注释。如果鼠标悬浮到用户或者工作区的某项配置上，会有个popup中文显示当前配置项的含义。如果想覆盖并修改全局配置中的某一项，可以悬浮到该配置项上，可以看到文字左边出现了一个铅笔样的图标，点击这个图标即可将这条配置复制到用户或者全局配置中做出修改，做的非常人性化。\n比如我的用户配置如下：\n{\n    \"workbench.colorTheme\": \"Material Theme\",\n    \"editor.fontSize\": 13,\n    \"editor.lineHeight\": 18,\n    \"editor.rulers\": [80,100],\n    // 配置 glob 模式以排除文件和文件夹。\n    \"files.exclude\": {\n        \"**/*.pyc\":true,\n        \"**/*.pyo\":true,\n        \"**/.idea\":true,\n        \"**/.settings\":true,\n        \"**/.vscode\":true,\n        \"**/.project\":true,\n        \"**/.pydevproject\":true\n    },\n    \"python.linting.pylintEnabled\": false,\n    \"editor.fontFamily\": \"Hack\"\n}\n下载并使用了一个好看的主题Material Theme，字号调大到13，此时默认行高为20，我觉得太大，调整到18，配置文件列表中不显示某些后缀的文件，避免影响视野，同时下载了一个开源程序字体Hack，配置为唯一显示字体。\n其中最需要注意的是python.linting.pylintEnabled这个选项，我把pylint关掉了。或许是pylint本身的问题或者是集成的问题，pylint对flask的解析总是时对时错，关闭是最好选择。\n对于Flask工程本身的配置，需要添加到工作区配置中。由于我们会经常用到virtual env，所以实际上关键需要配置python命令本身的路径如下（跟具体virtualenv的设置有关）：\n{\n    \"python.pythonPath\": \"${workspaceRoot}/venv/bin/python\"\n}\n到这里，配置已经能够满足python工程的高亮，代码补全等编写功能了，快捷键也可以通过配置文件修改，配合VSC自带的能力，已经基本OK了，下面是Flask Debug的配置。\n这点消耗了我相当长时间。官网给提供了两种方式，都可以实现。\n第一种适合Flask 0.11及以上版本，因为在0.11版本起，出现了venv/bin/flask文件，配置可以写成：\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Flask\",\n            \"type\": \"python\",\n            \"request\": \"launch\",\n            \"stopOnEntry\": false,\n            \"pythonPath\": \"${config.python.pythonPath}\",\n            \"program\": \"${workspaceRoot}/venv/bin/flask\",\n            \"env\": {\n                \"FLASK_APP\": \"${workspaceRoot}/app.py\"\n            },\n            \"args\": [\n                \"run\",\n                \"--no-debugger\",\n                \"--no-reload\"\n            ],\n            \"debugOptions\": [\n                \"WaitOnAbnormalExit\",\n                \"WaitOnNormalExit\",\n                \"RedirectOutput\"\n            ]\n        }\n    ]\n}\n用flask.py文件启动Flask程序，实测可以触发断点。\n对于在0.11以下版本的Flask而言，可以采用第二种方式：\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Python\",\n            \"type\": \"python\",\n            \"request\": \"launch\",\n            \"stopOnEntry\": false,\n            \"pythonPath\": \"${config.python.pythonPath}\",\n            \"program\": \"${file}\",\n            \"debugOptions\": [\n                \"WaitOnAbnormalExit\",\n                \"WaitOnNormalExit\",\n                \"RedirectOutput\"\n            ]\n        }\n    ]\n}\n切记！！！ Flask在启动时必须指定 app.run(debug=False)，一定不能开启调试！否则无法命中断点。\n调试时启动Flask程序的入口文件即可，也可以将${file}替换为实际的入口文件，这样不用每次都切换到该文件才能开启调试。实测OK。\n还有一种可以远程调试的方法：需要先pip install ptvsd\nif __name__ == \"__main__\":\n    import ptvsd\n    import socket\n    try:\n        address = ('127.0.0.1', 12345)\n        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        s.bind(address)\n    except socket.error:\n        ptvsd.enable_attach(None, address=('0.0.0.0', 8000))\n    manager.run()\n在manager.run()或者app.run()之前，加入如上代码，在8000端口开启远程调试（不是http服务的端口！）\n比如从shell启动此Flask程序，VSC配置如下，Flask启动好之后启动调试监听在8000端口上即可：\n{\n    \"name\": \"Attach (Remote Debug)\",\n    \"type\": \"python\",\n    \"request\": \"attach\",\n    \"localRoot\": \"${workspaceRoot}\",\n    \"remoteRoot\": \"${workspaceRoot}\",\n    \"port\": 8000,\n    \"host\": \"localhost\"\n}\n注意远程和本地的源码路径的前缀必须配置正确！\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "3"}