{"title": "Python3 爬虫快速入门攻略 - 个人文章 ", "index": "python", "content": "一、什么是网络爬虫？\n1、定义：网络爬虫（Web Spider），又被称为网页蜘蛛，是一种按照一定的规则，自动地抓取网站信息的程序或者脚本。\n2、简介：网络蜘蛛是一个很形象的名字。如果把互联网比喻成一个蜘蛛网，那么Spider就是在网上爬来爬去的蜘蛛。网络蜘蛛是通过网页的链接地址来寻找网页，从 网站某一个页面开始，读取网页的内容，找到在网页中的其它链接地址，然后通过这些链接地址寻找下一个网页，这样一直循环下去，直到把这个网站所有的网页都抓取完为止。\n3、爬虫流程：①先由urllib的request打开Url得到网页html文档——②浏览器打开网页源代码分析元素节点——③通过Beautiful Soup或则正则表达式提取想要的数据——④存储数据到本地磁盘或数据库（抓取，分析，存储），\n二、上代码，直接看注释\n开发环境：Win10+Python 3.6.1 64bit+PyCharm，自学Python 3爬虫时的备忘笔记。\n1、爬取简书网站首页文章的标题和文章链接\nfromurllibimportrequest\nfrombs4importBeautifulSoup#Beautiful Soup是一个可以从HTML或XML文件中提取结构化数据的Python库\n构造头文件，模拟浏览器访问\nurl=\"http://www.jianshu.com\"\nheaders = {'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36'}\npage = request.Request(url,headers=headers)\npage_info = request.urlopen(page).read().decode('utf-8')#打开Url,获取HttpResponse返回对象并读取其ResposneBody\n将获取到的内容转换成BeautifulSoup格式，并将html.parser作为解析器\nsoup = BeautifulSoup(page_info,'html.parser')\n以格式化的形式打印html\nprint(soup.prettify())\ntitles = soup.find_all('a','title')# 查找所有a标签中class='title'的语句\n'''\n打印查找到的每一个a标签的string和文章链接\nfor title in titles:\n\n    print(title.string)\n\n    print(\"http://www.jianshu.com\" + title.get('href')) \n\n'''\nopen()是读写文件的函数,with语句会自动close()已打开文件\nwithopen(r\"D:Pythontestarticles.txt\",\"w\")asfile:#在磁盘以只写的方式打开/创建一个名为 articles 的txt文件\nfortitleintitles:\nfile.write(title.string+'n')\nfile.write(\"http://www.jianshu.com\"+ title.get('href')+'nn')\n结果：图片描述\n大概学习了下通过urllib和Beautiful Soup 进行简单数据爬取的流程，但是那只适用于一些简单的、数据量比较小的爬虫项目，如果需要爬取的数据量比较大的话，之前的方法必定非常缓慢，而且还可能遇到大规模爬虫IP被网站封禁的情况，因为好的网站会有反爬虫策略。多线程和分布式爬虫、我刚整理了一套2018最新的0基础入门和进阶教程，无私分享，加Python学习q-u-n ：二二七，四三五，四五零 即可获取，内附：开发工具和安装包，以及系统学习路线图\nIP代理、处理验证码、模拟登陆、内置浏览器引擎爬虫，还有注意配合反爬虫措施比较少的移动APP端抓取（抓包工具Fiddler）等等问题。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "0"}