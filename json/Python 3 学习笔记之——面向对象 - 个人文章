{"title": "Python 3 学习笔记之——面向对象 - 个人文章 ", "index": "python", "content": "1. 类的介绍\n\n类(Class) 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例，类是对象的抽象。\n\n\n方法：类中定义的函数。\n\n类变量：类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。\n\n方法变量：定义在方法中的变量。\n\n继承：即一个派生类（derived class）继承基类（base class）的属性和方法。\n\n方法重写：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也成为方法的重写。\n\n2. 类的定义\n语法格式如下:\nclass ClassName:\n    <statement-1>\n    .\n    .\n    .\n    <statement-N>\n\n类有一个名为 _init_() 的特殊方法，也即是构造函数，该方法会在定义对象的时候自动调用，可以通过参数传递来对类的实例进行设定。\n在类内部，使用 def 关键字来定义一个方法，与一般函数不同，类方法必须包含参数 self，并且作为第一个参数，self 代表类的实例，类似于 C++ 中的 this 指针。\n类的私有属性 __private_attrs 以两个下划线开头，在类内部的方法中使用时用 self.__private_attrs 调用，不能在类外部访问类的私有属性。\n类的私有方法 __private_method 以两个下划线开头，只能在类的内部调用，不能在类外部调用。\n\nclass person:\n    \n    instances = 0                # 类变量，所有类公用\n    \n    def __init__(self, name, age, weight):\n        self.name = name         # 公有属性\n        self.age = age\n        self.__weight = weight   # 私有属性，在类外无法直接访问\n        \n        person.instances += 1;   # 通过类来访问类变量\n    \n    def tell_a_secret(self):     # 私有方法\n        print(\"Tell you a secret, my weight is {} kg.\".format(self.__weight))\n    \n    def speak(self):             # 公有方法\n        print('My name is {}, I\\'m {} years old.'.format(self.name, self.age))\n        self.tell_a_secret()\n\n\npeople = person('seniusen', 21, 60)\npeople.speak()\nprint(people.instances)\nprint(people.instances) # 通过实例也可以访问类变量\n\n# My name is seniusen, I'm 21 years old.\n# Tell you a secret, my weight is 60 kg.\n# 1\n# 1\n3. 类的单继承\n语法格式如下:\nclass DerivedClassName(BaseClassName1):\n    <statement-1>\n    .\n    .\n    .\n    <statement-N>\n\n注意圆括号中基类的顺序，若是基类中有相同的方法名，而在子类使用时未指定，则 Python 从左至右进行搜索。即方法在子类中未找到时，从左到右查找基类中是否包含该方法。\n基类名 BaseClassName 必须与派生类定义在一个作用域，如果基类定义在另一个模块，这时候我们还可以用一个表达式来定义派生类，class DerivedClassName(modname.BaseClassName):。\n\nclass student(person):\n        \n    def __init__(self, name, age, weight, major):\n        \n        person.__init__(self, name, age, weight) # 调用父类的构造函数，此时必须给定 self 参数\n        # super(student, self).__init__(name, age, weight) 或者利用 super() 函数\n        self.major = major\n\n    # 重写父类的方法\n    def speak(self): # 公有方法\n        person.speak(self)\n        print('My major in college is {}.'.format(self.major))\n\nstu = student('seniusen', 21, 60, 'Automation')\nstu.speak()\nprint(student.instances)\nprint(stu.instances) # 通过实例也可以访问类变量\n\n# My name is seniusen, I'm 21 years old.\n# Tell you a secret, my weight is 60 kg.\n# My major in college is Automation.\n# 2\n# 2\n3. 类的多继承\n语法格式如下:\nclass DerivedClassName(Base1, Base2, Base3):\n    <statement-1>\n    .\n    .\n    .\n    <statement-N>\nclass teacher:\n      \n    def __init__(self, title, topic):\n        self.title = title \n        self.topic = topic\n    \n    def speak(self): # 公有方法\n        print('I\\'m a {} , my research topic is {}.'.format(self.title, self.topic))\n\n# 继承自 teacher 和 student 的子类\nclass sample(teacher, student):\n    \n    def __init__(self, name, age, weight, major, title, topic):\n        student.__init__(self, name, age, weight, major)\n        teacher.__init__(self, title, topic)\n\ntest = sample('seniusen', 21, 60, 'Automation', 'prefessor', 'CV')\ntest.speak() # 没有指定方法，从左到右查找，这里调用了 teacher 类的 speak() 方法\n\n# I'm a prefessor , my research topic is CV.\n\n利用 super() 函数可以调用被子类重写的父类中的方法。\nclass Parent:           # 定义父类\n    \n    def myMethod(self):\n        print ('Method form Parent class!')\n\n        \nclass Child(Parent):    # 定义子类\n    \n    def myMethod(self):\n        print ('Method form Child class!')\n\na = Child()                # 子类实例\na.myMethod()               # 子类调用重写方法\nsuper(Child, a).myMethod() #用子类对象调用父类已被覆盖的方法\n\n# Method form Child class!\n# Method form Parent class!\n\n参考资料 菜鸟教程\n获取更多精彩，请关注「seniusen」! \n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}