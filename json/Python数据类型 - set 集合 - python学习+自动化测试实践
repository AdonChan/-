{"title": "Python数据类型 - set 集合 - python学习+自动化测试实践 ", "index": "python", "content": "set 集合\n\n在Python中，set是基本数据类型的一种集合类型。\n\nset 数组是一组key值，不包含重复元素。\nset 数组是可变的、无序的、有限的集合，其元素是唯一的、不可变的。\nset 数组没有（不支持）索引和切片操作。\n\nset有可变集合(set)和不可变集合(frozenset)两种，其中\n\nset：可以原地修改，或者说是可变的，也可以说是 unhashable（不可哈希）的。\nfrozenset：是一个被“冻结”的集合，不能原地修改，是 hashable（可哈希）的。\n\n一、set的创建\n（1）直接创建\n\n方式：将所有项（元素）放在花括号“{}”内，以逗号“，”分隔。\n\n集合元素：集合可以有任意数量的元素，它们可以是不同的类型（例如：数字、元组、字符串等）。但是，集合不能有可变元素（例如：列表、集合或字典）。\n>>> a = {1,2,3,4,'a'}\n>>> type(a)\n<class 'set'>\n（2）通过set()、frozenset()创建\npython中，set类是在python的sets模块中，不需要导入sets模块可以直接创建集合。\n>>>set('boy')\nset(['y', 'b', 'o'])\n（3）创建空的set集合\n创建空集合比较特殊。在 Python 中，空花括号“{}”用于创建空字典。要创建一个没有任何元素的集合，使用set()函数（不要包含任何参数）。\n>>> a = set()\n>>> a\nset()\n>>> b = {}\n>>> type(a),type(b)\n(<class 'set'>, <class 'dict'>)\nps：创建set例子\n\n\n二、set操作\n（1） in\nin关键字，判断某key是否在set中，并返回True or False。\n>>> s = set([1,2,3,2,1,3,4,5])\n>>> s\n{1, 2, 3, 4, 5}\n（2）add(key)\nadd()方法：添加元素到set中。可以重复添加，but没有效果，因为set中元素唯一性，会过滤重复的元素。\n>>> s.add(6)\n>>> s\n{1, 2, 3, 4, 5, 6}\n（3）update()\nupdate()：将参数添加到set中并返回一个set，自动过滤重复元素。update()方法既可以带一个单参数，也可以带一个or多个set，就好像多次调用add()。\n\n\n（4）remove(key)、discard(key)：\nremove(key)、discard(key)删除指定元素。区别：其中remove()删除不存在的key时会返回报错，而discard()不会。\n>>> a_set = {1,2,3,6,10,15,21,28,36,45}\n>>> a_set\n{1, 2, 3, 36, 6, 10, 45, 15, 21, 28}    # 并不一定是按填写的顺序\n>>> a_set.discard(10)\n>>> a_set\n{1, 2, 3, 36, 6, 45, 15, 21, 28}\n>>> a_set.remove(21)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nKeyError: 21\n（5）pop()\npop()函数不需要带任何参数，将set中的第一个元素删除。\n>>> a_set.pop()\n1\n>>> a_set\n{2, 3, 36, 6, 45, 15, 28}\n（6）clear()\nclear()函数，清空set，集合仍存在，只不过为空集合。\n>>> a_set.clear()\n>>> a_set\nset()\n（7）del 删除一个元素\n语法形式：del set_name\n\n三、集合操作\nset可以看成数学意义上的无序、无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作。\n\n\n交集：两个set集合之间所有的元素，操作符号为“&”或者intersection()函数；\n\n并集：两个set集合之间共有的元素，操作符号为“|”或者union()函数；\n\n差集：在a集合中但不在b集合中，方法为difference()函数；\n\nsymmetric_difference()：在a集合中不在b集合中 and 在b集合中不在a集合中。\n\n举几个例子：\n>>> s1 =set([1,3,6])\n>>> s & s1        # and\n{1, 3, 6}\n>>> s | s1         # or\n{1, 2, 3, 5, 6}\n>>> a_set = {1,2,3,4,5,6,7,8,9,0}\n>>> b_set = {1,2,3,4,5,11,12,13,14,15}\n>>> a_set.union(b_set)             # 并集|，或者直接a_set | b_set\n{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15}\n>>> a_set.intersection(b_set)     # 交集&，或者直接使用 a_set & b_set\n{1, 2, 3, 4, 5}\n>>> a_set.difference(b_set)     # 差集，在a中但不在b中\n{0, 6, 7, 8, 9}\n>>> a_set.symmetric_difference(b_set) #在a中不在b中 and 在b中不在a中\n{0, 6, 7, 8, 9, 11, 12, 13, 14, 15}\n\n\nissubset()：判断集合是否为某集合的子集，返回True or False。\n\nissuperset()：判断集合是否为某集合的父集,返回True or False。\n\n\n\n❤ thanks for watching, keep on updating... \n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "0"}