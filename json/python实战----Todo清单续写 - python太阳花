{"title": "python实战----Todo清单续写 - python太阳花 ", "index": "html5,python,mysql,windows", "content": "添加分页功能\n第一步：是对视图函数的改写，通过查询数据库数据，进行分页显示\n# 修改清单显示的视图函数\n@app.route('/list/')\n@app.route('/list/<int:page>')\ndef todo_list(page=1):\n    todos = Todo.query.paginate(page,5)\n    parts = Department.query.all()\n    return  render_template('todo_list.html',todos=todos,parts=parts)\n第二步：改写html文件，实现分页显示，重新定义一个宏文件\n{# marco_page.html#}\n{% macro paginate(fname, todos) %}\n    {#    dataObj 就是views函数中传递过来的Paginate实例化的对象;#}\n    <ul class=\"pagination\">\n\n        {#        判断是否由上一页， #}\n\n        {% if todos.has_prev %}\n            {#        /list/4/   ===> /list/3/#}\n            <li><a href=\"{{ url_for(fname, page=todos.prev_num) }}\">前一页</a></li>\n        {% else %}\n            <li class=\"disabled\"><a href=\"#\">前一页</a></li>\n\n        {% endif %}\n\n\n        {#   根据从数据库中查询的数据， 来确定分页的个数， 使用for循环   #}\n        {#  返回一个迭代器， 如果有100页， 薄嗯不会返回100个数字， 而是1 2 。。。。 99 100        #}\n        {% for page in todos.iter_pages(right_current=2) %}\n            {# page: 要生成html代码的页数，  todos.page： 用户希望显示数据的页数            #}\n            {% if page == todos.page %}\n                <li class=\"active\"><a href={{ url_for(fname, page=page) }}>{{ page }}\n                </a></li>\n            {% elif page == None %}\n                <li class=\"disabled\"><a href={{ url_for(fname, page=1) }}>...</a></li>\n            {% else %}\n                <li><a href={{ url_for(fname, page=page) }}>{{ page }}</a></li>\n            {% endif %}\n        {% endfor %}\n        \n        {#        判断是否有后一页 #}\n        {% if todos.has_next %}\n            {#        /list/4/   ===> /list/3/#}\n            <li><a href=\"{{ url_for(fname, page=todos.next_num) }}\">后一页</a></li>\n        {% else %}\n            <li class=\"disabled\"><a href=\"#\">后一页</a></li>\n\n        {% endif %}\n\n    </ul><br>\n{% endmacro %}\n第三步，清单显示的模板文件调用分页显示栏\n        {% from 'macro_page.html' import paginate %}\n\n        {{ paginate('todo_list', todos) }}\n\n添加日志收集功能\n第一步，给原有数据库操作文件添加新的数据库表Userlog,用来存放任务的修改编辑日志对原有的数据库进行再添加时，需要进行数据库迁移。\nclass Userlog(db.Model):\n    id = db.Column(db.Integer, autoincrement=True, primary_key=True)\n    add_time = db.Column(db.DateTime, default=datetime.now())  # 创建时间\n    ip = db.Column(db.String(200), nullable=False) # 登录ip\n    content = db.Column(db.String(200))\n    area =  db.Column(db.String(200))  # 用户登录地点\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))  # 外键\n\n    def __repr__(self):\n        return '<Userlog: %s>' % (self.ip)\n\n确保你有一个关于数据库迁移的文件，基础代码如下\n# manage.py\nfrom flask_migrate import MigrateCommand, Migrate\nfrom flask_script import Shell,Manager\nfrom todo_models import app,db,User,Department,Todo\n\nmanager = Manager(app)\nmigrate = Migrate(app,db)\n\nmanager.add_command('db',MigrateCommand)\nif __name__ == '__main__':\n    manager.run()\n在terminal终端执行命令\npython manage.py db init\npython manage.py db migrate -m '添加日志信息'\npython manage.py db upgrade\n第二步，给路由和对应视图函数加上采集的日志信息,以添加清单任务为例修改状态和删除任务也加上日志信息，这里省略\n    userlog = Userlog(ip=request.remote_addr, area=\"西安\",\n                      user_id=1, content=\"添加任务%s\" %(name))\n    db.session.add(userlog)\n    db.session.commit()\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}