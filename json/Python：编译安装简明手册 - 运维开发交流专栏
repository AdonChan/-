{"title": "Python：编译安装简明手册 - 运维开发交流专栏 ", "index": "virtualenv,linux,python", "content": "安装依赖\n# Centos\nsudo yum install automake gcc gcc-c++ bzip2-devel readline-devel sqlite-devel zlib-devel openssl-devel gdbm-devel tk-devel xz-devel -y\n \n# 附 - Ubuntu\n# sudo apt-get update\n# sudo apt-get install zlib1g-dev libbz2-dev libssl-dev libncurses5-dev libsqlite3-dev libreadline-dev tk-dev libgdbm-dev libdb-dev libpcap-dev xz-utils libexpat-dev\n准备源码包\n# 下载源码包\nmkdir -p /opt/down\ncd /opt/down\n# Python2.7.14 （Python2.x的最终版本，不会再有更新）\n# wget https://www.python.org/ftp/python/2.7.14/Python-2.7.14.tar.xz\n# OR\n# Python3.x\n# wget https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tar.xz\n\nwget https://www.python.org/ftp/python/2.7.14/Python-2.7.14.tgz\ntar xJf Python-2.7.14.tar.xz\ncd Python-2.7.14\n编译安装\n# 编译配置\n./configure --prefix=/opt/soft/python2.7 --with-ensurepip=install\n\n# 预编译\nmake -j4\n# -j4 为可选，意思是起4个编译任务； 一般是CPU核数，单核的机器就不要跟这个选项了。\n\n# 安装\nmake install\n配置国内源\n# 用户\ncd ~\nmkdir -p .config/pip/\n \nvim .config/pip/pip.conf    # 复制下面的内容到文件中\n\n# pip env config.\n[global]\ntimeout = 60\nindex-url = http://mirrors.aliyun.com/pypi/simple/\n  \n[install]\ntrusted-host=mirrors.aliyun.com\n  \n[list]\n#format=(legacy|columns)\nformat=columns\nPython虚拟环境\n不论是开发还是生产环境，建议使用 Python venv环境来开发和运行服务。官方文档：https://virtualenv.pypa.io/en...\n# 如果配置了用户环境变量，可以无需绝对路径执行下述过程\n  \n# 安装 virtualenv\n/opt/soft/python2.7/bin/pip install virtualenv\n  \n# 创建 venv 环境\ncd /opt/web/\ngit clone https://xxxxxxx/test.git       # 例如这里有个 test 项目\ncd test/\n/opt/soft/python2.7/bin/virtualenv venv  # 在项目下面创建 venv 环境\n  \n# 激活 venv\nsource /opt/web/test/venv/bin/activate   # 这样就使用 venv 环境下的python了\n\n# 退出 venv\ndeactivate\n\n# 注： \n# python3 不用安装 virtualenv， 可以直接 python -m venv venv 创建虚拟环境\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}