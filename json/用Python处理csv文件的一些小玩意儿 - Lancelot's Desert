{"title": "用Python处理csv文件的一些小玩意儿 - Lancelot's Desert ", "index": "python,csv", "content": "Python CSV Toolkit\n整理了一些个人在利用python处理csv文件时经常用到的一些自定义方法，放在这里主要方便自己查阅，也可以给其他人做参考\n\n目录\n\n输出CSV文件某列的匹配/不匹配的记录\n调整csv文件的列的顺序\nCSV转换器\n抽取特定列\n除去完全重复的记录\n根据列名排序\n键值互换\n\n输出CSV文件某列的匹配/不匹配的记录\n主要用于从csv文件中抽取出匹配特定列的特定字段集合的记录，比如现有这么一个csv文件（表格化后）\n\n\nname\nage\nsex\n\n\n\nDanny\n24\nmale\n\n\nDaisy\n23\nfemale\n\n\nLancelot\n23\nunknown\n\n\nLydia\n21\nfemale\n\n\n...\n...\n...\n\n\n\n需要输出其中age为23的记录到新的csv文件，则我们可以先把23这么个关键词用一个列表收集起来，然后通过下列代码从csv文件中找出所有符合条件的记录并输出\nimport sys\nimport csv\n\n# try to fix '_csv.Error: field larger than field limit (131072)'\ncsv.field_size_limit(sys.maxint)\n\n# write to common csv file with delimiter ','\n# output the rows with matched id in id_list to a new csv file\ndef csv_match(id_list,key,input_file,output_file):\n    with open(input_file, 'rb') as f:\n        reader = csv.DictReader(f)\n        rows = [row for row in reader if row[key] in set(id_list)]\n\n    header = rows[0].keys()\n    with open(output_file, 'w') as f:\n        f.write(','.join(header))\n        f.write('\\n')\n        for data in rows:\n            f.write(\",\".join(data[h] for h in header))\n            f.write('\\n')\n调用的时候：\nlst=['23']\ncsv_match(lst,'age','in.csv','out.csv')\nkey为需要匹配的列名，另外我们也可以提取不符合该条件的记录，‘取个反’就行了\n# output the rows with not matched id in id_list to a new csv file\ndef csv_not_match(id_list, key, input_file, output_file):\n    with open(input_file, 'rb') as f:\n        reader = csv.DictReader(f)\n        rows = [row for row in reader if not row[key] in set(id_list)]\n\n    header = rows[0].keys()\n    with open(output_file, 'w') as f:\n        f.write(','.join(header))\n        f.write('\\n')\n        for data in rows:\n            f.write(\",\".join(data[h] for h in header))\n            f.write('\\n')\n对于需要判断csv文件中多个列的值的情况，只需修改对应的判别条件和传入参数情况即可\n# output the rows with matched key1 or key2 in refer_list to a new csv file\n# @params\n# refer_list: the list referred to\n# key,key2: column name of csv file to check the value in the refer_list or not\ndef csv_match2(refer_list, key1, key2, input_file, output_file):\n    with open(input_file, 'rb') as f:\n        reader = csv.DictReader(f)\n        rows = [row for row in reader if (row[key1] in set(refer_list)) or (row[key2] in set(refer_list))]\n\n    header = rows[0].keys()\n    with open(output_file, 'w') as f:\n        f.write(','.join(header))\n        f.write('\\n')\n        for data in rows:\n            f.write(\",\".join(data[h] for h in header))\n            f.write('\\n')\n\n调整csv文件的列的顺序\n有时候我们输出的或者拿到的csv文件的列的顺序不够‘人性化’，为了让我们看起来更加直观，更舒服一点，我们可以按照我们的需要调整列的顺序\nimport csv\n# reorder the column of the csv file to what you want\ndef csv_reorder(in_file, out_file,lst_order):\n    with open(in_file, 'rb') as infile, open(out_file, 'wb') as outfile:\n        fieldnames=lst_order\n        writer = csv.DictWriter(outfile, fieldnames=fieldnames)\n        writer.writeheader()\n        for row in csv.DictReader(infile):\n            writer.writerow(row)\n其中lst_order为我们需要的列名顺序，用list存储，举个例子\nseason_id,league_name,league_size\n2003,scottish-premiership,12\n2016,1-hnl,10\n2004,alka-superligaen,12\n2006,allsvenskan,14\n1992,premier-league,22\n...\n现在我们想调整他的顺序，按照league_name,season_id,league_size的顺序重新组合一下则调用\nlst_order = ['league_name','season_id','league_size']\ncsv_reorder('leagues_size.csv', 'leagues_size_new.csv', lst_order)\n得到结果\nleague_name,season_id,league_size\nscottish-premiership,2003,12\n1-hnl,2016,10\nalka-superligaen,2004,12\nallsvenskan,2006,14\npremier-league,1992,22\n...\nCSV转换器\n这个主要是用来进行csv和python的一些内置的容器例如list,dict之类的转换，包括一些特殊的多级字典，或者是嵌套列表的字典等等，这里只是把他们打个包放在一起，具体的可以参照我之前写的一篇文章\nimport csv\n\n#---------------------------------------------------csv <--> dict--------------------------------------------\n\n# convert csv file to dict\n# @params:\n# key/value: the column of original csv file to set as the key and value of dict\ndef csv2dict(in_file,key,value):\n    new_dict = {}\n    with open(in_file, 'rb') as f:\n        reader = csv.reader(f, delimiter=',')\n        fieldnames = next(reader)\n        reader = csv.DictReader(f, fieldnames=fieldnames, delimiter=',')\n        for row in reader:\n            new_dict[row[key]] = row[value]\n    return new_dict\n\n\n# convert csv file to dict(key-value pairs each row)\n# default: set row[0] as key and row[1] as value of the dict\ndef row_csv2dict(csv_file):\n    dict_club={}\n    with open(csv_file)as f:\n        reader=csv.reader(f,delimiter=',')\n        for row in reader:\n            dict_club[row[0]]=row[1]\n    return dict_club\n\n# write dict to csv file\n# write each key/value pair on a separate row\ndef dict2csv(dict, file):\n    with open(file, 'wb') as f:\n        w = csv.writer(f)\n        # write each key/value pair on a separate row\n        w.writerows(dict.items())\n\n# write dict to csv file\n# write all keys on one row and all values on the next\ndef dict2csv2(dict, file):\n    with open(file, 'wb') as f:\n        w = csv.writer(f)\n        # write all keys on one row and all values on the next\n        w.writerow(dict.keys())\n        w.writerow(dict.values())\n\n# build a dict of list like {key:[...element of lst_inner_value...]}\n# key is certain column name of csv file\n# the lst_inner_value is a list of specific column name of csv file\ndef build_list_dict(source_file, key, lst_inner_value):\n    new_dict = {}\n    with open(source_file, 'rb')as csv_file:\n        data = csv.DictReader(csv_file, delimiter=\",\")\n        for row in data:\n            for element in lst_inner_value:\n                new_dict.setdefault(row[key], []).append(row[element])\n    return new_dict\n# sample:\n# test_club=build_list_dict('test_info.csv','season',['move from','move to'])\n# print test_club\n\n\n# build specific nested dict from csv files\n# @params:\n#   source_file\n#   outer_key:the outer level key of nested dict\n#   inner_key:the inner level key of nested dict,and rest key-value will be store as the value of inner key\ndef build_level2_dict(source_file,outer_key,inner_key):\n    new_dict = {}\n    with open(source_file, 'rb')as csv_file:\n        reader = csv.reader(csv_file, delimiter=',')\n        fieldnames = next(reader)\n        inner_keyset=fieldnames\n        inner_keyset.remove(outer_key)\n        inner_keyset.remove(inner_key)\n        csv_file.seek(0)\n        data = csv.DictReader(csv_file, delimiter=\",\")\n        for row in data:\n            item = new_dict.get(row[outer_key], dict())\n            item[row[inner_key]] = {k: row[k] for k in inner_keyset}\n            new_dict[row[outer_key]] = item\n    return new_dict\n\n# build specific nested dict from csv files\n# @params:\n#   source_file\n#   outer_key:the outer level key of nested dict\n#   inner_key:the inner level key of nested dict\n#   inner_value:set the inner value for the inner key\ndef build_level2_dict2(source_file,outer_key,inner_key,inner_value):\n    new_dict = {}\n    with open(source_file, 'rb')as csv_file:\n        data = csv.DictReader(csv_file, delimiter=\",\")\n        for row in data:\n            item = new_dict.get(row[outer_key], dict())\n            item[row[inner_key]] = row[inner_value]\n            new_dict[row[outer_key]] = item\n    return new_dict\n\n# build specific nested dict from csv files\n# @params:\n#   source_file\n#   outer_key:the outer level key of nested dict\n#   lst_inner_value: a list of column name,for circumstance that the inner value of the same outer_key are not distinct\n#   {outer_key:[{pairs of lst_inner_value}]}\ndef build_level2_dict3(source_file,outer_key,lst_inner_value):\n    new_dict = {}\n    with open(source_file, 'rb')as csv_file:\n        data = csv.DictReader(csv_file, delimiter=\",\")\n        for row in data:\n            new_dict.setdefault(row[outer_key], []).append({k: row[k] for k in lst_inner_value})\n    return new_dict\n\n# build specific nested dict from csv files\n# @params:\n#   source_file\n#   outer_key:the outer level key of nested dict\n#   lst_inner_value: a list of column name,for circumstance that the inner value of the same outer_key are not distinct\n#   {outer_key:{key of lst_inner_value:[...value of lst_inner_value...]}}\ndef build_level2_dict4(source_file,outer_key,lst_inner_value):\n    new_dict = {}\n    with open(source_file, 'rb')as csv_file:\n        data = csv.DictReader(csv_file, delimiter=\",\")\n        for row in data:\n            # print row\n            item = new_dict.get(row[outer_key], dict())\n            # item.setdefault('move from',[]).append(row['move from'])\n            # item.setdefault('move to', []).append(row['move to'])\n            for element in lst_inner_value:\n                item.setdefault(element, []).append(row[element])\n            new_dict[row[outer_key]] = item\n    return new_dict\n\n# build specific nested dict from csv files\n# @params:\n#   source_file\n#   outer_key:the outer level key of nested dict\n#   lst_inner_key:a list of column name\n#   lst_inner_value: a list of column name,for circumstance that the inner value of the same lst_inner_key are not distinct\n#   {outer_key:{lst_inner_key:[...lst_inner_value...]}}\ndef build_list_dict2(source_file,outer_key,lst_inner_key,lst_inner_value):\n    new_dict = {}\n    with open(source_file, 'rb')as csv_file:\n        data = csv.DictReader(csv_file, delimiter=\",\")\n        for row in data:\n            # print row\n            item = new_dict.get(row[outer_key], dict())\n            item.setdefault(row[lst_inner_key], []).append(row[lst_inner_value])\n            new_dict[row[outer_key]] = item\n    return new_dict\n\n# dct=build_list_dict2('test_info.csv','season','move from','move to')\n\n# build specific nested dict from csv files\n# a dict like {outer_key:{inner_key1:{inner_key2:{rest_key:rest_value...}}}}\n# the params are extract from the csv column name as you like\ndef build_level3_dict(source_file,outer_key,inner_key1,inner_key2):\n    new_dict = {}\n    with open(source_file, 'rb')as csv_file:\n        reader = csv.reader(csv_file, delimiter=',')\n        fieldnames = next(reader)\n        inner_keyset=fieldnames\n        inner_keyset.remove(outer_key)\n        inner_keyset.remove(inner_key1)\n        inner_keyset.remove(inner_key2)\n        csv_file.seek(0)\n        data = csv.DictReader(csv_file, delimiter=\",\")\n        for row in data:\n            item = new_dict.get(row[outer_key], dict())\n            sub_item = item.get(row[inner_key1], dict())\n            sub_item[row[inner_key2]] = {k: row[k] for k in inner_keyset}\n            item[row[inner_key1]] = sub_item\n            new_dict[row[outer_key]] = item\n    return new_dict\n\n# build specific nested dict from csv files\n# a dict like {outer_key:{inner_key1:{inner_key2:inner_value}}}\n# the params are extract from the csv column name as you like\ndef build_level3_dict2(source_file,outer_key,inner_key1,inner_key2,inner_value):\n    new_dict = {}\n    with open(source_file, 'rb')as csv_file:\n        data = csv.DictReader(csv_file, delimiter=\",\")\n        for row in data:\n            item = new_dict.get(row[outer_key], dict())\n            sub_item = item.get(row[inner_key1], dict())\n            sub_item[row[inner_key2]] = row[inner_value]\n            item[row[inner_key1]] = sub_item\n            new_dict[row[outer_key]] = item\n    return new_dict\n   \n\n# build specific nested dict from csv files\n# a dict like {outer_key:{inner_key1:{inner_key2:[inner_value]}}}\n# for multiple inner_value with the same inner_key2,thus gather them in a list\n# the params are extract from the csv column name as you like\ndef build_level3_dict3(source_file,outer_key,inner_key1,inner_key2,inner_value):\n    new_dict = {}\n    with open(source_file, 'rb')as csv_file:\n        data = csv.DictReader(csv_file, delimiter=\",\")\n        for row in data:\n            item = new_dict.get(row[outer_key], dict())\n            sub_item = item.get(row[inner_key1], dict())\n            sub_item.setdefault(row[inner_key2], []).append(row[inner_value])\n            item[row[inner_key1]] = sub_item\n            new_dict[row[outer_key]] = item\n    return new_dict\n\n#----------------------------------------------------------------------------------------------------------\n\n#---------------------------------------------------csv <--> list--------------------------------------------\n\ndef list2csv(list, file):\n# def list2csv(list):\n#     wr = csv.writer(open(file, 'wb'), quoting=csv.QUOTE_ALL)\n    wr=open(file,'w')\n    for word in list:\n        # print ''.join(word)\n        # wr.writerow([word])\n        wr.write(word+'\\n')\n        # wr.writerow(str.split(word,'\"')[0])\n        # print [word]\n\n# test_list = ['United States', 'China', 'America', 'England']\n\n# list2csv(test_list,'small_test.csv')\n\n# write nested list of dict to csv\ndef nestedlist2csv(list, out_file):\n    with open(out_file, 'wb') as f:\n        w = csv.writer(f)\n        fieldnames=list[0].keys()  # solve the problem to automatically write the header\n        w.writerow(fieldnames)\n        for row in list:\n            w.writerow(row.values())\n\n\n# my_list = [{'players.vis_name': 'Khazri', 'players.role': 'Midfielder', 'players.country': 'Tunisia',\n#             'players.last_name': 'Khazri', 'players.player_id': '989', 'players.first_name': 'Wahbi',\n#             'players.date_of_birth': '08/02/1991', 'players.team': 'Bordeaux'},\n#            {'players.vis_name': 'Khazri', 'players.role': 'Midfielder', 'players.country': 'Tunisia',\n#             'players.last_name': 'Khazri', 'players.player_id': '989', 'players.first_name': 'Wahbi',\n#             'players.date_of_birth': '08/02/1991', 'players.team': 'Sunderland'},\n#            {'players.vis_name': 'Lewis Baker', 'players.role': 'Midfielder', 'players.country': 'England',\n#             'players.last_name': 'Baker', 'players.player_id': '9574', 'players.first_name': 'Lewis',\n#             'players.date_of_birth': '25/04/1995', 'players.team': 'Vitesse'}\n#            ]\n\n# nestedlist2csv(my_list, 'dict2csv_test.csv')\n\n\n\n# collect and convert the first column of csv file to list\ndef csv2list(csv_file):\n    lst = []\n    with open(csv_file, 'rb')as f:\n        reader = csv.reader(f, delimiter=',')\n        for row in reader:\n            lst.append(row[0])\n    return list(set(lst))\n#----------------------------------------------------------------------------------------------------------\n抽取特定列\n\n抽取特定列的所有值并存储于列表\n根据下标抽取特定列到某个新的csv文件\n\n抽取特定列的所有值并存储于列表\n获取某列原始的数据并保存为列表\n# get certain column value of csv(for common csv file(','))\ndef get_origin_column_value(file, column_name):\n    with open(file, 'rb') as f:\n        role_list = []\n        reader = csv.reader(f, delimiter=',')\n        fieldnames = next(reader)\n        reader = csv.DictReader(f, fieldnames=fieldnames, delimiter=',')\n        for row in reader:\n            role_list.append(row[column_name])\n        return role_list\n对于某些有特殊需要的可以直接修改代码，比如对原始的列的值进行除重和排序后获取，如下\n# get certain column value of csv(for common csv file(',')),and judge if it's repeated\ndef get_column_value2(file, column_name):\n    with open(file, 'rb') as f:\n        role_list = []\n        reader = csv.reader(f, delimiter=',')\n        fieldnames = next(reader)\n        reader = csv.DictReader(f, fieldnames=fieldnames, delimiter=',')\n        for row in reader:\n            role_list.append(row[column_name])\n        role_set = set(role_list)\n        return sorted(list(role_set))\n根据下标抽取特定列到某个新的csv文件\nimport csv\n# extract certain column from csv file according to the column#\ndef column_extract(file_in,file_out,index):\n    with open(file_in,'r') as f_in:\n        with open(file_out,'w') as f_out:\n            for line in f_in:\n                f_out.write(line.split(',')[index])\n                f_out.write('\\n') # comment if a new line already exists\n除去完全重复的记录\n# eliminated the completely repeated record in repeated file for further analysis\ndef eliminate_repeated_row(in_file,out_file):\n    with open(in_file,'rb') as in_file,open(out_file,'wb')as out_file:\n        seen=set()\n        for line in in_file:\n            # print line\n            if line in seen:continue\n\n            seen.add(line)\n            out_file.write(line)\n对csv文件按照某一列排序\n# sort the csv file by certain column to put the similar record together for further analysis\ndef sort_csv_byColumn(in_file, out_file,column_name):\n    with open(in_file, 'rb') as f:\n        reader = csv.reader(f, delimiter=',')\n        fieldnames = next(reader)\n        reader = csv.DictReader(f, fieldnames=fieldnames, delimiter=',')\n        sorted_list = sorted(reader, key=lambda row: row[column_name], reverse=True)\n        # print sorted_list\n        csv_converter.nestedlist2csv(sorted_list, out_file)\n例如我们按照league_name排序(注意这里调用了csv转换器中的方法将列表的字典转换为csv文件)\nsort_csv_byColumn('leagues_size.csv','ordered_leagues_size.csv','league_name')\n得到结果\nseason_id,league_name,league_size\n2016,ykkonen,9\n2003,ykkonen,14\n2005,ykkonen,14\n2006,ykkonen,14\n2007,ykkonen,14\n2010,ykkonen,13\n2011,ykkonen,10\n2009,ykkonen,14\n2008,ykkonen,14\n2012,ykkonen,10\n2013,ykkonen,10\n2014,ykkonen,10\n2015,ykkonen,10\n2016,wiener-stadtliga,16\n1988,wiener-stadtliga,16\n1993,wiener-stadtliga,16\n1994,wiener-stadtliga,16\n1995,wiener-stadtliga,16\n1996,wiener-stadtliga,16\n1997,wiener-stadtliga,16\n1998,wiener-stadtliga,16\n如果我们按league_size排序\nsort_csv_byColumn('leagues_size.csv',\n                    'orderedbysize_leagues_size.csv','league_size')\n得到结果\nseason_id,league_name,league_size\n2008,virsliga,9\n2010,virsliga,9\n2012,a-lyga,9\n2012,a-pojat-sm-sarja,9\n2013,a-pojat-sm-sarja,9\n1953,salzburger-liga,9\n2010,3-lig-grup-1,9\n2013,armenian-first-league,9\n2016,ykkonen,9\n2014,stirling-sports-premiership,9\n2014,hong-kong-premier-league,9\n2015,hong-kong-premier-league,9\n1996,s-league,9\n2015,s-league,9\n2013,united-football-league,9\n2016,i-league,9\n键值互换\ncsv文件每一条记录其实可以看作是一个字典，有时csv文件里有不同的键对应同一个值的情况，我们想讲记录反转一下，即让值作为键，对应的键作为值\n# return a dict with the same value in original as new key and keys as value\ndef dict_same_value(original_dict):\n    new_dict={}\n    for k,v in original_dict.iteritems():\n        new_dict.setdefault(v,[]).append(k)\n    return new_dict\n\n最后欢迎大家fork关于这个的github上的repository，一起丰富更多好玩的功能~\n更新日志1、2016-12-18 修复了从csv文件中获取特定的列的值保存为集合的问题，而是存储为原始的列表2、2016-12-22 改进了csv转换器中的构建二级字典的方法，使其变得更加灵活3、2016年12月24日14:57:48 在csv转换器部分加入三级字典构造的参照方法4、2017年1月9日11:28:45  在csv转换器部分，三级字典构造中，加入了最内部存储值为列表的构造方法5、2017年1月16日10:43:41 在csv转换器部分，加入了构造列表字典的方法以及构造特殊的二级字典（内部为列表）的方法6、2017年2月9日10:58:17  在csv转换器部分，加入了新的构造特殊的二级字典（内部为列表）的方法7、2017年2月10日11:21:45  在csv转换器部分，改进了简单的csv文件转换为字典的方法，此外在Csv_Match部分，加入了匹配判断多个列对应的元素条件的方法\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "5"}