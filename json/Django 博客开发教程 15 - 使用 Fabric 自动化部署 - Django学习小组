{"title": "Django 博客开发教程 15 - 使用 Fabric 自动化部署 - Django学习小组 ", "index": "python,django,web,后端,开发", "content": "在 使用 Nginx 和 Gunicorn 部署 Django 博客 中，我们通过手工方式将代码部署到了服务器。整个过程涉及到十几条命令，输了 N 个字符。一旦我们本地的代码有更新，整个过程又得重复来一遍，这将变得非常繁琐。\n使用 Fabric 可以在服务器中自动执行命令。因为整个代码部署过程都是相同的，只要我们用 Fabric 写好部署脚本，以后就可以通过运行脚本自动完成部署了。\n安装 Fabric\nFabric 目前仅支持 Python2，如果你的系统中只有 Python3 版本，请先安装一个 Python2 的版本，推荐安装 Python 2.7。Python3 和 Python2 可以共存于一个系统，所以不用担心同时安装两个版本的 Python 会发生冲突。\n接下就可以简单地通过 pip 命令安装 Fabric 了。注意要使用 Python2 环境下的 pip，这样才能把 Fabric 安装到 Python2 环境下。\npip install fabric\n部署过程回顾\n在写 Fabric 脚本之前，我们先来回顾一下当我们在本地开发环境下更新了代码后，在服务器上的整个部署过程。\n\n远程连接服务器。\n进入项目根目录，从远程仓库拉取最新的代码。\n如果项目引入了新的依赖，需要执行 pip install -r requirement.txt 安装最新依赖。\n如果修改或新增了项目静态文件，需要执行 python manage.py collectstatic 收集静态文件。\n如果数据库发生了变化，需要执行 python manage.py migrate 迁移数据库。\n重启 Nginx 和 Gunicorn 使改动生效。\n\n整个过程就是这样，把每一步操作翻译成 Fabric 对应的脚本代码，这样一个自动化部署脚本就完成了。\n编写 Fabric 脚本\nFabric 脚本通常位于 fabfile.py 文件里，因此先在项目根目录下建一个 fabfile.py 文件。\n根据上述过程编写的脚本代码如下：\nblogproject/fabfile.py\n\nfrom fabric.api import env, run\nfrom fabric.operations import sudo\n\nGIT_REPO = \"you git repository\" ① \n\nenv.user = 'you host username' ②\nenv.password = 'you host password'\n\n# 填写你自己的主机对应的域名\nenv.hosts = ['demo.zmrenwu.com']\n\n# 一般情况下为 22 端口，如果非 22 端口请查看你的主机服务提供商提供的信息\nenv.port = '22'\n\n\ndef deploy():\n    source_folder = '/home/yangxg/sites/zmrenwu.com/django-blog-tutorial' ③\n\n    run('cd %s && git pull' % source_folder) ④\n    run(\"\"\"\n        cd {} &&\n        ../env/bin/pip install -r requirements.txt &&\n        ../env/bin/python3 manage.py collectstatic --noinput &&\n        ../env/bin/python3 manage.py migrate\n        \"\"\".format(source_folder)) ⑤ \n    sudo('restart gunicorn-demo.zmrenwu.com') ⑥\n    sudo('service nginx reload')\n① 你的代码托管仓库地址。\n② 配置一些服务器的地址信息和账户信息，各参数的含义分别为：\n\nenv.user：用于登录服务器的用户名\nenv.password：用户名对应的密码\nenv.hosts：服务器的 IP 地址，也可以是解析到这个 IP 的域名\nenv.port：SSH 远程服务器的端口号\n\n③ 需要部署的项目根目录在服务器上的位置。\n④ 通过 run 方法在服务器上执行命令，传入的参数为需要执行的命令，用字符串包裹。这里执行了两条命令，不同命令间用 && 符号连接：\n\ncd 命令进入到需要部署的项目根目录\ngit pull 拉取远程仓库的最新代码\n\n⑤ 对应上述部署过程中 3-5 的几条命令。因为启用了虚拟环境，所以运行的是虚拟环境 ../env/bin/ 下的 pip 和 python\n⑥ 重启 Gunicorn 和 Nginx，由于这两条命令要在超级权限下运行，所以使用了 sudo 方法而不是  run 方法。\n注意全部的脚本代码要放在 deploy 函数里，Fabric 会自动检测 fabfile.py 脚本中的 deploy 函数并运行。\n由于脚本中有登录服务器的用户名和密码等敏感信息，不要把 fabfile.py 文件也上传到公开的代码托管仓库。\n执行 Fabric 自动部署脚本\n进入 fabfile.py 文件所在的目录，在 Python2 的环境下用 fab 命令运行这个脚本文件。\n比如我的是 Windows 环境，Python2 安装在 C:Python27 下，那么运行：\nC:\\Python27\\Scripts\\fab deploy\n这时 Fabric 会自动检测到 fabfile.py 脚本中的 deploy 函数并运行，你会看到命令行输出了一系列字符串，如果在最后看到\nDone.Disconnecting from zmrenwu.com... done.\n说明脚本运行成功。\n而如果看到\nAborting.Disconnecting from zmrenwu.com... done.\n说明脚本运行中出错，检查一下命令行输入的错误信息，修复问题后重新运行脚本即可。以后当你在本地开发完相关功能后，只需要执行这一个脚本文件，就可以自动把最新代码部署到服务器了。\n总结\n本章节的代码位于：Step15: deploy automatically using fabric。\n如果遇到问题，请通过下面的方式寻求帮助。\n\n在 使用 Fabric 自动化部署 的评论区留言。\n将问题的详细描述通过邮件发送到 djangostudyteam@163.com，一般会在 24 小时内回复。\n\n更多Django 教程，请访问 追梦人物的博客。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "1"}