{"title": "微信网页版登录原理暨查看将自己删除掉的人项目 - Cesar学习笔记 ", "index": "python,学习,网页爬虫,java", "content": "\n项目作用\n访问项目的网页，扫一扫网页上的二维码，就会显示你的微信好友中将你删除的人的列表。\n\n在线网址：\n访问115.29.55.54:8080/WXApi就可以使用该项目所说的网页\n\n项目原理\n在微信中，将你删掉的好友是无法加入你创建的群聊的，而微信网页版也可以创建群聊，所以使用微信网页版的接口可以实现分辨一个好友是不是将你删除了。\n\n流程和Java实现\n1. 获取UUID\n微信在生成二维码之前，会先生成一个UUID，作为一个识别的标记，携带这个UUID访问微信的接口就可以获取到二维码。同时也是查看二维码是否被扫描的一个重要参数。参数列表如下:\n\nappid (可写死，wx782c26e4c19acffb)\nfun : new\nlang : zh-CN (中国地区)\n_ : 时间戳\n\n// 参考代码：\n// Java版本\npublic String getUUID(){\n        String url = \"https://login.weixin.qq.com/jslogin?appid=%s&fun=new&lang=zh-CN&_=%s\";\n        url = String.format(url, appID,System.currentTimeMillis());\n        httpGet = new HttpGet(url);\n        try {\n            response = httpClient.execute(httpGet);\n            entity = response.getEntity();\n            String result = EntityUtils.toString(entity);\n            logger.debug(result);\n            String[] res = result.split(\";\");\n            if (res[0].replace(\"window.QRLogin.code = \", \"\").equals(\"200\")) {\n                uuid = res[1].replace(\" window.QRLogin.uuid = \", \"\").replace(\"\\\"\", \"\");\n                return uuid;\n            }\n        } catch (ClientProtocolException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n# python版本\ndef getuuid():\n    global uuid\n    url = 'https://login.weixin.qq.com/jslogin'\n    params = {\n        'appid': 'wx782c26e4c19acffb',\n        'fun': 'new',\n        'lang': 'zh_CN',\n        '_': int(time.time()),\n    }\n    request = urllib2.Request(url=url, data=urllib.urlencode(params))\n    response = urllib2.urlopen(request)\n    data = response.read()\n\n    regx = r'window.QRLogin.code = (\\d+); window.QRLogin.uuid = \"(\\S+?)\"'\n    pm = re.search(regx, data)\n\n    code = pm.group(1)\n    uuid = pm.group(2)\n\n    if code == '200':\n        return True\n\n    return False\n2. 获取二维码\n将uuid放在url中然后使用get请求，会收到一个一张二维码的图片.当然，如果在网页中使用<img>的标签可以直接将这个URL放进去，就可以直接显示一张二维码。参数列表如下：\nuuid：也就是上面所获取的UUID\n//java版本\n// 如果忽略注释直接返回获取图片的url放在网页中的<img>的标签下可以直接显示，如果使用注释中的内容会将其下载为本地图片\npublic String getQR(String uuid) {\n        if (uuid == null || \"\".equals(uuid)) {\n            return null;\n        }\n        String QRurl = \"http://login.weixin.qq.com/qrcode/\" + uuid;\n        logger.debug(QRurl);\n        return QRurl;\n        // 同时提供使其变为本地图片的方法\n        // httpGet = new HttpGet(QRurl);\n        // response = httpClient.execute(httpGet);\n        // entity = response.getEntity();\n        // InputStream in = entity.getContent();\n        // //注意这里要对filepath赋值\n        // OutputStream out = new FileOutputStream(new File(\"FilePath\"+\".png\"));\n        // byte[] b = new byte[1024];\n        // int t;\n        // while((t=in.read())!=-1){\n        // out.write(b, 0, t);\n        // }\n        // out.flush();\n        // in.close();\n        // out.close();\n    }\n# Python版本\ndef showQRImage():\n    global tip\n    url = 'https://login.weixin.qq.com/qrcode/' + uuid\n    request = urllib2.Request(url=url)\n    response = urllib2.urlopen(request)\n    f = open(QRImagePath, 'wb')\n    f.write(response.read())\n    f.close()  # 保存到本地\n3. 获取用户登录状态\n登陆状态主要是两种，一种是用户已经扫描，一种是用户扫描后在手机端已经点击确认了。这两种状态的获取访问的url是一样的，区别是一个叫做tip的参数，当tip=1的时候，如果没有扫描，服务端会一直等待，如果已经扫描，服务端会返回代买201.当tip=0的时候，如果用户没有点击确定，那么就会一直等待，直到用户点击确定后返回200.所以问题来了，如果不改变tip让他一直为1也是可以的，但是就需要不断的轮询，而如果改变tip的话，就可以while的循环。参数如下：\n\nuuid : 就是之前获得的uuid\n_ : 时间戳\ntip ： 判断是要获得点击状态还是扫描状态\n状态=200时，返回值是redirect_url:该返回值是一个url，访问该url就算是正式的登陆。\n\n//java版本\npublic int waitForLogin(String uuid, int tip) {\n        String urlString = \"http://login.weixin.qq.com/cgi-bin/mmwebwx-bin/login?tip=%s&uuid=%s&_=%s\";\n        urlString = String.format(urlString, tip, uuid, System.currentTimeMillis());\n        httpGet = new HttpGet(urlString);\n        try {\n            response = httpClient.execute(httpGet);\n            String re = EntityUtils.toString(response.getEntity());\n            String[] result = re.split(\";\");\n            logger.debug(re);\n            if (result[0].replace(\"window.code=\", \"\").equals(\"201\")) {\n                tip = 0;\n                return 201;\n            } else if (result[0].replace(\"window.code=\", \"\").equals(\"200\")) {\n                redirectUri = (result[1].replace(\"window.redirect_uri=\", \"\").replace(\"\\\"\", \"\") + \"&fun=new\").trim();\n                return 200;\n            } else {\n                return 400;\n            }\n        } catch (ClientProtocolException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return -1;\n    }\n# python版本\ndef waitForLogin():\n    global tip, base_uri, redirect_uri\n    url = 'https://login.weixin.qq.com/cgi-bin/mmwebwx-bin/login?tip=%s&uuid=%s&_=%s' % (tip, uuid, int(time.time()))\n    request = urllib2.Request(url = url)\n    response = urllib2.urlopen(request)\n    data = response.read()\n    regx = r'window.code=(\\d+);'\n    pm = re.search(regx, data)\n    code = pm.group(1)\n    if code == '201': #已扫描\n        print '成功扫描,请在手机上点击确认以登录'\n        tip = 0\n    elif code == '200': #已登录\n        regx = r'window.redirect_uri=\"(\\S+?)\";'\n        pm = re.search(regx, data)\n        redirect_uri = pm.group(1) + '&fun=new'\n        base_uri = redirect_uri[:redirect_uri.rfind('/')]\n    elif code == '408': #超时\n        pass\n    return code\n4. 正式登陆\n手机端已经授权通过，上一步会返回一个Redirect_Url，这是一个真正的登陆url，使用get方法访问该url会返回一个xml格式的字符串，其中的属性将是接下来动作的重要参数。解析该字符串有如下的属性：\n\nint ret;//返回值为0时表示本次请求成功\nString message;//一些信息（比如失败原因等）\nString skey;//后面请求会用到的参数\nString wxsid;//同上\nlong wxuin;// 本人编码\nString pass_ticket;//重要！！后面很多请求都会用到这张通行证\nint isgrayscale;//不明\n\n代码如下：\n//java\nprivate boolean login() {\n        String url = redirectUri;\n        httpGet = new HttpGet(url);\n        try {\n            response = httpClient.execute(httpGet);\n            entity = response.getEntity();\n            String data = EntityUtils.toString(entity);\n            logger.debug(data);\n            loginResponse = CommonUtil.parseLoginResult(data);\n            baseRequest = new BaseRequest(loginResponse.getWxuin(), loginResponse.getWxsid(), loginResponse.getSkey(),\n                    loginResponse.getDeviceID());\n            return true;\n        } catch (ClientProtocolException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return false;\n    }\n#python版本\ndef login():\n    global skey, wxsid, wxuin, pass_ticket, BaseRequest\n    request = urllib2.Request(url = redirect_uri)\n    response = urllib2.urlopen(request)\n    data = response.read()\n    doc = xml.dom.minidom.parseString(data)\n    root = doc.documentElement\n    for node in root.childNodes:\n        if node.nodeName == 'skey':\n            skey = node.childNodes[0].data\n        elif node.nodeName == 'wxsid':\n            wxsid = node.childNodes[0].data\n        elif node.nodeName == 'wxuin':\n            wxuin = node.childNodes[0].data\n        elif node.nodeName == 'pass_ticket':\n            pass_ticket = node.childNodes[0].data\n    if skey == '' or wxsid == '' or wxuin == '' or pass_ticket == '':\n        return False\n    BaseRequest = {\n        'Uin': int(wxuin),\n        'Sid': wxsid,\n        'Skey': skey,\n        'DeviceID': deviceId,\n    }\n    return True\n5. init初始化\n该方法可有可无，作用主要是初始化几个联系人，可能是最近联系人还是怎样，并且能获得的是登陆人的信息。如果不需要获取这些东西就可以跳过这一步。该方法是post方法，但在url中也可以放几个值主要参数：url中:\n\npass_ticket\nskey  这两个参数都是login时的返回值之一\nr 时间戳\n\npost 文中携带：BaseRequst=Json格式的BaseRequest，BaseRequest类中有如下参数：、\n\nlong Uin;\nString Sid;\nString Skey;\nString DeviceID; DeviceID是一串e开头的随机数，随便填就可以。\n\n//java\nprivate void initWX() {\n\n        String url = String.format(\"http://wx.qq.com/cgi-bin/mmwebwx-bin/webwxinit?pass_ticket=%s&skey=%s&r=%s\",\n                loginResponse.getPass_ticket(), loginResponse.getSkey(), System.currentTimeMillis());\n        InitRequestJson initRequestJson = new InitRequestJson(baseRequest);//Java中包含了BaseRequest的包装类\n        String re = getResponse(url, gson.toJson(initRequestJson));//这是自己写的一个公有方法，可以直接看源码\n        InitResponseJson initResponseJson = gson.fromJson(re, InitResponseJson.class);\n        mine = initResponseJson.getUser();// 获取当前用户信息\n    }\ndef webwxinit():\n    url = base_uri + '/webwxinit?pass_ticket=%s&skey=%s&r=%s' % (pass_ticket, skey, int(time.time()))\n    params = {\n        'BaseRequest': json.dumps(BaseRequest)\n    }\n    request = urllib2.Request(url=url, data=json.dumps(params))\n    request.add_header('ContentType', 'application/json; charset=UTF-8')\n    response = urllib2.urlopen(request)\n    data = response.read()\n    global ContactList, My\n    dic = json.loads(data)\n    ContactList = dic['ContactList']\n    My = dic['User']\n\n    ErrMsg = dic['BaseResponse']['ErrMsg']\n    if len(ErrMsg) > 0:\n        print ErrMsg\n\n    Ret = dic['BaseResponse']['Ret']\n    if Ret != 0:\n        return False\n    return True\n\n6. 后面部分\n由于登陆成功后后面部分基本就是调用接口了，难点基本没有，可以直接看源码，我在这里贴上操作步骤\n\n获取所有的用户通过post方法访问一个url(源码中可以看)，就可以获取所有的用户列表。\n创建聊天室注意一次最多40人否则会出现问题\n删除聊天室的成员\n为聊天室添加成员微信会返回该成员的一个状态，如果状态等于4，那么添加失败，就可以判断该用户已经删除了登陆用户。\n\n\n封装为网页\n\n得到uuid，并将其包装直接插入<img>标签中就可以在网页中显示该二维码\n使用AJAX请求，请求waitforlogging()方法，当返回值为200时成功，此时遍历该用户每一个好友，判断其是否删除了该用户。\n显示\n\n\n参考文档\n\n该功能的python实现\n网页微信登录原理\n\n\n项目源码\n项目源码\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "8"}