{"title": "P2P平台数据爬取分析 - 个人文章 ", "index": "p2p金融,数据分析,网页爬虫,python", "content": "关于数据来源\n本项目写于2017年七月初，主要使用Python爬取网贷之家以及人人贷的数据进行分析。网贷之家是国内最大的P2P数据平台，人人贷国内排名前二十的P2P平台。源码地址\n数据爬取\n抓包分析\n抓包工具主要使用chrome的开发者工具 网络一栏，网贷之家的数据全部是ajax返回json数据，而人人贷既有ajax返回数据也有html页面直接生成数据。\n请求实例\n从数据中可以看到请求数据的方式（GET或者POST），请求头以及请求参数。从请求数据中可以看到返回数据的格式（此例中为json）、数据结构以及具体数据。注：这是现在网贷之家的API请求后台的接口，爬虫编写的时候与数据接口与如今的请求接口不一样，所以网贷之家的数据爬虫部分已无效。\n构造请求\n根据抓包分析得到的结果，构造请求。在本项目中，使用Python的 requests库模拟http请求具体代码：\nimport requests\nclass SessionUtil():\n    def __init__(self,headers=None,cookie=None):\n        self.session=requests.Session()\n        if headers is None:\n            headersStr={\"Accept\":\"application/json, text/javascript, */*; q=0.01\",\n                \"X-Requested-With\":\"XMLHttpRequest\",\n                \"User-Agent\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\",\n                \"Accept-Encoding\":\"gzip, deflate, sdch, br\",\n                \"Accept-Language\":\"zh-CN,zh;q=0.8\"\n                }\n            self.headers=headersStr\n        else:\n            self.headers=headers\n        self.cookie=cookie\n    //发送get请求\n    def getReq(self,url):\n        return self.session.get(url,headers=self.headers).text\n    def addCookie(self,cookie):\n        self.headers['cookie']=cookie\n    //发送post请求\n    def postReq(self,url,param):\n        return self.session.post(url, param).text\n在设置请求头的时候，关键字段只设置了\"User-Agent\"，网贷之家和人人贷的没有反爬措施，甚至不用设置\"Referer\"字段来防止跨域错误。\n爬虫实例\n以下是一个爬虫实例\nimport json\nimport time\nfrom databaseUtil import DatabaseUtil\nfrom sessionUtil import SessionUtil\nfrom dictUtil import DictUtil\nfrom logUtil import LogUtil\nimport traceback\ndef handleData(returnStr):\n    jsonData=json.loads(returnStr)\n    platData=jsonData.get('data').get('platOuterVo')\n    return platData\ndef storeData(jsonOne,conn,cur,platId):\n    actualCapital=jsonOne.get('actualCapital')\n    aliasName=jsonOne.get('aliasName')\n    association=jsonOne.get('association')\n    associationDetail=jsonOne.get('associationDetail')\n    autoBid=jsonOne.get('autoBid')\n    autoBidCode=jsonOne.get('autoBidCode')\n    bankCapital=jsonOne.get('bankCapital')\n    bankFunds=jsonOne.get('bankFunds')\n    bidSecurity=jsonOne.get('bidSecurity')\n    bindingFlag=jsonOne.get('bindingFlag')\n    businessType=jsonOne.get('businessType')\n    companyName=jsonOne.get('companyName')\n    credit=jsonOne.get('credit')\n    creditLevel=jsonOne.get('creditLevel')\n    delayScore=jsonOne.get('delayScore')\n    delayScoreDetail=jsonOne.get('delayScoreDetail')\n    displayFlg=jsonOne.get('displayFlg')\n    drawScore=jsonOne.get('drawScore')\n    drawScoreDetail=jsonOne.get('drawScoreDetail')\n    equityVoList=jsonOne.get('equityVoList')\n    experienceScore=jsonOne.get('experienceScore')\n    experienceScoreDetail=jsonOne.get('experienceScoreDetail')\n    fundCapital=jsonOne.get('fundCapital')\n    gjlhhFlag=jsonOne.get('gjlhhFlag')\n    gjlhhTime=jsonOne.get('gjlhhTime')\n    gruarantee=jsonOne.get('gruarantee')\n    inspection=jsonOne.get('inspection')\n    juridicalPerson=jsonOne.get('juridicalPerson')\n    locationArea=jsonOne.get('locationArea')\n    locationAreaName=jsonOne.get('locationAreaName')\n    locationCity=jsonOne.get('locationCity')\n    locationCityName=jsonOne.get('locationCityName')\n    manageExpense=jsonOne.get('manageExpense')\n    manageExpenseDetail=jsonOne.get('manageExpenseDetail')\n    newTrustCreditor=jsonOne.get('newTrustCreditor')\n    newTrustCreditorCode=jsonOne.get('newTrustCreditorCode')\n    officeAddress=jsonOne.get('officeAddress')\n    onlineDate=jsonOne.get('onlineDate')\n    payment=jsonOne.get('payment')\n    paymode=jsonOne.get('paymode')\n    platBackground=jsonOne.get('platBackground')\n    platBackgroundDetail=jsonOne.get('platBackgroundDetail')\n    platBackgroundDetailExpand=jsonOne.get('platBackgroundDetailExpand')\n    platBackgroundExpand=jsonOne.get('platBackgroundExpand')\n    platEarnings=jsonOne.get('platEarnings')\n    platEarningsCode=jsonOne.get('platEarningsCode')\n    platName=jsonOne.get('platName')\n    platStatus=jsonOne.get('platStatus')\n    platUrl=jsonOne.get('platUrl')\n    problem=jsonOne.get('problem')\n    problemTime=jsonOne.get('problemTime')\n    recordId=jsonOne.get('recordId')\n    recordLicId=jsonOne.get('recordLicId')\n    registeredCapital=jsonOne.get('registeredCapital')\n    riskCapital=jsonOne.get('riskCapital')\n    riskFunds=jsonOne.get('riskFunds')\n    riskReserve=jsonOne.get('riskReserve')\n    riskcontrol=jsonOne.get('riskcontrol')\n    securityModel=jsonOne.get('securityModel')\n    securityModelCode=jsonOne.get('securityModelCode')\n    securityModelOther=jsonOne.get('securityModelOther')\n    serviceScore=jsonOne.get('serviceScore')\n    serviceScoreDetail=jsonOne.get('serviceScoreDetail')\n    startInvestmentAmout=jsonOne.get('startInvestmentAmout')\n    term=jsonOne.get('term')\n    termCodes=jsonOne.get('termCodes')\n    termWeight=jsonOne.get('termWeight')\n    transferExpense=jsonOne.get('transferExpense')\n    transferExpenseDetail=jsonOne.get('transferExpenseDetail')\n    trustCapital=jsonOne.get('trustCapital')\n    trustCreditor=jsonOne.get('trustCreditor')\n    trustCreditorMonth=jsonOne.get('trustCreditorMonth')\n    trustFunds=jsonOne.get('trustFunds')\n    tzjPj=jsonOne.get('tzjPj')\n    vipExpense=jsonOne.get('vipExpense')\n    withTzj=jsonOne.get('withTzj')\n    withdrawExpense=jsonOne.get('withdrawExpense')\n    sql='insert into problemPlatDetail (actualCapital,aliasName,association,associationDetail,autoBid,autoBidCode,bankCapital,bankFunds,bidSecurity,bindingFlag,businessType,companyName,credit,creditLevel,delayScore,delayScoreDetail,displayFlg,drawScore,drawScoreDetail,equityVoList,experienceScore,experienceScoreDetail,fundCapital,gjlhhFlag,gjlhhTime,gruarantee,inspection,juridicalPerson,locationArea,locationAreaName,locationCity,locationCityName,manageExpense,manageExpenseDetail,newTrustCreditor,newTrustCreditorCode,officeAddress,onlineDate,payment,paymode,platBackground,platBackgroundDetail,platBackgroundDetailExpand,platBackgroundExpand,platEarnings,platEarningsCode,platName,platStatus,platUrl,problem,problemTime,recordId,recordLicId,registeredCapital,riskCapital,riskFunds,riskReserve,riskcontrol,securityModel,securityModelCode,securityModelOther,serviceScore,serviceScoreDetail,startInvestmentAmout,term,termCodes,termWeight,transferExpense,transferExpenseDetail,trustCapital,trustCreditor,trustCreditorMonth,trustFunds,tzjPj,vipExpense,withTzj,withdrawExpense,platId) values (\"'+actualCapital+'\",\"'+aliasName+'\",\"'+association+'\",\"'+associationDetail+'\",\"'+autoBid+'\",\"'+autoBidCode+'\",\"'+bankCapital+'\",\"'+bankFunds+'\",\"'+bidSecurity+'\",\"'+bindingFlag+'\",\"'+businessType+'\",\"'+companyName+'\",\"'+credit+'\",\"'+creditLevel+'\",\"'+delayScore+'\",\"'+delayScoreDetail+'\",\"'+displayFlg+'\",\"'+drawScore+'\",\"'+drawScoreDetail+'\",\"'+equityVoList+'\",\"'+experienceScore+'\",\"'+experienceScoreDetail+'\",\"'+fundCapital+'\",\"'+gjlhhFlag+'\",\"'+gjlhhTime+'\",\"'+gruarantee+'\",\"'+inspection+'\",\"'+juridicalPerson+'\",\"'+locationArea+'\",\"'+locationAreaName+'\",\"'+locationCity+'\",\"'+locationCityName+'\",\"'+manageExpense+'\",\"'+manageExpenseDetail+'\",\"'+newTrustCreditor+'\",\"'+newTrustCreditorCode+'\",\"'+officeAddress+'\",\"'+onlineDate+'\",\"'+payment+'\",\"'+paymode+'\",\"'+platBackground+'\",\"'+platBackgroundDetail+'\",\"'+platBackgroundDetailExpand+'\",\"'+platBackgroundExpand+'\",\"'+platEarnings+'\",\"'+platEarningsCode+'\",\"'+platName+'\",\"'+platStatus+'\",\"'+platUrl+'\",\"'+problem+'\",\"'+problemTime+'\",\"'+recordId+'\",\"'+recordLicId+'\",\"'+registeredCapital+'\",\"'+riskCapital+'\",\"'+riskFunds+'\",\"'+riskReserve+'\",\"'+riskcontrol+'\",\"'+securityModel+'\",\"'+securityModelCode+'\",\"'+securityModelOther+'\",\"'+serviceScore+'\",\"'+serviceScoreDetail+'\",\"'+startInvestmentAmout+'\",\"'+term+'\",\"'+termCodes+'\",\"'+termWeight+'\",\"'+transferExpense+'\",\"'+transferExpenseDetail+'\",\"'+trustCapital+'\",\"'+trustCreditor+'\",\"'+trustCreditorMonth+'\",\"'+trustFunds+'\",\"'+tzjPj+'\",\"'+vipExpense+'\",\"'+withTzj+'\",\"'+withdrawExpense+'\",\"'+platId+'\")'\n    cur.execute(sql)\n    conn.commit()\n\nconn,cur=DatabaseUtil().getConn()\nsession=SessionUtil()\nlogUtil=LogUtil(\"problemPlatDetail.log\")\ncur.execute('select platId from problemPlat')\ndata=cur.fetchall()\nprint(data)\nmylist=list()\nprint(data)\nfor i in range(0,len(data)):\n    platId=str(data[i].get('platId'))\n    \n    mylist.append(platId)\n\nprint mylist  \nfor i in mylist:\n    url=''+i\n    try:\n        data=session.getReq(url)\n        platData=handleData(data)\n        dictObject=DictUtil(platData)\n        storeData(dictObject,conn,cur,i)\n    except Exception,e:\n        traceback.print_exc()\ncur.close()\nconn.close\n整个过程中 我们 构造请求，然后把解析每个请求的响应，其中json返回值使用json库进行解析，html页面使用BeautifulSoup库进行解析（结构复杂的html的页面推荐使用lxml库进行解析），解析到的结果存储到mysql数据库中。\n爬虫代码\n爬虫代码地址(注：爬虫使用代码Python2与python3都可运行，本人把爬虫代码部署在阿里云服务器上，使用Python2 运行）\n数据分析\n数据分析主要使用Python的numpy、pandas、matplotlib进行数据分析，同时辅以海致BDP。\n时间序列分析\n数据读取\n一般采取把数据读取pandas的DataFrame中进行分析。以下就是读取问题平台的数据的例子\nproblemPlat=pd.read_csv('problemPlat.csv',parse_dates=True)#问题平台 \n数据结构\n时间序列分析\neg 问题平台数量随时间变化\nproblemPlat['id']['2012':'2017'].resample('M',how='count').plot(title='P2P发生问题')#发生问题P2P平台数量 随时间变化趋势\n图形化展示\n地域分析\n使用海致BDP完成（Python绘制地图分布轮子比较复杂，当时还未学习）\n各省问题平台数量\n\n各省平台成交额\n\n规模分布分析\neg 全国六月平台成交额分布代码\njuneData['amount'].hist(normed=True)\njuneData['amount'].plot(kind='kde',style='k--')#六月份交易量概率分布\n核密度图形展示成交额取对数核密度分布\nnp.log10(juneData['amount']).hist(normed=True)\nnp.log10(juneData['amount']).plot(kind='kde',style='k--')#取 10 对数的 概率分布\n图形化展示可看出取10的对数后分布更符合正常的金字塔形。\n相关性分析\neg.陆金所交易额与所有平台交易额的相关系数变化趋势\nlujinData=platVolume[platVolume['wdzjPlatId']==59]\ncorr=pd.rolling_corr(lujinData['amount'],allPlatDayData['amount'],50,min_periods=50).plot(title='陆金所交易额与所有平台交易额的相关系数变化趋势')\n图形化展示\n分类比较\n车贷平台与全平台成交额数据对比\ncarFinanceDayData=carFinanceData.resample('D').sum()['amount']\nfig,axes=plt.subplots(nrows=1,ncols=2,sharey=True,figsize=(14,7))\ncarFinanceDayData.plot(ax=axes[0],title='车贷平台交易额')\nallPlatDayData['amount'].plot(ax=axes[1],title='所有p2p平台交易额')\n\n趋势预测\neg预测陆金所成交量趋势（使用Facebook Prophet库完成）\nlujinAmount=platVolume[platVolume['wdzjPlatId']==59]\nlujinAmount['y']=lujinAmount['amount']\nlujinAmount['ds']=lujinAmount['date']\nm=Prophet(yearly_seasonality=True)\nm.fit(lujinAmount)\nfuture=m.make_future_dataframe(periods=365)\nforecast=m.predict(future)\nm.plot(forecast)\n趋势预测图形化展示\n数据分析代码\n数据分析代码地址(注：数据分析代码智能运行在Python3 环境下）代码运行后样例(无需安装Python环境 也可查看具体代码解图形化展示)\n后记\n这是本人从 Java web转向数据方向后自己写的第一项目，也是自己的第一个Python项目，在整个过程中，也没遇到多少坑，整体来说，爬虫和数据分析以及Python这门语言门槛都是非常低的。如果想入门Python爬虫，推荐《Python网络数据采集》如果想入门Python数据分析，推荐 《利用Python进行数据分析》\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "3"}