{"title": "python学习笔记 函数 - 个人文章 ", "index": "python,python3.x", "content": "一等函数\n在python中，函数是一等对象。编程语言理论家把“一等对象”定义为满足以下条件的程序实体：\n\n在运行时创建\n能赋值给变量或数据结构中的元素\n能作为参数传给函数\n能作为函数的返回结果\n\n在python中，整数、字符串和字典都是一等对象，没有什么特别之处。\n标题“一等函数”是“把函数视作一等对象”的简称，虽然并不完美，但只是一种称谓。\n>>> def factorial(n):\n...     '''returns n'''\n...     return 1 if n < 2 else n * factorial(n - 1)\n...\n>>> factorial(42)\n1405006117752879898543142606244511569936384000000000\n>>> type(factorial)\n<class 'function'>\n>>> fact = factorial\n>>> fact\n<function factorial at 0x00000228D7391EA0>\n>>> fact(5)\n120\n>>> map(factorial, range(11))\n<map object at 0x00000228D92236D8>\n>>> list(map(factorial, range(11)))\n[1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800]\n>>>\n\n程序中定义了一个阶乘函数 factorial, 其本身是一个递归函数，可以理解为函数可以作为函数的返回值（的一部分），可以做正常运算，也可以复制给另一个变量fact，也可以作为高等函数map 的一个参数。\n高等函数\n接受函数作为参数，或者把函数作为结果返回的函数是高等函数\npython中常用的高等函数包括map, filter, sorted, reduce等等\n>>> fruits = ['strawberry', 'apple', 'banana', 'peach', 'fig', 'cherry']\n>>> sorted(fruits)\n['apple', 'banana', 'cherry', 'fig', 'peach', 'strawberry']\n>>> def reverse(word):\n...     return word[::-1]\n...\n>>> reverse('testing')\n'gnitset'\n>>> sorted(fruits, key=reverse)\n['banana', 'apple', 'fig', 'peach', 'strawberry', 'cherry']\n\nsorted 是一个高级函数，其可以接受函数 reverse 作为参数\n>>> from functools import reduce\n>>> from operator import add\n>>> reduce(add, range(100))\n4950\n>>> sum(range(100))\n4950\n\n从python3.0 起，reduce不再是内置函数，其作用被减弱，可轻易被替代。上例是计算0~99 的和。sum 和 reduce 的通用思想是把某个操作连续运用到序列的元素上，累积计算，把一系列值规约成一个值。\n匿名函数\nlambda关键字在python表达式内创建匿名函数\n然而，python简单的句法限制了 lambda 函数的定义体只能使用纯表达式，即lambda 函数的定义体中不能赋值，不能使用while、try等python语句。\n匿名函数适合用于作为函数的参数\n>>> fruits\n['strawberry', 'apple', 'banana', 'peach', 'fig', 'cherry']\n>>> sorted(fruits, key=lambda word: word[::-1])\n['banana', 'apple', 'fig', 'peach', 'strawberry', 'cherry']\n\n\n\n\n\n\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}