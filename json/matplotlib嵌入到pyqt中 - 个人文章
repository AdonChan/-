{"title": "matplotlib嵌入到pyqt中 - 个人文章 ", "index": "pyqt,python", "content": "在pyqt5中使用matplotlib\n前言\n虽然，qt中也提供了绘图函数，但对于初学者并不是很容易掌握，众所周知，matplot提供了简单，易用，强大的绘图函数，结合mumpy基本可以达到matlb中的绘图体验，并且比matlab更加具有扩展性，也更自由。通过matplotlib提供的官方例程的修改，就可以很容易的绘制你想要的图形，真的很强大。（我也是名初学者）\nmatplotlib，pyqt5官方例程\n# 取自matplotlib 官方文档案例\n\nfrom __future__ import unicode_literals\nimport sys\nimport os\nimport random\nimport matplotlib\n# Make sure that we are using QT5\nmatplotlib.use('Qt5Agg')\n\nfrom PyQt5 import QtCore, QtWidgets\nfrom numpy import arange, sin, pi, linspace\nfrom matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas\nfrom matplotlib.figure import Figure\n\nprogname = os.path.basename(sys.argv[0])\nprogversion = \"0.1\"\n\n\nclass MyMplCanvas(FigureCanvas):\n    # 这既是一个wiget类也是一个FigureCanva\n\n    def __init__(self, parent=None, width=5, height=4, dpi=100):\n        self.fig = Figure(figsize=(width, height), dpi=dpi)\n        self.axes = self.fig.add_subplot(111)\n\n        self.compute_initial_figure()\n\n        FigureCanvas.__init__(self, self.fig)\n        self.setParent(parent)\n\n        FigureCanvas.setSizePolicy(self,\n                                   QtWidgets.QSizePolicy.Expanding,\n                                   QtWidgets.QSizePolicy.Expanding)\n        FigureCanvas.updateGeometry(self)\n\n    def compute_initial_figure(self):\n        pass\n\n\nclass MyStaticMplCanvas(MyMplCanvas):\n    \"\"\"Simple canvas with a sine plot.\"\"\"\n\n    def __init__(self, *args, **kwargs):\n        MyMplCanvas.__init__(self, *args, **kwargs)\n        \n\n    def compute_initial_figure(self):\n        print(\"hello world\")\n        x = linspace(0, 2 * pi, 500000)\n        y = sin(x)\n        self.axes.cla()\n        self.axes.plot(x, y)\n        self.draw()\n\n\nclass MyDynamicMplCanvas(MyMplCanvas):\n    \"\"\"A canvas that updates itself every second with a new plot.\"\"\"\n\n    def __init__(self, *args, **kwargs):\n        MyMplCanvas.__init__(self, *args, **kwargs)\n        timer = QtCore.QTimer(self)\n        \n        timer.timeout.connect(self.update_figure)\n        timer.start(1000)\n\n    def compute_initial_figure(self):\n        self.axes.plot([0, 1, 2, 3], [1, 2, 0, 4], 'r')\n\n    def update_figure(self):\n        # Build a list of 4 random integers between 0 and 10 (both inclusive)\n        l = [random.randint(0, 10) for i in range(4)]\n        self.axes.cla()\n        self.axes.plot([0, 1, 2, 3], l, 'r')\n        self.draw()\n\n\nclass ApplicationWindow(QtWidgets.QMainWindow):\n    def __init__(self):\n        QtWidgets.QMainWindow.__init__(self)\n        self.setAttribute(QtCore.Qt.WA_DeleteOnClose)\n        self.setWindowTitle(\"application main window\")\n\n        self.file_menu = QtWidgets.QMenu('&File', self)\n        self.file_menu.addAction('&Quit', self.fileQuit,\n                                 QtCore.Qt.CTRL + QtCore.Qt.Key_Q)\n        self.menuBar().addMenu(self.file_menu)\n\n        self.help_menu = QtWidgets.QMenu('&Help', self)\n        self.menuBar().addSeparator()\n        self.menuBar().addMenu(self.help_menu)\n\n        self.help_menu.addAction('&About', self.about)\n\n        self.main_widget = QtWidgets.QWidget(self)\n\n        l = QtWidgets.QVBoxLayout(self.main_widget)\n        sc = MyStaticMplCanvas(self.main_widget, width=5, height=4, dpi=100)\n        dc = MyDynamicMplCanvas(self.main_widget, width=5, height=4, dpi=100)\n        l.addWidget(sc)\n        l.addWidget(dc)\n\n        self.main_widget.setFocus()\n        self.setCentralWidget(self.main_widget)\n\n        self.statusBar().showMessage(\"All hail matplotlib!\", 2000)\n\n    def fileQuit(self):\n        self.close()\n\n    def closeEvent(self, ce):\n        self.fileQuit()\n\n    def about(self):\n        QtWidgets.QMessageBox.about(self, \"About\",\n                                    \"\"\"embedding_in_qt5.py example\nCopyright 2005 Florent Rougon, 2006 Darren Dale, 2015 Jens H Nielsen\n\nThis program is a simple example of a Qt5 application embedding matplotlib\ncanvases.\n\nIt may be used and modified with no restriction; raw copies as well as\nmodified versions may be distributed without limitation.\n\nThis is modified from the embedding in qt4 example to show the difference\nbetween qt4 and qt5\"\"\")\n\n\n代码解析\n通过matplotlib.use('Qt5Agg')，这行代码声明matplotlib将要嵌入到pyqt5中，同样通过这句，也可以声明将matplotlib嵌入到其他的，gui界面中去，然后通过继承FigureCanvas类来获得一个即使widget的类也是FigureCanva类的类，然后通过self.fig成员，生成一个绘图类，并由其创建一个绘图布局，返回一个self.axes来管理绘图布局中的内容。坐标轴，标题，标签，图形样式（饼图，柱状图，折线图等）等等的设置都通过self.axes的成员函数来设置完成。刚开始的使用还是比较云里雾里的，现在就差不多了。我对官方例程做了些修改，具体的代码，可以到我的GitHub仓储上查看Qt-learn-pyqt5-matplotlib里面也有一些其他的例子，应该还会不定期的更新，有兴趣也可以看看。下面只需要对这几个类进行实例话，开启qt的事件循环就可以看到界面了，具体的可以看我的github代码，这里就不多说了。\n写在最后\n因为自身能力有限，也不是科班出身，都是自学的，目前还是一名学生，所以有未尽之处还请指正，不喜勿喷。谢谢。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}