{"title": "Python3 简明教程 - 程序员实验室 ", "index": "编程语言,教程,python3.x,python", "content": "\n课程简介：简明易懂的 Python3 课程，不仅适用于那些有其它语言基础的同学，对没有编程经验的同学也非常友好。本课程不仅讲解了 Python3 基础知识，还介绍了 PEP8、Virtualenv、测试、项目结构以及 Flask 相关内容\n本课程由FrostSigh编辑，全部章节及在线练习地址：Python3 简明教程\n第一节 开始 Python 之旅\n知识点\n\n使用交互模式的 Python3 解释器\n简单使用 vim 编写 Python3 脚本\n执行 Python3 脚本\nPython3 代码风格建议\nPython3 中使用注释\n认识 Python3 模块\n\n实验步骤\n1. 解释器\nPython 是一个脚本语言，你可以在 Python 解释器中直接写代码或者将代码写到一个文件里，然后执行这个文件（即脚本文件）。\n首先，我们从使用解释器开始，打开终端，键入Python3 并回车。这个时候解释器便工作于交互模式。\n\n\n作为我们第一个 Python 代码，我们将打印经典的 \"Hello World!\"，如下所示：\n>>> print(\"Hello World!\")\nHello World!\n\n欣赏完自己的杰作后，按 Ctrl + D 输入一个 EOF 字符来退出解释器，你也可以键入 exit() 来退出解释器。\n2. 脚本文件\n作为正式的程序员，你可能想要将上述的代码写到一个源文件。那么我们来创建一个 helloworld.py 文件，用你喜欢的任何编辑器来创建这个文件，我使用 Vim ，你可以使用基于 GUI 的工具，如实验楼环境桌面上的 gedit。\n我们建议使用 Vim，在这里我们简单的使用它，你可以在实验楼的课程 Vim编辑器 里深入学习。\n键入 vim helloworld.py 来启动 Vim 并编辑 helloworld.py，启动后不要乱按键。\n\n然后按 i 键进入插入模式，此时你可以看到左下角有 “插入” 两个字，现在你可以键入下面的代码了。\n#!/usr/bin/env python3\nprint(\"Hello World!\")\n其中第一行的前两个字符 #! 称为 Shebang ，目的是告诉 shell 使用 Python 解释器执行其下面的代码。\n\n然后按 Esc 键退出插入模式，再键入 :wq 回车，Vim 就会保存文件并退出。\n要运行脚本文件 helloworld.py，还要为文件添加可执行权限：\n$ chmod +x helloworld.py\n然后执行脚本文件：\n$ ./helloworld.py\n\n3. 代码风格建议\n在 Python 中，空格很重要，我们使用空格将标识符区分开，行开始处的空格我们称之为缩进，如果你的缩进是错误的，Python 解释器会抛出错误。例如下面情形：\n>>> a = 12\n>>>   a = 12\n  File \"<stdin>\", line 1\n    a = 12\n    ^\nIndentationError: unexpected indent\n这是因为第二行开始处出现了多余的空格，所以需要经常检查代码的缩进。\n如果你在代码中混用制表符和空格，这种缩进错误会很常见。\n所以如果是用空格，就一直用空格缩进，不要使用制表符。\n建议遵守以下约定：\n\n使用 4 个空格来缩进\n永远不要混用空格和制表符\n在函数之间空一行\n在类之间空两行\n字典，列表，元组以及参数列表中，在 , 后添加一个空格。对于字典，: 后面也添加一个空格\n在赋值运算符和比较运算符周围要有空格（参数列表中除外），但是括号里侧不加空格：a = f(1, 2) + g(3, 4)\n\n3. 注释\n注释是一些文本用来解释此处代码是做什么的，写注释是为了使他人更容易理解代码。\nPython 的注释以 # 字符开始的，在 # 字符到行尾之间的所有东西都被程序忽略为注释，也就说对程序没有任何影响。\n>>> # 这是一个注释\n>>> # 下面这一行是求两数之和\n>>> a = 12 + 34\n>>> print(a) # 这里也是注释 :)\n注释主要面向的人群是开发人员和维护代码库的人员，所以如果你写了一些复杂代码，你应该写足够的注释在里面，以便让其他任何人能够通过你的注释都懂代码。你应该总是在 # 后跟一个空格，然后再写注释。你也可以做一些标准的注释，像下面这样。\n# FIXME -- fix these code later\n# TODO -- in future you have to do this\n4. 模块\n模块是包含了我们能复用的代码的文件，包含了不同的函数定义，变量。模块文件通常以 .py 为扩展名。\nPython 本身在默认安装时就带有大量的模块。我们之后将会用到其中的一部分。在使用模块前先导入它。\n>>> import math\n>>> print(math.e)\n2.71828182846\n我们会在模块这个实验里学习更多有关模块的知识。\n总结\n完成本实验后，应当明白如何使用交互模式的 Python3 解释器，如何简单使用 vim 编写脚本文件并执行这个脚本文件，要特别注意的是，Python 使用缩进来定义语句块，缩进是 Python 语法的一部分，这与其它大多数语言不同。代码风格在本课程的第14个实验 PEP8 代码风格指南 有更为详细的讲述。注释的话，能使用英文建议使用英文。模块同样会在之后的实验里深入学习。\n课程全部章节可在实验楼查看：Python3 简明教程实验楼为本课程提供了完整的在线练习环境\n后续章节\n第2节 变量和数据类型第3节 运算符和表达式第4节 控制流 If-else第5节 循环第6节 数据结构第7节 字符串第8节 函数第9节 文件处理第10节 异常第11节 类 第12节 模块第13节 Collections 模块第14节 PEP8 代码风格指南第15节 迭代器、生成器、装饰器第16节 Virtualenv第17节 测试第18节 项目结构第19节 Flask 介绍\n课程来源本课程基于 Python for you and me 教程翻译制作，其中参考了 Python tutorial 和 The Python Standard Library，并对原教程的内容进行了改进与补充。\n相关链接地址如下：\n\nPython tutorial：http://www.pythondoc.com/pythontutorial3/index.html\nPython for you and me：http://pymbook.readthedocs.io/en/latest/\nThe Python Standard Library：https://docs.python.org/3/library/index.html\n\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "7"}