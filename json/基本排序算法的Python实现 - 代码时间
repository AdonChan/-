{"title": "基本排序算法的Python实现 - 代码时间 ", "index": "python", "content": "本篇主要实现九(八）大排序算法，分别是冒泡排序，插入排序，选择排序，希尔排序，归并排序，快速排序，堆排序,计数排序。希望大家回顾知识的时候也能从我的这篇文章得到帮助。  为了防止误导读者，本文所有概念性内容均截取自对应Wiki\n冒泡排序\n原理\n冒泡排序(Bubble Sort)是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。\n步骤\n冒泡排序算法的运作如下：\n\n比较相邻的元素。如果第一个比第二个大，就交换他们两个。\n对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。\n针对所有的元素重复以上的步骤，除了最后一个。\n持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。\n\n代码\ndef bubble_sort(list):\n    length = len(list)\n    # 第一级遍历\n    for index in range(length):\n        # 第二级遍历\n        for j in range(1, length - index):\n            if list[j - 1] > list[j]:\n                # 交换两者数据，这里没用temp是因为python 特性元组。\n                list[j - 1], list[j] = list[j], list[j - 1]\n    return list\n这种排序其实还可以稍微优化一下，添加一个标记，在排序已完成时，停止排序。\ndef bubble_sort_flag(list):\n    length = len(list)\n    for index in range(length):\n        # 标志位\n        flag = True\n        for j in range(1, length - index):\n            if list[j - 1] > list[j]:\n                list[j - 1], list[j] = list[j], list[j - 1]\n                flag = False\n        if flag:\n            # 没有发生交换，直接返回list\n            return list\n    return list\n选择排序\n原理\n选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理大致是将后面的元素最小元素一个个取出然后按顺序放置。\n步骤\n\n在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，\n再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。\n重复第二步，直到所有元素均排序完毕。\n\n代码\ndef selection_sort(list):\n   n=len(list)\n   for i in range (0,n):\n       min = i\n       for j in range(i+1,n):\n           if list[j]<list[min]:\n               min=j\n               list[min],list[i]=list[i],list[min]\n   return list\n插入排序\n原理\n插入排序（Insertion Sort）是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。\n步骤\n\n从第一个元素开始，该元素可以认为已经被排序\n取出下一个元素，在已经排序的元素序列中从后向前扫描\n如果该元素（已排序）大于新元素，将该元素移到下一位置\n重复步骤3，直到找到已排序的元素小于或者等于新元素的位置\n将新元素插入到该位置后\n重复步骤2~5\n\n代码\ndef insert_sort(list):\n    n = len(list)\n    for i in range(1, n):\n        # 后一个元素和前一个元素比较\n        # 如果比前一个小\n        if list[i] < list[i - 1]:\n            # 将这个数取出\n            temp = list[i]\n            # 保存下标\n            index = i\n            # 从后往前依次比较每个元素\n            for j in range(i - 1, -1, -1):\n                # 和比取出元素大的元素交换\n                if list[j] > temp:\n                    list[j + 1] = list[j]\n                    index = j\n                else:\n                    break\n            # 插入元素\n            list[index] = temp\n    return list\n希尔排序\n原理\n希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。希尔排序是非稳定排序算法。希尔排序是基于插入排序的以下两点性质而提出改进方法的：插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位。\n步骤\n每次以一定步长(就是跳过等距的数)进行排序，直至步长为1.\n代码\ndef shell_sort(list):\n    n = len(list)\n    # 初始步长\n    gap = round(n / 2)\n    while gap > 0:\n        for i in range(gap, n):\n            # 每个步长进行插入排序\n            temp = list[i]\n            j = i\n            # 插入排序\n            while j >= gap and list[j - gap] > temp:\n                list[j] = list[j - gap]\n                j -= gap\n            list[j] = temp\n        # 得到新的步长\n        gap = round(gap / 2)\n    return list\n步长使用的是Donald Shell的建议，另外步长还可以使用Sedgewick提出的(1, 5, 19, 41, 109,...)。也可以使用斐波那契数列除去0和1将剩余的数以黄金分区比的两倍的幂进行运算得到的数列。\n归并排序\n原理\n归并操作(归并算法)，指的是将两个已经排序的序列合并成一个序列的操作。归并排序算法依赖归并操作。\n步骤\n迭代法\n\n申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列\n设定两个指针，最初位置分别为两个已经排序序列的起始位置\n比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置\n重复步骤3直到某一指针到达序列尾\n将另一序列剩下的所有元素直接复制到合并序列尾\n\n递归法\n假设序列共有n个元素：\n\n将序列每相邻两个数字进行归并操作，形成 {displaystyle floor(n/2)} floor(n/2)个序列，排序后每个序列包含两个元素\n将上述序列再次归并，形成 {displaystyle floor(n/4)} floor(n/4)个序列，每个序列包含四个元素\n重复步骤2，直到所有元素排序完毕\n\n代码\n# 递归法\ndef merge_sort(list):\n    # 认为长度不大于1的数列是有序的\n    if len(list) <= 1:\n        return list\n    # 二分列表\n    middle = len(list) // 2\n    left = merge_sort(list[:middle])\n    right = merge_sort(list[middle:])\n    # 最后一次合并\n    return merge(left, right)\n# 合并\ndef merge(left, right):\n    l,r=0,0\n    result=[]\n    while l<len(left) and r<len(right):\n        if left[l] <right[r]:\n            result.append(left[l])\n            l+=1\n        else:\n            result.append(right[r])\n            r +=1\n        reslut +=left[l:]\n        result+=right[r:]                \n    return result\n鄙人不才，不知归并排序的迭代法如何用Python实现，望指教。\n快速排序\n原理\n快速排序使用分治法（Divide and conquer）策略来把一个序列（list）分为两个子序列（sub-lists）。\n步骤\n\n从数列中挑出一个元素，称为\"基准\"（pivot），\n重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。\n递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。\n\n代码\n普通版\ndef quick_sort(list):\n    less = []\n    pivotList = []\n    more = []\n    # 递归出口\n    if len(list) <= 1:\n        return list\n    else:\n        # 将第一个值做为基准\n        pivot = list[0]\n        for i in list:\n            # 将比急转小的值放到less数列\n            if i < pivot:\n                less.append(i)\n            # 将比基准打的值放到more数列\n            elif i > pivot:\n                more.append(i)\n            # 将和基准相同的值保存在基准数列\n            else:\n                pivotList.append(i)\n        # 对less数列和more数列继续进行排序\n        less = quick_sort(less)\n        more = quick_sort(more)\n        return less + pivotList + more\n咳咳，下面这段代码出自《Python cookbook 第二版》传说中的三行实现python快速排序。\ndef qsort(arr):\n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[0]\n        return qsort([x for x in arr[1:] if x < pivot]) + \\\n               [pivot] + \\\n               qsort([x for x in arr[1:] if x >= pivot])\n当然还有一行语法糖版本:\nqs = lambda xs : ( (len(xs) <= 1 and [xs]) or [ qs( [x for x in xs[1:] if x < xs[0]] ) + [xs[0]] + qs( [x for x in xs[1:] if x >= xs[0]] ) ] )[0]\n是不是感受到了Python的魅力？\n堆排序\n原理\n堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。\n步骤\n\n创建最大堆:将堆所有数据重新排序，使其成为最大堆\n最大堆调整:作用是保持最大堆的性质，是创建最大堆的核心子程序\n堆排序:移除位在第一个数据的根节点，并做最大堆调整的递归运算\n\n代码\ndef heap_sort(list):\n    # 创建最大堆\n    for start in range((len(list) - 2) // 2, -1, -1):\n        sift_down(list, start, len(list) - 1)\n\n    # 堆排序\n    for end in range(len(list) - 1, 0, -1):\n        list[0], list[end] = list[end], list[0]\n        sift_down(list, 0, end - 1)\n    return list\n\n\n# 最大堆调整\ndef sift_down(lst, start, end):\n    root = start\n    while True:\n        child = 2 * root + 1\n        if child > end:\n            break\n        if child + 1 <= end and lst[child] < lst[child + 1]:\n            child += 1\n        if lst[root] < lst[child]:\n            lst[root], lst[child] = lst[child], lst[root]\n            root = child\n        else:\n            break\n计数排序\n原理\n当输入的元素是n个0到k之间的整数时，它的运行时间是Θ(n + k)。计数排序不是比较排序，排序的速度快于任何比较排序算法。\n由于用来计数的数组C的长度取决于待排序数组中数据的范围（等于待排序数组的最大值与最小值的差加上1），这使得计数排序对于数据范围很大的数组，需要大量时间和内存。例如：计数排序是用来排序0到100之间的数字的最好的算法，但是它不适合按字母顺序排序人名。但是，计数排序可以用在基数排序算法中，能够更有效的排序数据范围很大的数组。\n步骤\n\n找出待排序的数组中最大和最小的元素\n统计数组中每个值为i的元素出现的次数，存入数组 C 的第 i 项\n对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）\n反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1\n\n代码\ndef count_sort(list):\n    min = 2147483647\n    max = 0\n    # 取得最大值和最小值\n    for x in list:\n        if x < min:\n            min = x\n        if x > max:\n            max = x\n    # 创建数组C\n    count = [0] * (max - min +1)\n    for index in list:\n        count[index - min] += 1\n    index = 0\n    # 填值\n    for a in range(max - min+1):\n        for c in range(count[a]):\n            list[index] = a + min\n            index += 1\n    return list\n第九种排序\nNone？当然不会自然就是系统自带的\nlist.sort()\n以上所有源代码均在Github共享希望与大家共同进步!\n参考资料\n\n维基百科: 冒泡排序、选择排序、插入排序、希尔排序、归并排序、快速排序、堆排序、计数排序\n\nPython Cookbook\n\n感谢\n知乎用户:dhx1793516813、左鸢、灵剑为本文缺漏之处提出建议\nEOF\n转载请注明出处：http://eindex.me/post/base-so...访问原文「基本排序算法的Python实现」获取最佳阅读体验并参与讨论\n\n                ", "mainLikeNum": ["3 "], "mainBookmarkNum": "36"}