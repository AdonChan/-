{"title": "Python：Tornado 第三章：HTML5 WebSocket概念及应用：第一节：WebSocket概念 - python3 ：公司内部培训专栏 ", "index": "python", "content": "上一篇文章：Python：Tornado 第二章：实战演练：开发Tornado网站：第九节：防止跨站攻击下一篇文章：Python：Tornado 第三章：HTML5 WebSocket概念及应用：第二节：服务端编程\n\nTornado的异步特性使得其非常适合服务器的高并发处理，客户端与服务器的持久连接应用框架就是高并发的典型应用。而WebSocket正是在HTTP客户端与服务器之间建立持久连接的HTML5标准技术。本章将讲解WebSocket技术在Tornado框架中的应用。WebSocket protocol是HTML5定义的一种新的标准协议（RFC6455），它实现了浏览器与服务器的双全工通信（full-duplex）。\n1、WebSocket的应用场景\n传统的HTTP和HTML技术使用客户端主动向服务器发送请求并获取回复。但是随着即时通讯需求的增多，这样的通信模式有时并不能满足应用的需求。\nWebSocket与普通的Socket通讯类似，它打破了原来HTTP的Request和Response一对一的通信模型，同时打破了服务器只能被动地接受客户端请求的应用场景。也许读者听说过Ajax、Long poll等基于传统HTTP的动态客户端技术，但这些技术无不采用轮询技术，耗费了大量的网络带宽和计算资源。\n而WebSocket正是为了应对这样的场景而制定的HTML5标准，相对于普通的Socket通信，WebSocket又在应用层定义了基本的交互流程，使得Tornado这样的服务器框架和JavaScript客户端可以构建出标准的WebSocket模块。\n总结WebSocket的特点如下：\n\nWebSocket适合服务端主动推送的场景。\n相对于Ajax和Long poll等技术，WebSocket通信模型更高效。\nWebSocket仍然与HTTP完成Internet通信。\n因为是HTML5的标准协议，所以不受企业防火墙的拦截。\n\n2、WebSocket的通信原理\nWebSocket的通信原理是在客户端与服务器之间建立TCP持久链接，从而使得当服务器有消息需要推送给客户端时能够进行即时通信。\n虽然WebSocket不是HTTP，但由于在Internet上HTML本事是由HTTP封装并进行传输的，所以WebSocket仍然需要与HTTP进行协作。IETF在RFC6455中定义了基于HTTP链路建立WebSocket信道的标准流程。\n客户端通过发送如下HTTP Request告诉服务器需要建立一个WebSocket长链接信道：\nGET /stock_info/?encoding=text HTTP/1.1\nHost:echo.websocket.org\nOrigin:http://websocket.org\nCookie:__token=ubcxx13\nConnection:Upgrade\nSec-WebSocket-Key:uRovscZjNol/umbTt5uKmw==\nUpgrade:websocket\nSec-WebSocket-Version:13\n读者可以发现其仍然是一个HTTP Request包，并对其中的内容非常熟悉。\n\nHTTP请求方式：GET\n请求地址：/stock_info\nHTTP版本号：1.1\n服务器主机域名：echo.websocket.org\nCookie信息：__token=ubcxx13\n\n但是在HTTP Header中出现了4个特色的字段，他们是：\nConnection:Upgrade\nSec-WebSocket-Key:uRovscZjNol/umbTt5uKmw==\nUpgrade:websocket\nSec-WebSocket-Version:13\n这就是WebSocket建立链路的核心，它告诉Web服务器：客户端希望建立一个WebSocket链接，客户端使用的WebSocket版本时13，密钥是uRovscZjNol/umbTt5uKmw==。\n服务器在收到该Request后，如果同意建立WebSocket链接则返回类似如下的Response：\nHTTP/1.1 101 WebSocket Protocol Handshake\nDate:Fri,10 Feb 2012 17:38:18 GMT\nConnection:Upgrade\nServer:Kaazing Gateway\nUpgrade:WebSocket\nAccess-Control-Allow-Origin:http://websocket.org\nAccess-Contril-Allow-Credentials:true\nSec-WebSocket-Accept:rLHCKw/SKs09GAH/ZSFhBATDKrU=\nAccess-Control-Allow-Headers:content-type\n这依旧是一个标准的HTTP Response，其中与WebSocket相关的Header信息是：\nConnection:Upgrade\nUpgrade:WebSocket\nSec-WebSocket-Accept:rLHCKw/SKs09GAH/ZSFhBATDKrU=\n前面的两条数据告诉客户端：服务器已经将本连接转换为WebSocket链接。而Sec-WebSocket-Accept是将客服端发送的Sec-WebSocket-Key加密后产生的数据，以让客服端确认服务器能够正常工作。\n至此，在客户端与服务器之间已经建立了一个TCP持久链接，双发已经可以随时向对方发送消息。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "0"}