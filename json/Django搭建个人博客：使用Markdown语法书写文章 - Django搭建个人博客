{"title": "Django搭建个人博客：使用Markdown语法书写文章 - Django搭建个人博客 ", "index": "blog,python,django", "content": "上一章我们实现了文章详情页面。为了让文章正文能够进行标题、加粗、引用、代码块等不同的排版（像在Office中那样！），我们将使用Markdown语法。\n安装Markdown\nMarkdown是一种轻量级的标记语言，它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的或者HTML文档。建议读者一定要花五分钟时间熟悉一下Markdown的语法，熟练后码字效率一定会大幅提高。\n关于Markdown语法看这里：Markdown 语法介绍\n安装markdown也很简单：进入虚拟环境，输入指令pip install markdown即可。\n使用Markdown\n为了将Markdown语法书写的文章渲染为HTML文本，首先改写article/views.py的article_detail()：\narticle/views.py\n\n...\n\n# 引入markdown模块\nimport markdown\n\ndef article_detail(request, id):\n    article = ArticlePost.objects.get(id=id)\n\n    # 将markdown语法渲染成html样式\n    article.body = markdown.markdown(article.body,\n        extensions=[\n        # 包含 缩写、表格等常用扩展\n        'markdown.extensions.extra',\n        # 语法高亮扩展\n        'markdown.extensions.codehilite',\n        ])\n\n    context = { 'article': article }\n    return render(request, 'article/detail.html', context)\n代码中markdown.markdown语法接收两个参数：第一个参数是需要渲染的文章正文article.body；第二个参数载入了常用的语法扩展，markdown.extensions.extra中包括了缩写、表格等扩展，markdown.extensions.codehilite则是后面要使用的代码高亮扩展。\n然后，修改templates/article/detail.html中有关文章正文的部分：\ntemplates/article/detail.html\n\n...\n\n# 在 article.body 后加上 |safe 过滤器\n<p>{{ article.body|safe }}</p>\nDjango出于安全的考虑，会将输出的HTML代码进行转义，这使得article.body中渲染的HTML文本无法正常显示。管道符|是Django中过滤器的写法，而|safe就类似给article.body贴了一个标签，表示这一段字符不需要进行转义了。\n这样就把Markdown语法配置好了。\n启动服务器，在后台中新录入一条用markdown语法书写的文章，内容如下：\n# 国风·周南·关雎\n---\n**关关雎鸠，在河之洲。窈窕淑女，君子好逑。**\n\n参差荇菜，左右流之。窈窕淑女，寤寐求之。\n\n---\n+ 列表一\n+ 列表二\n    + 列表二-1\n    + 列表二-2\n---\n\n​```python\ndef article_detail(request, id):\n    article = ArticlePost.objects.get(id=id)\n    # 将markdown语法渲染成html样式\n    article.body = markdown.markdown(article.body,\n        extensions=[\n        # 包含 缩写、表格等常用扩展\n        'markdown.extensions.extra',\n        # 语法高亮扩展\n        'markdown.extensions.codehilite',\n        ])\n    context = { 'article': article }\n    return render(request, 'article/detail.html', context)\n​```\n返回文章详情，结果如下：\n\n很好，但是代码块还是不怎么好看。\n写技术文章没有代码高亮怎么行。继续努力。\n代码高亮\n在static目录中新建一个目录md_css/，一会儿放置代码高亮的样式文件。\n重新打开一个命令行窗口，进入虚拟环境，安装Pygments：pip install Pygments\nPygments是一种通用语法高亮显示器，可以帮助我们自动生成美化代码块的样式文件。\n在命令行中进入刚才新建的md_css目录中，输入Pygments指令：\npygmentize -S monokai -f html -a .codehilite > monokai.css\n这里有一点需要注意, 生成命令中的 -a 参数需要与真实页面中的 CSS Selector 相对应，即.codehilite这个字段在有些版本中应写为.highlight。如果后面的代码高亮无效，很可能是这里出了问题。\n回车后检查一下，在md_css目录中是否自动生成了一个叫monokai.css的文件，这是一个深色背景的高亮样式文件。\n接下来我们在base.html中引用这个文件：\ntemplates/base.html\n\n<head>\n    ...\n    <link rel=\"stylesheet\" href=\"{% static 'bootstrap/css/bootstrap.min.css' %}\">\n    \n    <!-- 引入monikai.css -->\n    <link rel=\"stylesheet\" href=\"{% static 'md_css/monokai.css' %}\">\n    \n</head>\n...\n重新启动服务器，顺利的话看到如下：\n\n除了Monokai这个深色的样式外，Pygments还内置了很多其他的样式，这个就看喜好选择了。\n各种不同样式可以在这里参照：pygments-css\n总结\n本章引进了Markdown语法以及代码高亮扩展，从此可以写排版漂亮的文章正文了。\n下一章将学习如何创建一篇新的文章。\n\n有疑问请在杜赛的个人网站留言，我会尽快回复。\n或Email私信我：dusaiphoto@foxmail.com\n项目完整代码：Django_blog_tutorial\n\n\n转载请告知作者并注明出处。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "0"}