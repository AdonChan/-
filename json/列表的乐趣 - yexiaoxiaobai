{"title": "列表的乐趣 - yexiaoxiaobai ", "index": "List,python", "content": "列表的乐趣\n\n标签（空格分隔）： Python list\n\n\n\n  文章的原文是 Fun with Lists\n\n\n1  删除元素\n\n1.1   所有等于 X 值的元素\n\nx = 4\n\na = [1, 2, 3, 4, 4, 5, 6, 1, 4]\nfor i in range(a.count(x)):\n    a.pop(a.index(x))\nprint(a)\n\n[1, 2, 3, 5, 6, 1]\n\n\na = [1, 2, 3, 4, 4, 5, 6, 1, 4]\nb = [v for v in a if v != x]\nprint(b)\n[1, 2, 3, 5, 6, 1]\n\nprint(a)\n[1, 2, 3, 4, 4, 5, 6, 1, 4]\n\n\n1.2  重复\n\n\n  警告!\n  该方法不负责列表项的顺序。\n\n\na = [1, 2, 3, 4, 3, 5, 1, 6]\nb = list(set(a))\nprint(b)\n[1, 2, 3, 4, 5, 6]\n\n\n1.3   第一个元素\n\na = [1, 2, 3, 4, 5, 6]\nb = a.pop(0)\nprint(b)\n1\n\nprint(a)\n[2, 3, 4, 5, 6]\n\n\na = [1, 2, 3, 4, 5, 6]\ndel a[0]\nprint(a)\n[2, 3, 4, 5, 6]\n\n\na = [1, 2, 3, 4, 5, 6]\nd = a[1:]\nprint(d)\n[2, 3, 4, 5, 6]\n\nprint(a)\n[1, 2, 3, 4, 5, 6]\n\n\n1.4   最后一个元素\n\na = [1, 2, 3, 4, 5, 6]\nb = a.pop()\nprint(b)\n6\n\nprint(a)\n[1, 2, 3, 4, 5]\n\n\na = [1, 2, 3, 4, 5, 6]\ndel a[-1]\nprint(a)\n[1, 2, 3, 4, 5]\n\n\na = [1, 2, 3, 4, 5, 6]\nc = a[:-1]\nprint(c)\n[1, 2, 3, 4, 5]\n\nprint(a)\n[1, 2, 3, 4, 5, 6]\n\n\n1.5   第 n 个元素\n\nn = 3\na = [1, 2, 3, 4, 5, 6]\nb = a.pop(n - 1)\nprint(b)\n3\n\nprint(a)\n[1, 2, 4, 5, 6]\n\n\na = [1, 2, 3, 4, 5, 6]\ndel a[n - 1]\nprint(a)\n[1, 2, 4, 5, 6]\n\n\na = [1, 2, 3, 4, 5, 6]\nc = a[:n - 1] + a[n:]\nprint(c)\n[1, 2, 4, 5, 6]\n\nprint(a)\n[1, 2, 3, 4, 5, 6]\n\n\na = [1, 2, 3, 4, 5, 6]\nc = [v for i, v in enumerate(a) if i != n - 1]\nprint(c)\n[1, 2, 4, 5, 6]\n\nprint(a)\n[1, 2, 3, 4, 5, 6]\n\n\n2   替换元素\n\n2.1   所有等于 x 值的元素\n\nx = 4\n\na = [1, 2, 3, 4, 4, 5, 6, 1, 4]\nfor i in range(a.count(x)):\n    a[a.index(x)] = 0\nprint(a)\n[1, 2, 3, 0, 0, 5, 6, 1, 0]\n\n\na = [1, 2, 3, 4, 4, 5, 6, 1, 4]\nb = [v if v != x else 0 for v in a ]\nprint(b)\n[1, 2, 3, 0, 0, 5, 6, 1, 0]\nprint(a)\n[1, 2, 3, 4, 4, 5, 6, 1, 4]\n\n\n2.2   第一个元素\n\na = [1, 2, 3, 4]\na[0] = 0\nprint(a)\n[0, 2, 3, 4]\n\n\na = [1, 2, 3, 4]\nb = [0] + a[1:]\nprint(b)\n[0, 2, 3, 4]\nprint(a)\n[1, 2, 3, 4]\n\n\n2.3   最后一个元素\n\na = [1, 2, 3, 4]\na[-1] = 0\nprint(a)\n[1, 2, 3, 0]\n\n\na = [1, 2, 3, 4]\nb = a[:-1] + [0]\nprint(b)\n[1, 2, 3, 0]\nprint(a)\n[1, 2, 3, 4]\n\n\n2.4   第 n 个元素\n\nn = 3\n\na = [1, 2, 3, 4]\na[n - 1] = 0\nprint(a)\n[1, 2, 0, 4]\n\n\na = [1, 2, 3, 4]\nb = [v if i != n -1 else 0 for i, v in enumerate(a)]\nprint(b)\n[1, 2, 0, 4]\nprint(a)\n[1, 2, 3, 4]\n\n\n3   排序\n\n3.1   按照字母顺序排列地 (不分大小写)\n\na = ['d', 'C', 'B', 'a']\n\nb = sorted(a, key=lambda x: x.lower())\nprint(b)\n['a', 'B', 'C', 'd']\nprint(a)\n['d', 'C', 'B', 'a']\n\na.sort(key=lambda s: s.lower())\nprint(a)\n['a', 'B', 'C', 'd']\n\n\n3.2   按照字母顺序排列地 (分大小写)\n\na = ['d', 'C', 'B', 'a']\n\nb = sorted(a)\nprint(b)\n['B', 'C', 'a', 'd']\nprint(a)\n['d', 'C', 'B', 'a']\n\na.sort()\nprint(a)\n['B', 'C', 'a', 'd']\n\n\n3.3   升序\n\na = ['a', 'c', 'd', 'b']\n\nb = sorted(a, reverse=True)\nprint(b)\n['d', 'c', 'b', 'a']\nprint(a)\n['a', 'c', 'd', 'b']\n\na.sort(reverse=True)\nprint(a)\n['d', 'c', 'b', 'a']\n\n\n3.4   根据字符串长度\n\na = ['aaaa', 'B', 'CCC', 'dd']\n\nb = sorted(a, key=lambda x: len(x))\nprint(b)\n['B', 'dd', 'CCC', 'aaaa']\nprint(a)\n['aaaa', 'B', 'CCC', 'dd']\n\na.sort(key=lambda x: len(x))\nprint(a)\n['B', 'dd', 'CCC', 'aaaa']\n\n\n4   其他\n\n4.1   列表中的所有值相加\n\na = [1, 2.5, 7, 13221, 4.6545]\nb = sum(a)\nprint(b)\n13236.1545\n\n\n4.2   在列表中新增元素\n\na = [1, 2, 3]\na.append(4)\nprint(a)\n[1, 2, 3, 4]\n\n\n4.3   使函数对列表中的每个元素生效\n\ndef func(x):\n    print(x)\n\ndef func_2(x):\n    return 2*x\n\na = [1, 2, 3, 4]\nmap(func, a)\n1\n2\n3\n4\n\nb = map(func_2, a)\nprint(b)\n[2, 4, 6, 8]\nc = [func_2(x) for x in a]\nprint(c)\n[2, 4, 6, 8]\n\n\n4.4   两个列表的笛卡尔积 (矢量)\n\na = [1, 2, 3]\nb = [4, 5, 6]\n\nc = [(x, y) for x in a for y in b]\nprint(c)\n[(1, 4), (1, 5), (1, 6), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6)]\n\n\nimport itertools\nd = [p for p in itertools.product(a, b)]\nprint(d)\n[(1, 4), (1, 5), (1, 6), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6)]\n\n\n4.5   n 个列表的笛卡尔积 (矢量)\n\nfrom pprint import pprint\nimport itertools\n\na = [[0, 1], [2, 3], [4, 5]]\n\nb = [p for p in itertools.product(*a)]\n\nprint(b)\n[(0, 2, 4),\n (0, 2, 5),\n (0, 3, 4),\n (0, 3, 5),\n (1, 2, 4),\n (1, 2, 5),\n (1, 3, 4),\n (1, 3, 5)]\n\n\n4.6   检查两个列表是否有一个共同的元素\n\na = [1, 2, 0]\nb = [3, 0, 4]\n\nd = len((set(a) & set(b))) > 0\nprint(d)\nTrue\n\n\n4.7   检查一个列表是否包含值 x\n\na = [1, 2.5, 7, 13221, 4.6545]\nif 7 in a:\n    print('yes')\nelse:\n    print('no')\nyes\n\n\n4.8   计算 x 出现在一个列表中的次数\n\na = [1, 2.5, 7, 13221, 4.6545, 7]\nb = a.count(7)\nprint(b)\n2\n\n\n4.9   两个列表的不同\n\na = [1, 2, 3, 4]\nb = [3, 4, 5, 6]\n\nc = [x for x in a if not x in b]\nprint(c)\n[1, 2]\n\n\nd = list(set(a) - set(b))\nprint(d)\n[1, 2]\n\n\ne = list(set.difference(set(a), set(b)))\nprint(e)\n[1, 2]\n\n\n4.10    n 个列表的不同\n\na = [1, 2, 3, 4]\nb = [[3, 5, 6, 7], [1, 8, 9, 10]]\n\na - b[0] - b[1]:\n\nc = [x for x in a if not any([x in l for l in b])]\nprint(c)\n[2, 4]\n\nd = list(set(a).difference(*[set(l) for l in b]))\nprint(d)\n[2, 4]\n\n\n4.11   一个列表中首先出现的 n 个元素\n\nn = 2\n\na = [1, 2, 3, 4, 5, 6]\nb = a[:2]\nprint(b)\n[1, 2]\n\n\n4.12   一个列表中首先出现的 n 个非 x 值的元素\n\nn = 3\nx = 2\n\na = [1, 2, 2, 3, 2, 2, 2, 4, 5, 6]\n\ngen = (v for v in a if v != x)\nb = [gen.next() for i in range(n)]\nprint(b)\n[1, 3, 4]\nc = []\nfor v in a:\n    if v != x:\n        c.append(v)\n    if len(c) == n:\n        break\nprint(c)\n[1, 3, 4]\n4.13   Flatten a list of lists\n\na = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nb = [i for s in a for i in s]\nprint(b)\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n4.14   把 x 插入 y 第一次出现之后的位置\n\nx = 4\ny = 3\na = [1, 2, 3, 5, 3, 6, 2]\n\ntry:\n    a.insert(a.index(y) + 1, x)\nexcept ValueError:\n    a.append(x)\nprint(a)\n[1, 2, 3, 4, 5, 3, 6, 2]\na = [1, 2, 3, 5, 3, 6, 2]\ntry:\n    i = a.index(y)\n    b = a[:i + 1] + [x] + a[i + 1:]\nexcept ValueError:\n    b = a + [x]\nprint(b)\n[1, 2, 3, 4, 5, 3, 6, 2]\nprint(a)\n[1, 2, 3, 5, 3, 6, 2]\n\n\n4.15   把 x 插入 y 第一次出现之前的位置\n\nx = 3\ny = 4\na = [1, 2, 4, 5, 4, 6, 2]\n\ntry:\n    a.insert(a.index(y), x)\nexcept ValueError:\n    a.append(x)\nprint(a)\n[1, 2, 3, 4, 5, 4, 6, 2]\n\na = [1, 2, 4, 5, 4, 6, 2]\ntry:\n    i = a.index(y)\n    b = a[:i] + [x] + a[i:]\nexcept ValueError:\n    b = a + [x]\nprint(b)\n[1, 2, 3, 4, 5, 4, 6, 2]\nprint(a)\n[1, 2, 4, 5, 4, 6, 2]\n\n\n4.16   两个列表的相同元素\n\na = [1, 2, 3, 4]\nb = [3, 4, 5, 6]\n\nc = [x for x in a if x in b]\nprint(c)\n[3, 4]\nd = list(set(a) & set(b))\nprint(d)\n[3, 4]\ne = list(set(a).intersection(b))\nprint(e)\n[3, 4]\n\n\n4.17   n 个列表的相同元素\n\na = [[1, 2, 3, 4], [3, 4, 5, 6], [1, 3, 7, 8]]\n\nb = list(set.intersection(*[set(l) for l in a]))\nprint(b)\n[3]\nc = [x for x in a[0] if all([x in l for l in a[1:]])]\nprint(c)\n[3]\n\n\n4.18   Iterate over every other element of a list\n\na = [1, 2, 3, 4, 5, 6]\nfor x in a[::2]:\n    print x\n1\n3\n5\n\n\n4.19   遍历列表的索引/值对\n\na = [1, 2.5, 7, 13221, 4.6545]\nfor i, v in enumerate(a):\n    print('%i: %i' % (i, v))\n0: 1\n1: 2\n2: 7\n3: 13221\n4: 4\n\n\n4.20   遍历一个列表的元素\n\na = [1, 2, 3, 4]\nfor x in a:\n    print x\n1\n2\n3\n4\n\n\n4.21   列表中最大的数\n\na = [1, 2.5, 7, 13221, 4.6545]\nb = max(a)\nprint(b)\n13221\n4.22   Last n elements of a list\n\nn = 2\n\na = [1, 2, 3, 4, 5, 6]\nb = a[-2:]\nprint(b)\n[5, 6]\n\n\n4.23   一个列表的长度\n\na = [1, 2, 3, 4]\nl = len(a)\nprint(l)\n4\n\n\n4.24   合并两个列表\n\na = [1, 2, 3]\nb = [4, 5, 6]\n\nc = a + b\nprint(c)\n[1, 2, 3, 4, 5, 6]\nprint(a)\n[1, 2, 3]\nprint(b)\n[4, 5, 6]\n\na.extend(b)\nprint(a)\n[1, 2, 3, 4, 5, 6]\nprint(b)\n[4, 5, 6]\n\n\n4.25   列表的组合\n\nfrom pprint import pprint\nfrom itertools import permutations as perm\n\na = ['a', 'b', 'c']\n\nb = list(perm(a))\npprint(b)\n[('a', 'b', 'c'),\n ('a', 'c', 'b'),\n ('b', 'a', 'c'),\n ('b', 'c', 'a'),\n ('c', 'a', 'b'),\n ('c', 'b', 'a')]\n\nc = [''.join(p) for p in perm(a)]\nprint(c)\n['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n\nd = [''.join(p) for p in perm(a, 2)]\nprint(d)\n['ab', 'ac', 'ba', 'bc', 'ca', 'cb']\n\n\n4.26   Prepend an element to a list\n\na = [2, 3, 4]\n\na.insert(0, 1)\nprint(a)\n[1, 2, 3, 4]\na = [2, 3, 4]\n\nb = [1] + a\nprint(b)\n[1, 2, 3, 4]\nprint(a)\n[2, 3, 4]\n\n\n4.27   列表反序\n\na = [1, 2, 3, 4]\na.reverse()\nprint(a)\n[4, 3, 2, 1]\n\na = [1, 2, 3, 4]\nc = a[::-1]\nprint(c)\n[4, 3, 2, 1]\nprint(a)\n[1, 2, 3, 4]\n\n\n4.28   列表中最小的数字\n\na = [1, 2.5, 7, 13221, 4.6545]\nb = min(a)\nprint(b)\n1\n\n\n4.29   2 个列表的对称差\n\na = [1, 2, 3, 4]\nb = [3, 4, 5, 6]\n\nc = [x for x in a if x not in b] + [x for x in b if x not in a]\nprint(c)\n[1, 2, 5, 6]\n\nd = list(set(a) ^ set(b))\nprint(d)\n[1, 2, 5, 6]\n\ne = list(set(a).symmetric_difference(b))\nprint(e)\n[1, 2, 5, 6]\n\n\n4.30   n 个列表的对称差\n\na = [[1, 2, 3, 4], [3, 4, 5, 6], [1, 5, 7, 8]]\n\nb = a[0]\nfor i in range(len(a) - 1):\n    b = list(set(b) ^ set(a[i + 1]))\nprint(b)\n[2, 6, 7, 8]\ntmp = {}\nfor v in [i for s in a for i in s]:\n    tmp[v] = (v not in tmp)\nc = [k for k, v in tmp.iteritems() if v]\nprint(c)\n[2, 6, 7, 8]\n\n\n4.31   两个列表的交集\n\na = [1, 2, 3, 4]\nb = [3, 4, 5, 6]\n\nc = [x for x in set(a + b)]\nprint(c)\n[1, 2, 3, 4, 5, 6]\nd = list(set(a) | set(b))\nprint(d)\n[1, 2, 3, 4, 5, 6]\ne = list(set(a).union(b))\nprint(e)\n[1, 2, 3, 4, 5, 6]\n\n\n4.32   n 个列表的交集\n\na = [[1, 2, 3, 4], [3, 4, 5, 6], [1, 6, 7, 8]]\n\nb = list(set.union(*[set(l) for l in a]))\nprint(b)\n[1, 2, 3, 4, 5, 6, 7, 8]\nimport itertools\nc = [x for x in set(itertools.chain(*a))]\nprint(c)\n[1, 2, 3, 4, 5, 6, 7, 8]\n\n\n4.33   列表的左边加 0\n\nmax_length = 10\n\na = [1, 2, 3, 4]\n\nb = [0]*(max_length - len(a)) + a\nprint(b)\n[0, 0, 0, 0, 0, 0, 1, 2, 3, 4]\n\n\n4.34   列表的右边加 0\n\nmax_length = 10\n\na = [1, 2, 3, 4]\n\nb = a + [0]*(max_length - len(a))\nprint(b)\n[1, 2, 3, 4, 0, 0, 0, 0, 0, 0]\n\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "7"}