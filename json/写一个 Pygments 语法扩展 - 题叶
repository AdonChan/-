{"title": "写一个 Pygments 语法扩展 - 题叶 ", "index": "cirru,python,lex,pygments", "content": "Pygments 的仓库在 Bitbucket 上. 不过主要是 GitHub 用这东西高亮.\nPython 写代码不熟悉.. 不过以前算入门, 加上只是当脚本, 问题不大\n\nhg 基础\n\n主仓库在这里: https://bitbucket.org/birkenfeld/pygments-main\nfork 以后发现是 hg 管理的, Mercurial, 不大熟悉, 但习惯 Git 还是会用\n简单的几条命令和 Git 类似\n\nbashhg clone <url> # clone 仓库\nhg add # 添加文件到仓库, 不过没有 stage\nhg commit \"add Cirru\" # 直接就提交了\nhg log --limit 1 # 查看 log 啦\nhg diff # 颜色还不会配... 超难看\nhg push # 直接上传到仓库\n\n\n提交代码前需要设置用户名信息, 直接按 StackOverflow 配置 ~/.hgrc, OKhttp://stackoverflow.com/questions/2329023/mercurial-error-abort-no-us...\n\nCirru 语法\n\n我要加的语法呢.. 缩进的, 每一行单独处理就好了, 颜色有几点吧:\n\n\n行头的, () 当中第一个, $ 后边第一个, 需要作为 Function 高亮\n\n() 和 $ 当作 Operator 高亮\n所有 \"\" 字符串作为字符串进行高亮\n... 发现漏掉处理字符串中 \\ 转义的高亮了...\n一般的文本作为 Variable 进行高亮\n\n测试的文件是这样的:\n\ncirru-- https://github.com/Cirru/cirru-gopher/blob/master/code/scope.cr\n\nset a (int 2)\n\nprint (self)\n\nset c (child)\n\nunder c\n  under parent\n    print a\n\nprint $ get c a\n\nset c x (int 3)\nprint $ get c x\n\nset just-print $ code\n  print a\n\nprint just-print\n\neval (self) just-print\neval just-print\n\nprint (string \"string content\\nand\")\n\ndemo ((((()))))\n\n\"eval\" $ string \"eval\"\n\n\n开发流程\n\n关于扩展开发, 专门有一页的文档描述: http://pygments.org/docs/lexerdevelopment/\n主要的步骤是这样的:\n\n\nfork 仓库到本地, 找到 pygments/lexers/ 目录下, 比如说 web.py 文件,\n这里的文件按平台分了积累, 比如 jvm.py, functional.pyweb.py 下是一些, 比如 JS, JSON.. 还有 CoffeeScript.. Cirru 就放这儿吧\n在 web.py 里先要注册名字, 在 __all__ 的列表里, 命名当然是 CirruLexer 啦\n\npython__all__ = ['BrainfuckLexer', 'BefungeLexer', ...]\n\n\n\n添加以后执行下命令, 生成 map 文件\n\nbash$ make mapfiles\n\n\n\n然后是写一个 CirruLexer 的 class, 以及一些详细的配置\n其中 flags 是关于正则的配置, 其他主要是语言名字的定义\n然后 tokens 里一看就知道是重点... 后边细说吧\n调试是通过生成一个 HTML 加上 Python 报错来的, 这个命令, 看下文档自己琢磨:\n\nbash$ ./pygmentize -O full -f html -o /tmp/example.html tests/examplefiles/example.diff\n\n\n\n调试好以后, 运行下命令测试一下,, 成功的话尝试上传仓库\n\nbash$ make mapfiles\n$ pip install nose\n$ make test\n\n\n语法规则\n\nhttps://bitbucket.org/krebo/pygments-main/src/a1fed5d0a0c94b377bcce8ef...\n\n看文档还不如看代码, JSON 的比较简单, 代码抄过来看一下, 从结尾的 root 字段开始:\n\nclass JsonLexer(RegexLexer):\n    \"\"\"\n    For JSON data structures.\n\n    *New in Pygments 1.5.*\n    \"\"\"\n\n    name = 'JSON'\n    aliases = ['json']\n    filenames = ['*.json']\n    mimetypes = [ 'application/json', ]\n\n    # integer part of a number\n    int_part = r'-?(0|[1-9]\\d*)'\n\n    # fractional part of a number\n    frac_part = r'\\.\\d+'\n\n    # exponential part of a number\n    exp_part = r'[eE](\\+|-)?\\d+'\n\n\n    flags = re.DOTALL\n    tokens = {\n        'whitespace': [\n            (r'\\s+', Text),\n        ],\n\n        # represents a simple terminal value\n        'simplevalue': [\n            (r'(true|false|null)\\b', Keyword.Constant),\n            (('%(int_part)s(%(frac_part)s%(exp_part)s|'\n              '%(exp_part)s|%(frac_part)s)') % vars(),\n             Number.Float),\n            (int_part, Number.Integer),\n            (r'\"(\\\\\\\\|\\\\\"|[^\"])*\"', String.Double),\n        ],\n\n\n        # the right hand side of an object, after the attribute name\n        'objectattribute': [\n            include('value'),\n            (r':', Punctuation),\n            # comma terminates the attribute but expects more\n            (r',', Punctuation, '#pop'),\n            # a closing bracket terminates the entire object, so pop twice\n            (r'}', Punctuation, ('#pop', '#pop')),\n        ],\n\n        # a json object - { attr, attr, ... }\n        'objectvalue': [\n            include('whitespace'),\n            (r'\"(\\\\\\\\|\\\\\"|[^\"])*\"', Name.Tag, 'objectattribute'),\n            (r'}', Punctuation, '#pop'),\n        ],\n\n        # json array - [ value, value, ... }\n        'arrayvalue': [\n            include('whitespace'),\n            include('value'),\n            (r',', Punctuation),\n            (r']', Punctuation, '#pop'),\n        ],\n\n        # a json value - either a simple value or a complex value (object or array)\n        'value': [\n            include('whitespace'),\n            include('simplevalue'),\n            (r'{', Punctuation, 'objectvalue'),\n            (r'\\[', Punctuation, 'arrayvalue'),\n        ],\n\n\n        # the root of a json document whould be a value\n        'root': [\n            include('value'),\n        ],\n\n    }\n\n\n按我的理解, 每个 key 对应的一个\"状态\", 状态有两个用法,\n\n\n当 tuple 里是三个参数时, 最后一个参数可以生命接下来进入的状态\n通过 include('value') 可以引用全部的 value 状态的规则\n\n要注意的是, 状态是 stack 叠加的, 需要有 #pop 和 #push 操作\n一般第 3 个参数就已经完成了 #push, 所以 #push 专用于增加自己的状态#pop 倒是经常用...\n然后第 3 个参数可以用 tuple 写多个状态的, 另外还有 #pop:2 表示两次\n\ntuple 第 2 个参数是 token, 具体列表这里: http://pygments.org/docs/tokens/\n\n第一个参数是正则, Python 的正则, 难道是跟 Perl 一样的...? 文档两份http://docs.python.org/2/library/re.html#re.matchhttp://wiki.ubuntu.org.cn/Python正则表达式操作指南\n\n大体的实现的思路的话, 比较难讲, 文档本身挺清楚的..http://pygments.org/docs/lexerdevelopment/\n思路大致是, 从一开始是 root 状态,\n逐次按第一个参数判断第一个正则, 是的话 consume 掉对应字符串,\n如果有状态的参数, 就往 stack 上参加状态, 如果是 #pop 就退回,\n然后是在哪个状态, 就从那个状态的规则继续开始匹配,\n直到字符串结束..\n\n中间出错的内容, 主要是生成的 HTML 当中 error 会用方框标记没有识别,\n另外就是 Python 报错, 比如 index out of range 是 #out 退栈过头了.\n然后正则出错了会报错的.. 其他的很像是黑箱了 >_<\n\n完整代码\n\npythonclass CirruLexer(RegexLexer):\n    \"\"\"\n    Syntax rules of Cirru can be found at:\n    http://grammar.cirru.org/\n\n    * using `()` to markup blocks, but limited in the same line\n    * using `\"\"` to markup strings, allow `\\` to escape\n    * using `$` as a shorthand for `()` till indentation end or `)`\n    * using indentations for create nesting\n    \"\"\"\n\n    name = 'Cirru'\n    aliases = ['cirru']\n    filenames = ['*.cirru', '*.cr']\n    mimetypes = ['text/x-cirru']\n    flags = re.MULTILINE\n\n    tokens = {\n        'string': [\n            (r'[^\"\\\\\\n]', String),\n            (r'\\\\\"', String),\n            (r'\\\\', String),\n            (r'\"', String, '#pop'),\n        ],\n        'function': [\n            (r'[\\w-][^\\s\\(\\)\\\"]*', Name.Function, '#pop'),\n            (r'\\)', Operator, '#pop'),\n            (r'(?=\\n)', Text.Whitespace, '#pop'),\n            (r'\\(', Operator, '#push'),\n            (r'\"', String, ('#pop', 'string')),\n            (r'\\s+', Text.Whitespace),\n        ],\n        'line': [\n            (r'^\\B', Text.Whitespace, 'function'),\n            (r'\\$', Operator, 'function'),\n            (r'\\(', Operator, 'function'),\n            (r'\\)', Operator),\n            (r'(?=\\n)', Text.Whitespace, '#pop'),\n            (r'\\n', Text.Whitespace, '#pop'),\n            (r'\"', String, 'string'),\n            (r'\\s+', Text.Whitespace),\n            (r'[\\d\\.]+', Number),\n            (r'[\\w-][^\\\"\\(\\)\\s]*', Name.Variable),\n        ],\n        'root': [\n            (r'^\\s*', Text.Whitespace, ('line', 'function')),\n            (r'^\\s+$', Text.Whitespace),\n        ]\n    }\n\n\n结果\n\n提交了 PR, Pygments 给我过了\n\nhttps://bitbucket.org/birkenfeld/pygments-main/pull-request/275/add-sy...https://bitbucket.org/birkenfeld/pygments-main/commits/all\n\n\n\n有时间再去试试看写 LightTable 的 Cirru 高亮\n\n\n返回博客首页: http://blog.tiye.me\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "0"}