{"title": "Python数据分析 - Corwien ", "index": "matplotlib,scipy,numpy,数据分析,python", "content": "从本博客开始，将系统的学习Python的数据分析的六大模块numpy、scipy、matplotlib、pandas、scikit-learn、keras，有关Python的基础知识，可以看我的博客 http://digtime.cn/。\n一、概念\npython特点：简洁，开发效率高，运算速度慢，胶水特性主要有三点：统计分析方法，提取有用的信息，研究、概括、总结。数据分析六大模块：numpy、scipy、matplotlib、pandas、scikit-learn、keras\n\nnumpy：数据结构基础\nscipy：强大的科学计算方法（矩阵分析、信号分析、数理分析...）\nmatplotlib：丰富的可视化套件\npandas：基础数据分析套件\nscikit-learn：强大的数据分析建模块\nkeras：人工神经网络\n\n二、Python环境安装\n1、Anaconda集成包环境安装\n要利用Python进行科学计算，就需要一一安装所需的模块，而这些模块可能又依赖于其它的软件包或库，因而安装和使用起来相对麻烦。幸好有人专门在做这一类事情，将科学计算所需要的模块都编译好，然后打包以发行版的形式供用户使用，Anaconda就是其中一个常用的科学计算发行版。\n\n安装完anaconda，就相当于安装了Python、IPython、集成开发环境Spyder、一些包等等。\n对于Mac、Linux系统，Anaconda安装好后，实际上就是在主目录下多了个文件夹（~/anaconda）而已，Windows会写入注册表。安装时，安装程序会把bin目录加入PATH（Linux/Mac写入~/.bashrc，Windows添加到系统变量PATH），这些操作也完全可以自己完成。以Linux/Mac为例，安装完成后设置PATH的操作是\n# 将anaconda的bin目录加入PATH，根据版本不同，也可能是~/anaconda3/bin\necho 'export PATH=\"~/anaconda2/bin:$PATH\"' >> ~/.bashrc\n\n# 更新bashrc以立即生效\nsource ~/.bashrc\nMAC环境变量设置：\n➜ export PATH=~/anaconda2/bin:$PATH\n➜ conda -V\nconda 4.3.30\n配置好PATH后，可以通过 which conda 或 conda --version 命令检查是否正确。假如安装的是Python 2.7对应的版本，运行python --version或 python -V 可以得到Python 2.7.12 :: Anaconda 4.1.1 (64-bit)，也说明该发行版默认的环境是Python 2.7。\n在终端执行 conda list可查看安装了哪些包:\n\nConda的包管理就比较好理解了，这部分功能与pip类似。\n2、设置编辑器环境和模板\n我的编辑器使用的是 Pycharm，可以给其设置开发环境和模板，进行快速开发。\nAnaconda 设置：\n固定模板设置：\n# -*- coding:utf-8 -*-\n\"\"\"\n@author:Corwien\n@file:${NAME}.py\n@time:${DATE}${TIME}\n\"\"\"\n三、numpy\nNumPy（Numeric Python）系统是Python的一种开源的数值计算扩展。这种工具可用来存储和处理大型矩阵，比Python自身的嵌套列表（nested list structure)结构要高效的多（该结构也可以用来表示矩阵（matrix））。据说NumPy将Python相当于变成一种免费的更强大的MatLab系统。\nnumpy特性:开源，数据计算扩展，ndarray, 具有多维操作, 数矩阵数据类型、矢量处理，以及精密的运算库。专为进行严格的数字处理而产生。\n1、基本操作\n小试牛刀：\n# -*- coding:utf-8 -*-\n\n\"\"\"\n@author: Corwien\n@file: numpyTest.py\n@time: 17/11/5 01:32\n\"\"\"\n\nimport numpy as np\n\ndef main():\n    lst = [[1, 3, 5], [2, 4, 6]]\n    print(type(lst))           # <type 'list'>\n\n    np_lst = np.array(lst)\n    print(type(np_lst))        # <type 'numpy.ndarray'>\n\n    # bool, int, int8, int16, int64 ..., uint8, float, float8\n    np_list = np.array(lst, dtype = np.float)\n\n\n    # 1 numpy property\n    print(np_list.shape)       # pirnt: (2, 3)\n    print(np_list.ndim)        # pirnt: 2\n    print(np_list.dtype)       # pirnt: float64\n    print(np_list.itemsize)    # pirnt: 8\n    print(np_list.size)        # pirnt: 6\n\n    # 2 some arrays\n    print(np.zeros([2, 4]))   #\n    print(np.ones([4, 3]))    #\n    print(\"RandNum:\")\n    print(np.random.rand(2, 4))\n    print(\"RandInt:\")\n    print(np.random.randint(1, 10, 3))\n    print(\"Randn:\")\n    print(np.random.randn(2, 4))\n    \n    print(\"Distribute:\")\n    print(np.random.beta(1, 10, 100))\n\n    # 3 Aarray Opers\n    lst = np.arange(1, 11).reshape([2, -1])\n    print(\"Exp\")\n    print(np.exp(lst))\n\n    print(np.exp2(lst))\n    print(np.sqrt(lst))\n    print(np.sin(lst))\n    print(\"Log\")\n    print(np.log(lst))\n\n    lst1 = np.array([10, 20, 30, 40])\n    lst2 = np.array([1, 2, 4, 5])\n    print(\"Add\")\n    print(lst1 + lst2)   # [11 22 34 45]\n    \n\n\nif __name__ == \"__main__\":\n    main()\n\n2、矩阵操作与线性方程组\n# -*- coding:utf-8 -*-\n\n\"\"\"\n@author: Corwien\n@file: liner.py\n@time: 17/11/6 00:17\n\"\"\"\n\nimport numpy as np\n\n# 4 liner\nfrom numpy.linalg import *\nprint(np.eye(3))\n\nlst = np.array([[1, 2],\n                [3, 4]])\n\nprint(\"Inv: \")\nprint(inv(lst))\nprint(\"T: \")\nprint(lst.transpose())\n\nprint(\"Det:\")\nprint(det(lst))\nprint(eig(lst))\n\ny = np.array([[5.], [7.]])\nprint(\"Slove\")\nprint(solve(list, y))\n\n四、matplotlib\nmatplotlib 是用来绘图表的，官网 matplotlib.org\n1、正弦和余弦\n# -*- coding:utf-8 -*-\n\n\"\"\"\n@author: Corwien\n@file: matplo.py\n@time: 17/11/6 00:44\n\"\"\"\n\nimport numpy as np\n\ndef main():\n    #line\n    import matplotlib.pyplot as plt\n    x = np.linspace(-np.pi, np.pi, 256, endpoint=True)\n    c, s = np.cos(x), np.sin(x)  # 余弦和正弦\n    plt.figure(1)\n    plt.plot(x, c)\n    plt.plot(x, s)\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    main()\n\n\n具有属性的图：\n# -*- coding:utf-8 -*-\n\n\"\"\"\n@author: Corwien\n@file: matplo.py\n@time: 17/11/6 00:44\n\"\"\"\n\nimport numpy as np\n\ndef main():\n    #line\n    import matplotlib.pyplot as plt\n    x = np.linspace(-np.pi, np.pi, 256, endpoint=True)\n    c, s = np.cos(x), np.sin(x)  # 余弦，正弦\n    plt.figure(1)\n    plt.plot(x, c, color=\"blue\", linewidth=1.0, linestyle=\"-\", label=\"COS\", alpha=0.5)   # x 自变量， c 余弦\n    plt.plot(x, s, \"r*\", label=\"SIN\")\n    plt.title(\"COS & SIN\")\n    ax=plt.gca()\n    ax.spines[\"right\"].set_color(\"none\")\n    ax.spines[\"top\"].set_color(\"none\")\n    ax.spines[\"left\"].set_position((\"data\", 0))\n    ax.spines[\"bottom\"].set_position((\"data\", 0))\n    ax.xaxis.set_ticks_position(\"bottom\")\n    ax.yaxis.set_ticks_position(\"left\")\n\n    for label in ax.get_xticklabels()+ax.get_yticklabels():\n        label.set_fontsize(10)\n        label.set_bbox(dict(facecolor=\"white\", edgecolor=\"None\", alpha=0.2))\n\n    plt.legend(loc=\"upper left\")\n    plt.grid()\n    plt.axis([-1, 1, -0.5, 1])\n    plt.fill_between(x, np.abs(x) < 0.5, c, c > 0.5, color=\"green\",alpha=0.25)\n\n    t = 1\n    plt.plot([t, t], [0, np.cos(t)], \"y\", linewidth=3, linestyle=\"--\")\n    plt.annotate(\"cos(1)\", xy=(t, np.cos(1)), xycoords=\"data\", xytext=(+5, +10),\n                 textcoords=\"offset points\", arrowprops=dict(arrowstyle=\"->\", connectionstyle=\"arc3,rad=.1\"))\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    main()\n\n\n五、scipy\nscipy 是一个数值计算库，官网 https//www.scipy.org,\nscipy包包含致力于科学计算中常见问题的各个工具箱。它的不同子模块相应于不同的应用。像插值，积分，优化，图像处理，，特殊函数等等。\nscipy可以与其它标准科学计算程序库进行比较，比如GSL(GNU C或C++科学计算库)，或者Matlab工具箱。scipy是Python中科学计算程序的核心包;它用于有效地计算numpy矩阵，来让numpy和scipy协同工作。\n在实现一个程序之前，值得检查下所需的数据处理方式是否已经在scipy中存在了。作为非专业程序员，科学家总是喜欢重新发明造轮子，导致了充满漏洞的，未经优化的，很难分享和维护的代码。相反，Scipy程序经过优化和测试，因此应该尽可能使用。\n\nIntegral\nOptimize\nInterpolation\nLiner\nOthers\n\n1.Integral 积分\n# -*- coding:utf-8 -*-\n\n\"\"\"\n@author: Corwien\n@file: sciTest.py\n@time: 17/11/7 00:57\n\"\"\"\n\nimport numpy as np\n\ndef main():\n    #1--integral\n    from scipy.integrate import quad, dblquad\n\n    print(quad(lambda x:np.exp(-x), 0, np.inf))  # print: (1.0000000000000002, 5.842606742906004e-11)\n    # print(dblquad(lambda  t, x:np.exp(-x*t)/t**3, np.inf.lambda x:1, lambda x:np.inf))\n\n\n\nif __name__ == \"__main__\":\n    main()\n   \n六、pandas\npandas官网 为了解决数据分析而创建的库。\n基本操作：\n# -*- coding:utf-8 -*-\n\n\"\"\"\n@author: Corwien\n@file: pandasTest.py\n@time: 17/11/7 00:57\n\"\"\"\n\nimport numpy as np\nimport pandas as pd\n\ndef main():\n    #Data Structure\n    s=pd.Series([i*2 for i in range(1, 11)])\n    print(type(s))\n    dates = pd.date_range(\"20171110\", periods=8)\n    df = pd.DataFrame(np.random.randn(8, 5), index = dates, columns=list(\"ABCDE\"))\n    print df\n    \n\nif __name__ == \"__main__\":\n    main()\n   \n打印结果：\n<class 'pandas.core.series.Series'>\n                   A         B         C         D         E\n2017-11-10 -0.634174 -0.075550  1.029316  0.548124  1.556995\n2017-11-11  1.060133 -0.392410 -0.007274 -0.555487  1.350169\n2017-11-12  0.443465 -0.635941 -0.194218  0.195767 -0.732606\n2017-11-13  0.760449 -0.526587  0.007155  0.554792 -1.230684\n2017-11-14  1.624870 -0.304462  0.646139  0.187635  1.537512\n2017-11-15 -1.312318  1.145372 -0.226041 -0.463330  0.446066\n2017-11-16 -0.586573  0.803408 -1.565312  1.949908 -0.959705\n2017-11-17  0.863814 -0.949896  1.880501 -0.032511 -0.116557\n\nProcess finished with exit code 0\n\n相关文章：Anaconda使用总结Python 网页爬虫 & 文本处理 & 科学计算 & 机器学习 & 数据挖掘兵器谱\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "12"}