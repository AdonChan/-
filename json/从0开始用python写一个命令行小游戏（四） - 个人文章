{"title": "从0开始用python写一个命令行小游戏（四） - 个人文章 ", "index": "python3.x,python", "content": "嗯，还是我，我又回来了——以后文章就两天一篇吧。讲点搞笑的，最近在开发v1.1 beta 3时，发现Python最令程序猿头疼的一点就是没有switch/case语句。要匹配值，就得不停地if...elif...实在头疼。后来我想到了一种方法：字典！于是···\nconfig = {value1: func1, value2: func2...}\nconfig[xxx]()\n哈哈，脑洞清奇吧？好，进入正题！首先，我的前作链接：\n\n从0开始用python写一个命令行小游戏（一）\n从0开始用python写一个命令行小游戏（二）\n从0开始用python写一个命令行小游戏（三）\n\n今天要干什么来着？对了，用户界面！\n用户界面：第二步\n上次我们定义的Game类是这样的：\nimport game_obj as o\n\nclass Game:\n    def __init__(self):\n        o.sunlight = 50\n        o.board = [0] * 10\n        self.sunlight = o.sunlight\n        self.board = o.board\n        import json\n        with open(\"level.json\") as fr:\n            self.steps = json.load(fr)\n但既然是用户界面，那总得输出点东西吧！好，这就定义过一步的方法：\ndef step(self):\n    print(\"Sunlight: %d.\" % self.sunlight)\n    print(\"Current state:\")\n    for obj in self.board:\n        if isinstance(obj, o.GameObject):\n            obj.step()\n        print(obj, end='  ')\n试一试：\nIn [1]: from game import Game\n\nIn [2]: Game().step()\nSunlight: 50.\nCurrent state:\n0  0  0  0  0  0  0  0  0  0  \n\nIn [3]: g = Game()\n\nIn [4]: import game_obj as o\n\nIn [5]: o.Sunflower(0)\n\nIn [6]: g.step()\nSunlight: 25.\nCurrent state:\ns  0  0  0  0  0  0  0  0  0  \n好，可以用“半自动”方式玩游戏了。但自动的僵尸呢？哎，别急，那是后话······\n下集预告\n下次，我要把游戏变得全自动！具体工作：令僵尸自动出现，和让用户用命令控制游戏！这些工作完成后，就可以发布v1.0 beta 1了！！！欢迎继续关注！\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}