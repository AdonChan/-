{"title": "python虚拟环境：envirtualevn 、pyevn - 个人文章 ", "index": "python", "content": "https://www.jianshu.com/p/08c...\nvirtualenv\n虚拟环境是在Python解释器上的一个私有复制，你可以在一个隔绝的环境下安装packages，不会影响到你系统中全局的Python解释器。\n虚拟环境非常有用，因为它可以防止系统出现包管理混乱和版本冲突的问题。为每个应用程序创建一个虚拟环境可以确保应用程序只能访问它们自己使用的包，从而全局解释器只作为一个源且依然整洁干净去更多的虚拟环境。另一个好处是，虚拟环境不需要管理员权限。\n安装\npip install virtualenv\n创建虚拟环境\n// 到某目录下创建虚拟环境\ncd dir\n// 创建一个名为myvenv的虚拟环境\n// no-site-packages  表示不使用系统环境包\nvirtualenv --no-site-packages myvenv\n等价于\nvirtualenv myvenv （目前新版默认不使用系统环境包）\n\n// 指定虚拟环境的python版本，环境命名为ENV2.7\nvirtualenv -p /usr/bin/python2.7 ENV2.7  // 指定虚拟环境的python版本\n\n// python3自带venv，不用安装virtualenv也能运行如下命令\n// 创建一个名字为myvenv的虚拟环境\npython -m venv myvenv\npython -m venv --system-site-packages myvenv\n也是默认全新干净的环境，相反可选的参数\n使虚拟环境指向系统环境包目录（非复制），在系统环境pip新安装包，在虚拟环境就可以使用。\n激活虚拟环境\n不同平台的激活命令不一样\nPlatform     Shell        Command to activate virtual environment\n\nPosix        bash/zsh    $ source dir/bin/activate\n             fish        $ . dir/bin/activate.fish\n             csh/tcsh    $ source dir/bin/activate.csh\n\n\nWindows      cmd.exe        C:> dir\\Scripts\\activate.bat\n             PowerShell     C:> dir\\Scripts\\Activate.ps1\n关闭虚拟环境\ndeactivate\n删除虚拟环境\n删除目录即可\nrm dir_name\nvirtualenv 能够改变当前的python环境，但是还是无法针对特定的项目运行不同的python版本:\ncd project1\npython main.py    // 我想用python2 运行project1\ncd ../project2\npython main.py    // 用python3 运行project2\n如何只使用上面的四条命令就让project1和project2运行在不同的python环境中呢？答案是pyenv\npyenv\n\nhttps://www.jianshu.com/p/a34...\nhttps://github.com/pyenv/pyenv\n\n初识pyenv：一个简单的Python版本管理工具。以前叫做Pythonbrew，Pyenv让你能够方便地切换全局Python版本，安装多个不同的Python版本，设置独立的某个文件夹或者工程目录特异的Python版本，同时创建Python虚拟环境（”virualenv's“）。所有这些操作均可以在类UNIX系统的机器上（Linux和OS X）不需要依赖Python本身执行，而且它工作在用户层，不需要任何sudo操作。那么我们开始吧！\n安装\n// 依赖安装\nsudo apt-get install libbz2-dev\nsudo apt-get install libssl-dev\nsudo apt-get install libreadline6 libreadline6-dev\nsudo apt-get install libsqlite3-dev\n\n// pyenv安装\n见https://github.com/pyenv/pyenv-installer\npyenv install -list // 显示所有能够安装的python版本\npyenv versions    // 显示本机器中pyenv已经安装的python版本，默认有system版本\npyenv install 3.4.0   // 安装某版本的python\npyenv global 3.4.0   // 使某版本成为全局python环境版本\npyenv global system  // 恢复至以前的版本\n\ncd project1\npyenv local 3.4.0 //设置当前目录的python版本\npython -V //显示3.4\n\ncd ../project2\npyenv local system // project2 为系统版本\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}