{"title": "给wxPython事件处理函数传递参数 - Sweetdumplings' Blog ", "index": "gui,python,wxpython", "content": "最近捣鼓Python，也就自然捣鼓上了wxPython。我曾经用过Qt和Gtk+写GUI，但几乎所有的Python书都告诉我说最好用的是wxPython，我没有尝试PyQt和PyGtk就开始研究wxPython了。在Qt和Gtk+之间我更喜欢Qt，因为它跨平台做得很好，而且商业化也不错。但wxWidget给人的感觉就完全不同了。\n\n如果说wxWidgets相对于Qt有什么优势的话，大概就只有体积较小了。从开发效率上看，如果不和Python组合真的比不上Qt；从商业支持上看wxWidgets根本没有。不过和Python组合之后，开发效率大大提高，虽然用来做很正式的商业软件并不合适，但写写小程序还是很方便的。\n\n现在切入正题，wxWidgets是一个事件驱动的体系，对于触发的事件，需要给它挂上相应的事件处理函数。在Python中这个函数的形式是这样的：\n\nwx.Frame.Bind(self, event, handler, source=None, id=-1, id2=-1)\n\n\n在一般使用时，我们基本上只会给定event、handler和source，event是事件的名称，handler是处理函数，source是事件的发生者，比如一个Button1被单击而发生了EVT_BUTTON事件，如果我们用self.OnButton1()来处理，会这么写:\n\nself.Bind(wx.EVT_BUTTON, self.OnButton1, self.Button1)\n\n\n这里self是一个Frame（wxPython中的窗体这样的东西），而Button1是放在这个Frame下面的一个Button，self.OnButton1就是事件处理函数。而wxPython定死了事件处理函数的形式：\n\ndef handler(self,event):\n    ...\n\n\n事件处理函数只能接受两个参数，一个还是self。至于event，一看就知道是那个发生的事件。但这样就有一个问题了：如果我想批量创建一些按钮或者菜单键（我想这种事情是很普遍的），并且希望用同一个函数来处理它们，这个函数该怎样辨别是哪个按钮触发的事件呢？显然我们希望能多传一些参数。Qt实现这一点很容易，但wxWidgets就显得很棘手了。\n\n我并没有用C++写过wxWidgets的程序——确切地讲是复制过一个example的，但是不知道是我英语太差没能找到还是真的没有，我没有在wxWidgets的入门指南中找到编译指令，最后没法编译它。因此我不知道这个限制是不是C++也有，但是Python可以通过lambda来解决这个问题。以下的例子我用的是菜单。\n\n首先我们建一个OnMenusClick函数：\n\ndef OnMenusClick(self, event, mark):\n    ....\n\n\n这个函数多接收一个mark，绑定的时候，就不是把OnMenusClick直接绑定上去，而是传递一个被lambda包装过的函数。下面这个例子就会建立一堆Menu的按键，并给他们编号，OnMenusClick就可以接收到它们的编号了：\n\nmenu=wx.Menu()\nfor i in range(0,N):\n    btn=menu.Append(wx.NewId(), str(i))\n    self.Bind(wx.EVT_MENU, lambda evt, mark=i : self.OnMenusClick(evt,mark) ,btn )\n\n\n完成了！是不是感觉有点magic？关键在于这句lambda\n\nlambda evt, mark=i : self.OnMenusClick(evt,mark)\n\n\n这句实际上产生了只接收evt一个参数的函数，并将其传递给了self.OnMenusClick，这样就能够实现给事件处理函数传递更多参数的目的了。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "3"}