{"title": "[译][Tkinter 教程07] Entry 控件 - 个人文章 ", "index": "python,tkinter", "content": "已获原作者授权. 原系列地址: Python Tkinter\n\n简介\nEntry 是 Tkinter 用来接收字符串等输入的控件. 该控件允许用户输入一行文字. 如果用户输入的文字长度长于 Entry 控件的宽度时, 文字会向后滚动. 这种情况下所输入的字符串无法全部显示. 点击箭头符号可以将不可见的文字部分移入可见区域. 如果你想要输入多行文本, 就需要使用 Text 控件. Entry 控件只能使用预设字体.使用 Entry 控件的语法如下:w = Entry(master, option, ...)master 参数为其父控件, 就是用来放置这个 Entry 的控件. 像其他控件一样, 我们可以在创建 Entry 控件之后再为其指定属性. 因此创建方法中的 options 选项可以为空.下例为一个显示了两个 Entry 控件的应用. 一个用来输入姓氏, 一个用来输入名字. 我们用不带参数的构造方法创建 Entry.\nfrom tkinter import *\n\nmaster = Tk()\nLabel(master, text=\"First Name\").grid(row=0)\nLabel(master, text=\"Last Name\").grid(row=1)\n\ne1 = Entry(master)\ne2 = Entry(master)\n\ne1.grid(row=0, column=1)\ne2.grid(row=1, column=1)\n\nmainloop( )\n上面代码运行后生成如下窗口:\n现在我们已经创建了两个 Entry, 用户可以在这个应用中输入数据. 但我们的程序如何得到这些数据呢?方法很简单, 调用 Entry 类的 get() 方法即可. 我们改进了上面的程序, 添加了 \"退出\" 和 \"显示\" 两个按钮. 在 \"显示\" 按钮上, 我们绑定了 show_entry_fields() 函数, 该函数会调用 Entry 类的 get() 方法. 这样每次 \"显示\" 按钮被点击, Entry 控件的内容就会打印在终端里.\nfrom tkinter import *\n\ndef show_entry_fields():\n   print(\"First Name: %s\\nLast Name: %s\" % (e1.get(), e2.get()))\n\nmaster = Tk()\nLabel(master, text=\"First Name\").grid(row=0)\nLabel(master, text=\"Last Name\").grid(row=1)\n\ne1 = Entry(master)\ne2 = Entry(master)\n\ne1.grid(row=0, column=1)\ne2.grid(row=1, column=1)\n\nButton(master, text='Quit', command=master.quit).grid(row=3, column=0, sticky=W, pady=4)\nButton(master, text='Show', command=show_entry_fields).grid(row=3, column=1, sticky=W, pady=4)\n\nmainloop( )\n上面的代码运行后显示下面的窗口:\n现在我们希望在 Entry 控件上显示默认值. 比如, 我们希望姓氏输入框的默认值为 \"Miller\", 名字输入框的默认值为 \"Jill\". 我们只需要在 Entry 控件创建后加入如下两行代码:\ne1.insert(10,\"Miller\")\ne2.insert(10,\"Jill\")\n如果要在每次点击 \"显示\" 按钮输出内容后, 将 Entry 的显示内容清空呢? 没问题! 我们可以使用 Entry 类的  delete() 方法. 该方法的调用方式为 delete(first, last = None), 两个参数都是整型. 如果只传入一个参数, 则会删除这个数字指定位置 (index) 上的字符. 如果传入两个参数, 则表示删除从 \"first\" 到 \"last\" 指定范围内的字符. 使用 delete(0, END) 可以删除 Entry 控件已输入的全部字符.\nfrom tkinter import *\n\ndef show_entry_fields():\n   print(\"First Name: %s\\nLast Name: %s\" % (e1.get(), e2.get()))\n   e1.delete(0,END)\n   e2.delete(0,END)\n\nmaster = Tk()\nLabel(master, text=\"First Name\").grid(row=0)\nLabel(master, text=\"Last Name\").grid(row=1)\n\ne1 = Entry(master)\ne2 = Entry(master)\ne1.insert(10,\"Miller\")\ne2.insert(10,\"Jill\")\n\ne1.grid(row=0, column=1)\ne2.grid(row=1, column=1)\n\nButton(master, text='Quit', command=master.quit).grid(row=3, column=0, sticky=W, pady=4)\nButton(master, text='Show', command=show_entry_fields).grid(row=3, column=1, sticky=W, pady=4)\n\nmainloop( )\n下个例子中, 我们用更优雅的方式为多个字段创建了多个 Entry 控件. 我们用一个 list 来存储每个 Entry 的描述字符串, 这些字符串用 Label 来显示.\n#!/usr/bin/python3\n\nfrom tkinter import *\nfields = 'Last Name', 'First Name', 'Job', 'Country'\n\ndef fetch(entries):\n   for entry in entries:\n      field = entry[0]\n      text  = entry[1].get()\n      print('%s: \"%s\"' % (field, text)) \n\ndef makeform(root, fields):\n   entries = []\n   for field in fields:\n      row = Frame(root)\n      lab = Label(row, width=15, text=field, anchor='w')\n      ent = Entry(row)\n      row.pack(side=TOP, fill=X, padx=5, pady=5)\n      lab.pack(side=LEFT)\n      ent.pack(side=RIGHT, expand=YES, fill=X)\n      entries.append((field, ent))\n   return entries\n\nif __name__ == '__main__':\n   root = Tk()\n   ents = makeform(root, fields)\n   root.bind('<Return>', (lambda event, e=ents: fetch(e)))   \n   b1 = Button(root, text='Show',\n          command=(lambda e=ents: fetch(e)))\n   b1.pack(side=LEFT, padx=5, pady=5)\n   b2 = Button(root, text='Quit', command=root.quit)\n   b2.pack(side=LEFT, padx=5, pady=5)\n   root.mainloop()\n上面的代码运行后产生如下窗口:\n简易计算器\n我们并非要写一个功能全面的计算器, 我们要用 Entry 接受一个数学表达式并计算它, 并打印计算结果.\nfrom Tkinter import *\nfrom math import *\ndef evaluate(event):\n    res.configure(text = \"Ergebnis: \" + str(eval(entry.get())))\nw = Tk()\nLabel(w, text=\"Your Expression:\").pack()\nentry = Entry(w)\nentry.bind(\"<Return>\", evaluate)\nentry.pack()\nres = Label(w)\nres.pack()\nw.mainloop()\n我们的计算器显示如下:\n利率计算器\n下面的公式可以用来计算余额: 给定本金 B0, 期利率 r, 在 k 期结算后的余额 Bk:\n其中:\nrate = 百分比表示的利率, 比如 3%\ni = rate / 100, 以小数表示的年利率\nr = 期利率 = i / 12\nB<sub>0</sub> = 初始余额, 即本金\nB<sub>k</sub> = k 期后的余额\nk = 期数 (月数)\np = 每月利息\n如果要每月结息, 我们就要计算每月应付利息. 我们将公式中的 Bn 设为 0, 得到以下公式:\n其中:\nn = 总期数 (总月数)\n#!/usr/bin/python3\n\nfrom tkinter import *\nfields = ('Annual Rate', 'Number of Payments', 'Loan Principle', 'Monthly Payment', 'Remaining Loan')\n\ndef monthly_payment(entries):\n   # period rate:\n   r = (float(entries['Annual Rate'].get()) / 100) / 12\n   print(\"r\", r)\n   # principal loan:\n   loan = float(entries['Loan Principle'].get())\n   n =  float(entries['Number of Payments'].get())\n   remaining_loan = float(entries['Remaining Loan'].get())\n   q = (1 + r)** n\n   monthly = r * ( (q * loan - remaining_loan) / ( q - 1 ))\n   monthly = (\"%8.2f\" % monthly).strip()\n   entries['Monthly Payment'].delete(0,END)\n   entries['Monthly Payment'].insert(0, monthly )\n   print(\"Monthly Payment: %f\" % float(monthly))\n\ndef final_balance(entries):\n   # period rate:\n   r = (float(entries['Annual Rate'].get()) / 100) / 12\n   print(\"r\", r)\n   # principal loan:\n   loan = float(entries['Loan Principle'].get())\n   n =  float(entries['Number of Payments'].get()) \n   q = (1 + r)** n\n   monthly = float(entries['Monthly Payment'].get())\n   q = (1 + r)** n\n   remaining = q * loan  - ( (q - 1) / r) * monthly\n   remaining = (\"%8.2f\" % remaining).strip()\n   entries['Remaining Loan'].delete(0,END)\n   entries['Remaining Loan'].insert(0, remaining )\n   print(\"Remaining Loan: %f\" % float(remaining))\n\ndef makeform(root, fields):\n   entries = {}\n   for field in fields:\n      row = Frame(root)\n      lab = Label(row, width=22, text=field+\": \", anchor='w')\n      ent = Entry(row)\n      ent.insert(0,\"0\")\n      row.pack(side=TOP, fill=X, padx=5, pady=5)\n      lab.pack(side=LEFT)\n      ent.pack(side=RIGHT, expand=YES, fill=X)\n      entries[field] = ent\n   return entries\n\nif __name__ == '__main__':\n   root = Tk()\n   ents = makeform(root, fields)\n   root.bind('', (lambda event, e=ents: fetch(e)))   \n   b1 = Button(root, text='Final Balance',\n          command=(lambda e=ents: final_balance(e)))\n   b1.pack(side=LEFT, padx=5, pady=5)\n   b2 = Button(root, text='Monthly Payment',\n          command=(lambda e=ents: monthly_payment(e)))\n   b2.pack(side=LEFT, padx=5, pady=5)\n   b3 = Button(root, text='Quit', command=root.quit)\n   b3.pack(side=LEFT, padx=5, pady=5)\n   root.mainloop()\n在 Python3 中, 上面程序显示如下窗口:\n\n全系列:[译][Tkinter 教程01] 入门: Label 控件[译][Tkinter 教程02] Message 控件[译][Tkinter 教程03] Button 控件[译][Tkinter 教程04] Variable 类[译][Tinkter 教程05] Radiobutton 控件[译][Tkinter 教程06] Checkbox 控件[译][Tkinter 教程07] Entry 控件[译][Tkinter 教程08] Canvas 图形绘制[译][Tkinter 教程09] Scale 控件[译][Tkinter 教程10] Text 控件[译][Tkinter 教程11] 对话框和消息框[译][Tkinter 教程12] 布局管理 (Pack Place Grid)[译][Tkinter 教程13] Mastermind 游戏[译][Tkinter 教程14] menu 菜单[译][Tkinter 教程15] event 事件绑定\n\n译者水平有限, 如有疏漏, 欢迎指正.已获得原作者授权. 原文地址: Entry Widgets\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}