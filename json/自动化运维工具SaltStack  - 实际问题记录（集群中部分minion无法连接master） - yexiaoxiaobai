{"title": "自动化运维工具SaltStack  - 实际问题记录（集群中部分minion无法连接master） - yexiaoxiaobai ", "index": "python,socket.getfqdn,saltstack", "content": "最近在进行 saltstack 的过程中发现，在一个集群中，集群有 20 台服务器，其中只有 5 台能成功连接到 master ，其他的怎么都连接不上，因此进行记录下。\n\n1、首先当时确定的是，我集群中的所有服务器，使用 hostname 都能看到主机名，并且 /etc/sysconfig/network 中的也标记了主机名\n2、minion 也能正常启动\n3、在 master 中发现一个奇怪的现象，即接收的服务器中始终有一个 localhost.localdomain（我在master端已经去掉了的），按照正常道理是不可能有这个的，事出反常即为妖。\n4、minion 部分服务器报错\n\n[CRITICAL] The Salt Master has rejected this minion's public key!\nTo repair this issue, delete the public key for this minion on the Salt Master and restart this minion.\nOr restart the Salt Master in open mode to clean out the keys. The Salt Minion will now exit.\n\n\n基于以上情况进行分析。\n1、拿起我们的 salt 的 debug 进行详细输出调试。\n\n sudo salt-minion -l debug \n\n\n输出的部分内容如下：\n\n[DEBUG   ] Reading configuration from /etc/salt/minion\n[INFO    ] Using cached minion ID from /etc/salt/minion_id: localhost.localdomain\n[DEBUG   ] Configuration file path: /etc/salt/minion\n[INFO    ] Setting up the Salt Minion \"localhost.localdomain\"\n[DEBUG   ] Created pidfile: /var/run/salt-minion.pid\n[DEBUG   ] Reading configuration from /etc/salt/minion\n\n\n看到这个输出，如果你已经启动过了，它会直接去读取 /etc/salt/minion_id 的缓存的，所以首先做的一件事情就是，删除这个缓存\n\nsudo rm /etc/salt/minion\n\n\n最后再次 debug 尝试，输出结果如下：\n\n[DEBUG   ] Reading configuration from /etc/salt/minion\n[DEBUG   ] Guessing ID. The id can be explicitly in set /etc/salt/minion\n[INFO    ] Found minion id from getfqdn(): localhost.localdomain\n[DEBUG   ] Configuration file path: /etc/salt/minion\n[INFO    ] Setting up the Salt Minion \"localhost.localdomain\"\n[DEBUG   ] Created pidfile: /var/run/salt-minion.pid\n[DEBUG   ] Reading configuration from /etc/salt/minion\n\n\n注意：从 debug 中我们能看到 minion 获取 minion id 是通过 getfqdn 方法的，getfqdn 方法获取到的主机名居然是 localhost.localdomain ，尼玛，不对啊，赶紧翻阅下 getfqdn 的源码。并且自己编写了一个测试脚本测试了下结果，测试结果如下：\n\n#!/usr/bin/python env\nimport socket\n\nmyname = socket.getfqdn(socket.gethostname())\nmyaddr = socket.gethostbyname(myname)\nprint \"myname= %s\" % myname\nprint \"myaddr= %s\" % myaddr\n\n\n测试结果如下：\n\nmyname= localhost.localdomain\nmyaddr= 127.0.0.1\n\n\n然后查看了下该 minion 的 /etc/hosts 文件，发现如下配置\n\n127.0.0.1 localhost.localdomain localhost\n127.0.0.1 hostname\n\n\n问题出在 127.0.0.1 hostname 上面，需要修改下把上面的修改成\n\n主机IP 主机名\n\n\n\n  \n  : 注：或者不配置 /etc/hosts 也不会有这有的问题\n  注：你们在修正了 /etc/hosts 中的配置之后，一定要先删除 /etc/salt/minion_id 这个缓存。\n  \n\n\n\n  注：如果你把上面这行注释掉的话，程序会报错如下\n\n\nTraceback (most recent call last):\n  File \"test.py\", line 5, in <module>\n    myaddr = socket.gethostbyname(myname)\nsocket.gaierror: [Errno -2] Name or service not known\n\n\n注：下面是官方文档中关于这方面的相关解析\n\n当minion启动后，它会产生一个 id 值，除非已经在之前的运行过程中产生过并且缓存在配置路径下，默认是 /etc/salt 。minion用这个值作为名称尝试去master进行验证。尝试下面几步操作，以便找到一个不是 localhost 的值:\n\n\n运行Python函数\"socket.getfqdn()\"\n核对\"/etc/hostname\"(仅针对非Windows系统)\n核对\"/etc/hosts\"(在Windows主机上是\"%WINDIR%system32driversetchosts\") 上的包括\"127.0.0.0/8\"在内的所有主机名。\n如果以上都不能产生除\"localhost\"以外的id，那么就会按顺序检测minion上的IP地址列表(排除\"127.0.0.0/8\"在内)。如果存在，就会使用第一个公网路由IP地址，否则就会使用第一个私网路由IP地址。\n\n如果所有这些都失败了，那么就会使用\"localhost\"作为备选。\n\n\n  : 注解:覆盖\"id\"值，minion的id也可以通过minion配置文件中 :conf_minion:id选项手动指定。如果指定这个配置值，它会覆盖所有其他来源的\"id\"值。现在minion已经运行了，它会产生秘钥对并且尝试连接master。下一步就是折回master服务器接受新minion的公钥。\n\n\n困扰了一天的问题终于解决，PS：主要还是需要加强熟悉下 SaltStack 的整体处理流程，后续加强多读读源码。。问题就是进步的原动力。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "9"}