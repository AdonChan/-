{"title": "Mac Docker 创建第一个Django 应用，Part 1 - 个人文章 ", "index": "django,docker,python", "content": "Mac Docker 创建第一个Django 应用， Part 1\n第一步：在Mac构建Django 容器\n原文：Quickstart: Compose and Django  翻译整理：CK\n这篇文章将指导你如何用Docker Compose 配置和启动一个简单的 Django + PostgreSQL 应用。请先确保您已安装Compose：Install Docker Compose\n定义您的项目组件\n您需要创建一个Dockerfile 和一个Python 依赖文件，以及一个docker-compose.yml文件\n\n创建一个项目目录\n创建一个新的Dockerfile在当前项目目录下\n添加内容到Dockerfile\n\nFROM python:3\nENV PYTHONUNBUFFERED 1\nRUN mkdir /code\nWORKDIR /code\nADD requirements.txt /code/\nRUN pip install -r requirements.txt\nADD . /code/\n\n保存Dockerfile\n创建一个 requirements.txt\n\nDockerfile 中的 RUN pip install -r requirements.txt 将会用到它\n添加所需的软件到requirements.txt\nDjango>=1.8,<2.0\npsycopg2\n\n保存requirements.txt\n创建一个docker-compose.yml\n\ndocker-compose.yml文件里描述了您的app所需要的服务。compose一词我认为翻译为编制更恰当。在这里我们需要一个web服务器，一个数据服务器。编制文件指明了我们这些服务所用的镜像，他们如何连接，哪些卷要挂载到容器。最后定义服务端口。\nversion: '3'\n\nservices:\n  db:\n    image: postgres\n  web:\n    build: .\n    command: python3 manage.py runserver 0.0.0.0:8000\n    volumes:\n      - .:/code\n    ports:\n      - \"8000:8000\"\n    depends_on:\n      - db\n保存 docker-compose.yml\n创建一个Django项目\n\n转到项目根目录\n用docker-compose 创建项目\n\ndocker-compose run web django-admin.py startproject composeexample . \ndocker将启动web容器，并在里面执行 django-admin.py startproject composeexample，因为web镜像不存在所以compose先从当前目录建立它，见 build: 因为挂在了当前目录，所以新创建的项目文件在docker-compose run执行完推出后可以看到\nls 项目目录\n$ ls -l\n drwxr-xr-x 2 root   root   composeexample\n -rw-rw-r-- 1 user   user   docker-compose.yml\n -rw-rw-r-- 1 user   user   Dockerfile\n -rwxr-xr-x 1 root   root   manage.py\n -rw-rw-r-- 1 user   user   requirements.txt\n连接数据库\n\n打开composeexample/settings.py\n替换DATABASE = …项\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'postgres',\n        'USER': 'postgres',\n        'HOST': 'db',\n        'PORT': 5432,\n    }\n} \n这些参数是根据docker-compose.yml所指定的postgres Docker 镜像决定的。\n\n保存\n执行docker-compose up\n\n$ docker-compose up\ndjangosample_db_1 is up-to-date\nCreating djangosample_web_1 ...\nCreating djangosample_web_1 ... done\nAttaching to djangosample_db_1, djangosample_web_1\ndb_1   | The files belonging to this database system will be owned by user \"postgres\".\ndb_1   | This user must also own the server process.\ndb_1   |\ndb_1   | The database cluster will be initialized with locale \"en_US.utf8\".\ndb_1   | The default database encoding has accordingly been set to \"UTF8\".\ndb_1   | The default text search configuration will be set to \"english\".\n\n. . .\n\nweb_1  | May 30, 2017 - 21:44:49\nweb_1  | Django version 1.11.1, using settings 'composeexample.settings'\nweb_1  | Starting development server at http://0.0.0.0:8000/\nweb_1  | Quit the server with CONTROL-C.\n此时，你的Django app应该运行在8000端口上了。浏览器打开http://localhost:8000应该能看到\n列出所有容器：\n$ docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES\ndef85eff5f51        django_web          \"python3 manage.py...\"   10 minutes ago      Up 9 minutes        0.0.0.0:8000->8000/tcp   django_web_1\n678ce61c79cc        postgres            \"docker-entrypoint...\"   20 minutes ago      Up 9 minutes        5432/tcp                 django_db_1\n关闭容器\nCtrl-C  或者新开一个terminal执行： docker-compose down\n部署已有的项目到容器\n\n将docker-compose.yml requirements.txt Dockerfile 拷贝到Django项目的根目录，应与manage.py同目录\n运行docker-compose up\n\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}