{"title": "Python Mysql 数据库操作 - Yi_Zhi_Yu的世界 ", "index": "mysql,python", "content": "使用Python 进行数据库的操作\n前奏\n为了能操作数据库， 首先我们要有一个数据库， 所以要首先安装Mysql， 然后创建一个测试数据库python_test用以后面的测试使用\n    CREATE DATABASE `python_test` CHARSET UTF8\n导入数据库模块\n    import MySQLdb\n连接数据库\n    con = MySQLdb.connect(host=\"localhost\", user=\"root\", passwd=\"******\",db=\"python_test\",port=3306)\n在这里， 我们虽然拿到了python的数据库连接， 但是不能在这个对象上直接对数据库进行操作， 还需要获取对应的操作游标才能进行数据库的操作，所以还需要进行下面的操作\n    cur = con.cursor()\n创建表格\n    cur.execute('create table stu_info (name char(128) not null default \"\", age tinyint(3) not null default 0, sex enum(\"man\",\"femal\") not null default \"man\") engine=innodb charset=utf8')\n    #0L\ncur.execute 返回执行的sql 影响的行数， 因为这里是创建数据库， 所以是0L行\n但到这里还并没有真正执行了sql语句， 必须使用MySQLdb.commit才是真正执行完毕\n    con.commit()\n到这里， 我们的表格才算真正创建完成\n同理， 往表中写数据， 也是一样的操作流程 execute ==> commit\n不过， 写入数据的execute 稍有不同， 如下\n更新表数据\n往表中写入数据时， 执行execute 方法， 有两种方式， 一种是直接execute(sql)， 然后commit 完成， sql里是写入的sql 语句\n    cur.execute(\"insert into stu_info (name, age, sex) values ('Yi_Zhi_Yu',25,'man')\")\n    con.commit()\n这会直接写入表中，但还有另外一种方式. \nexecute 可以接受两个参数， 第一个参数是sql语句， 不过这个sql中的values的内容使用占位符%s表示，第二个参数是实际的写入的values列表， 如下：\n    cur.execute(\"insert into stu_info (name, age, sex) values (%s,%s,%s)\", (\"Tony\",25, \"man\"))\n    con.commit()\n这种方式与第一中方式相比， 更清晰一些， 安全性也更好， 能有效防止sql注入\n另外， cursor还有一个executemany, 参数和execute一样， 不过第二个参数可以传递多列表值， 达到多次执行某个语句的效果\n    cur.executemany(\"insert into stu_info (name, age, sex) values (%s,%s,%s)\",((\"LiMei\",26,\"femal\"),(\"YuanYuan\",28,\"femal\")))\n    con.commit()\n这里实际上就是执行了两次插入操作\n数据查询\n直接看例子\n    cur.execute(\"select * from stu_info\")\n    stus = cur.fetchall() \n#stus 已经是查询的结果结合了， 格式如下：\n    (('Yi_Zhi_Yu', 25, 'man'),\n     ('Tony', 25, 'man'),\n     ('LiMei', 26, 'femal'),\n     ('YuanYuan', 28, 'femal'))\ntuple形式， 我们可以通过循环输出\n     for stu in stus:\n            print \"name: %s; age: %d; sex: %s\" %(stu[0], stu[1], stu[2])\n输出：\n    name: Yi_Zhi_Yu; age: 25; sex: man\n    name: Tony; age: 25; sex: man\n    name: LiMei; age: 26; sex: femal\n    name: YuanYuan; age: 28; sex: femal\n那上面的查询虽然得到了每行的数据， 但结果集中并没有字段名， 如果要返回字段名， 如下操作：\n    cur = con.cursor(cursorclass=MySQLdb.cursors.DictCursor)\n    cur.execute(\"select * from stu_info\")\n    cur.fetchall()\n返回的结果集：\n    ({'age': 25, 'name': 'Yi_Zhi_Yu', 'sex': 'man'},\n     {'age': 25, 'name': 'Tony', 'sex': 'man'},\n     {'age': 26, 'name': 'LiMei', 'sex': 'femal'},\n     {'age': 28, 'name': 'YuanYuan', 'sex': 'femal'})\n每个元素都是一个dict, 以key-value的形式展示了每个字段和对应的值\n总结\nPython 中对数据的操作， 增删改均要在指针对象执行了sql语句后， 使用连接对象commit， 查询的结果使用指针对象的fetch系列方法获取\nPS: 以上皆为学习笔记， 难免有错， 欢迎指正\n\n                ", "mainLikeNum": ["3 "], "mainBookmarkNum": "20"}