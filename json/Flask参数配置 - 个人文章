{"title": "Flask参数配置 - 个人文章 ", "index": "flask,python", "content": "在Flask中的参数配置保存在Flask对象的config属性中。\nconfig实际上继承于字典，可以像修改字典一样修改它：\napp = Flask(__name__)\napp.config['TESTING'] = TRUE\n相应的配置会直接推送到Flask对象上，所以你可以直接在Flask对象上读写:\napp.testing = True\n可以使用dict.update()方法来批量更新键值对：\napp.config.update(\n    TESTING=True,\n    SECRETE_KEY=b'^*&BKJH^*'\n)\n主要有三种参数配置方法：\n\n1. 基本配置方法\n即通常的 ‘字典式’ 配置方法，如我们要配置SQLAlchemy中的数据库连接URL：\napp.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+mysqlconnector://test:test@localhost/test'\n\n2. 从文件读取\n相对于1中的配置方法，一个更为优雅解决方法是从单独的文件中读取配置。\napp = Flask(__name__)\napp.config.from_object('yourapplication.default_settings')\napp.config.from_envvar('YOURAPPLICATION_SETTINGS')\n其中 app.config.from_envvar('YOURAPPLICATION_SETTINGS') 的用法和 app.config.from_pyfile(os.environ['YOURAPPLICATION_SETTINGS']) ，但是app.config.from_envvar的error message更为友好。\n\n3. 从环境变量读取\n对于某些敏感信息（如加密密钥）并不适合放在程序包中。在Linux中，我们可以这样在环境变量中设置：\n$ export SECRET_KEY='5f352379324c22463451387a0aec5d2f'\n$ export DEBUG=False\n有一点需要注意的是，环境变量中设置的值都是字符串--并不会直接解析为python中的类型.下面是一个使用环境变量的例子：\n# Example configuration\nimport os\n\nENVIRONMENT_DEBUG = os.environ.get(\"DEBUG\", default=False)\nif ENVIRONMENT_DEBUG.lower() in (\"f\", \"false\"):\n    ENVIRONMENT_DEBUG = False\n\nDEBUG = ENVIRONMENT_DEBUG\nSECRET_KEY = os.environ.get(\"SECRET_KEY\", default=None)\nif not SECRET_KEY:\n    raise ValueError(\"No secret key set for Flask application\")\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}