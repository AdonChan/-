{"title": "Django 博客开发教程 13 - 已知小问题修正 - Django学习小组 ", "index": "开发,后端,web,django,python", "content": "在模型中指定排序\n为了让文章（Post）按发布时间逆序排列，即最新发表的文章排在文章列表的最前面，我们对返回的文章列表进行了排序，即各个视图函数中都有类似于 Post.objects.all().order_by('-created_time') 这样的代码，这导致了很多重复。因为只要是返回的文章列表，基本都是逆序排列的，因此我们可以在 Post 模型中指定 Post 的自然排序方式。\nDjango 允许我们在 models.Model 的子类里定义一个 Meta 的内部类，这个内部类通过指定一些属性来规定这个类该有的一些特性，例如在这里我们要指定 Post 的排序方式。首先看到 Post 的代码：\nblog/models.py\n\n@python_2_unicode_compatible\nclass Post(models.Model):\n    ...\n    created_time = models.DateTimeField()\n    ...\n\n    def __str__(self):\n        ...\n        \n    def get_absolute_url(self):\n        ...\n现在在 Post 类的内部定义一个 Meta 类，并指定排序属性：\nblog/models.py\n\n@python_2_unicode_compatible\nclass Post(models.Model):\n    ...\n    created_time = models.DateTimeField()\n    ...\n\n    def __str__(self):\n        ...\n        \n    def get_absolute_url(self):\n        ...\n    \n    class Meta:\n        ordering = ['-created_time']\nordering 属性用来指定文章排序方式，['-created_time'] 指定了依据哪个属性的值进行排序，这里指定为按照文章发布时间排序，且负号表示逆序排列。列表中可以用多个项，比如 ordering = ['-created_time', 'title'] ，那么首先依据 created_time 排序，如果 created_time  相同，则再依据 title 排序。这样指定以后所有返回的文章列表都会自动按照 Meta 中指定的顺序排序，因此可以删掉视图函数中对文章列表中返回结果进行排序的代码了。\n完善跳转链接\n导航栏有一个 Black & White 的 Logo，我们希望点击它就能回到首页面，只修修改一下超链接即可。打开 base.html，修改 Logo 处的超链接：\n<header id=\"site-header\">\n  <div class=\"row\">\n      <div class=\"logo\">\n        - <h1><a href=\"index.html\"><b>Black</b> &amp; White</a></h1>\n        + <h1><a href=\"{% url 'blog:index' %}\"><b>Black</b> &amp; White</a></h1>\n      </div>\n  ...\n  </div>\n</header>\n另外导航栏还有一个首页导航按钮，也希望点击它就能回到首页面，修改的任务作为练习交给你了。\n当然还有一些跳转可以完善，比如文章标题下有分类、发布时间、作者、评论量、阅读量等信息，可以设置点击分类跳转到分类页面；点击评论量就跳转到文章详情页的评论处等，这些细节部分不涉及新知识，就当做练习交给你自己完成了。\n显示正确的评论量\n有两处地方显示的评论量，显示评论量的方法很简单。回顾一下我们是如何获取某篇 post 的下的评论列表的？我们使用的是 post.comment_set.all()。all 方法返回该 post 关联的评论列表。此外模型管理器（comment_set 是一个特殊的模型管理器）还有一个 count 方法，返回的是数量，即 post 下有多少条评论，我们可以直接在模板中调用这个方法：{{ post.comment_set.count }}。将评论量替换成该模板变量就可以正确显示文章的评论数了。\n结束了么\n我们通过一个博客实战项目，了解了 Django 基本的开发技术。包括如何编写模型（Model）、如何编写视图函数（View）、如何使用 Django 内置的模板系统（Template）以及如何配置路由（URL），这四大模块是 Django 开发的核心所在，现在我们已经能够基本掌握这些模块的使用方法了。\n但是，还没完...\nDjango 提供的不仅仅是这些，我们的博客也不仅仅只有这些功能。如何实现标签云效果？如何给博客提供 RSS 订阅服务？如果实现文章搜索？如果网站需要提供用户系统，如何实现用户的注册登录？如何部署到服务器上让他人通过公网访问？这些需求都可以利用 Django 提供的 API 来实现。\n另外，Django 还有海量的第三方应用来提供更加丰富的功能。比如当他人评论了我的文章时，如何收到通知提醒？网站需要提供新浪微博、微信等社交账号的登录等等，这些都可以借助 Django 第三方应用快速完成，而我们自己只需要写很少量的代码就可以了。\n所以，让我们再接再厉，进入到 Django 博客开发进阶教程，学习更多的 Django 开发技巧，为博客提供更多的功能吧！\n总结\n本章节的代码位于：Step13: fix some issues。\n如果遇到问题，请通过下面的方式寻求帮助。\n\n在 已知小问题修正- 追梦人物的博客 的评论区留言。\n将问题的详细描述通过邮件发送到 djangostudyteam@163.com，一般会在 24 小时内回复。\n\n更多Django 教程，请访问 追梦人物的博客。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}