{"title": "070. Climbing Stairs - LeetCode刷题记 ", "index": "python,dynamic-programming", "content": "You are climbing a stair case. It takes n steps to reach to the top.\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\nNote: Given n will be a positive integer. Example:\nInput: 2\nOutput: 2\nExplanation: There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps\nInput: 3\nOutput: 3\nExplanation: There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step\nSolution:\nclass Solution1:\n    \"\"\"\n    递归做法\n    \"\"\"\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        return self.climbStairs(n-1) + self.climbStairs(n-2)\n\n\nclass Solution2:\n    \"\"\"\n    非递归做法\n    \"\"\"\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        pre_1_step = 1\n        pre_2_step = 0\n        count = 1\n        for i in range(1, n+1):\n            count = pre_1_step + pre_2_step\n            pre_2_step = pre_1_step\n            pre_1_step = count\n        return count\n\nclass Solution:\n    \"\"\"\n    非递归做法,比上一个方法快\n    \"\"\"\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        F = [0, 1]\n        count = 1\n        for i in range(n):\n            count = F[0] + F[1]\n            F[0] = F[1]\n            F[1] = count\n        return count\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}