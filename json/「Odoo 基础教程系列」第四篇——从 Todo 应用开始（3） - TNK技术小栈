{"title": "「Odoo 基础教程系列」第四篇——从 Todo 应用开始（3） - TNK技术小栈 ", "index": "python,odoo,openerp,后端开发", "content": "\n在这一篇教程中，将会涉及到外键字段，可以将两个模型关联起来，然后很方便地获取到对应的数据。\n关联字段\n这一小节里，我们会给待办事项加上分类，并且这个分类可以让用户自己创建维护。我们需要先创建一个新的模型 TodoCategory，然后将它和待办事项关联起来：\n# models.py\nclass TodoCategory(models.Model):\n    _name = 'todo.category'\n    _description = '分类'\n\n    name = fields.Char(u'名称')\n    task_ids = fields.One2many('todo.task', 'category_id', string=u'待办事项')\n    count = fields.Integer(u'任务数量', compute='_compute_task_count')\n\n    @api.depends('task_ids')\n    @api.multi\n    def _compute_task_count(self):\n        pass\n\n\nclass TodoTask(models.Model):\n    _name = 'todo.task'\n    _description = '待办事项'\n    # ...\n    category_id = fields.Many2one('todo.category', string=u'分类')\n在上面的代码中，我们定义了一个 todo.category 模型，包含三个字段，然后添加了一个 category_id 到待办事项模型中，我们重点来看看 category_id 和 task_ids 这两个字段。\n这两个字段都是关联字段，一个是 Many2one，另一个是 One2many，还有一种我们暂时不会讲到的 Many2many 多对多的关联字段。Many2one 有一个必填的属性 comodel_name 表示要关联的模型的 _name，这个字段的值可能是 0 个或 1 个所关联对象的记录集，我们可以通过这个字段直接获取到所关联的数据对象，而不需要自己去查找对应的实例。另一个关联字段 One2many 同样有必填的属性 comodel_name，同时还有一个 inverse_name 属性，表示的是与当前模型所关联的模型（comodel_name 所指的模型）的 Many2one 字段的字段名，在此例中即 category_id，通过 One2many 字段我们可以直接获取到所有关联了当前记录的数据集。在这个例子中，假设我们有一个分类是「工作」，也就是说我们可以通过工作这个分类的 task_ids 这个字段获取到所有待办事项中 category_id 所关联的分类是「工作」的所有待办事项。\n回到我们的代码中，我们看到分类模型中还有一个计算字段 count，我们希望可以看到在一个分类下有多少待办事项，所以需要用到上一篇教程中所讲到的计算字段，这里就当作是复习，一起来完成这个字段的计算逻辑：\n# models.py\n@api.depends('task_ids')\n@api.multi\ndef _compute_task_count(self):\n    for record in self:\n        record.count = len(record.task_ids)\n这里的逻辑也十分简单，我们只需要通过记录集的实例对象 record 获取到对应的待办事项，然后用 len() 获取 task_ids 的长度即可。\n好的，模型已经有了，还差了点什么呢？没错，还少了菜单和视图，这里我们直接给出代码，如果还有不理解怎么创建菜单和视图的小伙伴，记得翻看一下之前的教程内容。\n<!-- menus.xml -->\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<odoo>\n    <data>\n        <!-- 主菜单定义 -->\n        <menuitem id=\"menu_todo\" name=\"Todo\"/>\n        <menuitem id=\"menu_todo_submenu\" parent=\"menu_todo\" name=\"待办事项\"/>\n        <!-- 菜单动作定义 -->\n        <record id=\"action_todo_task\" model=\"ir.actions.act_window\">\n            <field name=\"name\">待办事项</field>\n            <field name=\"res_model\">todo.task</field>\n            <field name=\"view_type\">form</field>\n            <field name=\"view_mode\">tree,form</field>\n            <field name=\"target\">current</field>\n        </record>\n    \n        <record id=\"action_todo_category\" model=\"ir.actions.act_window\">\n            <field name=\"name\">分类</field>\n            <field name=\"res_model\">todo.category</field>\n            <field name=\"view_type\">form</field>\n            <field name=\"view_mode\">tree,form</field>\n            <field name=\"target\">current</field>\n        </record>\n        <!-- 子菜单定义 -->\n        <menuitem action=\"action_todo_category\" id=\"submenu_todo_category\" name=\"分类\" parent=\"menu_todo_submenu\" sequence=\"8\"/>\n        <menuitem action=\"action_todo_task\" id=\"submenu_todo_task\" name=\"待办事项\" parent=\"menu_todo_submenu\" sequence=\"10\"/>\n    </data>\n</odoo>\n菜单这里我们多增加了一层，聪明的你们应该能够一眼看出来哪里不同了，如果还是没找到，实际运行之后再观察一下菜单的结构吧~\n<!-- views.xml -->\n<odoo>\n    <data>\n        <!-- ... -->\n        <record id=\"todo_category_view_tree\" model=\"ir.ui.view\">\n            <field name=\"name\">todo.category.view_tree</field>\n            <field name=\"model\">todo.category</field>\n            <field name=\"type\">tree</field>\n            <field name=\"arch\" type=\"xml\">\n                <tree string=\"Todo Category\">\n                    <field name=\"name\"/>\n                    <field name=\"count\"/>\n                </tree>\n            </field>\n        </record>\n    </data>\n</odoo>\nOK，来更新一下模块，然后打开看看效果吧，再尝试创建几个分类，并且给待办事项关联上分类。\n视图\n一切看起来还不错，但是有没有觉得，创建待办事项的表单视图（Form View），以及分类的表单视图，显得有些凌乱了？虽然并不是不能用，但是，我们还是决定要改造一下！\n我们先从分类的视图开始，首先可以看到分类中主要的信息就两个——分类的名称和分类下的任务数量。待办事项我们其实不需要从分类中直接去查看，所以我们大可不必把待办事项的记录显示出来，那我们的目标已经很明确了，隐藏分类表单视图中的待办事项记录，和 Tree View 一样，我们把视图先写好：\n<!-- views.xml -->\n<record id=\"todo_category_view_form\" model=\"ir.ui.view\">\n    <field name=\"name\">todo.category.view_form</field>\n    <field name=\"model\">todo.category</field>\n    <field name=\"type\">form</field>\n    <field name=\"arch\" type=\"xml\">\n        <form string=\"Todo Category\">\n            <sheet>\n                <group>\n                    <group>\n                        <field name=\"name\"/>\n                    </group>\n                    <group>\n                        <field name=\"count\" readonly=\"True\"/>\n                    </group>\n                </group>\n            </sheet>\n        </form>\n    </field>\n</record>\n\n怎么样，看起来是不是舒服多了~再仔细一想，创建分类其实也只需要填一个名称，能不能不需要跳转到专门的表单视图里去创建咧？那当然是没问题的啦，我们可以让分类直接就在 Tree View 中创建而不需要专门到 Form View 中去：\n<!-- views.xml -->\n<record id=\"todo_category_view_tree\" model=\"ir.ui.view\">\n    <field name=\"name\">todo.category.view_tree</field>\n    <field name=\"model\">todo.category</field>\n    <field name=\"type\">tree</field>\n    <field name=\"arch\" type=\"xml\">\n        <tree string=\"Todo Category\" editable=\"bottom\">\n            <field name=\"name\"/>\n            <field name=\"count\"/>\n        </tree>\n    </field>\n</record>\n\n其实很简单，我们只需要在分类的 Tree View 中的 <tree /> 标签中加上 editable=\"bottom\" 这个属性即可，超简单有没有！分类的视图的处理，我们就先到这里，再来看看待办事项的表单视图应该怎么弄比较好。\n待办事项的表单视图，我们只需要简单地排一下版就好啦，没有复杂的处理：\n<!-- views.xml -->\n<record id=\"todo_task_view_form\" model=\"ir.ui.view\">\n    <field name=\"name\">todo.task.view_form</field>\n    <field name=\"model\">todo.task</field>\n    <field name=\"type\">form</field>\n    <field name=\"arch\" type=\"xml\">\n        <form string=\"Todo\">\n            <sheet>\n                <group>\n                    <group>\n                        <field name=\"name\"/>\n                        <field name=\"category_id\"/>\n                        <field name=\"is_done\"/>\n                    </group>\n                    <group>\n                        <field name=\"priority\"/>\n                        <field name=\"deadline\"/>\n                        <field name=\"is_expired\" readonly=\"True\"/>\n                    </group>\n                </group>\n            </sheet>\n        </form>\n    </field>\n</record>\n\n视图部分，就先到这里，这还只是很基础的一小部分内容，后面还会有更多关于视图部分的特性，在我们用到的时候将会给大家讲解。\n今天这篇教程的内容就先到这里了，教程中的代码会更新在我的 GitHub 仓库中。\n仓库地址：Odoo-Tutorial-Demo\n\n                ", "mainLikeNum": ["3 "], "mainBookmarkNum": "0"}