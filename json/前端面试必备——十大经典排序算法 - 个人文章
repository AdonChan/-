{"title": "前端面试必备——十大经典排序算法 - 个人文章 ", "index": "golang,python,c,javascript", "content": "冒泡排序\n冒泡排序（Bubble Sort）也是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。\n作为最简单的排序算法之一，冒泡排序给我的感觉就像 Abandon 在单词书里出现的感觉一样，每次都在第一页第一位，所以最熟悉。冒泡排序还有一种优化算法，就是立一个 flag，当在一趟序列遍历中元素没有发生交换，则证明该序列已经有序。但这种改进对于提升性能来说并没有什么太大作用。\n1. 算法步骤\n\n比较相邻的元素。如果第一个比第二个大，就交换他们两个。\n对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。\n针对所有的元素重复以上的步骤，除了最后一个。\n持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。\n\n2. 动图演示\n\n3. 什么时候最快\n当输入的数据已经是正序时（都已经是正序了，我还要你冒泡排序有何用啊）。\n4. 什么时候最慢\n当输入的数据是反序时（写一个 for 循环反序输出数据不就行了，干嘛要用你冒泡排序呢，我是闲的吗）。\n5. JavaScript 代码实现\nfunction bubbleSort(arr) {\n    var len = arr.length;\n    for (var i = 0; i < len - 1; i++) {\n        for (var j = 0; j < len - 1 - i; j++) {\n            if (arr[j] > arr[j+1]) {        // 相邻元素两两对比\n                var temp = arr[j+1];        // 元素交换\n                arr[j+1] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    return arr;\n}\n6. Python 代码实现\ndef bubbleSort(arr):\n    for i in range(1, len(arr)):\n        for j in range(0, len(arr)-i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    return arr\n7. Go 代码实现\nfunc bubbleSort(arr []int) []int {\n    length := len(arr)\n    for i := 0; i < length; i++ {\n        for j := 0; j < length-1-i; j++ {\n            if arr[j] > arr[j+1] {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n    return arr\n}\n选择排序\n选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。\n1. 算法步骤\n\n首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置\n再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。\n重复第二步，直到所有元素均排序完毕。\n\n2. 动图演示\n\n3. JavaScript 代码实现\nfunction selectionSort(arr) {\n    var len = arr.length;\n    var minIndex, temp;\n    for (var i = 0; i < len - 1; i++) {\n        minIndex = i;\n        for (var j = i + 1; j < len; j++) {\n            if (arr[j] < arr[minIndex]) {     // 寻找最小的数\n                minIndex = j;                 // 将最小数的索引保存\n            }\n        }\n        temp = arr[i];\n        arr[i] = arr[minIndex];\n        arr[minIndex] = temp;\n    }\n    return arr;\n}\n4. Python 代码实现\ndef selectionSort(arr):\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[i]:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr\n5. Go 代码实现\nfunc selectionSort(arr []int) []int {\n    length := len(arr)\n    for i := 0; i < length-1; i++ {\n        min := i\n        for j := i + 1; j < length; j++ {\n            if arr[min] > arr[j] {\n                min = j\n            }\n        }\n        arr[i], arr[min] = arr[min], arr[i]\n    }\n    return arr\n}\n插入排序\n插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的了，因为只要打过扑克牌的人都应该能够秒懂。插入排序是一种最简单直观的排序算法，它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。\n插入排序和冒泡排序一样，也有一种优化算法，叫做拆半插入。\n1. 算法步骤\n\n将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。\n从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）\n\n2. 动图演示\n\n3. JavaScript 代码实现\nfunction insertionSort(arr) {\n    var len = arr.length;\n    var preIndex, current;\n    for (var i = 1; i < len; i++) {\n        preIndex = i - 1;\n        current = arr[i];\n        while(preIndex >= 0 && arr[preIndex] > current) {\n            arr[preIndex+1] = arr[preIndex];\n            preIndex--;\n        }\n        arr[preIndex+1] = current;\n    }\n    return arr;\n}\n4. Python 代码实现\ndef insertionSort(arr):\n    for i in range(len(arr)):\n        preIndex = i-1\n        current = arr[i]\n        while preIndex >= 0 and arr[preIndex] > current:\n            arr[preIndex+1] = arr[preIndex]\n            preIndex-=1\n        arr[preIndex+1] = current\n    return arr\n5. Go 代码实现\nfunc insertionSort(arr []int) []int {\n    for i := range arr {\n        preIndex := i - 1\n        current := arr[i]\n        for preIndex >= 0 && arr[preIndex] > current {\n            arr[preIndex+1] = arr[preIndex]\n            preIndex -= 1\n        }\n        arr[preIndex+1] = current\n    }\n    return arr\n}\n希尔排序\n希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。但希尔排序是非稳定排序算法。\n希尔排序是基于插入排序的以下两点性质而提出改进方法的：\n\n插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；\n但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；\n\n希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。\n1. 算法步骤\n\n选择一个增量序列 t1，t2，……，tk，其中 ti > tj, tk = 1；\n按增量序列个数 k，对序列进行 k 趟排序；\n每趟排序，根据对应的增量 ti，将待排序列分割成若干长度为 m 的子序列，分别对各子表进行直接插入排序。仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。\n\n2. JavaScript 代码实现\nfunction shellSort(arr) {\n    var len = arr.length,\n        temp,\n        gap = 1;\n    while(gap < len/3) {          //动态定义间隔序列\n        gap =gap*3+1;\n    }\n    for (gap; gap > 0; gap = Math.floor(gap/3)) {\n        for (var i = gap; i < len; i++) {\n            temp = arr[i];\n            for (var j = i-gap; j >= 0 && arr[j] > temp; j-=gap) {\n                arr[j+gap] = arr[j];\n            }\n            arr[j+gap] = temp;\n        }\n    }\n    return arr;\n}\n3. Python 代码实现\ndef shellSort(arr):\n    import math\n    gap=1\n    while(gap < len(arr)/3):\n        gap = gap*3+1\n    while gap > 0:\n        for i in range(gap,len(arr)):\n            temp = arr[i]\n            j = i-gap\n            while j >=0 and arr[j] > temp:\n                arr[j+gap]=arr[j]\n                j-=gap\n            arr[j+gap] = temp\n        gap = math.floor(gap/3)\n    return arr\n}\n4. Go 代码实现\nfunc shellSort(arr []int) []int {\n    length := len(arr)\n    gap := 1\n    for gap < gap/3 {\n        gap = gap*3 + 1\n    }\n    for gap > 0 {\n        for i := gap; i < length; i++ {\n            temp := arr[i]\n            j := i - gap\n            for j >= 0 && arr[j] > temp {\n                arr[j+gap] = arr[j]\n                j -= gap\n            }\n            arr[j+gap] = temp\n        }\n        gap = gap / 3\n    }\n    return arr\n}\n归并排序\n归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。\n作为一种典型的分而治之思想的算法应用，归并排序的实现由两种方法：\n\n自上而下的递归（所有递归的方法都可以用迭代重写，所以就有了第 2 种方法）；\n自下而上的迭代；\n\n和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是 O(nlogn) 的时间复杂度。代价是需要额外的内存空间。\n2. 算法步骤\n\n申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；\n设定两个指针，最初位置分别为两个已经排序序列的起始位置；\n比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；\n重复步骤 3 直到某一指针达到序列尾；\n将另一序列剩下的所有元素直接复制到合并序列尾。\n\n3. 动图演示\n\n4. JavaScript 代码实现\nfunction mergeSort(arr) {  // 采用自上而下的递归方法\n    var len = arr.length;\n    if(len < 2) {\n        return arr;\n    }\n    var middle = Math.floor(len / 2),\n        left = arr.slice(0, middle),\n        right = arr.slice(middle);\n    return merge(mergeSort(left), mergeSort(right));\n}\n\nfunction merge(left, right)\n{\n    var result = [];\n\n    while (left.length && right.length) {\n        if (left[0] <= right[0]) {\n            result.push(left.shift());\n        } else {\n            result.push(right.shift());\n        }\n    }\n\n    while (left.length)\n        result.push(left.shift());\n\n    while (right.length)\n        result.push(right.shift());\n\n    return result;\n}\n5. Python 代码实现\ndef mergeSort(arr):\n    import math\n    if(len(arr)<2):\n        return arr\n    middle = math.floor(len(arr)/2)\n    left, right = arr[0:middle], arr[middle:]\n    return merge(mergeSort(left), mergeSort(right))\n\ndef merge(left,right):\n    result = []\n    while left and right:\n        if left[0] <= right[0]:\n            result.append(left.pop(0));\n        else:\n            result.append(right.pop(0));\n    while left:\n        result.append(left.pop(0));\n    while right:\n        result.append(right.pop(0));\n    return result\n6. Go 代码实现\nfunc mergeSort(arr []int) []int {\n    length := len(arr)\n    if length < 2 {\n        return arr\n    }\n    middle := length / 2\n    left := arr[0:middle]\n    right := arr[middle:]\n    return merge(mergeSort(left), mergeSort(right))\n}\n\nfunc merge(left []int, right []int) []int {\n    var result []int\n    for len(left) != 0 && len(right) != 0 {\n        if left[0] <= right[0] {\n            result = append(result, left[0])\n            left = left[1:]\n        } else {\n            result = append(result, right[0])\n            right = right[1:]\n        }\n    }\n\n    for len(left) != 0 {\n        result = append(result, left[0])\n        left = left[1:]\n    }\n\n    for len(right) != 0 {\n        result = append(result, right[0])\n        right = right[1:]\n    }\n\n    return result\n}\n快速排序\n快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 n 个项目要 Ο(nlogn) 次比较。在最坏状况下则需要 Ο(n2) 次比较，但这种状况并不常见。事实上，快速排序通常明显比其他 Ο(nlogn) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来。\n快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。\n快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。\n快速排序的名字起的是简单粗暴，因为一听到这个名字你就知道它存在的意义，就是快，而且效率高！它是处理大数据最快的排序算法之一了。虽然 Worst Case 的时间复杂度达到了 O(n²)，但是人家就是优秀，在大多数情况下都比平均时间复杂度为 O(n logn) 的排序算法表现要更好。\n1. 算法步骤\n\n从数列中挑出一个元素，称为 “基准”（pivot）;\n重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；\n递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；\n\n递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会退出，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。\n2. 动图演示\n\n3. JavaScript 代码实现\nfunction quickSort(arr, left, right) {\n    var len = arr.length,\n        partitionIndex,\n        left = typeof left != 'number' ? 0 : left,\n        right = typeof right != 'number' ? len - 1 : right;\n\n    if (left < right) {\n        partitionIndex = partition(arr, left, right);\n        quickSort(arr, left, partitionIndex-1);\n        quickSort(arr, partitionIndex+1, right);\n    }\n    return arr;\n}\n\nfunction partition(arr, left ,right) {     // 分区操作\n    var pivot = left,                      // 设定基准值（pivot）\n        index = pivot + 1;\n    for (var i = index; i <= right; i++) {\n        if (arr[i] < arr[pivot]) {\n            swap(arr, i, index);\n            index++;\n        }        \n    }\n    swap(arr, pivot, index - 1);\n    return index-1;\n}\n\nfunction swap(arr, i, j) {\n    var temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}\nfunctiion paritition2(arr, low, high) {\n  let pivot = arr[low];\n  while (low < high) {\n    while (low < high && arr[high] > pivot) {\n      --high;\n    }\n    arr[low] = arr[high];\n    while (low < high && arr[low] <= pivot) {\n      ++low;\n    }\n    arr[high] = arr[low];\n  }\n  arr[low] = pivot;\n  return low;\n}\n\nfunction quickSort2(arr, low, high) {\n  if (low < high) {\n    let pivot = paritition2(arr, low, high);\n    quickSort2(arr, low, pivot - 1);\n    quickSort2(arr, pivot + 1, high);\n  }\n  return arr;\n}\n\n4. Python 代码实现\ndef quickSort(arr, left=None, right=None):\n    left = 0 if not isinstance(left,(int, float)) else left\n    right = len(arr)-1 if not isinstance(right,(int, float)) else right\n    if left < right:\n        partitionIndex = partition(arr, left, right)\n        quickSort(arr, left, partitionIndex-1)\n        quickSort(arr, partitionIndex+1, right)\n    return arr\n\ndef partition(arr, left, right):\n    pivot = left\n    index = pivot+1\n    i = index\n    while  i <= right:\n        if arr[i] < arr[pivot]:\n            swap(arr, i, index)\n            index+=1\n        i+=1\n    swap(arr,pivot,index-1)\n    return index-1\n\ndef swap(arr, i, j):\n    arr[i], arr[j] = arr[j], arr[i]\n5. Go 代码实现\nfunc quickSort(arr []int) []int {\n    return _quickSort(arr, 0, len(arr)-1)\n}\n\nfunc _quickSort(arr []int, left, right int) []int {\n    if left < right {\n        partitionIndex := partition(arr, left, right)\n        _quickSort(arr, left, partitionIndex-1)\n        _quickSort(arr, partitionIndex+1, right)\n    }\n    return arr\n}\n\nfunc partition(arr []int, left, right int) int {\n    pivot := left\n    index := pivot + 1\n\n    for i := index; i <= right; i++ {\n        if arr[i] < arr[pivot] {\n            swap(arr, i, index)\n            index += 1\n        }\n    }\n    swap(arr, pivot, index-1)\n    return index - 1\n}\n\nfunc swap(arr []int, i, j int) {\n    arr[i], arr[j] = arr[j], arr[i]\n}\n6. C++版\n //标准分割函数\n Paritition1(int A[], int low, int high) {\n   int pivot = A[low];\n   while (low < high) {\n     while (low < high && A[high] >= pivot) {\n       --high;\n     }\n     A[low] = A[high];\n     while (low < high && A[low] <= pivot) {\n       ++low;\n     }\n     A[high] = A[low];\n   }\n   A[low] = pivot;\n   return low;\n }\n\n void QuickSort(int A[], int low, int high) //快排母函数\n {\n   if (low < high) {\n     int pivot = Paritition1(A, low, high); \n     QuickSort(A, low, pivot - 1);\n     QuickSort(A, pivot + 1, high);\n   }\n }\n堆排序\n堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。堆排序可以说是一种利用堆的概念来排序的选择排序。分为两种方法：\n\n大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列；\n小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列；\n\n堆排序的平均时间复杂度为 Ο(nlogn)。\n1. 算法步骤\n\n创建一个堆 H[0……n-1]；\n把堆首（最大值）和堆尾互换；\n把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置；\n重复步骤 2，直到堆的尺寸为 1。\n\n2. 动图演示\n\n3. JavaScript 代码实现\nvar len;    // 因为声明的多个函数都需要数据长度，所以把len设置成为全局变量\n\nfunction buildMaxHeap(arr) {   // 建立大顶堆\n    len = arr.length;\n    for (var i = Math.floor(len/2); i >= 0; i--) {\n        heapify(arr, i);\n    }\n}\n\nfunction heapify(arr, i) {     // 堆调整\n    var left = 2 * i + 1,\n        right = 2 * i + 2,\n        largest = i;\n\n    if (left < len && arr[left] > arr[largest]) {\n        largest = left;\n    }\n\n    if (right < len && arr[right] > arr[largest]) {\n        largest = right;\n    }\n\n    if (largest != i) {\n        swap(arr, i, largest);\n        heapify(arr, largest);\n    }\n}\n\nfunction swap(arr, i, j) {\n    var temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}\n\nfunction heapSort(arr) {\n    buildMaxHeap(arr);\n\n    for (var i = arr.length-1; i > 0; i--) {\n        swap(arr, 0, i);\n        len--;\n        heapify(arr, 0);\n    }\n    return arr;\n}\n4. Python 代码实现\ndef buildMaxHeap(arr):\n    import math\n    for i in range(math.floor(len(arr)/2),-1,-1):\n        heapify(arr,i)\n\ndef heapify(arr, i):\n    left = 2*i+1\n    right = 2*i+2\n    largest = i\n    if left < arrLen and arr[left] > arr[largest]:\n        largest = left\n    if right < arrLen and arr[right] > arr[largest]:\n        largest = right\n\n    if largest != i:\n        swap(arr, i, largest)\n        heapify(arr, largest)\n\ndef swap(arr, i, j):\n    arr[i], arr[j] = arr[j], arr[i]\n\ndef heapSort(arr):\n    global arrLen\n    arrLen = len(arr)\n    buildMaxHeap(arr)\n    for i in range(len(arr)-1,0,-1):\n        swap(arr,0,i)\n        arrLen -=1\n        heapify(arr, 0)\n    return arr\n5. Go 代码实现\nfunc heapSort(arr []int) []int {\n    arrLen := len(arr)\n    buildMaxHeap(arr, arrLen)\n    for i := arrLen - 1; i >= 0; i-- {\n        swap(arr, 0, i)\n        arrLen -= 1\n        heapify(arr, 0, arrLen)\n    }\n    return arr\n}\n\nfunc buildMaxHeap(arr []int, arrLen int) {\n    for i := arrLen / 2; i >= 0; i-- {\n        heapify(arr, i, arrLen)\n    }\n}\n\nfunc heapify(arr []int, i, arrLen int) {\n    left := 2*i + 1\n    right := 2*i + 2\n    largest := i\n    if left < arrLen && arr[left] > arr[largest] {\n        largest = left\n    }\n    if right < arrLen && arr[right] > arr[largest] {\n        largest = right\n    }\n    if largest != i {\n        swap(arr, i, largest)\n        heapify(arr, largest, arrLen)\n    }\n}\n\nfunc swap(arr []int, i, j int) {\n    arr[i], arr[j] = arr[j], arr[i]\n}\n计数排序\n计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。\n1. 动图演示\n\n2. JavaScript 代码实现\nfunction countingSort(arr, maxValue) {\n    var bucket = new Array(maxValue+1),\n        sortedIndex = 0;\n        arrLen = arr.length,\n        bucketLen = maxValue + 1;\n\n    for (var i = 0; i < arrLen; i++) {\n        if (!bucket[arr[i]]) {\n            bucket[arr[i]] = 0;\n        }\n        bucket[arr[i]]++;\n    }\n\n    for (var j = 0; j < bucketLen; j++) {\n        while(bucket[j] > 0) {\n            arr[sortedIndex++] = j;\n            bucket[j]--;\n        }\n    }\n\n    return arr;\n}\n3. Python 代码实现\ndef countingSort(arr, maxValue):\n    bucketLen = maxValue+1\n    bucket = [0]*bucketLen\n    sortedIndex =0\n    arrLen = len(arr)\n    for i in range(arrLen):\n        if not bucket[arr[i]]:\n            bucket[arr[i]]=0\n        bucket[arr[i]]+=1\n    for j in range(bucketLen):\n        while bucket[j]>0:\n            arr[sortedIndex] = j\n            sortedIndex+=1\n            bucket[j]-=1\n    return arr\n4. Go 代码实现\nfunc countingSort(arr []int, maxValue int) []int {\n    bucketLen := maxValue + 1\n    bucket := make([]int, bucketLen) // 初始为0的数组\n\n    sortedIndex := 0\n    length := len(arr)\n\n    for i := 0; i < length; i++ {\n        bucket[arr[i]] += 1\n    }\n\n    for j := 0; j < bucketLen; j++ {\n        for bucket[j] > 0 {\n            arr[sortedIndex] = j\n            sortedIndex += 1\n            bucket[j] -= 1\n        }\n    }\n\n    return arr\n}\n桶排序\n桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：\n\n在额外空间充足的情况下，尽量增大桶的数量\n使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中\n\n同时，对于桶中元素的排序，选择何种比较排序算法对于性能的影响至关重要。\n1. 什么时候最快\n当输入的数据可以均匀的分配到每一个桶中。\n2. 什么时候最慢\n当输入的数据被分配到了同一个桶中。\n3. JavaScript 代码实现\nfunction bucketSort(arr, bucketSize) {\n    if (arr.length === 0) {\n      return arr;\n    }\n\n    var i;\n    var minValue = arr[0];\n    var maxValue = arr[0];\n    for (i = 1; i < arr.length; i++) {\n      if (arr[i] < minValue) {\n          minValue = arr[i];                // 输入数据的最小值\n      } else if (arr[i] > maxValue) {\n          maxValue = arr[i];                // 输入数据的最大值\n      }\n    }\n\n    //桶的初始化\n    var DEFAULT_BUCKET_SIZE = 5;            // 设置桶的默认数量为5\n    bucketSize = bucketSize || DEFAULT_BUCKET_SIZE;\n    var bucketCount = Math.floor((maxValue - minValue) / bucketSize) + 1;   \n    var buckets = new Array(bucketCount);\n    for (i = 0; i < buckets.length; i++) {\n        buckets[i] = [];\n    }\n\n    //利用映射函数将数据分配到各个桶中\n    for (i = 0; i < arr.length; i++) {\n        buckets[Math.floor((arr[i] - minValue) / bucketSize)].push(arr[i]);\n    }\n\n    arr.length = 0;\n    for (i = 0; i < buckets.length; i++) {\n        insertionSort(buckets[i]);                      // 对每个桶进行排序，这里使用了插入排序\n        for (var j = 0; j < buckets[i].length; j++) {\n            arr.push(buckets[i][j]);                      \n        }\n    }\n\n    return arr;\n}\n基数排序\n基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。\n1. 基数排序 vs 计数排序 vs 桶排序\n基数排序有两种方法：\n这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：\n\n基数排序：根据键值的每位数字来分配桶；\n计数排序：每个桶只存储单一键值；\n桶排序：每个桶存储一定范围的数值；\n\n2. LSD 基数排序动图演示\n\n3. JavaScript 代码实现\n//LSD Radix Sort\nvar counter = [];\nfunction radixSort(arr, maxDigit) {\n    var mod = 10;\n    var dev = 1;\n    for (var i = 0; i < maxDigit; i++, dev *= 10, mod *= 10) {\n        for(var j = 0; j < arr.length; j++) {\n            var bucket = parseInt((arr[j] % mod) / dev);\n            if(counter[bucket]==null) {\n                counter[bucket] = [];\n            }\n            counter[bucket].push(arr[j]);\n        }\n        var pos = 0;\n        for(var j = 0; j < counter.length; j++) {\n            var value = null;\n            if(counter[j]!=null) {\n                while ((value = counter[j].shift()) != null) {\n                      arr[pos++] = value;\n                }\n          }\n        }\n    }\n    return arr;\n}\n参考文档\n\n原文地址\nJS-Sorting-Algorithm\nMERGE SORT 动画演示\n排序效果\n常见排序算法\n维基百科，自由的百科全书\n\n\n                ", "mainLikeNum": ["23 "], "mainBookmarkNum": "169"}