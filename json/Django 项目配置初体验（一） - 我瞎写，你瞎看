{"title": "Django 项目配置初体验（一） - 我瞎写，你瞎看 ", "index": "python,django", "content": "前言\n\n推荐使用 virtualenv 创建 python 虚拟环境，防止因为使用 pip 安装依赖到全局引起版本冲突的问题，PyCharm 默认会生成一个 venv 目录并创建虚拟环境，使用 IDE 自带的终端也会默认激活虚拟环境\n使用的教程基于 Django 1.9.8，现在 Django 已经升级到了 2.0.3，所以可能会有部分写法不太常见\n\n涉及到的知识：\n\n初始化项目\n注册项目\ndatabase 配置\n生成 Django 默认表，没有配置 model\nview 和 template 配置\nurl 配置（包括配置 name）\n静态文件路径配置\n\n\n\n基础环境\n\nPycharm 2018\nDjango 2.0.3\nPython 3.6.4\n\nmxonline start 分支\nPython升级3.6 强力Django+杀手级Xadmin打造在线教育平台\n\n目录结构\n初始结构\n直接采用 PyCharm 初始化一个 Django 项目\n.\n├── db.sqlite3        # 默认的 sqlite 数据库文件\n├── manage.py         # 启动脚本\n├── mxoline           # 主要配置存放路径\n│   ├── __init__.py\n│   ├── settings.py   # 全局配置\n│   ├── urls.py       # url 配置文件\n│   └── wsgi.py\n└──  templates        # html 文件模板\n\n新建 app\n$ django-admin startapp message\n生成的 app 结构：\n└── message          \n    ├── __init__.py  \n    ├── admin.py     \n    ├── apps.py\n    ├── migrations\n    │   └── __init__.py\n    ├── models.py\n    ├── tests.py\n    └── views.py\n\n\n新建其他目录\n\nlog：存放 log 日志\nstatic：存放静态资源\nmedia：存放用户上传的媒体文件\n\n最终的项目结构\n防止项目过大的时候，app 过多难以管理\n.\n├── apps                 # app 集中存放，防止当项目规模变大难以管理\n│   └── message          # 新建的 message app\n├── db.sqlite3           # 默认的 sqlite 数据库\n├── log                  # 存放 log 日志\n├── manage.py            # 启动脚本\n├── media                # 用户上传的媒体文件\n├── mxoline              # 项目主要配置目录\n│   ├── __init__.py      # 初始化文件\n│   ├── __pycache__      # \n│   ├── settings.py      # django 框架全局配置文件\n│   ├── urls.py          # url 映射关系配置文件\n│   └── wsgi.py          # \n├── static               # 静态资源文件\n├── templates            # 模板存放目录\n└── venv                 # PyCharm 创建的虚拟 Python 环境\n    ├── bin\n    ├── include\n    ├── lib\n    ├── pip-selfcheck.json\n    └── pyvenv.cfg\n\n项目初体验\n注册项目\n每次创建一个 App，我们都需要在 settings.py 中进行注册：\n# {BASE_DIR}/mxonline/settings.py\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'apps.message'\n]\n\n可以看到在列表中添加了 message 项目。\n配置数据库\n默认使用的是 sqlite，我们在这里使用 mysql（有坑预警，昨天晚上查了好久）\n进入 setting 文件，默认的配置情况是这个样子的：\n# {BASE_DIR}/mxonline/settings.py\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n修改成这个样子：\n# {BASE_DIR}/mxonline/settings.py\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',  # 使用mysql引擎\n        'NAME': 'test_django',                 # 数据库名称\n        'USER': 'root',                        # 用户\n        'PASSWORD': 'root',                    # 密码\n        'HOST': '127.0.0.1'                    # 地址\n    }\n}\n然后需要安装 mysql 的驱动，mac 下会出现装不上的情况，具体可以参考这里，自行修改 mysql-config 文件。\n# 这里是 mac 的驱动，使用Windows 同学对不起啊。\n$ pip install mysqlclient\nWindows 上需要自行下载 mysql-python 驱动，好像也挺多坑的，按下不表。\n生成数据表\n在 Pycharm 中，点击 Tools 中的 Run manage.py Task，然后就可以在里边快捷的运行 manage.py 提供的各种脚本了。\n如果在命令行中运行的话，需要在下面的命令前边加上 python manage.py\n$ makemigrations\n$ migrate\n输出大概如下：\nbash -cl \"/Users/zhoubao/workplace/python/mxoline/venv/bin/python /Applications/PyCharm.app/Contents/helpers/pycharm/django_manage.py migrate /Users/zhoubao/workplace/python/mxoline\"\n(B[mTracking file by folder pattern:  migrations\nOperations to perform:\n  Apply all migrations: admin, auth, contenttypes, sessions\nRunning migrations:\n  Applying contenttypes.0001_initial... OK\n  Applying auth.0001_initial... OK\n  Applying admin.0001_initial... OK\n可以登录自己的 mysql 数据库查看一下是不是生成了一堆数据表：\n$ mysql -uroot -proot\n$ change test_django\n$ show tables;\n我这里的输出是这个样子的：\n+----------------------------+\n| Tables_in_test_django      |\n+----------------------------+\n| auth_group                 |\n| auth_group_permissions     |\n| auth_permission            |\n| auth_user                  |\n| auth_user_groups           |\n| auth_user_user_permissions |\n| django_admin_log           |\n| django_content_type        |\n| django_migrations          |\n| django_session             |\n+----------------------------+\n10 rows in set (0.00 sec)\n\n当然可以使用 Navicat 进行查看，这里就不截图了。\n查看欢迎页面\nrunserver\n然后可以访问 127.0.0.1:8000，查看是否进入了 django 的默认欢迎页面。\n新建 templates\n先在 templates 中添加一个 form.html 文件（也算是懒到家了，就直接用 curl 拉取了）\n$ cd templates\n$ curl -L https://raw.githubusercontent.com/missxiaolin/python-django/1860df7790a5daefafd2c052c1e3afedbbc48151/templates/mesage_form.html > message_form.html\n\n在 app 中新建 view\n在这里指定 view 和 template 的关系，默认的 templates 目录就是 {BASE_DIR}/templates\n# {BASE_DIR}/apps/message/views.py\nfrom django.shortcuts import render\n\n\ndef getForm(request):\n    return render(request, 'message_form.html')\n\n为 template 创建 url 映射\n目的是将刚才的 form.html 页面呈现出来。\n进入生成项目的时候生成的和项目名称相同的那个目录下边的 urls.py 文件中，和 settings.py 文件同级，文件已经配置好了 /admin 路由：\n# {BASE_DIR}/mxonline/urls.py\nfrom django.contrib import admin\nfrom django.urls import path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n]\n需要添加自己的配置项,这里和 1.9.8 不太一样，不需要使用正则，正则对应的是 re-path：\n# {BASE_DIR}/mxonline/urls.py\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('message.urls'))\n]\napp 内部维护 url 文件\n这里的处理方式和教程中的不太一样，首先教程基于的是 Django 的 1.9.8 版本，配置路由需要使用到正则表达式相关的知识。其次教程在这里对 app 中的 url 进行了处理，我选择的方式则是在 app 自己的目录中维护自己的 url。\n$ cd apps/message\n$ touch urls.py\n# {BASE_URL}/apps/message/urls.py\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.getForm, name=\"go_form\")\n]\n\n在这里可以指定一个 name 参数，这个参数在后边会非常有用，因为在 template 中可以通过 name 来指定 url。\n解决模块引用问题\n在配置完成 url 之后，运行 runserver 之后（或者在命令行中运行 python manage.py runserver），会报错：\nModuleNotFoundError: No module named 'message'\n意思是找不到名字叫 message 的这个模块。\n因为我们的 message app 之前已经被我们放到了 apps 目录下，所以我们的解决方法会有两种：\n不更改 settings.py\n如果不想要修改 settings.py 的话，我们在每次引用 apps 下面的应用的话，需要指定路径。所以修改文件如下：\n# {BASE_DIR}/mxonline/urls.py\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('apps.message.urls'))\n]\n这样虽然能用，但是每次都需要写 apps，不太方便。\n将 apps 设置为模块路径\n这样 Django 就会在 apps 中去寻找 message 模块（app）了：\n# {BASE_DIR}/mxonline/settings.py\nimport sys\nsys.path.insert(0, os.path.join(BASE_DIR, 'apps'))\n这里我选择的是第二种处理方式。\n这样我们点击进去 127.0.0.1:8000 就应该能看到 message_form.html 页面文件了。\n解决 CSS 路径不正确的问题\n在进入页面的时候，我们会发现 css 文件的路径不正确，所以需要在 settings.py 文件中设置 static 路径。\n静态资源路径可以有多个，所以这里使用一个列表进行配置：\n# {BASE_DIR}/mxonline/settings.py\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR,'static')\n]\n再次进入 127.0.0.1:8000，完美~\n后记\n现在只涉及到了项目的配置和一些基础的配置，没有涉及到 Django 请求从开始到完成的任何内容。下篇教程将集中进行记录。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}