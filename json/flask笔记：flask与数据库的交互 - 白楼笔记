{"title": "flask笔记：flask与数据库的交互 - 白楼笔记 ", "index": "sqlalchemy,flask-sqlalchemy,flask,python", "content": "官方推荐使用flask-sqlalchemy，但是这里我个人并不推荐。因为一般后台程序员其实更喜欢使用原生sql语言处理数据库的问题，更重要的一个原因是在项目上线后，处理一些运维问题时，如果可以查看sql语句可以更快找到问题。其次flask-sqlalchemy是在sqlalchemy基础上封装了一层，从编译的角度看效率上肯定会低一些（效率的影响也许微乎其微）。\n基于以上原因，我推荐使用sqlalchemy进行开发。\n下面的两种方式不仅限于flask，其实就是python对数据库操作的具体实现。\n第一种方式(针对查询):\nfrom sqlalchemy import create_engine,text\n#定义数据库属性\nhostname = '127.0.0.1'\nport = '3306'\ndatabase = 'dbname'\nusername = 'root'\npwd = 'pwd'\ndburl = 'mysql+mysqldb://{}:{}@{}:{}/{}'.format(username,pwd,hostname,port,database)\n#创建数据库连接对象\nengine = create_engine(dburl,echo=True)\nwith engine.connect() as con:\n  rs = con.execute('SELECT 1')  # con.execute(text(\"select 1 \"))\n  for row in rs:\n    print row\n\n第二种方式(针对增删改，有事务):\nfrom sqlalchemy import create_engine,text\nfrom sqlalchemy.orm import sessionmaker\n#定义数据库属性\nhostname = '127.0.0.1'\nport = '3306'\ndatabase = 'dbname'\nusername = 'root'\npwd = 'pwd'\ndburl = 'mysql+mysqldb://{}:{}@{}:{}/{}'.format(username,pwd,hostname,port,database)\n#创建数据库连接对象\nengine = create_engine(dburl,echo=True)\nSession = sessionmaker(bind=engine)\nsession = Session()\nsession.execute(\"insert test values ('abc','123')\")\nsession.commit()\nsession.close()\n\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}