{"title": "数据可视化Seaborn从零开始学习教程（二） 颜色调控篇 - Python数据科学 ", "index": "python,数据分析,可视化", "content": "作者：xiaoyu微信公众号：Python数据科学知乎：python数据分析师\n\nSeaborn学习大纲\nseaborn的学习内容主要包含以下几个部分：\n\n\n风格管理\n\n绘图风格设置\n颜色风格设置\n\n\n\n绘图方法\n\n数据集的分布可视化\n分类数据可视化\n线性关系可视化\n\n\n\n结构网格\n数据识别网格绘图\n\n\n本次将主要介绍颜色调控的使用。\n颜色风格设置\n在Seaborn的使用中，是可以针对数据类型而选择合适的颜色，并且使用选择的颜色进行可视化，节省了大量的可视化的颜色调整工作。\n还是一样，在介绍如何使用颜色外观设置之前，我们引入所需要的模块。\n%matplotlib inline\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set(rc={\"figure.figsize\": (6, 6)})\nnp.random.seed(sum(map(ord, \"palettes\")))\n下面所有操作均在 Jupyter notebook 中执行，如果对这个软件还不熟悉的朋友可以参考：Jupyter notebook快速入门教程\n建立调色板\n对于不连续的外观颜色设置而言，最重要的函数恐怕要属color_palette了。这个函数拥有许多方法，让你可以随心所欲的可以生成各种颜色。并且，它可以被任何有palette参数的函数在内部进行使用（palette的中文意思是 \"调色板\"）。\n关于这个函数有几个点需要知道一下：\n\n\ncolor_palette函数可以接受任何seaborn或者matplotlib颜色表中颜色名称（除了jet），也可以接受任何有效的matplotlib形式的颜色列表（比如RGB元组，hex颜色代码，或者HTML颜色名称）。\n这个函数的返回值总是一个由RGB元组组成的列表，无参数调用color_palette函数则会返回当前默认的色环的列表。\n\n\n还有一个相应的函数，是set_palette，它接受与color_palette一样的参数，并会对所有的绘图的默认色环进行设置。当然，你也可以在with语句中使用color_palette来临时的改变默认颜色。\n通常，在不知道数据特点的情况下，要找出并知道哪组颜色对一组数据是最好的有点不太现实。因此，我们将分为多种方式来使用color_palette函数和其它的 seaborn paletee 函数。\n有三种通用的color palette可以使用，它们分别是：qualitative，sequential，diverging。\n1. 分类色板（quanlitative）\nQualitative调色板，也可以说成是 类型 调色板，因为它对于分类数据的显示很有帮助。当你想要区别 不连续的且内在没有顺序关系的 数据时，这个方式是最好的。\n当导入seaborn时，默认的色环就被改变成一组包含6种颜色的调色板，它使用了标准的matplolib色环，为了让绘图变得更好看一些。\ncurrent_palette = sns.color_palette()\nsns.palplot(current_palette)\n\n有6种不同的默认主题，它们分别是：deep，muted，pastel，birght，dark，colorblind。\nthemes = ['deep', 'muted', 'pastel', 'bright', 'dark', 'colorblind']\nfor theme in themes:\n    current_palette = sns.color_palette(theme)\n    sns.palplot(current_palette)\n\n使用色圈系统\n默认的6种颜色看上去真不错，但是如果我们想要超过6种颜色呢？\n当你有超过6种类型的数据要区分时，最简单的方法就是 在一个色圈空间内使用均匀分布的颜色。这也是当需要使用更多颜色时大多数seaborn函数的默认方式。\n最常用的方法就是使用 hls 色空间，它是一种简单的RGB值的转换。\nsns.palplot(sns.color_palette(\"hls\", 8))\n\n除此之外，还有一个 hls_palette 函数，它可以让你控制 hls 颜色的亮度和饱和度。\nsns.palplot(sns.hls_palette(8, l=.3, s=.8))\n\n然而，由于人类视觉系统工作的原因，根据RGB颜色产生的平均视觉强度的颜色，从视觉上看起来并不是相同的强度。如果你观察仔细，就会察觉到，黄色和绿色会更亮一些，而蓝色则相对暗一些。因此，如果你想用hls系统达到一致性的效果，就会出现上面的问题。\n为了修补这个问题，seaborn给hls系统提供了一个接口，可以让操作者简单容易的选择均匀分布，且亮度和饱和度看上去明显一致的色调。\nsns.palplot(sns.color_palette(\"husl\", 8))\n\n同样与之对应的，也有个husl_palette函数提供更灵活的操作。\n使用分类Color Brewer调色板\n另外一种对分类数据比较友好的调色板来自Color Brewer工具。在matplotlib中也存在这些颜色表，但是它们并没有被合适的处理。在seaborn中，当你想要分类的 Color Brewer 调色板的时候，你总是可以得到不连续颜色，但是这也意味着在某一点上，这些颜色将会开始循环。\nColor Brewer 网站中的一个很好的特点就是它提供了一个色盲安全指导。色盲颜色有很多种http://en.wikipedia.org/wiki/Color_blindness，但是最常见的当属辨别绿色和红色。如果可以避免使用红色和绿色来对绘图元素上色，那么对于一些色盲人群将会是一个很好的消息。\n下面两组颜色就是使用红色和绿色组合，这可能并不是最好的选择。\nsns.palplot(sns.color_palette(\"Paired\"))\n\nsns.palplot(sns.color_palette(\"Set2\", 10))\n\n为了避免这些组合，我们需要从Color Brewer库中进行选择调色，有一个专门的 choose_colorbrewer_palette 函数可以实现这个功能。这个函数需要在 IPython notebook 中使用，因为 notebook 是一个交互式的工具，可以让你浏览各种选择并且调节参数。\nsns_tpye = [\"qualitative\", \"sequential\", \"diverging\"]\nfor elem in sns_type:\n    sns.choose_colorbrewer_palette(elem)\n\n\n\n\nn：调节颜色的个数；\ndesat：调节明暗和饱和度；\n\n当然，您可能只想使用一组您特别喜欢的颜色。因为color_palette()接受一个颜色列表，这很容易做到。\nflatui = [\"#9b59b6\", \"#3498db\", \"#95a5a6\", \"#e74c3c\", \"#34495e\", \"#2ecc71\"]\nsns.palplot(sns.color_palette(flatui))\n\n使用xkcd颜色来命名颜色\n在众多的努力帮助下，xkcd 完成了随机的 RGB 颜色的命名。一共生成了954个颜色http://xkcd.com/color/rgb/，并可可以随时通过xkcd_rgb字典调用。\nplt.plot([0, 1], [0, 1], sns.xkcd_rgb[\"pale red\"], lw=3)\nplt.plot([0, 1], [0, 2], sns.xkcd_rgb[\"medium green\"], lw=3)\nplt.plot([0, 1], [0, 3], sns.xkcd_rgb[\"denim blue\"], lw=3);\n\n如果想要从 xkcd_rgb 字典中单独的抽取出一些颜色，你也可以将一组选择好的颜色放到 xkcd_palette 函数中。\ncolors = [\"windows blue\", \"amber\", \"greyish\", \"faded green\", \"dusty purple\"]\nsns.palplot(sns.xkcd_palette(colors))\n\n2. 连续色板（sequential）\n调色板的第二大类被成为 \"顺序\"，这种调色板对于有从低（无意义）到高（有意义）范围过度的数据非常适合。尽管有些时候你可能想要在连续色板中使用不连续颜色，但是更通用的情况下是连续色板会作为颜色表在 kdeplot() 或者 corrplot() 或是一些 matplotlib 的函数中使用。\n对于连续的数据，最好是使用那些在色调上有相对细微变化的调色板，同时在亮度和饱和度上有很大的变化。这种方法将自然地将数据中相对重要的部分成为关注点。\nColor Brewer 的字典中就有一组很好的调色板。它们是以在调色板中的主导颜色(或颜色)命名的。\nsns.palplot(sns.color_palette(\"Blues\"))\n\n就像在matplotlib中一样，如果您想要翻转渐变，您可以在面板名称中添加一个_r后缀。\nsns.palplot(sns.color_palette(\"BuGn_r\"))\n\nseaborn还增加了一个允许创建没有动态范围的\"dark\"面板。如果你想按顺序画线或点，这可能是有用的，因为颜色鲜艳的线可能很难区分。\n类似的，这种暗处理的颜色，需要在面板名称中添加一个_d后缀。\nsns.palplot(sns.color_palette(\"GnBu_d\"))\n\n注意，你可能想使用 choose_colorbrewer_palette() 函数取绘制各种不同的选项。如果你想返回一个变量当做颜色映射传入seaborn或matplotlib的函数中，可以设置 as_cmap 参数为True。\n“cubehelix”连续调色板\ncubehelix调色板系统在亮度和色变变化上具有线性上升或下降的特点。这意味着，当颜色表中的信息被转化为黑色和白色或者被一个色盲者看到的时候，它将会被保存下来。\nmatplotlib 有内建的默认cubehelix 版本：\nsns.palplot(sns.color_palette(\"cubehelix\", 8))\n\nseaborn为cubehelix系统添加一个接口使得其可以在各种变化中都保持良好的亮度线性梯度。\n通过seaborn的cubehelix_palette()函数返回的调色板与matplotlib默认值稍有所不同，它不会在色轮周围旋转或覆盖更广的强度范围。seaborn还改变了排序使得更重要的值显得更暗：\nsns.palplot(sns.cubehelix_palette(8))\n\n其他cubehelix_palette()的参数主要调整色板的视觉。两个重要的选择是：start(值的范围为03）和rot，或者旋转的次数（-1和1之间）\nsns.palplot(sns.cubehelix_palette(8, start=.5, rot=-.75))\n\n你也可以控制断点的亮度和甚至对调结果顺序：\nsns.palplot(sns.cubehelix_palette(8, start=2, rot=0, dark=0, light=.95, reverse=True))\n\n默认情况下你只会得到一些像seaborn其它调色板一样的颜色列表，但你也可以通过使用as_cmap=True让调色板返回一个可以被传入seaborn或matplotlib函数的颜色映射对象。\nx, y = np.random.multivariate_normal([0, 0], [[1, -.5], [-.5, 1]], size=300).T\ncmap = sns.cubehelix_palette(light=1, as_cmap=True)\nsns.kdeplot(x, y, cmap=cmap, shade=True);\n\n与前面一样，也可以在notebook中使用choose_cubehelix_palette()来调节参数帮助选择更适合的调色板或颜色映射。如果想让函数返回一个类似hexbin的颜色映射而非一个列表则需要传入as_cmap=True。\n定制的连续调色板\n对于一个更简单的接口定制连续色板，你可以使用light_palette() 或者 dark_palette()函数。它们都是单一颜色，并且能产生从亮值或者暗去饱和的值到这个颜色的调色板。伴随着这些函数，也同样有 choose_light_palette 和 choose_dark_palette 两个函数来交互式的调节创建调色板。\nsns.palplot(sns.light_palette(\"green\"))\n\nsns.palplot(sns.dark_palette(\"purple\"))\n\nsns.palplot(sns.light_palette(\"navy\", reverse=True))\n\n它们也可以创建一个颜色映射对象，而不仅仅是颜色列表。\npal = sns.dark_palette(\"palegreen\", as_cmap=True)\nsns.kdeplot(x, y, cmap=pal);\n\n默认情况下，任何有效的matplotlib颜色可以作为输入。另外辅助的解释可以由input参数来控制。目前你可以在hls或husl空间中提供默认的rgb元组，您还可以使用任何有效的xkcd颜色的种子。\nsns.palplot(sns.light_palette((210, 90, 60), input=\"husl\"))\n\nsns.palplot(sns.dark_palette(\"muted purple\", input=\"xkcd\"))\n\n需要注意的是，husl是提供交互的组件的默认input空间，这与函数自身默认的并不同，但这在背景下却是更有用的。\n3. 离散色板\n调色板中的第三类被称为“离散”。这类色板适用于数据特征含有大的低值和大的高值。数据中通常有一个意义明确的中点。例如，如果你想要从某个基线时间点绘制温度变化，最好使用离散的颜色表显示相对降低和相对增加面积的地区。\n除了你想满足一个低强度颜色的中点以及用不同起始颜色的两个相对微妙的变化，其实选择离散色板的规则类似于顺序色板。同样重要的是，起始值的亮度和饱和度是相同的。\n同样重要的是要强调，应该避免使用红色和绿色，因为大量的潜在观众将无法分辨它们。\n同样，Color Brewer颜色字典里也同时拥有一套精心挑选的离散颜色映射:\nsns.palplot(sns.color_palette(\"BrBG\", 7))\n\nsns.palplot(sns.color_palette(\"RdBu_r\", 7))\n\nsns.palplot(sns.color_palette(\"coolwarm\", 7))\n\n定制的离散色板\n你也可以使用seaborn函数 diverging_palette() 为离散的数据创建一个定制的颜色映射。（当然也有一个类似配套的互动工具：choose_diverging_palette()）。该函数使用husl颜色系统的离散色板。你需要传递两种色调，并可选择性的设定明度和饱和度的端点。函数将使用husl的端点值及由此产生的中间值进行均衡。\nsns.palplot(sns.diverging_palette(220, 20, n=7))\n\nsns.palplot(sns.diverging_palette(145, 280, s=85, l=25, n=7))\nsep参数控制面板中间区域的两个渐变的宽度。\nsns.palplot(sns.diverging_palette(10, 220, sep=80, n=7))\n\n也可以用中间的色调来选择调色，而不是用亮度。\nsns.palplot(sns.diverging_palette(255, 133, l=60, n=7, center=\"dark\"))\n\n设置默认的调色板\ncolor_palette() 函数有一个名为set_palette()的配套使用函数。 set_palette()。set_palette()接受与color_palette()相同的参数，但是它会更改默认的matplotlib参数，以便成为所有的调色板配置。\ndef sinplot(flip=1):\n    x = np.linspace(0, 14, 100)\n    for i in range(1, 7):\n        plt.plot(x, np.sin(x + i * .5) * (7 - i) * flip)\nsns.set_palette(\"husl\")\nsinplot()\n\ncolor_palette()函数也可以在一个with块中使用，以达到临时更改调色板的目的。\nwith sns.color_palette(\"PuBuGn_d\"):\n    sinplot()\n\n总结\n\n\n本篇介绍了seaborn中的颜色调控方法，提到的一个重要函数是：color_palette()。针对不同的数据类型有三种调色方式：\n\n分类色板（qualitative）\n连续色板（sequential）\n离散色板（diverging）\n\n\n其中还提到了 Color Brewer 工具，它可以很好的应用在以上三种调色方式上。\n记住还有一个很有用的函数 choose_xxx_paletee()，用于交互式的调试颜色。\n还可以通过 set_palette() 函数设置绘图默认参数。\n\n参考：http://seaborn.pydata.org/tut...\n\n\n关注微信公众号Python数据科学，获取 120G 人工智能 学习资料。\n\n\n                ", "mainLikeNum": ["8 "], "mainBookmarkNum": "12"}