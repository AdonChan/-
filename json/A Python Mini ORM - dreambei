{"title": "A Python Mini ORM - dreambei ", "index": "python", "content": "原文地址\n\n\"\"\"\nThis is a very simple Object relational mapper (ORM)\nUse this code for fun. It isn't tested on a lot of cases.\n\nAuthor: Juan Manuel García <jmg.utn@gmail.com>\n\"\"\"\n\n# -*- coding: utf-8 -*-\n\nclass DataBase(object):\n    \"\"\"\n        A database agnostic from the engine that you're using.\n        At this time implements MySQLdb, sqlite3, psycopg2 but it's easy\n        to extend...\n    \"\"\"\n\ndef __init__(self, provider, host='', user='', passwd='', db=''):\n    \"\"\"\n        provider: The module for the database connection\n            Ej: (MySQLdb, sqlite3, psycopg2)\n\n        host: The Host on the database service is running\n\n        user: user to connect to the database\n\n        passwd: the password of the user\n\n        db: the name of the database\n    \"\"\"\n\n    self.provider = provider\n\n    self.connections = {\"MySQLdb\" : self.get_mysql_connection,\n                        \"sqlite3\" : self.get_sqlite_connection,\n                        \"psycopg2\" : self.get_postgre_connection,}\n\n    self.connections[self.provider.__name__](host, user, passwd, db)\n    self.cursor = self.db.cursor()\n\n    self.providers = {\"MySQLdb\" : self.get_mysql_columns,\n                      \"sqlite3\" : self.get_sqlite_columns,\n                      \"psycopg2\" : self.get_postgre_columns,}\n\ndef get_mysql_connection(self, host='', user='', passwd='', db=''):\n    \"\"\"\n        Get the connection for mysql databases\n    \"\"\"\n    self.db = self.provider.connect(host=host, user=user, passwd=passwd, db=db)\n\ndef get_postgre_connection(self, host='', user='', passwd='', db=''):\n    \"\"\"\n        Get the connection for postgres databases\n    \"\"\"\n    self.db = self.provider.connect(host=host, user=user, password=passwd, database=db)\n\ndef get_sqlite_connection(self, host='', user='', passwd='', db=''):\n    \"\"\"\n        Get the connection for sqlite databases\n    \"\"\"\n    self.db = self.provider.connect(db)\n\ndef get_mysql_columns(self, name):\n    \"\"\"\n        Get the columns name information for mysql databases\n    \"\"\"\n    self.sql_rows = 'Select * From %s' % name\n    sql_columns = \"describe %s\" % name\n    self.cursor.execute(sql_columns)\n    return [row[0] for row in self.cursor.fetchall()]\n\ndef get_sqlite_columns(self, name):\n    \"\"\"\n        Get the columns name information for sqlite databases\n    \"\"\"\n    self.sql_rows = 'Select * From %s' % name\n    sql_columns = \"PRAGMA table_info(%s)\" % name\n    self.cursor.execute(sql_columns)\n    return [row[1] for row in self.cursor.fetchall()]\n\ndef get_postgre_columns(self, name):\n    \"\"\"\n        Get the columns name information for postgres databases\n    \"\"\"\n    self.sql_rows = 'Select * From \"%s\"' % name\n    sql_columns = \"\"\"select column_name\n                    from information_schema.columns\n                    where table_name = '%s';\"\"\" % name\n    self.cursor.execute(sql_columns)\n    return [row[0] for row in self.cursor.fetchall()]\n\ndef Table(self, name):\n    \"\"\"\n        A queryable table of the database\n\n        name: the name of the table to query\n\n        return: a Query object\n    \"\"\"\n    columns = self.providers[self.provider.__name__](name)\n    return Query(self.cursor, self.sql_rows, columns, name)\n\n\nclass Query(object):\n    \"\"\"\n        A query Class wich recursive generate the query-string\n    \"\"\"\n\ndef __init__(self, cursor, sql_rows, columns, name):\n    self.cursor = cursor\n    self.sql_rows = sql_rows\n    self.columns = columns\n    self.name = name\n\ndef filter(self, criteria):\n    \"\"\"\n        Implement the \"Where\" statment of the standard sql\n    \"\"\"\n    key_word = \"AND\" if \"WHERE\" in self.sql_rows else \"WHERE\"\n    sql = self.sql_rows + \" %s %s\" % (key_word, criteria)\n    return Query(self.cursor, sql, self.columns, self.name)\n\ndef order_by(self, criteria):\n    \"\"\"\n        Implement the \"Order by\" statment of the standard sql\n    \"\"\"\n    return Query(self.cursor, self.sql_rows + \" ORDER BY %s\" % criteria, self.columns, self.name)\n\ndef group_by(self, criteria):\n    \"\"\"\n        Implement the \"Group by\" statment of the standard sql\n    \"\"\"\n    return Query(self.cursor, self.sql_rows + \" GROUP BY %s\" % criteria, self.columns, self.name)\n\ndef get_rows(self):\n    \"\"\"\n        Execute the generated query on the database and return a list of Row Objects\n    \"\"\"\n    print self.sql_rows\n    self.cursor.execute(self.sql_rows)\n    return [Row(zip(self.columns, fields), self.name) for fields in self.cursor.fetchall()]\n\nrows = property(get_rows)\n\n\nclass Row(object):\n    \"\"\"\n        A row Class dynamically implemented for each table\n    \"\"\"\n\ndef __init__(self, fields, table_name):\n    \"\"\"\n        fields: A list of [column_name : value of column]\n\n        table_name: the name of the table\n    \"\"\"\n    #Assign the name of the current table to the class\n    self.__class__.__name__ = table_name + \"_Row\"\n\n    for name, value in fields:\n        setattr(self, name, value)\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}