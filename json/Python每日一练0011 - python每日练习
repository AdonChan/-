{"title": "Python每日一练0011 - python每日练习 ", "index": "python", "content": "问题\n你有一段通过下标访问列表或者元组中元素的代码，但是这样有时候会使得你的代码难以阅读， 于是你想通过名称来访问元素。\n解决方案\n使用collections.namedtuple 函数，例如我们经常使用一个tuple表示一个坐标点的时候\n>>> from collections import namedtuple\n>>> Point = namedtuple('Point', ['x', 'y'])\n>>> point_1 = Point(x=5, y=6)\n>>> print(point_1.x, point_1.y)\n5 6\n讨论\ncollections.namedtuple 函数返回的是tuple类型的一个子类，能够支持原生tuple的所有操作\n但需要注意的是，当创建了一个namedtuple 后，成员是不能被改变的（这和原生tuple是一致的）\n>>> from collections import namedtuple\n>>> Point = namedtuple('Point', ['x', 'y'])\n>>> point_1 = Point(x=5, y=6)\n>>> point_1.x = 6\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: can't set attribute\n如果想要修改某一成员，只能重新创建一个实例了，可以使用_replace方法\n>>> from collections import namedtuple\n>>> Point = namedtuple('Point', ['x', 'y'])\n>>> point_1 = Point(x=5, y=6)\n>>> point_2 = point_1._replace(x=6)\n>>> print(point_2)\nPoint(x=6, y=6)\n适当使用namedtuple 会让代码可读性更好，例如从数据库调用中返回了一个很大的元组列表，如果通过下标去操作其中的元素会让代码模糊不清\n并且在某些时候可以更节省资源（比如用namedtuple代替不经常做更新的dict）\n关于更多关于命名元组见collections.namedtuple\n来源\nPython Cookbook\n关注\n欢迎关注我的微信公众号：python每日一练\n\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "1"}