{"title": "强业务逻辑抽象API接口 - 修仙 ", "index": "api设计,python", "content": "组件\n\n接入类\n映射类\n动作类\n\n接入类\n主要做路由，限流，鉴权等接入放行性质的工作\nclass App:\n    action_map = {}\n\n    def dispatch(self, data):\n        try:\n            assert data[\"action\"] in self.action_map, ErrorCode.sys_action_not_exist\n            action = self.action_map[data[\"action\"]]\n            return {\n                \"code\": 0,\n                \"msg\": \"\",\n                \"data\": action.run(data[\"params\"])\n            }\n        except AssertionError as e:\n            msg, code = e\n            return {\n                \"code\": code,\n                \"msg\": msg,\n                \"data\": None\n            }\n        except Exception:\n            traceback.print_exc()\n            msg, code = ErrorCode.sys_unknown\n            return {\n                \"code\": code,\n                \"msg\": msg,\n                \"data\": None\n            }\n\n\n映射类\n名称到动作类的映射\naction_map = {\n    'register': RegisterAction\n}\n动作类\n表达一个接口的实际业务逻辑操作，权限，数据schema都在这里进行配置\nclass RegisterAction(Action):\n    schema = Schema({\n        \"verify_code\": And(str, len),\n        \"phone\": And(str, len),\n        \"password\": And(str, len)\n    })\n    auth = False\n\n    def run(self, data):\n        assert check_verify_code(data[\"verify_code\"]), MyErrorCode.verify_code_wrong\n        assert User.get(data[\"phone\"]), MyErrorCode.already_register\n        return {\"token\": \"token\"}\n\n业务逻辑\n操作顺序\n\n数据结构与格式验证，validate\n数据正确性验证，如验证码，密码等，check\n数据存在性验证，exist\n数据业务状态验证，status\n数据业务更改操作并提交至数据库，run\n返回成功，return\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}