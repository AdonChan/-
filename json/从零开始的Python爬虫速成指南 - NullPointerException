{"title": "从零开始的Python爬虫速成指南 - NullPointerException ", "index": "python,scrapy,网页爬虫", "content": "序\n本文主要内容：以最短的时间写一个最简单的爬虫，可以抓取论坛的帖子标题和帖子内容。\n本文受众：没写过爬虫的萌新。\n入门\n0.准备工作\n需要准备的东西： Python、scrapy、一个IDE或者随便什么文本编辑工具。\n1.技术部已经研究决定了，你来写爬虫。\n随便建一个工作目录，然后用命令行建立一个工程，工程名为miao，可以替换为你喜欢的名字。\nscrapy startproject miao\n随后你会得到如下的一个由scrapy创建的目录结构\n在spiders文件夹中创建一个python文件，比如miao.py，来作为爬虫的脚本。内容如下：\nimport scrapy\n\n\nclass NgaSpider(scrapy.Spider):\n    name = \"NgaSpider\"\n    host = \"http://bbs.ngacn.cc/\"\n    # start_urls是我们准备爬的初始页\n    start_urls = [\n        \"http://bbs.ngacn.cc/thread.php?fid=406\",\n    ]\n\n    # 这个是解析函数，如果不特别指明的话，scrapy抓回来的页面会由这个函数进行解析。\n    # 对页面的处理和分析工作都在此进行，这个示例里我们只是简单地把页面内容打印出来。\n    def parse(self, response):\n        print response.body\n        \n2.跑一个试试？\n如果用命令行的话就这样：\ncd miao\nscrapy crawl NgaSpider\n你可以看到爬虫君已经把你坛星际区第一页打印出来了，当然由于没有任何处理，所以混杂着html标签和js脚本都一并打印出来了。\n解析\n接下来我们要把刚刚抓下来的页面进行分析，从这坨html和js堆里把这一页的帖子标题提炼出来。其实解析页面是个体力活，方法多的是，这里只介绍xpath。\n0.为什么不试试神奇的xpath呢\n看一下刚才抓下来的那坨东西，或者用chrome浏览器手动打开那个页面然后按F12可以看到页面结构。每个标题其实都是由这么一个html标签包裹着的。举个例子：\n<a href='/read.php?tid=10803874' id='t_tt1_33' class='topic'>[合作模式] 合作模式修改设想</a>\n可以看到href就是这个帖子的地址（当然前面要拼上论坛地址），而这个标签包裹的内容就是帖子的标题了。于是我们用xpath的绝对定位方法，把class='topic'的部分摘出来。\n1.看看xpath的效果\n在最上面加上引用：\nfrom scrapy import Selector\n把parse函数改成：\n    def parse(self, response):\n        selector = Selector(response)\n        # 在此，xpath会将所有class=topic的标签提取出来，当然这是个list\n        # 这个list里的每一个元素都是我们要找的html标签\n        content_list = selector.xpath(\"//*[@class='topic']\")\n        # 遍历这个list，处理每一个标签\n        for content in content_list:\n            # 此处解析标签，提取出我们需要的帖子标题。\n            topic = content.xpath('string(.)').extract_first()\n            print topic\n            # 此处提取出帖子的url地址。\n            url = self.host + content.xpath('@href').extract_first()\n            print url\n再次运行就可以看到输出你坛星际区第一页所有帖子的标题和url了。\n递归\n接下来我们要抓取每一个帖子的内容。这里需要用到python的yield。\nyield Request(url=url, callback=self.parse_topic)\n此处会告诉scrapy去抓取这个url，然后把抓回来的页面用指定的parse_topic函数进行解析。\n至此我们需要定义一个新的函数来分析一个帖子里的内容。\n完整的代码如下：\nimport scrapy\nfrom scrapy import Selector\nfrom scrapy import Request\n\n\nclass NgaSpider(scrapy.Spider):\n    name = \"NgaSpider\"\n    host = \"http://bbs.ngacn.cc/\"\n    # 这个例子中只指定了一个页面作为爬取的起始url\n    # 当然从数据库或者文件或者什么其他地方读取起始url也是可以的\n    start_urls = [\n        \"http://bbs.ngacn.cc/thread.php?fid=406\",\n    ]\n\n    # 爬虫的入口，可以在此进行一些初始化工作，比如从某个文件或者数据库读入起始url\n    def start_requests(self):\n        for url in self.start_urls:\n            # 此处将起始url加入scrapy的待爬取队列，并指定解析函数\n            # scrapy会自行调度，并访问该url然后把内容拿回来\n            yield Request(url=url, callback=self.parse_page)\n\n    # 版面解析函数，解析一个版面上的帖子的标题和地址\n    def parse_page(self, response):\n        selector = Selector(response)\n        content_list = selector.xpath(\"//*[@class='topic']\")\n        for content in content_list:\n            topic = content.xpath('string(.)').extract_first()\n            print topic\n            url = self.host + content.xpath('@href').extract_first()\n            print url\n            # 此处，将解析出的帖子地址加入待爬取队列，并指定解析函数\n            yield Request(url=url, callback=self.parse_topic)\n         # 可以在此处解析翻页信息，从而实现爬取版区的多个页面\n\n    # 帖子的解析函数，解析一个帖子的每一楼的内容\n    def parse_topic(self, response):\n        selector = Selector(response)\n        content_list = selector.xpath(\"//*[@class='postcontent ubbcode']\")\n        for content in content_list:\n            content = content.xpath('string(.)').extract_first()\n            print content\n        # 可以在此处解析翻页信息，从而实现爬取帖子的多个页面\n\n到此为止，这个爬虫可以爬取你坛第一页所有的帖子的标题，并爬取每个帖子里第一页的每一层楼的内容。爬取多个页面的原理相同，注意解析翻页的url地址、设定终止条件、指定好对应的页面解析函数即可。\nPipelines——管道\n此处是对已抓取、解析后的内容的处理，可以通过管道写入本地文件、数据库。\n0.定义一个Item\n在miao文件夹中创建一个items.py文件。\nfrom scrapy import Item, Field\n\n\nclass TopicItem(Item):\n    url = Field()\n    title = Field() \n    author = Field()  \n    \nclass ContentItem(Item):\n    url = Field() \n    content = Field()\n    author = Field()  \n此处我们定义了两个简单的class来描述我们爬取的结果。\n1. 写一个处理方法\n在miao文件夹下面找到那个pipelines.py文件，scrapy之前应该已经自动生成好了。\n我们可以在此建一个处理方法。\nclass FilePipeline(object):\n\n    ## 爬虫的分析结果都会由scrapy交给此函数处理\n    def process_item(self, item, spider):\n        if isinstance(item, TopicItem):\n            ## 在此可进行文件写入、数据库写入等操作\n            pass\n        if isinstance(item, ContentItem):\n            ## 在此可进行文件写入、数据库写入等操作\n            pass\n        ## ... \n        return item\n2.在爬虫中调用这个处理方法。\n要调用这个方法我们只需在爬虫中调用即可，例如原先的内容处理函数可改为：\n    def parse_topic(self, response):\n        selector = Selector(response)\n        content_list = selector.xpath(\"//*[@class='postcontent ubbcode']\")\n        for content in content_list:\n            content = content.xpath('string(.)').extract_first()\n            ## 以上是原内容\n            ## 创建个ContentItem对象把我们爬取的东西放进去\n            item = ContentItem()\n            item[\"url\"] = response.url\n            item[\"content\"] = content\n            item[\"author\"] = \"\" ## 略\n            ## 这样调用就可以了\n            ## scrapy会把这个item交给我们刚刚写的FilePipeline来处理\n            yield item\n3.在配置文件里指定这个pipeline\n找到settings.py文件，在里面加入\nITEM_PIPELINES = {\n            'miao.pipelines.FilePipeline': 400,\n        }\n这样在爬虫里调用\nyield item\n的时候都会由经这个FilePipeline来处理。后面的数字400表示的是优先级。可以在此配置多个Pipeline，scrapy会根据优先级，把item依次交给各个item来处理，每个处理完的结果会传递给下一个pipeline来处理。可以这样配置多个pipeline:\nITEM_PIPELINES = {\n            'miao.pipelines.Pipeline00': 400,\n            'miao.pipelines.Pipeline01': 401,\n            'miao.pipelines.Pipeline02': 402,\n            'miao.pipelines.Pipeline03': 403,\n            ## ...\n        }\nMiddleware——中间件\n通过Middleware我们可以对请求信息作出一些修改，比如常用的设置UA、代理、登录信息等等都可以通过Middleware来配置。\n0.Middleware的配置\n与pipeline的配置类似，在setting.py中加入Middleware的名字，例如\nDOWNLOADER_MIDDLEWARES = {\n            \"miao.middleware.UserAgentMiddleware\": 401,\n            \"miao.middleware.ProxyMiddleware\": 402,\n        }\n1.破网站查UA, 我要换UA\n某些网站不带UA是不让访问的。在miao文件夹下面建立一个middleware.py\nimport random\n\n\nagents = [\n    \"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.5 (KHTML, like Gecko) Chrome/4.0.249.0 Safari/532.5\",\n    \"Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US) AppleWebKit/532.9 (KHTML, like Gecko) Chrome/5.0.310.0 Safari/532.9\",\n    \"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/534.7 (KHTML, like Gecko) Chrome/7.0.514.0 Safari/534.7\",\n    \"Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/534.14 (KHTML, like Gecko) Chrome/9.0.601.0 Safari/534.14\",\n    \"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.14 (KHTML, like Gecko) Chrome/10.0.601.0 Safari/534.14\",\n    \"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.20 (KHTML, like Gecko) Chrome/11.0.672.2 Safari/534.20\",\n    \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.27 (KHTML, like Gecko) Chrome/12.0.712.0 Safari/534.27\",\n    \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.24 Safari/535.1\",\n]\n\n\nclass UserAgentMiddleware(object): \n\n    def process_request(self, request, spider):\n        agent = random.choice(agents)\n        request.headers[\"User-Agent\"] = agent\n\n这里就是一个简单的随机更换UA的中间件，agents的内容可以自行扩充。\n2.破网站封IP，我要用代理\n比如本地127.0.0.1开启了一个8123端口的代理，同样可以通过中间件配置让爬虫通过这个代理来对目标网站进行爬取。同样在middleware.py中加入：\nclass ProxyMiddleware(object):\n\n    def process_request(self, request, spider): \n        # 此处填写你自己的代理\n        # 如果是买的代理的话可以去用API获取代理列表然后随机选择一个\n        proxy = \"http://127.0.0.1:8123\"\n        request.meta[\"proxy\"] = proxy\n很多网站会对访问次数进行限制，如果访问频率过高的话会临时禁封IP。如果需要的话可以从网上购买IP，一般服务商会提供一个API来获取当前可用的IP池，选一个填到这里就好。\n一些常用配置\n在settings.py中的一些常用配置\n# 间隔时间，单位秒。指明scrapy每两个请求之间的间隔。\nDOWNLOAD_DELAY = 5 \n\n# 当访问异常时是否进行重试\nRETRY_ENABLED = True \n# 当遇到以下http状态码时进行重试\nRETRY_HTTP_CODES = [500, 502, 503, 504, 400, 403, 404, 408]\n# 重试次数\nRETRY_TIMES = 5\n\n# Pipeline的并发数。同时最多可以有多少个Pipeline来处理item\nCONCURRENT_ITEMS = 200\n# 并发请求的最大数\nCONCURRENT_REQUESTS = 100\n# 对一个网站的最大并发数\nCONCURRENT_REQUESTS_PER_DOMAIN = 50\n# 对一个IP的最大并发数\nCONCURRENT_REQUESTS_PER_IP = 50\n\n我就是要用Pycharm\n如果非要用Pycharm作为开发调试工具的话可以在运行配置里进行如下配置：Configuration页面：Script填你的scrapy的cmdline.py路径，比如我的是\n/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py\n然后在Scrpit parameters中填爬虫的名字，本例中即为：\ncrawl NgaSpider\n最后是Working diretory，找到你的settings.py文件，填这个文件所在的目录。示例：\n按小绿箭头就可以愉快地调试了。\n参考\n这里提供了对scrapy非常详细的介绍。http://scrapy-chs.readthedocs...\n以下是几个比较重要的地方：\nscrapy的架构:http://scrapy-chs.readthedocs...xpath语法：http://www.w3school.com.cn/xp...Pipeline管道配置：http://scrapy-chs.readthedocs...Middleware中间件的配置：http://scrapy-chs.readthedocs...settings.py的配置：http://scrapy-chs.readthedocs...\n\n                ", "mainLikeNum": ["8 "], "mainBookmarkNum": "30"}