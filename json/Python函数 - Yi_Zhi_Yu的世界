{"title": "Python函数 - Yi_Zhi_Yu的世界 ", "index": "python,python2.7", "content": "定义\nPython的函数定义使用def\ndef func_name(x):\n    return \"hello world\" //通过return 返回执行结果\n常用内置\n常用内置函数(待补充)：\nabs() // 绝对值计算\nisinstance(v, (type list)) //判断是否是类型列表中的值 boolen return\nint() //强制int类型转换,小数时仅保留整数位\nstr() //强制string类型转换\nunicode //unicode编码转换\nbool() //强制bool 类型转换\nreturn 多值\npython的函数是可以返回多值的\n //定义\n def infos():\n    name = \"Yi_Zhi_Yu\"\n    age = 25\n    return name, age\n //调用\n infos() //('Yi_Zhi_Yu', 25)\n可以看到， 返回的多值是以tuple形式输出的\n参数\npython的参数支持默认参数语法，但必须定义在函数参数的最后面的位置注意： python的参数可以不需要严格按照定义的函数参数的位置传递进去， 作为代价，需要告诉函数传递的参数对应的是哪个，如下：\ndef infos(input_name, input_age=18): //默认的参数定义age=18\n   name = input_name\n   age = input_age\n   return name, age\ninfos(\"Yi_Zhi_Yu\",25) // ('Yi_Zhi_Yu', 25) //默认参数传递顺序\ninfos(input_age=25, input_name=\"Yi_Zhi_Yu\") //('Yi_Zhi_Yu', 25) 这里就没有按照默认的顺序传递参数\n可变参数\n当需要向函数传递参数，而又不知道参数的具体数量的时候， 可以使用如下定义方式：\n//计算平均分\ndef average_score(*score):\n    s = 0\n    for n in score:\n        s += n\n    return s/len(score)\naverage_score(10, 8, 8, 10) //9\n否则， 按照正常的方式， 还需要定义一个tuple或者list结构，然后传递给函数才能使用，上面的这种方式实际上本身传递进去的就是一个tuple, 把所有的参数都自动放在了*对应的参数里\n那么如果传递进去的参数假如本身就是一个tuple或list了， 而上面的方法我们已经定义好了， 那么我们怎么办， 一个个元素score[0], score[1]写进去又很麻烦， 怎么办： 在传递tuple或list参数的时候带个*即可\nscore = (10, 8, 8, 10)\naverage_score(*score) //9 如果不带*,会直接报错类型错误\n关键字参数\n首先必须搞清楚什么事关键字参数, 在函数定义的时候明确表明了哪个参数的值是什么的时候就是关键字参数， 我们在默认参数那块有用过python 允许在函数参数传递任意的关键字参数， 前提是最后一个参数定义必须带了**\ndef new_infos(input_name, input_age, **other_info):\n    return input_name, input_age, other_info\n那这里除了第一个和第二个参数， 第三个参数都是以dict 形式传递进去的, 用一下就知道了\nnew_infos(\"Yi_Zhi_Yu\",25, sex=\"man\", interest=\"basketball\")//('Yi_Zhi_Yu', 25, {'interest': 'basketball', 'sex': 'man'})\n//other_info 接受了除第一个第二个参数外的关键字参数\n混合参数\n如果同时传递以上几种类型， 该如何定义呢， 按照顺序， 必须是\n    必要参数， 默认参数， 可变参数， 关键字参宿\n所以在使用的时候要注意了\nPs: 以上为学习记录， 难免有错， 希望各位指正参考：廖雪峰Python教程\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}