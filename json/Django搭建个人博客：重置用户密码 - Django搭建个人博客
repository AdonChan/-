{"title": "Django搭建个人博客：重置用户密码 - Django搭建个人博客 ", "index": "python,django", "content": "随着技术的发展，验证用户身份的手段越来越多，指纹、面容、声纹应有尽有，但密码依然是最重要的手段。\n互联网处处都有密码的身影，甚至变成了现代人的一种负担。像笔者这样的，动辄几十个账号密码，忘记其中几个简直太正常了。\n本章讲如何帮助健忘症患者，重置用户密码。\n安装第三方库\n前面我们已经知道如何修改文章标题、正文等内容，但是密码作为验证身份的重要口令，必须以更加稳妥的方式修改。一种比较常用的方式是发送一封修改密码的邮件到用户事先绑定的邮箱里。\n业务流程分析如下：\n\n向用户邮箱发送包含重置密码地址的邮件。邮件的地址需要动态生成，防止不怀好意的用户从中捣乱；\n向网站用户展示一条发送邮件成功的信息；\n用户点击邮箱中的地址后，转入重置密码的页面；\n向用户展示一条重置成功的信息。\n\n上面4个步骤包含了4个视图和模板，自己写代码看来有些繁琐。\n可能你会想，Django这种以开发效率著称的框架，重置密码这种常用功能是不是内置了呢？答案是肯定的。事实上内置模块的流程和上面的是完全相同的，你只需要将上面4个步骤的url配置好就可以使用了。当然内置的模板很简陋，你可以覆写模板变成自己网站的风格。\n实际上Django不仅内置了密码重置，还包括登录、登出、密码修改等功能。建议读者到一定水平后多阅读Django的源码，学习其中的编程技巧。另外这部分内容Django是用类视图写的，现在阅读可能有一定困难。源码位置：/env/Lib/site-packages/django/contrib/auth/views.py\n官方文档：Django 的验证系统\n\n使用内置的模块似乎要简单多了，那还能不能更简单呢？确实是可以的。\nDjango作为优秀的Web框架，有很多优秀的第三方库（即APP）被世界各地的程序员们打包发布在网上，免费供你使用。成功从来都是站在巨人的肩膀上的，既然已经有了“轮子”，何必要自己再造一个呢。\n我们这里就可以用到一个叫Django-password-reset的第三方库。\n打开虚拟环境，输入指令pip install -U django-password-reset：\n(env) E:\\django_project\\my_blog>pip install -U django-password-reset\n\nCollecting django-password-reset\n...\nInstalling collected packages: django-password-reset\nSuccessfully installed django-password-reset-2.0\n看到以上信息说明安装成功了。\n快速使用\n既然第三方库也是app，那肯定需要在/my_blog/settings.py中注册了：\n/my_blog/settings.py\n\n...\nINSTALLED_APPS = [\n    ...\n    \n    'password_reset',    # 新增\n\n    'article',\n    'userprofile',\n]\n...\n在根路由/my_blog/urls.py中添加app的地址：\n/my_blog/urls.py\n\n...\nurlpatterns = [\n    ...\n    path('password-reset/', include('password_reset.urls')),\n]\n修改/templates/userprofile/login.html，提供一个重置密码的入口：\n/templates/userprofile/login.html\n\n...\n<div class=\"col-12\">\n    ...\n    <form method=\"post\" action=\".\">\n        ...\n    </form>\n    \n    <!-- 新增 -->\n    <br>\n    <h5>忘记密码了？</h5>\n    <h5>点击<a href='{% url \"password_reset_recover\" %}'>这里</a>重置密码</h5>\n</div>\n...\n邮件不能凭空产生，目前为止我们并没有配置发件邮箱的账号密码，也没有配置发送邮件的端口、发件人等信息。\n因此还需要在/my_blog/settings.py末尾添加发送邮箱的相关配置：\n/my_blog/settings.py\n\n...\n\n# SMTP服务器，改为你的邮箱的smtp\nEMAIL_HOST = 'smtp.qq.com'\n# 邮箱名\nEMAIL_HOST_USER = 'dusaiphoto@foxmail.com'\n# 邮箱密码\nEMAIL_HOST_PASSWORD = '你的邮箱密码'\n# 发送邮件的端口\nEMAIL_PORT = 25\n# 是否使用 TLS\nEMAIL_USE_TLS = True\n# 默认的发件人\nDEFAULT_FROM_EMAIL = '杜赛的个人网站 <dusaiphoto@foxmail.com>'\n\n简单邮件传输协议 (Simple Mail Transfer Protocol, SMTP) 是在Internet传输Email的协议标准。SMTP是基于文本的协议。在其之上指定了一条消息的一个或多个接收者，然后消息文本会被传输。SMTP使用TCP端口25。\nSMTP是一个“推”的协议（发送邮件），它不允许从远程服务器上“拉”来消息（接收邮件）。要接收邮件，客户端必须使用POP3或IMAP。\n\n设置好后就可以开启服务器测试了。\n点击登录页面：\n\n点击最后一行的链接“这里”：\n\n按照要求输入用户名或者Email，点击确认按钮：\n\n提示已经把重置密码的链接发到邮箱中了。\n前往Email中查看新邮件：\n\n居然神奇的收到了邮件！继续点击邮件中的链接：\n\n按照提示输入新密码后：\n\n密码重置就成功了。\n尝试一下新密码登录是没问题的，顺利完成了任务。\n篇幅关系就没有去挨个覆写原有的模板文件了。如果有兴趣可以仔细阅读官方文档，尝试去改写模板文件，让页面更加匹配自己网站的风格。\n官方文档在这里：docs\nGitHub：django-password-reset\n相信读者也尝到使用三方库的甜头了：只需要写很少的代码，就可以完成大量的功能。笔者是推荐在开发中多使用优秀的三方库的，可以极大的提高效率，减少重复劳动。当然使用三方库也有一些缺点，比如会因为一知半解而维护困难、不能量身定制等。在实践中到底用还是不用，就根据实际情况再做权衡了。\n后面陆续还会介绍更多的三方库，还是贯彻那句话：成功是站在巨人肩膀上的。\n常见错误\n发送邮件因为涉及到了发送邮箱的相关设置和权限，所以容易出各种各样奇怪的问题。\n好比说你的发送邮箱设置是xxx@sina.com。项目代码都是对的，但是新浪禁止了smtp服务，那邮件也会发送不成功。如果报错请尝试以下方法：\n\n设置发送邮箱为允许smtp服务\n检查账号、密码是否正确\n有的发送端口需要额外的设置，尝试更换端口\n更换其他服务商的邮箱\n\n如果还不行，就请根据报错页面，搜索一下类似问题的解决方案了。\n总结\n本章学习了使用第三方库django-password-reset，高效完成了重置密码的功能。\n下一章学习扩展并更新用户资料。\n\n有疑问请在杜赛的个人网站留言，我会尽快回复。\n或Email私信我：dusaiphoto@foxmail.com\n项目完整代码：Django_blog_tutorial\n\n\n转载请告知作者并注明出处。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "0"}