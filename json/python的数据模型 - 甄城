{"title": "python的数据模型 - 甄城 ", "index": "python", "content": "魔术方法 __getitem__\n\npython的解释器遇见魔术方法时会激活一些基本的对象操作方法例如，obj[key]获取obj字典的key元素，其背后实现的时obj.__getitem__(key)方法\nIn [5]: class Foo:\n   ...:     def __init__(self):\n   ...:         self.nums = range(10)\n   ...:     def __getitem__(self, position):\n   ...:         print 'input %d' % position\n   ...:         return self.nums[position]\n   ...:     \n   ...:     \n\nIn [6]: foo = Foo()\n\nIn [7]: foo[3]\ninput 3        # 输出了自定义的input %d的内容，说明内部调用了__getitem__(key)方法\nOut[7]: 3\n构建只要属性没有方法的对象namedtuple\nIn [11]: import collections\n\nIn [12]: User = collections.namedtuple('User',['name','password'])\n\nIn [13]: user = User('Admin','123456')\n\nIn [14]: user.name\nOut[14]: 'Admin'\n\nIn [15]: user.password\nOut[15]: '123456'\n实现自定义len\nIn [19]: class Foo:\n    ...:     def __init__(self):\n    ...:         self.nums = range(10)\n    ...:     def __len__(self):\n    ...:         return len(self.nums)\n    ...:     def __getitem__(self, position):\n    ...:         print 'input %d' % position\n    ...:         return self.nums[position]\n    ...:     \n    ...:     \n\nIn [20]: foo =Foo()\n\nIn [21]: len(foo) # 对一个对象进行`len`操作，会调用对象的__len__()方法\nOut[21]: 10\nnamedtuple和__getitem__()结合使用\nIn [28]: class Foo: \n    ...:     def __init__(self):\n    ...:         self.nums = [User(letter,num) for letter in string.a\n    ...: scii_uppercase for num in range(10)]\n    ...:     def __len__(self):\n    ...:         return len(self.nums)\n    ...:     def __getitem__(self, position):\n    ...:         print 'input %d' % position\n    ...:         return self.nums[position]\nIn [29]: foo = Foo()\n\nIn [30]: foo.nums[3]\nOut[30]: User(name='A', password=3)\n\nIn [35]: from random import choice\n\nIn [36]: choice(foo)\ninput 163\nOut[36]: User(name='Q', password=3)\n\nIn [37]: choice(foo)\ninput 144\nOut[37]: User(name='O', password=4)\n\n以下方法均可重写，使得自定义类型变现与内置类型一样的编程风格\n：跟运算符无关的特殊方法\n\n字符串 /字节序列表示形式\n__repr__、__str__、__format__、__bytes__\n数值转换 \n__abs__、__bool__、__complex__、__int__、__float__、__hash__、__index__\n集合模拟\n __len__、__getitem__、__setitem__、__delitem__、__contains__\n迭代枚举 \n__iter__、__reversed__、__next__\n可调用模拟\n__call__\n上下文管理\n__enter__、__exit__\n实例创建和销毁\n__new__、__init__、__del__\n属性管理\n __getattr__、__getattribute__、__setattr__、__delattr__、__dir__\n属性描述符\n__get__、__set__、__delete__\n跟类相关的服务\n__prepare__、__instancecheck__、__subclasscheck_\n\n\n跟运算符相关的特殊方法\n类别 方法名和对应的运算符\n一元运算符\n__neg__ -、__pos__ +、__abs__ abs()\n众多比较运算符\n__lt__ <、__le__ <=、__eq__ ==、__ne__ !=、__gt__ >、__ge__ >=\n算术运算符\n__add__ +、__sub__ -、__mul__ *、__truediv__ /、__floordiv__ //、__mod__ %、__divmod__\ndivmod()、__pow__ ** 或pow()、__round__ round()\n反向算术运算符\n__radd__、__rsub__、__rmul__、__rtruediv__、__rfloordiv__、__rmod__、__rdivmod__、__rpow__\n增量赋值算术运算符\n__iadd__、__isub__、__imul__、__itruediv__、__ifloordiv__、__imod__、__ipow__\n位运算符\n__invert__ ~、__lshift__ <<、__rshift__ >>、__and__ &、__or__ |、__xor__ ^\n反向位运算符\n__rlshift__、__rrshift__、__rand__、__rxor__、__ror__增\n量赋值位运算符\n__ilshift__、__irshift__、__iand__、__ixor__、__ior__\n引用《流畅的Python》\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "1"}