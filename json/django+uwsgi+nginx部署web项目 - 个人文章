{"title": "django+uwsgi+nginx部署web项目 - 个人文章 ", "index": "django,python", "content": "系统需求\n    \ncentos7 minimal\npython2.7\n\n\n部署前的准备工作\n\ncentos7 minimal是精简版本，需要手动去配置一些设置。\n1. 配置网络，设置固定ip\n    ip可以自动获取，我这里设置成固定ip\n    \n2. 更新yum源\n    [root@localhost /]# cd \n    [root@localhost ~]# wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\n    [root@localhost ~]# rpm -ivh epel-release-latest-7.noarch.rpm\n    检查是否添加到源列表：\n    [root@localhost ~]# yum repolist\n\n3. 安装vim\n    [root@localhost ~]# yum install vim\n   \n4. 设置防火墙开启80,3306等需要的端口\n    高版本的centos系统防火墙默认是firewall，通过命令可以永久开放端口\n    [root@localhost ~]# firewall-cmd --zone=public --add-port=80/tcp --permanent\n5. kill命令的扩展\n    [root@localhost ~]# yum install psmisc\n    \n    \n需要安装的软件\n1. mariadb或者mysql，这里选择mariadb\n    [root@localhost /]# yum install mariadb mariadb-server\n    [root@localhost /]# yum install mysql-devel\n    \n2. nginx\n    安装依赖包：\n    [root@localhost /]#  yum install gcc-c++\n\n    安装nginx：\n    [root@localhost /]#  yum install nginx\n    \n3. python的一些组件\n    安装pip：\n    [root@localhost /]#  yum install python-pip\n    更新pip：\n    [root@localhost /]#  pip install --upgrade pip\n    安装虚拟环境：\n    [root@localhost /]#  pip install virtualenv\n    安装uwsgi：\n    [root@localhost /]#  yum install python-devel\n    [root@localhost /]#  pip install uwsgi\n    安装mysql链接工具：\n    [root@localhost /]#  pip install MySQL-python\n\n4. 安装git\n    [root@localhost /]#  yum install git\n    \n    \n开始部署项目django+uwsgi+nginx\n1. 创建项目目录\n    [root@localhost /]#  mkdir /www/\n    \n2. 从远程仓库git\n    [root@localhost /]#  cd /www/\n    [root@localhost www]# git clone https://example.git\n    \n3. 配置数据库\n    [root@localhost www]# systemclt start mariadb\n    [root@localhost www]# mysql_secure_installation\n    \n    登录mysql\n    [root@localhost www] mysql -uroot -p\n    创建数据库\n    MariaDB [(none)]> create database db_name default character set utf8;\n    \n4. 创建虚拟环境并激活\n    [root@localhost /]#  cd /www/\n    [root@localhost www]#  virtualenv env --system-site-packages （这里虚拟环境要继承全局）\n    [root@localhost www]#  source env/bin/activate\n\n5. 配置django环境\n    在虚拟环境下，安装所需的packages， 然后配置数据库等开发需要的内容。\n    \n6. 配置uwsgi\n    在manage.py文件同级目录下新建文件django_socket.ini为uwsgi配置文件。内容如下：\n    [uwsgi]\n    chdir = /www/site/  # 项目根目录路径\n    wsgi-file = /www/site/site/wsgi.py  # wsgi文件路径\n    master = true\n    vhost = true\n    pythonpath = /www/env/lib/python2.7/site-packages  # 虚拟环境路径\n    socket = 127.0.0.1:8077\n    processes = 4\n    threads = 2\n    log-maxsize = 500000\n    buffer-size = 32768\n    daemonize = /www/logs/uwsgi.log  # log文件路径\n    \n7. 配置nginx\n    在/etc/nginx/conf.d/目录下新建nginx配置文件，site.conf(必须是.conf的后缀名)，配置文件内容如下：\n    server {\n        listen 80;\n        server_name 192.168.1.20;  # 域名或者ip地址\n        root /www/site;\n\n        location / {\n                uwsgi_pass 127.0.0.1:8077;\n                include uwsgi_params;\n                uwsgi_param REMOTE_ADDR $HTTP_X_REAL_IP;\n        }\n\n        location = /50x.html {\n                root html;\n        }\n\n        location /static/ {\n                root /www/site;  # 静态资源路径\n        }\n\n        location /uploads/ {\n                root /www/site;\n        }\n    }\n    \n    以上配置基本完成了，接下来运行如下命令：\n        [root@localhost site]#  uwsgi --ini django_socket.ini\n        [root@localhost site]#  nginx -c /etc/nginx/nginx.conf\n        [root@localhost site]#  nginx -s reload\n        如果没有报错，就说明配置成功，在浏览器输入ip地址或者域名就能访问了。\n        \n8. 脚本启动服务器\n    方便起见，我们可以设置脚本启动重启服务器，在/www/目录下新建shell脚本， 命名为update.sh， 内容如下：\n    #!/bin/bash\n            \n    nginx_process=`ps aux|grep nginx|grep worker`\n    if [ \"$nginx_process\" != \"\" ]; then\n        killall -9 nginx\n    fi\n    \n    uwsgi_process=`ps aux|grep uwsgi|grep django_socket`\n    if [ \"$uwsgi_process\" != \"\" ]; then\n        killall -9 uwsgi\n    fi\n    \n    cd /www/site\n    #/usr/bin/python manage.py collectstatic \n    /usr/bin/uwsgi --ini django_socket.ini\n    \n    /usr/sbin/nginx -c /etc/nginx/nginx.conf\n    /usr/sbin/nginx -s reload\n    \n    修改文件权限：\n        [root@localhost www]# chmod 755 update.sh\n        \n    脚本启动配置完成，如果发布新版本之后记得执行该脚本才能生效。（如果报错为：nginx502那就再执行一次 - -）\n    \n    \n9. 自动化配置\n    配置mysql开机启动：\n        [root@localhost www]#  systemclt enable mariadb\n\n    配置uwsgi+nginx开机启动：\n        由于已经设置通过脚本启动uwsgi和nginx，所以只需要将/www/update.sh这个脚本设置为开机启动就OK啦。配置如下：\n        \n        打开/etc/rc.local，在最后一行添加：\n            sh /www/update.sh\n            \n        保存关闭。重启服务器之后有可能脚本没有被自动执行，原因是/etc/rc.local是/etc/rc.d/rc.local的链接文件，因此，需要修改/etc/rc.d/rc.local的权限：\n            [root@localhost root]# chmod 755 /etc/rc.d/rc.local\n            \n            \n至此，整个部署就完成了。如有需要改进的地方，还请各位指出，互相学习交流。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "4"}