{"title": "四元组相加获得target - leetcode ", "index": "leetcode,算法,python", "content": "四元组相加获得target\n4Sum\n\n给定一个数组，选择四个元素相加，结果为target，找出所有符合的四元组。\nGiven an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.\n\nNote: The solution set must not contain duplicate triplets.\nexample 1\nFor example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.\n\nA solution set is:\n[\n  [-1,  0, 0, 1],\n  [-2, -1, 1, 2],\n  [-2,  0, 0, 2]\n]\n思路\n\n思路参照三元组相加获得target\n多一层循环即可，注意边界检测即可。\n\n代码\nclass Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        nums.sort()\n        ret = []\n        for i in range(len(nums) - 3):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            for j in range (i+1, len(nums) - 2):\n                if j > i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                head, tail = j+1, len(nums) - 1\n                while head < tail:\n                    if nums[i] + nums[j] + nums[head] + nums[tail] == target:\n                        ret.append([nums[i], nums[j], nums[head], nums[tail]])\n                        head += 1\n                        tail -= 1\n                        while head < tail and nums[head] == nums[head - 1]:\n                            head += 1\n                        while head < tail and nums[tail] == nums[tail + 1]:\n                            tail -= 1\n                    elif nums[i] + nums[j] + nums[head] + nums[tail] > target:\n                        tail -= 1\n                    else:\n                        head += 1\n        return ret\n本题以及其它leetcode题目代码github地址: github地址\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}