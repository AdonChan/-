{"title": "在 Visual Studio Code 中配置 Python Flask 环境 - 小赤石的Code Space ", "index": "visual-studio-code,flask,python", "content": "在 Visual Studio Code 中配置 Python Flask 环境\n\n本文由 赤石俊哉 原创编写，您可以在学习交流用途以内自由使用文章。  但是禁止抄袭文章，转载时，请注明来源地址，谢谢。最后更新时间： 2017年11月24日 17:53:15\n更多文章可以参见 小赤石的Code Space\n\n\n0. 准备阶段\n1. 在 vscode 中安装 python 语言支持\n\n2. 使用 pip 安装 virtualenv、pylint、yapf\n\nvirtualenv\npylint\nyapf\n安装过程\n\n安装中可能出现的问题\nUnicodeEncodeError 'utf-8' codec can't encode character...\n\n\n\n3. 修改 vscode 中的设置\n\n4. 使用 virtualenv 创建工程目录\n\n创建文件夹并配置虚拟环境\n往虚拟环境中安装包\n\n\n5. 修改 launch.json\n6. 创建测试代码并运行测试\n\n0. 准备阶段\n本文默认您已经完成了以下工作的情况：\n1. 安装完成了 Visual Studio Code。\n2. 安装完成了 Python 3.6.3 并且将 Python 添加到系统变量 PATH 中。\n\n1. 在 vscode 中安装 python 语言支持\n运行 vscode，按下 Ctrl + P，会打开一个输入框，输入 ext install python，就会进入扩展商店，搜索 python。我们需要的是发行者为 Microsoft 的那一个名为 Python 的扩展。点击 安装 按钮，安装完成之后，点击 重新加载。\n2. 使用 pip 安装 virtualenv、pylint、yapf\n下面是各个包的简单说明，如果您足够了解的话，可以直接跳转到 安装过程 小节。\nvirtualenv\n\n摘自：廖雪峰的官方网站 - virtualenv\n在开发 Python 应用程序的时候，系统安装的 Python3 只有一个版本：3.4。所有第三方的包都会被 pip 安装到Python3的 site-packages 目录下。  如果我们要同时开发多个应用程序，那这些应用程序都会共用一个 Python，就是安装在系统的 Python 3。  如果应用 A 需要 jinja 2.7，而应用 B 需要 jinja 2.6 怎么办？  这种情况下，每个应用可能需要各自拥有一套“独立”的 Python 运行环境。virtualenv 就是用来为一个应用创建一套“隔离”的 Python 运行环境。\n\npylint\n\n摘自：如何使用 Pylint 来规范 Python 代码风格\nPylint 是一个 Python 代码分析工具，它分析 Python 代码中的错误，查找不符合代码风格标准（Pylint 默认使用的代码风格是 PEP 8，具体信息，请参阅参考资料）和有潜在问题的代码。\n\n简单的来说，Pylint 为我们提供了纠错的功能，如果你希望在你的代码中，及时发现标注波浪线的错误，请安装它。\nyapf\n\n摘自：有哪些命令行的软件堪称神器？ - int32bit的回答 - 知乎\nGoogle开发的python代码格式规范化工具，支持pep8以及Google代码风格。\n\n简单的说， yapf 为我们提供了格式化代码的功能，如果你希望在你的代码中，使用 Alt + Shfit + F 来自动格式化你的 Python 代码，请安装它。\n安装过程\n使用下面的命令依次安装他们：\npip install virtualenv\npip install pylint\npip install yapf\n安装中可能出现的问题\n下面总结一下，笔者在安装中出现过的问题，以及解决方法。\nUnicodeEncodeError 'utf-8' codec can't encode character...\n这个也是一个比较常见的问题，遇到这个问题时，可以参考错误中的倒数第三行中的路径：\n...\nFile \"c:\\users\\xxx\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\pip\\compat\\__init__.py\", line 75, in console_to_str\n    return s.decode('utf_8')\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0xc1 in position 55: invalid start byte\n比如，上面的错误中，我们打开c:\\users\\xxx\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\pip\\compat\\__init__.py这个文件，定位到 第 75 行。将 return s.decode('utf_8') 改为 return s.decode('cp936')如上操作可能需要管理员权限，建议使用 Windows + X 使用管理员权限的命令提示符或者管理员权限的 PowerShell。然后输入 code c:\\users\\xxx\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\pip\\compat\\__init__.py 改成对应你的文件名。\n3. 修改 vscode 中的设置\n打开 vscode，进入 文件 > 首选项 > 设置，按照下面的注释修改对应的值。\n    // 如果使用 pylint， 设置下面的为 true。如果使用其他语法纠错的库，可以将对应的设置为 true，其他的设置为 false。\n    \"python.linting.pylintEnabled\": true\n\n    // 如果安装了 yapf，并且希望使用 yapf 格式化代码的，请修改下面的选项。\n    \"python.formatting.provider\": \"yapf\"\n4. 使用 virtualenv 创建工程目录\n为每一个 Python 项目配置一个独立的环境和目录，是一个比较好的想法，这样你可以根据需要安装不同的库以及版本。这一小节，将使用 virtualenv 创建一个虚拟环境，并且安装 flask。\n首先，我们先启动一个具有管理员权限的 PowerShell。（你也可以使用 CMD）假设我们需要将项目放在 D:\\pydemo\\ 这个文件夹内。\n创建文件夹并配置虚拟环境\nPS D:\\> mkdir pydemo\n\nPS D:\\> cd pydemo\n\nPS D:\\pydemo> virtualenv --no-site-packages .venv\nUsing base prefix 'c:\\\\program files\\\\python36'\nNew python executable in D:\\pydemo\\.venv\\Scripts\\python.exe\nInstalling setuptools, pip, wheel...done.\n\nPS D:\\pydemo>\n如果出现上面的提示，就说明安装已经完成了，接下来我们要将 PowerShell 的环境切换到这个虚拟环境中。\n在 PowerShell 中：\nPS D:\\pydemo> ./.venv/Scripts/activate.ps1\n(.venv) PS D:\\pydemo>\n如果提示错误，可以尝试使用下面的方法解决\n(.venv) PS D:\\pydemo> Set-ExecutionPolicy RemoteSigned\n\n执行策略更改\n执行策略可帮助你防止执行不信任的脚本。更改执行策略可能会产生安全风险，如 http://go.microsoft.com/fwlink/?LinkID=135170\n中的 about_Execution_Policies 帮助主题所述。是否要更改执行策略?\n[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助 (默认值为“N”): Y\n如果你使用的是 CMD，则使用下面的命令：\nD:\\pydemo> ./.venv/Scripts/activate.bat\n(.venv) D:\\pydemo>\n往虚拟环境中安装包\n如果你的命令行，或者 PowerShell 已经变成了\n(.venv) PS D:\\pydemo>\n前面有一个括号，表示的是你最开始创建的虚拟环境的位置，那么这就说明你已经把上下文的环境切换到了虚拟环境里面。我们在这里面安装的 pip 就不会放到公共的 site-packages 里面了。\n执行下面的命令安装 flask 和 watchdog（如果又出现 UnicodeEncodeError，参考上一节所描述的解决方案，修改虚拟环境中的 __init__.py。）\n(.venv) PS D:\\pydemo> pip install flask\nCollecting flask\n  Using cached Flask-0.12.2-py2.py3-none-any.whl\nCollecting Jinja2>=2.4 (from flask)\n  Using cached Jinja2-2.10-py2.py3-none-any.whl\nCollecting Werkzeug>=0.7 (from flask)\n  Using cached Werkzeug-0.12.2-py2.py3-none-any.whl\nCollecting click>=2.0 (from flask)\n  Using cached click-6.7-py2.py3-none-any.whl\nCollecting itsdangerous>=0.21 (from flask)\nCollecting MarkupSafe>=0.23 (from Jinja2>=2.4->flask)\nInstalling collected packages: MarkupSafe, Jinja2, Werkzeug, click, itsdangerous, flask\nSuccessfully installed Jinja2-2.10 MarkupSafe-1.0 Werkzeug-0.12.2 click-6.7 flask-0.12.2 itsdangerous-0.24\n\n(.venv) PS D:\\pydemo> pip install watchdog\nCollecting watchdog\nCollecting argh>=0.24.1 (from watchdog)\n  Using cached argh-0.26.2-py2.py3-none-any.whl\nCollecting PyYAML>=3.10 (from watchdog)\nCollecting pathtools>=0.1.1 (from watchdog)\nInstalling collected packages: argh, PyYAML, pathtools, watchdog\nSuccessfully installed PyYAML-3.12 argh-0.26.2 pathtools-0.1.2 watchdog-0.8.3\n\n(.venv) PS D:\\pydemo>\n安装完成之后，我们可以从 PowerShell 中直接运行 vscode 并且将工作目录设置为当前目录（也就是D:\\pydemo）。\n(.venv) PS D:\\pydemo> code .\n5. 修改 launch.json\n打开 vscode 之后，使用 Ctrl + Shift + D，或者点击侧边栏的调试选项，调出调试选项侧边栏。然后点击齿轮 配置或修复 \"launch.json\"，自动生成一个 launch.json。如果出现选择环境，我们选择 Python。\n在 configurations 中，我们仅保留 \"name\": \"Python: Flask (0.11.x or later)\"这一段。其他的全部删掉。\n将这一段配置中的下面几个选项重新配置一下：\n// 将 Python 指定为虚拟环境中的 Python\n\"pythonPath\": \"${workspaceRoot}/.venv/Scripts/python.exe\"\n\n// 将 program 和 env.FLASK_APP 都设定为你这个项目的入口文件。\n\"program\": \"${workspaceRoot}/main.py\"\n\"env\": {\n    \"FLASK_APP\": \"${workspaceRoot}/main.py\"\n}\n配置完之后，应该是这样的：\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Python: Flask (0.11.x or later)\",\n            \"type\": \"python\",\n            \"request\": \"launch\",\n            \"stopOnEntry\": false,\n            \"pythonPath\": \"${workspaceRoot}/.venv/Scripts/python.exe\",\n            \"program\": \"${workspaceRoot}/main.py\",\n            \"cwd\": \"${workspaceRoot}\",\n            \"env\": {\n                \"FLASK_APP\": \"${workspaceRoot}/main.py\"\n            },\n            \"args\": [\n                \"run\",\n                \"--no-debugger\",\n                \"--no-reload\"\n            ],\n            \"envFile\": \"${workspaceRoot}/.env\",\n            \"debugOptions\": [\n                \"WaitOnAbnormalExit\",\n                \"WaitOnNormalExit\",\n                \"RedirectOutput\"\n            ]\n        }\n    ]\n}\n保存并关闭。\n6. 创建测试代码并运行测试\n使用 Ctrl + Shift + E 或者点击左侧边栏的文件，回到文件侧边栏。在 pydemo 中，我们新建一个文件，名为main.py。如果你上面的配置指定的是其他文件名，可以修改成你自己指定的。\n并加入下面的代码：\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return \"Hello World!\"\n\nif __name__ == '__main__':\n    app.debug = False\n    app.run(host='localhost', port=5000)\n这里必须将 app.debug 设置为 False，否则会出现一直Restarting。按下 F5 运行代码，将会在 调试控制台 中看到：\n* Running on http://localhost:5000/ (Press CTRL+C to quit)\n这个时候，我们可以通过浏览器访问http://localhost:5000/，会有 Hello World! 显示。到此，我们的环境配置就完成了。\n\n参考文章：https://www.liaoxuefeng.com/w...\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "9"}