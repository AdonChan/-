{"title": "【Leetcode】61.旋转链表 - LeetCode题解 ", "index": "redis,nginx,spring,java,python", "content": "作者: 码蹄疾毕业于哈尔滨工业大学。 小米广告第三代广告引擎的设计者、开发者；负责小米应用商店、日历、开屏广告业务线研发；主导小米广告引擎多个模块重构；关注推荐、搜索、广告领域相关知识;\n给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。\n示例 1:\n输入: 1->2->3->4->5->NULL, k = 2\n输出: 4->5->1->2->3->NULL\n解释:\n向右旋转 1 步: 5->1->2->3->4->NULL\n向右旋转 2 步: 4->5->1->2->3->NULL\n示例 2:\n输入: 0->1->2->NULL, k = 4\n输出: 2->0->1->NULL\n解释:\n向右旋转 1 步: 2->0->1->NULL\n向右旋转 2 步: 1->2->0->NULL\n向右旋转 3 步: 0->1->2->NULL\n向右旋转 4 步: 2->0->1->NULL\n题解\n昨晚吃火锅吃撑了回来这道题，还算顺利~~链表的题目,其实就是在考指针交换,这个题目先让链表连成一个环，然后再切开就可以完成了。\npython版本\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\n\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if head is None or head.next is None:\n            return head\n        # 链表的节点个数\n        count = 1\n        cur = head\n        while cur.next:\n            count += 1\n            cur = cur.next\n        # 如果恰好走了一个环,就直接返回\n        k = k % count\n        if k == 0:\n            return head\n        cur.next = head\n        dummy = ListNode(-1)\n        dummy.next = head\n        prev = dummy\n        # 需要走count-k个,然后把链表切断\n        for _ in range(count - k):\n            prev = prev.next\n        # 重新组成新的链表\n        cur = prev.next\n        new_head = cur\n        \n        prev.next = None\n\n        return new_head\njava版本\npublic class Solution {\n    public ListNode rotateRight(ListNode head, int k) {\n        if (head == null || head.next == null) {\n            return head;\n        }\n\n        int count = 1;\n        ListNode cur = head;\n        while (cur.next != null) {\n            count++;\n            cur = cur.next;\n        }\n        k = k % count;\n        if (k == 0) {\n            return head;\n        }\n        cur.next = head;\n        ListNode dummy = new ListNode(-1);\n        dummy.next = head;\n        ListNode prev = dummy;\n        for (int i = 0; i < count - k; i++) {\n            prev = prev.next;\n        }\n        cur = prev.next;\n        prev.next = null;\n        return cur;\n    }\n}\n热门阅读\n\n【Leetcode】60. 第k个排列\n技术文章汇总\n\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}