{"title": "Python Schema一种优雅的数据验证方式 - gevirus ", "index": "python", "content": "Python Schema使用说明\n项目地址：GitHub\nSchema是什么？\n不管我们做什么应用，只要和用户输入打交道，就有一个原则--永远不要相信用户的输入数据。意味着我们要对用户输入进行严格的验证，web开发时一般输入数据都以JSON形式发送到后端API，API要对输入数据做验证。一般我都是加很多判断，各种if，导致代码很丑陋，能不能有一种方式比较优雅的验证用户数据呢？Schema就派上用场了。\nSchema非常简单，也就几百行的代码，最核心的类就一个：Schema。\n1. 给Schema类传入类型（int、str、float等）\n例如：\nfrom schema import Schema\n\nSchema(int).validate(10)\n10\nSchema(int).validate('10')\nSchemaUnexpectedTypeError: '10' should be instance of 'int'\n可见Schema会去验证validate方法传入的对象是不是所指定的类型，是则返回传入的数据，否则抛出一个SchemaError的异常(SchemaUnexpectedTypeError是SchemaError的子类）。\n2. 给Schema类传入可调用的对象（函数、带__call__的类等）\n例如：\nSchema(lambda x: 0<x<10).validate(5)\n5\nSchema(lambda x: 0<x<10).validate(57)\nSchemaError: <lambda>(57) should evaluate to True\n可见Schema会把validate方法传入的值传入到对应的函数里面作为参数，如果函数返回值为True则返回输入数据，否则抛出异常。\n3. 给Schema类传入带有validate方法的对象\nSchema也内置了一些类（Use、And、Or等等），这些类的实例都带有validate方法，亦可作为Schema的参数传入，例如：\nfrom schema import Schema, And\n\n# And代表两个条件必须同时满足\nSchema(And(str, lambda s: len(s) > 2)).validate('abcd')\n'abcd'\n4. 给Schema类传入容器对象（list、tuple、set等）\n例如：\n\nSchema([int, float]).validate([1, 2, 3, 4.0])\n[1, 2, 3, 4.0]\n相当于，对于[1, 2, 3, 4.0]当中的任何一个元素，必须是int或者float才行（注意是or的关系）\n5. 给Schema传入一个字典对象（大部分使用Schema的场景都是传入字典对象，这个很重要）\nSchema({'name': str, 'age': int}).validate({'name': 'foobar', 'age': 18})\n{'age': 18, 'name': 'foobar'}\nSchema({'name': str, 'age': int}).validate({'name': 'foobar'})\nSchemaMissingKeyError: Missing keys: 'age'\n首先，明确两个概念，Schema类传入的字典，称之为模式字典，valdiate方法传入的字典称之为数据字典。\n首先，Schema会判断，    模式字典和数据字典的key是否完全一样，不一样的话直接抛出异常。如果一样，就去拿数据字典的value去验证模式字典相应的value，如果数据字典的全部value都可以验证通过的话才返回数据，否则抛出异常，是不是感觉这种验证顿时感觉清爽了呢？\n6. faqs\n\nSchema传入字典很好用，但是我有的数据是可选的，也就是说有的key可以不提供怎么办？\nfrom schema import Optional, Schema\n\n\nSchema({'name': str, Optional('age'): int}).validate({'name': 'foobar'})\n{'name': 'foobar'}\nSchema({'name': str, Optional('age', default=18): int}).validate({'name': 'foobar'})\n{'age': 18, 'name': 'foobar'}\n我想让Schema只验证传入字典中的一部分数据，可以有多余的key但是不要抱错，怎么做？\nSchema({'name': str, 'age': int}, ignore_extra_keys=True).validate({'name': 'foobar', 'age': 100, 'sex': 'male'})\n{'age': 100, 'name': 'foobar'}\n\nSchema抛出的异常信息不是很友好，我想自定义错误信息，怎么办？\nSchema自带的类（Use、And、Or、Regex、Schema等）都有一个参数error，可以自定义错误信息\nSchema({'name': str, 'age': Use(int, error='年龄必须是整数')}).validate({'name': 'foobar', 'age': 'abc'})\nSchemaError: 年龄必须是整数\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}