{"title": "Python：Tornado 第二章：实战演练：开发Tornado网站：第三节：RequestHandler：接入点函数 - python3 ：公司内部培训专栏 ", "index": "python", "content": "上一篇文章：Python：Tornado 第二章：实战演练：开发Tornado网站：第二节：路由解析下一篇文章：Python：Tornado 第二章：实战演练：开发Tornado网站：第四节：RequestHandler：输入捕捉\n\n需要子类继承并定义具体行为的函数在RequestHandler中被称为接入点函数(Entry point),上面的Hello World实例中的get()函数就是典型的接入点函数。\n1、RequestHandler.initialize()\n该方法被子类重写，实现了RequestHandler子类实现的初始化过程。\n可以为该函数传递参数（参数来源于配置URL映射的定义）。\n实例：\nfrom tornado.web import RequestHandler,Application\nimport tornado.ioloop\nimport tornado.web\n\nclass ProfileHandler(RequestHandler):\n    def initialize(self,database):\n        self.database=database\n\n    def get(self):\n        return self.write(self.database)\n\n    def post(self):\n        pass\n\ndef make_app():\n    return Application([\n    (r\"/test\",ProfileHandler,dict(database=\"test.db\",))\n])\n\ndef main():\n    app=make_app()\n    app.listen(8888)\n    tornado.ioloop.IOLoop.current().start()\n\nif __name__==\"__main__\":\n    main()\n\n在浏览器上输入：http://localhost:8888/test\n页面显示：\ntest.db\n2、RequestHandler.prepare()、RequestHandler.on_finish()\nprepare()方法用于调用请求处理（get、post等）方法之前的初始化处理，通常用来做资源初始化操作。\non_finish()方法用于请求处理结束后的一些清理工作，通常用来清理对象占用的内存或者关闭数据库连接等工作。\n3、HTTP Action处理函数\n每个HTTP Action在RequestHandler中都以单独的函数进行分开处理：\n\nRequestHandler.get(*args,**kwargs)\nRequestHandler.post(*args,**kwargs)\nRequestHandler.head(*args,**kwargs)\nRequestHandler.delete(*args,**kwargs)\nRequestHandler.patch(*args,**kwargs)\nRequestHandler.put(*args,**kwargs)\nRequestHandler.options(*args,**kwargs)\n\n每个处理函数都是HTTP Action的小写名字命名。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}