{"title": "使用 python-nmap 进行端口扫描 - 个人文章 ", "index": "python,端口扫描", "content": "\n利用 python-nmap模块进行端口扫描,简单的实现方式\n实现了三种输入方式    1)单个端口扫描,例如 python scanport.py -H host -P port   2)多个端口扫描,例如 python scanport.py -H host -P port1,port2,.....   3)连续端口扫描,例如 python scanport.py -H host -P start_port-end_port\n\n\n#coding:utf-8\n\nimport nmap\nimport optparse\nimport sys\n\nclass INFO:\n    HEADER = '\\033[95m'\n    OKBLUE = '\\033[94m'\n    OKGREEN = '\\033[92m'\n    WARNING = '\\033[93m'\n    ARNING = '\\033[93m'\n    FAIL = '\\033[91m'\n    ENDC = '\\033[0m'\n    BOLD = '\\033[1m'\n    UNDERLINE = '\\033[4m'\n\n\ndef scanport(host, port):\n    nm =nmap.PortScanner()\n    try:\n        result = nm.scan(host,port)\n        state = result['scan'][host]['tcp'][int(port)]['state']# 多层字典嵌套取值\n        if state =='open':\n            print INFO.OKBLUE+'[*] '+host+ ' tcp/'+port+\" \"+state+INFO.ENDC\n        else:\n            print INFO.WARNING+'[*] '+host+ ' tcp/'+port+\" \"+state+INFO.ENDC\n    except Exception,e:\n        raise e\n\n\nif __name__ == '__main__':\n    parser = optparse.OptionParser(\"usage %prog -H <target host> -p <target port> or -p <start_port>-<end_port>\")\n    parser.add_option('-H', dest='Host', type='string', help='specify target host')\n    parser.add_option('-P', dest='Port', type='string', help='specify target port[s] separated by \"-\"'or \",\")\n    (options, args) = parser.parse_args()\n\n    if options.Host ==None or options.Port==None:\n        print parser.usage\n        sys.exit()\n\n    host = options.Host\n    ports = options.Port\n    print host,ports\n    \n    #如果是连续的端口\n    if '-' in ports:\n        ports_list = ports.split('-')\n        for p in range(int(ports_list[0]),int(ports_list[1])+1):\n           scanport(host, str(p))\n           \n    #其他的情况\n    else:\n        ports_list = ports.split(',')\n        for p in ports_list:\n            scanport(host, p)\n\n上面的代码有点复杂,改良之后的代码如下:优化结构\nimport nmap,argparse, sys\nclass INFO:\n    HEADER = '\\033[95m'\n    OKBLUE = '\\033[94m'\n    OKGREEN = '\\033[92m'\n    WARNING = '\\033[93m'\n    ARNING = '\\033[93m'\n    FAIL = '\\033[91m'\n    ENDC = '\\033[0m'\n    BOLD = '\\033[1m'\n    UNDERLINE = '\\033[4m'\n    \n\n\n\ndef scan_port(host, port):\n    nm = nmap.PortScanner()\n    try:\n        result= nm.scan(host,port)\n        print result\n        state = result['scan'][host]['tcp'][int(port)]['state']\n        if state == 'open':\n            print INFO.OKBLUE+'[*] '+host+ ' tcp/'+port+\" \"+state+INFO.ENDC\n        else:\n            print INFO.WARNING + '[*] ' + host + ' tcp/' + port + \" \" + state + INFO.ENDC\n    except Exception,e:\n        raise e\n\ndef get_args():\n    parger = argparse.ArgumentParser(description='port scan script')\n    parger.add_argument('-H', '--host', help='specify target host')\n    parger.add_argument('-P', '--port', help='specify target port')\n    args = parger.parse_args()\n    print args\n    if args.host == None:\n        parger.error('host is required')\n        sys.exit()\n    if args.port == None:\n        parger.error('host is required')\n        sys.exit()\n    else:\n        return args\n\n        \ndef main():\n    args = get_args()\n    if '-' in args.port:\n        ports_list = args.port.split('-')\n        for p in range(int(ports_list[0]),int(ports_list[1])+1):\n            scan_port(args.host, str(p))\n    else:\n        ports_list = args.port.split(',')\n        for p in ports_list:\n            scan_port(args.host, p)  \n    \n\nif __name__ == '__main__':\n    main()\n           \n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "3"}