{"title": "python tips(2) - quietin的代码碎碎念 ", "index": "python,python2.x", "content": "join函数的使用\n一般的字符串组合操作都建议使用join, 字符串操作经常使用的就join, split, replace, 另外还有partitionjoin里面可以写成一个列表解析的形式\nm = map(str, range(9))\n','.join(x for x in m if x != '3')\n\n# 而不是\n','.join([x for x in m if x != '3'])\n从列表中删除多个相同的元素\n用list.remove是不行的, 只能删除从左到右找到的第一个元素, 后面的不会删除自认为两种比较好的方式如下\nm = ['a', 'b', 'c', 'a']\nm = filter(lambda x: x !='a', m)\n或者\nm[:] = (x for x in m if x != 'a')\n随机生成n位字符串\nimport random\nimport string\n\nrand_str = \"\".join([random.choice(string.letters+string.digits) for _ in xrange(n)])\n引用类型的问题\n函数参数\n函数默认参数，只在定义时参数求值了一次，函数的多个调用将使用同一个可变参数\ndef test(data, x=[]):\n    x.append(data)\n    return x\nprint test(3)\n# [3]\nprint test(4)\n# [3, 4]\ndict.fromkeys设置默认值的问题\n和函数参数问题一样，多个键值对应的value将调用同一个列表。设置为{}自然也是一样的结果\n>>> a = dict.fromkeys('bc', [])\n>>> a['b'].append(6)\n>>> a\n{'b': [6], 'c': [6]}\n多个变量声明\n一般会有声明多个空list和空dict的需求将导致多个变量共享同一个[]或{}的错误的做法\na = b = []\nc = d = {}\n正确的方式\na, b = [], []\n# for a lot of var\nc, d, e, f = [{} for _ in xrange(4)]\n其它int, str, bool等没有此问题，可直接写成\na = b = True\ndel的时候一次可以删除多个\n>>> a = range(3)\n>>> del a[2], a[0]\n>>> a\n[1]\n切片操作\n可以用-1来反转列表\n>>> a = range(7)\n>>> a[::-1]\n[6, 5, 4, 3, 2, 1, 0]\n>>> a[::2]\n[0, 2, 4, 6]\n用切片删除某一段序列，等同于del a[1:4]\n>>> a = [1, 2, 3, 4, 5, 6, 7]\n>>> a[1:4] = []\n>>> a\n[1, 5, 6, 7]\n去除偶数索引\n>>> a = [0, 1, 2, 3, 4, 5, 6, 7]\n>>> del a[::2]\n>>> a\n[1, 3, 5, 7]\n关于省略号\n主要用于多维矩阵中，减少定位操作时的复杂度，用得不多，更仔细的说明见这里\n>>> class C(object):\n...  def __getitem__(self, item):\n...   return item\n...\n>>> C()[1:2, ..., 3]\n(slice(1, 2, None), Ellipsis, 3)\n文件操作\n一次读取整个文件\n使用二进制模式，如rb模式, 使用r则只能读取到一部分\nwith open(path, 'rb') as f:\n    return f.read()\n按行读取\n将文件对象看错iterator\nwith open(path, 'r') as f:\n    for line in f:\n        print line\n\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}