{"title": "python初学：第二步——模拟实现一个ATM + 购物商城程序 - 个人文章 ", "index": "python", "content": "功能描述\n作业需求：\n1、额度 15000或自定义\n2、实现购物商城，买东西加入购物车，调用信用卡接口结账\n3、可以提现，手续费5%\n4、支持多账户登录\n5、支持账户间转账\n6、记录每月日常消费流水\n7、提供还款接口\n8、ATM记录操作日志\n9、提供管理接口，包括添加账户、用户额度，冻结账户等。。。\n10、用户认证用装饰器\n注意：以上需求，要充分使用函数，请尽你的最大限度来减少重复代码！\n流程图\n程序流程图（待补全）![]()\n程序目录结构\nbin\n├── atm.py  # atm入口\n├── __init__.py\n└── manage.py  # 管理入口\nconf\n├── __init__.py\n└── settings.py  # 配置文件\ncore\n├── accounts.py  # 账号添加、修改额度、禁用、启动接口\n├── actions.py   # sql动作接口\n├── auth.py      # 用户认证接口\n├── database.py  # 数据库操作接口\n├── db_handler.py# 无用到\n├── __init__.py\n├── logger.py    # 日志接口\n├── main.py      # 主接口\n├── parsers.py   # sql语法解析接口\n└── transaction.py # 交易接口\ndb\n├── accounts_table  # 用户账号表\n└── managers_table  # 管理员账号表\nlog\n├── access.log      #访问日志\n└── transactions.log #交易日志\n\n程序主体\ngithub链接\natm.py\n#!_*_coding:utf-8_*_\n\nimport os\nimport sys\nbase_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nprint(base_dir)\nsys.path.append(base_dir)\n\nfrom core import main\n\nif __name__ == '__main__':\n    main.run('atm')\n\nmanage.py\n#!_*_coding:utf-8_*_\n\nimport os\nimport sys\nbase_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nprint(base_dir)\nsys.path.append(base_dir)\n\nfrom core import main\n\nif __name__ == '__main__':\n    main.run('manage')\n\nsetting.py\n#!_*_coding:utf-8_*_\n#__author__:\"Alex Li\"\nimport os\nimport sys\nimport logging\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# Database title summary\nTITLE = ['id','name','age','phone','dept','enroll_date','expire_date','account','password','credit','balance','status','pay_day']\n\n# Account database setting\nDATABASE = {\n    'engine': 'file_storage',  # support mysql, postgresql in the future\n    'name':'accounts_table',\n    'path': \"%s/db/\" % BASE_DIR\n}\n\n# Manager account database setting\nMANAGE_DATABASE = {\n    'engine': 'file_storage',  # support mysql, postgresql in the future\n    'name':'managers_table',\n    'path': \"%s/db/\" % BASE_DIR\n}\n\n# logger setting\nLOG_LEVEL = logging.INFO\nLOG_TYPES = {\n    'transaction': 'transactions.log',\n    'access': 'access.log',\n}\n\n# Transaction setting\nTRANSACTION_TYPE = {\n    'repay':{'action':'plus', 'interest':0},\n    'withdraw':{'action':'minus', 'interest':0.05},\n    'transfer':{'action':'minus', 'interest':0.05},\n    'consume':{'action':'minus', 'interest':0},\n\n}\n\nACCOUNT_DEFAULT = {\n    'credit': 15000.0\n\n}\naccounts.py\n#!_*_coding:utf-8_*_\nimport json\nimport time\nfrom core import database\nfrom conf import settings\nfrom core import parsers\nfrom core import actions\n\n\ndef load_accounts(account):\n    \"\"\" Check account whether exists in a database\n\n    :param account:\n    :return:\n    \"\"\"\n    base_dir = settings.DATABASE['path']\n    sql_str = 'select * from accounts_table where account = %s' % account\n    sql_type = sql_str.split()[0]\n    dict_sql = parsers.parsers(sql_str, sql_type, base_dir)\n    res = actions.actions(sql_type, dict_sql)\n    if not res:\n        return False\n    else:\n        return True\n\n\ndef change_account(account, set_str):\n    \"\"\" Change account data\n\n    :param account:\n    :param set_str:\n    :return:\n    \"\"\"\n    base_dir = settings.DATABASE['path']\n    sql_str = 'update accounts_table set %s where account = %s' % (set_str, account)\n    sql_type = sql_str.split()[0]\n    dict_sql = parsers.parsers(sql_str, sql_type, base_dir)\n    actions.actions(sql_type, dict_sql)\n\n\ndef add_account(*args):\n    \"\"\" Add an new account\n\n    :param args:\n    :param kwargs:\n    :return:\n    \"\"\"\n    base_dir = settings.DATABASE['path']\n    sql_str = 'add to accounts_table values %s' % (','.join(args))\n    sql_type = sql_str.split()[0]\n    dict_sql = parsers.parsers(sql_str, sql_type, base_dir)\n    actions.actions(sql_type, dict_sql)\n\nactions.py\n# -*- coding: utf-8 -*-\nfrom core import database\nfrom conf import settings\nimport re\n\n\ndef actions(sql_type,dict_sql):\n    \"\"\" sql操作主函数\n\n    :param sql_type: sql语句的类型\n    :return:\n        actions_dict[sql_type]\n        相应操作的函数\n    \"\"\"\n    actions_dict = {'select': select_action,\n                    'add': add_action,\n                    'del': del_action,\n                    'update': update_action}\n    if sql_type in actions_dict:  # 判断导入的sql类型是否在actions_dict字典中定义。\n        return actions_dict[sql_type](dict_sql)\n    else:\n        return False\n\n\ndef select_action(dict_sql):\n    temp_list = []\n    info = dict_sql['select']\n    data = database.read_db(dict_sql['from'])  # 获取原始数据库文件中的所有数据，data为列表格式\n    key = dict_sql['where'][0]  # 获取sql语句中where语句的key值。如id = 1，获取id\n    count = 0\n    for values in data:  # 读取data列表中的每一个元素，values是字典格式\n        if type(values[key]) is int:\n            value = str(values[key])\n        else:\n            value = '\"' + str(values[key]) + '\"'\n        dict_sql['where'][0] = value  # 将values[key]的值取出并重新赋值为sql语句的key值。\n        print(where_action(dict_sql['where']))\n        if where_action(dict_sql['where']):  # 将新的where语句，发送给where_action语句进行bool判断。\n            count += 1\n            temp_list.append(values)\n    return temp_list\n\n\ndef add_action(dict_sql):\n    \"\"\" 插入动作\n        获取用户输入的values，并在表中插入\n\n    :param dict_sql: parsers函数处理后的字典格式的sql语句\n    \"\"\"\n    data = database.read_db(dict_sql['to'])  # 获取原始数据库文件中的所有数据\n    value = dict_sql['values']  # 从dict_sql中获取values的列表\n    t_id = str(int(data[-1]['id']) + 1)  # 获取原始数据库文件中id列最后一行的id数值，并每次自动+1。然后转换为字符串格式\n    value.insert(0, t_id)  # 将添加的id插入到value变量中\n    if len(value) != len(settings.TITLE):  # 判断输入值得长度是否等于数据库文件中定义的列的长度\n        print('列数不正确')\n    else:\n        data.append(dict(zip(settings.TITLE, value)))  # 在获取的原始数据中插入行的数据\n        database.write_db(dict_sql['to'], data)\n\n\ndef del_action(dict_sql):\n    \"\"\" 删除动作函数\n\n    :param dict_sql: parsers函数处理后的字典格式的sql语句\n    \"\"\"\n    temp_list = []\n    data = database.read_db(dict_sql['from'])  # 获取原始数据库文件中的所有数据，data为列表格式\n    key = dict_sql['where'][0]  # 获取sql语句中where语句的key值。如id = 1，获取id\n    for values in data:  # 读取data列表中的每一个元素，values是字典格式\n        if type(values[key]) is int:\n            value = str(values[key])\n        else:\n            value = '\"' + str(values[key]) + '\"'\n        dict_sql['where'][0] = value  # 将values[key]的值取出并重新赋值为sql语句的key值。\n        if where_action(dict_sql['where']):  # 将新的where语句，发送给where_action语句进行bool判断。\n            temp_list.append(values)  # 如果符合条件，就从data中移除对应的values\n    return temp_list\n    # print('已删除%s条记录' % len(temp_list))\n    # for i in temp_list:\n    #     data.remove(i)\n    # write_db(dict_sql['from'], data)  # 将新生成的data重新写入文件\n\n\ndef update_action(dict_sql):\n    \"\"\" 更新动作函数\n\n    :param dict_sql: parsers函数处理后的字典格式的sql语句\n    \"\"\"\n    data = database.read_db(dict_sql['update'])  # 获取原始数据库文件中的所有数据，data为列表格式\n    key = dict_sql['where'][0]  # 获取sql语句中where语句的key值。如id = 1，获取id\n    set_key = dict_sql['set'][0]  # 获取set语句中用户输入的key\n    set_value = dict_sql['set'][2].strip(\"'\").strip('\"')  # 获取set语句中用户输入的value\n    count = 0\n    for values in data:  # 读取data列表中的每一个元素，values是字典格式\n        if type(values[key]) is int:\n            value = str(values[key])\n        else:\n            value = '\"' + str(values[key]) + '\"'\n        dict_sql['where'][0] = value  # 将values[key]的值取出并重新赋值为sql语句的key值。\n        if where_action(dict_sql['where']):  # 将新的where语句，发送给where_action语句进行bool判断。\n            count += 1\n            values[set_key] = set_value  # 如果符合条件，使用将set_key的值修改为set_value\n    print(data)\n    print('已更新%s条记录' % count)\n    database.write_db(dict_sql['update'], data)  # 将新生成的data重新写入文件\n\n\ndef where_action(condition):\n    \"\"\" where语句操作函数\n\n    :param condition: 判断语句。就是字典中where的值\n    :return:\n    \"\"\"\n    if 'like' in condition:  # 如果like在语句中\n        # 将where语句中的第二个参数和，第一个参数进行正则比较。如果执行正常就返回True\n        return re.search(condition[2].strip(\"'\").strip('\"'), condition[0]) and True\n\n    else:\n        return eval(' '.join(condition))  # 除此使用eval进行python的逻辑判断\n\nauth.py\n#!_*_coding:utf-8_*_\nimport os\nfrom core import parsers\nfrom core import actions\nfrom core import db_handler\nfrom conf import settings\nfrom core import logger\nimport json\nimport time\n\n\ndef login_required(func):\n    \"验证用户是否登录\"\n\n    def wrapper(*args, **kwargs):\n        print(args, kwargs)\n        # print('--wrapper--->',args,kwargs)\n        if args[0].get('is_authenticated'):\n            return func(*args, **kwargs)\n        else:\n            exit(\"User is not authenticated.\")\n    return wrapper\n\n\ndef acc_auth(account, password, type):\n    '''\n    优化版认证接口\n    :param account: credit account number\n    :param password: credit card password\n    :return: if passed the authentication , retun the account object, otherwise ,return None\n\n    '''\n    # table = None\n    # base_dir = None\n    if type == 'atm':\n        base_dir = settings.DATABASE['path']\n        table = settings.DATABASE['name']\n    elif type == 'manage':\n        base_dir = settings.MANAGE_DATABASE['path']\n        table = settings.MANAGE_DATABASE['name']\n    sql_str = 'select * from %s where account = %s' % (table, account)\n    sql_type = sql_str.split()[0]\n    dict_sql = parsers.parsers(sql_str, sql_type, base_dir)\n    print(dict_sql)\n    res = actions.actions(sql_type, dict_sql)\n    print(res)\n    if not res:\n        print(\"\\033[31;1mAccount ID and password is incorrect!\\033[0m\")\n    elif res[0]['password'] == password:\n        print('haha')\n        exp_time_stamp = time.mktime(time.strptime(res[0]['expire_date'], \"%Y-%m-%d\"))\n        if time.time() > exp_time_stamp:\n            print(\"\\033[31;1mAccount [%s] has expired,please contact the back to get a new card!\\033[0m\" % account)\n        elif res[0]['status'] == 1:\n            print(\"\\033[31;1mAccount [%s] has expired,please contact the back to get a new card!\\033[0m\" % account)\n        else:  # passed the authentication\n            return res[0]\n    else:\n        print(\"\\033[31;1mAccount ID and password is incorrect!\\033[0m\")\n\n\ndef acc_login(user_data, log_obj, type):\n    '''\n    account login func\n    :user_data: user info data , only saves in memory\n    :return:\n    '''\n    retry_count = 0\n    while user_data['is_authenticated'] is not True and retry_count < 3 :\n        account = input(\"\\033[32;1maccount:\\033[0m\").strip()\n        password = input(\"\\033[32;1mpassword:\\033[0m\").strip()\n        auth = acc_auth(account, password, type)\n        if auth:  # not None means passed the authentication\n            log_obj.info(\"account [%s] login system\" % account)\n            user_data['is_authenticated'] = True\n            user_data['account_id'] = account\n            return auth\n        retry_count +=1\n    else:\n        log_obj.error(\"account [%s] too many login attempts\" % account)\n        exit()\n\n\ndef acc_logout(user_data, log_obj):\n    account = user_data['account_data']['name']\n    user_data['is_authenticated'] = False\n    log_obj.info(\"account [%s] logout system\" % account)\n    exit(\"account [%s] logout system\" % account)\n\ndatabaase.py\n# -*- coding: utf-8 -*-\nfrom conf import settings\n\ndef read_db(table):\n    \"\"\" 读取表文件函数。\n\n    :param table: 表文件参数\n    :return: 返回一个包含表文件内容的字典\n    \"\"\"\n    title = settings.TITLE\n    try:\n        main_list = []\n        with open(table, 'r', encoding='utf-8') as rf:\n            for line in rf:\n                temp_list = []\n                if line.rstrip('\\n').split(',') == title:\n                    continue\n                else:\n                    for values in line.strip('\\n').split(','):\n                        if values.isdigit():\n                            temp_list.append(int(values))\n                        else:\n                            temp_list.append(values)\n                    main_list.append(dict(zip(title, temp_list)))\n        return main_list\n    except FileNotFoundError as e:\n        print(e)\n        exit(1)\n\n\ndef write_db(table, data):\n    \"\"\" 写入表文件函数。\n\n    :param table: 表文件参数\n    :param data: 导入的数据。为字典格式\n    \"\"\"\n    value2 = ','.join(settings.TITLE) + '\\n'\n    for values in data:\n        temp_list = []\n        for value in values.values():\n            temp_list.append(str(value))\n        value2 += ','.join(temp_list) + '\\n'\n    with open(file=table, mode='w', encoding='utf-8') as wf:\n        wf.write(value2)\n\n\ndef print_info(info, **kwargs):\n    \"\"\" 打印函数。\n        用于select语句打印显示\n\n    :param info: select语句中需要显示的类\n    :param kwargs: 字典，用于进行操作的原始数据\n    :return:\n    \"\"\"\n    temp_list = []\n    if info == '*':\n        for key in kwargs:\n            temp_list.append(str(kwargs[key]))\n        print(','.join(temp_list))\n    else:\n        info_list = info.split(',')\n        for i in info_list:\n            temp_list.append(str(kwargs[i]))\n        print(','.join(temp_list))\n\nlogger.py\n#!_*_coding:utf-8_*_\n\"\"\"\nhandle all the logging works\n\"\"\"\n\nimport logging\nfrom conf import settings\nimport time\nimport re\n\ndef logger(log_type):\n\n    # create logger\n    my_logger = logging.getLogger(log_type)\n    my_logger.setLevel(settings.LOG_LEVEL)\n\n    # create console handler and set level to debug\n    ch = logging.StreamHandler()\n    ch.setLevel(settings.LOG_LEVEL)\n\n    # create file handler and set level to warning\n    log_file = \"%s/log/%s\" % (settings.BASE_DIR, settings.LOG_TYPES[log_type])\n    fh = logging.FileHandler(log_file)\n    fh.setLevel(settings.LOG_LEVEL)\n    # create formatter\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\n    # add formatter to ch and fh\n    ch.setFormatter(formatter)\n    fh.setFormatter(formatter)\n\n    # add ch and fh to logger\n    my_logger.addHandler(ch)\n    my_logger.addHandler(fh)\n    return my_logger\n\n\ndef get_log_info(account):\n    \"\"\" 将日志的内容进行转换后返回相应账号的转款信息\n\n    :param account: 账号参数\n    :return:\n    \"\"\"\n    temp_list = []\n    log_file = \"%s/log/%s\" % (settings.BASE_DIR, settings.LOG_TYPES['transaction'])\n    with open(log_file, 'r') as f:\n        for i in f:\n            log_mat = re.search('(\\d{4}-\\d{1,2}-\\d{1,2}\\s\\d{1,2}:\\d{1,2}:\\d{1,2}).*account:(.*?)\\s.*action:(.*?)\\s.*amount:(.*?)\\s.*interest:(.*)',i)\n            datetime = time.strptime(log_mat.group(1),'%Y-%m-%d %H:%M:%S')\n            account_id = log_mat.group(2)\n            action = log_mat.group(3)\n            amount = log_mat.group(4)\n            interest = log_mat.group(5)\n            if account_id == account:\n                temp_list.append([datetime,action,amount,interest])\n    return temp_list\nmain.py\n#!_*_coding:utf-8_*_\n\"\"\"\"\nmain program handle module , handle all the user interaction stuff\n\n\"\"\"\n\nfrom core import auth\nfrom core import logger\nfrom core import parsers\nfrom core import transaction\nfrom core.auth import login_required\nfrom core import actions\nfrom conf import settings\nfrom core import accounts\nimport random\nimport datetime\nimport re\nimport time\n\n# transaction logger\ntrans_logger = logger.logger('transaction')\n# access logger\naccess_logger = logger.logger('access')\n\n\n# temp account data ,only saves the data in memory\nuser_data = {\n    'account_id': None,\n    'is_authenticated': False,\n    'account_data': None\n}\n\n\n@login_required\ndef account_info(acc_data):\n    \"\"\" print account Information\n\n    :param acc_data: account summary\n    :return:\n    \"\"\"\n    back_flag = False\n    info_temp_list = []\n    account_data = acc_data['account_data']\n    info_list = ['name', 'age', 'phone', 'enroll_date', 'expire_date', 'account', 'credit', 'balance']\n    for i in info_list:\n        info_temp_list.append(str(account_data[i]))\n    info = ''' --------- BALANCE INFO --------\n        username :    {0}\n        age:          {1}\n        phone:        {2}\n        enroll date:  {3}\n        expire date:  {4}\n        card number:  {5}\n        credit:       {6}\n        balance:      {7}\n        '''.format(*info_temp_list)\n    print(info)\n    while not back_flag:\n        input_b = input(\"\\033[33;1mInput 'b' return to menu:\\033[0m\").strip()\n        if input_b == 'b':\n            back_flag = True\n\n\n@login_required\ndef repay(acc_data):\n    \"\"\"\n    print current balance and let user repay the bill\n    :return:\n    \"\"\"\n    account_data = acc_data['account_data']\n    current_balance = ''' --------- BALANCE INFO --------\n        Credit :    %s\n        Balance:    %s'''.format(account_data['credit'], account_data['balance'])\n    print(current_balance)\n    back_flag = False\n    while not back_flag:\n        repay_amount = input(\"\\033[33;1mInput repay amount:\\033[0m\").strip()\n        if len(repay_amount) > 0 and repay_amount.isdigit():\n            new_balance = transaction.make_transaction(trans_logger, account_data, 'repay', repay_amount)\n            if new_balance:\n                print('''\\033[42;1mNew Balance:%s\\033[0m''' % (new_balance['balance']))\n        elif repay_amount == 'b':\n            back_flag = True\n        else:\n            print('\\033[31;1m[%s] is not a valid amount, only accept integer!\\033[0m' % repay_amount)\n\n\n@login_required\ndef withdraw(acc_data):\n    \"\"\"\n    print current balance and let user do the withdraw action\n    :param acc_data:\n    :return:\n    \"\"\"\n    account_data = acc_data['account_data']\n    current_balance = ''' --------- BALANCE INFO --------\n        Credit :    %s\n        Balance:    %s''' % (account_data['credit'], account_data['balance'])\n    print(current_balance)\n    back_flag = False\n    while not back_flag:\n        withdraw_amount = input(\"\\033[33;1mInput withdraw amount:\\033[0m\").strip()\n        if len(withdraw_amount) > 0 and withdraw_amount.isdigit():\n            new_balance = transaction.make_transaction(trans_logger, account_data, 'withdraw', withdraw_amount)\n            if new_balance:\n                print('''\\033[42;1mNew Balance:%s\\033[0m''' % (new_balance['balance']))\n        elif withdraw_amount == 'b':\n            back_flag = True\n        else:\n            print('\\033[31;1m[%s] is not a valid amount, only accept integer!\\033[0m' % withdraw_amount)\n\n\n@login_required\ndef transfer(acc_data):\n    \"\"\" transfer accounts\n\n    :param acc_data:\n    :return:\n    \"\"\"\n    account_data = acc_data['account_data']\n    current_balance = ''' --------- BALANCE INFO --------\n        Credit :    %s\n        Balance:    %s''' % (account_data['credit'], account_data['balance'])\n    print(current_balance)\n    back_flag = False\n    while not back_flag:\n        payee_account = input(\"\\033[33;1mInput payee account:\\033[0m\").strip()\n        if payee_account == 'b':\n            back_flag = True\n        else:\n            base_dir = settings.DATABASE['path']\n            sql_str = 'select * from accounts_table where account = %s' % payee_account\n            sql_type = sql_str.split()[0]\n            dict_sql = parsers.parsers(sql_str, sql_type, base_dir)\n            res = actions.actions(sql_type, dict_sql)\n            if not res:\n                print(\"\\033[31;1mThe payee you entered is not a bank user!\\033[0m\")\n            else:\n                payee_account_data = res[0]\n                trans_amount = input(\"\\033[33;1mInput transfer amount:\\033[0m\").strip()\n                if len(trans_amount) > 0 and trans_amount.isdigit():\n                    new_balance = transaction.make_transaction(trans_logger, account_data, 'transfer', trans_amount)\n                    payee_balance = transaction.make_transaction(trans_logger, payee_account_data,\n                                                                 'repay', trans_amount)\n                    if new_balance:\n                        print('''\\033[42;1mNew Balance:%s\\033[0m''' % (new_balance['balance']))\n                    if payee_balance:\n                        print('''\\033[42;1mThe money has come to the payee [%s]\\033[0m''' % payee_account)\n                elif trans_amount == 'b':\n                    back_flag = True\n                else:\n                    print('\\033[31;1m[%s] is not a valid amount, only accept integer!\\033[0m' % trans_amount)\n\n\n@login_required\ndef pay_check(acc_data):\n    \"\"\" Account pay check interface\n\n    :param acc_data:\n    :return:\n    \"\"\"\n    back_flag = False\n    account_id = acc_data['account_id']\n    local_month = time.localtime().tm_mon\n    res = logger.get_log_info(account_id)\n\n    if res:\n        for result in res:\n            if result[0].tm_mon == local_month:\n                pay_check_info = ''' --------- Datatime %s --------\n                Action:       %s\n                Amount:       %s\n                Interest:     %s''' % (time.strftime('%Y-%m-%d %H:%M:%S',result[0]), result[1], result[2], result[3])\n                print(pay_check_info)\n    while not back_flag:\n        input_b = input(\"\\033[33;1mInput 'b' return to menu:\\033[0m\").strip()\n        if input_b == 'b':\n            back_flag = True\n\n\n@login_required\ndef logout(acc_data):\n    auth.acc_logout(acc_data, access_logger)\n\n\ndef interactive(acc_data):\n    \"\"\" Atm interactive main interface\n\n    :param acc_data: account summary\n    :return:\n    \"\"\"\n    menu = u'''\n    ------- Oldboy Bank ---------\n    \\033[32;1m1.  账户信息(功能已实现)\n    2.  还款(功能已实现)\n    3.  取款(功能已实现)\n    4.  转账(功能已实现)\n    5.  账单(功能已实现)\n    6.  退出(功能已实现)\n    \\033[0m'''\n    menu_dic = {\n        '1': account_info,\n        '2': repay,\n        '3': withdraw,\n        '4': transfer,\n        '5': pay_check,\n        '6': logout,\n    }\n    exit_flag = False\n    while not exit_flag:\n        print(menu)\n        user_option = input(\">>:\").strip()\n        if user_option in menu_dic:\n            menu_dic[user_option](acc_data)\n        else:\n            print(\"\\033[31;1mOption does not exist!\\033[0m\")\n\n\n@login_required\ndef add_account(acc_data):\n    exit_flag = False\n    # id, name, age, phone, dept, enroll_date, expire_date, account, password, credit, balance, status, pay_day\n    while not exit_flag:\n        account_name = input(\"\\033[33;1mInput user name:\\033[0m\").strip()\n        if len(account_name) > 0:\n            account_name = account_name\n        else:\n            continue\n        account_age = input(\"\\033[33;1mInput user age:\\033[0m\").strip()\n        if len(account_name) > 0 and account_age.isdigit():\n            account_age = account_age\n        else:\n            continue\n        account_phone = input(\"\\033[33;1mInput user phone number:\\033[0m\").strip()\n        if len(account_phone) > 0 and account_phone.isdigit() and len(account_phone) == 11:\n            account_phone = account_phone\n        else:\n            continue\n        account_dept = input(\"\\033[33;1mInput user dept:\\033[0m\").strip()\n        if len(account_dept) > 0:\n            account_dept = account_dept\n        else:\n            continue\n        account = ''.join(str(random.choice(range(10))) for _ in range(5))  # 随机生成5位账号\n        password = input(\"\\033[33;1mInput account password:\\033[0m\").strip()\n        if len(password) == 0:\n            password = 'abcde'\n        else:\n            password = password\n        account_enroll_date = datetime.datetime.now().strftime(\"%Y-%m-%d\")  # 当前时间为开通时间\n        account_expire_date = (datetime.datetime.now() + datetime.timedelta(days=(3 * 365))).strftime(\"%Y-%m-%d\")  # 3年后为过期时间\n        #print(account_enroll_date,account_expire_date)\n        account_credit = input(\"\\033[33;1mInput account credit:\\033[0m\").strip()\n        if len(account_credit) == 0:\n            account_credit = str(settings.ACCOUNT_DEFAULT['credit'])\n        else:\n            account_credit = account_credit\n\n\n        #print(account)\n        input_list = [account_name, account_age,account_phone,account_dept,account_enroll_date,account_expire_date,account,password,account_credit,account_credit,'0','22']\n        print(input_list)\n        commit = input(\"\\033[33;1mCommit account or exit:(Y/N)\\033[0m\").strip().upper()\n        if commit == 'Y':\n            accounts.add_account(*input_list)\n            exit_flag = True\n        else:\n            exit_flag = True\n\n\n@login_required\ndef change_credit(acc_data):\n    \"\"\" Change account credit amount\n\n    :param acc_data:\n    :return:\n    \"\"\"\n    exit_flag = False\n    while not exit_flag:\n        dis_account = input(\"\\033[33;1mInput account:\\033[0m\").strip()\n        if dis_account == 'b':\n            exit_flag = True\n        elif len(dis_account) > 0:\n            if accounts.load_accounts(dis_account):\n                new_credits = input(\"\\033[33;1mInput new credits amount:\\033[0m\").strip()\n                if len(new_credits) > 0 and new_credits.isdigit():\n                    accounts.change_account(dis_account, 'credit = %s' % new_credits)\n                else:\n                    print('\\033[31;1m[%s] is not a valid amount, only accept integer!\\033[0m' % new_credits)\n            else:\n                print(\"\\033[31;1mThe account you entered is not a bank user!\\033[0m\")\n\n\n\n@login_required\ndef disable_account(acc_data):\n    \"\"\" Disable account\n\n    :return:\n    \"\"\"\n    exit_flag = False\n    while not exit_flag:\n        dis_account = input(\"\\033[33;1mInput account:\\033[0m\").strip()\n        if dis_account == 'b':\n            exit_flag = True\n        elif len(dis_account) > 0:\n            if accounts.load_accounts(dis_account):\n                accounts.change_account(dis_account, 'status = 1')\n            else:\n                print(\"\\033[31;1mThe account you entered is not a bank user!\\033[0m\")\n\n\n@login_required\ndef enable_account(acc_data):\n    \"\"\" Enable account\n\n    :return:\n    \"\"\"\n    exit_flag = False\n    while not exit_flag:\n        dis_account = input(\"\\033[33;1mInput account:\\033[0m\").strip()\n        if dis_account == 'b':\n            exit_flag = True\n        elif len(dis_account) > 0:\n            if accounts.load_accounts(dis_account):\n                accounts.change_account(dis_account, 'status = 0')\n            else:\n                print(\"\\033[31;1mThe account you entered is not a bank user!\\033[0m\")\n\n\n\ndef mg_interactive(acc_data):\n    \"\"\" Mange interactive main interface\n\n    :param acc_data: 返回的用户账号的具体信息\n    :return:\n    \"\"\"\n    menu = u'''\n    ------- Oldboy Bank ---------\n    \\033[32;1m1.  添加账号(功能已实现)\n    2.  修改额度(功能已实现)\n    3.  禁用账号(功能已实现)\n    4.  启用账号(功能已实现)\n    5.  退出(功能已实现)\n    \\033[0m'''\n    menu_dic = {\n        '1': add_account,\n        '2': change_credit,\n        '3': disable_account,\n        '4': enable_account,\n        '5': logout,\n    }\n    exit_flag = False\n    while not exit_flag:\n        print(menu)\n        user_option = input(\">>:\").strip()\n        if user_option in menu_dic:\n            menu_dic[user_option](acc_data)\n        else:\n            print(\"\\033[31;1mOption does not exist!\\033[0m\")\n\ndef run(type):\n    \"\"\"\n    this function will be called right a way when the program started, here handles the user interaction stuff\n    :return:\n    \"\"\"\n    if type == 'atm':\n        acc_data = auth.acc_login(user_data, access_logger, 'atm')\n        if user_data['is_authenticated']:\n            user_data['account_data'] = acc_data\n            interactive(user_data)\n    elif type == 'manage':\n        acc_data = auth.acc_login(user_data, access_logger, 'manage')\n        if user_data['is_authenticated']:\n            user_data['account_data'] = acc_data\n            mg_interactive(user_data)\n\nparsers.py\n# -*- coding: utf-8 -*-\nimport re\n#from .help import help\n\n\ndef parsers(sql_str, sql_type, base_dir):\n    \"\"\" 语法解析函数\n\n    :param sql_type: 从main()函数导入的sql语句类型。\n    :return:\n        parsers_dict[sql_type]\n        相应的语法解析函数\n    \"\"\"\n    parsers_dict = {'select': select_parser,\n                    'add': add_parser,\n                    'del': del_parser,\n                    'update': update_parser}\n    if sql_type in parsers_dict:\n        return parsers_dict[sql_type](sql_str, sql_type, base_dir)\n    else:\n        return False\n\n\ndef select_parser(sql_str, sql_type, base_dir):\n    \"\"\" 搜索语句解析函数\n\n    :param sql_str: 用户输入的sql语句\n    :param sql_type: 用户输入的sql语句类型\n    :param base_dir: 主函数导入的数据库所在路径\n    :return:\n    \"\"\"\n    dict_sql = {}  # 创建空字典\n    command_parse = re.search(r'select\\s(.*?)\\sfrom\\s(.*?)\\swhere\\s(.*)', sql_str, re.I)  # 使用正则表达式解析add语法，并且re.I忽略大小写\n    if command_parse:\n        dict_sql['select'] = command_parse.group(1)\n        dict_sql['from'] = base_dir + command_parse.group(2)  # sql字典'from’键添加数据库表文件路径的值\n        dict_sql['where'] = command_parse.group(3)  # sql字典‘where’键添加插入的值\n        if logic_cal(dict_sql['where']):  # 使用logic_cal函数将where语句语法再次进行解析\n            dict_sql['where'] = logic_cal(dict_sql['where'])  # 如解析有返回值，将返回值重新作为dict_sql['where']的值\n            return dict_sql\n        else:\n            print(help(sql_type))  # 当语法解析不正常答应帮助\n    else:\n        print(help(sql_type))  # 当语法解析不正常答应帮助\n\n\ndef add_parser(sql_str, sql_type, base_dir):\n    \"\"\" 添加语句解析函数\n\n    :param sql_str: 用户输入的sql语句\n    :param sql_type: 用户输入的sql语句类型\n    :param base_dir: 主函数导入的数据库所在路径\n    :return:\n        dict_sql\n        解析后的字典格式sql语句\n    \"\"\"\n    dict_sql = {}\n    command_parse = re.search(r'add\\sto\\s(.*?)\\svalues\\s(.*)', sql_str, re.I)  # 使用正则表达式解析add语法，并且re.I忽略大小写\n    if command_parse:\n        dict_sql['to'] = base_dir + command_parse.group(1)  # sql字典'to’键添加数据库表文件路径的值\n        dict_sql['values'] = command_parse.group(2).split(',')  # sql字典‘values’键添加插入的值\n        return dict_sql\n    else:\n        print(help(sql_type))  # 当语法解析不正常答应帮助\n\n\ndef del_parser(sql_str, sql_type, base_dir):\n    \"\"\" 删除语句解析函数\n\n    :param sql_str: 用户输入的sql语句\n    :param sql_type: 用户输入的sql语句类型\n    :param base_dir: 主函数导入的数据库所在路径\n    :return:\n        dict_sql\n        解析后的字典格式sql语句\n    \"\"\"\n    dict_sql = {}\n    command_parse = re.search(r'del\\sfrom\\s(.*?)\\swhere\\s(.*)', sql_str, re.I)\n    if command_parse:\n        dict_sql['from'] = base_dir + command_parse.group(1)  # sql字典'to’键添加数据库表文件路径的值\n        dict_sql['where'] = command_parse.group(2)  # sql字典‘where’键添加插入的值\n        if logic_cal(dict_sql['where']):  # 使用logic_cal函数将where语句语法再次进行解析\n            dict_sql['where'] = logic_cal(dict_sql['where'])  # 如解析有返回值，将返回值重新作为dict_sql['where']的值\n            return dict_sql\n        else:\n            print(help(sql_type))  # 当语法解析不正常答应帮助\n    else:\n        print(help(sql_type))  # 当语法解析不正常答应帮助\n\n\ndef update_parser(sql_str, sql_type, base_dir):\n    \"\"\" 更新语句解析函数\n\n    :param sql_str: 用户输入的sql语句\n    :param sql_type: 用户输入的sql语句类型\n    :param base_dir: 主函数导入的数据库所在路径\n    :return:\n        dict_sql\n        解析后的字典格式sql语句\n    \"\"\"\n    dict_sql = {}\n    command_parse = re.search(r'update\\s(.*?)\\sset\\s(.*?)=(.*?)\\swhere\\s(.*)', sql_str, re.I)\n    if command_parse:\n        dict_sql['update'] = base_dir + command_parse.group(1)  # sql字典'to’键添加数据库表文件路径的值\n        dict_sql['set'] = [command_parse.group(2), '=', command_parse.group(3)]  # sql字典‘where’键添加插入的值\n        dict_sql['where'] = command_parse.group(4)\n        if logic_cal(dict_sql['where']) and logic_cal(dict_sql['set']):  # 如果where语句、set语句都符合logic_cal中定义的规范\n            dict_sql['where'] = logic_cal(dict_sql['where'])  # 如解析有返回值，将返回值重新作为dict_sql['where']的值\n            dict_sql['set'] = logic_cal(dict_sql['set'])  # 如解析有返回值，将返回值重新作为dict_sql['set']的值\n            return dict_sql\n        else:\n            print(help(sql_type))  # 当语法解析不正常答应帮助\n    else:\n        print(help(sql_type))  # 当语法解析不正常答应帮助\n\n\ndef logic_cal(logic_exp):\n    \"\"\" 逻辑函数\n\n    :param logic_exp: sql语句中和逻辑判断相关的语句，列表格式。如[‘age','>=',20] 或 [‘dept','like','HR']\n    :return:\n        logic_exp\n        经过语法解析后的逻辑判断语句。列表格式。如[‘age','==',20] 或 [‘dept','like','HR']\n    \"\"\"\n    # 表达式列表优化成三个元素，形如[‘age','>=',20] 或 [‘dept','like','HR']\n    logic_exp = re.search('(.+?)\\s([=<>]{1,2}|like)\\s(.+)', ''.join(logic_exp))\n    if logic_exp:\n        logic_exp = list(logic_exp. group(1, 2, 3))  # 取得re匹配的所有值，并作为一个列表\n        if logic_exp[1] == '=':\n            logic_exp[1] = '=='\n        # 判断逻辑运算的比较符号后的值是否字母，并且用户是否输入了双引号。如没有输入手工添加上双引号。\n        if not logic_exp[2].isdigit() and not re.search('\"(.*?)\"', logic_exp[2]):\n            logic_exp[2] = '\"' + logic_exp[2] + '\"'\n        return logic_exp\n    else:\n        return False\n\ntransaction.py\n#!_*_coding:utf-8_*_\nfrom conf import settings\nfrom core import accounts\nfrom core import logger\nfrom core import parsers\nfrom core import actions\n#transaction logger\n\n\ndef make_transaction(log_obj, account_data, tran_type, amount, **others):\n    '''\n    deal all the user transactions\n    :param account_data: user account data\n    :param tran_type: transaction type\n    :param amount: transaction amount\n    :param others: mainly for logging usage\n    :return:\n    '''\n    amount = float(amount)\n\n    if tran_type in settings.TRANSACTION_TYPE:\n\n        interest = amount * settings.TRANSACTION_TYPE[tran_type]['interest']\n        old_balance = float(account_data['balance'])\n        if settings.TRANSACTION_TYPE[tran_type]['action'] == 'plus':\n            new_balance = old_balance + amount + interest\n        elif settings.TRANSACTION_TYPE[tran_type]['action'] == 'minus':\n            new_balance = old_balance - amount - interest\n            #check credit\n            if  new_balance <0:\n                print('''\\033[31;1mYour credit [%s] is not enough for this transaction [-%s], your current balance is \\\n                [%s]''' %(account_data['credit'],(amount + interest), old_balance ))\n                return\n        account_data['balance'] = new_balance\n        base_dir = settings.DATABASE['path']\n        sql_str = 'update accounts_table set balance = %s where account = %s' % (new_balance, account_data['account'])\n        sql_type = sql_str.split()[0]\n        dict_sql = parsers.parsers(sql_str, sql_type, base_dir)\n        actions.actions(sql_type, dict_sql)\n        # accounts.dump_account(account_data)  # save the new balance back to file\n        log_obj.info(\"account:%s   action:%s    amount:%s   interest:%s\" %\n                          (account_data['account'], tran_type, amount,interest) )\n        return account_data\n    else:\n        print(\"\\033[31;1mTransaction type [%s] is not exist!\\033[0m\" % tran_type)\n\n启动命令\n启动命令。\npython atm.py\npython manage.py\n发布信息\n- 作者：henryyuan\n- 日期：2018/03/05\n- 版本：Version 1.0\n- 工具：PyCharm 2017.3.3\n- 版本：Python 3.6.4\n- MarkDown工具：pycharm\n- 流程图工具：ProcessOn\n\n新闻\n无\n\n历史记录\n2018-3-5 Version：1.0\n\n遇到的问题：\n1.) 在main.py接口中的add_account()函数。用于添加账号。需要输入多个input条件。代码如下：\naccount_name = input(\"\\033[33;1mInput user name:\\033[0m\").strip()\n# 有点重复代码的感觉\nif len(account_name) > 0:    \n    account_name = account_name\nelse:\n    continue\naccount_age = input(\"\\033[33;1mInput user age:\\033[0m\").strip()\n# 有点重复代码的感觉\nif len(account_name) > 0 and account_age.isdigit():\n    account_age = account_age\nelse:\n    continue\naccount_phone = input(\"\\033[33;1mInput user phone number:\\033[0m\").strip()\n# 有点重复代码的感觉\nif len(account_phone) > 0 and account_phone.isdigit() and len(account_phone) == 11:\n    account_phone = account_phone\nelse:\n    continue\n每个input语句都需要有if的判断，但当有多个input输入语句时，就会出现过多的重复的if代码。如何减少if语句的代码量。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}