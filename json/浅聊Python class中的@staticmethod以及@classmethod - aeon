{"title": "浅聊Python class中的@staticmethod以及@classmethod - aeon ", "index": "python", "content": "前言\n入学不久之后，我就在想，对于学校的这么多人，这么多教师，这么多学生，以及其他种种事物，能否对应的做一套\"系统\"下来呢？随之也跟着思考了起来。\n设计\n好了，最直观的映入大脑的就是三个实体：人、教师、学生。这三个实体分别有对应的feature属性以表示其为人/教师/学生。由此，得到以下三个class。\nclass Person():\n\n    FEATURE = 'P'    \n\n    def __init__(self):\n        pass\n\n\nclass Teacher(Person):\n\n    FEATURE = 'T'\n    \n    def __init__(self):\n        pass\n        \n        \nclass Student(Person):\n\n    FEATURE = 'S'    \n\n    def __init__(self):\n        pass\n然而，作为学生代表的我，绝对不允许老师混入进来充当间谍。所以，必须给学生类提供一个方法以判断是否为学生。那么，对于这个方法，仅需要从Student类去调用即可，并非一定需要实例化的对象。而且，该方法由Student所独享，Teacher并不需要判断是否为学生。由此，Student改进为以下版本。\nclass Student(Person):\n\n    FEATURE = 'S'    \n\n    def __init__(self):\n        pass\n\n    @staticmethod\n    def is_student(obj):\n        if obj.FEATURE == 'S':            \n            return True\n        else:\n            return False\n正在思考的时候，一位代课老师过来看到了我的大概设计，然后说，“同学啊，你介个设计呢，对于我们老师，少了点东西，作为老师，我们有分文理，文理之后还有数学...blah..blah..”。然后我就走神了，对啊，老师还根据教学科目分文理呢，有数学老师，有音乐老师，有...\nclass MathTeacher(Teacher):\n\n    TEACHING = 'MATH'\n    \n    def __init__(self):\n        pass\n\nclass DrawingTeacher(Teacher):\n\n    TEACHING = 'DRAWING'\n    \n    def __init__(self):\n        pass        \n\n所以以上为代表的两个类就诞生了。至于对于文理的判断，短暂的思考之后，决定把该功能添加到Teacher类做以判断。\nclass Teacher(Person):\n\n    FEATURE = 'T'\n    \n    def __init__(self):\n        pass\n\n    @classmethod\n    def category(cls):\n\n        science_cate = ['MATH']\n        arts_cate = ['DRAWING', 'PAINTING']\n\n        teaching = getattr(cls, 'TEACHING', None)\n\n        if teaching in science_cate:\n            return 'Science'\n        elif teaching in arts_cate:\n            return 'Arts'\n        else:\n            return 'Unknow'\n测试\n在完成以上初步构想之后，决定测试一下所写代码是否能按预期执行。得到如下测试代码\np = Person()\nt = Teacher()\ns = Student()\n\nprint(Student.is_student(p))    ＃False\nprint(Student.is_student(t))    ＃False\nprint(Student.is_student(s))    ＃True\n而对于教学分类的判断，则有以下两种情形。\n判断某个教师 类 属于哪个教学分类\nprint(DrawingTeacher.category())    ＃Arts\nprint(MathTeacher.category())       ＃Science\nprint(Teacher.category())           ＃Unknow\n判断某个教师 实例 属于哪个教学分类\nteacher_wang = DrawingTeacher()\nteacher_li = MathTeacher()\nteacher = Teacher()\n\nprint(teacher_wang.category())    ＃Arts\nprint(teacher_li.category())      ＃Science\nprint(teacher.category())         ＃Unknow\n结束\n到此时，再回过头一看，噗，什么狗屁设计。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "10"}