{"title": "装扮你的Jupyter - λ and τ ", "index": "jupyter-notebook,python,ipython,matplotlib", "content": "又到摆脱重复工作，换个心情，然而并没有软用的时间了。这次，教大家如何搭建一个好看的jupyter环境。\n安装Jupyter\n先来展示一下我的环境\n\npython: 3.5.*\nmacos: 10.12.4\n\n安装Jupyter的过程只需安装Anaconda即可。\n测试一下初始设置：\njupyter notebook\n配置ipython\n首先，如果每次你打开一个nb（notebook）时，如果都需要载入一些模块，一个很好地方法就是配置ipython的配置文件，可以直接使用以下命令创建配置文件：\nipython profile create\n此时你会在~/.ipython/profile_default/目录中获得下面两个文件：\n\nipython_config.py：打开任意ipython kernel时都会运行\nipython_notebook_config.py：打开notebook时会运行\n\n配置方式是在所需要的配置文件中先键入：\nc = get_config()\n然后就可以通过修改c的属性来控制所有的配置。\n显然，对大多数分析场景，numpy, scipy, pandas是肯定要载入的，因此，写到配置中即可：\nc.InteractiveShellApp.exec_lines = [\n        \"import pandas as pd\",\n        \"import numpy as np\",\n        \"import scipy.stats as spstats\",\n        \"import scipy as sp\",\n        ]\n配置matplotlib\n还有一个常用功能就是matplotlib。matplotlib在notebook中需要使用\n%matplotlib inline\n才可默认在notebook中显示图像，一个简单地方法就是在配置文件中加入，\nc.IPKernelApp.matplotlib = 'inline'\n当然，默认也需要载入matplotlib\nc.InteractiveShellApp.exec_lines = [\n        \"import pandas as pd\",\n        \"import numpy as np\",\n        \"import scipy.stats as spstats\",\n        \"import scipy as sp\",\n        \"import matplotlib.pyplot as plt\"\n        ]\n当然，也可以更多。但这样可能会影响初始化notebook和ipython shell的速度，这个请大家自己权衡。\nmatplotlib显示中文\n此外，单独拎matplotlib出来的另一个原因是，matplotlib还有一个中文显示的问题。\n首先，解决编码问题。\npython 2.7.*的解决方案是，在配置中加入：\nimport seaborn as sns\nimport sys# print sys.getdefaultencoding()# ipython notebook中默认是ascii编码 \nreload(sys)\nsys.setdefaultencoding('utf8')\npython 3.*出于某些原因，不建议通过sys模块修改编码，原因参见这里。\n解决方案是，在shell的配置中重新设置配置变量（bash的话设置文件.bashrc，zsh则设置文件.zshrc）。方法是末尾添加：\nexport PYTHONIOENCODING=\"utf8\"\n当然另一个方法是在启动notebook时使用\nPYTHONIOENCODING=\"utf8\" & jupyter notebook\n第二个是修改matplotlib的默认字体。\n首先我们来看可以使用的字体\nimport matplotlib.font_manager\nfonts = matplotlib.font_manager.findSystemFonts()\nl = []\nfor f in fonts:\n    try:\n        font =matplotlib.font_manager.FontProperties(fname=f)\n        #print(font.get_family())\n        l.append((f, font.get_name(), font.get_family(), font.get_weight()))\n    except:\n        pass\ndf = pd.DataFrame(l, columns=['path', 'name', 'family', 'weight'])\ndf\n你应该看到下面这样的表格：\n\n然后找到支持中文的字体名，然后设置matplotlib的默认字体：\nimport matplotlib as mpl\nmpl.rc('font', family='Noto Sans CJK SC') \n当然，你可以添加到刚才的配置中，或者采用这个博客的方法。\n此外，如果你使用seaborn的话，seaborn在设置配置时可能会覆盖掉matplotlib，此时采用以下代码即可：\nimport seaborn as sns\nsns.set_style('ticks',\n              {\n                    'font.family': ['Noto Sans CJK SC'],\n    })\n但是，该语句不建议写在配置中，因为经常需要修改，可能会覆盖之前的配置。\nmatplotlib在Retina屏幕中显示模糊问题\n直接使用下面语句即可，\n%config InlineBackend.figure_format = 'retina'\n当然也可在配置中直接加入\nc.InlineBackend.figure_format = 'retina'\n修改notebook样式\n默认的notebook可以逼你心中大喊WTF，这时候你需要一点CSS技能，修改~/.jupyter/custom/custom.css的内容。\n个人认为最需要修改的内容包括\n\nnotebook的默认宽度：notebook默认比较宽，markdown文字会显得比较少，如果需要对外展示，文字部分会过少。\nnotebook的代码字体\n\n我的修改规则是：\npre.CodeMirror-line {\n    font-family: 'BlinkMacSystemFont', 'Lucida Grande', 'Segoe UI', Ubuntu, Cantarell, sans-serif\n}\n\n.output_subarea.output_text.output_result>pre {\n    font-family: 'BlinkMacSystemFont', 'Lucida Grande', 'Segoe UI', Ubuntu, Cantarell, sans-serif\n}\n\n.output_subarea.output_text.output_stream.output_stdout>pre {\n    font-family: 'BlinkMacSystemFont', 'Lucida Grande', 'Segoe UI', Ubuntu, Cantarell, sans-serif\n}\n\n#notebook-container {\n    max-width: 830px;\n    padding: 40px;\n}\n安装Jupyter常用插件\n这里推荐两个jupyter插件:\n插件管理器jupyter notebook extensions\n\ngithub地址在这里。安装和介绍也可以参考。\n然后你就可以在jupyter主页里找到下面的标签页管理插件了：\n\njupyter Dashboard\n如果你的jupyter服务是搭建在主机上，并且平时和业务人员想用notebook地址的方式交付，jupyter dashboard插件是一个不错的选择。\n安装方法和github地址在这里。\n原本效果如下：\n\n点击如下红色设置，并点击黄色按钮后\n\n就可得到如下的报告形式（删去了业务人员不想查看的代码），然后就可以粘贴连接交付报告了：\n\n切换成dashboard模式可以拖拽相关方格来设置位置。\n安装R kernel\nR kernel安装方式有两个：\n通过conda安装\nconda create -n R-Env -c r r-essentials\nsource activate R-Env\nconda install jupyter\n然后在R中配置\ninstall.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))\ndevtools::install_github('IRkernel/IRkernel')\nIRkernel::installspec()\n建议一定要新建环境，不然会和你之前安装的R冲突。\n当然，我不建议这种安装方式，原因是：\n\n不是很多人想在电脑里有两个R环境\n在jupyter notebook中不配置默认镜像，是没法选择镜像的，这导致没法再notebook中直接安装R包，当然你也可以配置好默认CRAN镜像，但这样显然很麻烦，切换网络环境后也很难调整\n可能你在旧环境中已经安装了大量包，这样子迁移成为问题\n你必须在这个新环境中启动jupyter\n\n直接使用原本安装\n直接在R环境中使用以下语句\ninstall.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))\ndevtools::install_github('IRkernel/IRkernel')\nIRkernel::installspec()\nIRkernel::installspec(user = FALSE)\n设置Jupyter服务配置\n这里请做个区别：ipython是负责和python交互的部分，jupyter是作为服务的部分。因此所有服务配置都要在~/.jupyter中进行，而和python、模块相关的配置都要在~/.ipython中。\n这里主要配置的有ip和默认文件夹。\n首先，生成配置文件：\njupyter notebook --generate-config\n现在~/.jupyter/内就生成jupyter_notebook_config.py文件。\n再次我们设置ip，在其中添加，这样就可以外网访问。\nNotebookApp.ip = '127.0.0.1'\n最后，加上默认启动位置，这样，在任何工作目录下都能保证，notebook的启动位置一致。\nNotebookApp.notebook_dir = '/jupyter'\n\n大功告成，现在开工！\n==================================\n更新日志\n\n2017-5-10\n\n增加R kernel安装讨论\n增加jupyter服务配置\n\n\n\n                ", "mainLikeNum": ["5 "], "mainBookmarkNum": "13"}