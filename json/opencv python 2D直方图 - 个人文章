{"title": "opencv python 2D直方图 - 个人文章 ", "index": "opencv-python,opencv,python", "content": "Histograms - 3 : 2D Histograms \n我们已经计算并绘制了一维直方图，因为我们只考虑一个特征，即像素的灰度强度值.但在二维直方图中，需要考虑两个特征，通常，它用于查找颜色直方图，其中两个要素是每个像素的色调和饱和度值.\nOpenCV中的2D直方图\n使用函数cv.calcHist（）, 对于颜色直方图，我们需要将图像从BGR转换为HSV。 （请记住，对于1D直方图，我们从BGR转换为灰度）。对于2D直方图，其参数将修改如下:\n\nchannels = [0，1]：因为我们需要同时处理H（色调Hue）和S（饱和度Saturation）.\nbins = [180,256]：180对应H，256对应S.\nrange = [0,180,0,256]：色调值介于0到180之间，饱和度介于0到256之间.\n\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('img.jpg')\n\nhsv = cv2.cvtColor(img,cv2.COLOR_BGR2HSV)\n\nhist = cv2.calcHist([hsv], [0, 1], None, [180, 256], [0, 180, 0, 256])\nNumpy中的2D直方图\nnp.histogram2d（）. （注意，对于1D直方图，我们使用np.histogram（））\nhist, xbins, ybins = np.histogram2d(h.ravel(),s.ravel(),[180,256],[[0,180],[0,256]])\n第一个参数是H平面，第二个是S平面，第三个是每个bins的数量，第四个是它们的范围\n绘制2D直方图\n方法 - 1：使用cv.imshow（）\n\n我们得到的结果是一个大小为180x256的二维数组. 因此我们可以像使用cv.imshow（）函数一样正常显示它们. 它将是一个灰度图像，它不会告诉你什么颜色，除非你知道不同颜色的色调.\n方法-2：使用Matplotlib\n我们可以使用matplotlib.pyplot.imshow（）函数绘制具有不同颜色图的2D直方图. 它让我们更好地了解不同的像素密度, 但是，除非你知道不同颜色的色调值，否则这也不会让我们知道第一眼看到的是什么颜色. 它简单而且更好.代码：\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('img6.png')\n\nhsv = cv2.cvtColor(img,cv2.COLOR_BGR2HSV)\n\nhist = cv2.calcHist([hsv], [0,1], None, [180,256], [0,180,0,256])\n\nplt.imshow(hist, interpolation='nearest')\nplt.show()\n\n在直方图中，你可以看到H=100和S=200附近的一些高值,它对应于天空的蓝色.同样，在H=25和S=100附近也可以看到另一个峰值,它对应着宫殿的黄色.\n方法-3：OpenCV样本风格\n在Opencv-Python2样本中有一个用于颜色直方图的示例代码(samples/python/color_histogram.py).如果您运行代码，您可以看到直方图显示相应的颜色,或者简单地输出一个颜色编码的直方图.它的结果非常好(尽管您需要添加一些额外的行). 在这段代码中，作者在HSV中创建了一个彩色地图,然后将其转换为BGR,生成的直方图图像与此颜色图相乘,他还使用一些预处理步骤来移除小的孤立像素，从而形成一个良好的直方图.\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}