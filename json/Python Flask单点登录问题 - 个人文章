{"title": "Python Flask单点登录问题 - 个人文章 ", "index": "python,flask", "content": "1.什么是单点登录？\n单点登录（Single Sign On），简称为 SSO，是目前比较流行的企业业务整合的解决方案之一。SSO的定义是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。客户端持有ID，服务端持有session，两者一起用来保持登录状态。客户端需要用ID来作为凭证，而服务端需要用session来验证ID的有效性（ID可能过期、可能根本就是伪造的找不到对于的信息、ID下对应的客户端还没有进行登录验证等）。但是session这东西一开始是每个server自己独有的，豆瓣FM有自己的session、豆瓣读书有自己的session，而记录ID的cookie又是不能跨域的。所以，我们要实现一次登录一次退出，只需要想办法让各个server的共用一个session的信息，让客户端在各个域名下都能持有这个ID就好了。再进一步讲，只要各个server拿到同一个ID，都能有办法检验出ID的有效性、并且能得到ID对应的用户信息就行了，也就是能检验ID。因此实现单点登录说到底就是要解决如何产生ID和存储那个信任ID，再就是其他系统如何验证这个信任的有效性，因此要点也就以下两个：存储信任验证信任以下是我探究所得的方法\n2.单点登录的实现有哪些？\n一、以Cookie作为凭证媒介最简单的单点登录实现方式，是使用cookie作为媒介，存放用户凭证。用户登录父应用之后，应用返回一个加密的cookie，当用户访问子应用的时候，携带上这个cookie，授权应用解密cookie并进行校验，校验通过则登录当前用户。\nAuth via cookie\n不难发现以上方式把信任存储在客户端的Cookie中，这种方式很容易令人质疑：Cookie不安全不能跨域实现免登对于第一个问题，通过加密Cookie可以保证安全性，当然这是在源代码不泄露的前提下。如果Cookie的加密算法泄露，攻击者通过伪造Cookie则可以伪造特定用户身份，这是很危险的。对于第二个问题，更是硬伤。\n二、通过JSONP实现对于跨域问题，可以使用JSONP实现。用户在父应用中登录后，跟Session匹配的Cookie会存到客户端中，当用户需要登录子应用的时候，授权应用访问父应用提供的JSONP接口，并在请求中带上父应用域名下的Cookie，父应用接收到请求，验证用户的登录状态，返回加密的信息，子应用通过解析返回来的加密信息来验证用户，如果通过验证则登录用户。这种方式虽然能解决跨域问题，但是安全性其实跟把信任存储到Cookie是差不多的。如果一旦加密算法泄露了，攻击者可以在本地建立一个实现了登录接口的假冒父应用，通过绑定Host来把子应用发起的请求指向本地的假冒父应用，并作出回应。因为攻击者完全可以按照加密算法来伪造响应请求，子应用接收到这个响应之后一样可以通过验证，并且登录特定用户。\n三、通过页面重定向的方式最后一种介绍的方式，是通过父应用和子应用来回重定向中进行通信，实现信息的安全传递。父应用提供一个GET方式的登录接口，用户通过子应用重定向连接的方式访问这个接口，如果用户还没有登录，则返回一个的登录页面，用户输入账号密码进行登录。如果用户已经登录了，则生成加密的Token，并且重定向到子应用提供的验证Token的接口，通过解密和校验之后，子应用登录当前用户。\nAuth via redirect\n这种方式较前面两种方式，接解决了上面两种方法暴露出来的安全性问题和跨域的问题，但是并没有前面两种方式方便。安全与方便，本来就是一对矛盾。\n四、通过CAS构建用户中心进行验证大概想法：通过配置URL的形式，把某些登录请求发送到cas验证服务器上，然后此时分为两种情况，一种是没有携带ticket，另一种是携带ticket的。处理第一种情况：拼装url请求，发送到服务器请求ticket，然后返回获得ticket，便到了第二步处理第二种情况：cas服务器对于ticket进行验证，返回结果\n3.python中单点登录以及Flask框架的单点登录如何实现？\n参考内容Flask + PyJWT 实现基于Json Web Token的用户认证授权实现基于json-web-token的用户认证授权)参考内容Flask: SSO原理及实现**\n4.参考内容\n（1）可以参考flask-sso拓展插件英文文档**（2）关于flask的session方面的插件插件\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "0"}