{"title": "用python，生活仍有诗和远方 - 西奥多先生 ", "index": "python", "content": "常听说，现在的代码，就和唐朝的诗一样重要。可对我们来说，写几行代码没什么，但是，要让我们真正地去写一首唐诗，那可就头大了。。既然如此，为何不干脆用代码写一首唐诗？\n准备：\n\npython3.6环境\n推荐使用anaconda管理python包，可以对于每个项目，创建环境，并在该环境下下载项目需要的包。\n推荐使用pycharm作为编译器。\n\nGitHub代码：GitHub - theodore3131/TangshiGenerator\n具体步骤：\n使用爬虫爬取全唐诗，总共抓取了71000首。\n#使用urllib3的内置函数构建爬虫的安全验证，来应对网站的反爬虫机制\nhttp = urllib3.PoolManager(\n     cert_reqs='CERT_REQUIRED',\n     ca_certs=certifi.where())\n#爬虫的目标网站\nr = http.request('GET', url)\n#爬虫获取的html数据\nsoup = BeautifulSoup(r.data, 'html.parser')\ncontent = soup.find('div', class_=\"contson\")\n使用正则表达式对爬取的数据进行处理\np1 = r\"[\\u4e00-\\u9fa5]{5,7}[\\u3002|\\uff0c]\"  #[汉字]{重复5-7次}[中文句号|中文逗号]\npattern1 = re.compile(p1)        #编译正则表达式\nresult = pattern1.findall(poemfile)   #搜索匹配的字符串，得到匹配列表\n对诗词正文进行分词操作\n#使用jieba中文分词库的textRank算法来找出各个词性的高频词\nfor x in jieba.analyse.textrank(content, topK=600, allowPOS=('n', 'nr', 'ns', 'nt', 'nz', 'm')):\n\n唐诗生成\n处理韵脚\n\n使用pinyin库\npip install pinyin\nverse = pinyin.get(\"天\", format=\"strip\")\n#输出：tian\n对于韵脚，本来是想找出所有的韵脚并做成字典形式存储起来，但韵脚总共有20多个，后来发现其实20多个韵脚都是以元音字母开始的，我们可以基于这个规则来判断：\nrhythm = \"\"\nrhythmList = [\"a\", \"e\", \"i\", \"o\", \"u\"]\nverse = pinyin.get(nounlist[i1][1], format=\"strip\")\n#韵脚在每个pinyin倒叙最后一个元音字母处截止\n          for p in range(len(verse)-1, -1, -1):\n              if verse[p] in rhythmList:\n                  ind = p\n\n      rhythm = verse[ind:len(verse)]\n目前是最初级的五言律诗，且为名动名句式\nrhythm = \"\"\nrhythmList = [\"a\", \"e\", \"i\", \"o\", \"u\"]\nwhile num < 4:\n#生成随机数\n        i = random.randint(1, len(nounlist)-1)\n      i1 = random.randint(1, len(nounlist)-1)\n      j = random.randint(1, len(verblist)-1)\n\n#记录韵脚\n      ind = 0\n      ind1 = 0\n      if (num == 1):\n          rhythm = \"\"\n          verse = pinyin.get(nounlist[i1][1], format=\"strip\")\n#韵脚在每个pinyin倒叙最后一个元音字母处截止\n          for p in range(len(verse)-1, -1, -1):\n              if verse[p] in rhythmList:\n                  ind = p\n\n      rhythm = verse[ind:len(verse)]\n#确保2，4句的韵脚相同，保证押韵\n      if (num == 3):\n          ind1 = 0\n          verse1 = pinyin.get(nounlist[i1][1], format=\"strip\")\n          for p in range(len(verse1)-1, -1, -1):\n                if verse1[p] in rhythmList:\n                   ind1 = p\n\n            while verse1[ind1: len(verse1)] != rhythm:\n                i1 = random.randint(1, len(nounlist)-1)\n                verse1 = pinyin.get(nounlist[i1][1], format=\"strip\")\n                for p in range(len(verse1)-1, -1, -1):\n                    if verse1[p] in rhythmList:\n                        ind1 = p\n#随机排列组合\n     print(nounlist[i]+verblist[j][1]+nounlist[i1])\n     num += 1\n藏头诗\n其实思路很简单，既然我们有了语料库，那么，我们每次在排列组合词的时候，只需保证生成每句时，第一个名词的第一个字，是按序给定四字成语中的即可\nfor x in range(len(nounlist)):\n      if nounlist[x][0] == str[num]:\n          i = x\n来看一下结果：\n四言诗：\n所思浮云关山车马高楼流水闲人肠断\n五言律诗：\n西风时细雨山川钓建章龙门看萧索几年乡斜阳\n藏头诗：\n落花流水\n落晖首南宫花枝成公子流水名朝廷水声胜白石\n参考：\nhttps://segmentfault.com/a/11...\n当然，现在生成的唐诗还是比较低级的，属于基础的古诗文词语排列组合。接下来考虑优化模版，提取五言和七言常用句式作为模版。另外考虑使用机器学习的方法，写RNN来让计算机自动生成充满韵味的诗\n\n                ", "mainLikeNum": ["4 "], "mainBookmarkNum": "6"}