{"title": "Python直接控制鼠标键盘模块 pyautogui - 个人文章 ", "index": "python", "content": "参考文章：http://www.chenxm.cc/post/547...安装\npip install pyautogui\n\n官网：\nhttp://pyautogui.readthedocs.io/en/latest/\n\ngithub:\nhttps：//github.com/asweigart/pyautogui\n\n介绍：PyAutoGUI可以模拟移动鼠标，单击鼠标，用鼠标拖动，按键，按住键，还可以按键盘热键组合。基础操作\n>>> import pyautogui\n# 获取屏幕尺寸\n>>> screenWidth, screenHeight = pyautogui.size()\n# 获取当前坐标位置\n>>> currentMouseX, currentMouseY = pyautogui.position()\n# 鼠标移动到坐标为100,150的位置\n>>> pyautogui.moveTo(100, 150)\n# 鼠标左击\n>>> pyautogui.click()\n# 鼠标移动10个像素\n>>> pyautogui.moveRel(None, 10)  # move mouse 10 pixels down\n# 鼠标双击\n>>> pyautogui.doubleClick()\n>>> pyautogui.moveTo(500, 500, duration=2, tween=pyautogui.easeInOutQuad)  # use tweening/easing function to move mouse over 2 seconds.\n# 键盘输入Hello world! 间隔为0.25秒\n>>> pyautogui.typewrite('Hello world!', interval=0.25)  # type with quarter-second pause in between each key\n# 按键 esc\n>>> pyautogui.press('esc')\n# shift按下\n>>> pyautogui.keyDown('shift')\n# 按键左方向键\n>>> pyautogui.press(['left', 'left', 'left', 'left', 'left', 'left'])\n# shift弹起\n>>> pyautogui.keyUp('shift')\n# 组合件 ctrl +c\n>>> pyautogui.hotkey('ctrl', 'c')\n\n保护措施：PyAutoGUI函数增加延迟为2.5秒：\nimport pyautogui\npyautogui.PAUSE = 2.5\n\n当pyautogui.FAILSAFE = True时，如果把鼠标光标在屏幕左上角，PyAutoGUI函数就会产生pyautogui.FailSafeException异常。\nimport pyautogui\npyautogui.FAILSAFE = True\n\n鼠标操作：移动\nimport pyautogui\nwidth, hight = pyautogui.size()\npyautogui.moveTo(width/2, hight/2) # 基本移动\npyautogui.moveTo(200, 200, duration=2) # 移动过程持续2s完成\npyautogui.moveTo(None, 100) # X方向不变，Y方向移动到100\npyautogui.moveRel(-40, 500) # 相对位置移动\n\n拖拽拖拽的意思是：按下鼠标键并拖动鼠标。PyAutoGUI提供了两个函数：dragTo() 和 dragRel()。它的参数和moveTo() 和 moveRel() 一样。\n点击+向下拖动\npyautogui.click(941, 34, button='left')\npyautogui.dragRel(0, 100, button='left', duration=5)\n\n点击\nclick()函数就是让鼠标点击，默认是单击左键，参数可以设置：\npyautogui.click(x=moveToX, y=moveToY, clicks=num_of_clicks, interval=secs_between_clicks, button='left')\n\n其中，button属性可以设置成left，middle和right。\npyautogui.doubleClick()：鼠标双击，其实就是执行两次click()函数。\npyautogui.rightClick()：右击\npyautogui.middleClick()：中击\npyautogui.tripleClick(\npyautogui.click(300, 400, button='right') # 包含了move的点击，右键\npyautogui.click(clicks=2, interval=0.25) # 双击，间隔0.25s\n\n双击左键\npyautogui.click(clicks=2)\n\n两次单击之间停留0.25秒\npyautogui.click(clicks=2, interval=0.25)\n\n三击右键\npyautogui.click(button='right', clicks=2, interval=0.25)\n\n鼠标按下和松开两个事件可以分开处理：\npyautogui.mouseDown(x=moveToX, y=moveToY, button='left')\npyautogui.mouseUp(x=moveToX, y=moveToY, button='left')\n\n滚轮 它只接受一个整数。如果值为正往上滚，值为负往下滚。\npyautogui.scroll(-10)\n\n键盘操作输入文字\npyautogui.click(100, 200)\npyautogui.typewrite('hello world!')\n\n如果是中文键是复制\n精确控制键盘按键的按下和释放 和鼠标按键非常类似。\nkeyDown()：按下某个键\nkeyUp()：松开某个键\npress()：一次完整的击键，前面两个函数的组合。\npyautogui.press('shift') # 切换输入法的中英文\npyautogui.press(['#', ' ']) # press 可以对单个字符或者列表进行操作\npyautogui.press(['c', 'h', 'e', 'n'])\npyautogui.press(['x', 'i','n'])\npyautogui.press(['m', 'i', 'n','g'])\npyautogui.press(' ')\n# 陈新明\n\n\n组合键hotKey\npyautogui.hotkey('shift', 'a') # 可以使用组合键，等同于以下代码\n'''\npyautogui.keyDown('shift')\npyautogui.keyDown('a')\npyautogui.keyUp('shift')\npyautogui.keyUp('a')\n\n'''截图\nimport pyautogui\nim1 = pyautogui.screenshot()\nim2 = pyautogui.screenshot('my_screenshot.png')\nscreenshot()需要花费100毫秒\n\n如果你不需要截取整个屏幕，还有一个可选的region参数。你可以把截取区域的左上角XY坐标值和宽度、高度传入截取。\nim = pyautogui.screenshot(region=(0, 0, 300 ,400))\n\n读取截图的图片\nimport pyautogui\npyautogui.locateOnScreen('my_screenshot.png')\n\n原文：http://www.chenxm.cc/post/633...\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}