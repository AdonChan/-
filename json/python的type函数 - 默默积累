{"title": "python的type函数 - 默默积累 ", "index": "python", "content": "对于type，经常会用到的是判断类型，但是判断类型更推荐的一种方式是使用isinstance();但是很少会用到type的另外一个功能，生成一个新的类型，看官方解释：\n\n\n  class type(name, bases, dict)\n  With three arguments, return a new type object. This is essentially a dynamic form of the class statement. The name string is the class name and becomes the name attribute; the bases tuple itemizes the base classes and becomes the bases attribute; and the dict dictionary is the namespace containing definitions for class body and becomes the dict attribute. For example, the following two statements create identical type objects:\n\n\n>>> class X(object):\n...     a = 1\n...\n>>> X = type('X', (object,), dict(a=1))\n\n\n这样就可以产生一个新的类型X。\n\n再举个demo：\ndjango框架中的BaseManager\n\n    @classmethod\n    def from_queryset(cls, queryset_class, class_name=None):\n        if class_name is None:\n            class_name = '%sFrom%s' % (cls.__name__, queryset_class.__name__)\n        class_dict = {\n            '_queryset_class': queryset_class,\n        }\n        class_dict.update(cls._get_queryset_methods(queryset_class))\n        return type(class_name, (cls,), class_dict)\n\n\nover...\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}