{"title": "python学习笔记-为自定义类或者函数编写help文档，以及进行文档测试 - helloword ", "index": "python", "content": "在python中我们可以利用help(\"模块名\")或者help(类名)的方式来查看类或者函数的文档。但是它们是如何编写的呢？其实它们在类最前面或者方法的最前面用\"\"\"三个双引号包裹了多行注释。这些内容就会被Python当成帮助文档。\n那帮助文档一般会写什么内容呢？主要包括以下内容：\n\n该类或者函数的主要作用\n传入的值和输出的值\n一些特殊情况的说明\n文档测试内容\n\n以上内容是个人的总结，但是并没有看到相关的资料。\n我们来举一个例子：\nclass Apple(object):\n    \"\"\" This is an Apple Class\"\"\"\n\n    def get_color(self):\n        \"\"\"\n        Get the Color of Apple.\n        get_color(self) -> str\n        \"\"\"\n        return \"red\"\n在python terminal输入\n>>> from CallDemo import Apple\n>>> help(Apple)\nHelp on class Apple in module CallDemo:\n\nclass Apple(__builtin__.object)\n |  This is an Apple Class\n |  \n |  Methods defined here:\n |  \n |  get_color(self)\n |      Get the Color of Apple.\n |      get_color(self) -> str\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n利用doctest进行文档测试\n我们在注释中我们也可以doctest模块进行文档测试。\n例如，我们添加了文档测试内容后如下所示：\nclass Apple(object):\n    \"\"\"\n    This is an Apple Class\n\n    Example:\n        >>> apple = Apple()\n        >>> apple.get_color()\n        'red'\n        >>> apple.set_count(20)\n        >>> apple.get_count()\n        400\n\n    \"\"\"\n\n    def get_color(self):\n        \"\"\"\n        Get the Color of Apple.\n        get_color(self) -> str\n        \"\"\"\n        return \"red\"\n\n    def set_count(self, count):\n        self._count = count\n\n    def get_count(self):\n        return self._count * self._count\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()\n由于我们写了\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()\n所以以上文档测试只有在以入口文件执行的时候才会进行文档测试。因此并不会在实际应用在执行文档测试。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "1"}