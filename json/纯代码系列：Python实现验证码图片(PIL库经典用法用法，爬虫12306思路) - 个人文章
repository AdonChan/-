{"title": "纯代码系列：Python实现验证码图片(PIL库经典用法用法，爬虫12306思路) - 个人文章 ", "index": "django,python", "content": "现在的网页中，为了防止机器人提交表单，图片验证码是很常见的应对手段之一。这里就不详细介绍了，相信大家都遇到过。\n现在就给出用Python的PIL库实现验证码图片的代码。代码中有详细注释。\n#!/usr/bin/env python\n#coding=utf-8\n\nimport random\nfrom PIL import Image, ImageDraw, ImageFont, ImageFilter\n\n_letter_cases = \"abcdefghjkmnpqrstuvwxy\" # 小写字母，去除可能干扰的i，l，o，z\n_upper_cases = _letter_cases.upper() # 大写字母\n_numbers = ''.join(map(str, range(3, 10))) # 数字\ninit_chars = ''.join((_letter_cases, _upper_cases, _numbers))\n\ndef create_validate_code(size=(120, 30),\n                         chars=init_chars,\n                         img_type=\"GIF\",\n                         mode=\"RGB\",\n                         bg_color=(255, 255, 255),\n                         fg_color=(0, 0, 255),\n                         font_size=18,\n                         font_type=\"ae_AlArabiya.ttf\",\n                         length=4,\n                         draw_lines=True,\n                         n_line=(1, 2),\n                         draw_points=True,\n                         point_chance = 2):\n    '''\n    @todo: 生成验证码图片\n    @param size: 图片的大小，格式（宽，高），默认为(120, 30)\n    @param chars: 允许的字符集合，格式字符串\n    @param img_type: 图片保存的格式，默认为GIF，可选的为GIF，JPEG，TIFF，PNG\n    @param mode: 图片模式，默认为RGB\n    @param bg_color: 背景颜色，默认为白色\n    @param fg_color: 前景色，验证码字符颜色，默认为蓝色#0000FF\n    @param font_size: 验证码字体大小\n    @param font_type: 验证码字体，默认为 ae_AlArabiya.ttf\n    @param length: 验证码字符个数\n    @param draw_lines: 是否划干扰线\n    @param n_lines: 干扰线的条数范围，格式元组，默认为(1, 2)，只有draw_lines为True时有效\n    @param draw_points: 是否画干扰点\n    @param point_chance: 干扰点出现的概率，大小范围[0, 100]\n    @return: [0]: PIL Image实例\n    @return: [1]: 验证码图片中的字符串\n    '''\n\n    width, height = size # 宽， 高\n    img = Image.new(mode, size, bg_color) # 创建图形\n    draw = ImageDraw.Draw(img) # 创建画笔\n\n    def get_chars():\n        '''生成给定长度的字符串，返回列表格式'''\n        return random.sample(chars, length)\n\n    def create_lines():\n        '''绘制干扰线'''\n        line_num = random.randint(*n_line) # 干扰线条数\n\n        for i in range(line_num):\n            # 起始点\n            begin = (random.randint(0, size[0]), random.randint(0, size[1]))\n            #结束点\n            end = (random.randint(0, size[0]), random.randint(0, size[1]))\n            draw.line([begin, end], fill=(0, 0, 0))\n\n    def create_points():\n        '''绘制干扰点'''\n        chance = min(100, max(0, int(point_chance))) # 大小限制在[0, 100]\n       \n        for w in xrange(width):\n            for h in xrange(height):\n                tmp = random.randint(0, 100)\n                if tmp > 100 - chance:\n                    draw.point((w, h), fill=(0, 0, 0))\n\n    def create_strs():\n        '''绘制验证码字符'''\n        c_chars = get_chars()\n        strs = ' %s ' % ' '.join(c_chars) # 每个字符前后以空格隔开\n       \n        font = ImageFont.truetype(font_type, font_size)\n        font_width, font_height = font.getsize(strs)\n\n        draw.text(((width - font_width) / 3, (height - font_height) / 3),\n                    strs, font=font, fill=fg_color)\n       \n        return ''.join(c_chars)\n\n    if draw_lines:\n        create_lines()\n    if draw_points:\n        create_points()\n    strs = create_strs()\n\n    # 图形扭曲参数\n    params = [1 - float(random.randint(1, 2)) / 100,\n              0,\n              0,\n              0,\n              1 - float(random.randint(1, 10)) / 100,\n              float(random.randint(1, 2)) / 500,\n              0.001,\n              float(random.randint(1, 2)) / 500\n              ]\n    img = img.transform(size, Image.PERSPECTIVE, params) # 创建扭曲\n\n    img = img.filter(ImageFilter.EDGE_ENHANCE_MORE) # 滤镜，边界加强（阈值更大）\n\n    return img, strs\n\nif __name__ == \"__main__\":\n    code_img = create_validate_code()\n    code_img.save(\"validate.gif\", \"GIF\")\n最后结果返回一个元组，第一个返回值是Image类的实例，第二个参数是图片中的字符串（比较是否正确的作用）。\n需要提醒的是，如果在生成ImageFont.truetype实例的时候抛出IOError异常，有可能是运行代码的电脑没有包含指定的字体，需要下载安装。\n生成的验证码图片效果：\n\n这时候，细心的同学可能要问，如果每次生成验证码，都要先保存生成的图片，再显示到页面。这么做让人太不能接受了。这个时候，我们需要使用python内置的StringIO模块，它有着类似file对象的行为，但是它操作的是内存文件。于是，我们可以这么写代码：\ntry:\n    import cStringIO as StringIO\nexcept ImportError:\n    import StringIO\n\nmstream = StringIO.StringIO()\n    \nimg = create_validate_code()[0]\nimg.save(mstream, \"GIF\") \n这样，我们需要输出的图片的时候只要使用“mstream.getvalue()”即可。比如在Django里，我们首先定义这样的url：\nfrom django.conf.urls.defaults import *\n\nurlpatterns = patterns('example.views',\n    url(r'^validate/$', 'validate', name='validate'),\n)\n\n在views中，我们把正确的字符串保存在session中，这样当用户提交表单的时候，就可以和session中的正确字符串进行比较。\nfrom django.shortcuts import HttpResponse\n\nfrom validate import create_validate_code\n\ndef validate(request):\n    mstream = StringIO.StringIO()\n    \n    validate_code = create_validate_code()\n    img = validate_code[0]\n    img.save(mstream, \"GIF\")\n    \n    request.session['validate'] = validate_code[1]\n    \n    return HttpResponse(mstream.getvalue(), \"image/gif\")\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}