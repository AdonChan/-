{"title": "Pandas常用用法 - 个人文章 ", "index": "python", "content": "pandas常用用法\n详细内容请进入 pandas官网 查阅文献。\n\n1. pd.read_csv()\n\n常用parameters:\n\n\nheader : 一般默认为零。表示读进来的表格以第一行作为列名。其他值也是类似的。\n\nindex_col : 表示以什么作为行号。pandas在引入列表的时候默认会以0,1,2,3,4....作为行号。可以指定列表中的某一列作为行号。\n\nusecols : 指定读进来的列是什么，以列表的形式给出，可以是列号，也可以是[0,1,2]这样的表示读进来0,1,2列。\n\nnames : 以列表形式给出，表示列号只显示出给定名称的列号，其他的隐藏。即你可以指定任一列的列号，可以是你自创的，也可以是列表里本来就有的。\n\nsqueeze : 表示如果传进来的表格只有一列，那么把它压缩成Serias的形式。默认值是False。\n\ndtype : 指定列的数据形式。eg: dtype={'PassengerId':np.float64}\n\n\n\n感觉比较常用的参数一般就这几个，其他的如果需要可以在官网上查找解释。\n2. 常用表格信息描述函数\n\ndf.dtypes\n可以把表格每一列数据的格式描述出来，eg：\nA           float64\nB    datetime64[ns]\nC           float32\nD             int32\nE          category\nF            object\ndtype: object\ndf.index\n把表格的行号列出，包括行号的格式。\ndf.columns\n把表格的列号列出，包括列号的格式。\ndf.describe()\n把每一列的均值，个数，方差，最大最小值列出。非常方便的函数。\n        A    C    D\ncount  4.0  4.0  4.0\nmean   1.0  1.0  3.0\nstd    0.0  0.0  0.0\nmin    1.0  1.0  3.0\n25%    1.0  1.0  3.0\n50%    1.0  1.0  3.0\n75%    1.0  1.0  3.0\nmax    1.0  1.0  3.0\n\ndf.info() 　\n可以给出表格的许多信息，看下面的结果：\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\nPassengerId    891 non-null int64\nSurvived       891 non-null int64\nPclass         891 non-null int64\nName           891 non-null object\nSex            891 non-null object\nAge            714 non-null float64\nSibSp          891 non-null int64\nParch          891 non-null int64\nTicket         891 non-null object\nFare           891 non-null float64\nCabin          204 non-null object\nEmbarked       889 non-null object\ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.6+ KB\n3. 常用的datafram处理操作。\n\ndf[[' ',' ',...]]\n''中间的为列的名字，直接列出选中的列\ndfdf.A>50]\n不好说直接上代码：\ndf[df['Age']>60][['Sex','Pclass','Age','Survived']]\n>>>\nSex    Pclass    Age    Survived\n33    male    2    66.0    0\n54    male    1    65.0    0\n96    male    1    71.0    0\n116    male    3    70.5    0\n170    male    1    61.0    0\n252    male    1    62.0    0\n275    female    1    63.0    1\n280    male    3    65.0    0\n326    male    3    61.0    0\n438    male    1    64.0    0\n456    male    1    65.0    0\n483    female    3    63.0    1\n493    male    1    71.0    0\n545    male    1    64.0    0\n555    male    1    62.0    0\n570    male    2    62.0    1\n625    male    1    61.0    0\n630    male    1    80.0    1\n672    male    2    70.0    0\n745    male    1    70.0    0\n829    female    1    62.0    1\n851    male    3    74.0    0\n即是以某一列的值为条件进行筛选。\n多个条件进行筛选。\nfor i in range(4):\n    print(i,len(df[ (df['Sex']=='male') & (df['Pclass']==i)]))\n>>>\n0 0\n1 122\n2 108\n3 347\n&符号表示与，条件有两个，len()表示长度。\n\ndf.dropna() :\n把表格中有nan或者na的行去掉。pramaters:axis=0,how='any'还有其他参数但是并不常用。'any'表示只要行或者列出现了nan则把该行或者该列去掉。如果为'all'表示必须全是nan才去掉。\n\ndf.fillna(value) :\n表示给nan值填充值。value=0表示给nan填充0值\n\ndf.isnull() :\n返回一个列表如果有值为nan返回True,否则返回False.\n  A      B      C      D      E\n2013-01-01  False  False  False  False  False\n2013-01-02  False  False  False   True  False\n2013-01-03  False  False  False  False   True\n2013-01-04  False  False  False  False  False\n2013-01-05  False  False  False  False  False\n2013-01-06  False  False  False  False  False\n\n## 可以通过选择某一列为Nan的情况下对其他数据进行查看\ndf[df.Age.isnull()].head(5)['Name']\n>>>\n5                  Moran, Mr. James\n17     Williams, Mr. Charles Eugene\n19          Masselmani, Mrs. Fatima\n26          Emir, Mr. Farred Chehab\n28    O'Dwyer, Miss. Ellen \"Nellie\"\nName: Name, dtype: object\n\ndf.T :\n转置，即列表的行与列互换。\n\ndf.loc[] :\n表示按照标签来选择数据。\na.loc['one']则会默认表示选取行为'one'的行a.loc[:,['a','b']表示选取所有的行以及columns为a,b的列；\na.loc[['one','two'],['a','b']]表示选取'one'和'two'这两行以及columns为a,b的列；\na.loc['one','a']与a.loc[['one'],['a']]作用是一样的，不过前者只显示对应的值，而后者会显示对应的行和列标签。\n\n\ndf.iloc[] :\n表示按照位置进行选择。\na.iloc[[0,2],[1,2]]\n表示选取0行1列和2行2列的数据。\n\ndf.values :\n把一个dataframe类型转化为numpy的array形式。很简单\n\ndf.replace() :\n简单粗暴，把列表里的某一个值替换为另一个值。\ndf.replace('male',0).head(3)['Sex']\n>>>\n0         0\n1    female\n2    female\nName: Sex, dtype: object\n该函数还有一些其他参数：regrex,method等，详细可查阅官网，这里给出一些常用用法。\n#选择某一列对不同的值进行不同的替换，采用字典嵌套的形式。\nencode_setting = {'Embarked':{'S':1, 'C': 2, 'Q': 3, 'Unknown':0}}\ndf.replace(encode_setting).head(3)[['Embarked']]\n>>>\n    Embarked\n0    1.0\n1    2.0\n2    1.0\n\n#对多个值进行替换\ndf.replace({'male':1,'female':0}).head(3)[['Sex']]\n>>>\nSex\n0    1\n1    0\n2    0\n\ndf.drop(axis,labels) :\n表示扔掉某一行或者一列，axis指定行或者列，labels指定标签。labels可以用列表的方式来给定多个行或者列\n\nvalue_counts() :\n可以计算出每个取值在列表中出现的次数\n\ndf.groupby :　\n可以按照你所指定的列对其不同的值进行分组，很强大的功能，这里给出代码更好理解。\ndf.groupby(['Survived','Pclass']).sum()\n## 按照Survived和Pclassd的取值，对其他的项进行相应的求和操作，不是数值型的不计数\n\ndf.groupby(['Survived','Pclass']).size()\n## size表示按照Survived和Pclass的取值，进行分别计数。除了size(),还有mean(),max(),min(),std()等\n>>>\nSurvived  Pclass\n0         1          80\n          2          97\n          3         372\n1         1         136\n          2          87\n          3         119\ndtype: int64\n\ndf.groupby(['Survived','Pclass']).size()[0][1]\n## 这里返回的是一个类似矩阵的存在。[0]表示Survived=0,[1]表示Pclass=1,这里前后顺序和你给出列的顺序有关。\n>>>\n80\n##如果给定的列不止一个，会有多重索引（Multiindex)，这里可以这样操作来选取对应的值。\na=df.groupby(['Survived','Sex',]).std()\na.index\n>>>\nultiIndex(levels=[[0, 1], ['female', 'male']],\n           labels=[[0, 0, 1, 1], [0, 1, 0, 1]],\n           names=['Survived', 'Sex'])\n           \n## 我们可以根据levels进行选取\n\na.xs([0,'female'],level=['Survived','Sex'])\n>>>\n    PassengerId    Pclass    Age    SibSp    Parch    Fare\nSurvived    Sex                        \n0    female    263.522063    0.450309    13.618591    1.814635    1.391442    24.821287\n## 接下来就可以根据需求选择列得到数值，同时可以加上.values来将其变为np.array的形式。这里的索引有俩个即Survived和Sex,行名就是levels，所以也可以用loc选择行和列进行选取\n\ndf.isin() :\n选出给定列中某些值的特定行\ndf[df['Sex'].isin(['male'])]\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}