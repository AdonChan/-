{"title": "Python实用技法第3篇：找到最大或最小的N个元素 - python3 ：公司内部培训专栏 ", "index": "python", "content": "上一篇文章：Python实用技法第2篇：使用deque保留最新的N个元素下一篇文章：Python实用技法第4篇：实现优先级队列\n\n1、需求🙀\n我们想在某个集合中找出最大或最小的N个元素\n2、解决方案😸\nheapq模块中有两个函数：nlargest()和nsmallest()\n代码：\nimport heapq\n\nnums=[1,444,66,77,34,67,2,6,8,2,4,9,556]\nprint(heapq.nlargest(3,nums))\nprint(heapq.nsmallest(3,nums))\n结果：\n[556, 444, 77]\n[1, 2, 2]\n这个两个函数都可以接受一个参数key，从而允许他们可以工作在更加复杂的数据结构上：\n代码：\nimport heapq\n\nportfolio=[\n    {'name':'IBM','shares':100,'price':91.1},\n    {'name':'AAPL','shares':50,'price':543.22},\n    {'name':'FB','shares':200,'price':21.09},\n    {'name':'HPQ','shares':35,'price':31.75},\n    {'name':'YHOO','shares':45,'price':16.35},\n]\n\ncheap=heapq.nsmallest(3,portfolio,key=lambda s:s['price'])\n\nexpensive=heapq.nlargest(3,portfolio,key=lambda s:s['price'])\n\nprint(cheap)\nprint(expensive)\n结果：\n[{'name': 'YHOO', 'shares': 45, 'price': 16.35}, {'name': 'FB', 'shares': 200, 'price': 21.09}, {'name': 'HPQ', 'shares': 35, 'price': 31.75}]\n[{'name': 'AAPL', 'shares': 50, 'price': 543.22}, {'name': 'IBM', 'shares': 100, 'price': 91.1}, {'name': 'HPQ', 'shares': 35, 'price': 31.75}]\n如果只是简单的查找最小或者最大的元素（N=1），那么使用min()和max()会更快。\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "1"}