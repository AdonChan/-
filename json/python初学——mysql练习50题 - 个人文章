{"title": "python初学——mysql练习50题 - 个人文章 ", "index": "mysql,python", "content": "创建表请创建如下表，并创建相关约束。如图1操作表中的内容1、自行创建测试数据；2、查询学生总人数；3、查询“生物”课程和“物理”课程成绩都及格的学生id和姓名；4、查询每个年级的班级数，取出班级数最多的前三个年级；5、查询平均成绩最高和最低的学生的id和姓名以及平均成绩；6、查询每个年级的学生人数；7、查询每位学生的学号，姓名，选课数，平均成绩；8、查询学生编号为“2”的学生的姓名、该学生成绩最高的课程名、成绩最低的课程名及分数；9、查询姓“李”的老师的个数和所带班级数；10、查询班级数小于5的年级id和年级名；11、查询班级信息，包括班级id、班级名称、年级、年级级别(12为低年级，34为中年级，56为高年级)，示例结果如下；12、查询学过“张三”老师2门课以上的同学的学号、姓名；13、查询教授课程超过2门的老师的id和姓名；14、查询学过编号“1”课程和编号“2”课程的同学的学号、姓名；15、查询没有带过高年级的老师id和姓名；16、查询学过“张三”老师所教的所有课的同学的学号、姓名；17、查询带过超过2个班级的老师的id和姓名；18、查询课程编号“2”的成绩比课程编号“1”课程低的所有同学的学号、姓名；19、查询所带班级数最多的老师id和姓名；20、查询有课程成绩小于60分的同学的学号、姓名；21、查询没有学全所有课的同学的学号、姓名；22、查询至少有一门课与学号为“1”的同学所学相同的同学的学号和姓名；23、查询至少学过学号为“1”同学所选课程中任意一门课的其他同学学号和姓名；24、查询和“2”号同学学习的课程完全相同的其他同学的学号和姓名；25、删除学习“张三”老师课的score表记录；26、向score表中插入一些记录，这些记录要求符合以下条件：①没有上过编号“2”课程的同学学号；②插入“2”号课程的平均成绩；27、按平均成绩从低到高显示所有学生的“语文”、“数学”、“英语”三门的课程成绩，按如下形式显示： 学生ID,语文,数学,英语,有效课程数,有效平均分；28、查询各科成绩最高和最低的分：以如下形式显示：课程ID，最高分，最低分；29、按各科平均成绩从低到高和及格率的百分数从高到低顺序；30、课程平均分从高到低显示（现实任课老师）；31、查询各科成绩前三名的记录(不考虑成绩并列情况)32、查询每门课程被选修的学生数；33、查询选修了2门以上课程的全部学生的学号和姓名；34、查询男生、女生的人数，按倒序排列；35、查询姓“张”的学生名单；36、查询同名同姓学生名单，并统计同名人数；37、查询每门课程的平均成绩，结果按平均成绩升序排列，平均成绩相同时，按课程号降序排列；38、查询课程名称为“数学”，且分数低于60的学生姓名和分数；39、查询课程链接描述编号为“3”且课程成绩在80分以上的学生的学号和姓名；40、求选修了课程的学生人数41、查询选修“王五”老师所授课程的学生中，成绩最高和最低的学生姓名及其成绩；42、查询各个课程及相应的选修人数；43、查询不同课程但成绩相同的学生的学号、课程号、学生成绩；44、查询每门课程成绩最好的前两名学生id和姓名；45、检索至少选修两门课程的学生学号；46、查询没有学生选修的课程的课程号和课程名；47、查询没带过任何班级的老师id和姓名；48、查询有两门以上课程超过80分的学生id及其平均成绩；49、检索“3”课程分数小于60，按分数降序排列的同学学号；50、删除编号为“2”的同学的“1”课程的成绩；51、查询同时选修了物理课和生物课的学生id和姓名；\nGITHUB\n可以从github直接下载sql文件\n创建表\n# 自行创建测试数据\n-- create database school charset utf8;\nuse `school`;\n# 创建班级表\nDROP TABLE IF EXISTS `class`;\ncreate table `class`(\n  `cid` int unsigned not null auto_increment ,\n  `caption` varchar(50) not null unique ,\n  `grade_id` int unsigned not null ,\n  PRIMARY KEY(`cid`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\nDESC `class`;\n# 创建学生表\nDROP TABLE IF EXISTS `student`;\nCREATE TABLE student(\n  `sid` INT UNSIGNED NOT NULL AUTO_INCREMENT ,\n  `sname` VARCHAR(50) NOT NULL ,\n  `gender` ENUM('男','女') NOT NULL DEFAULT '男',\n  `class_id` INT UNSIGNED NOT NULL,\n  PRIMARY KEY (`sid`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\nDESC `student`;\n# 创建老师表\nDROP TABLE IF EXISTS `teacher`;\nCREATE TABLE `teacher`(\n    tid INT UNSIGNED NOT NULL AUTO_INCREMENT ,\n    tname VARCHAR(50) NOT NULL ,\n    PRIMARY KEY (tid)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\nDESC `teacher`;\n# 创建课程表\nDROP TABLE IF EXISTS `course`;\nCREATE TABLE `course`(\n    `cid` INT UNSIGNED NOT NULL AUTO_INCREMENT ,\n    `cname` VARCHAR(50) NOT NULL ,\n    `teacher_id` INT UNSIGNED NOT NULL,\n    PRIMARY KEY (`cid`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\nDESC course;\n# 创建成绩表\nDROP TABLE IF EXISTS `score`;\nCREATE TABLE `score`(\n    `sid` INT UNSIGNED NOT NULL AUTO_INCREMENT,\n    `student_id` INT UNSIGNED NOT NULL,\n    `course_id` INT UNSIGNED NOT NULL,\n    `score` INT UNSIGNED NOT NULL DEFAULT 0,\n    PRIMARY KEY (`sid`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\nDESC `score`;\n# 创建年纪表\nDROP TABLE IF EXISTS `class_grade`;\nCREATE TABLE `class_grade`(\n    `gid` INT UNSIGNED NOT NULL AUTO_INCREMENT,\n    `gname` VARCHAR(50) NOT NULL,\n    PRIMARY KEY (`gid`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\nDESC `class_grade`;\n# 班级班级任职表\nDROP TABLE IF EXISTS `teach2cls`;\nCREATE TABLE `teach2cls`(\n    `tcid` INT UNSIGNED NOT NULL AUTO_INCREMENT,\n    `tid` INT UNSIGNED NOT NULL,\n    `cid` INT UNSIGNED NOT NULL,\n    PRIMARY KEY (`tcid`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\nDESC `class_grade`;\n\n-- 插入数据\n-- 插入班级表\nINSERT INTO `class`(`caption`, `grade_id`) VALUES\n('一年一班', 1),\n('二年一班', 2),\n('三年二班', 3),\n('一年二班', 1),\n('二年二班', 2),\n('三年一班', 3),\n('四年一班', 4),\n('五年一班', 5),\n('六年一班', 6);\n\n\n-- 插入学生表\nINSERT INTO `student`(`sname`, `gender`, `class_id`) VALUES\n('乔丹', '女', 1),\n('艾费森','女',1),\n('科比','男',2),\n('亨利', '男', 2),\n('alex', '女', 3),\n('jenry', '女', 4),\n('tom', '男', 3),\n('mike', '男', 5),\n('sam', '男', 8),\n('den', '男', 9),\n('张三', '男', 2),\n('张五', '男', 4),\n('jenry', '男', 1);\n-- 插入老师表\nINSERT INTO `teacher`(`tname`) VALUES\n('张三'),\n('李四'),\n('王五'),\n('贾六'),\n('孙七');\n-- 插入课程表\nINSERT INTO `course`(`cname`, `teacher_id`) VALUES\n('生物', 1),\n('体育', 1),\n('物理', 2),\n('语文', 5),\n('数学', 3),\n('英语', 4);\n-- 插入成绩表\nINSERT INTO `score`(`student_id`, `course_id`, `score`) VALUES\n(1, 1, 60),\n(1, 2, 59),\n(2, 2, 99),\n(2, 3, 80),\n(2, 4, 50),\n(3, 1, 100),\n(3, 6, 89),\n(4, 5, 40),\n(6, 3, 70),\n(10, 1, 80),\n(7, 4, 20),\n(11, 6, 71),\n(11, 5, 100),\n(13, 5, 80),\n(1, 3, 70),\n(2, 1, 90);\n-- 插入年级表\nINSERT INTO `class_grade`(`gname`) VALUES\n('一年级'),\n('二年级'),\n('三年级'),\n('四年级'),\n('五年级'),\n('六年级');\n\n-- 插入班级任职表\nINSERT INTO `teach2cls`(`tid`, `cid`) VALUES\n(1, 1),\n(1, 2),\n(2, 1),\n(3, 2),\n(5, 1),\n(4, 3),\n(1, 3),\n(2, 4),\n(3, 6),\n(5, 7),\n(5, 8),\n(4, 5);\n\n50题\n-- 1.查找学生总人数\nSELECT COUNT(sid) as 'student_c' FROM student;\n\n-- 2、查询“生物”课程和“物理”课程成绩都及格的学生id和姓名；\nSELECT student.sid, student.sname, course.cname \nFROM (student INNER JOIN score on student.sid = score.student_id) \nINNER JOIN course on score.course_id = course.cid \nWHERE cname = '生物' or cname = '物理' and score >= 60\nORDER BY sid;\n-- 3、查询每个年级的班级数，取出班级数最多的前三个年级；\n\nSELECT class_grade.gname, COUNT(class.cid) AS 'class_c' \nFROM class LEFT JOIN class_grade ON class.grade_id = class_grade.gid \nGROUP BY class_grade.gid \nORDER BY class_c DESC \nLIMIT 3;\n\n-- 4、查询平均成绩最高和最低的学生的id和姓名以及平均成绩；\nSELECT student.sid, student.sname, AVG(score.score)\nFROM score INNER JOIN student ON score.student_id = student.sid\nGROUP BY score.student_id\nHAVING AVG(score.score) IN (\n    (SELECT AVG(score.score) AS 'score_a' \n    FROM student INNER JOIN score ON student.sid = score.student_id \n    GROUP BY student.sid\n    ORDER BY score_a DESC\n    LIMIT 1),\n    (SELECT AVG(score.score) AS 'score_a' \n    FROM student INNER JOIN score ON student.sid = score.student_id \n    GROUP BY student.sid\n    ORDER BY score_a\n    LIMIT 1));\n\n-- 5、查询每个年级的学生人数；\nSELECT class_grade.gname, COUNT(student.sid) AS 'student_c'\nFROM (class RIGHT JOIN class_grade ON class.grade_id = class_grade.gid) \nLEFT JOIN student ON class.cid = student.class_id\nGROUP BY gname;\n\n-- 6、查询每位学生的学号，姓名，选课数，平均成绩；\nSELECT student.sid, sname, COUNT(course_id) AS 'course_c', IFNULL(AVG(score),0) AS 'score_a'\nFROM student LEFT JOIN score ON student.sid = score.student_id\nGROUP BY sname\nORDER BY sid;\n\n-- 7、查询学生编号为“2”的学生的姓名、该学生成绩最高的课程名、成绩最低的课程名及分数；\nSELECT course.cname, score.score\nFROM course INNER JOIN score ON course.cid = score.course_id\nWHERE score IN (\n    (SELECT MAX(score)\n    FROM score\n    WHERE student_id = 2),\n    (SELECT MIN(score)\n    FROM score\n    WHERE student_id = 2));\n\n-- 8、查询姓“李”的老师的个数和所带班级数；\nSELECT COUNT(DISTINCT teacher.tname) AS 'teacher_c',COUNT(teach2cls.cid) AS 'class_c'\nFROM teacher LEFT JOIN teach2cls ON teacher.tid = teach2cls.tid\nWHERE teacher.tname LIKE '李%';\n\n-- 9、查询班级数小于5的年级id和年级名；\nSELECT gid, class_grade.gname\nFROM class RIGHT JOIN class_grade ON class.grade_id = class_grade.gid\nGROUP BY class_grade.gname\nHAVING COUNT(caption) < 5\nORDER BY gid;\n\n-- 10、查询班级信息，包括班级id、班级名称、年级、年级级别(12为低年级，34为中年级，56为高年级)，示例结果如下；\nSELECT class.cid, class.caption, class_grade.gname,\n    CASE \n        WHEN class_grade.gid BETWEEN 1 AND 2 THEN '低年级'\n        WHEN class_grade.gid BETWEEN 3 AND 4 THEN '中年级'\n        WHEN class_grade.gid BETWEEN 5 AND 6 THEN '高年级'\n    END AS 'level'\n    FROM class INNER JOIN class_grade ON class.grade_id = class_grade.gid;\n\n\n-- 11、查询学过“张三”老师2门课以上的同学的学号、姓名；\nSELECT sid, sname\n    FROM student\n    WHERE sid IN\n    (SELECT student_id\n        FROM score\n        WHERE course_id IN\n            (SELECT cid\n                FROM course\n                WHERE teacher_id IN\n                (SELECT tid\n                    FROM teacher\n                    WHERE tname = '张三'\n                )\n            )\n        GROUP BY student_id\n        HAVING COUNT(course_id) > 2);\n\n-- 12、查询教授课程超过2门的老师的id和姓名；\nSELECT teacher.tid, teacher.tname\n    FROM teacher INNER JOIN course ON teacher.tid = course.teacher_id\n    GROUP BY teacher.tid\n    HAVING COUNT(course.cid) > 2;\n\n-- 13、查询学过编号“1”课程和编号“2”课程的同学的学号、姓名；\nSELECT student.sid, student.sname\n    FROM student INNER JOIN score ON student.sid = score.student_id\n    WHERE score.course_id IN (1,2)\n    GROUP BY sname\n    HAVING COUNT(student.sid) = 2;\n\n-- 14、查询没有带过高年级的老师id和姓名；\nSELECT tid, tname\n    FROM teacher\n    WHERE tid IN\n    (SELECT tid\n        FROM teach2cls\n        WHERE cid IN\n        (SELECT cid\n            FROM\n            (SELECT class.cid, class.caption, class_grade.gname,\n                CASE \n                    WHEN class_grade.gid BETWEEN 1 AND 2 THEN '低年级'\n                    WHEN class_grade.gid BETWEEN 3 AND 4 THEN '中年级'\n                    WHEN class_grade.gid BETWEEN 5 AND 6 THEN '高年级'\n                END AS 'class_level'\n                FROM class INNER JOIN class_grade ON class.grade_id = class_grade.gid\n            ) AS t1\n            WHERE t1.class_level != '高年级')\n    );\n-- 15、查询学过“张三”老师所教的所有课的同学的学号、姓名；\nSELECT sid, sname\nFROM student\nWHERE sid IN\n    (SELECT student_id\n        FROM score\n        WHERE course_id IN\n        (SELECT cid\n            FROM teacher INNER JOIN course ON teacher.tid = course.teacher_id\n            WHERE teacher.tname = '张三')\n    );\n\n-- 16、查询带过超过2个班级的老师的id和姓名；\nSELECT teacher.tid, teacher.tname\n    FROM teacher INNER JOIN teach2cls ON teacher.tid = teach2cls.tid\n    GROUP BY teacher.tid\n    HAVING COUNT(cid) > 2;\n\n-- 17、查询课程编号“2”的成绩比课程编号“1”课程低的所有同学的学号、姓名；\nSELECT sid, sname\nFROM student\nWHERE sid IN    \n    (SELECT t1.student_id\n        FROM\n        (SELECT student_id,score\n                FROM score\n                WHERE course_id = 2\n        ) AS t1,\n        (SELECT student_id,score\n                FROM score\n                WHERE course_id = 1\n        ) AS t2\n        WHERE\n            t1.score < t2.score);\n\n\n-- 18、查询所带班级数最多的老师id和姓名；\nSELECT tid, tname\nFROM teacher\nWHERE tid IN\n(SELECT tid\n    FROM teach2cls\n    GROUP BY tid\n    HAVING COUNT(cid) =\n    (SELECT MAX(t1.count)\n        FROM\n        (SELECT tid, COUNT(cid) AS 'count'\n            FROM teach2cls\n            GROUP BY tid) AS t1));\n\n\n-- 19、查询有课程成绩小于60分的同学的学号、姓名；\nSELECT sid, sname\nFROM student INNER JOIN score ON student.sid = score.student_id\nWHERE score.score < 60;\n\n-- 20、查询没有学全所有课的同学的学号、姓名；\nSELECT student.sid, student.sname\nFROM score INNER JOIN student ON score.student_id = student.sid\nGROUP BY student_id\nHAVING COUNT(course_id) >=\n(SELECT COUNT(cid)\nFROM course);\n\n-- 21、查询至少有一门课与学号为“1”的同学所学相同的同学的学号和姓名；\nSELECT student.sid, student.sname\nFROM score INNER JOIN student ON score.student_id = student.sid\nWHERE course_id IN\n(SELECT course_id\nFROM score\nWHERE score.student_id = 1)\nGROUP BY student_id\n\n-- 22、查询至少学过学号为“1”同学所选课程中任意一门课的其他同学学号和姓名；\nSELECT student.sid, student.sname\nFROM score INNER JOIN student ON score.student_id = student.sid\nWHERE course_id IN\n(SELECT course_id\nFROM score\nWHERE score.student_id = 1)\nGROUP BY student_id\nHAVING student_id != 1; # 排除学号为1的同学\n\n-- 23、查询和“2”号同学学习的课程完全相同的其他同学的学号和姓名；\nSELECT student.sid, student.sname\nFROM score INNER JOIN student ON score.student_id = student.sid\nWHERE student_id != 2\nGROUP BY student_id \nHAVING COUNT(course_id) = \n    (SELECT COUNT(course_id)\n    FROM score\n    WHERE student_id = 2)\n-- 24、删除学习“张三”老师课的score表记录；\nDELETE\nFROM score\nWHERE course_id IN\n(SELECT cid\nFROM teacher INNER JOIN course ON teacher.tid = course.teacher_id\nWHERE teacher.tname = '张三');\n\n-- 25、向score表中插入一些记录，这些记录要求符合以下条件：①没有上过编号“2”课程的同学学号；②插入“2”号课程的平均成绩；\nINSERT INTO score(student_id, course_id, score)\nSELECT t1.sid, t1.cid, t2.avg_score\nFROM \n    (SELECT student.sid, '2' AS cid\n    FROM student LEFT JOIN score ON student.sid = score.student_id\n    WHERE course_id != 2 OR ISNULL(course_id)) AS t1,\n    (SELECT IFNULL(AVG(score), 0) as 'avg_score'\n    FROM score\n    WHERE course_id = '2') AS t2\nORDER BY sid\n\n-- 26、按平均成绩从低到高显示所有学生的“语文”、“数学”、“英语”三门的课程成绩，按如下形式显示： 学生ID,语文,数学,英语,有效课程数,有效平均分；\nSELECT\n        sc.student_id,\n        (select score.score from score left join course on score.course_id = course.cid where course.cname = '语文' and score.student_id = sc.student_id) as yw,\n        (select score.score from score left join course on score.course_id = course.cid where course.cname = '数学' and score.student_id = sc.student_id) as sx,\n        (select score.score from score left join course on score.course_id = course.cid where course.cname = '英语' and score.student_id = sc.student_id) as yy,\n        COUNT(sc.course_id),\n        AVG(sc.score)\nFROM score AS sc\nGROUP BY sc.student_id\nORDER BY avg(sc.score) ASC;\n\n-- 27、查询各科成绩最高和最低的分：以如下形式显示：课程ID，最高分，最低分；\nSELECT course.cid, MAX(score), MIN(score)\nFROM score RIGHT JOIN course ON score.course_id = course.cid\nGROUP BY course_id;\n\n-- 28、按各科平均成绩从低到高和及格率的百分数从高到低顺序；\nSELECT AVG(score) AS 'score_avg', CONCAT((CASE WHEN score.score > 60 THEN 1 ELSE 0 END) * 100, '%') AS 'percent'\nFROM score\nGROUP BY score.course_id\nORDER BY score_avg ASC, percent DESC;\n\n\n-- 29、课程平均分从高到低显示（现实任课老师）；\nSELECT course.cname,teacher.tname, AVG(score.score) AS 'score_avg'\nFROM (score RIGHT JOIN course ON score.course_id = course.cid)\nINNER JOIN teacher ON course.teacher_id = teacher.tid\nGROUP BY course_id\nORDER BY score_avg DESC;\n\n-- 30、查询各科成绩前三名的记录(不考虑成绩并列情况)\nSELECT course.cid, course.cname, s2.first_s, s2.second_s, s2.third_s\nFROM\n(SELECT course_id,\n(SELECT score FROM score AS s2 WHERE s1.course_id = s2.course_id ORDER BY score DESC LIMIT 0,1) AS 'first_s',\n(SELECT score FROM score AS s2 WHERE s1.course_id = s2.course_id ORDER BY score DESC LIMIT 1,1) AS 'second_s',\n(SELECT score FROM score AS s2 WHERE s1.course_id = s2.course_id ORDER BY score DESC LIMIT 2,1) AS 'third_s'\nFROM score AS s1\nGROUP BY s1.course_id) AS s2 RIGHT JOIN course ON s2.course_id = course.cid;\n\n\n-- 32、查询每门课程被选修的学生数；\nSELECT course.cid, course.cname, COUNT(score.student_id) AS 'student_c'\nFROM score RIGHT JOIN course ON score.course_id = course.cid\nGROUP BY course.cid;\n\n-- 33、查询选修了2门以上课程的全部学生的学号和姓名；\nSELECT student.sid, student.sname\nFROM score RIGHT JOIN student ON score.student_id = student.sid\nGROUP BY student.sid\nHAVING COUNT(score.course_id) > 2;\n\n-- 34、查询男生、女生的人数，按倒序排列；\nSELECT gender ,COUNT(gender) AS 'gender_c'\nFROM student\nGROUP BY gender\nORDER BY gender_c DESC;\n\n-- 35、查询姓“张”的学生名单；\nSELECT student.sid, student.sname, student.gender, class.caption\nFROM student LEFT JOIN class ON student.class_id = class.cid\nWHERE sname LIKE '张%';\n\n-- 36、查询同名同姓学生名单，并统计同名人数；\nSELECT sname, count(sname) AS 'same_name_c'\nFROM student\nGROUP BY sname\nHAVING COUNT(sname) > 1;\n-- 37、查询每门课程的平均成绩，结果按平均成绩升序排列，平均成绩相同时，按课程号降序排列；\nSELECT course.cid, course.cname, AVG(score) AS 'score_a'\nFROM score RIGHT JOIN course ON score.course_id = course.cid\nGROUP BY course_id\nORDER BY score_a, cid DESC;\n\n-- 38、查询课程名称为“数学”，且分数低于60的学生姓名和分数；\nSELECT student.sname, score.score\nFROM (score RIGHT JOIN course ON score.course_id = course.cid)\nINNER JOIN student ON score.student_id = student.sid\nWHERE course.cname = '数学' AND score.score < 60;\n\n-- 39、查询课程编号为“3”且课程成绩在80分以上的学生的学号和姓名；\nSELECT student.sid, student.sname\nFROM score INNER JOIN student ON score.student_id = student.sid\nWHERE course_id = 3 AND score > 80;\n-- 40、求选修了课程的学生人数\nSELECT course.cid, course.cname, COUNT(student_id) AS 'student_c'\nFROM score INNER JOIN course ON score.course_id = course.cid\nGROUP BY course_id;\n-- 41、查询选修“王五”老师所授课程的学生中，成绩最高和最低的学生姓名及其成绩；\nSELECT student.sname, t2.course_id, t2.score, t2.max_score, t2.min_score\nFROM student\nINNER JOIN \n    (SELECT score.student_id, score.course_id, score.score, t1.max_score, t1.min_score\n    FROM score,\n            (SELECT course_id, MAX(score) AS 'max_score' ,MIN(score) AS 'min_score'\n            FROM score\n            WHERE course_id IN \n            ( SELECT cid                    \n                FROM    course\n                INNER JOIN teacher ON course.teacher_id = teacher.tid\n                WHERE teacher.tname = '王五')\n            GROUP BY course_id) as t1\n            WHERE score.course_id = t1.course_id AND score.score IN (max_score, min_score)\n    ) AS t2 ON student.sid = t2.student_id;\n\n-- 42、查询各个课程及相应的选修人数；\nSELECT course.cid, course.cname, IFNULL(COUNT(score.student_id), 0) AS 'student_c'\nFROM score RIGHT JOIN course ON score.course_id = course.cid\nGROUP BY course.cid;\n\n-- 43、查询不同课时但成绩相同的学生的学号、课程号、学生成绩；\nSELECT DISTINCT s1.student_id, s1.course_id, s1.score\nFROM score as s1, score as s2\nWHERE s1.student_id != s2.student_id AND s1.course_id != s2.course_id AND s1.score = s2.score;\n\n-- 44、查询每门课程成绩最好的前两名学生id和姓名；\nSELECT student.sid, student.sname, t2.score,t2.course_id\nFROM\n(SELECT score.student_id, score.course_id, score.score\nFROM \n(select\n        s1.course_id,\n        (select s2.score from score as s2 where s1.course_id = s2.course_id order by s2.score desc limit 0,1) as first_score,\n        (select s3.score from score as s3 where s1.course_id = s3.course_id order by s3.score desc limit 1,1) as second_score\nfrom\n        score as s1\nGROUP BY s1.course_id) AS t1 INNER JOIN score ON t1.course_id = score.course_id\nWHERE score.score IN (t1.first_score, t1.second_score)\n) AS t2 INNER JOIN student ON student.sid = t2.student_id\nORDER BY t2.course_id , t2.score DESC;\n\n-- 45、检索至少选修两门课程的学生学号；\nSELECT student_id\nFROM score\nGROUP BY student_id\nHAVING COUNT(course_id) >= 2;\n\n-- 46、查询没有学生选修的课程的课程号和课程名；\nSELECT course.cid, course.cname\nFROM score RIGHT JOIN course ON score.course_id = course.cid\nWHERE score.student_id IS NULL;\n\n-- 47、查询没带过任何班级的老师id和姓名；\nSELECT teacher.tid, teacher.tname\nFROM teach2cls RIGHT JOIN teacher ON teach2cls.tid = teacher.tid\nWHERE teacher.tid IS NULL;\n\n-- 48、查询有两门以上课程超过80分的学生id及其平均成绩；\nSELECT student_id, AVG(score)\nFROM score\nWHERE score.score > 80\nGROUP BY student_id\nHAVING COUNT(score.course_id) >= 2;\n\n-- 49、检索“3”课程分数小于60，按分数降序排列的同学学号；\nSELECT student_id, score\nFROM score\nWHERE score.course_id = 3 AND score.score < 60\nORDER BY student_id DESC;\n-- 50、删除编号为“2”的同学的“1”课程的成绩；\nDELETE FROM score\nWHERE score.sid =\n    (SELECT t1.sid\n    FROM \n        (SELECT sid\n        FROM score AS s1\n        WHERE student_id = 2 AND course_id = 1) AS t1\n    );\n-- 51、查询同时选修了物理课和生物课的学生id和姓名；\nSELECT sid, sname\nFROM student\nWHERE sid IN \n    (SELECT student_id\n    FROM score\n    WHERE course_id IN \n        (SELECT cid\n        FROM course\n        WHERE course.cname IN ('物理','生物'))\n    GROUP BY student_id\n    HAVING count(course_id) = 2\n    );\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "6"}