{"title": "Python入门学习(二) - 个人文章 ", "index": "python", "content": "在迈过HelloWorld的大门后, 正式开始了解Python\n变量\n变量定义\n当看到Python的变量定义方式时, 让我有一点意外.即没有变量的类型说明符, 也没有定义变量的标志符(如: JavaScript的var, VB的Dim)\nx = 1\n这样, 就定义一个变量 x 这个变量的类型, 取决于变量指向的值. 行尾不能加分号, 让我也是纠结了好一会儿, 不过还是要入乡随俗的, 慢慢习惯了就好.\n数据类型\n基本数据类型\n基本数据类型包括 int, float, str, bool\n\n测试基本数据类型:\ni = 1\nf = 2.0\ns = \"jack\"\nb = True\nprint(\"i type\", type(i))\nprint(\"f type\", type(f))\nprint(\"s type\", type(s))\nprint(\"b type\", type(b))\n执行结果:\n\n常用的数据类型\n\nlist\ntuple\nset\ndictionary\n\nlist (数组)\narr = [1, \"jack\", 9.7, True]\nprint(arr)\nprint(type(arr))\n执行结果: \n同样我们也可以定义一个二维数组:\narr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(arr[1][1]) # 5\n当数组中的内容不固定时, 我们还可以动态操作 list:\narr = []\narr.append(\"A\")\narr.append(\"B\")\narr.append(\"C\")\narr.insert(1, \"X\")\narr.remove(\"B\")\narr.pop()\narr.pop(0)\nprint(arr)\nappend: 将在数组末尾添加元素insert: 将在指定位置添加元素remove: 删除指定元素pop: 删除指定位置的元素, 如果没有指定位置, 则删除末尾元素\ntuple(元组)\ntuple和list非常类似，但是tuple一旦初始化就不能修改\nclassmates = ('Michael', 'Bob', 'Tracy')\nprint('classmates =', classmates)\nprint('classmates[0] =', classmates[0])\nclassmates[0] = \"Jack\" # TypeError: 'tuple' object does not support item assignment\n但是当tuple中含有 list, set, dictionary时, 情况就不一样了\nclassmates = ('Michael', [\"a\", \"b\"])\nclassmates[1].append(\"c\")\nprint('classmates =', classmates)\n执行结果:\nclassmates = ('Michael', ['a', 'b', 'c'])\n看上去 classmates 改变了, 但实际上 classmates 是没有变的. classmates[1]指向的list的指针是没有变的, 改变的是指针指向的list\nset(集合)\nset有一个特性, 就是元素的内容是唯一的, 还有set和tuple一样, 只可以添加不可变的值\ns = set([1, 2, 3]) # 初始化Set时, 只能接收list\ns.add(4)\ns.add((4, 5)) # set 只可以添加不可变的值\ns.add((4, 5)) # 不会重复添加\ns.add((4, 5, 6))\nx = \"ABC\"\ns.add(x)\nx = \"XYZ\" # 虽然 x 改变了指针指向, 但set中原来添加的并不是变量x, 而是x所指向的\"ABC\"\n# s.add([1, 2, 5]) # set 不能添加可变的元素\ns.remove(1)\ns.remove((4, 5, 6))\n\n# s.remove(5) # KeyError: 5\n\nprint(s)\n执行结果:\ndictionary(字典)\ndictionary = {\n    \"name\" : \"小明\", \n    \"age\" : 23, \n    \"phone\":\"18733774869\",\n    \"age\" : 24 # 这样是可以的, 新值会覆盖旧值, 但实际情况中这样没有意义\n}\ndictionary[\"age\"] = dictionary[\"age\"] + 1 # 修改dictionary中指定key的值\ndictionary[\"address\"] = \"北京, 丰台区\" # 向dictionary中添加新的元素\nprint(isinstance(dictionary[\"phone\"], str))\nprint(isinstance(dictionary[\"age\"], int))\nprint(isinstance(dictionary[\"name\"], str))\nprint(dictionary[\"age\"])\nif \"age\" in dictionary: # 判断dictionary中, 是否存在指定的key\n    print(dictionary[\"age\"])\nfor key in dictionary:\n    print(key, '\\t => \\t', dictionary[key])\nprint(dictionary.pop(\"age\")) # 删除指定的key\nprint(dictionary.get(\"Age\")) # None\n# print(dictionary[\"Age\"]) # KeyError: 'Age'\nprint(dictionary.get(\"Age\", -1)) # -1, 若Map中没对应的key, 则返回指定的默认值\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}