{"title": "Python 爬取高校历年分数线 - 有趣的Python ", "index": "python爬虫,网页爬虫,python", "content": "最近一周一直在帮家里小弟看高考志愿，所以更新的没那么频繁了，请大家见谅。\n在看各高校的往年分数时，忍不住手痒，想着能不能给它爬下来？哈哈，说干就干！\n1 流程分析\n之前无意中在这个网站发现有各个高校的历年录取分数线：https://gkcx.eol.cn。\n我们的目标是用 Python 将下面页面的数据导出到 Excel：\n\n这个页面的 URL 是：https://gkcx.eol.cn/schoolhtm...，显然是需要一个 school_id 拼接而成的，那么如何获取这个 school_id 呢？\n除非想办法爬取到所有院校的 school_id，这里我想着是从上面图中的搜索框进入：\n\n这样，整体的业务流程我们就理清楚了：\n\n先调用搜索的 URL 获取到高校的 school_id，拼接到高校的详情访问地址\n访问详情地址，抓取目标数据\n处理目标数据，存储到 Excel 中\n\n2 获取 school_id\n按下 F12，可以看出搜索调用的 URL 是：https://gkcx.eol.cn/soudaxue/queryschool.html?&keyWord1=南京邮电大学，但是我们发现该请求的 response 里并没有高校列表，所以猜测这里是有二次数据请求获取到高校的列表，然后解析显示到页面的。\n顺着请求流，我们看到了这么一个请求：\n\n并且它的 response 刚好是一个包含高校信息的 json，到这里应该还是顺利的，我们只要从这个 json 里解析出我们想要的东西，然后继续后面的步骤就可以了。要注意该请求的 Referer。\n但是在解析这个 json 时会遇到一个小问题，返回的数据格式是这样的：\n({\n \"totalRecord\": {\"num\": \"2\"},\n \"school\":  [\n    {\n   \"schoolid\": \"160\",\n   \"schoolname\": \"南京邮电大学\",\n...\n});\n它是被 (); 包围着的，不是一个合法的 json 数据，这里需要对其进行处理后才能解析 json：\n    # 返回数据包含 ();，需要特殊处理\n    text = ((response.text).split(');',1)[0]).split('(',1)[1]\n    j = json.loads(text)\n3 分数线获取\n学校的详情页面是：https://gkcx.eol.cn/schoolhtm...，同样的套路，在点击后 response 里并没有分数线数据，我想也是二次请求吧，果然在请求流里找到了这个：\n\n这里的两个请求刚好将高校的每年分数线和各专业的分数线以 XML 的格式返回，Very Good！\n下面要做的就是 XML 解析啦。\n4 XML 解析\n这里我们使用 xml.etree.ElementTree 来解析 XML：\n<areapionts>\n    <areapiont>\n        <year>2017</year>\n        <specialname>软件工程（嵌入式培养）</specialname>\n        <maxfs>369</maxfs>\n        <varfs>366</varfs>\n        <minfs>364</minfs>\n        <pc>一批</pc>\n        <stype>理科</stype>\n    </areapiont>\n由于数据比较规整，解析也很简单：\nareapionts = ET.fromstring(response.text)\nfor areapiont in areapionts:\n    print(areapiont.find('year').text)\n    print(areapiont.find('specialname').text)\n5 Excel 写入\nExcel 的写入需要借助于 openpyxl 模块。\nopenpyxl 简单使用示例\n>>> import openpyxl\n>>> wb = openpyxl.Workbook()\n# 初始时会生成一个 sheet 页\n>>> wb.sheetnames\n['Sheet']\n# 创建 sheet 页\n>>> wb.create_sheet(index=0,title='First')\n<Worksheet \"First\">\n# 获取所有 sheet 页\n>>> wb.sheetnames\n['First', 'Sheet']\n# 删除 sheet 页\n>>> wb.remove(wb['Sheet'])\n>>> wb.sheetnames\n['First']\n>>> sheet = wb['First']\n# 设置单元格\n>>> sheet['A1'] = '省份'\n>>> sheet['B1'] = '学校'\n# 设置指定的单元格\n>>> sheet.cell(1,3).value='test'\n>>> wb.save('test.xlsx')\nXML 解析写入 Excel\ndef gen_excel(school,xml,wb):\n    sheet = wb.create_sheet(title='各专业历年录取分数线')\n    sheet.column_dimensions['B'].width = 40\n    sheet['A1'] = '年份'\n    sheet['B1'] = '专业'\n    sheet['C1'] = '最高分'\n    sheet['D1'] = '平均分'\n    sheet['E1'] = '最低分'\n    sheet['F1'] = '批次'\n    sheet['G1'] = '录取批次'\n\n    areapionts = ET.fromstring(xml)\n    column = 1 \n    for areapiont in areapionts:\n        column += 1\n        sheet.cell(column,1).value = areapiont.find('year').text\n        sheet.cell(column,2).value = areapiont.find('specialname').text\n        sheet.cell(column,3).value = areapiont.find('maxfs').text\n        sheet.cell(column,4).value = areapiont.find('varfs').text\n        sheet.cell(column,5).value = areapiont.find('minfs').text\n        sheet.cell(column,6).value = areapiont.find('pc').text\n        sheet.cell(column,7).value = areapiont.find('stype').text\n    wb.save('{}.xlsx'.format(school['schoolname']))\n执行效果\n$ python gkcx.py\nPlease the school name：南京邮电大学\n共检索到 2 个高校：['南京邮电大学', '南京邮电大学通达学院']\n数据获取完成，已下载到脚本目录\n\n结果看着还可以，但是还是有问题的，因为各省的分数线肯定是不一样的，这里默认检索出的是学校所在省的分数线，因此若要获取在其他省的分数线，还需要进一步处理，有兴趣的同学不妨动手试一下。后台回复「高考」可以获取源码。\n\n如果觉得有用，欢迎关注我的微信，一起学习，共同进步，不定期推出赠书活动~\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}