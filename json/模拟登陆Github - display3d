{"title": "模拟登陆Github - display3d ", "index": "python,github,模拟登录,requests", "content": "这里不讨论用 Github API 的情况，仅仅以 Github 来说明模拟登陆\n先尝试用真实浏览器登陆，登陆成功后在开发者工具的 Network 选项卡中捕获 Session 文件。可以看到，登陆所需要的数据不仅仅是 email（或用户名） 和密码，还需要其它的 3 个字段，而这 3 个字段普通用户在真实浏览器中是无法填写的（也无需填写，这仨字段会自动附加到表单中提交）。\n\n其中的 commit、utf8 的值是不变的，只有 authenticity_token 字段的值是每次登陆都不一样的（为的就是区分人类与爬虫程序），authenticity_token 字段是在 https://github.com/login （登陆页面，未登陆状态）的 from 元素下的一个隐含字段（不显示在浏览器中）,其 type 属性值为 hidden。\n下图展示了（重新）登陆页面的源码，其中 type 属性为 hidden 的 input 字段中的 authenticity_token 属性的值就是需要提取出来作为表单数据的一部分提交至服务器\n\n从下图可以看到响应码（Status Code）是 302 found 表示重定向跳转至其它 url，这里跳转至 https://github.com，也就是说，登陆成功后就跳转至 Github 首页（即个人主页）\n虽然是在 https://github.com/login 页面中登陆，但登陆时是向 https://github.com/session 提交表单数据，所以在 session 响应中可惜查看到已提交的表单数据。\n\n上图展示了登陆成功后，已提交的表单数据，可以发现 authenticity_token 字段的值和登陆前的值是一致的（email、password 字段由于是明文，所以这里打码了）\n能保持登陆状态的原因是登陆成功后生成 Cookies 的功劳，不过 Cookies 一般不是永久有效的，如果希望长期处于登陆状态，需要每隔一段时间检测下 Cookies 是否还有效（或进行异常处理），失效的话就需要重新提交表单生成新的 Cookies。\n代码实现\n使用的库\n\nrequests\npyquery\n\n携带 Cookies 模拟登陆 Github 的例子\n代码中的表单数据 post_data 的 login、password 这俩字段分别需要改为自已的 email（或用户名）及密码\nimport requests\nfrom pyquery import PyQuery as pq\n\nheaders = {\n    'Referer': 'https://github.com/',\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36',\n    'Host': 'github.com',\n}\nlogin_url = 'https://github.com/login'\npost_url = 'https://github.com/session'\nlogined_url = 'https://github.com/settings/profile'\nkeys_url = \"https://github.com/settings/keys\"\n\n# 提取隐含字段 authenticity_token 的值，登陆需要提交表单，而提交表单需要该值\nlogin_r = requests.get(login_url, headers=headers)\ndoc = pq(login_r.text)\ntoken = doc('input[name=\"authenticity_token\"]').attr(\"value\").strip()\nprint(token)\n\n# 构造表单数据\npost_data = {\n    'commit': 'Sign in',\n    'utf8': '✓',\n    'authenticity_token': token,\n    'login': email_or_name,\n    'password': password,\n}\n# 模拟登陆必须携带 Cookies\npost_r = requests.post(post_url, data=post_data, headers=headers, cookies=login_r.cookies.get_dict())\n# 可以发现响应的 url 是 https://github.com，而不是 https://github.com/session\n# 因为模拟登陆成功后就 302 重定向跳转至 \"https://github.com\" 了\nprint(post_r.url)\ndoc = pq(post_r.text)\n# 输出项目列表\nprint(doc(\"div.Box-body > ul > li\").text().split())\n\n# 请求其它 github 页面，只要附加了能维持登陆状态的 Cooikes 就可以访问只有登陆才可访问的页面内容\nlogined_r = requests.get(logined_url, headers=headers, cookies=post_r.cookies.get_dict())\ndoc = pq(logined_r.text)\npage_title = doc(\"title\").text()\nuser_profile_bio = doc(\"#user_profile_bio\").text()\nuser_profile_company = doc(\"#user_profile_company\").attr(\"value\")\nuser_profile_location = doc(\"#user_profile_location\").attr(\"value\")\nprint(f\"页面标题：{page_title}\")\nprint(f\"用户资料描述：{user_profile_bio}\")\nprint(f\"用户资料公司：{user_profile_company}\")\nprint(f\"用户资料地点：{user_profile_location}\")\n\n# 使用 logined_r 的 Cookies 也可以\nkeys_r = requests.get(keys_url, headers=headers, cookies=post_r.cookies.get_dict())\ndoc = pq(keys_r.text)\n# SSH keys Title\ndoc('#ssh-key-29454773 strong.d-block').text()\n显式传入 Cookies 、headers 还是挺麻烦的，万一有个请求没有携带完整的 Cookies，可能就无法得到正确的响应。\n为了省略每次都要手动传入 Cookies 的麻烦，下面使用另一种方式模拟登陆 Github\n利用 Session 对象维持 Github 模拟登陆状态\n\n构造一个 session 对象；\n使用 session 对象进行请求\n\n代码\n其中使用 session.headers 维持每次会话的 headers 不变\n为了安全，利用内置模块 getpass 输入不可见的密码（注意密码一定不能错）\nimport getpass\n\nimport requests\nfrom pyquery import PyQuery as pq\n\nclass Login(object):\n    def __init__(self):\n        base_url = 'https://github.com/'\n        # 登陆 url \n        self.login_url = base_url +'login'\n        # 提交表单的 api\n        self.post_url = base_url +'session'\n        # 个人资料页面的 url\n        self.logined_url = base_url +'settings/profile'\n        # 构造一个会话对象\n        self.session = requests.Session()\n        # 自定义请求头\n        self.session.headers = {\n            'Referer': 'https://github.com/',\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36',\n            'Host': 'github.com'\n        }\n\n    def token(self):\n        # 请求登陆页面\n        response = self.session.get(self.login_url)\n        # 提取 authenticity_token 的 value，\n        doc = pq(response.text)\n        token = doc('input[name=\"authenticity_token\"]').attr(\"value\").strip()\n        return token\n    \n    def login(self, email, password):\n        token = self.token()\n        # 构造表单数据\n        post_data = {\n            'commit': 'Sign in',\n            'utf8': '✓',\n            'authenticity_token': token,\n            'login': email,\n            'password': password\n        }\n        # 发送 POST 请求，它会 302 重定向至 'https://github.com/'，也就是响应 'https://github.com/' 的页面\n        response = self.session.post(self.post_url, data=post_data)\n        # 可以发现 302 重定向至 'https://github.com/'\n        print(f\"\\n请求 url：{response.url}\")\n        if response.status_code == 200:\n            print(\"status_code: 200\")\n            self.home(response.text)\n\n        # 请求个人资料页\n        response = self.session.get(self.logined_url)\n        if response.status_code == 200:\n            print(\"status_code: 200\")\n            self.profile(response.text)\n\n    def home(self, html):\n        doc = pq(html)\n        # 提取用户名\n        user_name = doc(\"summary > span\").text().strip()\n        print(f\"用户名：{user_name}\")\n\n        # 提取仓库列表        \n        Repositories = doc(\"div.Box-body > ul > li\").text().split()\n        for Repositorie in Repositories:\n            print(Repositorie)\n    \n    def profile(self, html):\n        doc = pq(html)\n        page_title = doc(\"title\").text()\n        user_profile_bio = doc(\"#user_profile_bio\").text()\n        user_profile_company = doc(\"#user_profile_company\").attr(\"value\")\n        user_profile_location = doc(\"#user_profile_location\").attr(\"value\")\n        print(f\"页面标题：{page_title}\")\n        print(f\"用户资料描述：{user_profile_bio}\")\n        print(f\"用户资料公司：{user_profile_company}\")\n        print(f\"用户资料地点：{user_profile_location}\")\n\n    def main(self):\n        email = input(\"email or username: \")\n        # 输入的密码不可见，注意密码一定不能错\n        password = getpass.getpass(\"password:\")\n        self.login(email=email, password=password)\n\nif __name__ == \"__main__\":\n    login = Login()\n    login.main()\n运行效果\n\n参考资料\n\n本文参考 《Python 3 网络爬虫开发实战》 —— 10.1 模拟登陆并爬取 GitHub\n隐含字段参考了 《Python网络数据采集》 —— 12.3　常见表单安全措施\n\n阅读更多\n字符图像识别——数字字母混合\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "2"}