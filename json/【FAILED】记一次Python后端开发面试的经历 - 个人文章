{"title": "【FAILED】记一次Python后端开发面试的经历 - 个人文章 ", "index": "后端开发,python", "content": "在拉勾上投了十几个公司，大部分都被标记为不合适，有两个给了面试机会，其中一个自己觉得肯定不会去的，也就没有去面试，另一个经历了一轮电话面加一轮现场笔试和面试，在此记录一下面试的内容，做个小的总结。\n\n【04/18】电话面试\n上来没废话，直接开始问问题。\n1. is和==的区别？\nis判断两个引用是否指向的是同一个变量，即内存id是否相等，==则是调用的__eq__方法，一般是用于判断值是否相等，也可以重写__eq__方法实现想要的效果。\n\n2. dict与list的查找复杂度？\ndict用hash实现，查找的时间复杂度是O(1)，list则为O(n)。\n\n3. a/b/c三个装饰器依次装饰函数fun()，装饰器的执行顺序？\n注意装饰器函数本身一般有两层，在装饰的时候外层和内层顺序是相反的，详情可以参考这边文章python 多个装饰器的调用顺序。\n\n4. 如何运行一个字符串？\neval和exec。\n\n5.Python多线程能否充分利用CPU多核心，为什么？\n这里回答的是GIL相关的东西，可深可浅，自己把握~\n\n6. 什么是上下文管理器？如何实现？\n广泛意义上来说，上下文是指程序运行的环境，Python中常见于打开文件或网络连接，其实就是with关键字，如：\nwith open(\"test.txt\") as file:\n     print(file.read())\n可以确保文件在最后会被关闭，只要对一个对象实现了__enter__和__exit__函数，就可以构造自己的上下文管理器了。\n\n7. 同步/异步/阻塞/非阻塞都是什么？\n感觉直接解释概念不好解释，这里我回答的思路是举例子，异步说白了就是任务不需要同步进行，比如用爬虫爬取一个数据，然后再保存数据，接下来再去爬另一个数据，这是同步；异步就是爬虫不用等着数据保存好，爬完一个直接去爬另一个，数据保存的事情交给别的逻辑去慢慢处理；阻塞和非阻塞也是基于此的，同步的情况下会阻塞爬虫，爬虫需要等待数据的保存。（这部分是我自己的理解，建议看看专业的说明）\n\n8. 如何判断两个浮点数是否相等？\n之前完全没想过这个的问题，我的回答就是按一个差不多的精度去比较，比如到小数点第几位之前都是相等的，就认为两个数相等，或者Math模块里可能有什么方法可以去精确对比，当时是这么回答的，现在查了一下基本也是这个思路，Math模块中有一个isclose函数用来判断两个浮点数的值是否接近或相等\n\n9. MySQL的索引一般是怎么实现的？\nB-Tree(一般是B+Tree)和Hash，然后再简单介绍一下。\n\n10. 对于Flask的实现有了解吗？\n只知道WSGI，其余的不清楚，暂时还没去深入看Flask的源码。\n\n\n【04/20】现场笔试+面试\n跨了大半个北京城，还跟leader撒谎请假，也是心累。笔试题如下：\n1. 一个木棍任意截成三段，围成三角形的概率？\n咩咩咩？不知道。（回来查了是25%，具体可以自行搜索，反正脱离数学N年是无论如何都想不出来的）。\n\n2. 一个函数RAND7()随机返回1~7，使用它构造一个RAND10()函数随机返回10。\n一开始写了个函数如下：\ndef rand10():\n    a = rand7()\n    b = rand7() - 4\n    if b < 0:\n        b = 0\n    return a + b\n也是脑袋抽了，想得太简单，这个rand10虽然能返回1~10的随机数，但每个数出现的概率不是1/10，后面时间快到了检查的时候才反应过来。正确的思路是：\ndef rand10():\n    while 1:\n        res = (rand7()-1)*7+rand7()    # res等概率随机1~49\n        if res < 40:                   # 只取出0~39共40个数，每个数出现的概率也是相等的\n            return res % 10 + 1        # 随机输出1~10\n\n3. 把一段JAVA代码改成Python，并增加单元测试。\nJAVA代码本身很简单，即使没学过也能看懂，改后的Python代码如下：\nclass MyClass:\n    __current = 0\n    def next(self):\n        MyClass.__current += 1\n        return MyClass.__current\n但是对于单元测试则仅限于听过的地步，需要用到unittest，好像也有别的模块。\n\n4. 给定一个数组，按奇数在前升序，偶数在后降序排列，一行代码实现。\n没啥好说的，一行代码必然是列表生成式，假设数组是nums，代码如下：\nsorted([n for n in nums if n % 2]) + sorted([n for n in nums if not n % 2], reverse=True)\n\n5. 实现单例。\n单例就是说一个class只能有一个instance，实现的方法有很多，例如改写__new__方法：\nclass Singleton(object):\n    _instance = None\n    def __new__(cls, *args, **kw):\n        if not cls._instance:\n            cls._instance = super(Singleton, cls).__new__(cls, *args, **kw)  \n        return cls._instance \n\n6. 有一个问答平台，每个用户对一个问题最多只能回答一次，同一个问题最多只能对一个答案点赞；1)设计合适的数据库结构；2)写出SQL获取点赞数最多的10个问题；\n我平时也就用数据库查数据，在设计数据库上没有深入研究，因此的我答案就简单写了有哪些表，字段分别是什么，至于题中的条件限制，就交由后台的程序逻辑去处理，而不是在数据库设计层面去限制。因为是自己设计的表结构，SQL本身也就不难。\n\n7. 设计一个栈，实现pop/push及max方法，要求能在O(1)时间内取得最大值。\nLeetCode原题啊！list怎么能O(1)取得最大值呢，无非是空间换时间，每push一个数就同时记录当前的最大值。\n\n8. 手写快排。\n呵呵。\n\n其他针对简历的提问\n1. 你的网站，你觉得如果访问量上去了，最先出现瓶颈问题的点是哪？怎么优化？\n我答的是数据库，因为好多不必要或者可以使用缓存的地方也频繁操作数据库，而且是使用的ORM，但之前从哪看到ORM不能确保对应的SQL语句是最优的，因此可以尝试使用原生SQL或者增加Redis缓存。\n\n2. 如果要扩展后台服务器，需要怎么做？\n（话说这不是运维的工作么。。。）呃，就是增加服务器啊，然后前面加一层负载均衡，把请求分配给不同的服务器。（那不同的服务器怎么使用你的Session？）再加个Session服务器。\n\n3. 我看你平时刷编程题，有遇到什么有意思的题目吗？\nLeetCode才开始刷，就举了两道Codewars上的题目，我也真是傻了，真的举了两道有意思（但自己没做好）的题。\n\n其他就无非是一些为什么想做后端开发之类的问题了，个人感觉题目大部分也挺简单的，我的表现也算中规中矩吧，但面试官说我要进一步加强基础知识，具体哪方面（数据库、网络协议、还是Python本身）又语焉不详。\n\n                ", "mainLikeNum": ["7 "], "mainBookmarkNum": "10"}