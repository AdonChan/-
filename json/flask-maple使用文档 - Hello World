{"title": "flask-maple使用文档 - Hello World ", "index": "python,flask,sqlalchemy", "content": "安装\nTo install Flask-Maple:\npip install flask-maple\n\nOr alternatively, you can download the repository and install manually by doing:\ngit clone git@github.com:honmaple/flask-maple.git\ncd flask-maple\npython setup.py install\n\n用户系统\n在 flask_maple/auth/model.py 中默认实现了 GroupMixin 与 UserMixin如果要创建 user 表与 group 表,只需要\nfrom flask_maple.auth.models import UserMixin, GroupMixin\n\nclass User(db.Model, UserMixin):\n    pass\n\nclass Group(db.Model, GroupMixin):\n    pass\n\n即可\nuser 表默认创建以下字段, 可添加更多想要的字段\n\nid\nusername\npassword\nemail\nis_superuser\nis_confirmed\nregister_time\nlast_login\ngroups\n\ngroup 表默认创建以下字段\n\nid\nname\nusers\nparent_group\nchild_groups\n\n权限\n使用\nfrom flask_maple.permission.models import PermissionMixin\n\nclass Permission(db.Model, PermissionMixin):\n    pass\n\nuser 表与 group 表可继承 flask_maple.permission.models.UserMixin 与 flask_maple.permission.models.GroupMixin或者直接使用 flask_maple.auth.models.UserMixin 与 flask_maple.auth.models.GroupMixin\n\n\n添加权限\nidentity = user # or group\nidentity.add_perm(\n    action,\n    resource,\n    resource_type='endpoint',\n    description=None)\n\n\n\n删除权限\nidentity.remove_perm(\n    action,\n    resource,\n    resource_type='endpoint')\n\n\n\n检查权限\nidentity.has_perm(action, resource, resource_type='endpoint', and_=False)\n\n\n\n权限缓存\n默认权限会从数据库获取, 如果经常使用，可自行添加缓存, 并在添加删除权限后自行对缓存进行操作\nclass User(db.Model, UserMixin):\n    def perm_cache(self,\n                   action,\n                   resource,\n                   resource_type='endpoint',\n                   and_=False):\n        return\n\n登录\n依赖于 flask-login, flask-mail\n使用\nfrom flask_maple import auth\n\nauth.init_app(app)\n\n# 或者\nfrom flask_maple.auth.views import Auth\n\nAuth(app)\n\n将会创建6个 url\n\n/login\n/logout\n/register\n/forget\n/confirm\n/confirm/<token>\n\n可以自定义登陆，注册，忘记密码页面，以登陆页面为例 (templates/maple/login.html)\n{% extends \"base/base.html\" %}\n{%- block content -%}\n{% import 'maple/auth.html' as auth %}\n<div class=\"panel panel-primary\">\n    <div class=\"panel-heading\">\n        <a href=\"{{ url_for('auth.login') }}\" style=\"color:#fff\">{{ _('Login')}}</a>\n    </div>\n    <div class=\"panel-body\">\n        {{ auth.login()}}\n    </div>\n</div>\n{% endblock %}\n\n注意事项\n登陆与登出默认使用 user.login(remember) , user.logout(), 如果未使用 flask_maple/auth/model.py 中的 UserMixin,则需要自己定义\n验证码\n使用 Pillow 生成验证码\npip install pillow\n\n使用\nfrom flask_maple import Captcha\ncaptcha = Captcha(app)\n\n# 因为字体可能存在版权问题，所以需要指定自己服务器字体, 默认为 /usr/share/fonts/TTF/DejaVuSans.ttf\ncaptcha = Captcha(app, font=\"\")\n\n然后访问 http://127.0.0.1/captcha\n配置\nCAPTCHA_URL = \"The captcha url,default 'captcha'\"\n\n错误处理\n主要是对发生错误时的页面进行定制(403,404,500)\nfrom flask_maple import Error\nerror = Error(app)\n\n定制图片源于flask官网,侵删\n邮箱\n依赖于 flask-mail, 区别使用多线程发送\nfrom flask_maple.mail import Mail\n\nmail = Mail(app)\nmail.send_email(*args, **kwargs)\n\n此外，还有一个 MailMixin,实现了邮箱验证需要的密钥,\nfrom flask_maple.mail import MailMixin\n\nclass User(db.Model, MailMixin):\n    pass\n\nprint(user.email_token)\nprint(User.check_email_token(token, max_age=259200))\n\n数据库\n像django一样使用 flask-sqlalchemydjang orm 与sqlalchemy相比,为什么很多人都认为django orm更好用,大概就是因为django orm更方便\n基本查询(已实现)\n\ngt\nlt\nlte\ngte\ncontains\nin\nexact\niexact\nstartswith\nistartswith\niendswith\nendswith\nisnull\nrange\nyear\nmonth\nday\n\n示例:\nPost.query.filter_by(title__contains = 'sql').all()\nPost.query.exclude_by(title__contains = 'sql').all()\n\n关系查询\nPost.query.filter_by(tags__name__contains = 'sql').all()\n\n其它\nPost.query.filter_by(tags__name__contains = 'sql').or(Post.id == 1,Post.id == 2).all()\nPost.query.filter_by(tags__name__contains = 'sql').and(Post.id == 1,Post.id == 2).all()\nPost.query.filter_by(tags__name__contains = 'sql').exists()\nPost.query.load_only('title')\n\n\n序列化\n把 sqlalchemy 对象序列化为 json, 使用方法参考于 django rest framework\n多个实例\nfrom flask_maple.serializer import Serializer\n\nposts = Post.query.all()\nserializer = Serializer(posts)\ndata = serializer.data\n\n单个实例\npost = Post.query.first()\nserializer = Serializer(post)\ndata = serializer.data\n\n排除字段\nserializer = Seralizer(post,exclude=['title'])\n\n仅包括字段\nserializer = Seralizer(post,include=['title'])\n\n关系查询深度\nserializer = Seralizer(post,depth=3)\n\ndepth默认为2\n额外的字段\nclass Post(Model):\n    ......\n    def get_post_count(self):\n        return 11\n\nserializer = Serializer(post,extra=['get_post_count'])\n\n自定义\nfrom flask_maple.serializer import Serializer\n\nclass PostSerializer(Serializer):\n    class Meta:\n        include = []\n        depth = 2\n        include = []\n        exclude = []\n        extra = ['count']\n\nserializer = PostSerializer(post,include=['title'])\n\n中间件\n参考于 django\nfrom flask_maple.middleware import Middleware\n\napp = ...\nMiddleware(app)\n\n中间件写法(以一个简单的性能测试中间件为例)\nclass ProfileMiddleware(object):\n    def preprocess_request(self):\n        pr = cProfile.Profile()\n        pr.enable()\n        request.pr = pr\n\n    def process_response(self, response):\n        pr = request.pr\n        pr.disable()\n        s = StringIO()\n        sortby = 'cumulative'\n        ps = pstats.Stats(pr, stream=s).sort_stats(sortby)\n        ps.print_stats()\n        print(s.getvalue())\n        return response\n\n重要 ，需要加入中间件配置\nMIDDLEWARE = [\"path.to.ProfileMiddleware\"]\n\n日志\n记录 info 和 error 两个日志level, 使用很简单\nfrom flask_maple.log import Logging\n\napp = ...\nLogging(app)\n\n配置文件\nLOGGING = {\n    'info': 'logs/info.log',   # 记录info level的日志,与配置文件同级下的logs目录,可修改\n    'error': 'logs/error.log', # 记录error level的日志\n    'send_mail': False,        # 当有错误发生时，是否发送邮件到管理员邮箱\n    'toaddrs': [],             # 管理员邮箱，可为多个\n    'subject': 'Your Application Failed',\n    'formatter': '''\n            Message type:       %(levelname)s\n            Location:           %(pathname)s:%(lineno)d\n            Module:             %(module)s\n            Function:           %(funcName)s\n            Time:               %(asctime)s\n\n            Message:\n\n            %(message)s\n            '''\n}\n\n当send_mail为 True时, 配置依赖于 flask_mail的配置(主要是不想写多份)\nMAIL_USERNAME\nMAIL_PASSWORD\nMAIL_SERVER\nMAIL_PORT\nMAIL_DEFAULT_SENDER\n\nApp\n创建两个常用的 url\n\n/robots.txt\n/favicon.ico\n\n使用\nfrom flask_maple.app import App\n\nApp(app)\n\n此外,因为国际化等原因,可以传递 flask_maple.json.CustomJSONEncoder 给App\nfrom flask_maple.app import App\nfrom flask_maple.json import CustomJSONEncoder\n\nApp(app, json=CustomJSONEncoder)\n\n配置\n参考于 django,可以懒加载 blueprint\nINSTALLED_APPS = [\n    \"path.to.blueprint1\",\n    \"path.to.blueprint2\",\n    {\n        \"kwargs\":{},\n        \"blueprint\":{}\n    }\n]\n\nBootstrap\n主要是个人经常使用的一些模板,比如bootstrap的js,css文件，分页模板, 上下撑满等并依赖于 flask-assets ,对js,css文件进行压缩\n使用\nfrom flask_maple import Bootstrap\nbootstrap = Bootstrap(\n    app,\n    css=('styles/monokai.css', 'styles/mine.css'),\n    js=('styles/upload.js', 'styles/forums.js', 'styles/following.js',\n        'styles/topic.js'),\n    use_auth=True)\n\n或者\nbootstrap = Bootstrap()\nbootstrap.init_app(app)\n\n模板\n{% extends 'maple/base.html' %}\n{% block main -%}\n<button class=\"btn btn-primary\">submit</button>\n<span class=\"glyphicon glyphicon-search\" aria-hidden=\"true\"></span>\n{% endblock -%}\n\n\n配置\nAUTHOR_NAME = \"This will show you name at html footer\"\n\nRedis\n默认会加载 rediscluster.StrictRedisCluster ,如果rediscluster未安装则加载 redis.StrictRedis\n使用\nfrom flask_maple.redis import Redis\n\nredis = Redis(app)\n\n# 像平时使用redispy一样使用\nprint(redis.get(...))\n\n配置\nREDSI = {...}\n\n具体例子可查看maple-bbs/extension\nGithub  原文\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "3"}