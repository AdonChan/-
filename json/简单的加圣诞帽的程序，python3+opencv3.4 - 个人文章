{"title": "简单的加圣诞帽的程序，python3+opencv3.4 - 个人文章 ", "index": "python", "content": "简单的加圣诞帽的程序，python3+opencv3.4\n\n1月6号更新，在自己写完这个博客之后，女朋友发给我一个微信公众号，里面也同样推送了如何使用python写添加圣诞帽的程序，而且用了一个小技巧可以进行随机添加，同时还给我了我一张30多个人的图像让我全部添加，稍微了解一下opencv人脸检测，是默认检测所有人脸的，因此对代码有了很小的改动就完成了需求，以下\n# OpenCV 人脸检测\nface_patterns = cv2.CascadeClassifier('D:\\\\opencv3.0\\\\opencv\\\\sources\\\\data\\\\haarcascades\\\\haarcascade_frontalface_default.xml')\nsample_image = cv2.imread('C:\\\\Users\\\\Elam\\\\Desktop\\\\tttt.jpg')\nfaces = face_patterns.detectMultiScale(sample_image,\n                                       scaleFactor=1.1,\n                                       minNeighbors=10,\n                                       minSize=(10, 10))\n# 圣诞帽\nhats = []\nfor i in range(6):\n    hats.append(cv2.imread('C:\\\\Users\\\\Elam\\\\Desktop\\\\%d.png' % i, -1))\n\nfor face in faces:\n    # 随机一顶帽子\n    hat = random.choice(hats)\n    #下面就是之前的添加算法\n    。。。。。。。。\n    \n    \n    #########\n最最最最简单的加圣诞帽的程序，python3+opencv3.4\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Mon Dec 25 15:22:14 2017\n\n@author: Elam\n\"\"\"\n\nimport cv2\nimport numpy as np\nface_patterns = cv2.CascadeClassifier('D:\\\\opencv3.0\\\\opencv\\\\sources\\\\data\\\\haarcascades\\\\haarcascade_frontalface_default.xml')\nsample_image = cv2.imread('C:\\\\Users\\\\Elam\\\\Desktop\\\\llll.jpg')\nhat=cv2.imread('C:\\\\Users\\\\Elam\\\\Desktop\\\\lvse.png',cv2.IMREAD_UNCHANGED)\na,b,c,d=cv2.split(hat)\nrgb_hat=cv2.merge((a,b,c))\nsample_wh=sample_image.shape\ntemp=float(sample_wh[1]/sample_wh[0])\ntemp_h=int(1024*temp)\nsample_image_res=cv2.resize(sample_image,(temp_h,1024),interpolation=cv2.INTER_CUBIC)\nfaces = face_patterns.detectMultiScale(sample_image_res,scaleFactor=1.1,minNeighbors=5,minSize=(60, 60))\nk_w=faces[0][2]\nk_h=faces[0][3]\n\n#####hat\nhat_wh=rgb_hat.shape\ntemp_hat=float(hat_wh[1]/hat_wh[0])\n#####改变帽子大小######\ntemp_hat_h=int((k_w)*4/5*temp_hat)\ntemp_hat_w=int(k_w*3/5)\n###################\n\n\n\nres=cv2.resize(rgb_hat,(temp_hat_h,temp_hat_w),interpolation=cv2.INTER_CUBIC)\nres_d=cv2.resize(d,(temp_hat_h,temp_hat_w),interpolation=cv2.INTER_CUBIC)\n#hsv=cv2.cvtColor(res,cv2.COLOR_BGR2HSV)\n#lower_blue=np.array([0,0,0])\n#upper_blue=np.array([255,255,253])\n#mask = cv2.inRange(hsv, lower_blue, upper_blue)\n#erode=cv2.erode(mask,None,iterations=2)\n#dilate=cv2.dilate(erode,None,iterations=2)\n\n\n####改变帽子位置#####\nx_new=faces[0][0]+int(k_w/6)\ny_new=faces[0][1]-int(k_h*0.65)\ncenter=[y_new,x_new]#在新背景图片中的位置\nfor i in range(temp_hat_w):\n    for j in range(temp_hat_h):\n        if res_d[i,j]!=0:#0代表黑色的点\n            sample_image_res[center[0]+i,center[1]+j]=res[i,j]#此处替换颜色，为BGR通道\n######################\n\n#cv2.imshow('Mask', mask)\n#res=cv2.resize(hat,(182,220),interpolation=cv2.INTER_CUBIC)\n#WH=res.shape\n#mask=cv2.imread('C:\\\\Users\\\\Elam\\\\Desktop\\\\hat.jpg',0)\n\n#imgROI=sample_image[10:192,10:230]\n#sample_image[0:220,0:182]=res\nfor (x, y, w, h) in faces:\n    cv2.rectangle(sample_image, (x, y), (x+w, y+h), (0, 255, 0), 2)\ncv2.imwrite('C:\\\\Users\\\\Elam\\\\Desktop\\\\test333333.png', sample_image_res)\n#cv2.imwrite('C:\\\\Users\\\\Elam\\\\Desktop\\\\hattttttt.png', hat)\n\n写完才感觉真的很蠢，直接使用了opencv自带的人脸检测库，起初是利用人脸的黄金分割比例企图对帽子进行定位，后来发现他的人脸检测的框有时候会只检测到眉毛并不会框到额头。另外添加了帽子的自适应大小，帽子会根据所检测到的人脸的区域的大小自行拉伸到合适大小，同时还对图片进行了规范化。现在只能说对大部分比较标准的人脸可以做到帽子位置添加正确。实际上还试过有背景的帽子图片，做了很多掩膜提取的工作，但是效果都不是很好，最后还是去找了png格式的帽子图片。以下是随手测试的几张人脸效果\n如有侵权请留言，我会删除。\n\n\n                ", "mainLikeNum": ["6 "], "mainBookmarkNum": "9"}