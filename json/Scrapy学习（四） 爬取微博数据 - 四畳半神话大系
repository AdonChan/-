{"title": "Scrapy学习（四） 爬取微博数据 - 四畳半神话大系 ", "index": "scrapy,网页爬虫,python", "content": "前言\nScrapy学习（三） 爬取豆瓣图书信息\n接上篇之后。这次来爬取需要登录才能访问的微博。爬虫目标是获取用户的微博数、关注数、粉丝数。为建立用户关系图(尚未实现)做数据储备\n准备\n\n安装第三方库requests和pymongo\n安装MongoDB\n创建一个weibo爬虫项目\n\n如何创建Scrapy项目之前文章都已经提到了，直接进入主题。\n创建Items\nItem数据这部分我只需要个人信息，微博数，关注数、分数数这些基本信息就行。\n\nclass ProfileItem(Item):\n    \"\"\"\n    账号的微博数、关注数、粉丝数及详情\n    \"\"\"\n    _id = Field()\n    nick_name = Field()\n    profile_pic = Field()\n    tweet_stats = Field()\n    following_stats = Field()\n    follower_stats = Field()\n    sex = Field()\n    location = Field()\n    birthday = Field()\n    bio = Field()\n    \nclass FollowingItem(Item):\n    \"\"\"\n    关注的微博账号\n    \"\"\"\n    _id = Field()\n    relationship = Field()\n\nclass FollowedItem(Item):\n    \"\"\"\n    粉丝的微博账号\n    \"\"\"\n    _id = Field()\n    relationship = Field()\n编写Spider\n为了方便爬虫，我们选择登陆的入口是手机版的微博http://weibo.cn/。其中微博的uid可以通过访问用户资料页或者从关注的href属性中获取\nclass WeiboSpiderSpider(scrapy.Spider):\n    name = \"weibo_spider\"\n    allowed_domains = [\"weibo.cn\"]\n    url = \"http://weibo.cn/\"\n    start_urls = ['2634877355',...] # 爬取入口微博ID\n    task_set = set(start_urls) # 待爬取集合\n    tasked_set = set() # 已爬取集合\n    ...   \n    \n    def start_requests(self):\n        while len(self.task_set) > 0 :\n            _id = self.task_set.pop()\n            if _id in self.tasked_set:\n                raise CloseSpider(reason=\"已存在该数据 %s \"% (_id) )\n            self.tasked_set.add(_id)\n            info_url = self.url + _id\n            info_item = ProfileItem()\n            following_url = info_url + \"/follow\"\n            following_item = FollowingItem()\n            following_item[\"_id\"] = _id\n            following_item[\"relationship\"] = []\n            follower_url = info_url + \"/fans\"\n            follower_item = FollowedItem()\n            follower_item[\"_id\"] = _id\n            follower_item[\"relationship\"] = []\n            yield scrapy.Request(info_url, meta={\"item\":info_item}, callback=self.account_parse)\n            yield scrapy.Request(following_url, meta={\"item\":following_item}, callback=self.relationship_parse)\n            yield scrapy.Request(follower_url, meta={\"item\":follower_item}, callback=self.relationship_parse)\n\n    def account_parse(self, response):\n        item = response.meta[\"item\"]\n        sel = scrapy.Selector(response)\n        profile_url = sel.xpath(\"//div[@class='ut']/a/@href\").extract()[1]\n        counts = sel.xpath(\"//div[@class='u']/div[@class='tip2']\").extract_first()\n        item['_id'] = re.findall(u'^/(\\d+)/info',profile_url)[0]\n        item['tweet_stats'] = re.findall(u'微博\\[(\\d+)\\]', counts)[0]\n        item['following_stats'] = re.findall(u'关注\\[(\\d+)\\]', counts)[0]\n        item['follower_stats'] = re.findall(u'粉丝\\[(\\d+)\\]', counts)[0]\n        if int(item['tweet_stats']) < 4500 and int(item['following_stats']) > 1000 and int(item['follower_stats']) < 500:\n            raise CloseSpider(\"僵尸粉\")\n        yield scrapy.Request(\"http://weibo.cn\"+profile_url, meta={\"item\": item},callback=self.profile_parse)\n\n    def profile_parse(self,response):\n        item = response.meta['item']\n        sel = scrapy.Selector(response)\n        info = sel.xpath(\"//div[@class='tip']/following-sibling::div[@class='c']\").extract_first()\n        item[\"profile_pic\"] = sel.xpath(\"//div[@class='c']/img/@src\").extract_first()\n        item[\"nick_name\"] = re.findall(u'昵称:(.*?)<br>',info)[0]\n        item[\"sex\"] = re.findall(u'性别:(.*?)<br>',info) and re.findall(u'性别:(.*?)<br>',info)[0] or ''\n        item[\"location\"] = re.findall(u'地区:(.*?)<br>',info) and re.findall(u'地区:(.*?)<br>',info)[0] or ''\n        item[\"birthday\"] = re.findall(u'生日:(.*?)<br>',info) and re.findall(u'生日:(.*?)<br>',info)[0] or ''\n        item[\"bio\"] = re.findall(u'简介:(.*?)<br>',info) and re.findall(u'简介:(.*?)<br>',info)[0] or ''\n        yield item\n\n    def relationship_parse(self, response):\n        item = response.meta[\"item\"]\n        sel = scrapy.Selector(response)\n        uids = sel.xpath(\"//table/tr/td[last()]/a[last()]/@href\").extract()\n        new_uids = []\n        for uid in uids:\n            if \"uid\" in uid:\n                new_uids.append(re.findall('uid=(\\d+)&',uid)[0])\n            else:\n                try:\n                    new_uids.append(re.findall('/(\\d+)', uid)[0])\n                except:\n                    print('--------',uid)\n                    pass\n        item[\"relationship\"].extend(new_uids)\n        for i in new_uids:\n            if i not in self.tasked_set:\n                self.task_set.add(i)\n        next_page = sel.xpath(\"//*[@id='pagelist']/form/div/a[text()='下页']/@href\").extract_first()\n        if next_page:\n            yield scrapy.Request(\"http://weibo.cn\"+next_page, meta={\"item\": item},callback=self.relationship_parse)\n        else:\n            yield item\n\n代码中值得注意的地方有几个。\nstart_url\n这里我们填写的是微博的uid，有的用户有自定义域名（如上图），要访问后才能得到真正的uidstart_url  填写的初始种子数要在10个以上。这是为了确保后面我们爬取到的新的种子能够加入到待爬取的队列中。10个以上的规定是从Scrapy文档中查得的\n\nREACTOR_THREADPOOL_MAXSIZE\nDefault: 10线程数是Twisted线程池的默认大小(The maximum limit for Twisted Reactor thread pool size.)\n\nCloseSpider\n当遇到不需要的继续爬取的连接时(如已经爬取过的链接，定义的僵尸粉链接等等)，就可以用CloseSpider关闭当前爬虫线程\n编写middlewares\nclass CookiesMiddleware(object):\n    \"\"\" 换Cookie \"\"\"\n\n    def process_request(self, request, spider):\n        cookie = random.choice(cookies)\n        request.cookies = cookie\n编写cookie的获取方法\n这里我原本是想用手机版的微博去模拟登陆的，奈何验证码是在是太难搞了。所以我直接用网上有人编写好的登陆网页版微博的代码SinaSpider 这位写的很好，有兴趣的可以去看看。其中还有另一位写了模拟登陆（带验证码） 经测试可用。只不过我还没想好怎么嵌入到我的项目中。\n# encoding=utf-8\nimport json\nimport base64\nimport requests\n\nmyWeiBo = [\n    {'no': 'xx@sina.com', 'psw': 'xx'},\n    {'no': 'xx@qq.com', 'psw': 'xx'},\n]\n\n\ndef getCookies(weibo):\n    \"\"\" 获取Cookies \"\"\"\n    cookies = []\n    loginURL = r'https://login.sina.com.cn/sso/login.php?client=ssologin.js(v1.4.15)'\n    for elem in weibo:\n        account = elem['no']\n        password = elem['psw']\n        username = base64.b64encode(account.encode('utf-8')).decode('utf-8')\n        postData = {\n            \"entry\": \"sso\",\n            \"gateway\": \"1\",\n            \"from\": \"null\",\n            \"savestate\": \"30\",\n            \"useticket\": \"0\",\n            \"pagerefer\": \"\",\n            \"vsnf\": \"1\",\n            \"su\": username,\n            \"service\": \"sso\",\n            \"sp\": password,\n            \"sr\": \"1440*900\",\n            \"encoding\": \"UTF-8\",\n            \"cdult\": \"3\",\n            \"domain\": \"sina.com.cn\",\n            \"prelt\": \"0\",\n            \"returntype\": \"TEXT\",\n        }\n        session = requests.Session()\n        r = session.post(loginURL, data=postData)\n        jsonStr = r.content.decode('gbk')\n        info = json.loads(jsonStr)\n        if info[\"retcode\"] == \"0\":\n            print(\"Get Cookie Success!( Account:%s )\" % account)\n            cookie = session.cookies.get_dict()\n            cookies.append(cookie)\n        else:\n            print(\"Failed!( Reason:%s )\" % info[\"reason\"].encode(\"utf-8\"))\n    return cookies\n\ncookies = getCookies(myWeiBo)\n\n登陆-反爬虫的这部分应该是整个项目中最难的地方了。好多地方我都还不太懂。以后有空在研究\n编写pipelines\n这边只需要主要什么类型的Item存到那张表里就行了\nclass MongoDBPipeline(object):\n    def __init__(self):\n        connection = MongoClient(\n            host=settings['MONGODB_SERVER'],\n            port=settings['MONGODB_PORT']\n        )\n        db = connection[settings['MONGODB_DB']]\n        self.info = db[settings['INFO']]\n        self.following = db[settings['FOLLOWING']]\n        self.followed = db[settings['FOLLOWED']]\n\n    def process_item(self, item, spider):\n\n        if isinstance(item, ProfileItem):\n            self.info.insert(dict(item))\n        elif isinstance(item, FollowingItem):\n            self.following.insert(dict(item))\n        elif isinstance(item, FollowedItem):\n            self.followed.insert(dict(item))\n        log.msg(\"Weibo  added to MongoDB database!\",\n                level=log.DEBUG, spider=spider)\n        return item\n运行一下程序，就能看到MongoDB中有了我们要的数据了\n总结\n\nsettings中的DOWNLOAD_DELAY设置5才能防止被微博BAN掉\n尝试在利用cookies登陆失败时使用模拟登陆，但是效果很不理想\n尝试用代理IP池反爬虫，但是尝试失败主要是不太会\n未来将利用D3.js将爬到的数据绘制出来(或许吧)\n\n项目地址：weibo_spider\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "5"}