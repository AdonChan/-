{"title": "python 二叉树深度优先搜索和广度优先搜索 - 个人文章 ", "index": "python", "content": "class TreeNode:\ndef __init__(self, value=None, left=None, right=None):\n    self.value = value\n    self.left = left  # 左子树\n    self.right = right  # 右子树\n\n\nnode1 = TreeNode(\"A\",\n             TreeNode(\"B\",\n                      TreeNode(\"D\"),\n                      TreeNode(\"E\")\n                      ),\n             TreeNode(\"C\",\n                      TreeNode(\"F\"),\n                      TreeNode(\"G\")\n                      )\n             )\n\n\ndef preTraverse(root):\nif root is None:\n    return\nprint(root.value)\npreTraverse(root.left)\npreTraverse(root.right)\n\n\ndef midTraverse(root):\nif root is None:\n    return\nmidTraverse(root.left)\nprint(root.value)\nmidTraverse(root.right)\n\n\ndef afterTraverse(root):\nif root is None:\n    return\nafterTraverse(root.left)\nafterTraverse(root.right)\nprint(root.value)\n\n\ndef dfs(root):\nres = []\nif root is None:\n    return res\nq = []\nq.append(root)\nwhile len(q) > 0:\n    r = q.pop()\n    print(r.value)\n    if r.left is not None:\n        # 非空左孩子入队\n        q.append(r.left)\n    if r.right is not None:\n        # 非空右孩子入队\n        q.append(r.right)\n    res.append(r.value)\nreturn res\n\ndef bfs(root):\n# write your code here\nres = []\n# 如果根节点为空，则返回空列表\nif root is None:\n    return res\n# 模拟一个队列储存节点\nq = []\n# 首先将根节点入队\nq.append(root)\n# 列表为空时，循环终止\nwhile len(q) > 0:\n    length = len(q)\n    r = q.pop(0)\n    print(r.value)\n    if r.left is not None:\n        # 非空左孩子入队\n        q.append(r.left)\n    if r.right is not None:\n        # 非空右孩子入队\n        q.append(r.right)\n    res.append(r.value)\nreturn res\n\n\ndfs(node1)print(\"-------------------\")bfs(node1)\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}