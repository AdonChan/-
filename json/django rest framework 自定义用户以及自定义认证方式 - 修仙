{"title": "django rest framework 自定义用户以及自定义认证方式 - 修仙 ", "index": "django,python,django-rest-framework", "content": "自定义一个用户很简单models.py\nfrom django.db import models\nfrom django.contrib.auth.models import (\n    BaseUserManager, AbstractBaseUser\n)\n\nclass MyUserManager(BaseUserManager):\n    def create_user(self, email, date_of_birth, password=None):\n        \"\"\"\n        Creates and saves a User with the given email, date of\n        birth and password.\n        \"\"\"\n        if not email:\n            raise ValueError('Users must have an email address')\n\n        user = self.model(\n            email=self.normalize_email(email),\n            date_of_birth=date_of_birth,\n        )\n\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n\n    def create_superuser(self, email, date_of_birth, password):\n        \"\"\"\n        Creates and saves a superuser with the given email, date of\n        birth and password.\n        \"\"\"\n        user = self.create_user(\n            email,\n            password=password,\n            date_of_birth=date_of_birth,\n        )\n        user.is_admin = True\n        user.save(using=self._db)\n        return user\n               \nclass MyUser(AbstractBaseUser):\n    email = models.EmailField(\n        verbose_name='email address',\n        max_length=255,\n        unique=True,\n    )\n    date_of_birth = models.DateField()\n    is_active = models.BooleanField(default=True)\n    is_admin = models.BooleanField(default=False)\n\n    objects = MyUserManager()\n\n    USERNAME_FIELD = 'email'\n    REQUIRED_FIELDS = ['date_of_birth']\n\n    def get_full_name(self):\n        # The user is identified by their email address\n        return self.email\n\n    def get_short_name(self):\n        # The user is identified by their email address\n        return self.email\n\n    def __str__(self):              # __unicode__ on Python 2\n        return self.email\n\n    def has_perm(self, perm, obj=None):\n        \"Does the user have a specific permission?\"\n        # Simplest possible answer: Yes, always\n        return True\n\n    def has_module_perms(self, app_label):\n        \"Does the user have permissions to view the app `app_label`?\"\n        # Simplest possible answer: Yes, always\n        return True\n\n    @property\n    def is_staff(self):\n        \"Is the user a member of staff?\"\n        # Simplest possible answer: All admins are staff\n        return self.is_admin\n然后是admin.py\nclass UserAdmin(BaseUserAdmin):\n    # The forms to add and change user instances\n    form = UserChangeForm\n    add_form = UserCreationForm\n\n    # The fields to be used in displaying the User model.\n    # These override the definitions on the base UserAdmin\n    # that reference specific fields on auth.User.\n    list_display = ('email', 'date_of_birth', 'is_admin')\n    list_filter = ('is_admin',)\n    fieldsets = (\n        (None, {'fields': ('email', 'password')}),\n        ('Personal info', {'fields': ('date_of_birth',)}),\n        ('Permissions', {'fields': ('is_admin',)}),\n    )\n    # add_fieldsets is not a standard ModelAdmin attribute. UserAdmin\n    # overrides get_fieldsets to use this attribute when creating a user.\n    add_fieldsets = (\n        (None, {\n            'classes': ('wide',),\n            'fields': ('email', 'date_of_birth', 'password1', 'password2')}\n        ),\n    )\n    search_fields = ('email',)\n    ordering = ('email',)\n    filter_horizontal = ()\n\n# Now register the new UserAdmin...\nadmin.site.register(MyUser, UserAdmin)\n# ... and, since we're not using Django's built-in permissions,\n# unregister the Group model from admin.\nadmin.site.unregister(Group)\n最后是settings.py\nAUTH_USER_MODEL = 'customauth.MyUser'\nAUTHENTICATION_BACKENDS = (\n    'accounts.backends.LoginBackend',\n)\n这样一个自定义的用户模型就弄好了，接下来是自定义登录字段\nclass LoginBackend(object):\n    def authenticate(self, username=None, password=None):\n        if username:\n            #email\n            if re.match(\"^.+\\\\@(\\\\[?)[a-zA-Z0-9\\\\-\\\\.]+\\\\.([a-zA-Z]{2,3}|[0-9]{1,3})(\\\\]?)$\", username) != None:\n                try:\n                    user = User.objects.get(email=username)\n                    if user.check_password(password):\n                        return user\n                except User.DoesNotExist:\n                    return None\n            #mobile\n            elif len(username)==11 and re.match(\"^(1[3458]\\d{9})$\", username) != None:\n                try:\n                    user = User.objects.get(mobile=username)\n                    if user.check_password(password):\n                        return user\n                except User.DoesNotExist:\n                    return None  \n            #nick\n            else:\n                try:\n                    user = User.objects.get(username=username)\n                    if user.check_password(password):\n                        return user\n                except User.DoesNotExist:\n                    return None                \n        else:\n            return None\n\n    def get_user(self, user_id):\n        try:\n            return User.objects.get(pk=user_id)\n        except User.DoesNotExist:\n            return None\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "2"}