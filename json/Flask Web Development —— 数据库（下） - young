{"title": "Flask Web Development —— 数据库（下） - young ", "index": "python,flask,数据库", "content": "9、数据库在视图函数中的使用\n\n在前面章节描述的数据库操作是可以在视图函数中直接使用的。示例5-5展示的新版本主页实现了用户输入名字并保存到数据库中。\n\n示例5-5. hello.py：数据库在视图函数中的使用\n\n@app.route('/', methods=['GET', 'POST']) \ndef index():\n    form = NameForm()\n    if form.validate_on_submit():\n        user = User.query.filter_by(username=form.name.data).first() \n        if user is None:\n            user = User(username = form.name.data)\n            db.session.add(user)\n            session['known'] = False\n        else:\n            session['known'] = True\n        session['name'] = form.name.data \n        form.name.data = ''\n        return redirect(url_for('index'))\n    return render_template('index.html',\n        form = form, name = session.get('name'), known = session.get('known', False))\n\n\n在这个已修改的应用程序版本中，每次提交一个名字应用程序都要使用filter_by()查询过滤器到数据库中检查一遍。known变量被写入到用户会话中，这样在重定向后信息就可以发送到模板来定制问候语。注意为了应用程序可以工作，必须创建好之前在Python shell中展示的那些数据库表。\n\n新版本的相关模板在示例5-6中展示。这个模板使用known参数用于区分是已知用户还是新用户的问候。\n\n{% extends \"base.html\" %}\n{% import \"bootstrap/wtf.html\" as wtf %}\n\n{% block title %}Flasky{% endblock %}\n\n{% block page_content %}\n\n\n<div class=\"page-header\">\n  <h1>Hello, {% if name %}{{ name }}{% else %}Stranger{% endif %}!</h1> \n  {% if not known %}\n  <p>Pleased to meet you!</p>\n  {% else %}\n  <p>Happy to see you again!</p>\n  {% endif %}\n</div>\n\n\n{{ wtf.quick_form(form) }}\n{% endblock %}\n\n\n\n  建议：如果你有克隆在GitHub上的应用程序，你现在可以运行git checkout 5b来切换到这个版本的应用程序。\n\n\n10、与python shell的集成\n\n每次shell会话启动都必须导入数据库实例和模型是非常单调乏味的工作。为了避免不断重复这些导入，可以配置Flask-Script的shell命令来自动导入特定的对象。\n\nshell命令需要注册make_context回调函数来将对象添加到导入列表。如示例5-7所示。\n\n示例5-7. hello.py：增加shell上下文\n\nfrom flask.ext.script import Shell \n\ndef make_shell_context():\n    return dict(app=app, db=db, User=User, Role=Role)\nmanager.add_command(\"shell\", Shell(make_context=make_shell_context))\n\n\nmake_shell_context()函数注册应用程序和数据库的实例及模型，这样就可以自动导入到shell中了：\n\n$ python hello.py shell\n>>> app\n<Flask 'app'>\n>>> db\n<SQLAlchemy engine='sqlite:////home/flask/flasky/data.sqlite'> \n>>> User\n<class 'app.User'>\n\n\n\n  建议：如果你有克隆在GitHub上的应用程序，你现在可以运行git checkout 5c来切换到这个版本的应用程序。\n\n\n11、使用Flask-Migrate迁移数据库\n\n随着开发进度不断向前，你会发现你的数据库模型需要更改，而当这种情况发生时需要更新数据库。\n\nFlask-SQLAlchemy只有当数据库表不存在了才从模型创建它们，所以更新表的唯一途径就是销毁旧的表，当然这将导致所有数据库中的数据丢失。\n\n有个更好的解决方案就是使用数据库迁移框架。和源码版本控制工具跟踪更改源码文件一样，数据库迁移框架跟踪更改数据库模型，然后将增量变化应用到数据库中。\n\nSQLAlchemy的主要开发人员写了一个Alembic迁移框架，但我们不直接使用Alembic，Flask应用可以使用Flask-Migrate扩展，一个集成了Flask-Script来提供所有操作命令的轻量级Alembic包。\n\n11.1、创建迁移仓库\n\n首先，Flask-Migrate必须已经安装到虚拟环境中：\n\n(venv) $ pip install flask-migrate\n\n\n示例5-8展示扩展如何初始化。\n\n示例5-8. hello.py：Flask-Migrate配置\n\nfrom flask.ext.migrate import Migrate, MigrateCommand \n\n# ...\n\nmigrate = Migrate(app, db)\nmanager.add_command('db', MigrateCommand)\n\n\n为了可以使用数据库迁移命令，Flask-Migrate提供MigrateCommand类来连接Flask-Script的manager对象。在这个示例中使用db来连接到命令。\n\n在数据库迁移可以维护之前，必须通过init子命令来创建一个迁移库：\n\n(venv) $ python hello.py db init\n  Creating directory /home/flask/flasky/migrations...done\n  Creating directory /home/flask/flasky/migrations/versions...done\n  Generating /home/flask/flasky/migrations/alembic.ini...done\n  Generating /home/flask/flasky/migrations/env.py...done\n  Generating /home/flask/flasky/migrations/env.pyc...done\n  Generating /home/flask/flasky/migrations/README...done\n  Generating /home/flask/flasky/migrations/script.py.mako...done\n  Please edit configuration/connection/logging settings in\n  '/home/flask/flasky/migrations/alembic.ini' before proceeding.\n\n\n这个命令创建一个migrations文件夹，里面存放了所有迁移脚本。\n\n\n  建议：如果你有克隆在GitHub上的应用程序，你现在可以运行git checkout 5c来切换到这个版本的应用程序。\n\n\n11.2、创建迁移脚本\n\n在Alembic，数据库迁移工作由迁移脚本完成。这个脚本有两个函数，分别叫做upgrade()和downgrade()。upgrade()函数实施数据库更改，是迁移的一部分，downgrade()函数则删除它们。通过添加和删除数据库变化的能力，Alembic可以重新配置数据库从历史记录中的任何时间点。\n\nAlembic迁移可以分别使用revision和migrate命令手动或自动创建。手动迁移通过由开发人员使用Alembic的Operations对象指令实现的空upgrade()和downgrade()函数创建迁移框架脚本。另一方面，自动迁移通过寻找模型定义和数据库当前状态间的不同为upgrade()和downgrade()生成代码。\n\n\n  警告：自动迁移并不总是准确的，可以忽略一些细节。所以应该经常审查一下自动生成的迁移脚本。\n\n\nmigrate子命令创建自动迁移脚本：\n\n(venv) $ python hello.py db migrate -m \"initial migration\"\nINFO  [alembic.migration] Context impl SQLiteImpl.\nINFO  [alembic.migration] Will assume non-transactional DDL.\nINFO  [alembic.autogenerate] Detected added table 'roles'\nINFO  [alembic.autogenerate] Detected added table 'users'\nINFO  [alembic.autogenerate.compare] Detected added index\n'ix_users_username' on '['username']'\n  Generating /home/flask/flasky/migrations/versions/1bc\n  594146bb5_initial_migration.py...done\n\n\n\n  建议：如果你有克隆在GitHub上的应用程序，你现在可以运行git checkout 5c来切换到这个版本的应用程序。注意，你不需要为这个应用生成migrations，所有的迁移脚本都包含在版本库中。\n\n\n11.3、更新数据库\n\n一旦迁移脚本被审查且接受，就可以使用db upgrade命令更新到数据库中：\n\n(venv) $ python hello.py db upgrade\nINFO  [alembic.migration] Context impl SQLiteImpl.\nINFO  [alembic.migration] Will assume non-transactional DDL.\nINFO  [alembic.migration] Running upgrade None -> 1bc594146bb5, initial migration\n\n\n第一次迁移实际上相当于调用db.create_all()，但在后续迁移中，upgrade命令对表实施更新操作但不影响表中的内容。\n\n数据库的设计和使用是非常重要的，事实上整本书都是围绕这个主题来写的。你应该把本章作为一个概述来研究；更高级的主题将在以后的章节中讨论。下一章致力于讲解发送电子邮件。\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "13"}