{"title": "Python每日一练0006 - python每日练习 ", "index": "python3.x,python", "content": "问题\n在某个集合中找到最大或最小的N个元素\n解决方案\n使用heapq模块\nheapq.nlargest(n, iterable, key=None)heapq.nsmallest(n, iterable, key=None)\n\n例如：\n>>> import heapq\n>>> l = [9, -2, 0, 8, 1, 3]\n>>> print(heapq.nlargest(2, l))\n[9, 8]\n>>> print(heapq.nsmallest(2, l))\n[-2, 0]\n此外，这两个函数都可以接受key作为参数，例如：\nimport heapq\nfruits = [\n    {'name': 'orange', 'price': 5},\n    {'name': 'apple', 'price': 2},\n    {'name': 'pear', 'price': 1.5},\n    {'name': 'lemon', 'price': 3},\n]\nprint(heapq.nlargest(2, fruits, key=lambda x: x['price']))\n输出为：\n[{'name': 'orange', 'price': 5}, {'name': 'lemon', 'price': 3}]\n讨论\n根据Python3官方文档对heapq的介绍可以了解到\nheapq提供了堆数据结构的实现，并且实现方式是小顶堆，也就是说每次pop的时候取出的是最小的元素\n首先使用heapq.heapify将一个列表初始化为堆\n>>> import heapq\n>>> l = [-1, 2, 5, 0, 8]\n>>> heapq.heapify(l)\n>>> print(l)\n[-1, 0, 5, 2, 8]\n然后就可以调用heapq.heappush和heapq.heappop对堆进行增加和删除操作了\n>>> heapq.heappush(l, 8)\n>>> print(l)\n[-1, 0, 5, 2, 8, 8]\n>>> print(heapq.heappop(l))\n-1\n此外，heapq还提供了其他堆的一些操作\n\n\nheapq.heappushpop(heap, item)先将item存入堆中，然后弹出最小的元素，相当于先调用了heapq.heappush(item)再调用heapq.heappop()，但这样调用会比分开调用两个函数效率更高\n\nheapq.heapreplace(heap, item)先弹出最小的元素，再存入item\n\n\nheapq.merge(*iterables, key=None, reverse=False)将多个有序的集合合并成一个有序的集合，并且返回的是迭代器对象\n\n来源\nPython Cookbook\n关注\n欢迎关注我的微信公众号：python每日一练\n\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "1"}