{"title": "万物之基础——对象 - Just For Fun ", "index": "programming,python", "content": "原文地址\n对象\n对象(Objects)是python中数据的抽象，python中所有的数据均可以用对象或者是对象之间的关系来表示。每个对象均有标识符(identity)、类型(type)、值(value)。\n\n标识符。对象一旦创建，那么它的标识符就不会改变，可以把标识符看作对象在内存中的地址。_is_ 操作可以用来比较两个对象的标识符，函数_id()_用来返回对象标识符(python中返回对象在内存中的地址)。\n类型。对象的类型也是不可变的，对象的类型决定了该对象支持的操作，另外也决定了该对象可能的值。_type()_函数返回一个对象的类型。\n值。一些对象的值可以改变，我们叫它可变对象，字典和列表均属于可变对象；值不可改变的对象我们叫它不可变对象，数字、字符串、元组均属于不可变对象。\n\npython不像C那样需要显式地回收对象占用的空间，python内核中有垃圾回收机制，当一个对象不可达时，就会交由垃圾回收机制处理。\n一些对象引用了一些外部资源，例如打开的文件或者窗口。通常我们认为当这些对象被垃圾回收机制回收时，它占用的外部资源即被释放。但是，垃圾回收机制并不一定会回收这些对象，因此这些对象提供了显式的方法(通常是_close()_)用来释放外部资源。程序中最好使用显式的方法来释放外部资源，一般可以使用 try...finally 方便地释放。\n造物主：类型！\n对象的类型几乎影响了该对象的所有功能，在某种程度上，对象的标识符也受其类型的影响。\n先看下面的程序：\n>>> sum = 15\n>>> sum_add = 12 + 3\n>>> sum is sum_add\nTrue\n>>> sum = 15000000\n>>> sum_add = 10000000 + 5000000\n>>> sum is sum_add\nFalse\n>>> sum_add == sum\nTrue\n对于不可变对象(这里是int)，当我们需要一个新的对象(sum_add = 12 + 3)时，python可能会返回已经存在的某个类型和值都一致的对象(sum)的引用。当然，这里只是可能会返回已经存在的对象，要看python的具体实现。同样是创建新的对象sum_add = 10000000 + 5000000，python并没有把值和类型都一样的sum返回给sum_add。\n>>> value = []\n>>> value_1 = []\n>>> value is value_1\nFalse\n>>> value == value\nTrue\n>>> value = value_1 = []\n>>> value is value_1\nTrue\n对于可变对象，当我们需要新的对象时，python一定会为我们新建一个。注意，这里value = value_1 = []将会创建一个空的列表对象，然后同时返回给value和value_1。\n扑朔迷离的不可变对象\n首先看下面的代码：\n>>> mutability = [1, 2, 3, 4]\n>>> immutability = (0, mutability, 5)\n>>> immutability\n(0, [1, 2, 3, 4], 5)\n>>> mutability[2] = \"see here!\"\n>>> immutability\n(0, [1, 2, 'see here!', 4], 5)\n这里元组immutability中一个元素为可变对象列表mutability，当我们改变mutability的值时，号称不可变对象的元组的值竟然发生了变化。这又是为什么呢？\n回答这个问题前，先总结下上面这段代码发生了什么：不可变对象A包含了一个对可变对象B的引用，可变对象B的值发生改变时，A的值也会发生改变。\n那么，为什么我们仍认为A是不可变对象呢？因为A仍然包含对象B，而B的标识符并没有发生变化，也就是说A的所有元素的标识符并没有发生变化。其实严格来讲，不可变对象的值是可以改变的，这里是很微妙的哦，需要好好品味。看下面的代码吧：\n>>> mutability = [1, 2, 3, 4]\n>>> id(mutability)\n4394446720\n>>> immutability = (0, mutability, 5)\n>>> id(immutability[1])\n4394446720\n>>> mutability[2] = \"see here!\"\n>>> id(mutability)\n4394446720\n>>> id(immutability[1])\n4394446720\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}