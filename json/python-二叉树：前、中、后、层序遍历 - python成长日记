{"title": "python-二叉树：前、中、后、层序遍历 - python成长日记 ", "index": "数据结构,遍历,二叉树,python", "content": "概要\n本文只实现了二叉树基本的几种遍历，增、删、改、查，预计明天写完，后面的功能也尽量完善\n定义Node数据结构\nclass Node(object):\n    def __init__(self, data):\n        self.data = data\n        self.lft = None #左节点\n        self.rgt = None #右节点\n\n先序遍历\nclass BTree(object):\n    def __init__(self):\n        self._root = None\n        self._size = 0\n\n    def preOrder(self):\n        '''\n        先遍历顺序：\n        1，根节点\n        2，遍历左子树\n        3，遍历右子树\n        '''\n        btree = []\n        \n        def recurse(node):\n            if node != None:\n                btree.append(node.data)\n                recurse(node.lft)\n                recurse(node.rgt)\n        \n        recurse(self._root)\n        return btree\n中序遍历\nclass BTree(object):\n    def __init__(self):\n        self._root = None\n        self._size = 0\n    \n    # 中序遍历\n    def inOrder(self):\n        '''\n        中序遍历顺序：\n        1，遍历左子树\n        2，根节点\n        3，遍历右子树\n        '''\n        btree = []\n        \n        def recurse(node):\n            if node != None:\n                recurse(node.lft)\n                btree.append(node.data)\n                recurse(node.rgt)\n        \n        recurse(self._root)\n        return btree\n后序遍历\nclass BTree(object):\n    def __init__(self):\n        self._root = None\n        self._size = 0\n    \n    # 后序遍历\n    def postOrder(self):\n        '''\n        后序遍历顺序：\n        1，遍历左子树\n        2，遍历右子树\n        3，根节点\n        '''\n        btree = []\n        \n        def recurse(node):\n            if node != None:\n                recurse(node.lft)\n                recurse(node.rgt)\n                btree.append(node.data)\n        \n        recurse(self._root)\n        return btree\n层序遍历\nfrom  collections import deque\n\n\nclass BTree(object):\n    def __init__(self):\n        self._root = None\n        self._size = 0\n    \n    # 层序遍历\n    def leverOrder(self):\n        q = deque()\n        q.append(self._root)\n        btree = []\n        while q:\n            #dque是一个双向队列，先进先出是popleft\n            node = q.popleft()\n            btree.append(node.data)\n            if node.lft:\n                q.append(node.lft)\n            if node.rgt:\n                q.append(node.rgt)\n        return btree\n引用\ngithub 源码Btree源码\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}