{"title": "Python Tricks 若干 - OneAPM 官方技术专栏 ", "index": "python", "content": "在 python 代码中可以看到一些常见的 trick，在这里做一个简单的小结。\n\njson 字符串格式化\n\n在开发 web 应用的时候经常会用到 json 字符串，但是一段比较长的 json 字符串是可读性较差的，不容易看出来里面结构的。 这时候就可以用 python 来把 json 字符串漂亮的打印出来。\n\nroot@Exp-1:/tmp# cat json.txt \n{\"menu\": {\"breakfast\": {\"English Muffin\": {\"price\": 7.5}, \"Bread Basket\": {\"price\": 20, \"desc\": \"Assortment of fresh baked fruit breads and muffins\"}, \"Fruit Breads\": {\"price\": 8}}, \"drink\": {\"Hot Tea\": {\"price\": 5}, \"Juice\": {\"price\": 10, \"type\": [\"apple\", \"watermelon\", \"orange\"]}}}}\nroot@Exp-1:/tmp# \nroot@Exp-1:/tmp# cat json.txt | python -m json.tool\n{\n    \"menu\": {\n        \"breakfast\": {\n            \"Bread Basket\": {\n                \"desc\": \"Assortment of fresh baked fruit breads and muffins\",\n                \"price\": 20\n            },\n            \"English Muffin\": {\n                \"price\": 7.5\n            },\n            \"Fruit Breads\": {\n                \"price\": 8\n            }\n        },\n        \"drink\": {\n            \"Hot Tea\": {\n                \"price\": 5\n            },\n            \"Juice\": {\n                \"price\": 10,\n                \"type\": [\n                    \"apple\",\n                    \"watermelon\",\n                    \"orange\"\n                ]\n            }\n        }\n    }\n}\nroot@Exp-1:/tmp# \n\n\nelse 的妙用\n\n在某些场景下我们需要判断我们是否是从一个 for 循环中 break 跳出来的，并且只针对 break 跳出的情况做相应的处理。这时候我们通常的做法是使用一个 flag 变量来标识是否是从 for 循环中跳出的。 如下面的这个例子，查看在 60 到 80 之间是否存在 17 的倍数。\n\nflag = False\nfor item in xrange(60, 80):\n    if item % 17 == 0:\n        flag = True\n        break\n\nif flag:\n    print \"Exists at least one number can be divided by 17\"\n\n\n其实这时候可以使用 else 在不引入新变量的情况下达到同样的效果\n\nfor item in xrange(60, 80):\n    if item % 17 == 0:\n        flag = True\n        break\nelse:\n    print \"exist\"\n\n\nsetdefault 方法\n\ndictionary 是 python一个很强大的内置数据结构，但是使用起来还是有不方便的地方，比如在多层嵌套的时候我们通常会这么写\n\ndyna_routes = {}\nmethod = 'GET'\nwhole_rule = None\n# 一些其他的逻辑处理\n...\nif method in dyna_routes:\n    dyna_routes[method].append(whole_rule)\nelse:\n    dyna_routes[method] = [whole_rule]\n\n\n其实还有一种更简单的写法可以达到同样的效果\n\n\n  　self.dyna_routes.setdefault(method, []).append(whole_rule)\n\n\n或者可以使用 ｀collections.defaultdict｀ 模块\n\nimport collections\ndyna_routes = collections.defaultdict(list)\n...\ndyna_routes[method].append(whole_rule)\n\n\n\n本文作者系OneAPM 工程师赵斌 ，想阅读更多技术文章，请访问 OneAPM 官方技术博客。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}