{"title": "《Python基础教程第二版》第二章-Python列表和元祖 - 个人文章 ", "index": "python", "content": "序列\n例：\n Edward = ['abc', 12]\n序列中的所有元素都是有编号的，从0开始递增。\nNote: 使用负数索引-1，Python会从右边，也就是从最后一个元素开始计数。最后一个元素的位置编号是-1.\n\n索引操作\n字符串、函数可以直接对返回结果进行操作\n‘hello’[1]\nfo = raw_input('year: ')[2]\n\n分片\n分片通过冒号：隔开两个索引。\n代码：\nnumbers = [1, 2, 3, 4]\nnumber[1:2]\n\n输出:\n[2, 3]\n\n第一个索引：\n提取的第一个元素的编号\n第二个索引：\n分片之后，剩余部分的第一个元素的编号。\nNote：分片第二个索引指向的元素取不到。\n简而言之：\n分片操作的实现需要两个索引作为边界。\n第一个索引元素是包含在分片内的。\n第二个索引元素不在分片内。\n思考：\nnumbers = [1,2,3,4,5,6,7,8,9,10]\n如何访问最后3个元素。\n1.显示操作\nnumbers[7:10]\n#索引10指向第11个元素，第11个元素不存在。为了让分片包含最后一个元素，必须提供最后一个元素的下一个元素的索引作为边界。\n2.从尾开始计数(不可行)\nnumbers[-3:-1]\n#无法访问最后一个元素\n3.使用索引0访问最后一个元素（不可行）\nnumbers[-3:0]\n#只要分片最左的索引比右边的晚出现在序列中，一律返回空序列。\n4.置空最后一个索引（优雅，推荐）\nnumbers[-3:]\n同样适用序列开始的元素：\nnumbers[:3]    \n\n复制序列\n复制整个序列，将两个索引都置空。\nnumber2 = numbers[:]\nnote:\n number2 = numbers\n #不可行，会将number2与numbers指向同一个序列\n\n步长\n第三个参数是步长。Python中默认步长为1.\nnumbers[0:10:2]\n#取步长为2，取间隔为1个元素的分片。\nNote:\n步长不能为0。\n负数步长，分片从右到左提取元素。\n\n序列加法、乘法\nendings = ['st','nd',‘rd’] + 17*['th']\\\n    + ['st','nd',‘rd’] + ['th']*7\n#17*['th']表示17个['th']\n\n空列表、None\n空列表\n[]\n用None初始化\nseq = [None]*10\n\n成员资格\nin运算符：布尔运算符，检查值是否在序列中。\nsubject = '$$$ abssdjk $$$!'   \n'$$$' in subject\n\nusers = ['bob','jack']\nraw_input('your name:') in users\n\n\n长度、最小值和最大值\n内建函数\nlen、min、max\nlen函数\n返回序列中所有包含元素的数量\nmin函数、max函数\n返回序列中最大和最小的元素\n\n\nNote:\n序列包括：\n    列表、字符串、元组\n故：以上序列的特种对于列表字符串和元组都适用。\n\n列表\n列表可以修改：\n\n元素赋值\n元素删除\n分片赋值\n列表方法\n\nlist函数\n用于创建列表，适用于所有类型的序列，例如字符串\n例：\nlist('hello')#根据字符串创建列表['h','e','l','l','o']\n列表转字符串\n''.join(somelist)\n\n列表基本操作\n 1. 元素赋值\n 2. 删除元素\n 3. 分片赋值\n1. 元素赋值\nx = [1,2,3]\nx[1] = 6\n2. 删除元素\nnames = ['bob','jack','afra']\ndel names[2]\n#列表长度减一\n3. 分片赋值\nname = list('afra')\nname[1:] = list('lpha')\n分片赋值：1.可以使用与原序列不等长的序列将分片替换\nname = list('perl')\nname[1:] = list('ython')\n2.可以在不需要替换任何原有元素的情况下插入新元素\nnumber = [1,5]\nnumber[1:1] = [2,3,4]\n3.可以删除元素\nnumber = [1,2,3,4,5]\nnumber[1:4] = []\n列表方法\n方法：\n一个与某些对象有紧密联系的函数。\n方法调用：\n对象.方法(args)\n列表方法\n1.append\n2.count\n3.extend\n4.index\n5.insert\n6.pop\n7.remove\n8.reverse\n9.sort\n10.高级排序\n\n1.append在列表末尾追加新对象，直接修改原列表\nnumber = [1,2,3]\nnumber.append(4)\n2.count统计某个元素在列表中出现的次数\nx = [1,1,2,2,2,3]\nx.count(1)\n3.extend在列表末尾一次性追加另一序列的多个值。即：用新列表扩展原因的列表。Note:\nextend和连接操作'+'的区别：\n    extend方法修改了序列\n    原始的连接操作不修改序列，返回一个全新的列表\n    连接操作效率比extend方法低    \n4.index从列表中找出某个值第一个匹配项的索引位置\nknight = ['hao','a']\nknight.index('hao')\n5.insert将对象插入到列表中。\nnumbers = [1,2,3]\nnumber.insert(3,'four')\n6.pop移除列表中的一个元素（默认最后一个），返回该元素的值。pop方法是唯一修改列表又返回元素值的列表方法。Python中实现栈：，出栈pop，入栈append。\nx[1,2,3,4]\nx.pop()\nx.pop(0)\nNote：在JavaScript中，pop只弹出栈顶值，不会返回栈顶值，可使用top()获取栈顶值\n7.remove移除列表中某个值的第一个匹配项。修改列表，没有返回值。\nx = ['i','want','to','to']\nx.remove('to')\n8.reverse将列表倒置。改变列表，没有返回值。\nx = [1,2,3]\nx.reverse()\n\n9.sort在原位置对列表排序。修改列表，返回None。\nx = [8,7,2,43,45]\nx.sort()\n思考：\n用户需要一个排好序的列表副本，但是保留原有列表不变。\n思路：\n把x的副本赋值给y，对y进行排序。\n代码：\nx = [1,2,4,5,6,1,23,2,2,3,]\ny = x[:]\ny.sort()\n#强调：x[:]是一种很有效率的复制整个列表的方法。只是简单的把x赋值给y，会让x和y都指向同一个列表。\n使用sorted函数\n#获取已排序的列表的副本\nx = [1,3,4,5,2]\ny = sorted(x)\n#note:sort()是列表方法，sorted是函数\n\n10.高级排序\n1.cmp自定义比较函数\nnumbers.sort(cmp)\n2.key 为每个元素创建一个键，根据键排序\nnumbers.sort(key = len)\n3.reverse = true\nnumbers.sort(reverse = true)\n\n元组\n圆括号表示，不可修改\n（1，2，3）\n空元组\n（）\n一个值的元组\n（42，）\nNote:\n必须加逗号，即使只有一个值。逗号非常重要。\n（4+2） #不是元组\n (4+2,) #是元组\n\n\ntuple函数\n一序列作为参数转换为元组\ntuple([1,2,3])#(1,2,3)\ntuple('abc')#(a,b,c)\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}