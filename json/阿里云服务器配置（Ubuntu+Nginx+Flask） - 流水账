{"title": "阿里云服务器配置（Ubuntu+Nginx+Flask） - 流水账 ", "index": "ubuntu,nginx,python", "content": "阿里云服务器配置（Ubuntu+Nginx+Flask）\nUbuntu 16.04\nNginx 1.12.0\nMongoDB 3.4\nPython 3\n环境配置\n配置 FTP 服务\nsudo apt-get install vsftpd\n启动 vsftpd 服务：\nsudo service vsftpd restart\nWindows 安装 FileZilla，输入主机、用户名、密码、端口，然后连接。\nNginx 安装\n更改 nginx 安装源，以保证安装的是最新稳定版。：\nvim /etc/apt/sources.list\n添加：\ndeb http://nginx.org/packages/ubuntu/ xenial nginx\ndeb-src http://nginx.org/packages/ubuntu/ xenial nginx\n更新源，否则会报错\nsudo apt-get update\n安装 Nginx：\nsudo apt-get install nginx\n启动 Nginx 测试：\nsudo /etc/init.d/nginx start\n# 或者\nservice nginx start\n此时打开浏览器访问你的服务器，就能看到经典的 Nginx 欢迎页面！参看：Nginx Install\nPython 相关\n安装 Python3 环境的 pip\nsudo apt-get install python3-pip\n安装创建独立的Python 环境所需的 virtualenv\npip install virtualenv\n在指定路径下创建 Python3 虚拟环境：\nvirtualenv -p /usr/bin/python3 py3env\n启动虚拟环境：\nsource py3env/bin/activate\n退出虚拟环境：\ndeactivate\nuWSGI\n配置复杂，用 Gunicorn 替代。\n进入虚拟Python 环境：\npip3 install uwsgi\nGunicorn\n使用 Gunicorn 配置更简单。在虚拟环境下，pip install gunicorn，安装 Gunicorn，新建配置文件 deploy_config.py，内容如下：\nimport os\nbind='127.0.0.1:8080' #绑定的端口\nworkers=4 #worker数量\nbacklog=2048\ndebug=True\nproc_name='gunicorn.pid'\npidfile='/var/log/gunicorn/debug.log'\nloglevel='debug'\n启动 Gunicorn：\ngunicorn -c deploy_config.py myapp:app\nmyapp 是入口Python文件名，app 是Flask 实例名。如果输出 worker 相关信息，表明启动成功。\n配置 Nginx\n修改 /etc/nginx/sites-available/ 下的defalut 文件为如下内容：\nserver {\n    listen 80;\n    server_name example.com; # 这是HOST机器的外部域名，用IP地址也行\n\n    location / {\n        proxy_pass http://127.0.0.1:8080; # 这里是指向 gunicorn host 的服务地址\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n  }\n配置完了之后软链接一份到 /etc/nginx/sites-enabled/defalut 下面\nln -s /etc/nginx/sites-available/defalut /etc/nginx/sites-enabled/defalut\n注：也可以删除default 文件的，新建自己的配置文件，并建立软链接。\n配置 Supervisor\n安装：\napt-get install python-setuptools\neasy_install supervisor\necho_supervisord_conf > /etc/supervisord.conf\n配置文件中添加：\n[program:myapp]\ncommand=/home/www/myapp/py3env/bin/gunicorn -c /home/www/myapp/deploy_config.py myapp:app\nautorstart=true\ndirectory=/home/www/myapp\nautorestart=true\nstartsecs=10\nstartretries=20\n\n[program:nginx]\ncommand=/usr/sbin/nginx\nstartsecs=0\nstopwaitsecs=0\nautostart=true\nautorestart=true\nstdout_logfile=/var/deploy/log/nginx.log\nstderr_logfile=/var/deploy/log/nginx.err\n如出现端口占用的错误，则：\nsudo unlink /tmp/supervisor.sock\nsudo unlink /var/run/supervisor.sock\n启动 Supervisord：\nsupervisord -c /etc/supervisord.conf\n关闭 supervisor：\nsupervisorctl shutdown\n重新载入配置\nsupervisorctl reload\n补充\nLinux 命令\n\n\n命令\n功能\n实例\n\n\n\ncp\n复制文件或目录\ncp file1 file2\n\n\n \n \n \n\n\n \n \n \n\n\n\n监听端口：\nlsof -i tcp | grep LISTEN\n\n******************************\nsshd       837 root    3u  IPv4   8888      0t0  TCP *:ssh (LISTEN)\nvsftpd    4463 root    3u  IPv4  19989      0t0  TCP *:ftp (LISTEN)\nNginx 知识补充\ntree /etc/nginx/\n/etc/nginx/\n├── conf.d\n├── fastcgi_params\n├── koi-utf\n├── koi-win\n├── mime.types\n├── naxsi_core.rules\n├── naxsi.rules\n├── naxsi-ui.conf.1.4.1\n├── nginx.conf\n├── proxy_params\n├── scgi_params\n├── sites-available\n│   └── default\n├── sites-enabled\n│   └── default -> /etc/nginx/sites-available/default\n├── uwsgi_params\n└── win-utf\n\n文件夹 sites-enabled 中的文件为 sites-available 文件夹中文件的硬链接。\n配置文件从 sites-avalidable中加载，默认配置文件为其中的default` 文件。\nnginx.conf 为主配置文件。\nuwsgi_parems 是与 Python 相关的文件。\nfastcgi_parms 是与 PHP 相关的文件。\nnginx 的默认网站目录 /usr/share/nginx/html。\n\n常用命令：\nnginx -s stop  快速关闭 nginx\nnginx -s quit  优雅的关闭 nginx\nnginx -s reload  重新加载配置\nnginx -s reopen  重新打开日志文件\n获取所有运行中的 nginx 进程列表：\nps -ax | grep nginx\n若 nginx 主进程 pid 为 1628，则可用kill命令发送 QUIT 信号，关闭此进程：\nkill -s QUIT 进程ID\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "13"}