{"title": "Python--Redis实战：第三章：Redis命令：第三节：集合 - python3 ：公司内部培训专栏 ", "index": "redis,python", "content": "上一篇文章：Python--Redis实战：第三章：Redis命令：第二节：列表下一篇文章：Python--Redis实战：第三章：Redis命令：第四节：散列\n\nRedis的集合以无序的方式来存储多个各不相同的元素，用户可以快速地对集合执行添加元素操作、移除元素操作、以及检查一个元素是否存在于集合里。本节将对最常用的集合命令进行介绍，包括：插入命令、移除命令、将元素从一个集合移动到另一个集合的命令、以及对多个集合执行交集运算、并集运算、差集运算的命令。\n下表展示了其中一部分最常用的集合命令：\n\n\n命令\n用例\n用例描述\n\n\n\nsadd\nsadd key-name item [item ...]\n将一个或多个元素添加到集合里面，并返回被添加元素当中原本并不存在于集合里面的元素数量\n\n\nsrem\nsrem key-name item [item ...]\n从集合里面移除一个或多个元素，并返回被移除元素的数量\n\n\nsismember\nsismember key-name item\n检查元素item是否存在于集合key-name里\n\n\nscard\nscard key-name\n返回集合包含的元素的数量\n\n\nsmembers\nsmembers key-name\n返回集合包含的所有元素\n\n\nsrandmember\nsrandmember key-name [count]\n从集合里面随机地返回一个或多个元素。当count为正数时，命令返回的随机元素不会重复；当count为负数时，命令返回的随机元素可能会出现重复。\n\n\nspop\nspop key-name\n随机地移除集合中的一个元素，并返回被移除的元素。\n\n\nsmove\nsmove source-key dest-key item\n如果集合source-key包含元素item，那么从集合source-key里面移除元素item，并将元素item添加到集合dest-key中；如果item被成功移除，那么命令返回1，否则返回0\n\n\n\nRedis常用集合命令使用实例\nimport redis #导入redis包包\n\n#与本地redis进行链接，地址为：localhost，端口号为6379\nr=redis.StrictRedis(host='localhost',port=6379)\n\nr.delete('set-key')\n\n#sadd命令会将那些目前并不存在于集合里面的元素添加到集合里面，并返回被添加元素的数量\nprint(r.sadd('set-key','a','b','c'))\n\n#srem命令返回的是被移除元素的数量\nprint(r.srem('set-key','c','d'))\nprint(r.srem('set-key','c','d'))\n\n\n#查看集合包含的元素数量\nprint(r.scard('set-key'))\n\n#获取集合包含的所有元素\nprint(r.smembers('set-key'))\n\n#可以很容易地将元素从一个集合移动到另一个集合\nprint(r.smove('set-key','set-key2','a'))\n#在执行smove命令时，如果用户想要移动的元素不存在于第一个集合里，那么移动操作就不会执行，返回False\nprint(r.smove('set-key','set-key2','a'))\n\n\nprint(r.smembers('set-key2'))\n运行结果：\n3\n1\n0\n2\n{b'a', b'b'}\nTrue\nFalse\n{b'a'}\n通过使用上面展示的命令，我们可以将各不相同的元素添加到集合里面，但集合真正厉害的地方在于组合和关联多个集合，下表展示了相关的命令：\n\n\n命令\n用例\n用例描述\n\n\n\nsdiff\nsdiff key-name [key-name ...]\n返回那些存在于第一个集合、但不存在于其它集合中的元素（数学上的差集运算）\n\n\nsdiffstore\nsdiffstore dest-key key-name [key-name ...]\n将那些存在于第一个集合但不存在于其他集合中的元素（数学上的差集运算）存储到dest-key键里面\n\n\nsinter\nsinter key-name [key-name ...]\n返回那些同时存在于所有集合中的元素（数学上的交集运算）\n\n\nsinterstore\nsinterstore dest-key key-name [key-name ...]\n将那些同时存在于所有集合的元素（数学上的交集运算）存储到dest-key键里面\n\n\nsunion\nsunion key-name [key-name ...]\n返回那些至少存在于一个集合中的元素（数学上的并集计算）\n\n\nsunionstore\nsunionstore dest-key key-name [key-name ...]\n将那些至少存在于一个集合中的元素（数学上的并集计算）存储到dest-key键里面\n\n\n\n这些命令分别是并集运算、交集运算和差集运算这3个基本集合操作的”返回结果“版本和”存储结果“版本。\n示例：\nimport redis #导入redis包包\n\n#与本地redis进行链接，地址为：localhost，端口号为6379\nr=redis.StrictRedis(host='localhost',port=6379)\n\nr.delete('set-key1')\nr.delete('set-key2')\n\n#首先将这一些元素添加到两个集合里面\nprint(r.sadd('set-key1','a','b','c','d'))\nprint(r.sadd('set-key2','c','d','e','f'))\n\n#计算出从第一个集合里面移除第二个集合包含的所有元素的结果\nprint(r.sdiff('set-key1','set-key2'))\n\n#计算出同时存在于两个集合里面的所有元素\nprint(r.sinter('set-key1','set-key2'))\n\n#计算出两个集合包含的所有元素\nprint(r.sunion('set-key1','set-key2'))\n\n\n运行结果：\n4\n4\n{b'b', b'a'}\n{b'c', b'd'}\n{b'c', b'e', b'd', b'f', b'a', b'b'}\n和Python的集合相比，Redis的集合除了可以被多个客户端远程地进行访问以外，其他的语义和功能基本都是相同的。\n接下来的一节将对Redis的散列处理命令进行介绍，这些命令允许用户将多个相关的键值对存储在一起，以便执行获取操作和更新操作。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}