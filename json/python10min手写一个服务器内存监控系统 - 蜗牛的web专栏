{"title": "python10min手写一个服务器内存监控系统 - 蜗牛的web专栏 ", "index": "javascript,python", "content": "简易的内存监控系统\n本文需要有一定的python和前端基础，如果没基础的，请关注我后续的基础教程系列博客\n文章源地址,还可以看到具体的代码,喜欢请加个星星\n腾讯视频链接\n录制中间网出问题了，重启了一下，所以有两部分\n\n视频1\n视频2\n\n本文的目的在于，尽可能用简单的代码，让大家了解内存监控的原理主题思路\n\n获取内存信息\n存储信息\n展现\n\n后续扩展\n\n加主机名,monitor部署在多台机器，不直接插数据库\n通过http请求的方式，一台机器起flask专门存数据monitor\n\n\n\n思路图\n第一步，我们需要获取内存信息\n其实所有的监控项，包括内存数据，都是从文件中读取的，大家执行以下 cat /proc/meminfo就可以看到关于内存的信息，我们关注的是前四行，总内存，空闲内存，缓冲和缓存大小\n计算内存占用量公式：\n(总内存-空闲内存-缓冲-缓存)/1024Mb\n代码呼之欲出 monitor.py\n用with打开文件，可以自动关闭，比直接open优雅那么一丢丢\n\ndef getMem():\n    with open('/proc/meminfo') as f:\n        total = int(f.readline().split()[1])\n        free = int(f.readline().split()[1])\n        buffers = int(f.readline().split()[1])\n        cache = int(f.readline().split()[1])\n    mem_use = total-free-buffers-cache\n    print mem_use/1024\nwhile True:\n    time.sleep(1)\n    getMem()\n\n执行文件 python monitor.py，每一秒打印一条内存信息\n[woniu@teach memory]$ python mointor.py \n2920\n2919\n2919\n2919\n2919\n\n我们可以写个很搓的测试代码，占用一点内存，看看数据会不会变执行下面代码，能看到内存使用量明显多了几M\n# test.py\n\ns = 'akdsakjhdjkashdjkhasjkdhasjkdhkjashdaskjhfoopnnm,ioqouiew'*100000\n\nfor i in s:\n    for j in s:\n        s.count(j)                 \n获取内存数据done!\n第二步存储数据库\n我们选用mysql\n新建表格,我们需要两个字段，内存和时间 sql呼之欲出，简单粗暴\ncreate memory(memory int,time int)\n我们的 monitor.py就不能只打印内存信息了，要存储数据库啦,引入mysql模块，代码如下\nimport time\nimport MySQLdb as mysql\n\ndb = mysql.connect(user=\"reboot\",passwd=\"reboot123\",db=\"memory\",host=\"localhost\")\ndb.autocommit(True)\ncur = db.cursor()\n\ndef getMem():\n    with open('/proc/meminfo') as f:\n        total = int(f.readline().split()[1])\n        free = int(f.readline().split()[1])\n        buffers = int(f.readline().split()[1])\n        cache = int(f.readline().split()[1])\n    mem_use = total-free-buffers-cache\n    t = int(time.time())\n    sql = 'insert into memory (memory,time) value (%s,%s)'%(mem_use/1024,t)\n    cur.execute(sql)\n    print mem_use/1024\n    #print 'ok'\nwhile True:\n    time.sleep(1)\n    getMem()\n\n比之前的多了拼接sql和执行的步骤，具体过程见视频，大家到数据库里执行一下下面的sql，就能看到我们辛辛苦苦获取的内存数据啦\n    select * from memory\n我们的数据库里数据越来越多，怎么展示呢\n我们需要flask我们看下文件结构\n.\n├── flask_web.py web后端代码\n├── mointor.py 监控数据获取\n├── static 静态文件，第三方图表库\n│   ├── exporting.js\n│   ├── highstock.js\n│   └── jquery.js\n├── templates\n│   └── index.html 展示前端页面\n└── test.py 占用内存的测试代码\n\n\nflask_web就是我们的web服务代码，template下面的html，就是前端展示的文件，static下面是第三方库\nflask_web的代码如下\n\n提供两个路由\n\n根目录渲染文件index.html\n/data路由去数据库插数据，返回json，供画图使用\n\n\nfrom flask import Flask,render_template,request\nimport MySQLdb as mysql\n\ncon = mysql.connect(user='reboot',passwd='reboot123',host='localhost',db='memory')\n\ncon.autocommit(True)\ncur = con.cursor()\napp = Flask(__name__)\nimport json\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/data')\ndef data():\n    sql = 'select * from memory'\n    cur.execute(sql)\n    arr = []\n    for i in cur.fetchall():\n        arr.append([i[1]*1000,i[0]])\n    return json.dumps(arr)\n\nif __name__=='__main__':\n    app.run(host='0.0.0.0',port=9092,debug=True)\n\n前端index.htmlhighstock的demo页面,copy过来，具体过程见视频\n<html>\n<head>\n<title>51reboot</title>\n</head>\n\n<body>\nhello world\n\n<div id=\"container\" style=\"height: 400px; min-width: 310px\"></div>\n\n<script src='/static/jquery.js'></script>\n<script src='/static/highstock.js'></script>\n<script src='/static/exporting.js'></script>\n<script>\n$(function () {\n    // 使用当前时区，否则东八区会差八个小时\n    Highcharts.setOptions({\n        global: {\n            useUTC: false\n        }\n    });\n    $.getJSON('/data', function (data) {\n        // Create the chart\n        $('#container').highcharts('StockChart', {\n            rangeSelector : {\n                selected : 1\n            },\n            title : {\n                text : '内存数据'\n            },\n            series : [{\n                name : '本机内存',\n                data : data,\n                tooltip: {\n                    valueDecimals: 2\n                }\n            }]\n        });\n    });\n});\n</script>\n</body>\n</html>\n具体观察数据结构的过程，见视频和demo链接，我们做的 就是把数据库里的数据，拼接成前端画图需要的数据，展现出来\n这时候前端就能看到图表啦\n\n我们并不仅限于此，如果想实时的看到内存，应该怎么搞呢\n\n查询数据时候增加一个时间戳当限制条件，再次查询时，只返回两次查询之间的增量数据\n前端动态添加增量结点数据到图表中\n代码呼之欲出\n\npython\n\ntmp_time = 0\n\n@app.route('/data')\ndef data():\n    global tmp_time\n    if tmp_time>0:\n        sql = 'select * from memory where time>%s' % (tmp_time/1000)\n    else:\n        sql = 'select * from memory'\n    cur.execute(sql)\n    arr = []\n    for i in cur.fetchall():\n        arr.append([i[1]*1000,i[0]])\n    if len(arr)>0:\n        tmp_time = arr[-1][0]\n    return json.dumps(arr)\n\n前端,3秒查一次增量数据\n    $.getJSON('/data', function (data) {\n\n        // Create the chart\n        $('#container').highcharts('StockChart', {\n        chart:{\n        events:{\n            load:function(){\n                var series = this.series[0]\n                setInterval(function(){\n                $.getJSON('/data',function(res){\n                    $.each(res,function(i,v){\n                        series.addPoint(v)\n                    })\n                })\n                },3000)\n            }\n        }\n        },\n            rangeSelector : {\n                selected : 1\n            },\n            title : {\n                text : 'AAPL Stock Price'\n            },\n            series : [{\n                name : 'AAPL',\n                data : data,\n                tooltip: {\n                    valueDecimals: 2\n                }\n            }]\n        });\n    });\ndone！两个文件都搞定，double kill！效果\n\n最终代码直接下载那个木看也行\n监控文件monitor.py\nimport time\nimport MySQLdb as mysql\n\ndb = mysql.connect(user=\"reboot\",passwd=\"reboot123\",db=\"memory\",host=\"localhost\")\ndb.autocommit(True)\ncur = db.cursor()\n\ndef getMem():\n    f = open('/proc/meminfo')\n    total = int(f.readline().split()[1])\n    free = int(f.readline().split()[1])\n    buffers = int(f.readline().split()[1])\n    cache = int(f.readline().split()[1])\n    mem_use = total-free-buffers-cache\n    t = int(time.time())\n    sql = 'insert into memory (memory,time) value (%s,%s)'%(mem_use/1024,t)\n    cur.execute(sql)\n    print mem_use/1024\n    #print 'ok'\nwhile True:\n    time.sleep(1)\n    getMem()\n\nflask\nfrom flask import Flask,render_template,request\nimport MySQLdb as mysql\n\ncon = mysql.connect(user='reboot',passwd='reboot123',host='localhost',db='memory')\ncon.autocommit(True)\ncur = con.cursor()\napp = Flask(__name__)\nimport json\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\ntmp_time = 0\n\n@app.route('/data')\ndef data():\n    global tmp_time\n    if tmp_time>0:\n        sql = 'select * from memory where time>%s' % (tmp_time/1000)\n    else:\n        sql = 'select * from memory'\n    cur.execute(sql)\n    arr = []\n    for i in cur.fetchall():\n        arr.append([i[1]*1000,i[0]])\n    if len(arr)>0:\n        tmp_time = arr[-1][0]\n    return json.dumps(arr)\n\nif __name__=='__main__':\n    app.run(host='0.0.0.0',port=9092,debug=True)\n前端\n<html>\n<head>\n<title>51reboot</title>\n<meta charset='utf-8'>\n</head>\n\n<body>\nhello world\n\n<div id=\"container\" style=\"height: 400px; min-width: 310px\"></div>\n\n<script src='/static/jquery.js'></script>\n<script src='/static/highstock.js'></script>\n<script src='/static/exporting.js'></script>\n<script>\n$(function () {\n    // 使用当前时区，否则东八区会差八个小时\n    Highcharts.setOptions({\n        global: {\n            useUTC: false\n        }\n    });\n    $.getJSON('/data', function (data) {\n\n        // Create the chart\n        $('#container').highcharts('StockChart', {\n        chart:{\n        events:{\n        \n            load:function(){\n            \n                var series = this.series[0]\n                setInterval(function(){\n                $.getJSON('/data',function(res){\n                    $.each(res,function(i,v){\n                        series.addPoint(v)\n                    })\n                })\n                },3000)\n            }\n        }\n        },\n\n            rangeSelector : {\n                selected : 1\n            },\n\n            title : {\n                text : '内存数据'\n            },\n\n            series : [{\n                name : '本机内存',\n                data : data,\n                tooltip: {\n                    valueDecimals: 2\n                }\n            }]\n        });\n    });\n\n});\n</script>\n\n</body>\n</html>\n\n代码没有特别注意细节，希望大家喜欢。\n\n欢迎大家关注个人公共号,高品质运维开发\n\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "6"}