{"title": "用 150 行 Python 代码写的量子计算模拟器 - 极光推送 ", "index": "python", "content": "简评：让你更轻松地明白，量子计算机如何遵循线性代数计算的。\n这是个 GItHub 项目，可以简单了解一下。\nqusim.py 是一个多量子位的量子计算机模拟器（玩具？），用 150 行的 python 所编写。\n这段代码可以让你轻松了解量子计算机如何遵循线性代数来计算的！\nfrom QuSim import QuantumRegister\n\n#############################################\n#                 Introduction              #\n#############################################\n# Here Will Be A Few Example of Different   #\n# Quantum States / Algorithms, So You Can   #\n# Get A Feel For How The Module Works, and  #\n# Some Algorithmic Ideas                    #\n#############################################\n\n#############################################\n#            Quantum Measurement              #\n#############################################\n# This experiment will prepare 2 states, of a\n# Single qubit, and of 5 qubits, and will just\n# Measure them\n\nOneQubit = QuantumRegister(1)  # New Quantum Register of 1 Qubit\nprint('One Qubit: ' + OneQubit.measure())  # Should Print 'One Qubit: 0'\n\nFiveQubits = QuantumRegister(5)  # New Quantum Register of 5 Qubits\n# Should Print 'Five Qubits: 00000'\nprint('Five Qubits: ' + FiveQubits.measure())\n\n#############################################\n#                 Swap 2 Qubits             #\n#############################################\n# Here, We Will Apply a Pauli-X Gate / NOT Gate\n# To the first qubit, and then after the algorithm,\n# it will be swapped to the second qubit.\n\nSwap = QuantumRegister(2)  # New Quantum Register of 2 qubits\nSwap.applyGate('X', 1)  # Apply The NOT Gate. If Measured Now, it should be 10\n\n# Start the swap algorithm\nSwap.applyGate('CNOT', 1, 2)\nSwap.applyGate('H', 1)\nSwap.applyGate('H', 2)\nSwap.applyGate('CNOT', 1, 2)\nSwap.applyGate('H', 1)\nSwap.applyGate('H', 2)\nSwap.applyGate('CNOT', 1, 2)\n# End the swap algorithm\n\nprint('SWAP: |' + Swap.measure() + '>')  # Measure the State, Should be 01\n\n#############################################\n#               Fair Coin Flip              #\n#############################################\n# Shown in this 'Experiment', is a so called 'Fair Coin Flip',\n# Where a state will be prepared, that has an equal chance of\n# Flipping to Each Possible State. to do this, the Hadamard\n# Gate will be used.\n\n# New Quantum Register of 1 Qubit (As a coin has only 2 states)\nFairCoinFlip = QuantumRegister(1)\n# If measured at this point, it should be |0>\n\n# Apply the hadamard gate, now theres an even chance of measuring 0 or 1\nFairCoinFlip.applyGate('H', 1)\n\n# Now, the state will be measured, flipping the state to\n# either 0 or 1. If its 0, we will say \"Heads\", or if its\n# 1, we will say \"Tails\"\nFairCoinFlipAnswer = FairCoinFlip.measure()  # Now its flipped, so we can test\nif FairCoinFlipAnswer == '0':\n    print('FairCoinFlip: Heads')\nelif FairCoinFlipAnswer == '1':\n    print('FairCoinFlip: Tails')\n\n#############################################\n#             CNOT Gate                     #\n#############################################\n# In this experiment, 4 states will be prepared, {00, 01, 10, 11}\n# And then the same CNOT Gate will be run on them,\n# To Show The Effects of the CNOT. The Target Qubit will be 2, and the control 1\n\n# New Quantum Register of 2 Qubits, done 4 times.\n# If any are measured at this time, the result will be 00\nZeroZero = QuantumRegister(2)\nZeroOne = QuantumRegister(2)\nOneZero = QuantumRegister(2)\nOneOne = QuantumRegister(2)\n\n# Now prepare Each Into The State Based On Their Name\n# ZeroZero Will be left, as thats the first state anyway\nZeroOne.applyGate('X', 2)\nOneZero.applyGate('X', 1)\nOneOne.applyGate('X', 1)\nOneOne.applyGate('X', 2)\n\n# Now, a CNOT Will Be Applied To Each.\nZeroZero.applyGate('CNOT', 1, 2)\nZeroOne.applyGate('CNOT', 1, 2)\nOneZero.applyGate('CNOT', 1, 2)\nOneOne.applyGate('CNOT', 1, 2)\n\n# Print the results.\nprint('CNOT on 00: |' + ZeroZero.measure() + '>')\nprint('CNOT on 01: |' + ZeroOne.measure() + '>')\nprint('CNOT on 10: |' + OneZero.measure() + '>')\nprint('CNOT on 11: |' + OneOne.measure() + '>')\n主要代码来自：corbett/QuantumComputing.\n如果你对用 RUST 所写的高效、高性能的硬件量子计算模拟器有兴趣，可以点击 QCGPU 来查看更多内容。\nGITHUB 地址：adamisntdead/QuSimPy\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "2"}