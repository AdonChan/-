{"title": "Python的SQL性能测试 - 个人文章 ", "index": "python,postgresql,asyncio", "content": "前言\n测试异步与同步下Python对于PostgreSQL数据库操作的性能\n通过测试同步以及异步下对于数据库的增加和查找操作，以进行性能评估。更直观的以及量化地感受同步以及异步下的性能差距。\n环境初始化\n代码地址\n需要安装pipenv，详细内容可参考\npip3.6 install pipenv\ngit clone https://github.com/GuangTianLi/python-sql-performance.git\ncd python-sql-performance\npipenv sync\npipenv shell\nSQL操作性能评估\npython postgresql_speed_test.py\n\n  DBAPI:  psycopg2\n         11004 function calls in 2.235 seconds\n  DBAPI:  asyncpg\n         471973 function calls in 2.436 seconds\n  DBAPI:  uvloop\n         206945 function calls in 0.794 seconds\n  DBAPI:  psycopg2, total seconds 2.558364\n  DBAPI:  asyncpg, total seconds 2.309759\n  DBAPI:  uvloop, total seconds 2.032303  \n结论\n从结果上看，对于数据库操作本身，异步对于其性能本身只能算是锦上添花。而异步操作本身则也需要添加对事件循环的处理，等于是变相的增加了运行时间，而如果每个数据库操作本身所需要的时间小于事件循环处理的时间，则其总时间就是增加的。\n所以异步架构在用于单纯的数据库操作时，并不能取得非常良好的性能优化，数据库操作本身的优化还是依赖于操作本身以及数据库结构的优化。\nWebServer性能评估\nflask\npython flask_server_speed_test.py\nwrk -d 60 -c 100 -t 12 --timeout 8 http://127.0.0.1:8080/db\nRunning 1m test @ http://127.0.0.1:8080/db\n  12 threads and 100 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency   331.47ms  221.85ms   2.01s    89.71%\n    Req/Sec    30.95     17.90    80.00     63.85%\n  18597 requests in 1.00m, 3.10MB read\nRequests/sec:    309.41\nTransfer/sec:     52.88KB\nsanic\npython sanic_server_speed_test.py\nwrk -d 60 -c 100 -t 12 --timeout 8 http://127.0.0.1:8080/db\nRunning 1m test @ http://127.0.0.1:8080/db\n  12 threads and 100 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency   162.95ms   99.56ms   1.89s    87.88%\n    Req/Sec    52.26     23.73   148.00     61.57%\n  36702 requests in 1.00m, 4.83MB read\nRequests/sec:    610.64\nTransfer/sec:     82.29KB\n结论\n从中等量级的压测的结果上看，对于异步架构的网络服务器，在性能上有了很大的提升。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}