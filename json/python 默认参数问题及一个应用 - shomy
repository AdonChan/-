{"title": "python 默认参数问题及一个应用 - shomy ", "index": "python", "content": "源自: 我的博客﻿\npython 里面一个常见的陷阱就是函数的默认参数问题。如下:\n\ndef func(mylist = []):\n\n    mylist.append(1)\n    \n    return mylist\n\n以下的执行结果如下:\n\nprint func()\n\nprint func()\n\nprint func()\n\nprint func(['a'])\n\nprint func()\n\n结果如下:\n\n[1]\n\n[1, 1]\n\n[1, 1, 1]\n\n['a', 1]\n\n[1, 1, 1, 1]\n\n如此结果， 前面三个可以看出 如果没有指定参数的话， 每次调用函数时候， 调用的mylist 是同一个对象。这是因为函数的默认参数，是在代码编译成PyCodeObject的时候， 就已经创建了对象指针，并且存在该函数的func_default内。 以后在代码运行，调用函数的时候，如果没有指定参数的话， 每次调用的话，  该参数变量都是代码编译阶段的变量指针所指定的对象。\n\nprint func.func_default\n\n此时结果就是：\n\n([1, 1, 1, 1], )\n\n默认参数分为两种情况:\n\n\n默认参数值是不可变对象\n此时函数的 func_default  一直指向该不变对象，    如果函数内部修改了该变量， 那么该默认参数会指向一个新的不可变对象.   \n不过func_default 不变。 而每次调用函数都是读取func_default， 因此每次执行都一样。\n\nIn [30]: def func2(var = 1):\n\n   ....:     var += 1\n\n   ....:     return var\n\n   ....: \n\n\n\nIn [31]: func2()\n\nOut[31]: 2\n\n\n\nIn [32]: func2()\n\nOut[32]: 2\n\n\n\nIn [34]: func2.func_defaults\n\nOut[34]: (1,)\n\n\n\n默认参数是可变对象，比如 list, dict, class等\n这种情况下，如果在函数内修改了指针所指的对象（并未创建新的对象）， 那么 func_default 就会改变。这正是开始的mylist发生变化的原因。看下面的例子,：\n\nIn [35]: def func(mylist = []):\n\n   ....:     mylist = []    #这里 创建了新的对象，\n\n             mylist.append(1)\n\n             return mylist\n\n\n\nIn [44]: func()\n\nOut[44]: [1]\n\n\n\nIn [45]: func.func_defaults\n\nOut[45]: ([],)   \n\n由于创建了对象， mylist 只是作为一个 新建对象的别名存在， 后面在修改已经与 func_default 无关了。  \n\n\n\n\n默认参数的一个应用\n先看下面的一个经典的例子:\n\ndef outer():\n\n    res = []\n\n    for i in range(4):\n\n        def inner(j):\n\n            return j * i\n\n        res.append(inner)\n\n    return res\n\n\n\nprint [m(2) for m in outer()]\n\n\n\n#简略版本:\n\ndef multipliers():\n\n    return [lambda x : i * x for i in range(4)]\n\nprint [m(2) for m in multipliers()]\n\n结果是 [6, 6, 6, 6] , 而不是 [0, 2, 4, 6]， 原因就是闭包的延迟绑定。另外函数绑定的是变量而不是绑定数值。当循环结束了，i的值已经是3, 此时结果都是6. 一个解决方法便是，使用默认参数绑定数值。如下改动:\n\ndef outer():\n\n    res = []\n\n    for i in range(4):\n\n        def inner(j, i = i):\n\n            return j * i\n\n        res.append(inner)\n\n    return res\n\n\n\nprint [m(2) for m in outer()]\n\n\n\n#简略版本:\n\ndef multipliers():\n\n    return [lambda x, i = i : i * x for i in range(4)]\n\nprint [m(2) for m in multipliers()]\n\n这样的话， 利用默认参数在代码编译的时候，便把参数写到函数的func_default中， 就可以绑定0,1,2,3了。结果自然就是\n\n[0, 2, 4, 6]\n\n这就是默认参数的一个应用。\n上述还有一个生成器修改的方式\n\ndef multipliers():\n\n    return (lambda x : i * x for i in range(4))  #修改成生成器\n\nprint [m(2) for m in multipliers()]\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}