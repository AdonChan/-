{"title": "Python Tutorial笔记 - 个人文章 ", "index": "python", "content": "一、类（PT第九章）\n9.3.4 方法对象\nclass MyClass:\n    \"\"\"A simple example class\"\"\"\n    i = 12345\n    def f(self):\n        return 'hello world'\n\nxf = x.f\nwhile True:\n    print xf()\n方法的特别之处在于实例对象被作为函数的第一个参数传给了函数。在我们的示例中，调用x.f()完全等同于MyClass.f(x)。一般情况下，以n个参数的列表调用一个方法就相当于将方法所属的对象插入到列表的第一个参数的前面，然后以新的列表调用相应的函数。如果你还是不明白方法的工作原理，了解一下它的实现或许有帮助。引用非数据属性的实例属性时，会搜索它的类。如果这个命名确认为一个有效的类属性即函数对象，就会将实例对象和函数对象封装进一个抽象对象：这就是方法对象。以一个参数列表调用方法对象时，它被重新拆封，用实例对象和原始的参数列表构造一个新的参数列表，然后以这个新的参数列表调用对应的函数对象。\n9.3.5 类和实例变量\n一般来说，实例变量用于对每一个实例都是唯一的数据，类变量用于类的所有实例共享的属性和方法：\nclass MyClass:\n    \"\"\"A simple example class\"\"\"\n    i = 12345\n    def f(self):\n        return 'hello world'\n\n\na=MyClass()\nb=MyClass()\nprint a.i is b.i\nprint a.i is MyClass.i\n\na.i=5\nprint a.i is b.i\nprint a.i is MyClass.i\n重要的警告：默认值只计算一次。这使得默认值是可变的对象如列表、字典或大部分类的实例时会有所不同\nclass MyClass:\n    \"\"\"A simple example class\"\"\"\n    i = 12345\n    def f(self):\n        return 'hello world'\n        \n    def t(self,L=[]):\n        L.append('a')\n        return L\n\n\na=MyClass()\nb=MyClass()\n\n\nprint a.t()\nprint b.t()\n9.4 补充说明\n通常，方法的第一个参数称为self。这仅仅是一个约定：名字self对 Python 而言绝对没有任何特殊含义。但是请注意：如果不遵循这个约定，对其他的 Python 程序员而言你的代码可读性就会变差，而且有些类 查看 器程序也可能是遵循此约定编写的。\n问题：为啥p方法访问不到o，但如果在__init__函数里定义了o就可以访问呢\nclass MyClass:\n    \"\"\"A simple example class\"\"\"\n    i = 12345\n    def f(self):\n        self.o=123\n        return 'hello world'\n        \n    def t(self,L=[]):\n        L.append('a')\n        return L\n        \n    def p(self):\n        print self.o\n        \n\na=MyClass()\na.p()\n9.8 异常也是类\nclass B:\n    pass\nclass C(B):\n    pass\nclass D(C):\n    pass\nfor c in [B, C, D]:\n    try:\n        raise c()\n    except D:\n        print \"D\"\n    except C:\n        print \"C\"\n    except B:\n        print \"B\"\n9.9 迭代器\nclass Reverse:\n    \"\"\"Iterator for looping over a sequence backwards.\"\"\"\n    def __init__(self, data):\n        self.data = data\n        self.len=len(data)\n        self.index=-1\n    def __iter__(self):\n        return self\n    def next(self):\n        if self.index == self.len-1:\n            self.index=-1\n            raise StopIteration\n        self.index = self.index + 1\n        return self.data[self.index]\n\nr=Reverse('abc')\nfor x in r:\n    print x \nprint r.index\n二、标准库概览（PT第十、十一章）\n导入模块语句\n模块即为一个py文件，模块名就是py文件名去掉.py，import后面接的就是模块名，不同的模块可以放在不同的包（就是文件夹啦，from后面接的那个就是包名）里，导入方法有两种，比如包名叫做package，模块名叫module，这个模块里有个方法叫做function(),有个类叫Class\n方式1：\nimport package.module\n#调用方法的方式为\npackage.module.function()\nimport package.module\n#调用方法的方式为\npackage.module.Class()\n方式2：\nfrom package import module\n#调用方法的方式为\nmodule.function()\n而且，import后面可以接模块内的方法名，from后面接模块名，比如：\nfrom package.module import function\n#可以直接调用\nfunction()\nfrom package.module import Class\n#可以直接调用\nClass()\n然而并不存在import package.module.function的用法\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}