{"title": "Django搭建个人博客：编写删除文章功能 - Django搭建个人博客 ", "index": "django,python", "content": "既然有了写文章的功能，那当然也必须要有删除文章的功能了。\n编写基本功能\n有了之前的学习做铺垫，删除文章实现起来就比较简单了。\n首先增加一个视图函数：\narticle/views.py\n\n...\n\n# 删文章\ndef article_delete(request, id):\n    # 根据 id 获取需要删除的文章\n    article = ArticlePost.objects.get(id=id)\n    # 调用.delete()方法删除文章\n    article.delete()\n    # 完成删除后返回文章列表\n    return redirect(\"article:article_list\")\n\n与查询文章类似，因为需要知道具体应该删除哪一篇文章，因此必须传入文章的id；\n紧接着调用.delete()函数删除数据库中这篇文章的条目；\n删除成功后返回到文章列表。\n\n这里与上一章一样，不对用户的身份进行限制，即任何人都可以删除任意文章。当然这样肯定是不符合常理的，等到我们学习了用户管理的知识后，再回头来修改。\n然后写入路由信息：\narticle/urls.py\n\n...\n\nurlpatterns = [\n    ...\n    # 删除文章\n    path('article-delete/<int:id>/', views.article_delete, name='article_delete'),\n]\n这里几乎与文章详情的写法一样，没有新的内容。再次注意文章的id是如何传递到视图中的。\n最后我们希望能够在文章详情的页面进行删除的操作（当然也可以在专门的管理文章的页面中），因此修改模板detail.html：\ntemplates/article/detail.html\n\n...\n\n<!-- 文章详情 -->\n<div class=\"container\">\n    <div class=\"row\">\n        ...\n        <div class=\"col-12 alert alert-success\">作者：{{ article.author }}\n         · <a href=\"{% url \"article:article_delete\" article.id %}\">删除文章</a>\n        </div>\n        ...\n    </div>\n</div>\n\n...\n这里增加了一个调用article_delete视图函数的链接，并且将article.id传递进去。\n运行开发服务器，可以发现已经能够正常的删除文章了：\n\n增加弹窗\n功能已经实现了，但是还有个小问题没有解决：万一我只是不小心点到了链接，辛辛苦苦写的文章就被删除了，岂不是欲哭无泪了？\n很容易想到的一个解决方法，就是点击删除按钮是出现一个弹窗，确认后再进行删除，确保用户不是误操作的。\n弹窗是很常用的功能，但是想写出一个美观好用的弹窗却不容易。幸运的是我们不需要重复造轮子，早就有革命先驱做好相关的功能了，这里我们选择使用Layer弹窗组件。\nlayer是一款备受青睐的web弹层组件，具备全方位的解决方案。首先到官网下载Layer插件：Layer\n解压后将里面的layer文件夹（含有layer.js的）直接复制到项目的static文件夹下。\n为了未来在所有页面都能使用Layer弹窗功能，在base.html中通过标签引入：\ntemplates/base.html\n\n...\n\n<body>\n    ...\n\n    <!-- bootstrap.js 依赖 jquery.js 和popper.js，因此在这里引入 -->\n    <script src=\"{% static 'jquery/jquery-3.3.1.js' %}\"></script>\n    ...\n    <!-- 引入layer.js -->\n    <script src=\"{% static 'layer/layer.js' %}\"></script>\n</body>\n\n...\nlayer插件依赖jquery才能正常工作，因此要在jquery的后面引入layer。\n再次改写模板文件detail.html：\ntemplates/article/detail.html\n\n...\n\n<!-- 文章详情 -->\n<div class=\"container\">\n    <div class=\"row\">\n        ...\n        <div class=\"col-12 alert alert-success\">作者：{{ article.author }}\n         · <a href=\"#\" onclick=\"confirm_delete()\">删除文章</a>\n        </div>\n        ...\n    </div>\n</div>\n\n<script>\n    // 删除文章的函数\n    function confirm_delete() {\n        // 调用layer弹窗组件\n        layer.open({\n            // 弹窗标题\n            title: \"确认删除\",\n            // 正文\n            content: \"确认删除这篇文章吗？\",\n            // 点击确定按钮后调用的回调函数\n            yes: function(index, layero) {\n                // 指定应当前往的 url\n                location.href='{% url \"article:article_delete\" article.id %}'\n            },\n        })\n    }\n</script>\n\n{% endblock content %}\n这里将href链接去除掉，增加了onclick属性，表示在点击链接的时候调用后面的confirm_delete()函数；函数中调用了layer弹窗组件，对弹窗的标题、正文以及点击确定键的行为作出了规定（当然Layer组件远不止这些用法，具体可在官方文档中查阅）。location.href定义了点击确定键后应该前往的地址，即删除文章的url。\n保存所有文件后刷新页面，很好，达到了理想的效果：\n\n总结\n本章新增了删除博客文章的功能，并且使用了弹窗组件优化了用户体验。\n下一章将学习如何更新文章，准备好继续作战吧。\n\n有疑问请在杜赛的个人网站留言，我会尽快回复。\n或Email私信我：dusaiphoto@foxmail.com\n项目完整代码：Django_blog_tutorial\n\n\n转载请告知作者并注明出处。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}