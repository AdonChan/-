{"title": "入门系列之Scikit-learn在Python中构建机器学习分类器 - 腾讯云技术社区 ", "index": "scikit-learn,python,云计算,程序员,机器学习", "content": "欢迎大家前往腾讯云+社区，获取更多腾讯海量技术实践干货哦~\n本文由信姜缘  发表于云+社区专栏\n\n介绍\n机器学习是计算机科学、人工智能和统计学的研究领域。机器学习的重点是训练算法以学习模式并根据数据进行预测。机器学习特别有价值，因为它让我们可以使用计算机来自动化决策过程。\n在本教程中，您将使用Scikit-learn（Python的机器学习工具）在Python中实现一个简单的机器学习算法。您将使用Naive Bayes（NB）分类器，结合乳腺癌肿瘤信息数据库，预测肿瘤是恶性还是良性。\n在本教程结束时，您将了解如何使用Python构建自己的机器学习模型。关于Python的语法详见腾讯云开发者手册Python中文开发文档。\n准备\n要完成本教程，您需要：\n\nPython 3 本地编程环境\n在virtualenv中安装Jupyter Notebook。Jupyter Notebooks在运行机器学习实验时非常有用。您可以运行短代码块并快速查看结果，从而轻松测试和调试代码。\n\n第一步 - 导入Scikit-learn\n让我们首先安装Python模块Scikit-learn，这是Python 最好、文档记录最多的机器学习库之一。\n要开始我们的编码项目，先要激活我们的Python 3编程环境。确保您位于环境所在的目录中，然后运行以下命令：\n$ . my_env/bin/activate\n激活我们的编程环境后，检查是否已安装Sckikit-learn模块：\n(my_env) $ python -c \"import sklearn\"\n如果sklearn已安装，则此命令将完成且没有错误。如果未安装，您将看到以下错误消息：\nTraceback (most recent call last): File \"<string>\", line 1, in <module> ImportError: No module named 'sklearn'\n错误消息表明sklearn未安装，因此请使用pip下载库：\n(my_env) $ pip install scikit-learn[alldeps]\n安装完成后，启动Jupyter Notebook：\n(my_env) $ jupyter notebook\n在Jupyter中，创建一个名为ML Tutorial的新Python Notebook。在Notebook的第一个单元格，输入sklearn模块：\nML Tutorial\nimport sklearn\n您的 Notebook应如下图所示：\nNotebook\n现在我们已经在 Notebook中导入了sklearn，我们可以开始使用机器学习模型的数据集。\n第二步 - 导入Scikit-learn的数据集\n我们将在本教程中使用的数据集是乳腺癌威斯康星诊断数据库。该数据集包括关于乳腺癌肿瘤的各种信息，以及恶性或良性的分类标签。该数据集在569个肿瘤上具有569个实例或数据，并且包括关于30个属性或特征的信息，例如肿瘤的半径，纹理，平滑度和面积。\n使用该数据集，我们将构建机器学习模型以使用肿瘤信息来预测肿瘤是恶性的还是良性的。\nScikit-learn安装了各种数据集，我们可以将其加载到Python中，并包含我们想要的数据集。导入并加载数据集：\nML Tutorial\n...\n\nfrom sklearn.datasets import load_breast_cancer\n\n# Load dataset\ndata = load_breast_cancer()\n该data变量表示一个像字典一样工作的Python对象。字典的关键是分类标签名称（target_names），实际标签（target），属性/特征名称（feature_names）和属性（data）。\n属性是任何分类器的关键部分。属性捕获有关数据性质的重要特征。鉴于我们试图预测的标签是恶性肿瘤与良性肿瘤，可能的有用属性有肿瘤的大小，半径和质地。\n为每个重要信息集创建新变量并分配数据：\nML Tutorial\n...\n\n# Organize our data\nlabel_names = data['target_names']\nlabels = data['target']\nfeature_names = data['feature_names']\nfeatures = data['data']\n我们现在有了每组信息的列表。为了更好地理解我们的数据集，让我们通过输出我们的类标签、第一个数据实例的标签、我们的功能名称以及第一个数据实例的功能值来查看我们的数据：\nML Tutorial\n...\n\n# Look at our data\nprint(label_names)\nprint(labels[0])\nprint(feature_names[0])\nprint(features[0])\n如果运行代码，您将看到以下结果：\n输出结果\n如图所示，我们的类名是恶性和良性，然后将其映射到二进制值0和1，其中0代表恶性肿瘤1代表良性肿瘤。因此，我们的第一个数据实例是恶性肿瘤，其平均半径为1.79900000e+01。\n现在我们已经加载了数据，我们可以使用我们的数据来构建我们的机器学习分类器。\n第三步 - 将数据组织到集合中\n要评估分类器的性能，您应该始终在看不见的数据上测试模型。因此，在构建模型之前，将数据拆分为两部分：训练集和测试集。\n您可以使用训练集在开发阶段训练和评估模型。然后，您使用训练的模型对看不见的测试集进行预测。这种方法让您了解模型的性能和稳健性。\n幸运的是，sklearn有一个名为train_test_split()的函数，它将您的数据划分为这些集合。导入该函数，然后使用它来拆分数据：\nML Tutorial\n...\n\nfrom sklearn.model_selection import train_test_split\n\n# Split our data\ntrain, test, train_labels, test_labels = train_test_split(features,\n                                                          labels,\n                                                          test_size=0.33,\n                                                          random_state=42)\n该函数使用test_size参数随机分割数据。在这个例子中，我们现在有一个测试集（test）代表原始数据集的33％。然后剩下的数据（train）组成训练数据。我们还有列车/测试变量的相应标签，即train_labels和test_labels。\n我们现在可以继续培训我们的第一个模型。\n第四步 - 构建和评估模型\n机器学习有很多模型，每种模型都有自己的优点和缺点。在本教程中，我们将重点介绍一种通常在二进制分类任务中表现良好的简单算法，即Naive Bayes (NB)。\n首先，导入GaussianNB模块。然后使用GaussianNB()函数初始化模型，然后通过使用gnb.fit()将模型拟合到数据来训练模型：\nML Tutorial\n...\n\nfrom sklearn.naive_bayes import GaussianNB\n\n# Initialize our classifier\ngnb = GaussianNB()\n\n# Train our classifier\nmodel = gnb.fit(train, train_labels)\n在我们训练模型之后，我们可以使用训练的模型对我们的测试集进行预测，这里，我们使用predict()函数。该predict()函数返回测试集中每个数据实例的预测数组。然后我们可以输出我们的预测，以了解模型确定的内容。\n使用带有test的predict()函数输出结果：\nML Tutorial\n...\n\n# Make predictions\npreds = gnb.predict(test)\nprint(preds)\n运行代码，您将看到以下结果：\n预测输出结果\n正如您在Jupyter Notebook输出中看到的，该predict()函数返回了一个0s和1s 数组，它们代表了我们对肿瘤类的预测值（恶性与良性）。\n现在我们有了预测，让我们评估分类器的表现。\n第五步 - 评估模型的准确性\n使用真实类标签数组，我们可以通过比较两个数组（test_labelsvs.preds）来评估模型预测值的准确性。我们将使用sklearn函数accuracy_score()来确定机器学习分类器的准确性。\nML Tutorial\n...\n\nfrom sklearn.metrics import accuracy_score\n\n# Evaluate accuracy\nprint(accuracy_score(test_labels, preds))\n您将看到以下结果：\n准确性结果\n正如您在输出中看到的那样，NB分类器准确率为94.15％。这意味着分类器有94.15％的时间能够正确预测肿瘤是恶性还是良性。这些结果表明我们的30个属性的特征集是肿瘤类别的良好指标。\n您已成功构建了第一台机器学习分类器。让我们通过将所有import语句放在Notebook或脚本的顶部来重新组织代码。代码的最终版本应如下所示：\nML教程\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score\n\n# Load dataset\ndata = load_breast_cancer()\n\n# Organize our data\nlabel_names = data['target_names']\nlabels = data['target']\nfeature_names = data['feature_names']\nfeatures = data['data']\n\n# Look at our data\nprint(label_names)\nprint('Class label = ', labels[0])\nprint(feature_names)\nprint(features[0])\n\n# Split our data\ntrain, test, train_labels, test_labels = train_test_split(features,\n                                                          labels,\n                                                          test_size=0.33,\n                                                          random_state=42)\n\n# Initialize our classifier\ngnb = GaussianNB()\n\n# Train our classifier\nmodel = gnb.fit(train, train_labels)\n\n# Make predictions\npreds = gnb.predict(test)\nprint(preds)\n\n# Evaluate accuracy\nprint(accuracy_score(test_labels, preds))\n现在，您可以继续使用代码来查看是否可以使分类器的性能更佳。您可以尝试不同的功能子集，甚至尝试完全不同的算法。\n结论\n在本教程中，您学习了如何在Python中构建机器学习分类器。现在，您可以使用Scikit-learn在Python中加载数据、组织数据、训练、预测和评估机器学习分类器。本教程中的步骤可以帮助您简化在Python中使用自己的数据的过程，更多机器学习和人工智能的相关教程可以访问腾讯云社区。\n\n参考文献：《How To Build a Machine Learning Classifier in Python with Scikit-learn》\n\n问答\n机器学习入门需要哪些数学基础？\n相关阅读\n安全报告 | 2018上半年互联网恶意爬虫分析：从全景视角看爬虫与反爬虫\n安全报告 | SSH 暴力破解趋势：从云平台向物联网设备迁移\n给你的CVM安装一个面板吧！\n\n此文已由作者授权腾讯云+社区发布，原文链接：https://cloud.tencent.com/dev...\n欢迎大家前往腾讯云+社区或关注云加社区微信公众号（QcloudCommunity），第一时间获取更多海量技术实践干货哦~\n海量技术实践经验，尽在云加社区！\n\n                ", "mainLikeNum": ["9 "], "mainBookmarkNum": "6"}