{"title": "走近 Python (类比 JS) - FE cloud ", "index": "python", "content": "\n本文首发在 个人博客\nPython 是一门运用很广泛的语言，自动化脚本、爬虫，甚至在深度学习领域也都有 Python 的身影。作为一名前端开发者，也了解 ES6 中的很多特性借鉴自 Python (比如默认参数、解构赋值、Decorator等)，同时本文会对 Python 的一些用法与 JS 进行类比。不管是提升自己的知识广度，还是更好地迎接 AI 时代，Python 都是一门值得学习的语言。\n数据类型\n在 Python 中，最常用的能够直接处理的数据类型有以下几种：\n\n数字[整数(int)、浮点型(float)、长整型(long)、复数(complex)]\n字符串(str)\n布尔值(bool)\n空值(None)\n\n除此之外，Python 还提供了列表[list]、字典[dict] 等多种数据类型，这在下文中会介绍。\n类型转换与类型判断\n与 JS 十分类似，python 也能实现不同数据类型间的强制与隐式转换，例子如下：\n强制类型转换:\nint('3') # 3\nstr(3.14) # '3.14'\nfloat('3.14') # 3.14\n# 区别于 JS 只有 Number 一种类型，Python 中数字中的不同类型也能相互强制转换\nfloat(3) # 3.0\nbool(3) # True\nbool(0) # False\n隐式类型转换:\n1 + 1.0 # 2.0\n1 + False # 1\n1.0 + True # 2.0\n# 区别于 JS 的 String + Number = String, py 中 str + int 会报错\n1 + '1' # TypeError: cannot concatenate 'str' and 'int' objects\n此外写代码的时候经常会需要判断值的类型，可以 使用 python 提供的 type() 函数获取变量的类型，或者使用 isinstance(x, type) 来判断 x 是否属于相应的 type 类型。\ntype(1.3) == float # True\nisinstance('a', str) # True\nisinstance(1.3, int) # False\nisinstance(True, bool) # True\nisinstance([], list) # True\nisinstance({}, dict) # True\n有序集合类型\n集合是指包含一组元素的数据结构，有序集合即集合里面的元素是是按照顺序排列的，Python 中的有序集合大概有以下几类：list, tuple, str, unicode。\nlist 类型\nPython 中 List 类型类似于 JS 中的 Array,\nL = [1, 2, 3]\nprint L[-1] # '3'\n\nL.append(4) # 末尾添加元素\nprint L # [1, 2, 3, 4]\n\nL.insert(0, 'hi') # 指定索引位置添加元素\nprint L # ['hi', 1, 2, 3, 4]\n\nL.pop() # 末尾移除元素 L.pop(2) ?????? 2 ???\nprint L # ['hi', 1, 2, 3]\ntuple 类型\ntuple 类型是另一种有序的列表，中文翻译为“ 元组 ”。tuple 和 list 非常类似，但是，tuple 一旦创建完毕，就不能修改了。\nt = (1, 2, 3)\nprint t[0] # 1\nt[0] = 11 # TypeError: 'tuple' object does not support item assignment\n\nt = (1)\nprint t # 1  t 的结果是整数 1\n\nt = (1,) # 为了避免出现如上有歧义的单元素 tuple，所以 Python 规定，单元素 tuple 要多加一个逗号“,”\nprint t # (1,)\n无序集合类型\ndict 类型\nPython 中的 dict 类型类似于 JS 中的 {} (最大的不同是它是没有顺序的), 它有如下特点:\n\n查找速度快 (无论 dict 有 10 个元素还是 10 万个元素，查找速度都一样)\n占用内存大 (与 list 类型相反)\ndict 中的 key 不能重复\ndict 中存储的 key-value 序对是没有顺序的\n\nd = {\n    'a': 1,\n    'b': 2,\n    'c': 3\n}\n\nprint d # {'a': 1, 'c': 3, 'b': 2}  可以看出打印出的序对没有按正常的顺序打出\n\n# 遍历 dict\nfor key,value in d.items():\n    print('%s: %s' % (key,value))\n# a: 1\n# c: 3\n# b: 2\nset 类型\n有的时候，我们只想要 dict 的 key，不关心 key 对应的 value，而且要保证这个集合的元素不会重复，这时，set 类型就派上用场了。set 类型有如下特点：\n\nset 存储的元素和 dict 的 key 类似，必须是不变对象\nset 存储的元素也是没有顺序的\n\ns = set(['A', 'B', 'C', 'C'])\nprint s # set(['A', 'C', 'B'])\n\ns.add('D')\nprint s # set(['A', 'C', 'B', 'D'])\n\ns.remove('D')\nprint s # set(['A', 'C', 'B'])\nPython 中的迭代\n在介绍完 Python 中的有序集合和无序集合类型后，必然存在遍历集合的 for 循环。但是和其它语言的标准 for 循环不同，Python 中的所有迭代是通过 for ... in 来完成的。以下给出一些常用的迭代 demos:\n索引迭代：\nL = ['apple', 'banana', 'orange']\nfor index, name in enumerate(L):  # enumerate() 函数把 ['apple', 'banana', 'orange'] 变成了类似 [(0, 'apple), (1, 'banana'), (2, 'orange')] 的形式\n    print index, '-', name\n\n# 0 - apple\n# 1 - banana\n# 2 - orange\n迭代 dict 的 value:\nd = { 'apple': 6, 'banana': 8, 'orange': 5 }\nprint d.values() # [6, 8, 5]\nfor v in d.values()\n    print v\n# 6\n# 8\n# 5\n迭代 dict 的 key 和 value:\nd = { 'apple': 6, 'banana': 8, 'orange': 5 }\nfor key, value in d.items()\n    print key, ':', value\n# apple : 6\n# banana: 8\n# orange: 5\n切片操作符\nPython 提供的切片操作符类似于 JS 提供的原生函数 slice()。有了切片操作符，大大简化了一些原来得用循环的操作。\nL = ['apple', 'banana', 'orange', 'pear']\nL[0:2] # ['apple', 'banana'] 取前 2 个元素\nL[:2] # ['apple', 'banana'] 如果第一个索引是 0，可以省略\nL[:] # ['apple', 'banana', 'orange', 'pear'] 只用一个 : ，表示从头到尾\nL[::2] # ['apple', 'orange'] 第三个参数表示每 N 个取一个，这里表示从头开始，每 2 个元素取出一个来\n列表生成器\n如果要生成 [1x1, 2x2, 3x3, ..., 10x10] 怎么做？方法一是循环：\nL = []\nfor x in range(1, 11):\n    L.append(x * x)\n但是循环太繁琐，而列表生成式则可以用一行语句代替循环生成上面的 list：\n# 把要生成的元素 x * x 放到前面，后面跟 for 循环，就可以把 list 创建出来\n[x * x for x in range(1, 11)]\n# [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n列表生成式的 for 循环后面还可以加上 if 判断(类似于 JS 中的 filter() 函数)，示例如下：\n[x * x for x in range(1, 11) if x % 2 == 0]\n# [4, 16, 36, 64, 100]\nfor 循环可以嵌套，因此，在列表生成式中，也可以用多层 for 循环来生成列表。\n[m + n for m in 'ABC' for n in '123']\n# ['A1', 'A2', 'A3', 'B1', 'B2', 'B3', 'C1', 'C2', 'C3']\nPython 函数\n默认参数\nJS 中 ES6 的 默认参数正是借鉴于 Python，用法如下：\ndef greet(name='World'):\n    print 'Hello, ' + name + '.'\n\ngreet() # Hello, World.\ngreet('Python') # Hello, Python.\n可变参数\n类似于 JS 函数中自动识别传入参数的个数，Python 也提供了定义可变参数，即在可变参数的名字前面带上个 * 号。\ndef fn(*args):\n    print args\n\nfn()  # ()\nfn('a') # ('a',)\nfn('a', 'b') # ('a', 'b')\nPython 解释器会把传入的一组参数组装成一个 tuple 传递给可变参数，因此，在函数内部，直接把变量 args 看成一个 tuple 就好了。\n常用高阶函数\nPython 中常用的函数 (map、reduce、filter) 的作用和 JS 中一致，只是用法稍微不同。\nmap 函数: 接收一个函数 f 和一个 list，并通过把函数 f 依次作用在 list 的每个元素上，得到一个新的 list 并返回。\ndef f(x):\n    return x * x\nprint map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9]) # [1, 4, 9, 16, 25, 36, 49, 64, 81]\nreduce 函数: 接收一个函数 f 和一个 list(可以接受第三个值作为初始值)，reduce() 对 list 的每个元素反复调用函数 f，并返回最终结果值。\ndef f(x, y):\n    return x * y\n\nreduce(f, [1, 3, 5]) # 15\nfilter 函数: 接收一个函数 f 和一个list，这个函数 f 的作用是对每个元素进行判断，返回 True或 False，filter() 根据判断结果自动过滤掉不符合条件的元素，返回由符合条件元素组成的新 list。\ndef is_odd(x):\n    return x % 2 == 1\n\nfilter(is_odd, [1, 4, 6, 7, 9, 12, 17]) # [1, 7, 9, 17]\n匿名函数\n和 JS 的匿名函数不同的地方是，Python 的匿名函数中只能有一个表达式，且不能写 return。拿 map() 函数为例：\nmap(lambda x: x * x, [1, 2, 3, 4, 5, 6, 7, 8, 9]) # [1, 4, 9, 16, 25, 36, 49, 64, 81]\n关键词 lambda 表示匿名函数，冒号前面的 x 表示函数参数，可以看出匿名函数 lambda x: x* x 实际上就是:\ndef f(x):\n    return x * x\n闭包\n之前写过一些关于 JS 闭包的文章，比如 深入浅出JavaScript之闭包（Closure）、以及 读书笔记-你不知道的 JavaScript (上)，Python 中闭包的定义和 JS 中的是一致的即：内层函数引用了外层函数的变量，然后返回内层函数。下面来看下 Py 中闭包之 for 循环经典问题：\n# 希望一次返回3个函数，分别计算1x1,2x2,3x3:\ndef count():\n    fs = []\n    for i in range(1, 4):\n        def f():\n            return i * i\n        fs.append(f)\n    return fs\n\nf1, f2, f3 = count() # 这种写法相当于 ES6 中的解构赋值\nprint f1(), f2(), f3() # 9 9 9\n老问题了，f1(), f2(), f3() 结果不应该是 1, 4, 9 吗，实际结果为什么都是 9 呢？\n原因就是当 count() 函数返回了 3 个函数时，这 3 个函数所引用的变量 i 的值已经变成了 3。由于 f1、f2、f3 并没有被调用，所以，此时他们并未计算 i*i，当 f1 被调用时，i 已经变为 3 了。\n要正确使用闭包，就要确保引用的局部变量在函数返回后不能变。代码修改如下:\n方法一: 可以理解为创建了一个封闭的作用域，i 的 值传给 j 之后，就和 i 没任何关系了。每次循环形成的闭包都存进了内存中。\ndef count():\n    fs = []\n    for i in range(1, 4):\n        def f(j):\n            def g(): # 方法一\n                return j * j\n            return g\n        r = f(i)\n        fs.append(r)\n    return fs\n\nf1, f2, f3 = count()\nprint f1(), f2(), f3() # 1 4 9\n方法二：思路比较巧妙，用到了默认参数 j 在函数定义时可以获取到 i 的值，虽然没有用到闭包，但是和方法一有异曲同工之处。\ndef count():\n    fs = []\n    for i in range(1, 4):\n        def f(j = i): # 方法二\n            return j * j\n        fs.append(f)\n    return fs\n\nf1, f2, f3 = count()\nprint f1(), f2(), f3() # 1 4 9\ndecorator 装饰器\nES6 的语法中的 decorator 正是借鉴了 Python 的 decorator。decorator 本质上就是一个高阶函数，它接收一个函数作为参数，然后返回一个新函数。\n那装饰器的作用在哪呢？先上一段日常项目中用 ts 写的网关代码：\n@Post('/rider/detail')  // URL 路由\n@log()                   // 打印日志\n  @ResponseBody\n  public async getRiderBasicInfo(\n    @RequestBody('riderId') riderId: number,\n    @RequestBody('cityId') cityId: number,\n  ) {\n    const result = await this.riderManager.findDetail(cityId, riderId)\n    return result\n  }\n可以看出使用装饰器可以极大地简化代码，避免每个函数(比如日志、路由、性能检测)编写重复性代码。\n回到 Python 上，Python 提供的 @ 语法来使用 decorator，@ 等价于 f = decorate(f)。下面来看看 @log() 在 Python 中的实现:\n# 我们想把调用的函数名字给打印出来\n@log()\ndef factorial(n):\n    return reduce(lambda x,y: x*y, range(1, n+1))\nprint factorial(10)\n\n# 来看看 @log() 的定义\ndef log():\n    def log_decorator(f):\n        def fn(x):\n            print '调用了函数' + f.__name__ + '()'\n            return f(x)\n        return fn\n    return log_decorator\n\n# 结果\n# 调用了函数 factorial()\n# 3628800\nclass\n面向对象编程\n面向对象编程是一种程序设计范式，基本思想是：用类定义抽象类型，然后根据类的定义创建出实例。在掌握其它语言的基础上，还是比较容易理解这块知识点的，比如从下面两种写法可以看出不同语言的语言特性间竟然有如此多的共性。\nes6: (附：本文的主题是 python，所以只是初略展示下 js 中类的定义以及实例的创建，为了说明写法的相似性)\nclass Person {\n    constructor(name, age) {\n        this.name = name\n        this.age = age\n    }\n}\n\nconst child1 = new Person('Xiao Ming', 10)\nPython: (核心要点写在注释中)\n# 定义一个 Person 类：根据 Person 类就可以造成很多 child 实例\nclass Person(object):\n    address = 'Earth' # 类属性 (实例公有)\n    def __init__(self, name, age): # 创建实例时，__init__()方法被自动调用\n        self.name = name\n        self.age = age\n    def get_age(self): # 定义实例方法，它的第一个参数永远是 self，指向调用该方法的实例本身，其他参数和普通函数是一样的\n        return self.age\n\nchild1 = Person('Xiao Ming', 10)\nchild2 = Person('Xiao Hong', 9)\n\nprint child1.name # 'Xiao Ming'\nprint child2.get_age() # 9\nprint child1.address # 'Earth'\nprint child2.address # 'Earth'\n继承\nchild 属于 Student 类，Student 类属于 People 类，这就引出了继承: 即获得了父类的方法属性后又能添加自己的方法属性。\nclass Person(object):\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\nclass Student(Person):\n    def __init__(self, name, age, grade):\n        super(Student, self).__init__(name, age) # 这里也能写出 Person.__init__(self, name, age)\n        self.grade = grade\n\ns = Student('Xiao Ming', 10, 90)\nprint s.name # 'Xiao Ming'\nprint s.grade # 90\n可以看到子类在父类的基础上又增加了 grade 属性。我们可以再来看看 s 的类型。\nisinstance(s, Person)\nisinstance(s, Student)\n可以看出，Python 中在一条继承链上，一个实例可以看成它本身的类型，也可以看成它父类的类型。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "2"}