{"title": " Python：Tornado 第四章：Tornado网站部署：第三节：运营期配置 - python3 ：公司内部培训专栏 ", "index": "python", "content": "上一篇文章：Python：Tornado 第四章：Tornado网站部署：第二节：静态文件\n\n1、后台运行\n一般调试过程中我们使用python app.py运行网站，方便我们在命令行中看运行状况。\n但在生产环境下我们需要后台运行网站。我们可以使用linux的nohup命令。\nnohup python app.py >> log/app.log &\n2、supervisor守护进程\n使用nuhup可以后台运行一个进程，但是一旦网站出现错误，进程关闭，网站将会停止运行。这时候就需要supervisor来帮我们守护进程，自动重启网站。\nSupervisord是用Python实现的一款非常实用的进程管理工具。\n安装 配置\nsudo apt-get install supervisor\n修改配置文/etc/supervisord.conf\n只需要将最后一行改为下面的形式就可以了：\n[include]\nfiles = /etc/supervisor/conf.d/.conf\n默认好像是以“/.ini”结尾的配置文件\nSupervisor 配置文件 /etc/supervisor/conf.d：\n在/etc/supervisor/conf.d/下创建文件：tornado.conf\n\n# 为了方便管理，增加一个tornado组\n[group:tornados]\nprograms=tornado-0,tornado-1,tornado-2\n# 分别定义三个tornado的进程配置\n[program:tornado-0]\n# 进程要执行的命令\ncommand=python /data/web/advance_python/tornado_asyn/hello.py --port=8020\ndirectory=/data/web/advance_python/tornado_asyn/\nuser=www-data\n# 自动重启\nautorestart=true\nredirect_stderr=true\n# 日志路径\nstdout_logfile=/home/lidongwei/log/supervisor/tornado/tornado0.log\nloglevel=info\n[program:tornado-1]\ncommand=python /data/web/advance_python/tornado_asyn/hello.py --port=8021\ndirectory=/data/web/advance_python/tornado_asyn/\nuser=www-data\nautorestart=true\nredirect_stderr=true\nstdout_logfile=/home/lidongwei/log/supervisor/tornado/tornado1.log\nloglevel=info\n[program:tornado-2]\ncommand=python /data/web/advance_python/tornado_asyn/hello.py --port=8022\ndirectory=/data/web/advance_python/tornado_asyn/\nuser=www-data\nautorestart=true\nredirect_stderr=true\nstdout_logfile=/home/lidongwei/log/supervisor/tornado/tornado2.log\n启动supervisor\n使用默认的配置文件 /etc/supervisord.conf\nsupervisord\n明确指定配置文件\nsupervisord -c /etc/supervisord.conf\n使用 user 用户启动supervisord\nsupervisord -u user\n查看、操作进程状态\n[/etc/supervisor/conf.d]$ sudo supervisorctl\n[sudo] password for lidongwei:\ntornados:tornado-0 RUNNING pid 10012, uptime 1:22:04\ntornados:tornado-1 RUNNING pid 10011, uptime 1:22:04\ntornados:tornado-2 RUNNING pid 10013, uptime 1:22:04\n\n# 停止运行tornado-1服务器进程\nsupervisor> stop tornados:tornado-1\ntornados:tornado-1: stopped\nsupervisor> status\ntornados:tornado-0 RUNNING pid 10012, uptime 1:23:19\ntornados:tornado-1 STOPPED Mar 12 06:46 PM\ntornados:tornado-2 RUNNING pid 10013, uptime 1:23:19\n\n# 停止运行整个tornado服务器进程组\nsupervisor> stop tornados:\ntornado-0: stopped\ntornado-2: stopped\nsupervisor> status\ntornados:tornado-0 STOPPED Mar 12 06:50 PM\ntornados:tornado-1 STOPPED Mar 12 06:46 PM\ntornados:tornado-2 STOPPED Mar 12 06:50 PM\nsupervisorctl 命令介绍\nsupervisorctl stop program_name\n启动某个进程\nsupervisorctl start program_name\n重启某个进程\nsupervisorctl restart program_name\n结束所有属于名为 groupworker 这个分组的进程 (start，restart 同理)\nsupervisorctl stop groupworker:\n结束 groupworker:name1 这个进程 (start，restart 同理)\nsupervisorctl stop groupworker:name1\n停止全部进程，注：start、restart、stop 都不会载入最新的配置文件\nsupervisorctl stop all\n载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程\nsupervisorctl reload\n根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启\nsupervisorctl update\n\n总结\nSupervisor和你系统的初始化进程一起工作，并且它应该在系统启动时自动注册守护进程。\n当supervisor启动后，程序组会自动在线。默认情况下，Supervisor会监控子进程，并在任何程序意外终止时重生\n。如果你想不管错误码，重启被管理的进程，你可以设置autorestart为true。\nSupervisor不只可以使管理多个Tornado实例更容易，还能让你在Tornado服务器遇到意外的服务中断后重新上线时泰然处之。\n三个tornado进程都正常运行，并且比逐个管理方便的多\n3、nginx代理多进程\n虽然Tornado的内置IOLoop服务器可以直接作为运营服务器运行，但部署一个应用到生产环境面临着最大化利用系统资源的新挑战。因为Tornado架构的异步特性，无法用大多数Python网络框架标准WSGI进行站点部署，为了强化Tornado应用的请求吞吐量，在运营环境中通常采用反向代理+多Tornado后台实例的部署策略。\n反向代理是代理服务器的一张。它根据客户端的请求，从后端的服务器上获取资源，然后将这些资源返回给客户端。当前最常用的开源反向代理服务器是Nginx：网站通过Internet DNS服务器将用户浏览器的访问定位到多台Nginx服务器上，每台Nginx服务器又将访问重定向到多台Tornado服务器上。多个Tornado服务器既可以部署在一台物理机上，也可以部署在多台物理机上。以资源最大化利用为目的，应该以每个物理机的CPU数量来决定分配在该台物理机上运行的Tornado实例数。\nNginx配置反向代理的方法非常简单，打开Nginx配置文件nginx.conf，进行类似如下配置，然后重启Nginx服务器即可：\nuser nginx;\nworker_process 5;\n\nerror_log /var/log/nginx/error.log\n\npid /var/run/nginx.pid;\n\nevents{\nuse epoll;\n}\n\nproxy_next_upstream error;\n\nupstream backs{\n//配置3个后台Tornado服务\nserver 192.168.0.1:8001;\nserver 192.169.0.1:8002;\nserver 192.168.0.2:8003;\n}\n\nserver{\nlisten 80; //监听80端口\nserver_name www.mysite.com;\n}\n\nlocation / {\nproxy_pass http://backs;\n}\n除了一些标准配置，这个配置文件最重要的部分是upstram、listen和prox_pass指令。upstream backs{}定义了3个人后台Tornado服务的IP地址及各自的端口号；server{}中的listen定义了Nginx监听端口号80；proxy_pass定义了所有对根目录的访问由之前定义的upstream backs中的服务器组提供服务，在默认情况下Nginx以循环方式分配到达的访问请求。_\n4、nginx配合supervisor实现多进程\n在app.py中添加接受命令行参数：\nimport tornado.httpserver\nimport tornado.ioloop\nimport tornado.options\nimport tornado.web\n\nfrom tornado.options import define, options\ndefine(\"port\", default=8000, help=\"run on the given port\", type=int)\n\nclass IndexHandler(tornado.web.RequestHandler):\n    def get(self):\n        greeting = self.get_argument('greeting', 'Hello')\n        self.write(greeting + ', friendly user!')\n\nif __name__ == \"__main__\":\n    tornado.options.parse_command_line()\n    app = tornado.web.Application(handlers=[(r\"/\", IndexHandler)])\n    http_server = tornado.httpserver.HTTPServer(app)\n    http_server.listen(options.port)\n    tornado.ioloop.IOLoop.instance().start()\n可在supervisor配置文件中添加：\n[program:tornado-8000]\ncommand=python /var/www/main.py --port=8000\ndirectory=/var/www\nuser=www-data\nautorestart=true\nredirect_stderr=true\nstdout_logfile=/var/log/tornado.log\nloglevel=info\n\n[program:tornado-8001]\ncommand=python /var/www/main.py --port=8001\ndirectory=/var/www\nuser=www-data\nautorestart=true\nredirect_stderr=true\nstdout_logfile=/var/log/tornado.log\nloglevel=info\n使用nginx代理：\nuser nginx;\nworker_processes 5;\nerror_log /var/log/nginx/error.log;\npid /var/run/nginx.pid;\nevents {\nworker_connections 1024;\nuse epoll;\n}\nproxy_next_upstream error;\nupstream tornadoes {\nserver 127.0.0.1:8000;\nserver 127.0.0.1:8001;\nserver 127.0.0.1:8002;\nserver 127.0.0.1:8003;\n}\nserver {\nlisten 80;\nserver_name www.example.org *.example.org;\nlocation /static/ {\nroot /var/www/static;\nif ($query_string) {\nexpires max;\n}\n}\nlocation / {\nproxy_pass_header Server;\nproxy_set_header Host $http_host;\nproxy_redirect off;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Scheme $scheme;\nproxy_pass http://tornadoes;\n}\n}\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "1"}