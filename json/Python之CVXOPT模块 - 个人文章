{"title": "Python之CVXOPT模块 - 个人文章 ", "index": "python", "content": "  Python中支持Convex Optimization（凸规划）的模块为CVXOPT,其安装方式为：\n\n卸载原Pyhon中的Numpy\n安装CVXOPT的whl文件，链接为：https://www.lfd.uci.edu/~gohl...\n\n安装Numpy+mkl的whl文件，链接为：https://www.lfd.uci.edu/~gohl...\n\n\n之所以选择这种安装方式，是因为Python的whl和pip直接install的不兼容性。\n  CVXOPT的官方说明文档网址为：http://cvxopt.org/index.html， 现最新版本为1.1.9,由Martin Andersen, Joachim Dahl 和Lieven Vandenberghe共同开发完成，能够解决线性规划和二次型规划问题，其应用场景如SVM中的Hard Margin SVM.\n  CVXOPT使用举例如下：\n线性规划问题\n例1:\n\nPython程序代码：\nimport numpy as np\nfrom cvxopt import matrix, solvers\n\nA = matrix([[-1.0, -1.0, 0.0, 1.0], [1.0, -1.0, -1.0, -2.0]])\nb = matrix([1.0, -2.0, 0.0, 4.0])\nc = matrix([2.0, 1.0])\n\nsol = solvers.lp(c,A,b)\n\nprint(sol['x'])\nprint(np.dot(sol['x'].T, c))\nprint(sol['primal objective'])\n输出结果：\n     pcost       dcost       gap    pres   dres   k/t\n 0:  2.6471e+00 -7.0588e-01  2e+01  8e-01  2e+00  1e+00\n 1:  3.0726e+00  2.8437e+00  1e+00  1e-01  2e-01  3e-01\n 2:  2.4891e+00  2.4808e+00  1e-01  1e-02  2e-02  5e-02\n 3:  2.4999e+00  2.4998e+00  1e-03  1e-04  2e-04  5e-04\n 4:  2.5000e+00  2.5000e+00  1e-05  1e-06  2e-06  5e-06\n 5:  2.5000e+00  2.5000e+00  1e-07  1e-08  2e-08  5e-08\nOptimal solution found.\n{'primal objective': 2.4999999895543072, 's': <4x1 matrix, tc='d'>, 'dual infeasibility': 2.257878974569382e-08, 'primal slack': 2.0388399547464153e-08, 'dual objective': 2.4999999817312535, 'residual as dual infeasibility certificate': None, 'dual slack': 3.529915972607509e-09, 'x': <2x1 matrix, tc='d'>, 'iterations': 5, 'gap': 1.3974945737723005e-07, 'residual as primal infeasibility certificate': None, 'z': <4x1 matrix, tc='d'>, 'y': <0x1 matrix, tc='d'>, 'status': 'optimal', 'primal infeasibility': 1.1368786228004961e-08, 'relative gap': 5.5899783359379607e-08}\n[ 5.00e-01]\n[ 1.50e+00]\n\n[[ 2.49999999]]\n例2\n\nPython程序代码\nimport numpy as np\nfrom cvxopt import matrix, solvers\n\nA = matrix([[1.0, 0.0, -1.0], [0.0, 1.0, -1.0]])\nb = matrix([2.0, 2.0, -2.0])\nc = matrix([1.0, 2.0])\nd = matrix([-1.0, -2.0])\n\nsol1 = solvers.lp(c,A,b)\nmin = np.dot(sol1['x'].T, c)\nsol2 = solvers.lp(d,A,b)\nmax = -np.dot(sol2['x'].T, d)\n\nprint('min=%s,max=%s'%(min[0][0], max[0][0]))\n输出结果：\n     pcost       dcost       gap    pres   dres   k/t\n 0:  4.0000e+00 -0.0000e+00  4e+00  0e+00  0e+00  1e+00\n 1:  2.7942e+00  1.9800e+00  8e-01  9e-17  7e-16  2e-01\n 2:  2.0095e+00  1.9875e+00  2e-02  4e-16  2e-16  7e-03\n 3:  2.0001e+00  1.9999e+00  2e-04  2e-16  6e-16  7e-05\n 4:  2.0000e+00  2.0000e+00  2e-06  6e-17  5e-16  7e-07\n 5:  2.0000e+00  2.0000e+00  2e-08  3e-16  7e-16  7e-09\nOptimal solution found.\n     pcost       dcost       gap    pres   dres   k/t\n 0: -4.0000e+00 -8.0000e+00  4e+00  0e+00  1e-16  1e+00\n 1: -5.2058e+00 -6.0200e+00  8e-01  1e-16  7e-16  2e-01\n 2: -5.9905e+00 -6.0125e+00  2e-02  1e-16  0e+00  7e-03\n 3: -5.9999e+00 -6.0001e+00  2e-04  1e-16  2e-16  7e-05\n 4: -6.0000e+00 -6.0000e+00  2e-06  1e-16  2e-16  7e-07\nOptimal solution found.\nmin=2.00000000952,max=5.99999904803\n二次型规划问题\n\n其中P,q,G,h,A,b为输入矩阵，该问题求解采用QP算法。\n例1：\n\nPython程序代码：\nfrom cvxopt import matrix, solvers\n\nQ = 2*matrix([[2, .5], [.5, 1]])\np = matrix([1.0, 1.0])\nG = matrix([[-1.0,0.0],[0.0,-1.0]])\nh = matrix([0.0,0.0])\nA = matrix([1.0, 1.0], (1,2))\nb = matrix(1.0)\n\nsol=solvers.qp(Q, p, G, h, A, b)\nprint(sol['x'])\nprint(sol['primal objective'])\n输出结果：\n     pcost       dcost       gap    pres   dres\n 0:  1.8889e+00  7.7778e-01  1e+00  2e-16  2e+00\n 1:  1.8769e+00  1.8320e+00  4e-02  0e+00  6e-02\n 2:  1.8750e+00  1.8739e+00  1e-03  1e-16  5e-04\n 3:  1.8750e+00  1.8750e+00  1e-05  6e-17  5e-06\n 4:  1.8750e+00  1.8750e+00  1e-07  2e-16  5e-08\nOptimal solution found.\n[ 2.50e-01]\n[ 7.50e-01]\n例2：\n\nPython程序代码：\nfrom cvxopt import matrix, solvers\n\nP = matrix([[1.0, 0.0], [0.0, 0.0]])\nq = matrix([3.0, 4.0])\nG = matrix([[-1.0, 0.0, -1.0, 2.0, 3.0], [0.0, -1.0, -3.0, 5.0, 4.0]])\nh = matrix([0.0, 0.0, -15.0, 100.0, 80.0])\n\nsol=solvers.qp(P, q, G, h)\nprint(sol['x'])\nprint(sol['primal objective'])\n输出结果\n     pcost       dcost       gap    pres   dres\n 0:  1.0780e+02 -7.6366e+02  9e+02  0e+00  4e+01\n 1:  9.3245e+01  9.7637e+00  8e+01  6e-17  3e+00\n 2:  6.7311e+01  3.2553e+01  3e+01  6e-17  1e+00\n 3:  2.6071e+01  1.5068e+01  1e+01  2e-17  7e-01\n 4:  3.7092e+01  2.3152e+01  1e+01  5e-18  4e-01\n 5:  2.5352e+01  1.8652e+01  7e+00  7e-17  3e-16\n 6:  2.0062e+01  1.9974e+01  9e-02  2e-16  3e-16\n 7:  2.0001e+01  2.0000e+01  9e-04  8e-17  5e-16\n 8:  2.0000e+01  2.0000e+01  9e-06  1e-16  2e-16\nOptimal solution found.\n[ 7.13e-07]\n[ 5.00e+00]\n\n20.00000617311241\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}