{"title": "WSGI规范笔记 - _Zhao ", "index": "wsgi,python", "content": "概述\n\nWSGI接口包含两方面：server/gateway 及 application/framework。\nserver调用由application提供的可调用对象。\n另外在server和application之间还可能有一种称作middleware的中间件。\n可调用对象是指：函数、方法、类或者带有callable方法的实例。\n\n\n关于application\n\n函数、方法、类及带有callable方法的实例等可调用对象都可以作为the application object。\nWSGI协议要求：\nthe application object接受两个参数且可以被多次调用\n\n这两个参数分别为：\n1.CGI式的字典；\n2.回调函数：application用来向server传递http状态码/消息/http头\n\n另外协议要求可调用对象必须将响应体封装成一个可迭代的strings返回。\n\n# the application object. 可以使用其他名字,\n# 但是在使用mod_wsgi 时必须为  \"application\"\ndef application( environ, start_response):\n#  函数接受两个参数:\n# environ ：包含有CGI 式环境变量的字典，由server负责提供内容\n# start_response：由server提供的回调函数，其作用是将状态码和响应头返回给server\n\n# 构造响应体，以可迭代字符串形式封装\n    response_body = 'The request method was %s' % environ['REQUEST_METHOD']\n\n# HTTP 响应码及消息\n   status = '200 OK'\n\n# 提供给客户端的响应头.\n# 封装成list of tuple pairs 的形式:\n# 格式要求：[(Header name, Header value)].\n   response_headers = [('Content-Type', 'text/plain'),\n                       ('Content-Length', str(len(response_body)))]\n\n# 将响应码/消息及响应头通过传入的start_reponse回调函数返回给server\n   start_response(status, response_headers)\n\n#  响应体作为返回值返回\n# 注意这里被封装到了list中.\n   return [response_body]\n\n\n\n关于server\n\n从概述中可以知道，WSGI server必须要调用application，同时，从application的协议要求可知：\n1. WSGI server必须向application提供环境参数，因此，自身也必须能够获取环境参数。\n2. WSGI server接收application的返回值作为响应体。\n最简单的WSGI server为Python自带的wsgiref.simple_server\n示例如下：\n\nfrom wsgiref.simple_server import make_server\nsrv = make_server('localhost', 8080, hello_world)\nsrv.serve_forever()\n\n\n\n关于middleware\n\nmiddleware的概念没有appllication和server那么容易理解。\n假设一个符合application标准的可调用对象，它接受可调用对象作为参数，返回一个可调用对象的对象。\n那么对于server来说，它是一个符合标准的可调用对象，因此是application。\n而对于application来说，它可以调用application，因此是server。\n这样的可调用对象称为middleware。\n\nmiddleware的概念非常接近decorator。\n\n以一个路由的例子示例：\n\nimport re\n\n# 这是一个标准的application object\ndef index(environ, start_response):\n    start_response('200 OK', [('Content-Type', 'text/html')])\n    return ['index page']\n\n# 这是一个标准的application object\ndef hello(environ, start_response):\n    start_response('200 OK', [('Content-Type', 'text/html')])\n    return ['hello page']\n\n# 这是一个标准的application object\ndef not_found(environ, start_response):\n    start_response('404 NOT FOUND', [('Content-Type', 'text/plain')])\n    return ['Not Found Page']\n\n# map urls to functions\nurls = [\n    (r'^$', index),\n    (r'hello/?$', hello)\n]\n# 这是一个middleware\n# 根据不同的route返回不同的application object\ndef application(environ, start_response):\n    path = environ.get('PATH_INFO', '').lstrip('/')\n    for regex, callback in urls:\n        match = re.search(regex, path)\n        if match is not None:\n            return callback(environ, start_response)\n    return not_found(environ, start_response）\n\n\n\n                ", "mainLikeNum": ["4 "], "mainBookmarkNum": "12"}