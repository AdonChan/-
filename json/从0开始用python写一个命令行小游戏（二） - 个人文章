{"title": "从0开始用python写一个命令行小游戏（二） - 个人文章 ", "index": "python3.x,python", "content": "我回来了！今天，我们真正会亮相的植物要出来了哦！还有，我们敌人的基础类(我叫它BaseZombie)也会闪亮登(lai)场(xi)。很期待？那就开始吧！\n注：我使用的是Python 3.7(但只要是3，变化应该都不大)。还有，这是第二篇。没看过上篇的话，这是链接。闲话少说，进入正题！\n两种植物：Sunflower和Peashooter\n\n向日葵是Sunflower，豌豆射手是Peashooter。好，上代码！\n向日葵\nboard = [0] * 10\nsunlight = 50\n\nclass GameObject:\n    indicating_char = ''       # 子类已经出现，所以把基础类的显示字符删除\n    pass                       # 剩余部分同前\n\nclass Plant(GameObject):\n    pass                       # 同前，但将显示字符删除\n\nclass Sunflower(Plant):\n    \"\"\" 向日葵 \"\"\"\n    indicating_char = 's'\n    \n    def __init__(self, pos):\n        \"\"\" 初始化，阳光50 \"\"\"\n        super().__init__(pos, 50)\n    \n    def step(self):\n        \"\"\" 生产阳光 \"\"\"\n        global sunlight\n        sunlight += 25\n嗯，向日葵编好了。IPython(注：增强版Python shell)，你怎么看？\nIn [1]: import game as g\n\nIn [2]: g.sunlight\nOut[2]: 50\n\nIn [3]: g.Sunflower(0)\nOut[3]: s\n\nIn [4]: g.board[0].step()\n\nIn [5]: g.sunlight\nOut[5]: 25                    # 种植向日葵损失50，它又产生25\n成功！现在，该编豌豆射手了。\n豌豆射手\nclass Peashooter(Plant):\n    indicating_char = 'p'\n    \n    def __init__(self, pos):\n        super().__init__(pos, 100)           # 豌豆射手需要100阳光\n    \n    def step(self):\n        for obj in board[self.pos:]:\n            if isinstance(obj, BaseZombie):  # 就当BaseZombie存在\n                pass                         # 哎呀！\n好好编程，“哎呀”什么？因为我突然发现，目前还没有定义角色的生命值(你们尽情吐槽吧)！于是，在GameObject的__init__方法前面追加：\nclass GameObject:\n    blood = 10             # 初始生命值\n    pass                   # 剩余同前\n然后又突然想到，角色死没死不也是用这个定义的吗？于是加了几个方法和属性：\nclass GameObject:\n    indicating_char = ''\n    blood = 10\n    alive = True\n    \n    def __init__(self, pos):\n        pass                   # 同前\n    \n    def step(self):\n        pass\n    \n    def die(self):\n        pass\n    \n    def check(self):\n        if self.blood < 1:\n            self.alive = False\n    \n    def full_step(self):\n        self.check()\n        if not self.alive:\n            board[self.pos] = 0\n            self.die()\n        else:\n            self.step()\n好，现在把豌豆射手里的那个pass改成：\nfor obj in board[self.pos:]:\n    if isinstance(obj, BaseZombie):\n        obj.blood -= 1.5            # 这里原来是pass\n但是因为没有BaseZombie，我们也不能使用Peashooter。好，现在，3，2，1，放僵尸！\n僵尸基础类\n我们即将亲手创造游戏中的大坏蛋：僵尸！来吧，面对这个基础类······\nclass BaseZombie(GameObject):\n    indicating_char = 'b'\n    \n    def __init__(self, pos, speed, harm, die_to_exit=False):\n        super().__init__(pos)\n        self.speed = speed\n        self.harm = harm\n        self.die_to_exit = die_to_exit\n    \n    def step(self):\n        if board[self.pos - self.speed] == 0:\n            orig_pos = self.pos\n            self.pos -= self.speed\n            board[orig_pos] = 0\n            board[self.pos] = self\n        elif isinstance(board[self.pos - 1], Plant):\n            board[self.pos - 1].blood -= 1\n        else:\n            self.pos -= 1\n            board[self.pos + 1] = 0\n            board[self.pos] = self\n    \n    def die(self):\n        if self.die_to_exit:\n            import sys\n            sys.exit()\n好，让我们的新类们去IPython里大展身手吧！\nIn [1]: import game as g\n\nIn [2]: def step():\n   ...:     for obj in g.board:\n   ...:         if isinstance(obj, g.GameObject):\n   ...:             obj.step()\n   ...: \n\nIn [3]: g.Sunflower(0)\n\nIn [4]: step()\n\nIn [5]: step()\n\nIn [6]: step()\n\nIn [7]: step()\n\nIn [8]: g.sunlight\nOut[8]: 100\n\nIn [9]: g.Peashooter(1)\n\nIn [10]: g.BaseZombie(9, 1, 1)\n\nIn [11]: step()\n\nIn [12]: step()\n\n......\nIn [18]: step()\n\nIn [19]: g.board\nOut[19]: [s, p, 0, 0, 0, 0, 0, 0, 0, 0]\n看来，豌豆射手打败僵尸了！\n下集预告\n下次，赶快把BaseZombie的子类编出来后，我们就要开始开发用户界面了！欢迎来看！\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "0"}