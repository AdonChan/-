{"title": "Python之利用reduce函数求序列的最值及排序 - 个人文章 ", "index": "python", "content": "  在一般将Python的reduce函数的例子中，通常都是拿列表求和来作为例子。那么，是否还有其他例子呢？  本次分享将讲述如何利用Python中的reduce函数对序列求最值以及排序。  我们用reduce函数对序列求最值的想法建立在冒泡排序的算法上。先上例子？\nfrom functools import reduce\nfrom random import randint\n\nA = [randint(1, 100) for _ in range(10)]\n\nprint('The origin list A is %s'%A)\n\nf = lambda x,y: x if x>y else y\nprint('max of list A is %s.'%reduce(f,A))\nprint(reduce(f, A) == max(A))\n在上述代码中，列表A是一个含有10个元素的列表，里面的元素是1到100内的随机整数。f是lambda函数，用于求两个数的最大值。根据reduce函数的运行原理，reduce(f, A)先会求出A中第一个和第二个元素的最大值，然后将这个最大值与第三个元素比较，返回两者中的最大值，这个最大值也是前三个元素的最大值，以此类推，我们最后得到的结果reduce(f, A)就是整个列表A中的最大值。  将上述代码中的lambda函数中的>号改为<号就能求得A的最小值。  在此基础上，我们再次利用冒泡排序的算法，对整个列表进行排序。具体的算法是：先用reduce函数求出整个列表的最大值，再用reduce函数求出整个列表去掉该最大值后的剩下元素中的最大值，以此类推，就能对整个列表进行排序了。代码如下：\nfrom functools import reduce\nfrom random import randint\n\nA = [randint(1, 100) for _ in range(10)]\nprint('The origin list A is %s'%A)\n\nB = []\nwhile(A):\n    t = reduce(lambda x,y: x if x>y else y, A)\n    B.append(t)\n    A.remove(t)\n\nprint('The sorted list is %s'%B)\n输出结果如下：\nThe origin list A is [27, 64, 81, 14, 18, 16, 66, 24, 43, 91]The sorted list is [91, 81, 66, 64, 43, 27, 24, 18, 16, 14]\n  本次分享到此结束，欢迎大家交流~~\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "2"}