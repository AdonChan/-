{"title": "python 正则表达式 - 个人文章 ", "index": "python", "content": "python 正则表达式\npython 3.5 都是 unicode 模式，w 可以直接匹配unicode\nmatch\nmatch 是从头开始匹配,是要头部相同就认为匹配，不要求匹配整个字符串\n>>> import re\n>>> pattern = re.compile(r'\\w+\\d{6}')\n>>> m = pattern.match(\"测试201710\") // 如果不能匹配到返回None，匹配到返回Match 对象\n<_sre.SRE_Match object; span=(0, 8), match='测试201710'>\n>>> pattern.match(\"#测试201710\") // None\nsearch 是如果包含匹配的字符串就符合要求\n>>> pattern.search(\"#测试201710\")\n<_sre.SRE_Match object; span=(1, 9), match='测试201710'>\nfind\nfindall\n>>> pattern.findall(\"测试201710-测试201711-测试201712\")\n['测试201710', '测试201711', '测试201712']\nfinditer\n>>> text = \"He was carefully disguised but captured quickly by police.\"\n>>> for m in re.finditer(r\"\\w+ly\", text):\n...     print('%02d-%02d: %s' % (m.start(), m.end(), m.group(0)))\n07-16: carefully\n40-47: quickly\ngroup\ngroup\n>>> m = re.match(r\"(\\d+)\\.(\\d+)\", \"24.1632\")\n>>> m.groups()\n('24', '1632')\n>>> \n>>> m.group(0)\n'24.1632'\n>>> m.group(1)\n'24'\n>>> m.group(2)\n'1632'\ngroupdict\n>>> m = re.match(r\"(?P<first_name>\\w+) (?P<last_name>\\w+)\", \"Malcolm Reynolds\")\n>>> m.groupdict()\n{'first_name': 'Malcolm', 'last_name': 'Reynolds'}\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}