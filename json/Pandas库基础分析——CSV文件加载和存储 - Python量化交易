{"title": "Pandas库基础分析——CSV文件加载和存储 - Python量化交易 ", "index": "python", "content": "前言\nCSV（Comma-Separated Values）称为逗号分隔值，是一种通用简单的文件格式。CSV文件以纯文本形式存储表格数据，文件的数据列以半角逗号分隔，每一行数据都以回车符结束，通常用记事本就能打开，也可以使用Excel这样的电子表格工具直接打开，常用于数据库导入导出文件格式。\nCSV文件后缀为.csv，excel中可将.xls文件另存为csv格式，CSV文件将xls工作表中的单元格所显示的文本和数值以逗号分离进行保存，同样Excel打开CSV文件时，也以逗号分离CSV文件内容填充单元格。本文主要介绍在Python中使用CSV模块对CSV文件进行读写的方法，以及Pandas库中将CSV文件以dataFarme数据结构进行处理的方法。\n\n注：如果单元格中包含逗号，则该单元格中的内容以双引号包含\n\nCSV模块操作\nPython自带的CSV模块，可像操作Excel一样读写行列内容，近一步可对其单元格进行操作。\n1、CSV文件读取\n使用reader方法，接收一个可迭代的csv文件对象，返回一个生成器，以行为单位从中解析出csv文件内容，经过reader方法读取的csv文件内容为str类型。\nif os.path.isfile('C:\\programPY\\Pandas_Example_Test\\CsvDataExampRd.csv'):\nf=codecs.open('C:\\programPY\\Pandas_Example_Test\\CsvDataExampRd.csv','rb','gb2312')#GB2312——>unicode\n    reader = csv.reader(f)#unicode——>utf-8\n    rows= [row for row in reader]\n    for i in rows:\n        for j in i:\n            print j.decode('utf8'),\n        print ''\n    f.close()\n\nreader方法读取单列内容时只能通过列的序号，如row= [row[1] for row in reader]，而DictReader方法返回的每一个单元格都存放在一个字典的值内，而字典的键正是这个单元格的标题（即列头），因此可根据标题获取某列内容，如row = [row['温度'] for row in reader]。\n\nDictReader方法原型如下，其中可选参数fieldnames是一个序列，每个值都是一个键，按序配对每一行数据的值，组成一个键－值对，如果没有指定，那么第一行数据为fieldnames。默认为None，也就是默认第一行字符串列表为fieldnames。\nclass csv.DictReader(csvfile, fieldnames=None, restkey=None, restval=None, dialect='excel', args, *kwds)\nif os.path.isfile('C:\\programPY\\Pandas_Example_Test\\CsvDataExampRd.csv'):\nf=codecs.open('C:\\programPY\\Pandas_Example_Test\\CsvDataExampRd.csv','r','gb2312')\nreader = csv.DictReader(f)\nrows = [row for row in reader]\n    for i in rows:\n        for key, value in i.items():\n            print key.decode('utf8'), value,\n        print ''    \n    f.close()\n    \n\n注：DictReader方法不要求使用'b'参数打开csvfile文件对象，即'rb'、'r'都可。理论上推荐使用r模式打开文本文件，因为此模式下打开文本文件时，python默认会对文本进行优化处理。\n2、CSV文件写入\nwriter方法返回一个写入器（writer object）。在使用写入器的过程中，会将所有非字符串数据转换为字符串数据。writerow方法每次写入一行数据，writerows可一次将所有数据写入。每行数据以列表方式集合，如se = [[u'',u'温度',u'数据包',u'转速'], ['2016/1/4',12.8,13222908,1298], ['2016/1/5',12.8,13332908,1398]]。\nif os.path.isfile('C:\\programPY\\Pandas_Example_Test\\CsvDataExampWr.csv'):\n    f=codecs.open('C:\\programPY\\Pandas_Example_Test\\CsvDataExampWr.csv','wb','gb2312')\n    writer = csv.writer(f) \n    for row in se: \n        writer.writerow(row) \n    f.close()\n\n\n如果想要在文件中加入数据，而不是清空已存在内容再新增加入，可在open文件时选择'ab'方式，如果使用空格替代逗号分隔符，可使用delimiter参数，但Excel中只能以逗号分离单元格进行显示。\nif os.path.isfile('C:\\programPY\\Pandas_Example_Test\\CsvDataExampWr.csv'):\n    f=codecs.open('C:\\programPY\\Pandas_Example_Test\\CsvDataExampWr.csv','ab','gb2312')\n    writer = csv.writer(f, delimiter=' ')\n    writer.writerow(['2017/1/4',18.8,17222908,2398])\n    f.close()\n\n\nDictWriter方法将字典值写入csvfile文件对象中，同样也未要求在打开csvfile文件对象时使用'b'参数。writerow方法每次写入一行数据，writerows可一次将所有数据写入。多行数据以字典形式的列表集合存储，如dic = [{u'':'2016/1/4', u'温度':12.8, u'数据包':13222908, u'转速':1298},{u'':'2016/1/5', u'温度':13.8, u'数据包':13222908, u'转速':1298},{u'':'2016/1/6', u'温度':16.8, u'数据包':132332908, u'转速':15598}]DictWriter方法原型如下，其中fieldnames是必选参数，以序列形式指定输入csvfile对象的键及其顺序。\nclass csv.DictWriter(csvfile, fieldnames, restval='', extrasaction='raise', dialect='excel', args, *kwds)\nif os.path.isfile('C:\\programPY\\Pandas_Example_Test\\CsvDataExampWr.csv'):\n    f=codecs.open('C:\\programPY\\Pandas_Example_Test\\CsvDataExampWr.csv','w','gb2312')\n    ke = dic[0].keys()\n    va = dic[0].values()    \n    print \"keys:\",ke\n    print \"values:\",va\n    dictWriter = csv.DictWriter(f, fieldnames=ke) \n    dictWriter.writerows(dic) \n    f.close()\n    \n\n\nPandas库读写CSV文件\nPandas提供了用于将表格型数据读取为DataFrame对象的方法，其中read_csv可支持从文件、URL、文件型对象中加载带分隔符（默认为逗号）的数据，同时也可以通过to_csv方法将DataFrame数据以逗号分隔方式存储于CSV文件中。\n1、加载CSV文件\nif os.path.isfile('C:\\programPY\\Pandas_Example_Test\\CsvDataExampRd.csv'):\n    df_csvload = pd.read_csv('C:\\programPY\\Pandas_Example_Test\\CsvDataExampRd.csv',parse_dates=True,index_col=0,encoding='gb2312')\nprint df_csvload\n\n当指明原始文件数据没有列索引时，即header=None，read_csv为自动加上列索引，除非你给定列索引的名字。header=0时，表示文件第0行（即第一行为列索引。增加names值会替换原来的列索引，如names=range(2,6)，列索引为2、3、4、5。\n\n当指明原始文件数据没有行索引时，即index_col=None，read_csv为自动加上行索引（0）。index_col指定数据中哪一列作为Dataframe的行索引，也可以可指定多列index_col=[0,1]，形成层次索引。\n\nparse_dates=True可令字符串解析成时间格式。encoding用于unicode文本编码格式，'gb2312'表示用gb2312编码的文本。\n\n2、存储CSV文件\n将从CSV文件中加载获取的DataFrame数据进行扩充后，另存为CSV文件。\ndata_add = [{u'温度':12.8, u'数据包':13222908, u'转速':1298}, {u'温度':19.8, u'数据包':13292908, u'转速':1998}]\ndf_add = pd.DataFrame(data_add,index=[datetime.datetime.strptime(\"2016-06-25 00:00:00\", \"%Y-%m-%d %H:%M:%S\"),datetime.datetime.strptime(\"2016-06-26 00:00:00\", \"%Y-%m-%d %H:%M:%S\")])\ndf_csvload = df_csvload.append(df_add)  \ndf_csvload = df_csvload.reindex(columns=[u'温度', u'数据包',u'转速',u\"成功率\"])\nprint df_csvload \ndf_csvload.to_csv('C:\\programPY\\Pandas_Example_Test\\CsvDataExampWr.csv',columns=df_csvload.columns,index=True)   \n\n\n\n总结\n相对于Python自带的CSV模块操作而言，Pandas库加载CSV文件后直接生成DataFrame数据格式，可以更方便地对表格数据进行处理和再存储。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "2"}