{"title": "Django解析Angular的POST数据 - Learning Python ", "index": "django,angularjs,python", "content": "在使用Django和Angular的过程中，遇到过一个Angular向Django POST数据的问题。\n// Angular\n$http({\n    url: \"myviews\",\n    method: \"POST\",\n    data: {'text': 'hello world', 'date': '2017-01-04'}\n})\n# Django\ndef myviews(request):\n    print request.POST\n    print request.body\n以上将会打印出\n<QueryDict: {}>\nu\"{'text': 'hello world', 'date': '2017-01-04'}\"\n而我们期望是这样的结果\n<QueryDict: {u'text': u'hello world', u'date': u'2017-01-04'}>\nu\"{'text': 'hello world', 'date': '2017-01-04'}\"\n出现这种问题是因为Angular默认发送的数据格式是JSON而不是urlencode，而Django的request.POST无法解析JSON，所以才会出现上面的结果。\n解决的办法有很多，最简单粗暴的办法就是在每个视图函数里面都将request.body进行解析\ndef myviews(request):\n    data = urlencode(json.loads(request.body))\n    q_data = QueryDict(data)\n我们可以把这类操作提取出来，写成Middlerware，在request请求到达视图函数之前就给统一处理好\nclass JSONMiddleware(object):\n    \"\"\"\n    Process application/json requests data from GET and POST requests.\n    \"\"\"\n    def process_request(self, request):\n        if 'application/json' in request.META['CONTENT_TYPE']:\n            data = json.loads(request.body)\n            q_data = QueryDict('', mutable=True)\n\n            for key, value in data.iteritems():\n                if isinstance(value, list):\n                    for x in value:\n                        q_data.update({key: x})\n                else:\n                    q_data.update({key: value})\n\n            if request.method == 'GET':\n                request.GET = q_data\n\n            if request.method == 'POST':\n                request.POST = q_data\n        return None\n因为有的request请求当中没有CONTENT-TYPE这个Header，所以我们需要判断一下，之所以不简单的转化成Dict而是QueryDict是因为遵循一致性的原则，我们想要将结果绑定在request.GET或者request.POST上面，而它们都是QueryDict类型。QueryDict和Dict最大的区别是QueryDict将每个value存在列表当中，并且QueryDict是不可修改类型。所以当value是列表时我们也必须做一下判断，否则整个列表将作为一个元素存入QueryDict的列表当中。\na = {\"a\": [123, 456, 444], \"b\": 456}\n# 不做判断\ndata = QueryDict('', mutable=True)\nfor k, v in a.iteritems():\n    data.update({k: v})\nprint data\n\n# 做判断\ndata = QueryDict('' mutable=True)\nfor k, v in a.iteritems():\n    if isinstance(v, list):\n        for x in value:\n            data.update({k: x})\n    else:\n        data.update({k: v})\nprint data\n<QueryDict: {u'a': [[123, 456, 444]], u'b': [456]}>\n<QueryDict: {u'a': [123, 456, 444], u'b': [456]}>\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "3"}