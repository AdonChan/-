{"title": "在Python中查找和替换文本 - Python测试开发 ", "index": "python", "content": "最简单的查找替换\n在Python中查找和替换非常简单，如果当前对象是一个字符串str时，你可以使用该类型提供的find()或者index()方法查找指定的字符，如果能找到则会返回字符第一次出现的索引，如果不存在则返回-1。\n>>> s = 'Cat and Dog'\n>>> s.find('Dog')\n8\n>>> s.index('Dog')\n8\n>>> s.find('Duck')\n-1\n如果要替换目标字符串，用replace()方法就好了。\n>>> s = 'Cat and Dog'\n>>> s.replace('Cat', 'Dog')\n'Dog and Dog'\n通配符查找匹配\n当然，如果你觉得上面的功能还不能满足你，你想使用通配符来查找字符串？没问题！fnmatch这个库就能满足你的要求，看例子！\n>>> s = 'Cat and Dog'\n>>> import fnmatch\n>>> fnmatch.fnmatch(s,'Cat*')\nTrue\n>>> fnmatch.fnmatch(s,'C*and*D?')\nFalse\n>>> fnmatch.fnmatch(s,'C*and*D*')\nTrue\n正则表达式查找替换\n如果你需要查找比较复杂的字符规则，正则表达式是你不二的选择。下面是正则查找的简单示例。\n>>> import re\n>>> s = 'We will fly to Thailand on 2016/10/31'\n>>> pattern = r'\\d+'\n>>> re.findall(pattern, s)\n['2016', '10', '31']\n>>> re.search(pattern, s)\n<_sre.SRE_Match object at 0x03A8FD40>\n>>> re.search(pattern, s).group()\n'2016'\n接下来你可能需要用正则表达式去替换某些字符，那么你需要了解re.sub()方法，看例子。\n>>> s = \"I like {color} car.\"\n>>> re.sub(r'\\{color\\}','blue',s)\n'I like blue car.'\n\n>>> s = 'We will fly to Thailand on 10/31/2016'\n>>> re.sub('(\\d+)/(\\d+)/(\\d+)', r'\\3-\\1-\\2', s)\n'We will fly to Thailand on 2016-10-31'\n其实re.sub()远比你相像的强大的多。在上面的例子里你可以替换类似于{color}这样的模板字符，也可以把正则匹配到的所有分组调换顺序，例如第二个例子一共匹配了3个分组，然后把第3个分组放到最前面 r'3-1-2'，看明白了吗？\n接下来看另外一个例子。\ns = \"Tom is talking to Jerry.\"\nname1 = \"Tom\"\nname2 = \"Jerry\"\n\npattern = r'(.*)({0})(.*)({1})(.*)'.format(name1, name2)\nprint re.sub(pattern, r'\\1\\4\\3\\2\\5', s)\n# Jerry is talking to Tom.\n其实你还可以自定义替换函数，也就是re.sub()的第二个参数。\ndef change_date(m):\n    from calendar import month_abbr\n    mon_name = month_abbr[int(m.group(1))]\n    return '{} {} {}'.format(m.group(2), mon_name, m.group(3))\n\ns = 'We will fly to Thailand on 10/31/2016'\npattern = r'(\\d+)/(\\d+)/(\\d+)'\nprint re.sub(pattern, change_date, s)\n# We will fly to Thailand on 31 Oct 2016\n最后给大家一个终极版的例子，里面用到了函数的闭包，着酸爽，你懂的！\ndef match_case(word):\n    def replace(m):\n        text = m.group()\n        if text.isupper():\n            return word.upper()\n        elif text.islower():\n            return word.lower()\n        elif text[0].isupper():\n            return word.capitalize()\n        else:\n            return word\n    return replace\n\ns = \"LOVE PYTHON, love python, Love Python\"\nprint re.sub('python', match_case('money'), s, flags=re.IGNORECASE)\n# LOVE MONEY, love money, Love Money\n写在最后\n其实正则表达式还有很多玩法，如果你想让正则和通配符混合着用，一点问题都没有，因为fnmatch还有一个translate()的方法，可以让你把通配符无痛转换成正则表达式，你爱怎么玩就怎么玩。\n>>> fnmatch.translate('C*and*D*')\n'C.*and.*D.*'\n\n关于作者：Python技术爱好者，目前从事测试开发相关工作，转载请注明原文出处。\n欢迎关注我的博客 http://betacat.online，你可以到我的公众号中去当吃瓜群众。\n\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "4"}