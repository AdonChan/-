{"title": "[译]yield关键字都做了什么？ - python每日练习 ", "index": "python", "content": "原文：https://stackoverflow.com/que...我的微信公众号：python每日一练\n\n要理解什么是 yield，必须理解什么是生成器（generator）。在理解生成器之前，让我们先了解迭代。\n迭代\n当你建立了一个列表，你可以逐个地访问这个列表的元素，而这个访问的过程叫做迭代(iteration)\n>>> mylist = [1, 2, 3]\n>>> for i in mylist:\n...    print(i)\n1\n2\n3\n代码中的mylist就是一个可迭代对象(iterable)，当你使用列表生成式时，你就创建了一个list，同时也创建了一个可迭代对象：\n>>> mylist = [x*x for x in range(3)]\n>>> for i in mylist:\n...    print(i)\n0\n1\n4\n凡是能使用for...in...语句的对象，都叫做可迭代对象，例如：list、string、文件等等\n这些可迭代对象非常方便，因为你可以根据自己的需要来访问它们。但是同时也需要将所有的值存入内存当中，无论你是不是需要所有的值，可能对于一个列表[x for x in range(100000)]，你仅仅想拿到里面的素数，但当这个列表生成式被执行的时候，已经将所有100000个数字存入了内存中。\n生成器\n生成器是一种只能迭代一次的迭代器，生成器不会一次将所有的元素存入内存中，而是一边迭代一边运算：\n>>> mygenerator = (x*x for x in range(3))\n>>> for i in mygenerator:\n...    print(i)\n0\n1\n4\n这份代码看起来和上面的代码没有什么区别。但是你不能再次执行for i in mygenerator，因为生成器只能使用一次：\n>>> mygenerator = (x*x for x in range(3))\n>>> for i in mygenerator:\n...     print(i)\n...\n0\n1\n4\n>>> for i in mygenerator:\n...     print(i)\n...\n>>>\nYield\nyield的使用和return的使用没什么区别，只是yield会返回一个生成器\n>>> def createGenerator():\n...    mylist = range(3)\n...    for i in mylist:\n...        yield i*i\n...\n>>> mygenerator = createGenerator() # 创建一个生成器\n>>> print(mygenerator) # mygenerator是一个对象！\n<generator object createGenerator at 0xb7555c34>\n>>> for i in mygenerator:\n...     print(i)\n0\n1\n4\n当你的函数需要返回一个很大的元素集合，并且每个元素只需要用到一次的时候，使用yield会非常方便\n要想理解yield，你必须理解当你调用一个包含yield的函数的时候，函数体代码并不会执行，这个函数仅仅是返回一个生成器而已\n>>> def createGenerator():\n...     print('head')\n...     for i in range(5):\n...         yield i*i\n...     print('tail')\n...\n>>> createGenerator()\n<generator object createGenerator at 0x0000023454FB5990>\n当你第一次向后迭代（用next或for...in...语句时）这个生成器时，函数体才会从最开始执行到yield处然后返回yield的值，随后再次向后迭代，会执行剩余的代码然后再次遇到yield停止并返回值。直到运行到函数结尾处停止，此时如果是用next()则会抛出StopIteration异常，如果是用for...in...则会结束循环并且不会有异常\n>>> def createGenerator():\n...     print('head')\n...     for i in range(5):\n...         yield i*i\n...     print('tail')\n...\n>>> g = createGenerator()\n>>> next(g)\nhead\n0\n>>> next(g)\n1\n>>> next(g)\n4\n>>> next(g)\n9\n>>> next(g)\n16\n>>> next(g)\ntail\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nStopIteration\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "0"}