{"title": "使用Redis记录系统日志 - 个人文章 ", "index": "python,redis", "content": "使用Redis记录系统日志\n\n在构建一个系统时，我们常常需要记录当前发生的事情，以及记录特定消息出现的频率，根据出现频率的高低来决定消息的排列信息，帮助我们找到重要的信息。\n常见记录日志的方法有两种：\n\n将日志记录在文件中。随时时间流逝将日志行不断添加到文件里面，并在一段时间后创建新的日志文件。这种方式为每个不同的服务创建不同的日志，由于服务轮换日志的机制不同，也缺少一种能够方便地聚合所有日志并对其进行处理的常见方法。\nsyslog服务。这种服务几乎运行在Linux服务器和Unix服务器的514号TCP端口和UDP端口上。syslog接受其他程序发来的日志消息，并将这个消息路由至存储在硬盘上的各个日志文件，并且负责旧日志的轮换和删除工作。甚至还可以将日志消息转发给其他服务来做进一步的处理。\n\nsyslog的转发功能可以将不同的日志分别存储在同一台服务器的多个文件里面，对于长时间地记录日志非常有帮助。我们可以使用redis来存储与时间紧密相关的日志，从而在功能上替代那些需要在短期内被存储的syslog消息。\n1. 最新日志\n我们需要使用 “列表” 来存储最新日志文件，使用LPUSH命令将日志消息推入到列表中。如果我们之后想要查看已有日志消息的话，可以使用LRANGE命令来拉取列表中的消息。\n我们还要命名不同的日志消息队列，根据问题的严重性对日志进行分级。\nimport time\nimport logging\nimport unittest\nimport redis\nfrom datetime import datetime\n\n# 设置一个字典，将大部分日志的安全级别映射为字符串\nSEVERITY = {\n    logging.DEBUG: 'debug',\n    logging.INFO: 'info',\n    logging.WARNING: 'warning',\n    logging.ERROR: 'error',\n    logging.CRITICAL: 'critical',\n}\n\nSEVERITY.update((name, name) for name in SEVERITY.values())\n\n\"\"\"\n存储最新日志文件，命名不同的日志消息队列，根据问题的严重性对日志进行分级\n\n@param {object}\n@param {string} name    消息队列名称\n@param {string} message 消息\n@param {string} severity安全级别\n@param {object} pip     pipline\n\n\"\"\"\ndef logRecent(conn, name, message, severity=logging.INFO, pip=None):\n    # 将日志的安全级别转换为简单的字符串\n    severity = str(SEVERITY.get(severity, severity)).lower()\n    # 创建要保存的redis列表key\n    destination = 'recent:%s:%s'%(name, severity)\n    # 将当前时间加到消息里面，用于记录消息的发送时间\n    message = time.asctime() + ' ' + message\n    # 使用流水线来将通信往返次数降低为一次\n    pipe = pip or conn.pipeline()\n    # 将消息添加到列表的最前面\n    pipe.lpush(destination, message)\n    # 修剪日志列表，让它只包含最新的100条消息\n    pipe.ltrim(destination, 0, 99)\n    pipe.execute()\n2. 常见日志\n我们需要记录较高频率出现的日志，使用“有序集合”，将消息作为成员，消息出现的频率为成员的分值。\n为了确保我们看到的常见消息都是最新的，需要以每小时一次的频率对消息进行轮换，并在轮换日志的时候保留上一个小时记录的常见消息，从而防止没有任何消息存储的情况出现。\n\"\"\"\n记录较高频率出现的日志，每小时一次的频率对消息进行轮换，并在轮换日志的时候保留上一个小时记录的常见消息\n\n@param {object}\n@param {string} name    消息队列名称\n@param {string} message 消息\n@param {string} severity安全级别\n@param {int}    timeout 执行超时时间\n\n\"\"\"\ndef logCommon(conn, name, message, severity=logging.INFO, timeout=5):\n    # 设置日志安全级别\n    severity = str(SEVERITY.get(severity, severity)).lower()\n    # 负责存储近期的常见日志消息的键\n    destination = 'common:%s:%s'%(name, severity)\n    # 每小时需要轮换一次日志，需要记录当前的小时数\n    start_key = destination + ':start'\n    pipe = conn.pipeline()\n    end = time.time() + timeout\n    while time.time() < end:\n        try:\n            # 对记录当前小时数的键进行监听，确保轮换操作可以正常进行\n            pipe.watch(start_key)\n            # 当前时间\n            now = datetime.utcnow().timetuple()\n            # 取得当前所处的小时数\n            hour_start = datetime(*now[:4]).isoformat()\n\n            existing = pipe.get(start_key)\n            # 开始事务\n            pipe.multi()\n            # 如果这个常见日志消息记录的是上个小时的日志\n            if existing and existing < hour_start:\n                # 将这些旧的常见日志归档\n                pipe.rename(destination, destination + ':last')\n                pipe.rename(start_key, destination + ':pstart')\n                # 更新当前所处的小时数\n                pipe.set(start_key, hour_start)\n            elif not existing:\n                pipe.set(start_key, hour_start)\n\n            # 记录日志出现次数\n            pipe.zincrby(destination, message)\n            # 将日志记录到日志列表中，调用excute\n            logRecent(pipe, name, message, severity, pipe)\n            return\n        except redis.exceptions.WatchError:\n            continue\n 测试 测试代码如下：\nclass TestLog(unittest.TestCase):\n    def setUp(self):\n        import redis\n        self.conn = redis.Redis(db=15)\n        self.conn.flushdb\n\n    def tearDown(self):\n        self.conn.flushdb()\n        del self.conn\n        print\n        print\n\n    def testLogRecent(self):\n        import pprint\n        conn = self.conn\n\n        print \"Let's write a few logs to the recent log\"\n        for msg in xrange(5):\n            logRecent(conn, 'test', 'this is message %s'%msg)\n\n        recent = conn.lrange('recent:test:info', 0, -1)\n        print 'The current recent message log has this many message:', len(recent)\n        print 'Those message include:'\n        pprint.pprint(recent[:10])\n        self.assertTrue(len(recent) >= 5)\n\n    def testLogCommon(self):\n        import pprint\n        conn = self.conn\n\n        print \"Let's writ a few logs to the common log\"\n        for count in xrange(1, 6):\n            for i in xrange(count):\n                logCommon(conn, 'test', 'message-%s'%count)\n\n        common = conn.zrevrange('common:test:info', 0, -1, withscores=True)\n        print 'The current common message log has this many message:', len(common)\n        print 'Those common message include:'\n        pprint.pprint(common)\n        self.assertTrue(len(common) >= 5)\n\nif __name__ == '__main__':\n    unittest.main()\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}