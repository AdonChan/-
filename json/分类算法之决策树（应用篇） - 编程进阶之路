{"title": "分类算法之决策树（应用篇） - 编程进阶之路 ", "index": "python", "content": "起步\n在理论篇我们介绍了决策树的构建和一些关于熵的计算方法，这篇文章将根据一个例子，用代码上来实现决策树。\n实验环境\n\n操作系统： win10 64\n编程语言： Python3.6\n\n用到的第三方模块有：\nnumpy (1.12.1+mkl)\nscikit-learn (0.19.1)\n数据源\n为了方便理解和架设，我们用理论篇中买电脑的例子：\n\n将这些记录保存成 csv 文件：\nRID,age,income,student,credit_rating,class:buys_computer\n1,youth,hight,no,fair,no\n2,youth,hight,no,excellent,no\n3,middle_aged,hight,no,fair,yes\n4,senior,medium,no,fair,yes\n5,senior,low,yes,fair,yes\n6,senior,low,yes,excellent,no\n7,middle_aged,low,yes,excellent,yes\n8,youth,medium,no,fair,no\n9,youth,low,yes,fair,yes\n10,senior,medium,yes,fair,yes\n11,youth,medium,yes,excellent,yes\n12,middle_aged,medium,no,excellent,yes\n13,middle_aged,hight,yes,fair,yes\n14,senior,medium,no,excellent,no\n这些数据就是这次应用的数据源。\n数据整理\n可以利用python标准库中 csv 来对这个数据源进行读取，要对原始数据集进行整理，随机变量放在一个数组，分类结果放在另一个数组，形如:\nfuture_list = [\n    {\n        \"age\"   : \"youth\",\n        \"income\": \"hight\",\n        ...\n    }\n    ...\n]\n\nanswer_list = [\"no\", \"no\", \"yes\", ...]\n按照这个思路我们构造一下:\ndata_file = open(\"computer_buy.csv\", \"r\")\nreader = csv.reader(data_file)\nheaders = next(reader)\n\nfuture_list = []\nlabel_list = []\n\nfor row in reader:\n    label_list.append(row[-1])\n    row_dict = {}\n    for i in range(1, len(row) -1):\n        row_dict[ headers[i] ] = row[i]\n    future_list.append(row_dict)\ndata_file.close()\n随机变量向量化\n在 sklearn 提供的库中，对输入的特征有一定的要求，所有特征和分类都要是数值型的值，不能是例子中的类别的值。\n怎么转化呢？比方说 age 这个特征，它有三个值: youth , middle_aged , senior 。有一条记录的 age=youth 针对这个特征我们就变成：\n\n\nyouth\nmiddle_aged\nsenior\n\n\n1\n0\n0\n\n\n那么第一条记录 youth,hight,no,fair 转化为：\n\n\nage=middle_aged\nage=senior\nage=youth\ncredit_rating=excellent\ncredit_rating=fair\nincome=hight\nincome=low\nincome=medium\nstudent=no\nstudent=yes\n\n\n0\n0\n1\n0\n1\n1\n0\n0\n1\n0\n\n\n特征向量化\nfrom sklearn.feature_extraction import DictVectorizer\ndummy_x = vec.fit_transform(future_list).toarray()\n\nprint(\"dummy_x:\", dummy_x)\nprint(\"vec.get_feature_names()\", vec.get_feature_names())\n分类结果向量化\nfrom sklearn import preprocessing\nlb = preprocessing.LabelBinarizer()\ndummy_y = lb.fit_transform(label_list)\n构造决策树\n在 sklearn 中提供了多种决策树构建方法，这边需要向其表明，是依据 信息增益 的方式来构造决策树的，因此需要传入一个参数criterion='entropy':\nfrom sklearn import tree\n# 构造决策树\nclf = tree.DecisionTreeClassifier(criterion='entropy')\nclf.fit(dummy_x, dummy_y)\n\nprint(\"clf: \", clf)\n保存模型\n将训练好的模型保存到文件里去：\n# 保存模型\nwith open(\"result.dot\", \"w\") as f:\n    tree.export_graphviz(clf, feature_names=vec.get_feature_names(), out_file=f)\n测试数据\n接下来就是给它随机变量，让决策树来进行分类。我们修改第一条记录来进行测试:\n# 测试数据\nfirst_row = dummy_x[0, :]\nnew_row = list(first_row)\nnew_row[0] = 1\nnew_row[2] = 0\n\npredict = clf.predict([new_row])\n\nprint(\"predict:\", predict) # output: [1]\n模型可视化\n可视化用到了 Graphviz 软件，可以到官网:http://www.graphviz.org/ 下载，我下载的是 zip 文件，解压后将目录加到环境变量中去。\n转化 dot 文件至 pdf 可视化决策树的命令:\ndot -Tpdf result.dot -o outpu.pdf\n得到一个pdf文件，打开可以看到决策树:\n\n附录\n本次应用的全部代码:\n# coding: utf-8\nimport csv\nfrom sklearn.feature_extraction import DictVectorizer\nfrom sklearn import preprocessing\nfrom sklearn import tree\n\ndata_file = open(\"computer_buy.csv\", \"r\")\nreader = csv.reader(data_file)\nheaders = next(reader)\n\nfuture_list = []\nlabel_list = []\n\nfor row in reader:\n    label_list.append(row[-1])\n    row_dict = {}\n    for i in range(1, len(row) -1):\n        row_dict[ headers[i] ] = row[i]\n    future_list.append(row_dict)\ndata_file.close()\n\n# 向量化 x\nvec = DictVectorizer()\ndummy_x = vec.fit_transform(future_list).toarray()\n\nprint(\"dummy_x:\", dummy_x)\nprint(\"vec.get_feature_names()\", vec.get_feature_names())\n\n# 向量化 y\nlb = preprocessing.LabelBinarizer()\ndummy_y = lb.fit_transform(label_list)\n\n# 构造决策树\nclf = tree.DecisionTreeClassifier(criterion='entropy')\nclf.fit(dummy_x, dummy_y)\n\nprint(\"clf: \", clf)\n\n# 保存模型\nwith open(\"result.dot\", \"w\") as f:\n    tree.export_graphviz(clf, feature_names=vec.get_feature_names(), out_file=f)\n\n# 测试数据\nfirst_row = dummy_x[0, :]\nnew_row = list(first_row)\nnew_row[0] = 1\nnew_row[2] = 0\n\npredict = clf.predict([new_row])\nprint(\"predict:\", predict)\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "4"}