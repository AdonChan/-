{"title": "NumPy快餐教程(1) - 如何生成多维数组 - 个人文章 ", "index": "数组,序列号,python", "content": "摘要： 在算法中我们最经常用到的就是矩阵，我们就从矩阵开始说起吧。 NumPy中，使用二维的多维数组ndarray来存储矩阵。Python现在是最热门的人工智能语言，各种工具的支持如Google的Tensorflow，都是首选支持Python的。但是，与R语言不同，Python语言设计时，并没有考虑对于矩阵运算，统计计算等功能做专项支持。于是我们需要NumPy库来补足这一能力上的不足。\nNumPy是Python的著名扩展库，相当于Python中的MATLAB。\n如何生成多维数组\n初识ndarray多维数组\n在算法中我们最经常用到的就是矩阵，我们就从矩阵开始说起吧。NumPy中，使用二维的多维数组ndarray来存储矩阵。\n例：\na3 = np.array([[1,0],[0,1]])\n\n会生成这样一个多维数组对象\narray([[1, 0],\n       [0, 1]])\n\n生成数组序列\n通过开始值、结束值和步长值生成数组序列 - arange可以通过arange函数来生成指定开始值，结束值和步长值的一维数组。请注意，结束值并不包含在序列中，也就是说结束值是开区间。\nIn [25]: a4 = np.arange(1,10,1)\n\nIn [26]: a4\nOut[26]: array([1, 2, 3, 4, 5, 6, 7, 8, 9])\n线性序列 - linspace\n\n与arange类似，linspace通过给定初值、终值和元素个数来生成序列。是否包含终值可以通过endpoint属性来设置。\n例：\nIn [37]: a8 = np.linspace(1,10,10,endpoint=True)\n\nIn [38]: a8\nOut[38]: array([  1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.,  10.])\n\n等比序列 - logspace\n除了线性的等差数列，我们也可以通过等比数列的方式来生成一维数组。默认是以10的n次方为参数，比如logspace(0,4,3)的意思是，初值为10的0次方，即1，终值是10的4次方，即100，一共生成3个值。\n例，生成[1,100,10000]\nIn [47]: a9 = np.logspace(0,4,3)\n\nIn [48]: a9\nOut[48]: array([  1.00000000e+00,   1.00000000e+02,   1.00000000e+04])\n\n我们当然也可以修改基数，比如改成3：\nIn [53]: a10 = np.logspace(1,5,3,base=3)\n\nIn [54]: a10\nOut[54]: array([   3.,   27.,  243.])\n\n改变多维数组的形状\n如果有一个一维数组要转为多维数组，可以通过修改shape属性来实现。\n我们可以先将数据存在一维数组中，可以用列表或者元组来生成一维数组，它们是等价的：例：\nIn [2]: a1 = np.array([1,2,3,4])\n\nIn [3]: a1\nOut[3]: array([1, 2, 3, 4])\n\nIn [4]: a2 = np.array((1,0,0,1))\n\nIn [5]: a2\nOut[5]: array([1, 0, 0, 1])\n\n我们通过shape属性来查看一个数组的形状：\nIn [14]: a1.shape\nOut[14]: (4,)\n\nIn [15]: a2.shape\nOut[15]: (4,)\n\nshape属性是可以直接修改的，比如我们想把上面的a1改成2 x 2的矩阵，就直接改shape值就是了：\nIn [16]: a1.shape = 2,2\n\nIn [17]: a1\nOut[17]: \narray([[1, 2],\n       [3, 4]])\n\n如果能确定一个轴，另一个可以赋-1让系统自己去算。例：\nIn [18]: a2.shape= 2,-1\n\nIn [19]: a2\nOut[19]: \narray([[1, 0],\n       [0, 1]])\n\n如果想保持这个数组不变，生成一个形状改变的新数组，可以调用reshape方法。例：我们将一个25个元素的数组生成一个5x5的新数组\nIn [59]: a11 = np.linspace(1,100,25)\n\nIn [60]: a11\nOut[60]: \narray([   1.   ,    5.125,    9.25 ,   13.375,   17.5  ,   21.625,\n         25.75 ,   29.875,   34.   ,   38.125,   42.25 ,   46.375,\n         50.5  ,   54.625,   58.75 ,   62.875,   67.   ,   71.125,\n         75.25 ,   79.375,   83.5  ,   87.625,   91.75 ,   95.875,  100.   ])\n\nIn [61]: a12 = a11.reshape(5,-1)\n\nIn [62]: a12\nOut[62]: \narray([[   1.   ,    5.125,    9.25 ,   13.375,   17.5  ],\n       [  21.625,   25.75 ,   29.875,   34.   ,   38.125],\n       [  42.25 ,   46.375,   50.5  ,   54.625,   58.75 ],\n       [  62.875,   67.   ,   71.125,   75.25 ,   79.375],\n       [  83.5  ,   87.625,   91.75 ,   95.875,  100.   ]])\n\n直接生成多维数组\n生成全0的数组zeros生成全是0的数组，第一个参数是shape\n例：\nIn [65]: np.zeros((10,10))\nOut[65]: \narray([[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],\n       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],\n       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],\n       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],\n       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],\n       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],\n       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],\n       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],\n       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],\n       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]])\n\n生成全是1的数组例：\nIn [66]: np.ones((5,5))\nOut[66]: \narray([[ 1.,  1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.,  1.]])\n只生成空数组\n\nempty不赋初值，是最快速的方法\n例：\nIn [67]: np.empty((3,3))\nOut[67]: \narray([[  1.   ,   2.125,   3.25 ],\n       [  4.375,   5.5  ,   6.625],\n       [  7.75 ,   8.875,  10.   ]])\n\n通过函数来生成数组\n通过fromfunction函数可以通过一个函数来生成想要的数组。\n例，生成九九乘法表：\nIn [125]: def mul2(x,y):\n     ...:     return (x+1)*(y+1)\n     ...: \n\nIn [126]: np.fromfunction(mul2,(9,9))\nOut[126]: \narray([[  1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.],\n       [  2.,   4.,   6.,   8.,  10.,  12.,  14.,  16.,  18.],\n       [  3.,   6.,   9.,  12.,  15.,  18.,  21.,  24.,  27.],\n       [  4.,   8.,  12.,  16.,  20.,  24.,  28.,  32.,  36.],\n       [  5.,  10.,  15.,  20.,  25.,  30.,  35.,  40.,  45.],\n       [  6.,  12.,  18.,  24.,  30.,  36.,  42.,  48.,  54.],\n       [  7.,  14.,  21.,  28.,  35.,  42.,  49.,  56.,  63.],\n       [  8.,  16.,  24.,  32.,  40.,  48.,  56.,  64.,  72.],\n       [  9.,  18.,  27.,  36.,  45.,  54.,  63.,  72.,  81.]])\n       \n本文作者：lusing\n阅读原文\n本文为云栖社区原创内容，未经允许不得转载。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}