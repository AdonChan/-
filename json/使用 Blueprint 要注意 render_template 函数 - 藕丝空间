{"title": "使用 Blueprint 要注意 render_template 函数 - 藕丝空间 ", "index": "python,flask,html5", "content": "此文章主要是为了记录在使用 Flask 的过程中遇到的问题。本章主要讨论 render_template 函数的问题。\n使用 Flask 的同学都应该知道，项目中的 url 和视图函数是在字典里一一对应着的，再详细一点，就是 url 对应着 endpoint，视图函数也对应着 endpoint，并且 endpoint 在字典里是唯一存在的。\n而对于不同 Blueprint 里的 url，是依靠所注册的蓝图以及不同的前缀来进行区分。但是在视图函数中所调用的 render_template 函数可得不到 endpoint 的支持，如果你使用的不同目录下的一样命名的模板文件，那么就会出现问题了。\n先摆事实、再讲道理。\n明了问题所在\n实例项目的目录结构如下：\napp\n├── admin\n│   ├── errors.py\n│   ├── forms.py\n│   ├── __init__.py\n│   ├── static\n│   │   ├── css\n│   ├── templates\n│   │   ├── index.html\n│   ├── views.py\n├── __init__.py\n├── main\n│   ├── errors.py\n│   ├── forms.py\n│   ├── __init__.py\n│   ├── templates\n│   │   └── ousi\n│   │       ├── index.html\n│   │       ├── static\n│   │       │   ├── css\n│   ├── views.py\n├── models.py\n该项目中注册两个 Blueprint，即 admin 是所谓的后台管理蓝图，main 是所谓的前台展示蓝图。蓝图 admin 的 __init__.py 内容如下：\n# -*- coding:utf-8 -*-\n__author__ = '东方鹗'\n\n\nfrom flask import Blueprint\n\nadmin = Blueprint('admin', __name__, template_folder=\"templates\", static_folder='static')\n\n# 在末尾导入相关模块，是为了避免循环导入依赖，因为在下面的模块中还要导入蓝本main\nfrom . import views, errors\n蓝图 main 的 __init__.py 内容如下：\n# -*- coding:utf-8 -*-\n__author__ = '东方鹗'\n\n\nfrom flask import Blueprint\n\n\nmain = Blueprint('main', __name__, template_folder=\"templates/ousi\",\n                                 static_folder='templates/ousi/static')\n\n# 在末尾导入相关模块，是为了避免循环导入依赖，因为在下面的模块中还要导入蓝本main\nfrom . import views, errors\n在定义两个蓝图的时候，也对本蓝图所对应的模板文件夹和静态文件夹进行了定义，此文主要关注模板文件夹。\n那么，现在就说说出现了什么问题。\n在各自蓝图的视图函数中都对主页 '/' 或叫做 'index' 进行了定义。\n其中，蓝图 admin 的视图函数定义如下：\n@admin.route('/', methods=['GET', 'POST'])\n@login_required\ndef index():\n\n    return render_template('index.html')\n请记住最后的代码，即 render_template('index.html')，此处调用的模板名叫做 index.html。\n蓝图 admin 的视图函数定义如下：\n@main.route('/', methods=['GET', 'POST'])\ndef index():\n\n    return render_template('index.html')\n请记住最后的代码，即 render_template('index.html')，此处调用的模板名叫做 index.html。\n到此，你发现了什么，你发现了什么，我估计你已经看出来两个视图函数的最后一行代码是一样的，说得再精确点，调用的模板名是一样的。但是此处我们要保持清醒，虽然模板名称一样，但是所在目录是不一样的，它们所处的位置是各自所在的蓝图所定义的模板文件夹里。\n说了这么多，到底怎么了呢。\n这时，如果你测试一下你的程序的话，你会发现两个蓝图所显示的内容是一样的，不管你相信不相信自己的眼睛，它就是一样的界面，而且绝对一样，因为 render_template('index.html') 调用的是同一个模板，它可不会区分蓝图。\n那么，到底调用的是那个蓝图下的模板呢？？继续往下看。\n这时你打开 app/__init__.py，内容如下：\n\ndef create_app(config_name):\n    \"\"\" 使用工厂函数初始化程序实例\"\"\"\n    app = Flask(__name__)\n    app.config.from_object(config[config_name])\n    config[config_name].init_app(app=app)\n\n    # mail.init_app(app=app)\n    moment.init_app(app=app)\n    db.init_app(app=app)\n    md.init_app(app=app)\n    login_manager.init_app(app=app)\n\n    # 注册蓝本 main\n    from .main import main as main_blueprint\n    app.register_blueprint(main_blueprint, url_prefix='/main')\n\n    # 注册蓝本 admin\n    from .admin import admin as admin_blueprint\n    app.register_blueprint(admin_blueprint, url_prefix='/admin')\n\n    # 注册蓝本 main\n    #from .main import main as main_blueprint\n    #app.register_blueprint(main_blueprint, url_prefix='/dynamic')\n\n    return app\n到底调用的是那个蓝图下的模板呢？？\n这个，我可以明确告诉你，main 和 admin 两个蓝图，哪个在 app/__init__.py 中先注册，就调用那个蓝图的模板，也就是说哪个蓝图注册时所用的代码写得靠上，就调用那个蓝图的模板。\n这到底是为什么呢？为什么呢？这是 flask 项目的一个小 bug。写项目的时候，要注意此坑，render_template() 函数里所调用的模板一定要保证命名在整个项目中的唯一性。\n号外，号外\n今天又发现了一个坑，就是 jinja2 内部的模板调用，比如 include 某某模板的时候，这个被调用的模板名称也需要，而且强烈需要保证在整个项目，记住是整个项目中，其命名要具有唯一性。\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}