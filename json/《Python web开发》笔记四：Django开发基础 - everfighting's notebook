{"title": "《Python web开发》笔记四：Django开发基础 - everfighting's notebook ", "index": "python,django", "content": "Why Django\n在一定的时间内，有限的技术情况下，建设一个高质量的网站，Django几乎成了唯一的方案。Django把所有可能性都考虑到了，从这种程度上看复杂就意味着全面，毕竟时间更重要！\nDjango特点\n\n强大的数据库功能\n自带的强大的后台功能\n优雅的网址\n模板系统\n缓存系统\n国际化\n\nDjango应用案例\n国外：Disqus、Pinterest、Instagram、NASA Science等国内：豆瓣、知乎、饿了么等\nDjango开发准备\n1、安装pip2、安装Django3、安装pyflakes4、Atom安装插件：atom-django、autocomplete-python、platformio-ide-terminal(也可以用pycharm)\nMTV模型\n网页访问流程：\nrequest ---->Django Web------>response\n流程内部结构：\nrequest——————>urls——————>views<——————models\n                              |\n                              |\n                              ↓\n                          templates\nMTV\nmodels-----数据: 作为数据库的代理人，通过 model 操作数据库。Templates-----模板: 把数据填充进网页中进行渲染。Views-----视图:把渲染好的网页返回给使用者，让我们可以在浏览器中看到网页。Urls-----链接：找到每个 url 对应的 view。\n为什么要MTV分开？\n复杂的功能，分开可以单独的职责进行处理，快速找到错误，方便处理和维护。\n最简单的Django网站：\n网站创建的流程：P ---> A ---> D ---> M ---> V ---> T ---> UP: 创建project     django-admin startproject firstsiteA: 创建APP         python manage.py startapp firstappD: 创建数据库      python manage.py migrateM: 创建数据库的表  models创建相关模型类classV:  创建视图        views创建相关视图defT: 创建模板        templates/static 用模板语言进行修改U: 创建对应的url正则关系 设置访问url\n具体步骤分析\n创建站点：\ndjango-admin startproject firstsite\n\n生成以下文件：\n    firstsite\n    ├── manage.py\n    └── firstsite\n        ├── __init__.py\n        ├── settings.py\n        ├── urls.py\n        └── wsgi.py\n文件解释：manage.py：django中命令的运行文件，一般格式为：python manage.py 命令名称。__init__.py:是python包的目录结构必须的。setting.py:Django配置全局变量和属性的文件，比如 DEBUG 的开关，静态文件的位置等。urls.py:网址入口，关联到对应的views.py中的一个函数（或者generic类），访问网址就对应一个函数。wsgi.py:部署服务器时用到的wsgi.py文件。\nsettings内部结构：\n\nDEBUG = True时，页面发生错误会直接抛给前台，便于程序员进行修改。在真实环境中需要关闭，DEBUG=False。\n当 DEBUG=False 时，ALLOW_HOSTS这个为必填项，如果不想输入，可以用 ALLOW_HOSTS = ['*'] 来允许所有的访问。\nINSTALLED_APPS，用户新建了APP需要在该栏目下进行注册。\n\nTEMPLATES：若新建了templates文件夹，需要修改DIRS地址：\n  'DIRS': [os.path.join(BASE_DIR, 'templates').replace('\\\\', '/')],\n\n\nDATABASES默认的是:sqlite3, 修改为mysql如下：\n    DATABASES = {\n        'default': {\n            'ENGINE': 'django.db.backends.mysql',\n            'NAME': 'testdb',\n            'USER':'younger',\n            'PASSWORD':'123',\n            'HOST':'',\n            'PORT':'',\n        }\n    }\n\n\nLANGUAGE_CODE = 'en-us', 中文修改为'zh-Hans'。\n\n创建APP\npython manage.py startapp firstapp(项目站点的模块，一个project下面可以有多个app)\n生成以下文件：\nmigrations: 生成数据库的py脚本文件夹。\n__init__: 是python包的目录结构必须的。\nadmin.py：后台，可以用很少量的代码就拥有一个强大的后台。\nmodels.py: 与数据库操作相关，存入或读取数据时用到这个，当然用不到数据库的时候 你可以不使用。\nviews.py: 处理用户发出的请求，从urls.py中对应过来, 通过渲染templates中的网页可以将显示内容，比如登陆后的用户名，用户请求的数据，输出到网页。\ntests.py: 网站的测试代码。\n\n添加app到INSTALL_APPS\n新建的app如果不加到INSTALL_APPS 中的话, django 就不能自动找到app中的模板文件(app-name/templates/下的文件)和静态文件(app-name/static/中的文件) 。\n创建数据库\npython mange.py makemigrations\nmakemigrations命令生成的文件会存到migrations/目录下，生成复杂的创建数据库的语句。\npython mange.py migrate\n之前的makemigrations操作只是生成migration文件，还没有对数据库进行操作，接下来执行migrate命令，完成数据的合并和修改。\nmakemigrations vs migrate\nmakemigrations的意思是将model编译成mysql可以理解的sql语句，存放在那个migrations文件夹里面。\nmigrate是将这个最新生成的py文件执行，让数据库能够按照sql语句进行表的修改。由于sql语句中有很多的标点符号是和python冲突的，经常需要转义数据库才能执行。因此直接使用model模块可以省去你很多书写sql语句的烦恼。\n\n启动服务器\npython mange.py runserver 临时测试的服务器\n\n案例分析\nviews中定义视图\nt = Template(html_string)      # 用来把 html 字符变成模板，类似于打孔。\nc = Context({'person':person}) # 创建一个上下文 context,django 规定 context 必须是字典的形式，类似于造补丁。\nweb_page = t.render(c)           # 对模板进行渲染，把上下文渲染到模板里面，类似于打补丁。\nreturn HTTPResponse(web_page)  # web_page表示的网页字符串转化具体可见的网页response。\n\n拓展阅读：1、《图解HTTP》笔记2、Django 基础教程(自强学堂)\n备注该笔记源自网易微专业《Python web开发》1.1、1.2节本文由EverFighting创作,采用 知识共享署名 3.0 中国大陆许可协议进行许可。\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "6"}