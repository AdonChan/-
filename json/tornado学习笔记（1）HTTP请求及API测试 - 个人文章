{"title": "tornado学习笔记（1）HTTP请求及API测试 - 个人文章 ", "index": "tornado,python", "content": "  Tornado是现在的主流 Web 服务器框架，它与大多数 Python 的框架有着明显的区别：它是非阻塞式服务器，而且速度相当快。得利于其非阻塞的方式和对 epoll 的运用，Tornado 每秒可以处理数以千计的连接，这意味着对于实时 Web 服务来说，Tornado 是一个理想的 Web 框架。  在本文中，我们将介绍tornado的HTTP请求，包括GET、POST请求，并将介绍如何来测试该app.  我们的项目结构如下：\n\n  tornado.py的完整代码如下：\n# tornado的GET、POST请求示例\nimport os.path\nimport tornado.httpserver\nimport tornado.ioloop\nimport tornado.options\nimport tornado.web\nfrom tornado.options import define, options\n\n#定义端口为8080\ndefine(\"port\", default=8080, help=\"run on the given port\", type=int)\n\n# GET请求\nclass IndexHandler(tornado.web.RequestHandler):\n    # get函数\n    def get(self):\n        self.render('index.html')\n\n# POST请求\n# POST请求参数： name, age, city\nclass InfoPageHandler(tornado.web.RequestHandler):\n    # post函数\n    def post(self):\n        name = self.get_argument('name')\n        age = self.get_argument('age')\n        city = self.get_argument('city')\n        self.render('infor.html', name=name, age=age, city=city)\n\n# 主函数\ndef main():\n    tornado.options.parse_command_line()\n    # 定义app\n    app = tornado.web.Application(\n            handlers=[(r'/', IndexHandler), (r'/infor', InfoPageHandler)], #网页路径控制\n            template_path=os.path.join(os.path.dirname(__file__), \"templates\") # 模板路径\n          )\n    http_server = tornado.httpserver.HTTPServer(app)\n    http_server.listen(options.port)\n    tornado.ioloop.IOLoop.instance().start()\n\nmain()\n  templates文件夹为存放HTML文件的模板目录，其中index.html的代码如下：\n<!DOCTYPE html>\n<html>\n<head><title>Person Info</title></head>\n<body>\n<h2>Enter your information:</h2>\n<form method=\"post\" action=\"/infor\">\n<p>name<br><input type=\"text\" name=\"name\"></p>\n<p>age<br><input type=\"text\" name=\"age\"></p>\n<p>city<br><input type=\"text\" name=\"city\"></p>\n<input type=\"submit\">\n</form>\n</body>\n</html>\ninfor.html的代码如下：\n<!DOCTYPE html>\n<html>\n<head><title>Welcome</title></head>\n<body>\n<h2>Welcome</h2>\n<p>Hello, {{name}}! You are {{age}} years old now , and you live in {{city}}.</p>\n</body>\n</html>\n  这样我们就完成了tornado的一个简单的HTTP请求的示例项目。在浏览器中输入localhost:8080/，界面如下，并在输入框中输入如下：\n\n  点击“提交”按钮后，页面如下：\n\n  以上我们已经完成了这个web app的测试，但是在网页中测试往往并不方便。以下我们将介绍两者测试web app的方法：\n\npostman\ncurl\n\n  首先是postman. postman 提供功能强大的 Web API 和 HTTP 请求的调试，它能够发送任何类型的HTTP 请求 (GET, POST, PUT, DELETE…)，并且能附带任何数量的参数和 Headers.  首先是GET请求的测试：\n\n在Body中有三种视图模式：Pretty,Raw,Preview， Pretty为HTML代码, Raw为原始视图，Preview为网页视图。  接着是POST请求：\n\n  在Linux中，我们还可以用curl命令来测试以上web app.在Linux中，curl是一个利用URL规则在命令行下工作的文件传输工具，可以说是一款很强大的http命令行工具。它支持文件的上传和下载，是综合传输工具。  首先是curl的GET请求：\n\n  接着是curl的POST请求：\n\n  在本次分享中，我们介绍了tornado的HTTP请求，包括GET、POST请求，并将介绍如何使用postman和curl来测试该app.  本次分享到此结束，欢迎大家交流~~\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "2"}