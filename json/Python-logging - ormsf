{"title": "Python-logging - ormsf ", "index": "python", "content": "Next\nWhen to use logging\nThe logging functions are named after the level or severity of the events they are used to track. The standard levels and their applicability are described below (in increasing order of severity):\n\n\nLevel\nWhen it’s used\n\n\n\nDEBUG\nDetailed information, typically of interest only when diagnosing problems.\n\n\nINFO\nConfirmation that things are working as expected.\n\n\nWARNING\nAn indication that something unexpected happened, or indicative of some problem in the near future (e.g. ‘disk space low’). The software is still working as expected.\n\n\nERROR\nDue to a more serious problem, the software has not been able to perform some function.\n\n\nCRITICAL\nA serious error, indicating that the program itself may be unable to continue running.\n\n\n\nThe default level is WARNING, which means that only events of this level and above will be tracked, unless the logging package is configured to do otherwise.\nEvents that are tracked can be handled in different ways. The simplest way of handling tracked events is to print them to the console. Another common way is to write them to a disk file.\nA simple example\nimport logging\nlogging.warning('Watch out!')  # will print a message to the console\nlogging.info('I told you so')  # will not print anything\nIf you type these lines into a script and run it, you’ll see:\nWARNING:root:Watch out!\nprinted out on the console. The INFO message doesn’t appear because the default level is WARNING. The printed message includes the indication of the level and the description of the event provided in the logging call, i.e. ‘Watch out!’. Don’t worry about the ‘root’ part for now: it will be explained later. The actual output can be formatted quite flexibly if you need that; formatting options will also be explained later.\nLogging to a file\nA very common situation is that of recording logging events in a file, so let’s look at that next. Be sure to try the following in a newly-started Python interpreter, and don’t just continue from the session described above:\nimport logging\nlogging.basicConfig(filename='example.log',level=logging.DEBUG)\nlogging.debug('This message should go to the log file')\nlogging.info('So should this')\nlogging.warning('And this, too')\nAnd now if we open the file and look at what we have, we should find the log messages:\nDEBUG:root:This message should go to the log file\nINFO:root:So should this\nWARNING:root:And this, too\nThis example also shows how you can set the logging level which acts as the threshold for tracking. In this case, because we set the threshold to DEBUG, all of the messages were printed.\nLogging variable data\nTo log variable data, use a format string for the event description message and append the variable data as arguments. For example:\nimport logging\nlogging.warning('%s before you %s', 'Look', 'leap!')\nwill display:\nWARNING:root:Look before you leap!\nAs you can see, merging of variable data into the event description message uses the old, %-style of string formatting. This is for backwards compatibility: the logging package pre-dates newer formatting options such as str.format() and string.Template. These newer formatting options are supported, but exploring them is outside the scope of this tutorial: see Using particular formatting styles throughout your application for more information.\nChanging the format of displayed messages\nTo change the format which is used to display messages, you need to specify the format you want to use:\nimport logging\nlogging.basicConfig(format='%(levelname)s:%(message)s', level=logging.DEBUG)\nlogging.debug('This message should appear on the console')\nlogging.info('So should this')\nlogging.warning('And this, too')\nwhich would print:\nDEBUG:This message should appear on the console\nINFO:So should this\nWARNING:And this, too\nNotice that the ‘root’ which appeared in earlier examples has disappeared. For a full set of things that can appear in format strings, you can refer to the documentation for LogRecord attributes, but for simple usage, you just need the levelname (severity), message (event description, including variable data) and perhaps to display when the event occurred. This is described in the next section.\nDisplaying the date/time in messages\nTo display the date and time of an event, you would place ‘%(asctime)s’ in your format string:\nimport logging\nlogging.basicConfig(format='%(asctime)s %(message)s')\nlogging.warning('is when this event was logged.')\nwhich should print something like this:\n2010-12-12 11:41:42,612 is when this event was logged.\nThe default format for date/time display (shown above) is ISO8601. If you need more control over the formatting of the date/time, provide a datefmt argument to basicConfig, as in this example:\nimport logging\nlogging.basicConfig(format='%(asctime)s %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p')\nlogging.warning('is when this event was logged.')\nwhich would display something like this:\n12/12/2010 11:46:36 AM is when this event was logged.\nThe format of the datefmt argument is the same as supported by time.strftime().\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}