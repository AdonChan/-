{"title": "Python装饰器：python真正入门的鉴定标准 - python3 ：公司内部培训专栏 ", "index": "python", "content": "上一篇文章：Python是动态语言：动态添加或删除属性、方法下一篇文章：私有化规则与属性Property\n\n\n装饰器功能：\n\n引入日志\n函数执行时间统计\n执行函数前预备处理\n执行函数后清理功能\n权限校验\n缓存\n\n\n1、无参数函数的装饰器\n实例：\nfrom time import ctime,sleep\ndef time_fun(func):\n    #内部包裹函数\n    def wrapped_fun():\n        #ctime():打印当前时间\n        print(\"%s 在 %s  时被调用\"%(func.__name__,ctime()))\n        #执行函数执行\n        func()\n    #把内部嵌套函数作为对象返回\n    return wrapped_fun\n\n@time_fun\ndef test():\n    print(\"test 执行了\")\n\ntest()\n#休眠3秒\nsleep(3)\ntest()\n结果：\ntest 在 Wed Aug 15 22:19:51 2018 时被调用\ntest 执行了\ntest 在 Wed Aug 15 22:19:53 2018 时被调用\ntest 执行了\n2、有参数函数的装饰器\n实例：\nfrom time import ctime,sleep\ndef time_fun(func):\n    #内部包裹函数\n    def wrapped_fun(a,b):\n        #ctime():打印当前时间\n        print(\"%s 在 %s  时被调用\"%(func.__name__,ctime()))\n        #执行函数执行\n        func(a,b)\n    #把内部嵌套函数作为对象返回\n    return wrapped_fun\n\n@time_fun\ndef test(a,b):\n    print(a+b)\n\ntest(1,2)\n#休眠3秒\nsleep(3)\ntest(3,4)\n结果：\ntest 在 Wed Aug 15 22:23:07 2018 时被调用\n3\ntest 在 Wed Aug 15 22:23:10 2018 时被调用\n7\n3、不定长函数的装饰器\n实例：\nfrom time import ctime,sleep\ndef time_fun(func):\n    #内部包裹函数\n    def wrapped_fun(*args,**kwargs):\n        #ctime():打印当前时间\n        print(\"%s 在 %s  时被调用\"%(func.__name__,ctime()))\n        #执行函数执行\n        func(*args,**kwargs)\n    #把内部嵌套函数作为对象返回\n    return wrapped_fun\n\n@time_fun\ndef test(a,b,c):\n    print(a+b+c)\n\ntest(1,2,3)\n#休眠3秒\nsleep(3)\ntest(3,4,5)\n结果：\ntest 在 Wed Aug 15 22:26:36 2018 时被调用\n6\ntest 在 Wed Aug 15 22:26:39 2018 时被调用\n12\n4、带返回值函数的装饰器\n实例：\nfrom time import ctime,sleep\ndef time_fun(func):\n    #内部包裹函数\n    def wrapped_fun(*args,**kwargs):\n        #ctime():打印当前时间\n        print(\"%s 在 %s  时被调用\"%(func.__name__,ctime()))\n        #执行函数执行\n        return func(*args,**kwargs)\n    #把内部嵌套函数作为对象返回\n    return wrapped_fun\n\n@time_fun\ndef test(a,b,c):\n    print(\"test--\",a+b+c)\n\n@time_fun\ndef test2(a,b,c):\n    return a+b+c\n\ntest(1,2,3)\nprint(test2(1,2,3))\n#休眠3秒\nsleep(3)\ntest(1,2,3)\nprint(test2(3,4,5))\n结果：\ntest 在 Wed Aug 15 22:31:14 2018 时被调用\ntest-- 6\ntest2 在 Wed Aug 15 22:31:14 2018 时被调用\n6\ntest 在 Wed Aug 15 22:31:17 2018 时被调用\ntest-- 6\ntest2 在 Wed Aug 15 22:31:17 2018 时被调用\n12\n5、装饰器带有参数\n实例：\nfrom time import ctime,sleep\ndef time_fun_pre(pre=\"hello\"):\n    def time_fun(func):\n        # 内部包裹函数\n        def wrapped_fun(*args, **kwargs):\n            # ctime():打印当前时间\n            print(\"%s 在 %s  时被调用,pre参数为：%s\" % (func.__name__, ctime(),pre))\n            # 执行函数执行\n            return func(*args, **kwargs)\n\n        # 把内部嵌套函数作为对象返回\n        return wrapped_fun\n    return time_fun\n\n@time_fun_pre(\"mark_test\")\ndef test(a,b,c):\n    print(\"test--\",a+b+c)\n\n@time_fun_pre(\"mark_test2\")\ndef test2(a,b,c):\n    return a+b+c\n\ntest(1,2,3)\nprint(test2(1,2,3))\n#休眠3秒\nsleep(3)\ntest(1,2,3)\nprint(test2(3,4,5))\n结果：\ntest 在 Wed Aug 15 22:43:27 2018 时被调用,pre参数为：mark_test\ntest-- 6\ntest2 在 Wed Aug 15 22:43:27 2018 时被调用,pre参数为：mark_test2\n6\ntest 在 Wed Aug 15 22:43:30 2018 时被调用,pre参数为：mark_test\ntest-- 6\ntest2 在 Wed Aug 15 22:43:30 2018 时被调用,pre参数为：mark_test2\n12\n6、类装饰器\npython类装饰性必须要接受一个callable对象作为参数，然后返回一个callable对象，在python中，一般callable对象都是函数，只要对象重写了__call__()方法，那么这个对象就是callable对象。\n\n实例：\nclass Test():\n    def __init__(self,func):\n        print(\"test初始化：\",func.__name__)\n        self.func=func\n\n    def __call__(self, *args, **kwargs):\n        print(\"我调用了\")\n        self.func\n@Test\ndef test():\n    print(\"--test--\")\ntest()\n\n\n结果：\ntest初始化： test\n我调用了\n\n                ", "mainLikeNum": ["6 "], "mainBookmarkNum": "5"}