{"title": "Django-03.静态文件与模板详解 - python web ", "index": "python,django,ubuntu", "content": "1、原始渲染\n在django_lesson文件夹下新建一个django工程lesson2（新建工程的详情请见Django-01、初识Django和搭建Django helloworld）views.py\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.shortcuts import render\nfrom django.views import View\nfrom django.http import HttpResponse\n# Create your views here.\n\nclass CommonRenderHtml(View):\n    def get(self, request):\n        meg = \"<B> 这是一个原始的模版渲染方式 </B>\"\n        return HttpResponse(meg)\n\nurls.py\nfrom django.conf.urls import url\nfrom django.contrib import admin\nfrom hello import views\nurlpatterns = [\n    url(r'^admin/', admin.site.urls),\n    url(r'^common/$', views.CommonRenderHtml.as_view()),\n]\n效果如图所示\n\n\n\n2、render渲染\n我们还可以直接将html文件输出到浏览器在template下新建html文件\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>hello</title>\n</head>\n<body>\n    <span style=\"color:red\"><b>hello</b></span>\n    <span style=\"color:blue\"><b>world</b></span>\n</body>\n</html>\n\n在urls.py中加入以下路由\nurl(r'^hellopage/$', views.HelloPageHtml.as_view()),\n在views.py中加入以下视图类\nclass HelloPageHtml(View):\n    def get(self, request):\n        return render(request, 'hello_page.html')  # 从template文件夹开始\n效果如下\n\n\n3.get_template渲染\nviews.py\n#导入模块\nfrom django.template.loader import get_template\n#添加视图\nclass LoginHtml(View):\n    def get(self, request):\n        t = get_template(\"login.html\")\n        return HttpResponse(t.render())  # 其中t.render()返回的是字符串\n\nlogin.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>登录</title>\n</head>\n<body>\n    <form action=\"\">\n        帐号：<input type=\"text\" name=\"user\" value=\"hujing\"><br/>\n        密码：<input type=\"password\" name=\"psd\" placeholder=\"请输入你的密码\" required><br/>\n        <input type=\"submit\" value=\"提交\">\n    </form>\n</body>\n</html>\n\nurls.py\n# 添加路由\nurl(r'^login/$', views.LoginHtml.as_view())\n\n浏览器地址栏输入http://ip:8000/login/ip表示ip地址\n4.动态渲染参数\nviews.py\nclass RenderParam(View):\n    def get(self, request):\n        message = '尊敬的用户您好！'\n        return render(request, 'hello.html', context={\"msg\": message})    # 这里如果字典内容太多 我们可以用 context=locals()将当前能访问的所有局部变量转换成字典并赋给context context也可以不写\n        \nurls.py\nurl(r'^renderparam/$', views.RenderParam.as_view())\n\nhello.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>hello</title>\n</head>\n<body>\n    {{ msg }}\n</body>\n</html>\n\n\n\n\n\n5.模板标签\n标签语法：{% 标签名称 %}{% 结束标签名称 %}例： {%tag%}{%endtag%}if/elif/else：可以使用and/or/in/not/==/!=/<=/>=，来进行判断。\n{% if message %}\n    {{ message }}\n{% endif %}\n{% if now %}\n当前时间： {{ now|date:\"Y-m-d H:i:s\" }}\n{% endif %}\nfor…in…：跟python中的for…in…是一样的用法\n{% for m in modules %}\n{{ m }}\n{% end %}\n{% for day in days %}\n    今天是{{ day }}<br/>\n{% endfor %}\n------for 循环 字典 带items-------\n{% for day, thing in days_thing.items %}\n    今天是{{ day }}, 我们{{ thing }}<br/>\n{% endfor %}\nforloop.counter：当前迭代的次数，下标从1开始。forloop.counter0：当前迭代的次数，下标从0开始。forloop.first：返回bool类型，如果是第一次迭代，返回true,否则返回false。forloop.last：返回bool类型，如果是最后一次迭代，返回True，否则返回False。\n{% for day in days %}\n    {% if forloop.first %}\n        这是这一个循环的第一个<br/>\n    {% endif %}\n    {{ forloop.counter }}今天是{{ day }}<br/>\n    {% if forloop.last %}\n        这是一个循环的最后一个<br/>\n    {% endif %}\n{% endfor %}\n6.过滤器\n作用：对变量进行过滤。在真正渲染出来之前，过滤器会根据功能处理好变量，然后得出结果后再替换掉原来的变量展示出来。语法：{{greeting|lower}}变量和过滤器中间使用管道符号”|”进行使用。可以通过管道符号进行链式调用，比如实现一个功能，先把所有字符变成小写，把第一个字符转换成大写，代码如下：{{message|lower|capfirst}}过滤器可以使用参数，在过滤器名称后面使用冒号”:”再加上参数，比如要把一个字符串中所有的空格去掉，则可以使用cut过滤器，代码如下\n{{message|cut:\" \"}}ps: 使用参数的时候，冒号和参数之间不能有任何空格，一定要紧挨着。\n<br/>\n{{ hello|upper }}\n{{ hello|lower }}\n{{ hello|capfirst }}\n------ 使用过滤器的参数时，你不能有空格 -------\n{{ hello|cut:\" \" }}\nR和time过滤器格式获取当前时间import datetimetime_now = datetime.datetime.now()\n<br/>\n------- date过滤器--------\n<br/>\n{{ time_now|date:\"Y-m-d H:i:s\" }}\n示例：template.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Template</title>\n</head>\n<body>\n    {% if day1 == 'saturday' %}\n        <b>今天星期六 出去浪</b>\n    {% endif %}\n\n    <br>\n    {% if day2 == 'saturday' %}\n        <b>今天星期六 出去浪哦</b>\n    {% elif day2 == 'sunday' %}\n        <b>今天星期天 继续出去浪</b>\n    {% else %}\n        <b>工作日 努力工作 一切为了周末浪</b>\n    {% endif %}\n\n    <br>\n    {% for i, j in week.items %}\n        {% if forloop.first %}\n            <br><b>假装我是每周的第一天</b>\n        {% endif %}\n        <br><b>{{ forloop.counter }}.今天是{{ j }}({{ i }})</b>\n        {% if forloop.last %}\n            <br><b>假装我是每周的最后一天</b>\n        {% endif %}\n    {% endfor %}\n    <br><br>\n    <b>{{ greet|upper }}</b><br>\n    <b>{{ greet|lower }}</b><br>\n    <b>{{ greet|capfirst }}</b><br>\n    <b>{{ greet|cut:\" \"}}</b><br>\n\n    <br>\n    <b>{{ time_now }}</b><br>\n    <b>{{ time_now|date:\"Y-m-d H:i:s\" }}</b><br>\n</body>\n</html>\nviews.py添加以下视图类\nclass TemplateTag(View):\n    def get(self, request):\n        day1 = 'saturday'\n        day2 = 'monday'\n        week = {\n            'monday': '星期一',\n            'tuesday': '星期二',\n            'wednesday': '星期三',\n            'thursday': '星期四',\n            'friday': '星期五',\n            'saturday': '星期六',\n            'sunday': '星期天'\n        }\n        greet = 'good morning everybody, today is a nice day!'\n        import datetime\n        time_now = datetime.datetime.now()\n        return render(request, 'template.html', locals())\nurls.py添加路由\n url(r'^template/$', views.TemplateTag.as_view())\n\n\n7.模板继承\n模板继承使用extends标签实现。通过使用block来给子模板开放接口。extends必须是模板中的第一个出现的标签。子模板中的所有内容，必须出现在父模板定义好的block中，否则django将不会渲染。如果出现重复代码，就应该考虑使用模板。尽可能多的定义block，方便子模板实现更细的需求。\ninclude另一个模板{% include \"menu.html\" %}\n修改hello_page.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>hello</title>\n</head>\n\n<body>\n    <span style=\"color:red\"><b>hello</b></span>\n    <span style=\"color:blue\"><b>world</b></span>\n    {% block content %}\n    {% endblock content %}\n\n    {% block text %}\n    {% endblock text %}\n    {% include 'login.html' %}\n\n</body>\n<script>\n        {% block js %}\n        {% endblock js %}\n</script>\n</html>\n\n在template文件夹下添加一个extends.html文件\n{% extends \"hello_page.html\" %}\n{% block js %}\n    document.write('<br>hello')\n{% endblock js %}\n\n\n{% block content %}\n    <br>这是个继承了hello_page.html的页面 <br>\n{% endblock %}\n\n\n\n8.模版include\n在hello_page.html的body末尾加上以下代码\n{% include 'login.html' %}\n在浏览器输入路由 /hellopage\n\n\n\n注释标签{#被注释的内容#}：将中间的内容注释掉。只能单行注释。{% comment %}被注释的内容{% endcomment %}：可以多行注释。\n9.附录：\nhtml链接的相对路径与绝对路径绝对路径完整的一个路径就是绝对路径，即包含schema://host[:port#]/path/.../?query-string例：http://news.sina.com.cn/world/相对路径第一个字符为斜杠/, 例：“/hello”,     这种会自动帮你添加你的协议名+域名+端口， 假设你的前一节为http://www.baidu.com:8000， 系统会自动匹配为\"http://www.baidu.com:8000/hello\"我们实际情况中一般使用这种\n第一个字符不带斜杠例：“hello”,  这种会在当前url中path段往后添加，假设你当前路径http://www.baidu.com:8000/hello, 系统会自动匹配为“http://www.baidu.com:8000/hello/hello, ”\n关于settings.py 文件中template的解释\nTEMPLATES = [\n    {\n        # 引擎，就是django自带的模版渲染模版\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        # 这个配置就是代表html文件存在目录\n        # 该路径是一个绝对路径\n        'DIRS': [os.path.join(BASE_DIR, 'templates')]\n        ,\n        # app内部的template是否启用\n        # 这个是为了兼容老版本所用，我们默认为True就可以了。\n        'APP_DIRS': True,\n        'OPTIONS': {\n            # 模版中间件，后面会详细学习\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n本文章代码urls.py\nfrom django.conf.urls import url\nfrom django.contrib import admin\nfrom hello import views\nurlpatterns = [\n    url(r'^admin/', admin.site.urls),\n    url(r'^common/$', views.CommonRenderHtml.as_view()),\n    url(r'^hellopage/$', views.HelloPageHtml.as_view()),\n    url(r'^login/$', views.LoginHtml.as_view()),\n    url(r'^renderparam/$', views.RenderParam.as_view()),\n    url(r'^template/$', views.TemplateTag.as_view()),\n    url(r'^extends/$', views.ExtendHtml.as_view())\n]\nviews.py\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.shortcuts import render\nfrom django.views import View\nfrom django.http import HttpResponse\nfrom django.template.loader import get_template\n# Create your views here.\n\n\nclass CommonRenderHtml(View):\n    def get(self, request):\n        meg = \"<B> 这是一个原始的模版渲染方式 </B>\"\n        return HttpResponse(meg)\n\n\nclass HelloPageHtml(View):\n    def get(self, request):\n        return render(request, 'hello_page.html')\n\n\nclass LoginHtml(View):\n    def get(self, request):\n        t = get_template(\"login.html\")\n        return HttpResponse(t.render())\n\n\nclass RenderParam(View):\n    def get(self, request):\n        message = '尊敬的用户您好！'\n        return render(request, 'hello.html', context={\"msg\": message})\n\n\nclass TemplateTag(View):\n    def get(self, request):\n        day1 = 'saturday'\n        day2 = 'monday'\n        week = {\n            'monday': '星期一',\n            'tuesday': '星期二',\n            'wednesday': '星期三',\n            'thursday': '星期四',\n            'friday': '星期五',\n            'saturday': '星期六',\n            'sunday': '星期天'\n        }\n        greet = 'good morning everybody, today is a nice day!'\n        import datetime\n        time_now = datetime.datetime.now()\n        return render(request, 'template.html', locals())\n\n\nclass ExtendHtml(View):\n    def get(self, request):\n        return render(request, 'extends.html')\nlogin.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>登录</title>\n</head>\n<body>\n    <form action=\"\">\n        帐号：<input type=\"text\" name=\"user\" value=\"hujing\"><br/>\n        密码：<input type=\"password\" name=\"psd\" placeholder=\"请输入你的密码\" required><br/>\n        <input type=\"submit\" value=\"提交\">\n    </form>\n</body>\n</html>\ntemplate.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Template</title>\n</head>\n<body>\n    {% if day1 == 'saturday' %}\n        <b>今天星期六 出去浪</b>\n    {% endif %}\n\n    <br>\n    {% if day2 == 'saturday' %}\n        <b>今天星期六 出去浪哦</b>\n    {% elif day2 == 'sunday' %}\n        <b>今天星期天 继续出去浪</b>\n    {% else %}\n        <b>工作日 努力工作 一切为了周末浪</b>\n    {% endif %}\n\n    <br>\n    {% for i, j in week.items %}\n        {% if forloop.first %}\n            <br><b>假装我是每周的第一天</b>\n        {% endif %}\n        <br><b>{{ forloop.counter }}.今天是{{ j }}({{ i }})</b>\n        {% if forloop.last %}\n            <br><b>假装我是每周的最后一天</b>\n        {% endif %}\n    {% endfor %}\n    <br><br>\n    <b>{{ greet|upper }}</b><br>\n    <b>{{ greet|lower }}</b><br>\n    <b>{{ greet|capfirst }}</b><br>\n    <b>{{ greet|cut:\" \"}}</b><br>\n\n    <br>\n    <b>{{ time_now }}</b><br>\n    <b>{{ time_now|date:\"Y-m-d H:i:s\" }}</b><br>\n</body>\n</html>\nextend.html\n{% extends \"hello_page.html\" %}\n{% block js %}\n    document.write('<br>hello')\n{% endblock js %}\n\n\n{% block content %}\n    <br>这是个继承了hello_page.html的页面 <br>\n{% endblock %}\nhello.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>hello</title>\n</head>\n<body>\n    {{ msg }}\n</body>\n</html>\nhello_page.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>hello</title>\n</head>\n\n<body>\n    <span style=\"color:red\"><b>hello</b></span>\n    <span style=\"color:blue\"><b>world</b></span>\n    {% block content %}\n    {% endblock content %}\n\n    {% block text %}\n    {% endblock text %}\n    {% include 'login.html' %}\n\n</body>\n<script>\n        {% block js %}\n        {% endblock js %}\n</script>\n</html>\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "1"}