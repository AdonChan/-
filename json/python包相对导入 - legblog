{"title": "python包相对导入 - legblog ", "index": "python", "content": "\n绝对路径导入格式为import a.b或者from a import b，相对路径导入格式为from . import b或者from ..a import b。\npython2默认为相对路径导入，python3默认为绝对路径导入。\n为使python2，3通用，建议采用相对路径导入from .a import b\n一个目录存在__init__.py文件，则该目录成为一个包。\n包中的一个模块可以采用相对路径导入包，不影响模块功能；一个py脚本（未成为模块，即其目录及父目录内无__init__.py）可以采用相对路径导入包，并以脚本模式运行。但包含相对导入的模块，不能直接以脚本模式运行，常见报错为：\n\n# python2\nTraceback (most recent call last):    File \"module_x.py\", line 1, in <module>      from . module_y import spam as ham  ValueError: Attempted relative import in non-package\n# python3\nTraceback (most recent call last):    File \"module_x.py\", line 1, in <module>      from . module_y import spam as ham  SystemError: Parent module '' not loaded, cannot perform relative import\n解决方案：\n建立示例文件结构如下：注：以/结尾的为文件夹。\n/home/zhkai/\n            mobike/\n                  __init__.py\n                  utils.py\n                  data_process/\n                          loc.py\n注意此时mobike成为一个python包。在loc.py中导入utils.py该怎么办？\n方法1：将mobike包导入系统路径\n在loc.py中导入util的方法为：\nimport sys\nsys.path.append('/home/zhkai')\nfrom mobike.utils import read_csv \n需要注意，这里导入系统路径的是mobike所在目录的路径，路径本身不包含mobike。此时utils就像自带的python包一样，loc.py可直接运行。\n【推荐】方法2：修改运行命令\npython的man page里有这个参数：\n-m module-name \n   Searches  sys.path for the named module and runs the corresponding .py file as a script. \n所以可以在不修改模块代码文件的情况下：代码文件仍为相对路径：\nfrom ..utils import read_csv\n切换到mobike包同级目录下执行：\n☁  ~  python3 -m mobike.data_process.loc\n注意：此时若loc.py代码中有其他相对路径，此时的相对路径是基于shell命令所在位置，即~的，可能会造成错误。import语句中的相对路径，仍是基于文件所在位置，故不影响。\n推荐这种方法，因为无需修改代码文件。\n还有句话不太理解：如果一个模块被直接运行，则它自己为顶层模块，不存在层次结构，所以找不到其他的相对路径。\n\n参考：Python 相对导入与绝对导入\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "3"}