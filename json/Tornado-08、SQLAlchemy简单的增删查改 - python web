{"title": "Tornado-08、SQLAlchemy简单的增删查改 - python web ", "index": "python,tornado,ubuntu,mysql", "content": "SQLAlchemy\n1.环境搭建\n安装相应的软件包\n1.mysql数据库\n2.pymysql用于连接MySQL服务器的一个库\n3.sqlalchemy\n    $ pip install pymysql\n    $ pip install sqlalchemy\n2.连接数据库\n从sqlalchemy中导入create_engin，创建引擎建立与数据库的连接。\nfrom sqlalchemy import create_engine\n准备连接数据库的数据：\n\nHOSTNAME = '127.0.0.1'        # 这里填ip地址\nPORT = '3306'                 # 端口号 mysql一般默认为3306\nDATABASE = 'mydb'             # 数据库名\nUSERNAME = 'admin'            # 用户名\nPASSWORD = 'rootqwe123'       # 用户登录密码\nDB_URI的格式:\n数据库类型+数据库驱动名称://用户名:密码@机器地址:端口号/数据库名?字符编码\nDB_URI=mysql+pymysql://<username>:<password>@<host>/<dbname>?charset=utf8 \nengine = create_engine(DB_URI)\n我们可以尝试着测试一下是否连接上:\nprint(dir(engine)),当有打印出方法时，表示连接成功。\ndatabase_connect.py\n\nfrom sqlalchemy import create_engine\n\nHOSTNAME = '127.0.0.1' # 这里填ip地址\nPORT = '3306'\nDATABASE = 'mydb'\nUSERNAME = 'admin'\nPASSWORD = 'Root110qwe'\n\nDb_Uri = 'mysql+pymysql://{}:{}@{}/{}?charset=utf8'.format(USERNAME,PASSWORD,HOSTNAME,DATABASE)\n\nengine = create_engine(Db_Uri)\n\nif __name__=='__main__':\n    print(dir(engine))\n\n\n\n3.创建模型\n1.声明映像\n对象关系型映射，数据库中的表与python中的类相对应，创建的类必须继承自sqlalchemy中的基类。\n使用Declarative方法定义的映射类依据一个基类，这个基类是维系类和数据表关系的目录。\n应用通常只需要有一个base的实例。我们通过declarative_base()功能创建一个基类。在database_connect.py文件中加入下列代码\nfrom sqlalchemy.ext.declarative import declarative_base\nBase = declarative_base(engine)\n\n2.创建会话\n定义个session会话对象,使用 sessionmaker初始化一个类对象\nfrom sqlalchemy.orm import sessionmaker\nSession = sessionmaker(engine)\nsession = Session()\n\n3.新建模型\n新建一个user模型新建user_module.py文件\nfrom datetime import datetime\nfrom sqlalchemy import Column,Integer,String,DateTime,Boolean\nfrom database_connect import Base,session\n\nclass User(Base):\n    __tablename__='user'\n    id = Column(Integer,primary_key=True,autoincrement=True)\n    username = Column(String(20),nullable=False)\n    password = Column(String(100))\n    creatime = Column(DateTime,default=datetime.now)\n    last_login = Column(DateTime)\n    _locked = Column(Boolean,default=Falsem,nullable=False)\n    \n#---将创建好的user类，映射到数据库的user表中---\n在start.py mian函数最后中加入这一行代码\nBase.metadata.create_all()    \n\n这就是创建好了一个表，我们可以在数据库中查看一下。\n4.增删查改\n1.增加数据\ndef add_user():\n    #添加单个对象\n    #person = User(username='lethe',password='212121')\n    #session.add(person)\n\n#在start.py中的main函数中执行添加函数\n    User().add_user()\n\n\n    #添加多个对象\n    #把add_user中的代码注释并添加下列代码\n            session.add_all([User(username='banban', password='1212120'),\n                User(username='kuku', password='32321')])\n    #提交才会生效，和命令行有区别\n    session.commit()\n\n\n\n2.查询数据\n#先将前面的User().add_user()注释掉 否者又会添加相同的数据\ndef search_user():\n    row = session.query(User).all()  # 查询全部数据\n    print(row)\n\n#再在start.py中的main函数后面添加\nUser().search_user()\n\n\n\n#将search_user()里的内容注释掉 添加下列代码\nrow = session.query(User).filter_by(id=1).all()  # 按id查询\nprint(row)\nrow = session.query(User).filter(User.username == 'banban').all()  # 按字段查询\nprint(row)\nprint(row[0].locked)  #查询banban这条信息的locked信息\n\n\n\n\n但其实我们可以在定义user类的时候这么去写\n    @classmethod\n    def all(cls):\n        return session.query(cls).all()\n\n    @classmethod\n    def by_id(cls,id):\n        return session.query(cls).filter_by(id=id).all()\n\n    @classmethod\n    def by_name(cls,name):\n        return session.query(cls).filter_by(username=name).all()\n\n    @property\n    def locked(self):\n        return self._locked\n\n这样在只需要调用类方法就行\n    print(User.all())\n    print(User.by_id(1))\n    print(User.by_name('lethe'))\n    print(User.by_name('kuku'))\n\n3.更新\ndef update_user():\n    row = session.query(User).filter_by(username='lethe').update({User.password:'1010101'})\n    session.commit()\n\n4.删除\ndef delete_user():\n    row = session.query(User).filter_by(username='banban')[0]  #first\n    print(row)\n    session.delete(row)\n    session.commit()\n\n更新与删除操作过程与前面类似 这里就不一一赘述了以上就是sqlalchemy的基本知识。\n5.pycharm的图形化数据库工具\n设置步骤：\n\n点击view-->点击Toll Windows -->点击database\n在在pycharm右侧找到database，点开它\n点+号-->Data Source--> 选择mysql(我这里是用的mysql，其他数据库也行)\n按要求填写对应的项-->点击Test connection 测试一下是否能成功连接（如果这个按钮是灰色的需要先点击左下角的按钮安装插件）\n\n\n\n6.附录\n\nstart.py\nimport tornado.httpserver\nimport tornado.ioloop\nimport tornado.options\nimport tornado.web\nfrom user_module import User\nfrom tornado.options import define, options\nfrom database_connect import  engine, session\nfrom user_module import Base\ndefine('port', default=9000, help='run port', type=int)\n\n\nif __name__ == '__main__':\n    connection = engine.connect()\n    result = connection.execute('select 1')\n    print(Base)\n    Base.metadata.create_all()  # 建表\n    User().add_user()\n    # User().search_user()\n    # User().update_user()\n    # User().delete_user()\n    print(User.all())\n    print(User.by_id(1))\n    print(User.by_name('lethe'))\n    print(User.by_name('kuku'))\n\n\ndatabase_connect.py\nfrom sqlalchemy import create_engine\n\nHOSTNAME = '127.0.0.1'  # 指的是linux的ip 因为代码运行在linux上\nPOST = '3306'  # 直接在linux上连接数据库不需要端口转发\nDATABASE = 'mydb_test'\nUSERNAME = 'admin'  # 登录的用户\nPASSWORD = 'Root110qwe'\n\ndb_url = 'mysql+pymysql://{}:{}@{}:{}/{}'.format(\n    USERNAME,\n    PASSWORD,\n    HOSTNAME,\n    POST,\n    DATABASE\n)  # +号两边不能加空格  这里出现了点问题 将这个字符串重新写过后就可以了\n\nengine = create_engine(db_url)  # 创建引擎\n\nfrom sqlalchemy.ext.declarative import declarative_base\nBase = declarative_base(engine)\n# print(result.fetchone())\n\n\nfrom sqlalchemy.orm import sessionmaker\nSession = sessionmaker(engine)\nsession = Session()\nuser_module.py\nfrom datetime import datetime\nfrom sqlalchemy import Column, Integer, String, DateTime, Boolean\nfrom database_connect import Base, session  # 模块名灰色代表还没有被调用\n\n\nclass User(Base):  # 继承Base这个引擎 新建表\n    __tablename__ = 'user'  # 表名\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    username = Column(String(20), nullable=False)\n    password = Column(String(50))\n    email = Column(String(50))\n    phone_number = Column(String(20))\n    id_card = Column(String(30))\n    createtime = Column(DateTime, default=datetime.now)\n    _locked = Column(Boolean, default=False, nullable=True)\n\n    @classmethod\n    def all(cls):  # 类方法\n        return session.query(cls).all()\n\n    @classmethod\n    def by_id(cls, id):\n        return session.query(cls).filter_by(id=id).all()\n\n    @classmethod\n    def by_name(cls, name):\n        return session.query(cls).filter_by(username=name).all()\n\n    @property\n    def locked(self):\n        return self._locked\n\n    def __repr__(self):\n        return \"<User(id='%s', \" \\\n               \"username='%s', \" \\\n               \"password='%s', \" \\\n               \"email='%s', \" \\\n               \"phone_number='%s', \" \\\n               \"id_card='%s', \" \\\n               \"createtime='%s', \" \\\n               \"_locked='%s'\\n)>\" % (\n                self.id,\n                self.username,\n                self.password,\n                self.email,\n                self.phone_number,\n                self.id_card,\n                self.createtime,\n                self._locked\n        )\n\n    def add_user(self):\n        # 添加单个对象\n        # person = User(username='lethe',password='212121')\n        # session.add(person)\n\n        # 添加多个对象\n        session.add_all([User(username='banban', password='1212120'),\n                         User(username='kuku', password='32321')])\n        # 提交才会生效，和命令行有区别\n        session.commit()\n\n    def search_user(self):\n        # row = session.query(User).all()\n        # print(row)\n        row = session.query(User).filter_by(id=1).all()\n        print(row)\n        row = session.query(User).filter(User.username == 'banban').all()\n        print(row)\n        print(row[0].locked)\n\n    def update_user():\n        row = session.query(User).filter_by(username='lethe').update({User.password: '1010101'})\n        session.commit()\n\n\n    def delete_user():\n        row = session.query(User).filter_by(username='banban')[0]  # first\n        print(row)\n        session.delete(row)\n        session.commit()\n\n将上面的这些程序放在同一目录下 然后运行start.py\n\n\n再去ubuntu里面的mysql看一下这张表\n\n\n\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}