{"title": "Python -- 让你的代码运行的更快的技巧 - yexiaoxiaobai ", "index": "performance,优化,python", "content": "\n  注：原文地址 Python: faster way\n\n\n\n  注：个人学习记录用。建议大家看原文，原文对比更加清晰，一目了然。\n\n\n\n  注：各位要使用这些技巧的话，请在自己的服务器上测试一遍，并且加大测试的数值，目前的用例都是 10 W 次，我们可以测试 100 W , 1000 W 次。。。。\n  注：如果测试的性能相差不多，请以可读性为主。\n\n\n平台\n\n运行测试的平台环境：\n\n>>> import sys\n>>> import platform\n>>> platform.system()\n'Linux'\n>>> platform.release()\n'3.11.0-19-generic'\n>>> sys.version\n'2.7.5+ (default, Feb 27 2014, 19:37:08) \n[GCC 4.8.1]'\n>>> from timeit import timeit\n>>> from dis import dis\n>>> \n\n\n以下的代码主要是使用了 timeit 函数测试处理时间，以及使用 dis 函数显示详细的处理步骤（汇编的方式），能让你清楚的知道，慢在哪里？为什么慢？\n\n测试用例 1\n\n更快的方式：\n\ndef a():\n    d = {}\n    return d\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.0905051231384\n>>> \n>>> dis(a)\n  5           0 BUILD_MAP                0\n              3 STORE_FAST               0 (d)\n\n  6           6 LOAD_FAST                0 (d)\n              9 RETURN_VALUE        \n\n>>> \n\n\n更慢的方式：\n\ndef a():\n    d = dict()\n    return d\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.206549167633\n>>> \n>>> dis(a)\n  5           0 LOAD_GLOBAL              0 (dict)\n              3 CALL_FUNCTION            0\n              6 STORE_FAST               0 (d)\n\n  6           9 LOAD_FAST                0 (d)\n             12 RETURN_VALUE        \n\n>>> \n\n\n\n测试用例 2\n\n更快的方式：\n\ndef a():\n    l = [0, 8, 6, 4, 2, 1, 3, 5, 7, 9]\n    l.sort()\n    return l\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.53688287735\n>>> \n>>> dis(a)\n  5           0 LOAD_CONST               1 (0)\n              3 LOAD_CONST               2 (8)\n              6 LOAD_CONST               3 (6)\n              9 LOAD_CONST               4 (4)\n             12 LOAD_CONST               5 (2)\n             15 LOAD_CONST               6 (1)\n             18 LOAD_CONST               7 (3)\n             21 LOAD_CONST               8 (5)\n             24 LOAD_CONST               9 (7)\n             27 LOAD_CONST              10 (9)\n             30 BUILD_LIST              10\n             33 STORE_FAST               0 (l)\n\n  6          36 LOAD_FAST                0 (l)\n             39 LOAD_ATTR                0 (sort)\n             42 CALL_FUNCTION            0\n             45 POP_TOP             \n\n  7          46 LOAD_FAST                0 (l)\n             49 RETURN_VALUE        \n\n>>> \n\n\n更慢的方式：\n\ndef a():\n    l = [0, 8, 6, 4, 2, 1, 3, 5, 7, 9]\n    return sorted(l)\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.781757831573\n>>> \n>>> dis(a)\n  5           0 LOAD_CONST               1 (0)\n              3 LOAD_CONST               2 (8)\n              6 LOAD_CONST               3 (6)\n              9 LOAD_CONST               4 (4)\n             12 LOAD_CONST               5 (2)\n             15 LOAD_CONST               6 (1)\n             18 LOAD_CONST               7 (3)\n             21 LOAD_CONST               8 (5)\n             24 LOAD_CONST               9 (7)\n             27 LOAD_CONST              10 (9)\n             30 BUILD_LIST              10\n             33 STORE_FAST               0 (l)\n\n  6          36 LOAD_GLOBAL              0 (sorted)\n             39 LOAD_FAST                0 (l)\n             42 CALL_FUNCTION            1\n             45 RETURN_VALUE        \n\n>>> \n\n\n\n测试用例 3\n\n更快的方式：\n\ndef a():\n    a, b, c, d, e, f, g, h, i, j = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n    return j, i, h, g, f, e, d, c, b, a\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.216089963913\n>>> \n>>> dis(a)\n  5           0 LOAD_CONST              11 ((0, 1, 2, 3, 4, 5, 6, 7, 8, 9))\n              3 UNPACK_SEQUENCE         10\n              6 STORE_FAST               0 (a)\n              9 STORE_FAST               1 (b)\n             12 STORE_FAST               2 (c)\n             15 STORE_FAST               3 (d)\n             18 STORE_FAST               4 (e)\n             21 STORE_FAST               5 (f)\n             24 STORE_FAST               6 (g)\n             27 STORE_FAST               7 (h)\n             30 STORE_FAST               8 (i)\n             33 STORE_FAST               9 (j)\n\n  6          36 LOAD_FAST                9 (j)\n             39 LOAD_FAST                8 (i)\n             42 LOAD_FAST                7 (h)\n             45 LOAD_FAST                6 (g)\n             48 LOAD_FAST                5 (f)\n             51 LOAD_FAST                4 (e)\n             54 LOAD_FAST                3 (d)\n             57 LOAD_FAST                2 (c)\n             60 LOAD_FAST                1 (b)\n             63 LOAD_FAST                0 (a)\n             66 BUILD_TUPLE             10\n             69 RETURN_VALUE        \n\n>>> \n\n\n\n更慢的方式：\n\ndef a():\n    a = 0\n    b = 1\n    c = 2\n    d = 3\n    e = 4\n    f = 5\n    g = 6\n    h = 7\n    i = 8\n    j = 9\n    return j, i, h, g, f, e, d, c, b, a\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.249029874802\n>>> \n>>> dis(a)\n  5           0 LOAD_CONST               1 (0)\n              3 STORE_FAST               0 (a)\n\n  6           6 LOAD_CONST               2 (1)\n              9 STORE_FAST               1 (b)\n\n  7          12 LOAD_CONST               3 (2)\n             15 STORE_FAST               2 (c)\n\n  8          18 LOAD_CONST               4 (3)\n             21 STORE_FAST               3 (d)\n\n  9          24 LOAD_CONST               5 (4)\n             27 STORE_FAST               4 (e)\n\n 10          30 LOAD_CONST               6 (5)\n             33 STORE_FAST               5 (f)\n\n 11          36 LOAD_CONST               7 (6)\n             39 STORE_FAST               6 (g)\n\n 12          42 LOAD_CONST               8 (7)\n             45 STORE_FAST               7 (h)\n\n 13          48 LOAD_CONST               9 (8)\n             51 STORE_FAST               8 (i)\n\n 14          54 LOAD_CONST              10 (9)\n             57 STORE_FAST               9 (j)\n\n 15          60 LOAD_FAST                9 (j)\n             63 LOAD_FAST                8 (i)\n             66 LOAD_FAST                7 (h)\n             69 LOAD_FAST                6 (g)\n             72 LOAD_FAST                5 (f)\n             75 LOAD_FAST                4 (e)\n             78 LOAD_FAST                3 (d)\n             81 LOAD_FAST                2 (c)\n             84 LOAD_FAST                1 (b)\n             87 LOAD_FAST                0 (a)\n             90 BUILD_TUPLE             10\n             93 RETURN_VALUE        \n\n>>> \n\n\n\n测试用例 4\n\n更快的方式：\n\ndef a():\n    a, b, c, d, e, f = 2, 5, 52, 25, 225, 552\n    if a < b and b < c and c < d and d < e and e < f:\n        return True\n    return False\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.176034927368\n>>> \n>>> dis(a)\n  5           0 LOAD_CONST               7 ((2, 5, 52, 25, 225, 552))\n              3 UNPACK_SEQUENCE          6\n              6 STORE_FAST               0 (a)\n              9 STORE_FAST               1 (b)\n             12 STORE_FAST               2 (c)\n             15 STORE_FAST               3 (d)\n             18 STORE_FAST               4 (e)\n             21 STORE_FAST               5 (f)\n\n  6          24 LOAD_FAST                0 (a)\n             27 LOAD_FAST                1 (b)\n             30 COMPARE_OP               0 (<)\n             33 POP_JUMP_IF_FALSE       88\n             36 LOAD_FAST                1 (b)\n             39 LOAD_FAST                2 (c)\n             42 COMPARE_OP               0 (<)\n             45 POP_JUMP_IF_FALSE       88\n             48 LOAD_FAST                2 (c)\n             51 LOAD_FAST                3 (d)\n             54 COMPARE_OP               0 (<)\n             57 POP_JUMP_IF_FALSE       88\n             60 LOAD_FAST                3 (d)\n             63 LOAD_FAST                4 (e)\n             66 COMPARE_OP               0 (<)\n             69 POP_JUMP_IF_FALSE       88\n             72 LOAD_FAST                4 (e)\n             75 LOAD_FAST                5 (f)\n             78 COMPARE_OP               0 (<)\n             81 POP_JUMP_IF_FALSE       88\n\n  7          84 LOAD_GLOBAL              0 (True)\n             87 RETURN_VALUE        \n\n  8     >>   88 LOAD_GLOBAL              1 (False)\n             91 RETURN_VALUE        \n\n>>> \n\n\n更慢的方式：\n\ndef a():\n    a, b, c, d, e, f = 2, 5, 52, 25, 225, 552\n    if a < b < c < d < e < f:\n        return True\n    return False\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.208202123642\n>>> \n>>> dis(a)\n  5           0 LOAD_CONST               7 ((2, 5, 52, 25, 225, 552))\n              3 UNPACK_SEQUENCE          6\n              6 STORE_FAST               0 (a)\n              9 STORE_FAST               1 (b)\n             12 STORE_FAST               2 (c)\n             15 STORE_FAST               3 (d)\n             18 STORE_FAST               4 (e)\n             21 STORE_FAST               5 (f)\n\n  6          24 LOAD_FAST                0 (a)\n             27 LOAD_FAST                1 (b)\n             30 DUP_TOP             \n             31 ROT_THREE           \n             32 COMPARE_OP               0 (<)\n             35 JUMP_IF_FALSE_OR_POP    80\n             38 LOAD_FAST                2 (c)\n             41 DUP_TOP             \n             42 ROT_THREE           \n             43 COMPARE_OP               0 (<)\n             46 JUMP_IF_FALSE_OR_POP    80\n             49 LOAD_FAST                3 (d)\n             52 DUP_TOP             \n             53 ROT_THREE           \n             54 COMPARE_OP               0 (<)\n             57 JUMP_IF_FALSE_OR_POP    80\n             60 LOAD_FAST                4 (e)\n             63 DUP_TOP             \n             64 ROT_THREE           \n             65 COMPARE_OP               0 (<)\n             68 JUMP_IF_FALSE_OR_POP    80\n             71 LOAD_FAST                5 (f)\n             74 COMPARE_OP               0 (<)\n             77 JUMP_FORWARD             2 (to 82)\n        >>   80 ROT_TWO             \n             81 POP_TOP             \n        >>   82 POP_JUMP_IF_FALSE       89\n\n  7          85 LOAD_GLOBAL              0 (True)\n             88 RETURN_VALUE        \n\n  8     >>   89 LOAD_GLOBAL              1 (False)\n             92 RETURN_VALUE        \n\n>>> \n\n\n\n测试用例 5\n\n更快的方式：\n\ndef a():\n    a = True\n    if a:\n        return True\n    return False\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.109908103943\n>>> \n>>> dis(a)\n  5           0 LOAD_GLOBAL              0 (True)\n              3 STORE_FAST               0 (a)\n\n  6           6 LOAD_FAST                0 (a)\n              9 POP_JUMP_IF_FALSE       16\n\n  7          12 LOAD_GLOBAL              0 (True)\n             15 RETURN_VALUE        \n\n  8     >>   16 LOAD_GLOBAL              1 (False)\n             19 RETURN_VALUE        \n\n>>> \n\n\n更慢方式：\n\ndef a():\n    a = True\n    if a is True:\n        return True\n    return False\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.141321897507\n>>> \n>>> dis(a)\n  5           0 LOAD_GLOBAL              0 (True)\n              3 STORE_FAST               0 (a)\n\n  6           6 LOAD_FAST                0 (a)\n              9 LOAD_GLOBAL              0 (True)\n             12 COMPARE_OP               8 (is)\n             15 POP_JUMP_IF_FALSE       22\n\n  7          18 LOAD_GLOBAL              0 (True)\n             21 RETURN_VALUE        \n\n  8     >>   22 LOAD_GLOBAL              1 (False)\n             25 RETURN_VALUE        \n\n>>> \n\n\n\n最慢的方式：\n\ndef a():\n    a = True\n    if a == True:\n        return True\n    return False\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.149966001511\n>>> \n>>> dis(a)\n  5           0 LOAD_GLOBAL              0 (True)\n              3 STORE_FAST               0 (a)\n\n  6           6 LOAD_FAST                0 (a)\n              9 LOAD_GLOBAL              0 (True)\n             12 COMPARE_OP               2 (==)\n             15 POP_JUMP_IF_FALSE       22\n\n  7          18 LOAD_GLOBAL              0 (True)\n             21 RETURN_VALUE        \n\n  8     >>   22 LOAD_GLOBAL              1 (False)\n             25 RETURN_VALUE        \n\n>>> \n\n\n\n测试用例 6\n\n更快的方式：\n\ndef a():\n    a = 1\n    if not a is 2:\n        return True\n    return False\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.0980911254883\n>>> \n>>> dis(a)\n  5           0 LOAD_CONST               1 (1)\n              3 STORE_FAST               0 (a)\n\n  6           6 LOAD_FAST                0 (a)\n              9 LOAD_CONST               2 (2)\n             12 COMPARE_OP               9 (is not)\n             15 POP_JUMP_IF_FALSE       22\n\n  7          18 LOAD_GLOBAL              0 (True)\n             21 RETURN_VALUE        \n\n  8     >>   22 LOAD_GLOBAL              1 (False)\n             25 RETURN_VALUE        \n\n>>> \n\n\n\n更慢的方式：\n\ndef a():\n    a = 1\n    if a is not 2:\n        return True\n    return False\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.10059595108\n>>> \n>>> dis(a)\n  5           0 LOAD_CONST               1 (1)\n              3 STORE_FAST               0 (a)\n\n  6           6 LOAD_FAST                0 (a)\n              9 LOAD_CONST               2 (2)\n             12 COMPARE_OP               9 (is not)\n             15 POP_JUMP_IF_FALSE       22\n\n  7          18 LOAD_GLOBAL              0 (True)\n             21 RETURN_VALUE        \n\n  8     >>   22 LOAD_GLOBAL              1 (False)\n             25 RETURN_VALUE        \n\n>>> \n\n\n\n最慢的方式：\n\ndef a():\n    a = 1\n    if a != 2:\n        return True\n    return False\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.102056026459\n>>> \n>>> dis(a)\n  5           0 LOAD_CONST               1 (1)\n              3 STORE_FAST               0 (a)\n\n  6           6 LOAD_FAST                0 (a)\n              9 LOAD_CONST               2 (2)\n             12 COMPARE_OP               3 (!=)\n             15 POP_JUMP_IF_FALSE       22\n\n  7          18 LOAD_GLOBAL              0 (True)\n             21 RETURN_VALUE        \n\n  8     >>   22 LOAD_GLOBAL              1 (False)\n             25 RETURN_VALUE        \n\n>>> \n\n\n\n测试用例 7\n\n更快的方式：\n\ndef a():\n    a = []\n    if a:\n        return False\n    return True\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.111177921295\n>>> \n>>> dis(a)\n  5           0 BUILD_LIST               0\n              3 STORE_FAST               0 (a)\n\n  6           6 LOAD_FAST                0 (a)\n              9 POP_JUMP_IF_FALSE       16\n\n  7          12 LOAD_GLOBAL              0 (False)\n             15 RETURN_VALUE        \n\n  8     >>   16 LOAD_GLOBAL              1 (True)\n             19 RETURN_VALUE        \n\n>>> \n\n\n更慢的方式：\n\ndef a():\n    a = []\n    if not a:\n        return True\n    return False\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.113872051239\n>>> \n>>> dis(a)\n  5           0 BUILD_LIST               0\n              3 STORE_FAST               0 (a)\n\n  6           6 LOAD_FAST                0 (a)\n              9 POP_JUMP_IF_TRUE        16\n\n  7          12 LOAD_GLOBAL              0 (True)\n             15 RETURN_VALUE        \n\n  8     >>   16 LOAD_GLOBAL              1 (False)\n             19 RETURN_VALUE        \n\n>>> \n\n\n最慢的方式：\n\ndef a():\n    a = []\n    if len(a) <= 0:\n        return True\n    return False\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.13893699646\n>>> \n>>> dis(a)\n  5           0 BUILD_LIST               0\n              3 STORE_FAST               0 (a)\n\n  6           6 LOAD_GLOBAL              0 (len)\n              9 LOAD_FAST                0 (a)\n             12 CALL_FUNCTION            1\n             15 LOAD_CONST               1 (0)\n             18 COMPARE_OP               1 (<=)\n             21 POP_JUMP_IF_FALSE       28\n\n  7          24 LOAD_GLOBAL              1 (True)\n             27 RETURN_VALUE        \n\n  8     >>   28 LOAD_GLOBAL              2 (False)\n             31 RETURN_VALUE        \n\n>>> \n\n\n超级慢的方式：\n\ndef a():\n    a = []\n    if a == []:\n        return True\n    return False\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.16094994545\n>>> \n>>> dis(a)\n  5           0 BUILD_LIST               0\n              3 STORE_FAST               0 (a)\n\n  6           6 LOAD_FAST                0 (a)\n              9 BUILD_LIST               0\n             12 COMPARE_OP               2 (==)\n             15 POP_JUMP_IF_FALSE       22\n\n  7          18 LOAD_GLOBAL              0 (True)\n             21 RETURN_VALUE        \n\n  8     >>   22 LOAD_GLOBAL              1 (False)\n             25 RETURN_VALUE        \n\n>>> \n\n\n\n测试用例 8\n\n更快的方式：\n\ndef a():\n    a = object()\n    if not a:\n        return False\n    return True\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.150635004044\n>>> \n>>> dis(a)\n  5           0 LOAD_GLOBAL              0 (object)\n              3 CALL_FUNCTION            0\n              6 STORE_FAST               0 (a)\n\n  6           9 LOAD_FAST                0 (a)\n             12 POP_JUMP_IF_TRUE        19\n\n  7          15 LOAD_GLOBAL              1 (False)\n             18 RETURN_VALUE        \n\n  8     >>   19 LOAD_GLOBAL              2 (True)\n             22 RETURN_VALUE        \n\n>>> \n\n\n更慢的方式：\n\ndef a():\n    a = object()\n    if a is None:\n        return False\n    return True\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.15754199028\n>>> \n>>> dis(a)\n  5           0 LOAD_GLOBAL              0 (object)\n              3 CALL_FUNCTION            0\n              6 STORE_FAST               0 (a)\n\n  6           9 LOAD_FAST                0 (a)\n             12 LOAD_CONST               0 (None)\n             15 COMPARE_OP               8 (is)\n             18 POP_JUMP_IF_FALSE       25\n\n  7          21 LOAD_GLOBAL              2 (False)\n             24 RETURN_VALUE        \n\n  8     >>   25 LOAD_GLOBAL              3 (True)\n             28 RETURN_VALUE        \n\n>>> \n\n\n最慢的方式：\n\ndef a():\n    a = object()\n    if a:\n        return True\n    return False\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.157824993134\n>>> \n>>> dis(a)\n  5           0 LOAD_GLOBAL              0 (object)\n              3 CALL_FUNCTION            0\n              6 STORE_FAST               0 (a)\n\n  6           9 LOAD_FAST                0 (a)\n             12 POP_JUMP_IF_FALSE       19\n\n  7          15 LOAD_GLOBAL              1 (True)\n             18 RETURN_VALUE        \n\n  8     >>   19 LOAD_GLOBAL              2 (False)\n             22 RETURN_VALUE        \n\n>>> \n\n\n超级慢的方式：\n\ndef a():\n    a = object()\n    if a is not None:\n        return True\n    return False\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.181853055954\n>>> \n>>> dis(a)\n  5           0 LOAD_GLOBAL              0 (object)\n              3 CALL_FUNCTION            0\n              6 STORE_FAST               0 (a)\n\n  6           9 LOAD_FAST                0 (a)\n             12 LOAD_CONST               0 (None)\n             15 COMPARE_OP               9 (is not)\n             18 POP_JUMP_IF_FALSE       25\n\n  7          21 LOAD_GLOBAL              2 (True)\n             24 RETURN_VALUE        \n\n  8     >>   25 LOAD_GLOBAL              3 (False)\n             28 RETURN_VALUE        \n\n>>> \n\n\n\n测试用例 9\n\n更快的方式：\n\ndef a():\n    a = [1, 2, 3, 4, 5]\n    s = 0\n    for p, v in enumerate(a):\n        s += p\n        s += v\n    return s\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.738418102264\n>>> \n>>> dis(a)\n  5           0 LOAD_CONST               1 (1)\n              3 LOAD_CONST               2 (2)\n              6 LOAD_CONST               3 (3)\n              9 LOAD_CONST               4 (4)\n             12 LOAD_CONST               5 (5)\n             15 BUILD_LIST               5\n             18 STORE_FAST               0 (a)\n\n  6          21 LOAD_CONST               6 (0)\n             24 STORE_FAST               1 (s)\n\n  7          27 SETUP_LOOP              46 (to 76)\n             30 LOAD_GLOBAL              0 (enumerate)\n             33 LOAD_FAST                0 (a)\n             36 CALL_FUNCTION            1\n             39 GET_ITER            \n        >>   40 FOR_ITER                32 (to 75)\n             43 UNPACK_SEQUENCE          2\n             46 STORE_FAST               2 (p)\n             49 STORE_FAST               3 (v)\n\n  8          52 LOAD_FAST                1 (s)\n             55 LOAD_FAST                2 (p)\n             58 INPLACE_ADD         \n             59 STORE_FAST               1 (s)\n\n  9          62 LOAD_FAST                1 (s)\n             65 LOAD_FAST                3 (v)\n             68 INPLACE_ADD         \n             69 STORE_FAST               1 (s)\n             72 JUMP_ABSOLUTE           40\n        >>   75 POP_BLOCK           \n\n 10     >>   76 LOAD_FAST                1 (s)\n             79 RETURN_VALUE        \n\n>>> \n\n\n更慢的方式：\n\ndef a():\n    a = [1, 2, 3, 4, 5]\n    s = 0\n    for i in range(len(a)):\n        s += i\n        s += a[i]\n    return s\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.800552845001\n>>> \n>>> dis(a)\n  5           0 LOAD_CONST               1 (1)\n              3 LOAD_CONST               2 (2)\n              6 LOAD_CONST               3 (3)\n              9 LOAD_CONST               4 (4)\n             12 LOAD_CONST               5 (5)\n             15 BUILD_LIST               5\n             18 STORE_FAST               0 (a)\n\n  6          21 LOAD_CONST               6 (0)\n             24 STORE_FAST               1 (s)\n\n  7          27 SETUP_LOOP              50 (to 80)\n             30 LOAD_GLOBAL              0 (range)\n             33 LOAD_GLOBAL              1 (len)\n             36 LOAD_FAST                0 (a)\n             39 CALL_FUNCTION            1\n             42 CALL_FUNCTION            1\n             45 GET_ITER            \n        >>   46 FOR_ITER                30 (to 79)\n             49 STORE_FAST               2 (i)\n\n  8          52 LOAD_FAST                1 (s)\n             55 LOAD_FAST                2 (i)\n             58 INPLACE_ADD         \n             59 STORE_FAST               1 (s)\n\n  9          62 LOAD_FAST                1 (s)\n             65 LOAD_FAST                0 (a)\n             68 LOAD_FAST                2 (i)\n             71 BINARY_SUBSCR       \n             72 INPLACE_ADD         \n             73 STORE_FAST               1 (s)\n             76 JUMP_ABSOLUTE           46\n        >>   79 POP_BLOCK           \n\n 10     >>   80 LOAD_FAST                1 (s)\n             83 RETURN_VALUE        \n\n>>> \n\n\n\n测试用例 10\n\n更快的方式：\n\ndef a():\n    r = ''\n    for i in range(10):\n        r += str(i)\n    return r\n\n>>> \n>>> timeit(a, number=1000000)\n... 1.63575387001\n>>> \n>>> dis(a)\n  5           0 LOAD_CONST               1 ('')\n              3 STORE_FAST               0 (r)\n\n  6           6 SETUP_LOOP              36 (to 45)\n              9 LOAD_GLOBAL              0 (range)\n             12 LOAD_CONST               2 (10)\n             15 CALL_FUNCTION            1\n             18 GET_ITER            \n        >>   19 FOR_ITER                22 (to 44)\n             22 STORE_FAST               1 (i)\n\n  7          25 LOAD_FAST                0 (r)\n             28 LOAD_GLOBAL              1 (str)\n             31 LOAD_FAST                1 (i)\n             34 CALL_FUNCTION            1\n             37 INPLACE_ADD         \n             38 STORE_FAST               0 (r)\n             41 JUMP_ABSOLUTE           19\n        >>   44 POP_BLOCK           \n\n  8     >>   45 LOAD_FAST                0 (r)\n             48 RETURN_VALUE        \n\n>>> \n\n\n\n更慢的方式：\n\ndef a():\n    r = []\n    for i in range(10):\n        r.append(str(i))\n    return ''.join(r)\n\n>>> \n>>> timeit(a, number=1000000)\n... 2.1280169487\n>>> \n>>> dis(a)\n  5           0 BUILD_LIST               0\n              3 STORE_FAST               0 (r)\n\n  6           6 SETUP_LOOP              39 (to 48)\n              9 LOAD_GLOBAL              0 (range)\n             12 LOAD_CONST               1 (10)\n             15 CALL_FUNCTION            1\n             18 GET_ITER            \n        >>   19 FOR_ITER                25 (to 47)\n             22 STORE_FAST               1 (i)\n\n  7          25 LOAD_FAST                0 (r)\n             28 LOAD_ATTR                1 (append)\n             31 LOAD_GLOBAL              2 (str)\n             34 LOAD_FAST                1 (i)\n             37 CALL_FUNCTION            1\n             40 CALL_FUNCTION            1\n             43 POP_TOP             \n             44 JUMP_ABSOLUTE           19\n        >>   47 POP_BLOCK           \n\n  8     >>   48 LOAD_CONST               2 ('')\n             51 LOAD_ATTR                3 (join)\n             54 LOAD_FAST                0 (r)\n             57 CALL_FUNCTION            1\n             60 RETURN_VALUE        \n\n>>> \n\n\n\n测试用例 11\n\n更快的方式：\n\ndef a():\n    a = 5\n    b = 2\n    c = 3\n    return \"%s\" % (a*(b+c))\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.229720830917\n>>> \n>>> dis(a)\n  5           0 LOAD_CONST               1 (5)\n              3 STORE_FAST               0 (a)\n\n  6           6 LOAD_CONST               2 (2)\n              9 STORE_FAST               1 (b)\n\n  7          12 LOAD_CONST               3 (3)\n             15 STORE_FAST               2 (c)\n\n  8          18 LOAD_CONST               4 ('%s')\n             21 LOAD_FAST                0 (a)\n             24 LOAD_FAST                1 (b)\n             27 LOAD_FAST                2 (c)\n             30 BINARY_ADD          \n             31 BINARY_MULTIPLY     \n             32 BINARY_MODULO       \n             33 RETURN_VALUE        \n\n>>> \n\n\n\n更慢的方式：\n\ndef a():\n    a = 5\n    b = 2\n    c = 3\n    return str(a*(b+c))\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.25043797493\n>>> \n>>> dis(a)\n  5           0 LOAD_CONST               1 (5)\n              3 STORE_FAST               0 (a)\n\n  6           6 LOAD_CONST               2 (2)\n              9 STORE_FAST               1 (b)\n\n  7          12 LOAD_CONST               3 (3)\n             15 STORE_FAST               2 (c)\n\n  8          18 LOAD_GLOBAL              0 (str)\n             21 LOAD_FAST                0 (a)\n             24 LOAD_FAST                1 (b)\n             27 LOAD_FAST                2 (c)\n             30 BINARY_ADD          \n             31 BINARY_MULTIPLY     \n             32 CALL_FUNCTION            1\n             35 RETURN_VALUE        \n\n>>> \n\n\n最慢的方式：\n\ndef a():\n    a = 5\n    b = 2\n    c = 3\n    return \"%d\" % (a*(b+c))\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.583065986633\n>>> \n>>> dis(a)\n  5           0 LOAD_CONST               1 (5)\n              3 STORE_FAST               0 (a)\n\n  6           6 LOAD_CONST               2 (2)\n              9 STORE_FAST               1 (b)\n\n  7          12 LOAD_CONST               3 (3)\n             15 STORE_FAST               2 (c)\n\n  8          18 LOAD_CONST               4 ('%d')\n             21 LOAD_FAST                0 (a)\n             24 LOAD_FAST                1 (b)\n             27 LOAD_FAST                2 (c)\n             30 BINARY_ADD          \n             31 BINARY_MULTIPLY     \n             32 BINARY_MODULO       \n             33 RETURN_VALUE        \n\n>>> \n\n\n\n\n测试用例 12\n\n更快的方式：\n\ndef a():\n    a = [1, 2, 3, 4, 5]\n    return len(a)\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.194615840912\n>>> \n>>> dis(a)\n  5           0 LOAD_CONST               1 (1)\n              3 LOAD_CONST               2 (2)\n              6 LOAD_CONST               3 (3)\n              9 LOAD_CONST               4 (4)\n             12 LOAD_CONST               5 (5)\n             15 BUILD_LIST               5\n             18 STORE_FAST               0 (a)\n\n  6          21 LOAD_GLOBAL              0 (len)\n             24 LOAD_FAST                0 (a)\n             27 CALL_FUNCTION            1\n             30 RETURN_VALUE        \n\n>>> \n\n\n\n\n更慢的方式：\n\ndef a():\n    a = [1, 2, 3, 4, 5]\n    return a.__len__()\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.220345020294\n>>> \n>>> dis(a)\n  5           0 LOAD_CONST               1 (1)\n              3 LOAD_CONST               2 (2)\n              6 LOAD_CONST               3 (3)\n              9 LOAD_CONST               4 (4)\n             12 LOAD_CONST               5 (5)\n             15 BUILD_LIST               5\n             18 STORE_FAST               0 (a)\n\n  6          21 LOAD_FAST                0 (a)\n             24 LOAD_ATTR                0 (__len__)\n             27 CALL_FUNCTION            0\n             30 RETURN_VALUE        \n\n>>> \n\n\n测试用例 13\n\n更快的方式：\n\ndef a():\n    a = 1\n    b = 2\n    c = 2\n    d = 5\n    return (a+b+c)*d\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.170273065567\n>>> \n>>> dis(a)\n  5           0 LOAD_CONST               1 (1)\n              3 STORE_FAST               0 (a)\n\n  6           6 LOAD_CONST               2 (2)\n              9 STORE_FAST               1 (b)\n\n  7          12 LOAD_CONST               2 (2)\n             15 STORE_FAST               2 (c)\n\n  8          18 LOAD_CONST               3 (5)\n             21 STORE_FAST               3 (d)\n\n  9          24 LOAD_FAST                0 (a)\n             27 LOAD_FAST                1 (b)\n             30 BINARY_ADD          \n             31 LOAD_FAST                2 (c)\n             34 BINARY_ADD          \n             35 LOAD_FAST                3 (d)\n             38 BINARY_MULTIPLY     \n             39 RETURN_VALUE        \n\n>>> \n\n\n\n更慢的方式：\n\ndef a():\n    a = 1\n    b = 2\n    c = 2\n    d = 5\n    return (a.__add__(b.__add__(c))).__mul__(d)\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.363096952438\n>>> \n>>> dis(a)\n  5           0 LOAD_CONST               1 (1)\n              3 STORE_FAST               0 (a)\n\n  6           6 LOAD_CONST               2 (2)\n              9 STORE_FAST               1 (b)\n\n  7          12 LOAD_CONST               2 (2)\n             15 STORE_FAST               2 (c)\n\n  8          18 LOAD_CONST               3 (5)\n             21 STORE_FAST               3 (d)\n\n  9          24 LOAD_FAST                0 (a)\n             27 LOAD_ATTR                0 (__add__)\n             30 LOAD_FAST                1 (b)\n             33 LOAD_ATTR                0 (__add__)\n             36 LOAD_FAST                2 (c)\n             39 CALL_FUNCTION            1\n             42 CALL_FUNCTION            1\n             45 LOAD_ATTR                1 (__mul__)\n             48 LOAD_FAST                3 (d)\n             51 CALL_FUNCTION            1\n             54 RETURN_VALUE        \n\n>>> \n\n\n测试用例 14\n\n更快的方式：\n\nclass Z():\n\n    def __init__(self, v):\n        self.v = v\n\n    def __mul__(self, o):\n        return Z(self.v * o.v)\n\n    def __add__(self, o):\n        return Z(self.v + o.v)\n\n\ndef a():\n    a = Z(5)\n    b = Z(2)\n    c = Z(3)\n    return (b.__add__(c)).__mul__(a)\n\n>>> \n>>> timeit(a, number=1000000)\n... 1.7775759697\n>>> \n>>> dis(a)\n 17           0 LOAD_GLOBAL              0 (Z)\n              3 LOAD_CONST               1 (5)\n              6 CALL_FUNCTION            1\n              9 STORE_FAST               0 (a)\n\n 18          12 LOAD_GLOBAL              0 (Z)\n             15 LOAD_CONST               2 (2)\n             18 CALL_FUNCTION            1\n             21 STORE_FAST               1 (b)\n\n 19          24 LOAD_GLOBAL              0 (Z)\n             27 LOAD_CONST               3 (3)\n             30 CALL_FUNCTION            1\n             33 STORE_FAST               2 (c)\n\n 20          36 LOAD_FAST                1 (b)\n             39 LOAD_ATTR                1 (__add__)\n             42 LOAD_FAST                2 (c)\n             45 CALL_FUNCTION            1\n             48 LOAD_ATTR                2 (__mul__)\n             51 LOAD_FAST                0 (a)\n             54 CALL_FUNCTION            1\n             57 RETURN_VALUE        \n\n>>> \n\n\n\n更慢的方式：\n\nclass Z():\n\n    def __init__(self, v):\n        self.v = v\n\n    def __mul__(self, o):\n        return Z(self.v * o.v)\n\n    def __add__(self, o):\n        return Z(self.v + o.v)\n\n\ndef a():\n    a = Z(5)\n    b = Z(2)\n    c = Z(3)\n    return (b + c) * a\n\n>>> \n>>> timeit(a, number=1000000)\n... 2.79053497314\n>>> \n>>> dis(a)\n 17           0 LOAD_GLOBAL              0 (Z)\n              3 LOAD_CONST               1 (5)\n              6 CALL_FUNCTION            1\n              9 STORE_FAST               0 (a)\n\n 18          12 LOAD_GLOBAL              0 (Z)\n             15 LOAD_CONST               2 (2)\n             18 CALL_FUNCTION            1\n             21 STORE_FAST               1 (b)\n\n 19          24 LOAD_GLOBAL              0 (Z)\n             27 LOAD_CONST               3 (3)\n             30 CALL_FUNCTION            1\n             33 STORE_FAST               2 (c)\n\n 20          36 LOAD_FAST                1 (b)\n             39 LOAD_FAST                2 (c)\n             42 BINARY_ADD          \n             43 LOAD_FAST                0 (a)\n             46 BINARY_MULTIPLY     \n             47 RETURN_VALUE        \n\n>>> \n\n\n测试用例 15\n\n更快的方式：\n\ndef a():\n    s = 0\n    for i in range(50000):\n        s += i\n    return s\n\n\nnumber = 100000\n\n>>> \n>>> timeit(a, number=100000)\n... 177.31340313\n>>> \n>>> dis(a)\n  5           0 LOAD_CONST               1 (0)\n              3 STORE_FAST               0 (s)\n\n  6           6 SETUP_LOOP              30 (to 39)\n              9 LOAD_GLOBAL              0 (range)\n             12 LOAD_CONST               2 (50000)\n             15 CALL_FUNCTION            1\n             18 GET_ITER            \n        >>   19 FOR_ITER                16 (to 38)\n             22 STORE_FAST               1 (i)\n\n  7          25 LOAD_FAST                0 (s)\n             28 LOAD_FAST                1 (i)\n             31 INPLACE_ADD         \n             32 STORE_FAST               0 (s)\n             35 JUMP_ABSOLUTE           19\n        >>   38 POP_BLOCK           \n\n  8     >>   39 LOAD_FAST                0 (s)\n             42 RETURN_VALUE        \n\n>>> \n\n\n更慢的方式：\n\ndef a():\n    return sum(i for i in range(50000))\n\n\nnumber = 100000\n\n>>> \n>>> timeit(a, number=100000)\n... 215.36849308\n>>> \n>>> dis(a)\n  5           0 LOAD_GLOBAL              0 (sum)\n              3 LOAD_CONST               1 (<code object <genexpr> at 0x7f7357e854b0, file \"/tmp/__pfw_test15_t2.py\", line 5>)\n              6 MAKE_FUNCTION            0\n              9 LOAD_GLOBAL              1 (range)\n             12 LOAD_CONST               2 (50000)\n             15 CALL_FUNCTION            1\n             18 GET_ITER            \n             19 CALL_FUNCTION            1\n             22 CALL_FUNCTION            1\n             25 RETURN_VALUE        \n\n>>> \n\n\n\n测试用例 16\n\n更快的方式：\n\ndef a():\n    return [i for i in range(1000)]\n\n\nnumber = 100000\n\n>>> \n>>> timeit(a, number=100000)\n... 3.07614183426\n>>> \n>>> dis(a)\n  5           0 BUILD_LIST               0\n              3 LOAD_GLOBAL              0 (range)\n              6 LOAD_CONST               1 (1000)\n              9 CALL_FUNCTION            1\n             12 GET_ITER            \n        >>   13 FOR_ITER                12 (to 28)\n             16 STORE_FAST               0 (i)\n             19 LOAD_FAST                0 (i)\n             22 LIST_APPEND              2\n             25 JUMP_ABSOLUTE           13\n        >>   28 RETURN_VALUE        \n\n>>> \n\n\n\n更慢的方式：\n\ndef a():\n    l = []\n    for i in range(1000):\n        l.append(i)\n    return l\n\n\nnumber = 100000\n\n>>> \n>>> timeit(a, number=100000)\n... 6.29185986519\n>>> \n>>> dis(a)\n  5           0 BUILD_LIST               0\n              3 STORE_FAST               0 (l)\n\n  6           6 SETUP_LOOP              33 (to 42)\n              9 LOAD_GLOBAL              0 (range)\n             12 LOAD_CONST               1 (1000)\n             15 CALL_FUNCTION            1\n             18 GET_ITER            \n        >>   19 FOR_ITER                19 (to 41)\n             22 STORE_FAST               1 (i)\n\n  7          25 LOAD_FAST                0 (l)\n             28 LOAD_ATTR                1 (append)\n             31 LOAD_FAST                1 (i)\n             34 CALL_FUNCTION            1\n             37 POP_TOP             \n             38 JUMP_ABSOLUTE           19\n        >>   41 POP_BLOCK           \n\n  8     >>   42 LOAD_FAST                0 (l)\n             45 RETURN_VALUE        \n\n>>> \n\n\n测试用例 17\n\n更快的方式：\n\ndef a():\n    return {str(i): i*2 for i in range(100)}\n\n>>> \n>>> timeit(a, number=1000000)\n... 17.8982248306\n>>> \n>>> dis(a)\n  5           0 LOAD_CONST               1 (<code object <dictcomp> at 0x7f81ea7854b0, file \"/tmp/__pfw_test17_t3.py\", line 5>)\n              3 MAKE_FUNCTION            0\n              6 LOAD_GLOBAL              0 (range)\n              9 LOAD_CONST               2 (100)\n             12 CALL_FUNCTION            1\n             15 GET_ITER            \n             16 CALL_FUNCTION            1\n             19 RETURN_VALUE        \n\n>>> \n\n\n\n更慢的方式：\n\ndef a():\n    d = {}\n    for i in range(100):\n        d[str(i)] = i*2\n    return d\n\n>>> \n>>> timeit(a, number=1000000)\n... 18.513548851\n>>> \n>>> dis(a)\n  5           0 BUILD_MAP                0\n              3 STORE_FAST               0 (d)\n\n  6           6 SETUP_LOOP              40 (to 49)\n              9 LOAD_GLOBAL              0 (range)\n             12 LOAD_CONST               1 (100)\n             15 CALL_FUNCTION            1\n             18 GET_ITER            \n        >>   19 FOR_ITER                26 (to 48)\n             22 STORE_FAST               1 (i)\n\n  7          25 LOAD_FAST                1 (i)\n             28 LOAD_CONST               2 (2)\n             31 BINARY_MULTIPLY     \n             32 LOAD_FAST                0 (d)\n             35 LOAD_GLOBAL              1 (str)\n             38 LOAD_FAST                1 (i)\n             41 CALL_FUNCTION            1\n             44 STORE_SUBSCR        \n             45 JUMP_ABSOLUTE           19\n        >>   48 POP_BLOCK           \n\n  8     >>   49 LOAD_FAST                0 (d)\n             52 RETURN_VALUE        \n\n>>> \n\n\n\n最慢的方式：\n\ndef a():\n    d = {}\n    for i in range(100):\n        d.update({str(i): i*2})\n    return d\n\n>>> \n>>> timeit(a, number=1000000)\n... 36.9908900261\n>>> \n>>> dis(a)\n  5           0 BUILD_MAP                0\n              3 STORE_FAST               0 (d)\n\n  6           6 SETUP_LOOP              50 (to 59)\n              9 LOAD_GLOBAL              0 (range)\n             12 LOAD_CONST               1 (100)\n             15 CALL_FUNCTION            1\n             18 GET_ITER            \n        >>   19 FOR_ITER                36 (to 58)\n             22 STORE_FAST               1 (i)\n\n  7          25 LOAD_FAST                0 (d)\n             28 LOAD_ATTR                1 (update)\n             31 BUILD_MAP                1\n             34 LOAD_FAST                1 (i)\n             37 LOAD_CONST               2 (2)\n             40 BINARY_MULTIPLY     \n             41 LOAD_GLOBAL              2 (str)\n             44 LOAD_FAST                1 (i)\n             47 CALL_FUNCTION            1\n             50 STORE_MAP           \n             51 CALL_FUNCTION            1\n             54 POP_TOP             \n             55 JUMP_ABSOLUTE           19\n        >>   58 POP_BLOCK           \n\n  8     >>   59 LOAD_FAST                0 (d)\n             62 RETURN_VALUE        \n\n>>> \n\n\n\n测试用例 18\n\n更快的方式：\n\ndef a():\n    l = range(50, -20, -2)\n    return {p: v for p, v in enumerate(l)}\n\n>>> \n>>> timeit(a, number=1000000)\n... 2.82184195518\n>>> \n>>> dis(a)\n  5           0 LOAD_GLOBAL              0 (range)\n              3 LOAD_CONST               1 (50)\n              6 LOAD_CONST               2 (-20)\n              9 LOAD_CONST               3 (-2)\n             12 CALL_FUNCTION            3\n             15 STORE_FAST               0 (l)\n\n  6          18 LOAD_CONST               4 (<code object <dictcomp> at 0x7ff850f7a4b0, file \"/tmp/__pfw_test18_t3.py\", line 6>)\n             21 MAKE_FUNCTION            0\n             24 LOAD_GLOBAL              1 (enumerate)\n             27 LOAD_FAST                0 (l)\n             30 CALL_FUNCTION            1\n             33 GET_ITER            \n             34 CALL_FUNCTION            1\n             37 RETURN_VALUE        \n\n>>> \n\n\n更慢的方式：\n\ndef a():\n    l = range(50, -20, -2)\n    d = {}\n    for p, v in enumerate(l):\n        d[p] = v\n    return d\n\n>>> \n>>> timeit(a, number=1000000)\n... 3.04933786392\n>>> \n>>> dis(a)\n  5           0 LOAD_GLOBAL              0 (range)\n              3 LOAD_CONST               1 (50)\n              6 LOAD_CONST               2 (-20)\n              9 LOAD_CONST               3 (-2)\n             12 CALL_FUNCTION            3\n             15 STORE_FAST               0 (l)\n\n  6          18 BUILD_MAP                0\n             21 STORE_FAST               1 (d)\n\n  7          24 SETUP_LOOP              36 (to 63)\n             27 LOAD_GLOBAL              1 (enumerate)\n             30 LOAD_FAST                0 (l)\n             33 CALL_FUNCTION            1\n             36 GET_ITER            \n        >>   37 FOR_ITER                22 (to 62)\n             40 UNPACK_SEQUENCE          2\n             43 STORE_FAST               2 (p)\n             46 STORE_FAST               3 (v)\n\n  8          49 LOAD_FAST                3 (v)\n             52 LOAD_FAST                1 (d)\n             55 LOAD_FAST                2 (p)\n             58 STORE_SUBSCR        \n             59 JUMP_ABSOLUTE           37\n        >>   62 POP_BLOCK           \n\n  9     >>   63 LOAD_FAST                1 (d)\n             66 RETURN_VALUE        \n\n>>> \n\n\n\n最慢的方式：\n\ndef a():\n    l = range(50, -20, -2)\n    d = {}\n    for p, v in enumerate(l):\n        d.update({p: v})\n    return d\n\n>>> \n>>> timeit(a, number=1000000)\n... 9.87823104858\n>>> \n>>> dis(a)\n  5           0 LOAD_GLOBAL              0 (range)\n              3 LOAD_CONST               1 (50)\n              6 LOAD_CONST               2 (-20)\n              9 LOAD_CONST               3 (-2)\n             12 CALL_FUNCTION            3\n             15 STORE_FAST               0 (l)\n\n  6          18 BUILD_MAP                0\n             21 STORE_FAST               1 (d)\n\n  7          24 SETUP_LOOP              46 (to 73)\n             27 LOAD_GLOBAL              1 (enumerate)\n             30 LOAD_FAST                0 (l)\n             33 CALL_FUNCTION            1\n             36 GET_ITER            \n        >>   37 FOR_ITER                32 (to 72)\n             40 UNPACK_SEQUENCE          2\n             43 STORE_FAST               2 (p)\n             46 STORE_FAST               3 (v)\n\n  8          49 LOAD_FAST                1 (d)\n             52 LOAD_ATTR                2 (update)\n             55 BUILD_MAP                1\n             58 LOAD_FAST                3 (v)\n             61 LOAD_FAST                2 (p)\n             64 STORE_MAP           \n             65 CALL_FUNCTION            1\n             68 POP_TOP             \n             69 JUMP_ABSOLUTE           37\n        >>   72 POP_BLOCK           \n\n  9     >>   73 LOAD_FAST                1 (d)\n             76 RETURN_VALUE        \n\n>>> \n\n\n测试用例 19\n\n更快的方式：\n\ndef a():\n    a = 1\n    if a == 1 or a == 2 or a == 3:\n        return True\n    return False\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.100009918213\n>>> \n>>> dis(a)\n  5           0 LOAD_CONST               1 (1)\n              3 STORE_FAST               0 (a)\n\n  6           6 LOAD_FAST                0 (a)\n              9 LOAD_CONST               1 (1)\n             12 COMPARE_OP               2 (==)\n             15 POP_JUMP_IF_TRUE        42\n             18 LOAD_FAST                0 (a)\n             21 LOAD_CONST               2 (2)\n             24 COMPARE_OP               2 (==)\n             27 POP_JUMP_IF_TRUE        42\n             30 LOAD_FAST                0 (a)\n             33 LOAD_CONST               3 (3)\n             36 COMPARE_OP               2 (==)\n             39 POP_JUMP_IF_FALSE       46\n\n  7     >>   42 LOAD_GLOBAL              0 (True)\n             45 RETURN_VALUE        \n\n  8     >>   46 LOAD_GLOBAL              1 (False)\n             49 RETURN_VALUE        \n\n>>> \n\n\n\n更慢的方式：\n\ndef a():\n    a = 1\n    if a in (1, 2, 3):\n        return True\n    return False\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.105048894882\n>>> \n>>> dis(a)\n  5           0 LOAD_CONST               1 (1)\n              3 STORE_FAST               0 (a)\n\n  6           6 LOAD_FAST                0 (a)\n              9 LOAD_CONST               4 ((1, 2, 3))\n             12 COMPARE_OP               6 (in)\n             15 POP_JUMP_IF_FALSE       22\n\n  7          18 LOAD_GLOBAL              0 (True)\n             21 RETURN_VALUE        \n\n  8     >>   22 LOAD_GLOBAL              1 (False)\n             25 RETURN_VALUE        \n\n>>> \n\n\n\n测试用例 20\n\n更快的方式：\n\n\n\n更慢的方式：\n\n\n\n最慢的方式：\n\n\n\n测试用例 21\n\n更快的方式：\n\ndef a():\n    return ''.join(map(str, xrange(10)))\n\n>>> \n>>> timeit(a, number=1000000)\n... 1.28661704063\n>>> \n>>> dis(a)\n  5           0 LOAD_CONST               1 ('')\n              3 LOAD_ATTR                0 (join)\n              6 LOAD_GLOBAL              1 (map)\n              9 LOAD_GLOBAL              2 (str)\n             12 LOAD_GLOBAL              3 (xrange)\n             15 LOAD_CONST               2 (10)\n             18 CALL_FUNCTION            1\n             21 CALL_FUNCTION            2\n             24 CALL_FUNCTION            1\n             27 RETURN_VALUE        \n\n>>> \n\n\n\n更慢的方式：\n\ndef a():\n    return ''.join(map(str, range(10)))\n\n>>> \n>>> timeit(a, number=1000000)\n... 1.29610896111\n>>> \n>>> dis(a)\n  5           0 LOAD_CONST               1 ('')\n              3 LOAD_ATTR                0 (join)\n              6 LOAD_GLOBAL              1 (map)\n              9 LOAD_GLOBAL              2 (str)\n             12 LOAD_GLOBAL              3 (range)\n             15 LOAD_CONST               2 (10)\n             18 CALL_FUNCTION            1\n             21 CALL_FUNCTION            2\n             24 CALL_FUNCTION            1\n             27 RETURN_VALUE        \n\n>>> \n\n\n\n最慢的方式：\n\ndef a():\n    r = ''\n    for i in range(10):\n        r = '%s%s' % (r, str(i))\n    return r\n\n>>> \n>>> timeit(a, number=1000000)\n... 2.74961709976\n>>> \n>>> dis(a)\n  5           0 LOAD_CONST               1 ('')\n              3 STORE_FAST               0 (r)\n\n  6           6 SETUP_LOOP              42 (to 51)\n              9 LOAD_GLOBAL              0 (range)\n             12 LOAD_CONST               2 (10)\n             15 CALL_FUNCTION            1\n             18 GET_ITER            \n        >>   19 FOR_ITER                28 (to 50)\n             22 STORE_FAST               1 (i)\n\n  7          25 LOAD_CONST               3 ('%s%s')\n             28 LOAD_FAST                0 (r)\n             31 LOAD_GLOBAL              1 (str)\n             34 LOAD_FAST                1 (i)\n             37 CALL_FUNCTION            1\n             40 BUILD_TUPLE              2\n             43 BINARY_MODULO       \n             44 STORE_FAST               0 (r)\n             47 JUMP_ABSOLUTE           19\n        >>   50 POP_BLOCK           \n\n  8     >>   51 LOAD_FAST                0 (r)\n             54 RETURN_VALUE        \n\n>>> \n\n\n测试用例 22\n\n更快的方式：\n\ndef a(n=25):\n    a, b = 0, 1\n    for i in range(n):\n        x = a + b\n        a = b\n        b = x\n    return a\n\n>>> \n>>> timeit(a, number=1000000)\n... 1.34775996208\n>>> \n>>> dis(a)\n  5           0 LOAD_CONST               3 ((0, 1))\n              3 UNPACK_SEQUENCE          2\n              6 STORE_FAST               1 (a)\n              9 STORE_FAST               2 (b)\n\n  6          12 SETUP_LOOP              42 (to 57)\n             15 LOAD_GLOBAL              0 (range)\n             18 LOAD_FAST                0 (n)\n             21 CALL_FUNCTION            1\n             24 GET_ITER            \n        >>   25 FOR_ITER                28 (to 56)\n             28 STORE_FAST               3 (i)\n\n  7          31 LOAD_FAST                1 (a)\n             34 LOAD_FAST                2 (b)\n             37 BINARY_ADD          \n             38 STORE_FAST               4 (x)\n\n  8          41 LOAD_FAST                2 (b)\n             44 STORE_FAST               1 (a)\n\n  9          47 LOAD_FAST                4 (x)\n             50 STORE_FAST               2 (b)\n             53 JUMP_ABSOLUTE           25\n        >>   56 POP_BLOCK           \n\n 10     >>   57 LOAD_FAST                1 (a)\n             60 RETURN_VALUE        \n\n>>> \n\n\n更慢的方式：\n\ndef a(n=25):\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\n>>> \n>>> timeit(a, number=1000000)\n... 1.46058106422\n>>> \n>>> dis(a)\n  5           0 LOAD_CONST               3 ((0, 1))\n              3 UNPACK_SEQUENCE          2\n              6 STORE_FAST               1 (a)\n              9 STORE_FAST               2 (b)\n\n  6          12 SETUP_LOOP              37 (to 52)\n             15 LOAD_GLOBAL              0 (range)\n             18 LOAD_FAST                0 (n)\n             21 CALL_FUNCTION            1\n             24 GET_ITER            \n        >>   25 FOR_ITER                23 (to 51)\n             28 STORE_FAST               3 (i)\n\n  7          31 LOAD_FAST                2 (b)\n             34 LOAD_FAST                1 (a)\n             37 LOAD_FAST                2 (b)\n             40 BINARY_ADD          \n             41 ROT_TWO             \n             42 STORE_FAST               1 (a)\n             45 STORE_FAST               2 (b)\n             48 JUMP_ABSOLUTE           25\n        >>   51 POP_BLOCK           \n\n  8     >>   52 LOAD_FAST                1 (a)\n             55 RETURN_VALUE        \n\n>>> \n\n\n\n测试用例 23\n\n更快的方式：\n\ndef a():\n    x, y, z, w, k = 0, 0, 0, 0, 0\n    return x, y, z, w, k\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.168544054031\n>>> \n>>> dis(a)\n  5           0 LOAD_CONST               2 ((0, 0, 0, 0, 0))\n              3 UNPACK_SEQUENCE          5\n              6 STORE_FAST               0 (x)\n              9 STORE_FAST               1 (y)\n             12 STORE_FAST               2 (z)\n             15 STORE_FAST               3 (w)\n             18 STORE_FAST               4 (k)\n\n  6          21 LOAD_FAST                0 (x)\n             24 LOAD_FAST                1 (y)\n             27 LOAD_FAST                2 (z)\n             30 LOAD_FAST                3 (w)\n             33 LOAD_FAST                4 (k)\n             36 BUILD_TUPLE              5\n             39 RETURN_VALUE        \n\n>>> \n\n\n\n更慢的方式：\n\ndef a():\n    x = 0\n    y = 0\n    z = 0\n    w = 0\n    k = 0\n    return x, y, z, w, k\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.174968957901\n>>> \n>>> dis(a)\n  5           0 LOAD_CONST               1 (0)\n              3 STORE_FAST               0 (x)\n\n  6           6 LOAD_CONST               1 (0)\n              9 STORE_FAST               1 (y)\n\n  7          12 LOAD_CONST               1 (0)\n             15 STORE_FAST               2 (z)\n\n  8          18 LOAD_CONST               1 (0)\n             21 STORE_FAST               3 (w)\n\n  9          24 LOAD_CONST               1 (0)\n             27 STORE_FAST               4 (k)\n\n 10          30 LOAD_FAST                0 (x)\n             33 LOAD_FAST                1 (y)\n             36 LOAD_FAST                2 (z)\n             39 LOAD_FAST                3 (w)\n             42 LOAD_FAST                4 (k)\n             45 BUILD_TUPLE              5\n             48 RETURN_VALUE        \n\n>>> \n\n\n\n最慢的方式：\n\ndef a():\n    x = y = z = w = k = 0\n    return x, y, z, w, k\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.205312013626\n>>> \n>>> dis(a)\n  5           0 LOAD_CONST               1 (0)\n              3 DUP_TOP             \n              4 STORE_FAST               0 (x)\n              7 DUP_TOP             \n              8 STORE_FAST               1 (y)\n             11 DUP_TOP             \n             12 STORE_FAST               2 (z)\n             15 DUP_TOP             \n             16 STORE_FAST               3 (w)\n             19 STORE_FAST               4 (k)\n\n  6          22 LOAD_FAST                0 (x)\n             25 LOAD_FAST                1 (y)\n             28 LOAD_FAST                2 (z)\n             31 LOAD_FAST                3 (w)\n             34 LOAD_FAST                4 (k)\n             37 BUILD_TUPLE              5\n             40 RETURN_VALUE        \n\n>>> \n\n\n\n测试用例 24\n\n更快的方式：\n\ndef a():\n    a = [[1, 2, 3], [2, 3, 4], [4, 5, 6]]\n    b = {k: v for x, k, v in a}\n    return b\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.717478990555\n>>> \n>>> dis(a)\n  5           0 LOAD_CONST               1 (1)\n              3 LOAD_CONST               2 (2)\n              6 LOAD_CONST               3 (3)\n              9 BUILD_LIST               3\n             12 LOAD_CONST               2 (2)\n             15 LOAD_CONST               3 (3)\n             18 LOAD_CONST               4 (4)\n             21 BUILD_LIST               3\n             24 LOAD_CONST               4 (4)\n             27 LOAD_CONST               5 (5)\n             30 LOAD_CONST               6 (6)\n             33 BUILD_LIST               3\n             36 BUILD_LIST               3\n             39 STORE_FAST               0 (a)\n\n  6          42 LOAD_CONST               7 (<code object <dictcomp> at 0x7f9e6e6b94b0, file \"/tmp/__pfw_test24_t3.py\", line 6>)\n             45 MAKE_FUNCTION            0\n             48 LOAD_FAST                0 (a)\n             51 GET_ITER            \n             52 CALL_FUNCTION            1\n             55 STORE_FAST               1 (b)\n\n  7          58 LOAD_FAST                1 (b)\n             61 RETURN_VALUE        \n\n>>> \n\n\n更慢的方式：\n\ndef a():\n    a = [[1, 2, 3], [2, 3, 4], [4, 5, 6]]\n    b = {x[1]: x[2] for x in a}\n    return b\n\n>>> \n>>> timeit(a, number=1000000)\n... 0.744184017181\n>>> \n>>> dis(a)\n  5           0 LOAD_CONST               1 (1)\n              3 LOAD_CONST               2 (2)\n              6 LOAD_CONST               3 (3)\n              9 BUILD_LIST               3\n             12 LOAD_CONST               2 (2)\n             15 LOAD_CONST               3 (3)\n             18 LOAD_CONST               4 (4)\n             21 BUILD_LIST               3\n             24 LOAD_CONST               4 (4)\n             27 LOAD_CONST               5 (5)\n             30 LOAD_CONST               6 (6)\n             33 BUILD_LIST               3\n             36 BUILD_LIST               3\n             39 STORE_FAST               0 (a)\n\n  6          42 LOAD_CONST               7 (<code object <dictcomp> at 0x7fcc514754b0, file \"/tmp/__pfw_test24_t1.py\", line 6>)\n             45 MAKE_FUNCTION            0\n             48 LOAD_FAST                0 (a)\n             51 GET_ITER            \n             52 CALL_FUNCTION            1\n             55 STORE_FAST               1 (b)\n\n  7          58 LOAD_FAST                1 (b)\n             61 RETURN_VALUE        \n\n>>> \n\n\n\n最慢的方式：\n\ndef a():\n    a = [[1, 2, 3], [2, 3, 4], [4, 5, 6]]\n    b = dict((x, y)for w, x, y in a)\n    return b\n\n>>> \n>>> timeit(a, number=1000000)\n... 1.32197403908\n>>> \n>>> dis(a)\n  5           0 LOAD_CONST               1 (1)\n              3 LOAD_CONST               2 (2)\n              6 LOAD_CONST               3 (3)\n              9 BUILD_LIST               3\n             12 LOAD_CONST               2 (2)\n             15 LOAD_CONST               3 (3)\n             18 LOAD_CONST               4 (4)\n             21 BUILD_LIST               3\n             24 LOAD_CONST               4 (4)\n             27 LOAD_CONST               5 (5)\n             30 LOAD_CONST               6 (6)\n             33 BUILD_LIST               3\n             36 BUILD_LIST               3\n             39 STORE_FAST               0 (a)\n\n  6          42 LOAD_GLOBAL              0 (dict)\n             45 LOAD_CONST               7 (<code object <genexpr> at 0x7f5ea06174b0, file \"/tmp/__pfw_test24_t2.py\", line 6>)\n             48 MAKE_FUNCTION            0\n             51 LOAD_FAST                0 (a)\n             54 GET_ITER            \n             55 CALL_FUNCTION            1\n             58 CALL_FUNCTION            1\n             61 STORE_FAST               1 (b)\n\n  7          64 LOAD_FAST                1 (b)\n             67 RETURN_VALUE        \n\n>>> \n\n\n\n                ", "mainLikeNum": ["2 "], "mainBookmarkNum": "9"}