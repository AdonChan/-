{"title": "前后端json数据发送和接收 - 个人文章 ", "index": "javascript,python,flask", "content": "前后端json数据发送和接收\n由于笔者后台使用的是flask框架接收和前端使用的是原生的JavaScript和jQuery的ajax发送，能力有限，在此仅写下我开发项目过程中所得，欢迎指正交流。\n一、flask中的json数据接收\n1、利用flask的request.form.get()方法\nPython后台部分代码\nfrom flask import Flask\nfrom flask import jsonify\nfrom flask import request\nimport json\n...\n\n# 登录\n@app.route(\"/flask/login\", methods=['POST'])\ndef login():\n    data_ = request.form.get('data')\n    data = json.loads(data)\n    username = data['username']\n    password = data['password']\n    rem = False\n    if data['remember']:\n        rem = True\n    return jsonify({\"login\": Login.login(username, password, rem)})  # 返回布尔值\n2、 利用flask的request.get_data()方法\nPython后台代码\nfrom flask import Flask\nfrom flask import jsonify\nfrom flask import request\nimport json\n...\n\n# 登录\n@app.route(\"/flask/login\", methods=['POST'])\ndef login():\n    data = request.get_data()\n    data = json.loads(data)\n    username = data['username']\n    password = data['password']\n    rem = False\n    if data['remember']:\n        rem = True\n    return jsonify({\"login\": Login.login(username, password, rem)})  # 返回布尔值\n3、利用flask的request.get_json()方法\nPython后台代码\nfrom flask import Flask\nfrom flask import jsonify\nfrom flask import request\n\n...\n\n# 登录\n@app.route(\"/flask/login\", methods=['POST'])\ndef login():\n    data = request.get_json()\n    username = data['username']\n    password = data['password']\n    rem = False\n    if data['remember']:\n        rem = True\n    return jsonify({\"login\": Login.login(username, password, rem)})  # 返回布尔值\n二、前端发送json数据\n1、原生XMLHttp发送\nfunction login() {\n    var username =document.getElementById(\"username\").value;\n    var password = document.getElementById(\"password\").value;\n    var remember =document.getElementById(\"remember\").checked;\n    var xmlhttp;\n    if (window.XMLHttpRequest)\n    {\n        //  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码\n        xmlhttp=new XMLHttpRequest();\n    }\n    else\n    {\n        // IE6, IE5 浏览器执行代码\n        xmlhttp=new ActiveXObject(\"Microsoft.XMLHTTP\");\n    }\n    xmlhttp.onreadystatechange=function()\n    {\n        if (xmlhttp.readyState===4 && xmlhttp.status===200)\n        {\n           ...\n        }\n    };\n\n    xmlhttp.open(\"POST\",\"/flask/login\",true);\n    xmlhttp.setRequestHeader(\"Content-type\",\"application/json\");\n    // 后面这两部很重要，我看网上很多都是使用xmlhttp.send(\"username=\"+username+\"&password=\"+\"),这样接收还要解析一番感觉还是直接发送以下格式的好些\n    var data = {\n        \"username\": username\n        \"password\": password\n        \"remember\": remember\n    };\n    var data_json = JSON.stringify(data);\n    xmlhttp.send(data_json);\n}\n附：json数据解析\n   var text = xmlhttp.responseText;\n   //  通过eval() 方法将json格式的字符串转化为js对象，并进行解析获取内容\n   var result = eval(\"(\"+text+\")\");\n   if (result) {\n                \n     } else {\n                alert(\"请输入正确的用户名和密码\");\n            }\n2、ajax发送\n $(document).ready(function () {\n    var data = {\n    \"username\": \"adamin\",\n    \"password\": \"123456789\",\n    \"remember\": true\n    }\n    $.ajax({\n        url: \"/flask/login\",\n        type: \"POST\",\n        data: data,\n        success: function () {\n            \n        }\n    })\n    })\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "9"}