{"title": "【连载】Django入门到实战（一） - 人生苦短，我用Python ", "index": "python,linux,mysql,人工智能,区块链", "content": "推荐本人的《Python 自动化运维实战》课程，提供在线实验环境，边敲代码边学习。\n一、项目目录结构介绍\n\nmanager.py 与项目进行交互的命令行工具集的入口(项目管理器)\nMyDjango 目录：项目容器，包含项目的基本配置，目录名称不建议修改\n__init__.py Python中声明模块的文件，内容默认为空\nsettings.py 项目的总配置文件，包含数据库、Web应用、时间等各种配置\nurls.py URL配置文件，Django项目中所有地址(页面)都需要我们自己去配置其URL\nwsgi.py WSGI(Python Web Server Gateway Interface)Python服务器网关接口，Python应用与Web服务器之间的接口\nmytest目录：开发者创建的应用\n命令行：python manage.py startapp mytest(使用命令行创建应用时需要手动将应用名添加到settings.py中的INSTALLED_APPS里，应用名不能与Python中模块名相同)\nDjango服务器启动命令：python manage.py runserver [端口号]\n二、应用目录结构介绍\n\nmigrations 数据移植(迁移)模块\n__init__.py Python中声明模块的文件，内容默认为空\nadmin.py 应用的后台管理系统的配置\napps.py 应用的一些配置，Django-1.9以后自动生成\nmodels.py 数据模型，使用ORM框架，类似于MVC结构中的Models(模型)\ntests.py 自动化测试模块，Django提供了自动化测试功能，在这里编写测试脚本(语句)\nviews.py 执行响应代码和逻辑处理的主要模块，包含项目中的大部分代码\n三、响应页面示例\n编辑views.py\n每个响应对应一个函数，函数必须返回一个响应，函数必须存在一个参数，一般约定为request，每一个响应(函数)对应一个URL\n编辑urls.py\n每个URL都以url的形式写出来，url函数放在urlpatterns列表中，url函数三个参数：URL(正则)、对应的方法、名称\n四、URL配置\n在根urls.py中引入include；在APP目录下创建urls.py文件，格式与urls.py相同；根urls.py中url函数第二个参数改为include('blog.urls')\n注意事项：根urls.py针对APP配置的URL名称，是该APP所有URL的总路径；   配置URL时注意正则表达式结尾符$和/\n五、Templates介绍\n定义：使用了Django模板语言(Django Template Language, DTL)的HTML文件，也可以使用第三方模板(如Jinja2)\n5.1 使用步骤\n\n在APP的根目录下创建名叫Templates的目录\n在该目录下创建HTML文件\n在views.py中返回render()\n\n\n5.2 DTL初步使用\nrender()函数中支持一个dict类型参数，该字典是后台传递到模板的参数，键为参数名，在模板中使用{{ 参数名 }}来直接使用\n5.3 Django查找Templates\nDjango按照INSTALLED_APPS中的添加顺序查找Templates，不同APP下Templates目录中的同名.html文件会造成冲突\n解决Templates冲突方案：在APP的Templates目录下创建以APP名为名称的目录，将html文件放入新创建的目录下\n六、Models介绍\nDjango中的Models通常是一个Model对应数据库的一张数据表，Django中的Models以类的形式表现，它包含了一些基本字段以及数据的一些行为\nORM(Object-Relational Mapping, 对象关系映射)：实现了对象和数据库之间的映射，隐藏了数据访问的细节，不需要编写SQL语句\n6.1 编写Models步骤\n\n在APP根目录下创建models.py，并引入models模块\n创建类，继承models.Model，该类即是一张数据表\n在类中创建字段，字段即类里面的属性(变量)\n\nattr = models.CharField(max_length = 64) 更多关于类的字段以及可选参数\n6.2 生成数据表：\n命令行中进入manage.p同级目录执行python manage.py makemigrations app_name(可选)，再执行python manage.py migrate\n6.3 查看生成的数据表\nDjango会自动在app/migrations/目录下生成移植文件，执行python manage.py sqlmigrate 应用名 文件id 查看SQL语句\n默认sqlite3的数据库在项目根目录 下db.sqlite3\n\n6.4 前端页面呈现数据\nviews.py中import models\narticle = models.Article.objects.get(pk=1)\nrender(request, page, {'article' : article})\n模板可直接使用对象以及对象的\".\"操作，如{{ article.title }}\n七、Admin介绍\nAdmin是Django自带的一个功能强大的自动化数据管理界面，被授权的用户可直接在Admin中管理数据库，Django提供了许多针对Admin的定制功能\n7.1 配置Admin\n创建超级用户：python manage.py createsuperuser\n后台登录地址：http://127.0.0.1:8000/admin/\n更改语言为中文：修改settings.py中LANGUAGE_CODE = 'zh_Hans'\n7.2配置应用\n在应用下admin.py中引入自身的models模块(或里面的模型类)\n编辑admin.py: admin.site.register(models.Article)\n7.3 修改数据默认显示名称\n在Article类下添加一个方法\n根据Python版本选择__str__(self)或__unicode__(self)， return self.title\n八、Templates过滤器\n写在模板中，属于Django模板语言，可以修改模板中的变量从而显示不同的内容\n使用方法：{{ value | filter }}, 如{{ list_nums | length }}\n过滤器可叠加：{{ value | filter1 | filter2 | … }}\n九、Django Shell\nPython的交互式命令行程序，它自动引入了我们的项目环境\n使用方法：python manage.py shell\n作用：进行调试，测试一些未知方法\n推荐本人的《Python 自动化运维实战》课程，提供在线实验环境，边敲代码边学习。\n\n                ", "mainLikeNum": ["24 "], "mainBookmarkNum": "18"}