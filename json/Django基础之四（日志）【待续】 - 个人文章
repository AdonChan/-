{"title": "Django基础之四（日志）【待续】 - 个人文章 ", "index": "django,python", "content": "Django日志\n简介\nDjango使用python内建的logging模块打印日志，python的logging配置由下面的四个方面组成：\n\n记录器： Logger\n处理程序： Handler\n过滤器： Filter\n格式化： Formatter\n\n记录器 Logger\nLogger 为日志系统的入口。每个logger命名都是bucket，你可以向这个bucket写入需要处理的消息。每个logger 都有一个日志级别。日志级别表示该logger 将要处理的消息的严重性。Python 定义以下几种日志级别：\n\nDEBUG：用于调试目的的底层系统信息\n\nINFO：普通的系统信息\nWARNING：表示出现一个较小的问题。\nERROR：表示出现一个较大的问题。\nCRITICAL：表示出现一个致命的问题。\n\n\n写入logger 的每条消息都是一条日志。每条日志也具有一个日志级别，它表示对应的消息的严重性。每个日志记录还可以包含描述正在打印的事件的元信息。当一条消息传递给logger 时，消息的日志级别将与logger 的日志级别进行比较。如果消息的日志级别大于等于logger 的日志级别，该消息将会往下继续处理。如果小于，该消息将被忽略。Logger 一旦决定消息需要处理，它将传递该消息给一个Handler。\nLogger日志级别\nLogger的配置\nlogger 对应的值是个字典，其每一个键都是logger的名字，每一个值又是个字典，描述了如何配置对应的Logger实例。\n\nlevel （可选的）。logger的级别。\npropagate （可选的）。logger的传播设置。\nfilters （可选的）。logger的filter的标识符的列表。\nhandlers （可选的）。logger的handler的标识符的列表。\n\n参考\n在settings.py中配置日志\nLOGGING = {\n    'loggers': {\n        'reboot': {\n            'handlers': ['file_handler', 'console_handler'],\n            'level': 'DEBUG',\n        },\n    },\n}\n处理程序 Handler\nHandler 决定如何处理logger 中的每条消息。它表示一个特定的日志行为，例如将消息写到屏幕上、写到文件中或者写到网络socket与logger 一样，handler 也有一个日志级别。如果消息的日志级别小于handler 的级别，handler 将忽略该消息Logger 可以有多个handler，而每个handler 可以有不同的日志级别。利用这种方式，可以根据消息的重要性提供不同形式的处理\nFilters 过滤器\nFilter 用于对从logger 传递给handler 的日志记录进行额外的控制。默认情况下，满足日志级别的任何消息都将被处理。通过安装一个filter，你可以对日志处理添加额外的条件。例如，你可以安装一个filter，只允许处理来自特定源的ERROR 消息Filters 还可以用于修改将要处理的日志记录的优先级。例如，如果日志记录满足特定的条件，你可以编写一个filter 将日志记录从ERROR 降为WARNINGFilters 可以安装在logger 上或者handler 上；多个filter 可以串联起来实现多层filter 行为\n\n                ", "mainLikeNum": ["0 "], "mainBookmarkNum": "0"}