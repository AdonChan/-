{"title": "web打印一篇就够，jspdf，wkhtmltopdf - 不吃鱼的猫 ", "index": "python,javascript", "content": "前端时间公司有一个项目要批量打印，主要是打印准考证，考试成绩，以及考试证书。参考方案，前端打印，后端打印\n后端打印\n后端打印主要是用wkhtmltopdf这个，这个框架需要在后端安装一大堆东西，先生成pdf在打印。一句话，一旦出现了问题，修复起来会非常困难，关键代码就一行。但是调试起来却异常困难。\noptions = {\n    'page-size': 'A4',\n    'orientation': 'Landscape',\n    'encoding': 'utf-8',\n    'zoom': 8,\n    'margin-bottom': '0in',\n    'margin-top': '0in',\n    'margin-left': '0in',\n    'margin-right': '0in',\n}\nconfig = pdfkit.configuration(wkhtmltopdf='/usr/local/bin/wkhtmltopdf')\npdfkit.from_url(weburl,filepath, options=options, configuration=config)\n问题往往出现在pdfkit.from_url()，往往在测试环境没有问题，在正式环境上就不行。因为出问题的频率太过频繁，所以考虑换方案\n前端打印\n一番搜索就下列几种方式，比较好一点\njspdf 打印 addHTML\n<script src=\"http://libs.baidu.com/jquery/1.8.3/jquery.min.js\"></script>\n<script src=\"http://html2canvas.hertzen.com/build/html2canvas.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/ace/1.1.01/noconflict/ace.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n<script type=\"text/javascript\" src=\"dist/jspdf.min.js\"></script>\n<script type=\"text/javascript\">\n  $(document).ready(function() {\n    var pdf = new jsPDF('p', 'pt', 'a4');\n    printbypage(pdf, 0);\n  });\n  function printbypage(pdf, k) {\n    console.log(k);\n    var options = {\n      background: '#FFFFFF'\n    };\n    pdf.addHTML($('.dtable')[k], options,\n    function() {\n      if (k < $('.dtable').length - 1) {\n        console.log('true') pdf.addPage();\n        printbypage(pdf, k + 1);\n      } else {\n        pdf.save(\"打印成绩单.pdf\");\n      }\n    });\n  };\n</script>\n结论：存在问题打印时背景黑，数据量大后黑屏率100%\njspdf 打印 addImage\n<script src=\"http://libs.baidu.com/jquery/1.8.3/jquery.min.js\"></script>\n<script src=\"http://html2canvas.hertzen.com/build/html2canvas.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/ace/1.1.01/noconflict/ace.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n<script type=\"text/javascript\" src=\"dist/jspdf.min.js\">\n<script type=\"text/javascript\">\n  $(document).ready(function() {\n    var pdf = new jsPDF('landscape', 'pt', 'a4');\n    printbypage(pdf, 0);\n  });\n  function printbypage(pdf, k) {\n    html2canvas($('.dtable')[k], {\n      taintTest: false,\n      allowTaint: true,\n      background: 'white',\n      onrendered: function(canvas) {\n        console.log(k) if (k < $('.dtable').length) {\n          console.log(true) var pageData = canvas.toDataURL('image/jpeg', 1.0);\n          pdf.addImage(pageData, 'JPEG', 0, 0, 841.89, 595.28);\n          if (k != $('.dtable').length - 1) {\n            pdf.addPage();\n          }\n          printbypage(pdf, k + 1);\n        } else {\n          pdf.save(\"打印证书.pdf\");\n        }\n      }\n    })\n  };\n</script>\n结论：存在问题打印时背景黑，数据量大后黑屏率100%，小数据量好一些\njquery.print\n$(\"#myElementId\").print({\n    globalStyles: true,\n    mediaPrint: false,\n    stylesheet: null,\n    noPrintSelector: \".no-print\",\n    iframe: true,\n    append: null,\n    prepend: null,\n    manuallyCopyFormValues: true,\n    deferred: $.Deferred(),\n    timeout: 750,\n    title: null,\n    doctype: '<!doctype html>'\n});\n结论：开源组织提供的，一般性打印需求可以满足，无法调整边距，纸张打印方向之类。底层都是window.print()实现，优点，使用起来非常方便\nwindow.print 方法\n这个是系统自带的，可以调整边距，可以调整纸张方向，我最终使用的是这个，不同浏览器自己做支持，要是出现了问题，一般都可以解决\n//分页参数\nstyle=\"page-break-before:always;height:667px\"\n@media print\ncss的属性，主要浏览器都支持\n@media print {\n  selector{\n  ...\n  }\n}\nLodop插件\n这个打印插件我并没有使用，需要用户安装，收费\n\n                ", "mainLikeNum": ["7 "], "mainBookmarkNum": "9"}