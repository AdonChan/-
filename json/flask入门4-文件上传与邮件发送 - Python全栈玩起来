{"title": "flask入门4-文件上传与邮件发送 - Python全栈玩起来 ", "index": "python,flask", "content": "文件上传邮件发送\n一、原生文件上传\nform.html\n    <img src=\"{{ url_for('static',filename='img/17.jpg') }}\" width=\"300\" alt=\"\">\n    <form action=\"\" method=\"post\" enctype=\"multipart/form-data\">\n        <p>修改头像 <input type=\"file\" name=\"file\"></p>\n        <p><input type=\"submit\" value=\"提交\"></p>\n    </form>\nmanage.py\n#文件上传的视图函数\n@app.route('/upload/',methods=['GET','POST'])\ndef icon():\n    img_name = None\n    if request.method == 'POST' and 'file' in request.files:\n        # return '有文件上传了'\n        file = request.files.get('file')\n        filename = file.filename #拿到文件名称\n        #图片上传保存的路径\n        imgPath = os.path.join(os.getcwd(), 'static/upload/'+filename)\n        file.save(imgPath)\n        img_name = filename\n    return render_template('user/change_icon.html',img_name=img_name)\n使用wtf和bootstrap渲染文件上传\nfrom flask import Flask,render_template,request\nfrom flask_script import Manager\nfrom flask_wtf import FlaskForm\nfrom flask_wtf.file import FileField,FileAllowed,FileRequired\nfrom wtforms import SubmitField\nfrom flask_uploads import UploadSet,patch_request_class,configure_uploads,IMAGES\nfrom flask_bootstrap import Bootstrap\nimport os\nfrom PIL import Image\n\napp = Flask(__name__)\napp.config['MAX_CONTENT_LENGTH'] = 1024*1024*64\napp.config['SECRET_KEY'] = 'abcdef'\napp.config['UPLOADED_PHOTOS_DEST'] = os.path.join(os.getcwd(),'static/upload')\nbootstrap = Bootstrap(app)\nfile = UploadSet('photos',IMAGES)\nconfigure_uploads(app,file)\npatch_request_class(app,size=None)\nmanager = Manager(app)\n\n#自定义一个文件上传的表单类\nclass File(FlaskForm):\n    photos = FileField('修改头像',validators=[FileRequired(message='文件不能为空'),FileAllowed(file,message='该文件类型不允许上传')])\n    submit = SubmitField('提交')\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n#生成随机的图片名称\ndef random_name(suffix,length=32):\n    import string,random\n    myStr = string.ascii_letters + '0123456789'\n    return ''.join(random.choice(myStr) for i in range(length))+suffix\n\n@app.route('/upload/',methods=['GET','POST'])\ndef icon():\n    form = File()\n    img_url = None\n    if form.validate_on_submit():\n        data = request.files.get('photos')\n        suffix = os.path.splitext(data.filename)[-1]\n        newName = random_name(suffix)\n        file.save(data,name=newName)\n        img_url = file.url(newName)\n\n        img = Image.open(os.path.join(app.config['UPLOADED_PHOTOS_DEST'],newName))\n        print(img.size)  # 获取图片大小\n        # 设置尺寸\n        img.thumbnail((128, 128))  # 当前缩放不是等比缩放 变成等比缩放\n        img.save(os.path.join(app.config['UPLOADED_PHOTOS_DEST'],'s_'+newName))\n    return render_template('user/wtf-uplods.html',form=form,img_url=img_url)\n\nif __name__ == '__main__':\n    manager.run()\n模板中的代码\nfrom flask import Flask,render_template,request\nfrom flask_script import Manager\nfrom flask_wtf import FlaskForm\nfrom flask_wtf.file import FileField,FileAllowed,FileRequired\nfrom wtforms import SubmitField\nfrom flask_uploads import UploadSet,patch_request_class,configure_uploads,IMAGES\nfrom flask_bootstrap import Bootstrap\nimport os\nfrom PIL import Image\n\napp = Flask(__name__)\napp.config['MAX_CONTENT_LENGTH'] = 1024*1024*64\napp.config['SECRET_KEY'] = 'abcdef'\napp.config['UPLOADED_PHOTOS_DEST'] = os.path.join(os.getcwd(),'static/upload')\nbootstrap = Bootstrap(app)\nfile = UploadSet('photos',IMAGES)\nconfigure_uploads(app,file)\npatch_request_class(app,size=None)\nmanager = Manager(app)\n\n#自定义一个文件上传的表单类\nclass File(FlaskForm):\n    photos = FileField('修改头像',validators=[FileRequired(message='文件不能为空'),FileAllowed(file,message='该文件类型不允许上传')])\n    submit = SubmitField('提交')\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n#生成随机的图片名称\ndef random_name(suffix,length=32):\n    import string,random\n    myStr = string.ascii_letters + '0123456789'\n    return ''.join(random.choice(myStr) for i in range(length))+suffix\n\n@app.route('/upload/',methods=['GET','POST'])\ndef icon():\n    form = File()\n    img_url = None\n    if form.validate_on_submit():\n        data = request.files.get('photos')\n        suffix = os.path.splitext(data.filename)[-1]\n        newName = random_name(suffix)\n        file.save(data,name=newName)\n        img_url = file.url(newName)\n\n        img = Image.open(os.path.join(app.config['UPLOADED_PHOTOS_DEST'],newName))\n        print(img.size)  # 获取图片大小\n        # 设置尺寸\n        img.thumbnail((128, 128))  # 当前缩放不是等比缩放 变成等比缩放\n        img.save(os.path.join(app.config['UPLOADED_PHOTOS_DEST'],'s_'+newName))\n    return render_template('user/wtf-uplods.html',form=form,img_url=img_url)\n\nif __name__ == '__main__':\n    manager.run()\n二、发送邮件  flask-mail\npip install flask-mail\n设置临时环境变量\nwindows   set 名=值  \nUbuntu下   export 名=值注意： 名和值都不用加引号\n单线程发送邮件\nfrom flask import Flask,render_template\nfrom flask_script import Manager\nfrom flask_mail import Mail,Message\nimport os\n\napp = Flask(__name__)\napp.config['MAIL_SERVER'] = 'smtp.163.com'\n# 为了保密 将邮箱账号和授权码都加入到了临时环境变量中\napp.config['MAIL_USERNAME'] = os.environ.get('MAIL_USERNAME')\napp.config['MAIL_PASSWORD'] = os.environ.get('MAIL_PASSWORD')\n\nmail = Mail(app)\nmanager = Manager(app)\n\n@app.route('/send_mail/')\ndef send_mail():\n    msg = Message(subject='大郎',recipients=['793390457@qq.com'],sender=app.config['MAIL_USERNAME'])\n    msg.html = render_template('email/activate.html',username='大郎')\n    mail.send(message=msg)\n    return '发送邮件'\n\nif __name__ == '__main__':\n    manager.run()\n异步发送邮件\nfrom flask import Flask,render_template\nfrom flask_script import Manager\nfrom flask_mail import Mail,Message\nimport os\nfrom threading import Thread\n\napp = Flask(__name__)\napp.config['MAIL_SERVER'] = 'smtp.163.com'\napp.config['MAIL_USERNAME'] = os.environ.get('MAIL_USERNAME')\napp.config['MAIL_PASSWORD'] = os.environ.get('MAIL_PASSWORD')\n\nmail = Mail(app)\nmanager = Manager(app)\n\n@app.route('/send_mail/')\ndef send_mail():\n    msg = Message(subject='大郎',recipients=['793390457@qq.com'],sender=app.config['MAIL_USERNAME'])\n    msg.html = render_template('email/activate.html',username='大郎')\n    thr = Thread(target=async_send_mail,args=(msg,)) #创建线程 参数1为创建子线程 参数2为传递参数 类型为元组\n    thr.start() #开启线程\n    return '发送邮件'\n\ndef async_send_mail(msg):\n    #开启程序上下文  把当前请求 作为同一个请求\n    with app.app_context():\n        mail.send(message=msg)\n\nif __name__ == '__main__':\n    manager.run()\nflask入门5-model\n\n                ", "mainLikeNum": ["1 "], "mainBookmarkNum": "0"}